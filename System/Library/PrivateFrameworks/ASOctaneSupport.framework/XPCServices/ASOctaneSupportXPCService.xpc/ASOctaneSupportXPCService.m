void sub_100003378(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t vars8;

  v7 = a2;
  v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v7])
  {
    v6 = sub_1000033FC(*(void **)(a1 + 48), a3);
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
  }
}

id sub_1000033FC(void *a1, uint64_t a2)
{
  id v3 = a1;
  switch([v3 _declaredTypeForColumnIndex:a2])
  {
    case 0u:
      v4 = 0;
      switch([v3 _columnTypeForColumnIndex:a2])
      {
        case 1u:
          uint64_t v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 int64ForColumnIndex:a2]);
          goto LABEL_10;
        case 2u:
          [v3 doubleForColumnIndex:a2];
          uint64_t v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          goto LABEL_10;
        case 3u:
          goto LABEL_4;
        case 5u:
          goto LABEL_11;
        default:
          uint64_t v5 = [v3 dataForColumnIndex:a2];
          goto LABEL_10;
      }
      break;
    case 1u:
      uint64_t v5 = [v3 dateForColumnIndex:a2];
      goto LABEL_10;
    case 2u:
      uint64_t v5 = [v3 JSONObjectForColumnIndex:a2];
      goto LABEL_10;
    case 3u:
      uint64_t v5 = [v3 UUIDForColumnIndex:a2];
      goto LABEL_10;
    case 4u:
      uint64_t v5 = [v3 URLForColumnIndex:a2];
      goto LABEL_10;
    case 5u:
LABEL_4:
      uint64_t v5 = [v3 stringForColumnIndex:a2];
LABEL_10:
      v4 = (void *)v5;
      break;
    default:
      v4 = 0;
      break;
  }
LABEL_11:

  return v4;
}

void sub_100003654(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  v2 = off_100308740;
  off_100308740 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  v4 = (void *)qword_10031AF10;
  qword_10031AF10 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  v6 = (void *)qword_10031AF18;
  qword_10031AF18 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  v8 = (void *)qword_10031AF20;
  qword_10031AF20 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  v10 = (void *)qword_10031AF28;
  qword_10031AF28 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  v12 = (void *)qword_10031AF30;
  qword_10031AF30 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  v14 = (void *)qword_10031AF38;
  qword_10031AF38 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  v16 = (void *)qword_10031AF40;
  qword_10031AF40 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  v18 = (void *)qword_10031AF48;
  qword_10031AF48 = (uint64_t)v17;

  qword_10031AF50 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

uint64_t sub_1000037C4(unsigned int *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v4 = a1[5];
  if ((v4 & 0x7F000000) != 0) {
    return 0;
  }
  int v9 = *a1;
  unsigned int v10 = a1[1];
  uint64_t v11 = (*a1 >> 10) & 0x7F;
  if (!a4)
  {
    if (v11 <= 0x3F)
    {
      if (((1 << v11) & 0x40016) != 0) {
        return 0;
      }
      if (v11 == 63)
      {
        if (*(void *)(a2 + 56))
        {
          *a1 = v9 & 0xFFFE03FF | 0xFC00;
          if ((*(unsigned int (**)(unsigned int *))(a2 + 56))(a1))
          {
            uint64_t v5 = 0;
            a1[1] = v10;
            a1[5] = a1[5] & 0x80FFFFFF | 0x7000000;
            return v5;
          }
        }
        return 0;
      }
    }
    a1[5] = v4 & 0x80FFFFFF | 0xB000000;
    return 1;
  }
  v12 = a3;
  if (v11 == 45) {
    os_log_t v13 = a3;
  }
  else {
    os_log_t v13 = 0;
  }
  v194 = v13;
  if (v11 == 50) {
    v14 = a3;
  }
  else {
    v14 = 0;
  }
  unsigned int v15 = v11 - 21;
  if (v11 == 16) {
    v16 = a3;
  }
  else {
    v16 = 0;
  }
  BOOL v17 = v15 >= 0xB;
  if (v15 >= 0xB) {
    v18 = 0;
  }
  else {
    v18 = a3;
  }
  v196 = v18;
  if (v17) {
    v19 = v16;
  }
  else {
    v19 = 0;
  }
  v197 = v19;
  v198 = 0;
  v20 = &a3[a4];
  uint64_t v192 = (uint64_t)&a3[a4 - 1];
  v21 = a3;
LABEL_21:
  unsigned __int8 v22 = *v21;
  if (v11 < 0x3B && ++v10 > dword_100308748)
  {
    v195 = v12;
    goto LABEL_776;
  }
  while (2)
  {
    v23 = v14;
LABEL_24:
    v14 = v23;
    switch((int)v11)
    {
      case 1:
        LODWORD(v11) = 1;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_626;
        }
        v195 = v12;
        unsigned int v190 = a1[5];
        char v185 = 13;
        goto LABEL_764;
      case 2:
        LODWORD(v11) = 2;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_626;
        }
        int v63 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1;
        if (v22 == 72)
        {
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C514();
          }
          if (!*(void *)a2)
          {
            LODWORD(v11) = 3;
            goto LABEL_626;
          }
          unsigned int v133 = v63 & 0xDFFE0003 | 0xC00;
LABEL_622:
          *a1 = v133;
          int v162 = (*(uint64_t (**)(unsigned int *))a2)(a1);
          unsigned int v163 = a1[5];
          if (v162)
          {
            a1[1] = v10;
            unsigned int v163 = v163 & 0x80FFFFFF | 0x1000000;
            a1[5] = v163;
          }
          if ((v163 & 0x7F000000) == 0)
          {
LABEL_625:
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
            goto LABEL_626;
          }
          goto LABEL_762;
        }
        unsigned int v64 = v63 & 0xDFFFFC00;
        LODWORD(v11) = 18;
LABEL_204:
        *a1 = v64;
        continue;
      case 3:
        if (v22 == 84)
        {
          *a1 = *a1 & 0xFFFFFFFC | 1;
LABEL_277:
          LODWORD(v11) = 6;
          goto LABEL_626;
        }
        if (v22 == 69)
        {
          int v137 = *a1;
          *((unsigned char *)a1 + 22) = 2;
          *a1 = v137 & 0xE0FFFFFC | 0x2000000;
LABEL_455:
          LODWORD(v11) = 19;
          goto LABEL_626;
        }
        v195 = v12;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1C000000;
        a1[5] = v179;
        LOBYTE(v11) = 3;
        goto LABEL_668;
      case 4:
        LODWORD(v11) = 4;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_626;
        }
        int v79 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1;
        unsigned int v80 = a1[5];
        if (v22 != 72)
        {
          v195 = v12;
          unsigned int v179 = v80 & 0x80FFFFFF | 0x1C000000;
          a1[5] = v179;
          LOBYTE(v11) = 4;
          goto LABEL_668;
        }
        if ((v80 & 0x7F000000) != 0) {
          sub_10024C540();
        }
        if (!*(void *)a2)
        {
          LODWORD(v11) = 5;
          goto LABEL_626;
        }
        unsigned int v81 = v79 & 0xDFFE0003;
        int v82 = 5120;
LABEL_621:
        unsigned int v133 = v81 | v82;
        goto LABEL_622;
      case 5:
        if (v22 == 84) {
          goto LABEL_277;
        }
        v195 = v12;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 5;
        goto LABEL_668;
      case 6:
        if (v22 == 84)
        {
          LODWORD(v11) = 7;
          goto LABEL_626;
        }
        v195 = v12;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 6;
        goto LABEL_668;
      case 7:
        if (v22 == 80)
        {
          LODWORD(v11) = 8;
          goto LABEL_626;
        }
        v195 = v12;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 7;
        goto LABEL_668;
      case 8:
        if (v22 == 47)
        {
          LODWORD(v11) = 9;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 8;
        goto LABEL_668;
      case 9:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 8) = v22 - 48;
          LODWORD(v11) = 10;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 9;
        goto LABEL_668;
      case 10:
        if (v22 == 46)
        {
          LODWORD(v11) = 11;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 10;
        goto LABEL_668;
      case 11:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 9) = v22 - 48;
          LODWORD(v11) = 12;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 11;
        goto LABEL_668;
      case 12:
        if (v22 == 32) {
          goto LABEL_457;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 12;
        goto LABEL_668;
      case 13:
        if ((v22 - 48) >= 0xAu)
        {
          if (v22 == 32)
          {
LABEL_457:
            LODWORD(v11) = 13;
            goto LABEL_626;
          }
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0xF000000;
          a1[5] = v179;
          LOBYTE(v11) = 13;
          goto LABEL_668;
        }
        *((_WORD *)a1 + 10) = v22 - 48;
        goto LABEL_437;
      case 14:
        if ((v22 - 48) < 0xAu)
        {
          unsigned int v130 = a1[5];
          unsigned int v131 = (unsigned __int16)((char)v22 + 10 * v130 - 48);
          unsigned int v132 = v130 & 0xFFFF0000 | v131;
          a1[5] = v132;
          if (v131 < 0x3E8)
          {
LABEL_437:
            LODWORD(v11) = 14;
            goto LABEL_626;
          }
          v195 = v12;
          a1[1] = v10;
          unsigned int v176 = v132 & 0x80FFFFFF;
          goto LABEL_723;
        }
        LODWORD(v11) = 15;
        if (v22 != 10 && v22 != 13)
        {
          if (v22 == 32) {
            goto LABEL_626;
          }
          v195 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF;
LABEL_723:
          unsigned int v179 = v176 | 0xF000000;
          a1[5] = v176 | 0xF000000;
          LOBYTE(v11) = 14;
          goto LABEL_668;
        }
        goto LABEL_24;
      case 15:
        v40 = v197;
        if (!v197) {
          v40 = v21;
        }
        v197 = v40;
        *a1 &= 0xE0FFFFFF;
        LODWORD(v11) = 16;
        if (v22 != 10 && v22 != 13) {
          goto LABEL_626;
        }
        goto LABEL_24;
      case 16:
        if (v22 == 10)
        {
          v76 = v197;
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C598();
          }
          if (!v197)
          {
            v197 = 0;
LABEL_334:
            LODWORD(v11) = 44;
            goto LABEL_626;
          }
          LODWORD(v11) = 44;
          if (!*(void *)(a2 + 16))
          {
LABEL_562:
            v197 = 0;
            goto LABEL_626;
          }
        }
        else
        {
          if (v22 != 13)
          {
            LODWORD(v11) = 16;
            goto LABEL_626;
          }
          v76 = v197;
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C56C();
          }
          if (!v197)
          {
            v197 = 0;
            LODWORD(v11) = 17;
            goto LABEL_626;
          }
          LODWORD(v11) = 17;
          if (!*(void *)(a2 + 16)) {
            goto LABEL_562;
          }
        }
        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v158 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 16))(a1, v76, v21 - v76);
        unsigned int v159 = a1[5];
        if (v158)
        {
          a1[1] = v10;
          unsigned int v159 = v159 & 0x80FFFFFF | 0x8000000;
          a1[5] = v159;
        }
        if ((v159 & 0x7F000000) == 0)
        {
          v197 = 0;
          goto LABEL_625;
        }
        goto LABEL_762;
      case 17:
        if (v22 == 10) {
          goto LABEL_334;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 17;
        goto LABEL_668;
      case 18:
        LODWORD(v11) = 18;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_626;
        }
        int v83 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1;
        if (((v22 | 0x20) - 123) <= 0xE5u)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v191 = a1[5] & 0x80FFFFFF;
LABEL_798:
          unsigned int v179 = v191 | 0x10000000;
          a1[5] = v191 | 0x10000000;
          LOBYTE(v11) = 18;
          goto LABEL_668;
        }
        unsigned int v84 = a1[5];
        unsigned int v85 = v84 & 0xFF00FFFF;
        a1[5] = v84 & 0xFF00FFFF;
        unsigned int v86 = v83 & 0xC0FFFC03 | 0x1000000;
        *a1 = v86;
        int v87 = 1245184;
        switch(v22)
        {
          case 'A':
            goto LABEL_617;
          case 'B':
            int v87 = 0x100000;
            goto LABEL_617;
          case 'C':
            int v87 = 327680;
            goto LABEL_617;
          case 'D':
            goto LABEL_618;
          case 'G':
            int v87 = 0x10000;
            goto LABEL_617;
          case 'H':
            int v87 = 0x20000;
            goto LABEL_617;
          case 'L':
            int v87 = 589824;
            goto LABEL_617;
          case 'M':
            int v87 = 655360;
            goto LABEL_617;
          case 'N':
            int v87 = 1638400;
            goto LABEL_617;
          case 'O':
            int v87 = 393216;
            goto LABEL_617;
          case 'P':
            int v87 = 196608;
            goto LABEL_617;
          case 'R':
            int v87 = 1310720;
            goto LABEL_617;
          case 'S':
            int v87 = 1703936;
            goto LABEL_617;
          case 'T':
            int v87 = 458752;
            goto LABEL_617;
          case 'U':
            int v87 = 983040;
LABEL_617:
            v85 |= v87;
            a1[5] = v85;
LABEL_618:
            if ((v85 & 0x7F000000) != 0) {
              sub_10024C5C4();
            }
            if (!*(void *)a2) {
              goto LABEL_455;
            }
            unsigned int v81 = v86 & 0xC1FE0003;
            int v82 = 19456;
            break;
          default:
            v195 = v12;
            a1[1] = v10;
            unsigned int v191 = v84 & 0x8000FFFF;
            goto LABEL_798;
        }
        goto LABEL_621;
      case 19:
        if (v22)
        {
          unsigned int v88 = a1[5];
          v89 = off_1002D4728[BYTE2(v88)];
          unint64_t v90 = *a1;
          uint64_t v91 = (v90 >> 24) & 0x1F;
          if (v22 == 32 && !v89[v91])
          {
            LODWORD(v11) = 20;
LABEL_641:
            *a1 = v90 & 0xE0FFFFFF | ((((v90 + 0x1000000) >> 24) & 0x1F) << 24);
            goto LABEL_626;
          }
          if (v89[v91] == v22)
          {
LABEL_640:
            LODWORD(v11) = 19;
            goto LABEL_641;
          }
          if (v22 == 45 || (v22 - 65) <= 0x19u)
          {
            int v92 = v88 & 0xFF0000 | (v91 << 8) | (char)v22;
            if (v92 <= 655694)
            {
              if (v92 <= 328007)
              {
                if (v92 > 196948)
                {
                  if (v92 == 196949)
                  {
                    int v93 = 0x40000;
                    goto LABEL_639;
                  }
                  if (v92 == 262738)
                  {
                    int v93 = 1900544;
                    goto LABEL_639;
                  }
                }
                else
                {
                  if (v92 == 196929)
                  {
                    int v93 = 1835008;
                    goto LABEL_639;
                  }
                  if (v92 == 196946)
                  {
                    int v93 = 786432;
                    goto LABEL_639;
                  }
                }
              }
              else if (v92 <= 590152)
              {
                if (v92 == 328008)
                {
                  int v93 = 1441792;
                  goto LABEL_639;
                }
                if (v92 == 328272)
                {
                  int v93 = 0x80000;
                  goto LABEL_639;
                }
              }
              else
              {
                switch(v92)
                {
                  case 590153:
                    int v93 = 2031616;
                    goto LABEL_639;
                  case 655661:
                    int v93 = 1572864;
                    goto LABEL_639;
                  case 655685:
                    int v93 = 1507328;
                    goto LABEL_639;
                }
              }
            }
            else if (v92 > 983634)
            {
              if (v92 <= 1311297)
              {
                if (v92 == 983635)
                {
                  int v93 = 1769472;
                  goto LABEL_639;
                }
                if (v92 == 983881)
                {
                  int v93 = 0x200000;
                  goto LABEL_639;
                }
              }
              else
              {
                switch(v92)
                {
                  case 1311298:
                    int v93 = 1114112;
                    goto LABEL_639;
                  case 1704261:
                    int v93 = 917504;
                    goto LABEL_639;
                  case 1704271:
                    int v93 = 2162688;
                    goto LABEL_639;
                }
              }
            }
            else if (v92 <= 656192)
            {
              if (v92 == 655695)
              {
                int v93 = 720896;
                goto LABEL_639;
              }
              if (v92 == 655937)
              {
                int v93 = 1376256;
                goto LABEL_639;
              }
            }
            else
            {
              switch(v92)
              {
                case 656193:
                  int v93 = 1966080;
                  goto LABEL_639;
                case 787536:
                  int v93 = 851968;
                  goto LABEL_639;
                case 983618:
                  int v93 = 1179648;
LABEL_639:
                  a1[5] = v88 & 0xFF00FFFF | v93;
                  goto LABEL_640;
              }
            }
          }
          v195 = v12;
          a1[1] = v10;
          unsigned int v186 = v88 & 0x80FFFFFF;
        }
        else
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v186 = a1[5] & 0x80FFFFFF;
        }
        unsigned int v179 = v186 | 0x10000000;
        a1[5] = v186 | 0x10000000;
        LOBYTE(v11) = 19;
        goto LABEL_668;
      case 20:
        LODWORD(v11) = 20;
        if (v22 == 32) {
          goto LABEL_626;
        }
        v94 = v196;
        if (!v196) {
          v94 = v21;
        }
        v195 = v12;
        v196 = v94;
        unsigned int v190 = a1[5];
        if ((v190 & 0xFF0000) == 0x50000) {
          int v95 = 24;
        }
        else {
          int v95 = 20;
        }
        LODWORD(v11) = sub_100006450(v95, (char)v22);
        if (v11 != 1)
        {
          v12 = v195;
          goto LABEL_626;
        }
        a1[1] = v10;
        goto LABEL_786;
      case 21:
      case 22:
      case 23:
      case 24:
        unsigned int v66 = (char)v22;
        if ((char)v22 > 0x20 || ((1 << v22) & 0x100002400) == 0) {
          goto LABEL_241;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x11000000;
        goto LABEL_729;
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        if (v22 == 10 || (unsigned int v66 = (char)v22, v22 == 13))
        {
          a1[4] = 589824;
          if (v22 == 13) {
            LODWORD(v11) = 43;
          }
          else {
            LODWORD(v11) = 44;
          }
          v67 = v196;
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C61C();
          }
          if (!v196 || !*(void *)(a2 + 8))
          {
            v196 = 0;
            goto LABEL_626;
          }
          unsigned int v75 = *a1 & 0xFFFE03FF | (v11 << 10);
        }
        else
        {
          if (v22 != 32)
          {
LABEL_241:
            LODWORD(v11) = sub_100006450(v11, v66);
            if (v11 != 1) {
              goto LABEL_626;
            }
            v195 = v12;
            a1[1] = v10;
            unsigned int v190 = a1[5];
LABEL_786:
            char v185 = 17;
LABEL_764:
            unsigned int v179 = v190 & 0x80FFFFFF | ((v185 & 0x7F) << 24);
            a1[5] = v179;
            LOBYTE(v11) = 1;
            goto LABEL_668;
          }
          v67 = v196;
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C5F0();
          }
          if (!v196 || !*(void *)(a2 + 8))
          {
            v196 = 0;
            LODWORD(v11) = 32;
            goto LABEL_626;
          }
          unsigned int v75 = *a1 & 0xFFFE03FF | 0x8000;
        }
        *a1 = v75;
        int v134 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 8))(a1, v67, v21 - v67);
        unsigned int v135 = a1[5];
        if (v134)
        {
          a1[1] = v10;
          unsigned int v135 = v135 & 0x80FFFFFF | 0x2000000;
          a1[5] = v135;
        }
        if ((v135 & 0x7F000000) != 0) {
          goto LABEL_762;
        }
        v196 = 0;
        goto LABEL_625;
      case 32:
        LODWORD(v11) = (char)v22;
        switch(v22)
        {
          case ' ':
            goto LABEL_626;
          case 'H':
            LODWORD(v11) = 33;
            goto LABEL_626;
          case 'I':
            unsigned int v126 = a1[5];
            if ((v126 & 0xFF0000) == 0x210000)
            {
              LODWORD(v11) = 37;
              goto LABEL_626;
            }
            v195 = v12;
            break;
          default:
            v195 = v12;
            unsigned int v126 = a1[5];
            break;
        }
        a1[1] = v10;
        unsigned int v179 = v126 & 0x80FFFFFF | 0x1C000000;
        a1[5] = v179;
        LOBYTE(v11) = 32;
        goto LABEL_668;
      case 33:
        if (v22 == 84)
        {
          LODWORD(v11) = 34;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 33;
        goto LABEL_668;
      case 34:
        if (v22 == 84)
        {
          LODWORD(v11) = 35;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 34;
        goto LABEL_668;
      case 35:
        if (v22 == 80) {
          goto LABEL_424;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 35;
        goto LABEL_668;
      case 36:
        if (v22 == 47)
        {
          LODWORD(v11) = 39;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 36;
        goto LABEL_668;
      case 37:
        if (v22 == 67)
        {
          LODWORD(v11) = 38;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 37;
        goto LABEL_668;
      case 38:
        if (v22 == 69)
        {
LABEL_424:
          LODWORD(v11) = 36;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 38;
        goto LABEL_668;
      case 39:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 8) = v22 - 48;
          LODWORD(v11) = 40;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 39;
        goto LABEL_668;
      case 40:
        if (v22 == 46)
        {
          LODWORD(v11) = 41;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 40;
        goto LABEL_668;
      case 41:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 9) = v22 - 48;
          LODWORD(v11) = 42;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v179;
        LOBYTE(v11) = 41;
        goto LABEL_668;
      case 42:
        if (v22 == 13)
        {
          LODWORD(v11) = 43;
          goto LABEL_626;
        }
        if (v22 != 10)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0xE000000;
          a1[5] = v179;
          LOBYTE(v11) = 42;
          goto LABEL_668;
        }
        goto LABEL_334;
      case 43:
        if (v22 == 10) {
          goto LABEL_334;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x17000000;
        a1[5] = v179;
        LOBYTE(v11) = 43;
        goto LABEL_668;
      case 44:
        LODWORD(v11) = 57;
        if (v22 == 10) {
          goto LABEL_24;
        }
        if (v22 == 13) {
          goto LABEL_626;
        }
        if (v22 == 32 || (int v71 = byte_1002554B0[v22]) == 0)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x18000000;
          a1[5] = v179;
          LOBYTE(v11) = 44;
          goto LABEL_668;
        }
        v72 = v194;
        if (!v194) {
          v72 = v21;
        }
        v194 = v72;
        int v73 = *a1;
        *a1 &= 0xE0FFFFFF;
        if (v71 > 115)
        {
          if (v71 == 116)
          {
            unsigned int v74 = v73 & 0xE001FFFF | 0xE0000;
            goto LABEL_549;
          }
          if (v71 == 117)
          {
            unsigned int v74 = v73 & 0xE001FFFF | 0x100000;
            goto LABEL_549;
          }
        }
        else
        {
          if (v71 == 99)
          {
            unsigned int v74 = v73 & 0xE001FFFF | 0x20000;
            goto LABEL_549;
          }
          if (v71 == 112)
          {
            unsigned int v74 = v73 & 0xE001FFFF | 0xA0000;
LABEL_549:
            *a1 = v74;
            goto LABEL_550;
          }
        }
        unsigned int v74 = v73 & 0xE001FFFF;
        goto LABEL_549;
      case 45:
        unint64_t v96 = dword_100308748;
        v27 = v21;
        if (v21 == v20) {
          goto LABEL_451;
        }
        do
        {
          uint64_t v97 = *v27;
          if (v97 == 32)
          {
            v195 = v12;
            v10 += v27 - v21;
            if (v10 <= v96)
            {
LABEL_732:
              a1[1] = v10;
              unsigned int v179 = a1[5] & 0x80FFFFFF | 0x18000000;
LABEL_733:
              a1[5] = v179;
              LOBYTE(v11) = 45;
              goto LABEL_667;
            }
LABEL_835:
            a1[1] = v10;
            unsigned int v179 = a1[5] & 0x80FFFFFF | 0xC000000;
            goto LABEL_733;
          }
          int v98 = byte_1002554B0[v97];
          if (!byte_1002554B0[v97])
          {
            v10 += v27 - v21;
            if (v10 <= v96)
            {
              if (v97 == 58)
              {
                if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
                  sub_10024C648();
                }
                if (v194)
                {
                  LODWORD(v11) = 46;
                  if (*(void *)(a2 + 24))
                  {
                    *a1 = *a1 & 0xFFFE03FF | 0xB800;
                    int v160 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 24))(a1, v194, v27 - v194);
                    unsigned int v161 = a1[5];
                    if (v160)
                    {
                      a1[1] = v10;
                      unsigned int v161 = v161 & 0x80FFFFFF | 0x3000000;
                      a1[5] = v161;
                    }
                    if ((v161 & 0x7F000000) != 0) {
                      goto LABEL_788;
                    }
                    v194 = 0;
                    LODWORD(v11) = (*a1 >> 10) & 0x7F;
                  }
                  else
                  {
                    v194 = 0;
                  }
                }
                else
                {
                  v194 = 0;
                  LODWORD(v11) = 46;
                }
                v21 = v27;
                goto LABEL_626;
              }
              v195 = v12;
              goto LABEL_732;
            }
            v195 = v12;
            goto LABEL_835;
          }
          int v99 = *a1;
          switch((*a1 >> 17) & 0x7F)
          {
            case 0u:
              unint64_t v101 = v20 - v27;
              if (v20 - v27 >= v96) {
                unint64_t v101 = v96;
              }
              v102 = &v27[v101];
              v103 = v27 + 1;
              do
              {
                v104 = v103;
                if (v103 >= v102) {
                  break;
                }
                uint64_t v105 = *v103;
                if (v105 == 32) {
                  break;
                }
                int v106 = byte_1002554B0[v105];
                v103 = v104 + 1;
              }
              while (v106);
              v27 = v104 - 1;
              goto LABEL_341;
            case 1u:
              unsigned int v100 = v99 & 0xE001FFFF | ((v98 == 111) << 18) | (v99 + 0x1000000) & 0x1F000000;
              break;
            case 2u:
              int v107 = (v99 + 0x1000000) & 0x1F000000;
              unsigned int v108 = v99 & 0xE001FFFF;
              if (v98 == 110) {
                int v109 = 393216;
              }
              else {
                int v109 = 0;
              }
              unsigned int v110 = v108 | v107;
              goto LABEL_355;
            case 3u:
              unsigned int v111 = v99 & 0xE0FFFFFF | ((((v99 + 0x1000000) >> 24) & 0x1F) << 24);
              *a1 = v111;
              if (v98 == 116)
              {
                unsigned int v100 = v111 & 0xFF01FFFF | 0xC0000;
              }
              else
              {
                unsigned int v100 = v111 & 0xFF01FFFF;
                if (v98 == 110) {
                  v100 |= 0x80000u;
                }
              }
              break;
            case 4u:
              unint64_t v112 = (v99 + 0x1000000) & 0x1F000000;
              int v99 = v112 | v99 & 0xE0FFFFFF;
              *a1 = v99;
              if (v112 > 0xA000000 || aConnection_1[v112 >> 24] != v98) {
                goto LABEL_339;
              }
              int v113 = 150994944;
              goto LABEL_365;
            case 5u:
              unint64_t v112 = (v99 + 0x1000000) & 0x1F000000;
              int v99 = v112 | v99 & 0xE0FFFFFF;
              *a1 = v99;
              if (v112 > 0x10000000
                || aProxyConnectio[v112 >> 24] != v98)
              {
                goto LABEL_339;
              }
              int v113 = 251658240;
LABEL_365:
              if (v112 != v113) {
                goto LABEL_341;
              }
              char v114 = 9;
              goto LABEL_371;
            case 6u:
              unint64_t v115 = (v99 + 0x1000000) & 0x1F000000;
              int v99 = v115 | v99 & 0xE0FFFFFF;
              *a1 = v99;
              if (v115 > 0xE000000 || aContentLength[v115 >> 24] != v98) {
                goto LABEL_339;
              }
              if (v115 != 218103808) {
                goto LABEL_341;
              }
              char v114 = 10;
LABEL_371:
              unsigned int v100 = v99 & 0xFF01FFFF | ((v114 & 0x7F) << 17);
              break;
            case 7u:
              unint64_t v116 = (v99 + 0x1000000) & 0x1F000000;
              int v99 = v116 | v99 & 0xE0FFFFFF;
              *a1 = v99;
              if (v116 > 0x11000000
                || aTransferEncodi[v116 >> 24] != v98)
              {
                goto LABEL_339;
              }
              if (v116 != 0x10000000) {
                goto LABEL_341;
              }
              unsigned int v110 = v99 & 0xFF03FFFF;
              int v109 = 538574848;
LABEL_355:
              unsigned int v100 = v110 | v109;
              break;
            case 8u:
              unint64_t v117 = (v99 + 0x1000000) & 0x1F000000;
              int v99 = v117 | v99 & 0xE0FFFFFF;
              *a1 = v99;
              if (v117 > 0x7000000 || aUpgrade[v117 >> 24] != v98) {
                goto LABEL_339;
              }
              if (v117 != 100663296) {
                goto LABEL_341;
              }
              unsigned int v100 = v99 & 0xFF01FFFF | 0x1C0000;
              break;
            case 9u:
            case 0xAu:
            case 0xDu:
            case 0xEu:
LABEL_339:
              unsigned int v100 = v99 & 0xFF01FFFF;
              break;
            default:
              sub_10024C674();
          }
          *a1 = v100;
LABEL_341:
          ++v27;
        }
        while (v27 != v20);
LABEL_451:
        int v136 = v192 - v21;
        v21 = (unsigned __int8 *)v192;
        v10 += v136;
        if (v10 > v96)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0xC000000;
          a1[5] = v179;
          LOBYTE(v11) = 45;
          goto LABEL_668;
        }
LABEL_550:
        LODWORD(v11) = 45;
LABEL_626:
        if (++v21 != v20) {
          goto LABEL_21;
        }
        unsigned int v166 = v194 != 0;
        if (v14) {
          ++v166;
        }
        v167 = v196;
        if (v196) {
          ++v166;
        }
        if (v198) {
          ++v166;
        }
        if (v197) {
          ++v166;
        }
        if (v166 >= 2) {
          sub_10024C40C();
        }
        unsigned int v168 = a1[5];
        if ((v168 & 0x7F000000) != 0) {
          sub_10024C4E8();
        }
        if (!v194) {
          goto LABEL_688;
        }
        if (!*(void *)(a2 + 24)) {
          goto LABEL_687;
        }
        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v169 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 24))(a1, v194, v20 - v194);
        unsigned int v168 = a1[5];
        if (v169)
        {
          a1[1] = v10;
          unsigned int v168 = v168 & 0x80FFFFFF | 0x3000000;
          a1[5] = v168;
        }
        if ((v168 & 0x7F000000) != 0) {
          return a4;
        }
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_687:
        v167 = v196;
LABEL_688:
        if ((v168 & 0x7F000000) != 0) {
          sub_10024C4BC();
        }
        if (!v14)
        {
LABEL_695:
          if ((v168 & 0x7F000000) != 0) {
            sub_10024C490();
          }
          if (v167 && *(void *)(a2 + 8))
          {
            *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
            int v171 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 8))(a1, v167, v20 - v167);
            unsigned int v168 = a1[5];
            if (v171)
            {
              a1[1] = v10;
              unsigned int v168 = v168 & 0x80FFFFFF | 0x2000000;
              a1[5] = v168;
            }
            if ((v168 & 0x7F000000) != 0) {
              return a4;
            }
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
          }
          if ((v168 & 0x7F000000) != 0) {
            sub_10024C464();
          }
          if (v198 && *(void *)(a2 + 48))
          {
            *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
            int v172 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 48))(a1, v198, v20 - v198);
            unsigned int v168 = a1[5];
            if (v172)
            {
              a1[1] = v10;
              unsigned int v168 = v168 & 0x80FFFFFF | 0x6000000;
              a1[5] = v168;
            }
            if ((v168 & 0x7F000000) != 0) {
              return a4;
            }
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
          }
          if ((v168 & 0x7F000000) != 0) {
            sub_10024C438();
          }
          if (v197)
          {
            int v173 = *a1;
            if (*(void *)(a2 + 16))
            {
              *a1 = v173 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
              int v174 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 16))(a1, v197, v20 - v197);
              unsigned int v175 = a1[5];
              if (v174)
              {
                a1[1] = v10;
                unsigned int v175 = v175 & 0x80FFFFFF | 0x8000000;
                a1[5] = v175;
              }
              uint64_t v5 = a4;
              if ((v175 & 0x7F000000) != 0) {
                return v5;
              }
              int v173 = *a1;
              LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_721:
              *a1 = v173 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
              a1[1] = v10;
              return v5;
            }
          }
          else
          {
            int v173 = *a1;
          }
          uint64_t v5 = a4;
          goto LABEL_721;
        }
        if (!*(void *)(a2 + 32))
        {
          v167 = v196;
          goto LABEL_695;
        }
        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v170 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 32))(a1, v14, v20 - v14);
        unsigned int v168 = a1[5];
        if (v170)
        {
          a1[1] = v10;
          unsigned int v168 = v168 & 0x80FFFFFF | 0x4000000;
          a1[5] = v168;
        }
        v167 = v196;
        if ((v168 & 0x7F000000) == 0)
        {
          LODWORD(v11) = (*a1 >> 10) & 0x7F;
          goto LABEL_695;
        }
        return a4;
      case 46:
        LODWORD(v11) = 46;
        if (v22 > 0xCu)
        {
          if (v22 == 32) {
            goto LABEL_626;
          }
          if (v22 == 13)
          {
            LODWORD(v11) = 47;
            goto LABEL_626;
          }
        }
        else
        {
          if (v22 == 9) {
            goto LABEL_626;
          }
          if (v22 == 10)
          {
LABEL_253:
            LODWORD(v11) = 48;
            goto LABEL_626;
          }
        }
LABEL_461:
        if (!v23) {
          v14 = v21;
        }
        unsigned int v138 = *a1;
        *a1 &= 0xE0FFFFFF;
        LODWORD(v11) = 50;
        switch((v138 >> 17) & 0x7F)
        {
          case 9u:
            int v139 = v22 | 0x20;
            switch(v139)
            {
              case 'c':
                __int16 v140 = 20;
                break;
              case 'u':
                __int16 v140 = 21;
                break;
              case 'k':
                __int16 v140 = 19;
                break;
              default:
                __int16 v140 = 22;
                break;
            }
            unsigned int v157 = v138 & 0xE001FFFF | ((v140 & 0xFFF) << 17);
            goto LABEL_604;
          case 0xAu:
            if ((v22 - 58) <= 0xF5u)
            {
              v195 = v12;
              a1[1] = v10;
              unsigned int v187 = a1[5];
              char v188 = 25;
            }
            else
            {
              if ((v138 & 0x200) == 0)
              {
                *((void *)a1 + 1) = (char)v22 - 48;
                unsigned int v155 = v138 & 0xE007FFFF;
                int v156 = 1442304;
LABEL_578:
                unsigned int v157 = v155 | v156;
LABEL_604:
                *a1 = v157;
                LODWORD(v11) = 50;
                goto LABEL_626;
              }
              v195 = v12;
              a1[1] = v10;
              unsigned int v187 = a1[5];
              char v188 = 26;
            }
            unsigned int v179 = v187 & 0x80FFFFFF | ((v188 & 0x7F) << 24);
            a1[5] = v179;
            LOBYTE(v11) = 50;
            break;
          case 0xCu:
          case 0xFu:
          case 0x12u:
            goto LABEL_626;
          case 0xDu:
            unsigned int v155 = v138 & 0xE001FFFF;
            if ((v22 | 0x20) == 0x63)
            {
              unsigned int v157 = v155 | 0x200000;
              goto LABEL_604;
            }
            int v156 = 2228224;
            goto LABEL_578;
          case 0xEu:
            unsigned int v157 = v138 & 0xE001FF7F | 0x80;
            goto LABEL_604;
          default:
            unsigned int v157 = v138 & 0xE001FFFF;
            goto LABEL_604;
        }
        goto LABEL_668;
      case 47:
        if (v22 == 10) {
          goto LABEL_253;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v179;
        LOBYTE(v11) = 47;
        goto LABEL_668;
      case 48:
        LODWORD(v11) = 46;
        if (v22 == 9 || v22 == 32) {
          goto LABEL_626;
        }
        int v41 = *a1;
        int v42 = 8;
        switch((*a1 >> 17) & 0x7F)
        {
          case 0x17u:
            int v42 = 4;
            goto LABEL_164;
          case 0x18u:
            goto LABEL_164;
          case 0x19u:
            int v42 = 16;
            goto LABEL_164;
          case 0x1Au:
            int v42 = 32;
LABEL_164:
            v41 |= v42;
            *a1 = v41;
            break;
          default:
            break;
        }
        if (v14) {
          v55 = v14;
        }
        else {
          v55 = v21;
        }
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024C724();
        }
        v23 = 0;
        LODWORD(v11) = 44;
        if (!v55) {
          goto LABEL_24;
        }
        v23 = 0;
        LODWORD(v11) = 44;
        if (!*(void *)(a2 + 32)) {
          goto LABEL_24;
        }
        *a1 = v41 & 0xFFFE03FF | 0xB000;
        int v56 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 32))(a1, v55, v21 - v55);
        unsigned int v48 = a1[5];
        if (v56)
        {
          a1[1] = v10;
          unsigned int v48 = v48 & 0x80FFFFFF | 0x4000000;
          a1[5] = v48;
        }
        v23 = 0;
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
        goto LABEL_174;
      case 49:
        goto LABEL_461;
      case 50:
        int v24 = *a1;
        unint64_t v25 = (*a1 >> 17) & 0x7F;
        if (v21 == v20)
        {
          LODWORD(v11) = 50;
          uint64_t v65 = -1;
          LODWORD(v21) = v20;
LABEL_208:
          v27 = v20;
          goto LABEL_230;
        }
        unint64_t v26 = dword_100308748;
        v27 = v21;
        while (2)
        {
          unint64_t v28 = v25;
          uint64_t v29 = *v27;
          if (v29 != 10)
          {
            if (v29 != 13)
            {
              if ((v9 & 0x80000000) == 0 && v29 != 9 && ((char)v29 < 0x20 || v29 == 127))
              {
LABEL_665:
                v195 = v12;
                a1[1] = v10;
                unsigned int v179 = a1[5] & 0x80FFFFFF | 0x18000000;
                a1[5] = v179;
                goto LABEL_666;
              }
              unint64_t v25 = 0;
              uint64_t v30 = v29 | 0x20;
              switch((int)v28)
              {
                case 0:
                  unint64_t v31 = v20 - v27;
                  if (v20 - v27 >= v26) {
                    unint64_t v31 = v26;
                  }
                  if (!v31) {
                    goto LABEL_99;
                  }
                  v32 = &v27[v31];
                  while (1)
                  {
                    unsigned int v33 = *v27;
                    if (v33 == 13 || v33 == 10) {
                      break;
                    }
                    if ((v9 & 0x80000000) == 0 && v33 != 9 && (v33 < 0x20 || v33 == 127)) {
                      goto LABEL_665;
                    }
                    ++v27;
                    if (!--v31)
                    {
                      v27 = v32;
                      goto LABEL_99;
                    }
                  }
                  --v27;
LABEL_99:
                  unint64_t v25 = 0;
                  v27 -= v27 == v20;
                  goto LABEL_109;
                case 9:
                case 13:
                  sub_10024C6A0();
                case 10:
                  if ((char)v29 != 32) {
                    goto LABEL_62;
                  }
                  unint64_t v25 = 10;
                  goto LABEL_109;
                case 11:
                  if ((char)v29 == 32) {
                    goto LABEL_66;
                  }
LABEL_62:
                  if ((v29 - 58) <= 0xF5u || (unint64_t v35 = *((void *)a1 + 1), v35 >= 0x1999999999999999))
                  {
                    v195 = v12;
                    unsigned int v179 = a1[5] & 0x80FFFFFF | 0x19000000;
                    a1[5] = v179;
                    unsigned int v177 = v24 & 0xFF01FFFF | 0x160000;
LABEL_725:
                    *a1 = v177;
                    a1[1] = v10;
LABEL_666:
                    LOBYTE(v11) = 50;
LABEL_667:
                    v21 = v27;
LABEL_668:
                    if ((v179 & 0x7F000000) == 0) {
                      a1[5] = v179 & 0x80FFFFFF | 0x20000000;
                    }
                    *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
                    a1[1] = v10;
                    return v21 - v195;
                  }
                  *((void *)a1 + 1) = (char)v29 + 10 * v35 - 48;
                  unint64_t v25 = 11;
LABEL_109:
                  if (++v27 == v20)
                  {
                    LODWORD(v11) = 50;
                    uint64_t v65 = -1;
                    goto LABEL_208;
                  }
                  break;
                case 12:
                  if (v29 != 32)
                  {
                    v195 = v12;
                    unsigned int v179 = a1[5] & 0x80FFFFFF | 0x19000000;
                    a1[5] = v179;
                    unsigned int v177 = v24 & 0xFF01FFFF | 0x180000;
                    goto LABEL_725;
                  }
LABEL_66:
                  unint64_t v25 = 12;
                  goto LABEL_109;
                case 15:
                  if (v30 == 32) {
                    goto LABEL_74;
                  }
                  if (v30 == 99)
                  {
                    unint64_t v25 = 16;
                  }
                  else
                  {
                    unint64_t v25 = byte_1002554B0[v30];
                    if (byte_1002554B0[v30]) {
LABEL_101:
                    }
                      unint64_t v25 = 17;
                  }
                  goto LABEL_109;
                case 16:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  if (v25 > 0x7000000) {
                    goto LABEL_101;
                  }
                  int v36 = aChunked[v25 >> 24];
                  unsigned int v37 = 17;
                  BOOL v38 = v25 == 100663296;
                  LODWORD(v25) = 16;
                  int v39 = 23;
                  goto LABEL_85;
                case 17:
                  if ((char)v29 != 44) {
                    goto LABEL_101;
                  }
                  v24 &= 0xE0FFFFFF;
                  *a1 = v24;
LABEL_74:
                  unint64_t v25 = 15;
                  goto LABEL_109;
                case 18:
                  if ((int)v30 > 106)
                  {
                    if (v30 == 107)
                    {
                      unint64_t v25 = 19;
                      goto LABEL_109;
                    }
                    if (v30 == 117)
                    {
                      unint64_t v25 = 21;
                      goto LABEL_109;
                    }
                  }
                  else
                  {
                    if (v30 == 32) {
                      goto LABEL_105;
                    }
                    if (v30 == 99)
                    {
                      unint64_t v25 = 20;
                      goto LABEL_109;
                    }
                  }
                  unint64_t v25 = byte_1002554B0[v30];
                  if (byte_1002554B0[v30]) {
                    goto LABEL_108;
                  }
                  goto LABEL_109;
                case 19:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  if (v25 > 0xA000000) {
                    goto LABEL_108;
                  }
                  int v36 = aKeepAlive[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = v25 == 150994944;
                  LODWORD(v25) = 19;
                  int v39 = 24;
                  goto LABEL_85;
                case 20:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  if (v25 > 0x5000000) {
                    goto LABEL_108;
                  }
                  int v36 = aClose_1[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = v25 == 0x4000000;
                  LODWORD(v25) = 20;
                  int v39 = 25;
                  goto LABEL_85;
                case 21:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  if (v25 > 0x7000000) {
                    goto LABEL_108;
                  }
                  int v36 = aUpgrade[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = v25 == 100663296;
                  LODWORD(v25) = 21;
                  int v39 = 26;
LABEL_85:
                  if (v38) {
                    LODWORD(v25) = v39;
                  }
                  if (v30 == v36) {
                    unint64_t v25 = v25;
                  }
                  else {
                    unint64_t v25 = v37;
                  }
                  goto LABEL_109;
                case 22:
                  if (v29 != 44) {
                    goto LABEL_108;
                  }
                  goto LABEL_104;
                case 23:
                  if ((char)v29 == 32) {
                    unint64_t v25 = 23;
                  }
                  else {
                    unint64_t v25 = 17;
                  }
                  goto LABEL_109;
                case 24:
                case 25:
                case 26:
                  if (v29 == 32)
                  {
                    unint64_t v25 = v28;
                  }
                  else if (v29 == 44)
                  {
                    switch(v28)
                    {
                      case 0x1A:
                        v24 |= 0x20u;
                        break;
                      case 0x19:
                        v24 |= 0x10u;
                        break;
                      case 0x18:
                        v24 |= 8u;
                        break;
                    }
LABEL_104:
                    v24 &= 0xE0FFFFFF;
                    *a1 = v24;
LABEL_105:
                    unint64_t v25 = 18;
                  }
                  else
                  {
LABEL_108:
                    unint64_t v25 = 22;
                  }
                  goto LABEL_109;
                default:
                  goto LABEL_109;
              }
              continue;
            }
            int v24 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
            *a1 = v24;
            if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
              sub_10024C6CC();
            }
            if (!v14)
            {
              uint64_t v65 = 0;
              LODWORD(v11) = 52;
              goto LABEL_229;
            }
            uint64_t v65 = *(void *)(a2 + 32);
            LODWORD(v11) = 52;
            if (v65)
            {
              *a1 = v24 & 0xFFFE03FF | 0xD000;
              int v68 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 32))(a1, v14, v27 - v14);
              unsigned int v69 = a1[5];
              if (v68)
              {
                a1[1] = v10;
                unsigned int v69 = v69 & 0x80FFFFFF | 0x4000000;
                a1[5] = v69;
              }
              if ((v69 & 0x7F000000) == 0)
              {
                uint64_t v65 = 0;
                v14 = 0;
                int v24 = *a1;
                LODWORD(v11) = (*a1 >> 10) & 0x7F;
                goto LABEL_229;
              }
LABEL_788:
              v184 = (unsigned __int8 *)(v27 - v12);
              return (uint64_t)(v184 + 1);
            }
            v14 = 0;
LABEL_229:
            LOBYTE(v25) = v28;
LABEL_230:
            int v70 = (int)v21;
            *a1 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
            v21 = &v27[v65];
            v10 += v27 + v65 - v70;
            if (v10 <= dword_100308748) {
              goto LABEL_626;
            }
            v195 = v12;
            a1[1] = v10;
LABEL_776:
            unsigned int v179 = a1[5] & 0x80FFFFFF | 0xC000000;
LABEL_729:
            a1[5] = v179;
            goto LABEL_668;
          }
          break;
        }
        v10 += v27 - v21;
        if (v10 > v26)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0xC000000;
          a1[5] = v179;
          LOBYTE(v11) = 52;
          goto LABEL_667;
        }
        unsigned int v52 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
        *a1 = v52;
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024C6F8();
        }
        v23 = 0;
        LODWORD(v11) = 52;
        unsigned __int8 v22 = 10;
        v21 = v27;
        if (v14)
        {
          v23 = 0;
          LODWORD(v11) = 52;
          unsigned __int8 v22 = 10;
          v21 = v27;
          if (*(void *)(a2 + 32))
          {
            *a1 = v52 & 0xFFFE03FF | 0xD000;
            int v53 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 32))(a1, v14, v27 - v14);
            unsigned int v54 = a1[5];
            if (v53)
            {
              a1[1] = v10;
              unsigned int v54 = v54 & 0x80FFFFFF | 0x4000000;
              a1[5] = v54;
            }
            v23 = 0;
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
            unsigned __int8 v22 = 10;
            v21 = v27;
            if ((v54 & 0x7F000000) != 0) {
              return v27 - v12;
            }
          }
        }
        goto LABEL_24;
      case 51:
        if (v22 == 32 || v22 == 9)
        {
          LODWORD(v11) = 49;
          if ((*a1 & 0xFE0000) != 0x160000) {
            goto LABEL_24;
          }
          unsigned int v64 = *a1 & 0xFF01FFFF | 0x180000;
          LODWORD(v11) = 49;
        }
        else
        {
          int v51 = *a1;
          LODWORD(v11) = 44;
          if (v22 > 9u) {
            goto LABEL_24;
          }
          switch((*a1 >> 17) & 0x7F)
          {
            case 0x17u:
              unsigned int v64 = v51 | 4;
              break;
            case 0x18u:
              unsigned int v64 = v51 | 8;
              break;
            case 0x19u:
              unsigned int v64 = v51 | 0x10;
              break;
            case 0x1Au:
              unsigned int v64 = v51 | 0x20;
              break;
            default:
              JUMPOUT(0);
          }
          LODWORD(v11) = 44;
        }
        goto LABEL_204;
      case 52:
        if (v22 == 10)
        {
          LODWORD(v11) = 51;
          goto LABEL_626;
        }
        v195 = v12;
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | 0x17000000;
        a1[5] = v179;
        LOBYTE(v11) = 52;
        goto LABEL_668;
      case 53:
        if (v10 != 1) {
          sub_10024C8DC();
        }
        if ((*(unsigned char *)a1 & 4) == 0) {
          sub_10024C8B0();
        }
        uint64_t v127 = byte_1002555B0[v22];
        if (v127 == -1)
        {
          v195 = v12;
          unsigned int v10 = 1;
          a1[1] = 1;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1B000000;
          a1[5] = v179;
          LOBYTE(v11) = 53;
          goto LABEL_668;
        }
        *((void *)a1 + 1) = v127;
        unsigned int v10 = 1;
        goto LABEL_471;
      case 54:
        if ((*(unsigned char *)a1 & 4) == 0) {
          sub_10024C908();
        }
        if (v22 == 13)
        {
          LODWORD(v11) = 56;
          goto LABEL_626;
        }
        uint64_t v141 = byte_1002555B0[v22];
        if (v141 == -1)
        {
          LODWORD(v11) = 55;
          if (v22 == 32 || v22 == 59) {
            goto LABEL_626;
          }
          v195 = v12;
          int v189 = 452984832;
        }
        else
        {
          unint64_t v142 = *((void *)a1 + 1);
          if (v142 <= 0xFFFFFFFFFFFFFFELL)
          {
            *((void *)a1 + 1) = v141 + 16 * v142;
LABEL_471:
            LODWORD(v11) = 54;
            goto LABEL_626;
          }
          v195 = v12;
          int v189 = 419430400;
        }
        a1[1] = v10;
        unsigned int v179 = a1[5] & 0x80FFFFFF | v189;
        a1[5] = v179;
        LOBYTE(v11) = 54;
        goto LABEL_668;
      case 55:
        if ((*(unsigned char *)a1 & 4) == 0) {
          sub_10024C934();
        }
        if (v22 == 13) {
          LODWORD(v11) = 56;
        }
        else {
          LODWORD(v11) = 55;
        }
        goto LABEL_626;
      case 56:
        int v77 = *a1;
        if ((*a1 & 4) == 0) {
          sub_10024C960();
        }
        if (v22 != 10)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v179;
          LOBYTE(v11) = 56;
          goto LABEL_668;
        }
        a1[1] = 0;
        if (*((void *)a1 + 1))
        {
          LODWORD(v11) = 59;
        }
        else
        {
          v77 |= 0x40u;
          *a1 = v77;
          LODWORD(v11) = 44;
        }
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024C98C();
        }
        if (!*(void *)(a2 + 64)) {
          goto LABEL_651;
        }
        *a1 = v77 & 0xFFFE03FF | (v11 << 10);
        int v152 = (*(uint64_t (**)(unsigned int *))(a2 + 64))(a1);
        unsigned int v124 = a1[5];
        if (!v152) {
          goto LABEL_518;
        }
        a1[1] = 0;
        char v125 = 9;
LABEL_653:
        unsigned int v124 = v124 & 0x80FFFFFF | ((v125 & 0x7F) << 24);
        goto LABEL_654;
      case 57:
        if (v22 != 10)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
LABEL_718:
          a1[5] = v179;
          LOBYTE(v11) = 57;
          goto LABEL_668;
        }
        int v49 = *a1;
        if ((*a1 & 0x40) != 0)
        {
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
            sub_10024C750();
          }
          LODWORD(v11) = 64;
          unsigned __int8 v22 = 10;
          if (*(void *)(a2 + 72))
          {
            *a1 = v49 & 0xFFFE03FF | 0x10000;
            int v50 = (*(uint64_t (**)(unsigned int *))(a2 + 72))(a1);
            unsigned int v48 = a1[5];
            if (v50)
            {
              a1[1] = v10;
              unsigned int v48 = v48 & 0x80FFFFFF | 0xA000000;
              a1[5] = v48;
            }
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
            unsigned __int8 v22 = 10;
LABEL_151:
            v23 = v14;
LABEL_174:
            if ((v48 & 0x7F000000) != 0) {
              return v21 - v12;
            }
          }
        }
        else
        {
          if ((~v49 & 0x20000200) == 0)
          {
            if ((v49 & 4) != 0)
            {
              if ((v9 & 0x40000000) == 0)
              {
LABEL_730:
                v195 = v12;
                a1[1] = v10;
                unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1A000000;
                goto LABEL_718;
              }
            }
            else if ((v9 & 0x80000000) == 0)
            {
              goto LABEL_730;
            }
          }
          if ((~v49 & 0xA0) != 0)
          {
            unsigned int v60 = a1[5];
            int v59 = ((v60 & 0xFF0000) == 327680) << 31;
            int v58 = v60 & 0x7FFFFFFF;
          }
          else
          {
            if ((unsigned __int16)a1[5] == 101 || (*a1 & 3) == 0) {
              int v58 = 0x80000000;
            }
            else {
              int v58 = 0;
            }
            int v59 = a1[5] & 0x7FFFFFFF;
          }
          a1[5] = v59 | v58;
          v61 = *(uint64_t (**)(unsigned int *))(a2 + 40);
          if (v61)
          {
            int v62 = v61(a1);
            if (v62)
            {
              if (v62 != 1)
              {
                if (v62 != 2)
                {
                  a1[5] = a1[5] & 0x80FFFFFF | 0x5000000;
                  unsigned int v178 = *a1 & 0xFFFE03FF | 0xE800;
LABEL_726:
                  *a1 = v178;
                  a1[1] = v10;
                  return v21 - v12;
                }
                a1[5] |= 0x80000000;
              }
              *a1 |= 0x100u;
            }
          }
          LODWORD(v11) = 58;
          unsigned __int8 v22 = 10;
          v23 = v14;
          if ((*((unsigned char *)a1 + 23) & 0x7F) != 0)
          {
            unsigned int v178 = *a1 & 0xFFFE03FF | 0xE800;
            goto LABEL_726;
          }
        }
        goto LABEL_24;
      case 58:
        if (v22 != 10)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v179;
          LOBYTE(v11) = 58;
          goto LABEL_668;
        }
        a1[1] = 0;
        int v128 = *a1;
        BOOL v129 = (*a1 & 4) != 0 || (unint64_t)(*((void *)a1 + 1) - 1) < 0xFFFFFFFFFFFFFFFELL;
        unsigned int v143 = a1[5];
        if ((v143 & 0x80000000) != 0)
        {
          if ((v143 & 0xFF0000) == 0x50000) {
            goto LABEL_750;
          }
          if ((v128 & 0x100) != 0) {
            BOOL v129 = 0;
          }
          if (!v129)
          {
LABEL_750:
            BOOL v180 = sub_1000066BC((uint64_t)a1);
            if ((v128 & 3) != 0) {
              int v181 = 4;
            }
            else {
              int v181 = 18;
            }
            if (!v180) {
              int v181 = 1;
            }
            if ((v143 & 0x7F000000) != 0) {
              sub_10024C800();
            }
            if (*(void *)(a2 + 56))
            {
              *a1 = v128 & 0xFFFE03FF | (v181 << 10);
              int v182 = (*(uint64_t (**)(unsigned int *))(a2 + 56))(a1);
              unsigned int v183 = a1[5];
              if (v182)
              {
                a1[1] = 0;
                unsigned int v183 = v183 & 0x80FFFFFF | 0x7000000;
                a1[5] = v183;
              }
              if ((v183 & 0x7F000000) != 0) {
                goto LABEL_762;
              }
              int v128 = *a1;
              int v181 = (*a1 >> 10) & 0x7F;
            }
            *(void *)a1 = v128 & 0xFFFE03FF | ((v181 & 0x7F) << 10);
LABEL_762:
            v184 = (unsigned __int8 *)(v21 - v12);
            return (uint64_t)(v184 + 1);
          }
        }
        else if ((v128 & 0x100) != 0)
        {
          BOOL v144 = sub_1000066BC((uint64_t)a1);
          if ((v128 & 3) != 0) {
            int v145 = 4;
          }
          else {
            int v145 = 18;
          }
          if (v144) {
            LODWORD(v11) = v145;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v143 & 0x7F000000) != 0) {
            sub_10024C7D4();
          }
          goto LABEL_483;
        }
        if ((v128 & 4) != 0)
        {
          unsigned int v10 = 0;
          LODWORD(v11) = 53;
          goto LABEL_626;
        }
        if ((v128 & 0x20000000) != 0)
        {
          unsigned int v10 = 0;
          LODWORD(v11) = 63;
          if ((v128 & 3) != 0 || v9 < 0) {
            goto LABEL_626;
          }
          a1[5] = v143 & 0x80FFFFFF | 0x21000000;
          *(void *)a1 = v128 & 0xFFFE03FF | 0xE800;
          return v21 - v12;
        }
        uint64_t v149 = *((void *)a1 + 1);
        if (v149 == -1)
        {
          if (sub_100006700((int *)a1))
          {
            unsigned int v10 = 0;
            LODWORD(v11) = 63;
            goto LABEL_626;
          }
          BOOL v164 = sub_1000066BC((uint64_t)a1);
          if ((v128 & 3) != 0) {
            int v165 = 4;
          }
          else {
            int v165 = 18;
          }
          if (v164) {
            LODWORD(v11) = v165;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v143 & 0x7F000000) != 0) {
            sub_10024C7A8();
          }
        }
        else
        {
          if (v149)
          {
            unsigned int v10 = 0;
            LODWORD(v11) = 62;
            goto LABEL_626;
          }
          BOOL v150 = sub_1000066BC((uint64_t)a1);
          if ((v128 & 3) != 0) {
            int v151 = 4;
          }
          else {
            int v151 = 18;
          }
          if (v150) {
            LODWORD(v11) = v151;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v143 & 0x7F000000) != 0) {
            sub_10024C77C();
          }
        }
LABEL_483:
        if (!*(void *)(a2 + 56))
        {
LABEL_651:
          unsigned int v10 = 0;
          goto LABEL_626;
        }
        *a1 = v128 & 0xFFFE03FF | (v11 << 10);
        int v146 = (*(uint64_t (**)(unsigned int *))(a2 + 56))(a1);
        unsigned int v124 = a1[5];
        if (v146)
        {
          a1[1] = 0;
          unsigned int v124 = v124 & 0x80FFFFFF | 0x7000000;
LABEL_654:
          a1[5] = v124;
        }
LABEL_518:
        if ((v124 & 0x7F000000) == 0)
        {
          unsigned int v10 = 0;
          goto LABEL_625;
        }
        goto LABEL_762;
      case 59:
        unint64_t v118 = *((void *)a1 + 1);
        unint64_t v119 = v20 - v21;
        if (v118 >= v20 - v21) {
          int64_t v120 = v20 - v21;
        }
        else {
          int64_t v120 = *((void *)a1 + 1);
        }
        if ((*(unsigned char *)a1 & 4) == 0) {
          sub_10024C9B8();
        }
        v121 = v198;
        if (v118 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          sub_10024C9E4();
        }
        if (!v198) {
          v121 = v21;
        }
        v198 = v121;
        *((void *)a1 + 1) = v118 - v120;
        v21 = &v21[v120 - 1];
        if (v118 > v119) {
          LODWORD(v11) = 59;
        }
        else {
          LODWORD(v11) = 60;
        }
        goto LABEL_626;
      case 60:
        if ((*a1 & 4) == 0) {
          sub_10024CA10();
        }
        if (*((void *)a1 + 1)) {
          sub_10024CA68();
        }
        if (v22 != 13)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v179;
          LOBYTE(v11) = 60;
          goto LABEL_668;
        }
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024CA3C();
        }
        if (!v198)
        {
          v198 = 0;
          LODWORD(v11) = 61;
          goto LABEL_626;
        }
        LODWORD(v11) = 61;
        if (!*(void *)(a2 + 48))
        {
          v198 = 0;
          goto LABEL_626;
        }
        *a1 = *a1 & 0xFFFE03FF | 0xF400;
        int v153 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))(a2 + 48))(a1, v198, v21 - v198);
        unsigned int v154 = a1[5];
        if (v153)
        {
          a1[1] = v10;
          unsigned int v154 = v154 & 0x80FFFFFF | 0x6000000;
          a1[5] = v154;
        }
        if ((v154 & 0x7F000000) != 0) {
          goto LABEL_762;
        }
        v198 = 0;
        goto LABEL_625;
      case 61:
        int v122 = *a1;
        if ((*a1 & 4) == 0) {
          sub_10024CA94();
        }
        if (v22 != 10)
        {
          v195 = v12;
          a1[1] = v10;
          unsigned int v179 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v179;
          LOBYTE(v11) = 61;
          goto LABEL_668;
        }
        a1[1] = 0;
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024CAC0();
        }
        LODWORD(v11) = 53;
        if (!*(void *)(a2 + 72)) {
          goto LABEL_651;
        }
        *a1 = v122 & 0xFFFE03FF | 0xD400;
        int v123 = (*(uint64_t (**)(unsigned int *))(a2 + 72))(a1);
        unsigned int v124 = a1[5];
        if (!v123) {
          goto LABEL_518;
        }
        a1[1] = 0;
        char v125 = 10;
        goto LABEL_653;
      case 62:
        unint64_t v43 = *((void *)a1 + 1);
        if (v43 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          sub_10024C858();
        }
        unint64_t v44 = v20 - v21;
        if (v43 >= v20 - v21) {
          int64_t v45 = v20 - v21;
        }
        else {
          int64_t v45 = *((void *)a1 + 1);
        }
        if (v198) {
          v46 = v198;
        }
        else {
          v46 = v21;
        }
        v21 = &v21[v45 - 1];
        *((void *)a1 + 1) = v43 - v45;
        if (v43 > v44)
        {
          LODWORD(v11) = 62;
          v198 = v46;
          goto LABEL_626;
        }
        if ((*((unsigned char *)a1 + 23) & 0x7F) != 0) {
          sub_10024C82C();
        }
        v198 = 0;
        LODWORD(v11) = 64;
        v23 = v14;
        if (!v46) {
          goto LABEL_24;
        }
        v198 = 0;
        LODWORD(v11) = 64;
        v23 = v14;
        if (!*(void *)(a2 + 48)) {
          goto LABEL_24;
        }
        *a1 = *a1 & 0xFFFE03FF | 0x10000;
        int v47 = (*(uint64_t (**)(unsigned int *))(a2 + 48))(a1);
        unsigned int v48 = a1[5];
        if (v47)
        {
          a1[1] = v10;
          unsigned int v48 = v48 & 0x80FFFFFF | 0x6000000;
          a1[5] = v48;
        }
        v198 = 0;
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
        goto LABEL_151;
      case 63:
        v78 = v198;
        if (!v198) {
          v78 = v21;
        }
        v198 = v78;
        LODWORD(v11) = 63;
        v21 = (unsigned __int8 *)v192;
        goto LABEL_626;
      case 64:
        if (sub_1000066BC((uint64_t)a1))
        {
          if ((*(unsigned char *)a1 & 3) != 0) {
            LODWORD(v11) = 4;
          }
          else {
            LODWORD(v11) = 18;
          }
        }
        else
        {
          LODWORD(v11) = 1;
        }
        unsigned int v147 = a1[5];
        if ((v147 & 0x7F000000) != 0) {
          sub_10024C884();
        }
        if (!*(void *)(a2 + 56)) {
          goto LABEL_496;
        }
        *a1 = *a1 & 0xFFFE03FF | (v11 << 10);
        int v148 = (*(uint64_t (**)(unsigned int *))(a2 + 56))(a1);
        unsigned int v147 = a1[5];
        if (v148)
        {
          a1[1] = v10;
          unsigned int v147 = v147 & 0x80FFFFFF | 0x7000000;
          a1[5] = v147;
        }
        if ((v147 & 0x7F000000) != 0) {
          goto LABEL_762;
        }
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_496:
        if ((v147 & 0x80000000) == 0) {
          goto LABEL_626;
        }
        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        a1[1] = v10;
        goto LABEL_762;
      default:
        sub_10024C3E0();
    }
  }
}

uint64_t sub_100006450(int a1, unsigned int a2)
{
  if (a2 > 0x20 || ((1 << a2) & 0x100003600) == 0)
  {
    switch(a1)
    {
      case 20:
        uint64_t result = 27;
        if (a2 == 42 || a2 == 47) {
          return result;
        }
        if ((a2 | 0x20u) - 97 >= 0x1A) {
          return 1;
        }
        return 21;
      case 21:
        if ((a2 | 0x20u) - 97 < 0x1A) {
          return 21;
        }
        if (a2 != 58) {
          return 1;
        }
        return 22;
      case 22:
        if (a2 != 47) {
          return 1;
        }
        return 23;
      case 23:
        if (a2 != 47) {
          return 1;
        }
        return 24;
      case 24:
      case 25:
        switch(a2)
        {
          case '@':
            return 26;
          case '?':
            return 28;
          case '/':
            return 27;
        }
LABEL_23:
        uint64_t result = 25;
        if (a2 - 48 < 0xA
          || (a2 | 0x20u) - 97 < 0x1A
          || a2 - 33 <= 0x3E
          && ((1 << (a2 - 33)) & 0x5400000016003FF9) != 0
          || a2 == 126)
        {
          return result;
        }
        return 1;
      case 26:
        if (a2 == 47) {
          return 27;
        }
        if (a2 == 63) {
          return 28;
        }
        if (a2 != 64) {
          goto LABEL_23;
        }
        return 1;
      case 27:
        unsigned int v5 = 27;
        int v6 = byte_100255490[a2 >> 3] >> (a2 & 7);
        if (a2 == 35) {
          int v7 = 30;
        }
        else {
          int v7 = 1;
        }
        if (a2 == 63) {
          unsigned int v8 = 28;
        }
        else {
          unsigned int v8 = v7;
        }
        goto LABEL_48;
      case 28:
      case 29:
        unsigned int v3 = byte_100255490[a2 >> 3];
        char v4 = a2 & 7;
        unsigned int v5 = 29;
        goto LABEL_36;
      case 30:
        unsigned int v3 = byte_100255490[a2 >> 3];
        char v4 = a2 & 7;
        unsigned int v5 = 31;
LABEL_36:
        int v6 = v3 >> v4;
        if (a2 == 35) {
          int v9 = 30;
        }
        else {
          int v9 = 1;
        }
        if (a2 == 63) {
          unsigned int v8 = v5;
        }
        else {
          unsigned int v8 = v9;
        }
        goto LABEL_48;
      case 31:
        unsigned int v5 = 31;
        int v6 = byte_100255490[a2 >> 3] >> (a2 & 7);
        if (a2 == 35 || a2 == 63) {
          unsigned int v8 = 31;
        }
        else {
          unsigned int v8 = 1;
        }
LABEL_48:
        if (v6) {
          return v5;
        }
        else {
          return v8;
        }
      default:
        return 1;
    }
  }
  return 1;
}

BOOL sub_1000066BC(uint64_t a1)
{
  if (*(_WORD *)(a1 + 16) && *(_WORD *)(a1 + 18))
  {
    if ((*(unsigned char *)a1 & 0x10) != 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)a1 & 8) == 0)
  {
    return 0;
  }
  return !sub_100006700((int *)a1);
}

BOOL sub_100006700(int *a1)
{
  int v1 = *a1;
  if ((*a1 & 3) == 0) {
    return 0;
  }
  BOOL result = 0;
  if ((v1 & 0x100) == 0)
  {
    int v4 = *((unsigned __int16 *)a1 + 10);
    if (v4 != 304 && v4 != 204 && (v4 - 100) >= 0x64)
    {
      BOOL result = (v1 & 0x20000004) == 0x20000000;
      if ((v1 & 0x20000004) != 0x20000000 && (v1 & 4) == 0) {
        return *((void *)a1 + 1) == -1;
      }
    }
  }
  return result;
}

const char *sub_10000676C(unsigned int a1)
{
  if (a1 > 0x21) {
    return "<unknown>";
  }
  else {
    return off_1002D4728[a1];
  }
}

const char *sub_100006790(int a1)
{
  if (a1 <= 399)
  {
    if (a1 > 199)
    {
      switch(a1)
      {
        case 300:
          BOOL result = "Multiple Choices";
          break;
        case 301:
          BOOL result = "Moved Permanently";
          break;
        case 302:
          BOOL result = "Found";
          break;
        case 303:
          BOOL result = "See Other";
          break;
        case 304:
          BOOL result = "Not Modified";
          break;
        case 305:
          BOOL result = "Use Proxy";
          break;
        case 306:
          return "<unknown>";
        case 307:
          BOOL result = "Temporary Redirect";
          break;
        case 308:
          BOOL result = "Permanent Redirect";
          break;
        default:
          if (a1 != 226) {
            return "<unknown>";
          }
          BOOL result = "IM Used";
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 'd':
          return "Continue";
        case 'e':
          return "Switching Protocols";
        case 'f':
          return "Processing";
        default:
          return "<unknown>";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 400:
        BOOL result = "Bad Request";
        break;
      case 401:
        BOOL result = "Unauthorized";
        break;
      case 402:
        BOOL result = "Payment Required";
        break;
      case 403:
        BOOL result = "Forbidden";
        break;
      case 404:
        BOOL result = "Not Found";
        break;
      case 405:
        BOOL result = "Method Not Allowed";
        break;
      case 406:
        BOOL result = "Not Acceptable";
        break;
      case 407:
        BOOL result = "Proxy Authentication Required";
        break;
      case 408:
        BOOL result = "Request Timeout";
        break;
      case 409:
        BOOL result = "Conflict";
        break;
      case 410:
        BOOL result = "Gone";
        break;
      case 411:
        BOOL result = "Length Required";
        break;
      case 412:
        BOOL result = "Precondition Failed";
        break;
      case 413:
        BOOL result = "Payload Too Large";
        break;
      case 414:
        BOOL result = "URI Too Long";
        break;
      case 415:
        BOOL result = "Unsupported Media Type";
        break;
      case 416:
        BOOL result = "Range Not Satisfiable";
        break;
      case 417:
        BOOL result = "Expectation Failed";
        break;
      case 418:
      case 419:
      case 420:
      case 425:
      case 427:
      case 430:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
        return "<unknown>";
      case 421:
        BOOL result = "Misdirected Request";
        break;
      case 422:
        BOOL result = "Unprocessable Entity";
        break;
      case 423:
        BOOL result = "Locked";
        break;
      case 424:
        BOOL result = "Failed Dependency";
        break;
      case 426:
        BOOL result = "Upgrade Required";
        break;
      case 428:
        BOOL result = "Precondition Required";
        break;
      case 429:
        BOOL result = "Too Many Requests";
        break;
      case 431:
        BOOL result = "Request Header Fields Too Large";
        break;
      case 451:
        BOOL result = "Unavailable For Legal Reasons";
        break;
      default:
        switch(a1)
        {
          case 500:
            BOOL result = "Internal Server Error";
            break;
          case 501:
            BOOL result = "Not Implemented";
            break;
          case 502:
            BOOL result = "Bad Gateway";
            break;
          case 503:
            BOOL result = "Service Unavailable";
            break;
          case 504:
            BOOL result = "Gateway Timeout";
            break;
          case 505:
            BOOL result = "HTTP Version Not Supported";
            break;
          case 506:
            BOOL result = "Variant Also Negotiates";
            break;
          case 507:
            BOOL result = "Insufficient Storage";
            break;
          case 508:
            BOOL result = "Loop Detected";
            break;
          case 510:
            BOOL result = "Not Extended";
            break;
          case 511:
            BOOL result = "Network Authentication Required";
            break;
          default:
            return "<unknown>";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100006C88(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 24);
  *(_OWORD *)BOOL result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 24) = v2;
  if (a2 == 1) {
    int v3 = 4096;
  }
  else {
    int v3 = 2048;
  }
  if (!a2) {
    int v3 = 18432;
  }
  *(_DWORD *)BOOL result = v3 & 0xFFFFFFFC | a2 & 3;
  *(_DWORD *)(result + 20) &= 0x80FFFFFF;
  return result;
}

double sub_100006CCC(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

char *sub_100006CE0(unsigned int a1)
{
  if (a1 >= 0x22) {
    sub_10024CAEC();
  }
  return off_1002D4838[2 * a1];
}

char *sub_100006D10(unsigned int a1)
{
  if (a1 >= 0x22) {
    sub_10024CB18();
  }
  return off_1002D4838[2 * a1 + 1];
}

double sub_100006D40(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100006D4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  *(_DWORD *)a4 = 0;
  if (a2 < 1) {
    return a3 != 0;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  unint64_t v11 = a1 + a2;
  if (a3) {
    LODWORD(result) = 24;
  }
  else {
    LODWORD(result) = 20;
  }
  unsigned int v13 = 7;
  while (2)
  {
    uint64_t result = sub_100006450(result, *(char *)(a1 + v8));
    unsigned int v14 = 0;
    switch((int)result)
    {
      case 21:
        goto LABEL_13;
      case 22:
      case 23:
      case 24:
      case 28:
      case 30:
        goto LABEL_16;
      case 25:
        goto LABEL_9;
      case 26:
        int v10 = 1;
LABEL_9:
        unsigned int v14 = 1;
        goto LABEL_13;
      case 27:
        unsigned int v14 = 3;
        goto LABEL_13;
      case 29:
        unsigned int v14 = 4;
        goto LABEL_13;
      case 31:
        unsigned int v14 = 5;
LABEL_13:
        if (v14 == v13)
        {
          ++*(_WORD *)(a4 + 4 * v13 + 6);
        }
        else
        {
          uint64_t v15 = a4 + 4 * v14;
          *(_WORD *)(v15 + 4) = v8;
          *(_WORD *)(v15 + 6) = 1;
          v9 |= 1 << v14;
          *(_WORD *)a4 = v9;
          unsigned int v13 = v14;
        }
LABEL_16:
        ++v8;
        if (a1 + v8 < v11) {
          continue;
        }
        if ((v9 & 3) == 1) {
          return 1;
        }
        if ((v9 & 2) == 0) {
          goto LABEL_91;
        }
        uint64_t v16 = *(unsigned __int16 *)(a4 + 10);
        uint64_t v17 = *(unsigned __int16 *)(a4 + 8);
        *(_WORD *)(a4 + 10) = 0;
        if (v10) {
          int v18 = 2;
        }
        else {
          int v18 = 4;
        }
        if (!v16) {
          goto LABEL_89;
        }
        int v19 = 0;
        unint64_t v20 = a1 + v17 + v16;
        uint64_t result = 1;
        break;
      default:
        if (result != 1) {
          sub_10024CB44();
        }
        return result;
    }
    break;
  }
  while (2)
  {
    int v21 = *(unsigned __int8 *)(a1 + v17);
    switch(v18)
    {
      case 2:
      case 3:
        if (v21 == 64)
        {
          int v18 = 4;
        }
        else
        {
          BOOL v25 = (v21 - 48) >= 0xA && (v21 | 0x20u) - 97 >= 0x1A;
          if (v25
            && ((v21 - 33) > 0x3E || ((1 << (v21 - 33)) & 0x4000000016003FF9) == 0)
            && v21 != 126)
          {
            return 1;
          }
          if (v18 == 3)
          {
            __int16 v26 = *(_WORD *)(a4 + 30);
          }
          else
          {
            __int16 v26 = 0;
            *(_WORD *)(a4 + 28) = v17;
            v9 |= 0x40u;
            *(_WORD *)a4 = v9;
          }
          *(_WORD *)(a4 + 30) = v26 + 1;
          int v18 = 3;
        }
        goto LABEL_84;
      case 4:
        if (v21 == 91)
        {
          int v18 = 5;
        }
        else
        {
          if ((v21 | 0x20u) - 97 >= 0x1A)
          {
            unsigned int v27 = v21 - 48;
            unsigned int v28 = v21 - 45;
            if (v27 >= 0xA && v28 >= 2) {
              return 1;
            }
          }
          *(_WORD *)(a4 + 8) = v17;
LABEL_77:
          *(_WORD *)(a4 + 10) = ++v19;
          int v18 = 6;
        }
        goto LABEL_84;
      case 5:
        goto LABEL_41;
      case 6:
        if ((v21 | 0x20u) - 97 < 0x1A) {
          goto LABEL_77;
        }
        if ((v21 - 48) < 0xA || (v21 - 45) < 2) {
          goto LABEL_77;
        }
        goto LABEL_38;
      case 7:
        if (v21 == 93) {
          goto LABEL_50;
        }
LABEL_41:
        if ((v21 - 48) < 0xA || (v21 | 0x20u) >= 0x61 && (v21 | 0x20u) < 0x67 || v21 == 46 || v21 == 58)
        {
          if (v18 != 7) {
            *(_WORD *)(a4 + 8) = v17;
          }
          *(_WORD *)(a4 + 10) = ++v19;
          int v18 = 7;
          goto LABEL_84;
        }
        if (v18 != 7 || v21 != 37) {
          return result;
        }
        int v18 = 9;
        goto LABEL_83;
      case 8:
LABEL_38:
        if (v21 != 58) {
          return 1;
        }
        int v18 = 11;
        goto LABEL_84;
      case 9:
        goto LABEL_51;
      case 10:
        if (v21 == 93)
        {
LABEL_50:
          int v18 = 8;
        }
        else
        {
LABEL_51:
          if ((v21 - 48) >= 0xA && (v21 | 0x20u) - 97 >= 0x1A)
          {
            int v18 = 10;
            if (((v21 - 37) > 0x3A || ((1 << (v21 - 37)) & 0x400000000000301) == 0)
              && v21 != 126)
            {
              return 1;
            }
          }
          else
          {
            int v18 = 10;
          }
LABEL_83:
          *(_WORD *)(a4 + 10) = ++v19;
        }
LABEL_84:
        ++v17;
        if (a1 + v17 < v20) {
          continue;
        }
LABEL_89:
        if (v18 - 2) < 0xA && ((0x3AFu >> (v18 - 2))) {
          return 1;
        }
LABEL_91:
        if (a3)
        {
          if ((unsigned __int16)v9 != 6) {
            return 1;
          }
        }
        else if ((v9 & 4) == 0)
        {
          return 0;
        }
        uint64_t v30 = *(unsigned __int16 *)(a4 + 12);
        uint64_t v31 = *(unsigned __int16 *)(a4 + 14);
        if (v31 + v30 > (unint64_t)a2) {
          sub_10024CB70();
        }
        if (*(_WORD *)(a4 + 14))
        {
          unint64_t v32 = 0;
          unsigned int v33 = (char *)(a1 + v30);
          v34 = &v33[v31];
          while (1)
          {
            unint64_t v32 = *v33 + 10 * v32 - 48;
            if (v32 >> 16) {
              return 1;
            }
            if (++v33 >= v34) {
              goto LABEL_106;
            }
          }
        }
        LOWORD(v32) = 0;
LABEL_106:
        uint64_t result = 0;
        *(_WORD *)(a4 + 2) = v32;
        break;
      case 11:
      case 12:
        if ((v21 - 48) >= 0xA) {
          return 1;
        }
        if (v18 == 12)
        {
          __int16 v22 = *(_WORD *)(a4 + 14);
        }
        else
        {
          __int16 v22 = 0;
          *(_WORD *)(a4 + 12) = v17;
          v9 |= 4u;
          *(_WORD *)a4 = v9;
        }
        *(_WORD *)(a4 + 14) = v22 + 1;
        int v18 = 12;
        goto LABEL_84;
      default:
        return 1;
    }
    return result;
  }
}

uint64_t sub_100007210(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 20);
  int v3 = HIBYTE(v2) & 0x7F;
  if (v3 != 31 && v3 != 0) {
    sub_10024CB9C();
  }
  if (a2) {
    int v5 = 520093696;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(result + 20) = v2 & 0x80FFFFFF | v5;
  return result;
}

BOOL sub_100007254(_DWORD *a1)
{
  return (*a1 & 0x1FC00) == 0x10000;
}

uint64_t sub_100007268()
{
  return 133380;
}

uint64_t sub_100007274(uint64_t result)
{
  dword_100308748 = result;
  return result;
}

void sub_1000074D0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 && *(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), a3);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

unsigned char *sub_1000075C4(char a1)
{
  uint64_t result = malloc_type_malloc(1uLL, 0x100004077774924uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_100007604(atomic_uchar *a1, int a2, unsigned __int8 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int8 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_100007618(atomic_uchar *a1, unsigned __int8 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed) & 1;
}

uint64_t sub_100007624(atomic_uchar *a1, char a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed) & 1;
}

uint64_t sub_100007634@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return a2 & 1;
}

uint64_t sub_100007640(unsigned char *a1)
{
  return *a1 & 1;
}

unsigned char *sub_10000764C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

BOOL sub_100007654(atomic_uchar *a1, int a2, unsigned __int8 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int8 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_100007668(atomic_uchar *a1, unsigned __int8 a2)
{
  return (char)atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100007674(atomic_uchar *a1, char a2)
{
  return (char)atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

uint64_t sub_100007684@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return (char)a2;
}

uint64_t sub_100007690(char *a1)
{
  return *a1;
}

_WORD *sub_10000769C(__int16 a1)
{
  uint64_t result = malloc_type_malloc(2uLL, 0x1000040BDFB0063uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_1000076D8(atomic_ushort *a1, int a2, unsigned __int16 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int16 *)&v3, a3);
  return v3 == (unsigned __int16)a2;
}

uint64_t sub_1000076EC(atomic_ushort *a1, unsigned __int16 a2)
{
  return (__int16)atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_1000076F8(atomic_ushort *a1, __int16 a2)
{
  return (__int16)atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

uint64_t sub_100007708@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return (__int16)a2;
}

uint64_t sub_100007714(__int16 *a1)
{
  return *a1;
}

_WORD *sub_100007720(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_DWORD *sub_100007728(int a1)
{
  uint64_t result = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_100007764(atomic_uint *a1, int a2, unsigned int a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned int *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_100007778(atomic_uint *a1, unsigned int a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100007780(atomic_uint *a1, int a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_10000778C(unsigned int *result)
{
  return result;
}

uint64_t sub_100007794(unsigned int *a1)
{
  return *a1;
}

_DWORD *sub_10000779C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

void *sub_1000077A4(uint64_t a1)
{
  uint64_t result = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_1000077E0(atomic_ullong *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, a3);
  return v3 == a2;
}

unint64_t sub_1000077F4(atomic_ullong *a1, unint64_t a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

unint64_t sub_1000077FC(atomic_ullong *a1, uint64_t a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_100007808(unsigned int *result)
{
  return result;
}

uint64_t sub_100007810(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_100007818(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100007820(atomic_uchar *a1, unsigned __int8 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100007828(atomic_uchar *a1, char a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_100007834(unsigned int *result)
{
  return result;
}

uint64_t sub_10000783C(unsigned __int8 *a1)
{
  return *a1;
}

BOOL sub_100007844(atomic_ushort *a1, int a2, unsigned __int16 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int16 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_100007858(atomic_ushort *a1, unsigned __int16 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100007860(atomic_ushort *a1, __int16 a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_10000786C(unsigned int *result)
{
  return result;
}

uint64_t sub_100007874(unsigned __int16 *a1)
{
  return *a1;
}

void sub_100007C04(id a1)
{
  uint64_t v13 = 0;
  uint64_t v1 = container_system_path_for_identifier();
  if (v1)
  {
    int v3 = (void *)v1;
    uint64_t v4 = +[NSURL fileURLWithFileSystemRepresentation:v1 isDirectory:1 relativeToURL:0];
    id v5 = (void *)qword_10031AF60;
    qword_10031AF60 = v4;

    free(v3);
  }
  else
  {
    if (qword_10031AFB8 != -1) {
      dispatch_once(&qword_10031AFB8, &stru_1002D4AE8);
    }
    unsigned int v2 = qword_10031AFA8;
    if (os_log_type_enabled((os_log_t)qword_10031AFA8, OS_LOG_TYPE_FAULT)) {
      sub_10024CD10(&v13, v2);
    }
  }
  if (qword_10031AF60)
  {
    v26[0] = @".";
    v24[0] = NSURLIsExcludedFromBackupKey;
    v24[1] = NSURLFileProtectionKey;
    v25[0] = &__kCFBooleanFalse;
    v25[1] = NSURLFileProtectionNone;
    id v6 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
    v27[0] = v6;
    v26[1] = @"Documents";
    v22[0] = NSURLIsExcludedFromBackupKey;
    v22[1] = NSURLFileProtectionKey;
    v23[0] = &__kCFBooleanTrue;
    v23[1] = NSURLFileProtectionNone;
    int v7 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];
    v27[1] = v7;
    v26[2] = @"Library";
    v20[0] = NSURLIsExcludedFromBackupKey;
    v20[1] = NSURLFileProtectionKey;
    v21[0] = &__kCFBooleanFalse;
    v21[1] = NSURLFileProtectionNone;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    v27[2] = v8;
    v26[3] = @"Library/Caches";
    v18[0] = NSURLIsExcludedFromBackupKey;
    v18[1] = NSURLFileProtectionKey;
    v19[0] = &__kCFBooleanTrue;
    v19[1] = NSURLFileProtectionNone;
    int v9 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:2];
    v27[3] = v9;
    v26[4] = @"Library/Preferences";
    v16[0] = NSURLIsExcludedFromBackupKey;
    v16[1] = NSURLFileProtectionKey;
    v17[0] = &__kCFBooleanTrue;
    v17[1] = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
    int v10 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
    v27[4] = v10;
    v26[5] = @"tmp";
    v14[0] = NSURLIsExcludedFromBackupKey;
    v14[1] = NSURLFileProtectionKey;
    v15[0] = &__kCFBooleanTrue;
    v15[1] = NSURLFileProtectionNone;
    unint64_t v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];
    v27[5] = v11;
    v12 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:6];

    [v12 enumerateKeysAndObjectsUsingBlock:&stru_1002D4AC8];
  }
}

void sub_100007EE8(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  id v5 = (void *)qword_10031AF60;
  id v6 = a3;
  int v7 = [v5 URLByAppendingPathComponent:a2];
  id v10 = 0;
  unsigned __int8 v8 = [v7 setResourceValues:v6 error:&v10];

  id v9 = v10;
  if ((v8 & 1) == 0)
  {
    if (qword_10031AFB8 != -1) {
      dispatch_once(&qword_10031AFB8, &stru_1002D4AE8);
    }
    if (os_log_type_enabled((os_log_t)qword_10031AFA8, OS_LOG_TYPE_FAULT)) {
      sub_10024CD8C();
    }
  }
}

void sub_100007FC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  unsigned int v2 = off_100308750;
  off_100308750 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10031AF70;
  qword_10031AF70 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10031AF78;
  qword_10031AF78 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned __int8 v8 = (void *)qword_10031AF80;
  qword_10031AF80 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10031AF88;
  qword_10031AF88 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  v12 = (void *)qword_10031AF90;
  qword_10031AF90 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  unsigned int v14 = (void *)qword_10031AF98;
  qword_10031AF98 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10031AFA0;
  qword_10031AFA0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10031AFA8;
  qword_10031AFA8 = (uint64_t)v17;

  qword_10031AFB0 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

void sub_100008148(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t sub_100008324(uint64_t a1)
{
  uint64_t v2 = sqlite3_step(*(sqlite3_stmt **)(a1 + 48));
  if (v2 == 100) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  return v2;
}

void sub_100008428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100008440(void *result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (a2)
  {
    os_log_t v5 = result;
    uint64_t result = [a2 int64ForColumnIndex:0];
    *(void *)(*(void *)(v5[4] + 8) + 24) = result;
  }
  *a4 = 1;
  return result;
}

void sub_100008570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100008588(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100008598(uint64_t a1)
{
}

void sub_1000085A0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (a2)
  {
    uint64_t v6 = [a2 numberForColumnIndex:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    unsigned __int8 v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  *a4 = 1;
}

void sub_100008698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000086B0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  *a4 = 1;
  return result;
}

uint64_t sub_100008A84(uint64_t a1)
{
  return 1;
}

BOOL sub_100008CD8(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  os_log_t v5 = +[NSFileManager defaultManager];
  unsigned __int8 v6 = [v5 fileExistsAtPath:v4];

  return v6 ^ 1;
}

void sub_100008E5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100308758;
  off_100308758 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10031AFC8;
  qword_10031AFC8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_10031AFD0;
  qword_10031AFD0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned __int8 v8 = (void *)qword_10031AFD8;
  qword_10031AFD8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10031AFE0;
  qword_10031AFE0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  v12 = (void *)qword_10031AFE8;
  qword_10031AFE8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  unsigned int v14 = (void *)qword_10031AFF0;
  qword_10031AFF0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10031AFF8;
  qword_10031AFF8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10031B000;
  qword_10031B000 = (uint64_t)v17;

  qword_10031B008 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

void sub_100008FCC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100008FE8(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindArray:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindDictionary:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindString:v5 atPosition:a2];
    goto LABEL_10;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v9 bindNullAtPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v5 timeIntervalSinceReferenceDate];
LABEL_15:
    objc_msgSend(v9, "bindDouble:atPosition:", a2);
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindData:v5 atPosition:a2];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v9 bindUUID:v5 atPosition:a2];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unsigned __int8 v6 = [v5 absoluteString];
        [v9 bindString:v6 atPosition:a2];
      }
      else
      {
        id v7 = v5;
        unsigned __int8 v8 = (const char *)[v7 objCType];
        if (!strcmp(v8, "d") || !strcmp(v8, "f"))
        {
          [v7 doubleValue];
          goto LABEL_15;
        }
        objc_msgSend(v9, "bindInt64:atPosition:", objc_msgSend(v7, "longLongValue"), a2);
      }
    }
  }
LABEL_10:
}

__CFString *sub_100009238(uint64_t a1)
{
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSMutableString) initWithCapacity:3 * a1 + 1];
    [v2 appendString:@"?"];
    uint64_t v3 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        [v2 appendString:@", ?"];
        --v3;
      }
      while (v3);
    }
    uint64_t v4 = (__CFString *)[v2 copy];
  }
  else
  {
    uint64_t v4 = &stru_1002F48B8;
  }
  return v4;
}

void sub_100009F00(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_10000A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A178(uint64_t result)
{
  return result;
}

void sub_10000A3F4(uint64_t a1, void *a2)
{
  int v5 = 1;
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 predicate];
  [v4 applyBinding:v3 atIndex:&v5];
}

void sub_10000A500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A518(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) entityClass];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10000A5B4;
  v4[3] = &unk_1002D4C70;
  id v6 = v2;
  long long v5 = *(_OWORD *)(a1 + 32);
  [(id)v5 enumeratePersistentIDsUsingBlock:v4];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_10000A5B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^ 1;
}

void sub_10000A810(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000A890(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10000A9CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000AACC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000ABF0;
  v8[3] = &unk_1002D4D60;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  os_log_t v11 = v13;
  [v5 enumerateRowsUsingBlock:v8];

  _Block_object_dispose(v13, 8);
}

void sub_10000ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000ABF0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v8 = +[NSMutableDictionary dictionaryWithCapacity:a1[7]];
  id v9 = v8;
  if (v5)
  {
    id v10 = (void *)a1[4];
    os_log_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    os_log_t v17 = sub_10000AD44;
    int v18 = &unk_1002D4D38;
    id v11 = v8;
    id v19 = v11;
    id v12 = v5;
    id v20 = v12;
    [v10 enumerateObjectsUsingBlock:&v15];
    uint64_t v13 = a1[5];
    id v14 = objc_msgSend(v12, "int64ForColumnIndex:", 0, v15, v16, v17, v18);
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
    (*(void (**)(uint64_t, id, id))(v13 + 16))(v13, v14, v11);
  }
}

void sub_10000AD44(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = (a3 + 1);
  id v6 = a2;
  sub_1000033FC(v4, v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void sub_10000B734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B74C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000B75C(uint64_t a1)
{
}

void sub_10000B764(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned __int8 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_10000B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000B938(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
}

void sub_10000BDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000BDF0(uint64_t a1, void *a2)
{
  int v7 = 1;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 predicate];
  [v5 applyBinding:v4 atIndex:&v7];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000BEB0;
  v6[3] = &unk_1002D4B38;
  v6[4] = *(void *)(a1 + 40);
  [v4 enumerateRowsUsingBlock:v6];
}

void sub_10000BEB0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = sub_1000033FC(a2, 0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned __int8 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_10000C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000C044(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

void sub_10000C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000C3F4(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000C48C;
  v5[3] = &unk_1002D4E50;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_10000C48C(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = [a2 stringForColumnName:@"name"];
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *a4 = v6;
}

void sub_10000C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000C5C4(uint64_t a1, void *a2)
{
  id result = [a2 firstInt64Value];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  return result;
}

void sub_10000C6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C6EC(uint64_t a1)
{
  id v2 = [[SQLiteSchemaMigration alloc] initWithConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  if (qword_10031B060 != -1) {
    dispatch_once(&qword_10031B060, &stru_1002D4EE8);
  }
  id v3 = (void *)qword_10031B048;
  if (os_log_type_enabled((os_log_t)qword_10031B048, OS_LOG_TYPE_DEFAULT))
  {
    long long v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = v3;
    unsigned __int8 v6 = [v4 options];
    id v7 = [v6 databasePath];
    uint64_t v8 = *(void *)(a1 + 56);
    int v12 = 138543618;
    uint64_t v13 = v7;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Migrating %{public}@ to %llu", (uint8_t *)&v12, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [(SQLiteSchemaMigration *)v2 success];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    [*(id *)(a1 + 32) _setUserVersion:*(void *)(a1 + 56)];
  }
  else
  {
    if (qword_10031B060 != -1) {
      dispatch_once(&qword_10031B060, &stru_1002D4EE8);
    }
    id v9 = (void *)qword_10031B048;
    if (os_log_type_enabled((os_log_t)qword_10031B048, OS_LOG_TYPE_ERROR)) {
      sub_10024CF44(a1 + 32, v9, a1);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v10;
}

void sub_10000C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000C9E0(uint64_t a1, void *a2)
{
  id result = [a2 hasRows];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10000CA8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100308820;
  off_100308820 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  long long v4 = (void *)qword_10031B018;
  qword_10031B018 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_10031B020;
  qword_10031B020 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10031B028;
  qword_10031B028 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10031B030;
  qword_10031B030 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10031B038;
  qword_10031B038 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10031B040;
  qword_10031B040 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10031B048;
  qword_10031B048 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10031B050;
  qword_10031B050 = (uint64_t)v17;

  qword_10031B058 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

uint64_t sub_10000CEC0(int a1, msghdr *a2, unsigned int a3, int a4)
{
  if (!a2 || (a3 & 0x80000000) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  else if (a3)
  {
    os_log_t v5 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    while (1)
    {
      ssize_t v9 = sendmsg(a1, v5, a4);
      if (v9 < 0) {
        break;
      }
      LODWORD(v5[1].msg_name) = v9;
      ++v7;
      os_log_t v5 = (msghdr *)((char *)v5 + 56);
      if (v8 == v7) {
        return v8;
      }
    }
    if (v7) {
      return v7;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    return 0;
  }
}

void sub_10000CF60()
{
}

uint64_t sub_10000CF7C(uint64_t a1)
{
  if (!a1) {
    sub_10024D01C();
  }
  if (*(_DWORD *)(a1 + 40) < 0xCu) {
    return 0;
  }
  else {
    return *(void *)(a1 + 32);
  }
}

char *sub_10000CFB0(uint64_t a1, unsigned int *a2)
{
  if (!a1) {
    sub_10024D048();
  }
  if (!a2) {
    sub_10024D074();
  }
  if ((unint64_t)a2 + ((*a2 + 3) & 0x1FFFFFFFCLL) + 12 <= *(void *)(a1 + 32)
                                                                  + (unint64_t)*(unsigned int *)(a1 + 40))
    return (char *)a2 + ((*a2 + 3) & 0x1FFFFFFFCLL);
  else {
    return 0;
  }
}

uint64_t sub_10000CFFC(uint64_t a1)
{
  if (!a1) {
    sub_10024D0A0();
  }
  return a1 + 12;
}

uint64_t sub_10000D018(uint64_t a1)
{
  if (!a1) {
    sub_10024D0CC();
  }
  return a1 + 12;
}

uint64_t sub_10000D034(uint64_t a1)
{
  return a1 + 12;
}

unint64_t sub_10000D03C(uint64_t a1)
{
  return ((a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12;
}

void sub_10000D270(uint64_t a1)
{
  [*(id *)(a1 + 32) _performMigrationIfNeededForStore:*(void *)(a1 + 40)];
  id v2 = [(id)objc_opt_class() storeDescriptor];
  objc_msgSend(*(id *)(a1 + 32), "_modifyUsingTransactionClass:withBlock:", objc_msgSend(v2, "transactionClass"), *(void *)(a1 + 48));
}

id sub_10000D3A8(uint64_t a1)
{
  [*(id *)(a1 + 32) _performMigrationIfNeededForStore:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  return [v2 _modifyUsingTransactionClass:v3 withBlock:v4];
}

void sub_10000D4AC(uint64_t a1)
{
  [*(id *)(a1 + 32) _performMigrationIfNeededForStore:*(void *)(a1 + 40)];
  id v3 = [(id)objc_opt_class() storeDescriptor];
  id v2 = objc_msgSend(objc_alloc((Class)objc_msgSend(v3, "sessionClass")), "initWithConnection:", *(void *)(*(void *)(a1 + 32) + 8));
  [*(id *)(a1 + 32) _readUsingSession:v2 withBlock:*(void *)(a1 + 48)];
}

void sub_10000D828(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10000D840(void *a1)
{
  id result = [*(id *)(a1[4] + 8) tableExists:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10000D8E4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) options];
  id v3 = [v2 databasePath];

  if ([*(id *)(*(void *)(a1 + 32) + 8) tableExists:@"schema_version"])
  {
    if (qword_10031B0B0 != -1) {
      dispatch_once(&qword_10031B0B0, &stru_1002D4FD0);
    }
    uint64_t v4 = qword_10031B098;
    if (os_log_type_enabled((os_log_t)qword_10031B098, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      uint64_t v7 = v3;
      os_log_t v5 = "Database opened at: %{public}@";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    if (qword_10031B0B0 != -1) {
      dispatch_once(&qword_10031B0B0, &stru_1002D4FD0);
    }
    uint64_t v4 = qword_10031B098;
    if (os_log_type_enabled((os_log_t)qword_10031B098, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      uint64_t v7 = v3;
      os_log_t v5 = "Database created at: %{public}@";
      goto LABEL_10;
    }
  }
}

uint64_t sub_10000DB20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10000DD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DD84(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [(id)objc_opt_class() createOrMigrateStoreUsingSchema:*(void *)(a1 + 40)];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

uint64_t sub_10000DE98(uint64_t a1)
{
  return 1;
}

void sub_10000DFAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100308888;
  off_100308888 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10031B068;
  qword_10031B068 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10031B070;
  qword_10031B070 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10031B078;
  qword_10031B078 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10031B080;
  qword_10031B080 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10031B088;
  qword_10031B088 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10031B090;
  qword_10031B090 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10031B098;
  qword_10031B098 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10031B0A0;
  qword_10031B0A0 = (uint64_t)v17;

  qword_10031B0A8 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

void sub_10000E250(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_10031B0B8;
  qword_10031B0B8 = (uint64_t)v1;

  os_log_t v3 = (void *)qword_10031B0B8;
  uint64_t v4 = +[NSTimeZone timeZoneForSecondsFromGMT:0];
  [v3 setTimeZone:v4];

  id v5 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
  [(id)qword_10031B0B8 setLocale:v5];

  int v6 = (void *)qword_10031B0B8;
  _[v6 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"];
}

id sub_10000F6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
  if (a3) {
    return [v3 setObject:a3 forKey:a2];
  }
  else {
    return [v3 removeObjectForKey:a2];
  }
}

uint64_t sub_1000126E4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) executeStatement:@"PRAGMA user_version = 1;" error:0];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "executeStatement:error:", @"CREATE TABLE IF NOT EXISTS schema_version (schema_name TEXT, schema_version INTEGER DEFAULT 0, PRIMARY KEY(schema_name));",
    0);
  return 1;
}

void sub_1000127EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012804(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  id v5 = [v4 firstInt64Value];

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
}

void sub_10001297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012994(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100012A2C;
  v5[3] = &unk_1002D4E50;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_100012A2C(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = [a2 stringForColumnName:@"name"];
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *a4 = v6;
}

id sub_100012B4C(void *a1)
{
  id v2 = [[SQLiteDatabaseStoreMigrator alloc] initWithConnection:*(void *)(a1[4] + 8)];
  (*(void (**)(void))(a1[5] + 16))();
  if ([(SQLiteDatabaseStoreMigrator *)v2 success])
  {
    uint64_t v3 = a1[4];
    long long v4 = *(void **)(v3 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100012C2C;
    v8[3] = &unk_1002D5120;
    uint64_t v5 = a1[6];
    void v8[4] = v3;
    v8[5] = v5;
    id v6 = [v4 executeStatement:@"INSERT OR REPLACE INTO schema_version (schema_name, schema_version) VALUES (?, ?)", 0, v8 error bindings];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_100012C2C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  [v4 bindInt64:*(void *)(a1 + 40) atPosition:2];
}

void sub_100012D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012D84(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
}

id sub_100012F54(unsigned int a1)
{
  if (qword_10031B0C8 != -1) {
    dispatch_once(&qword_10031B0C8, &stru_1002D51B8);
  }
  id v2 = *(&off_100308890 + a1);
  return v2;
}

void sub_100013154(_Unwind_Exception *a1)
{
}

void sub_1000133A8(_Unwind_Exception *a1)
{
}

void sub_1000137E0(_Unwind_Exception *a1)
{
}

void sub_100013B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013B94(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
}

id sub_100014078(uint64_t a1)
{
  return _[*(id *)(a1 + 32) step];
}

void sub_100014458(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100014718(sqlite3_context *a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  sqlite3_result_int64(a1, (uint64_t)v2);
}

void sub_1000149B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000149D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000149E0(uint64_t a1)
{
}

uint64_t sub_1000149E8(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 16), *(const char **)(a1 + 48), -1, &ppStmt, 0);
  if (sub_100015788(v2))
  {
    id v3 = [SQLiteStatement alloc];
    uint64_t v4 = [(SQLiteStatement *)v3 initWithStatement:ppStmt onConnection:*(void *)(a1 + 32)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  else
  {
    sqlite3_finalize(ppStmt);
  }
  return v2;
}

void sub_1000150F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100308890;
  off_100308890 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_100308898;
  qword_100308898 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  long long v6 = (void *)qword_1003088A0;
  qword_1003088A0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  long long v8 = (void *)qword_1003088A8;
  qword_1003088A8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_1003088B0;
  qword_1003088B0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_1003088B8;
  qword_1003088B8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_1003088C0;
  qword_1003088C0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_1003088C8;
  qword_1003088C8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_1003088D0;
  qword_1003088D0 = (uint64_t)v17;

  qword_1003088D8 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

void sub_100015248(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_100015280(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_1000152A0()
{
  return v0;
}

uint64_t sub_1000152AC(sqlite3 *a1, void *a2)
{
  id v3 = a2;
  sqlite3_extended_result_codes(a1, 1);
  uint64_t v4 = [v3 encryptionKeyId];

  if (v4)
  {
    [v3 encryptionKeyId];
  }
  uint64_t v5 = sqlite3_exec(a1, "PRAGMA journal_mode=WAL", 0, 0, 0);
  if (!v5)
  {
    id v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"PRAGMA cache_size=%ld", objc_msgSend(v3, "cacheSize"));
    uint64_t v5 = sqlite3_exec(a1, (const char *)[v6 UTF8String], 0, 0, 0);
  }
  return v5;
}

uint64_t static _UInt24.min.getter()
{
  return 0;
}

id sub_1000153A4(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSFileManager);
  id v3 = sub_100015454(v1, 0);
  [v2 removeItemAtPath:v3 error:0];

  uint64_t v4 = sub_100015454(v1, 1);
  [v2 removeItemAtPath:v4 error:0];

  id v5 = [v2 removeItemAtPath:v1 error:0];
  return v5;
}

id sub_100015454(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v5 = v4;
  if (a2)
  {
    if (a2 != 1) {
      goto LABEL_6;
    }
    CFStringRef v6 = @"-wal";
  }
  else
  {
    CFStringRef v6 = @"-shm";
  }
  id v2 = [v4 stringByAppendingString:v6];
LABEL_6:

  return v2;
}

id sub_1000154CC(sqlite3 *a1)
{
  int v2 = sqlite3_errcode(a1);
  if (v2)
  {
    int v3 = v2;
    id v4 = (char *)sqlite3_errmsg(a1);
    if (v4)
    {
      id v5 = [objc_alloc((Class)NSString) initWithUTF8String:v4];
      id v4 = (char *)objc_msgSend(objc_alloc((Class)NSDictionary), "initWithObjectsAndKeys:", v5, NSLocalizedDescriptionKey, 0);
    }
    CFStringRef v6 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:v3 userInfo:v4];
  }
  else
  {
    CFStringRef v6 = 0;
  }
  return v6;
}

uint64_t sub_1000155A4(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  ppDb = 0;
  id v4 = [v3 databasePath];
  if ([v3 isReadOnly])
  {
    int v5 = 2;
  }
  else
  {
    id v6 = objc_alloc_init((Class)NSFileManager);
    os_log_t v7 = [v4 stringByDeletingLastPathComponent];
    [v6 createDirectoryAtPath:v7 withIntermediateDirectories:1 attributes:0 error:0];

    int v5 = 6;
  }
  long long v8 = [v3 protectionType];
  os_log_t v9 = v8;
  if (v8) {
    v5 |= sub_1000156D0(v8);
  }
  id v10 = v4;
  uint64_t v11 = sqlite3_open_v2((const char *)[v10 fileSystemRepresentation], &ppDb, v5, 0);
  if (v11 || (uint64_t v11 = sub_1000152AC(ppDb, v3), v11))
  {
    if (ppDb) {
      sqlite3_close(ppDb);
    }
  }
  else
  {
    *a1 = ppDb;
  }

  return v11;
}

uint64_t sub_1000156D0(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:NSFileProtectionNone])
    {
      uint64_t v3 = 0x400000;
    }
    else if ([v2 isEqualToString:NSFileProtectionComplete])
    {
      uint64_t v3 = 0x100000;
    }
    else if ([v2 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      uint64_t v3 = 0x200000;
    }
    else if ([v2 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      uint64_t v3 = 3145728;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

BOOL sub_100015788(unsigned __int8 a1)
{
  return a1 - 100 < 2 || a1 == 0;
}

BOOL sub_1000157A4(void *a1)
{
  ppDb = 0;
  if (sqlite3_open_v2((const char *)[a1 fileSystemRepresentation], &ppDb, 2, 0))
  {
    return 0;
  }
  int v3 = 129;
  BOOL v1 = sqlite3_file_control(ppDb, 0, 101, &v3) == 0;
  sqlite3_close(ppDb);
  return v1;
}

NSString *sub_100015958(uint64_t a1)
{
  return +[NSString stringWithFormat:@"com.apple.storekit.unfinishedtransactions.%@", a1];
}

__CFString *sub_100015990(unint64_t a1)
{
  if (a1 >= 4)
  {
    BOOL v1 = +[NSString stringWithFormat:@"Unknown: %ld", a1];
  }
  else
  {
    BOOL v1 = off_1002D54D8[a1];
  }
  return v1;
}

BOOL sub_1000159F4(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

void sub_100015C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015C18(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100015CC0;
  v7[3] = &unk_1002D5518;
  uint64_t v10 = *(void *)(a1 + 56);
  int v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v5;
}

BOOL sub_100015CC0(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  BOOL result = +[SQLiteEntity _insertValues:a3 intoTable:a2 withPersistentID:a1[6] onConnection:a1[4]];
  if (!result)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

void sub_100015F7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL sub_100015F98(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [(id)objc_opt_class() databaseTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v2 _deleteRowFromTable:v3 usingColumn:@"ROWID"];

  [(id)objc_opt_class() foreignDatabaseTablesToDelete];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend((id)objc_opt_class(), "foreignKeyColumnForTable:", v9, (void)v15);
        if (v10)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [*(id *)(a1 + 32) _deleteRowFromTable:v9 usingColumn:v10];
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
          {

            goto LABEL_12;
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = *(void **)(v11 + 8);
    *(void *)(v11 + 8) = 0;

    BOOL v13 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_10001616C(uint64_t a1)
{
  int v2 = +[NSNotificationCenter defaultCenter];
  CFStringRef v5 = @"SQLiteUserInfoKeyPersistentID";
  id v3 = +[NSNumber numberWithLongLong:*(void *)(a1 + 32)];
  id v6 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_100016350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100016368(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
}

void sub_100016744(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = [v5 disambiguatedSQLForProperty:v6];
  if (a3) {
    [a1[4] appendString:@", "];
  }
  [a1[4] appendString:v8];
  uint64_t v7 = [a1[6] joinClauseForProperty:v6];

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_1000167F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000168C0;
  v5[3] = &unk_1002D55D8;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 enumerateRowsUsingBlock:v5];
}

void sub_1000168C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10001699C;
    v9[3] = &unk_1002D4D38;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 enumerateObjectsUsingBlock:v9];
  }
}

void sub_10001699C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  sub_1000033FC(v5, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void sub_100016BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100016C18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _copyTableClusteredValuesWithValues:*(void *)(a1 + 40)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100016CDC;
  v7[3] = &unk_1002D5678;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v5;
}

void sub_100016CDC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 56) foreignKeyColumnForTable:v7];
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0;
  unint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v11 = [objc_alloc((Class)NSMutableString) initWithString:@"SELECT 1 FROM "];
    [v11 appendString:v7];
    [v11 appendString:@" WHERE "];
    [v11 appendString:v10];
    [v11 appendString:@" =  ? LIMIT 1;"];
    uint64_t v12 = *(void *)(a1 + 40);
    BOOL v13 = *(void **)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100017080;
    v30[3] = &unk_1002D4E00;
    v30[4] = v12;
    v30[5] = &v31;
    [v13 executeQuery:v11 withResults:v30];
  }
  if (*((unsigned char *)v32 + 24))
  {
    id v14 = objc_alloc_init((Class)NSMutableArray);
    id v15 = [objc_alloc((Class)NSMutableString) initWithString:@"UPDATE "];
    [v15 appendString:v7];
    [v15 appendString:@" SET "];
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x2020000000;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1000170E0;
    v24[3] = &unk_1002D5628;
    unsigned int v27 = v28;
    id v16 = v15;
    id v25 = v16;
    id v17 = v14;
    id v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    [v16 appendString:@" WHERE "];
    [v16 appendString:v7];
    [v16 appendString:@"."];
    [v16 appendString:v10];
    [v16 appendString:@" = ?;"];
    long long v18 = *(void **)(*(void *)(a1 + 40) + 8);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10001718C;
    v21[3] = &unk_1002D5650;
    id v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    id v22 = v19;
    uint64_t v23 = v20;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v18 executeStatement:v16 error:0 bindings:v21];

    _Block_object_dispose(v28, 8);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = +[SQLiteEntity _insertValues:v8 intoTable:v7 withPersistentID:*(void *)(*(void *)(a1 + 40) + 16) onConnection:*(void *)(*(void *)(a1 + 40) + 8)];
  }
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_100017048(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100017080(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
}

void sub_1000170E0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    [*(id *)(a1 + 32) appendString:@", "];
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_10001718C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_100008FE8(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8 * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + v9);
    }
    while (v6);
    uint64_t v11 = (v10 + v9);
  }
  else
  {
    uint64_t v11 = 1;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_1000176DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v9), (void)v11);
        sub_100008FE8(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + v9);
    }
    while (v6);
  }
}

void sub_100017918(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = [a1[6] foreignDatabaseTableForProperty:v10];
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = [a1[6] foreignDatabaseColumnForProperty:v10];
    }
    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }
    id v9 = [a1[5] objectForKey:v7];
    if (!v9)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }
    [v9 setObject:v5 forKey:v8];
  }
}

id sub_100017B04(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

void sub_100017D98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100308CD8;
  off_100308CD8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10031B0D0;
  qword_10031B0D0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10031B0D8;
  qword_10031B0D8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10031B0E0;
  qword_10031B0E0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10031B0E8;
  qword_10031B0E8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  long long v12 = (void *)qword_10031B0F0;
  qword_10031B0F0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  long long v14 = (void *)qword_10031B0F8;
  qword_10031B0F8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10031B100;
  qword_10031B100 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  long long v18 = (void *)qword_10031B108;
  qword_10031B108 = (uint64_t)v17;

  qword_10031B110 = (uint64_t)os_log_create("com.apple.storekit", "ProductPage");
  _objc_release_x1();
}

void sub_100017FC4(id a1)
{
  os_log_t v1 = (void *)qword_10031B120;
  qword_10031B120 = (uint64_t)&off_1002F78E8;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = sub_10024E2A0();
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  os_log_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10024E2D0();
  sub_10001B550();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  id v16 = (char *)aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  qword_10034BFF0 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for OctaneXPCServiceDelegate()) init];
  qword_10034BFF8 = (uint64_t)[self serviceListener];
  [(id)qword_10034BFF8 setDelegate:qword_10034BFF0];
  sub_1000184A4(0, &qword_100308F18);
  sub_1000184A4(0, (unint64_t *)&qword_1003170D0);
  os_log_t v17 = (void *)sub_10024EE90();
  uint64_t v18 = sub_10024EEE0();

  qword_10034C000 = v18;
  swift_getObjectType();
  aBlock[4] = sub_1000184E0;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018758;
  aBlock[3] = &unk_1002DA2D0;
  id v19 = _Block_copy(aBlock);
  sub_10024E2C0();
  sub_1000187B4();
  sub_10024EEF0();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v10);
  swift_getObjectType();
  sub_10024EF00();
  [(id)qword_10034BFF8 activate];
  return 0;
}

uint64_t sub_1000184A4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1000184E0()
{
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10024E1F0();
  sub_10001B0E8(v0, (uint64_t)qword_10034C0E0);
  os_log_t v1 = sub_10024E1D0();
  os_log_type_t v2 = sub_10024EE30();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Stopping Octane server", v3, 2u);
    swift_slowDealloc();
  }

  if (qword_100308D38 != -1) {
    swift_once();
  }
  sub_1000F59F4();
  [(id)qword_10034BFF8 invalidate];
  exit(0);
}

uint64_t sub_100018758(uint64_t a1)
{
  os_log_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_10001879C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000187AC()
{
  return swift_release();
}

uint64_t sub_1000187B4()
{
  return sub_10024F280();
}

void variable initialization expression of HTTPServerPipelineHandler.eventBuffer()
{
}

void *variable initialization expression of SelectableEventLoop._scheduledTasks()
{
  uint64_t result = &_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    return sub_100019444();
  }
  return result;
}

void *variable initialization expression of SelectableEventLoop.tasksCopy()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of MultiThreadedEventLoopGroup.shutdownLock(uint64_t a1, uint64_t a2)
{
  return sub_10001B4F0((void (*)(void))type metadata accessor for Lock, a2, Lock.init());
}

SecKeyAlgorithm variable initialization expression of ECDSASignatureVerifier.algorithm()
{
  return (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
}

uint64_t variable initialization expression of ByteToMessageHandler.decoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000195B4(a2, 1, 1, a1);
}

void variable initialization expression of ByteToMessageHandler.queuedWrites()
{
}

double variable initialization expression of ByteToMessageHandler.buffer@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 47) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double Channel.syncOptions.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AddressedEnvelope.metadata()
{
  return 4;
}

unint64_t variable initialization expression of AddressedEnvelope.Metadata.packetInfo()
{
  return 0xF000000000000007;
}

uint64_t variable initialization expression of MultiThreadedEventLoopGroup.index()
{
  sub_100019524(&qword_100308F30);
  uint64_t v0 = swift_bufferAllocate();
  sub_100007818((void *)(v0 + 16), 0);
  return swift_dynamicCastClassUnconditional();
}

uint64_t variable initialization expression of MultiThreadedEventLoopGroup.runState()
{
  return 0;
}

uint64_t variable initialization expression of ClientBootstrap.connectTimeout()
{
  return 10000000000;
}

uint64_t variable initialization expression of Lock.mutex()
{
  return sub_10001B654();
}

uint64_t variable initialization expression of ConditionLock.cond()
{
  return sub_10001B654();
}

uint64_t variable initialization expression of MarkedCircularBuffer._markedIndexOffset()
{
  return 0;
}

uint64_t sub_100018A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

dispatch_semaphore_t variable initialization expression of NIOThreadPool.semaphore()
{
  return dispatch_semaphore_create(0);
}

uint64_t variable initialization expression of NIOThreadPool.state()
{
  return 0;
}

void *variable initialization expression of EmbeddedEventLoop.scheduledTasks()
{
  uint64_t result = &_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    return sub_100019884();
  }
  return result;
}

uint64_t _s25ASOctaneSupportXPCService19SelectableEventLoopC21_promiseCreationStore33_0BCEACC3506919B1B13063BD91501C76LLSDyAA09_NIOEventF16FutureIdentifierVs12StaticStringV4file_Su4linetGvpfi_0()
{
  sub_100019524(&qword_100308F20);
  sub_100019568();
  return sub_10024E510();
}

void variable initialization expression of EmbeddedChannelCore.pendingOutboundBuffer(uint64_t a1@<X8>)
{
  sub_1000306E4(0x10uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

void variable initialization expression of EmbeddedChannelCore.inboundBuffer()
{
}

void *(__cdecl *ByteBufferAllocator.init()())(size_t __size)
{
  return j_j__malloc;
}

uint64_t variable initialization expression of EmbeddedChannel.embeddedEventLoop()
{
  return sub_100018BF0((void (*)(void))type metadata accessor for EmbeddedEventLoop, 48, (uint64_t (*)(void))EmbeddedEventLoop.init());
}

uint64_t sub_100018BF0(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

unint64_t variable initialization expression of EmbeddedChannel.remoteAddress()
{
  return 0xF000000000000007;
}

uint64_t sub_100018C44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of MessageToByteHandler.state();
  *a1 = result;
  return result;
}

uint64_t sub_100018C6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000FBF88(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100018C9C(uint64_t a1, void *a2)
{
  return sub_1000FC754(a1, *a2);
}

uint64_t sub_100018CA4(void *a1)
{
  return sub_1000FC764(*a1);
}

uint64_t sub_100018CAC(void *a1)
{
  return sub_1000FC75C(*a1);
}

uint64_t sub_100018CB4()
{
  return sub_1001D3D8C(*v0);
}

void sub_100018CBC(uint64_t a1)
{
  _NIOEventLoopFutureIdentifier.hash(into:)(a1, *v1);
}

uint64_t sub_100018CC4(uint64_t a1)
{
  return sub_1000D29A0(a1, *v1);
}

BOOL sub_100018CCC(uint64_t *a1, uint64_t *a2)
{
  return static ChannelOptions.Types.SocketOption.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100018CD8()
{
  return sub_10024E190();
}

uint64_t sub_100018D24()
{
  return sub_10024E180();
}

Swift::Int sub_100018D7C()
{
  return sub_10024FC70();
}

uint64_t sub_100018DE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = debugOnly(_:)(*v1);
  *a1 = result;
  return result;
}

_DWORD *sub_100018E10@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_100018E20(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100018E2C(int *a1, int *a2)
{
  return static SelectorRegistrationID.== infix(_:_:)(*a1, *a2);
}

void *sub_100018E38@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100018E44(uint64_t a1@<X8>)
{
  sub_100018E78();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_100018E80()
{
  swift_getWitnessTable();
  return sub_10024E170();
}

void sub_100018EEC(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100018EF8(long long *a1)
{
  long long v2 = a1[1];
  long long v11 = *a1;
  long long v12 = v2;
  long long v13 = a1[2];
  uint64_t v3 = sub_10000CF7C((uint64_t)&v11);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unsigned int *)v3;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    long long v7 = a1[1];
    long long v11 = *a1;
    long long v12 = v7;
    long long v13 = a1[2];
    uint64_t v4 = (unsigned int *)sub_10000CFB0((uint64_t)&v11, v4);
    ++v5;
  }
  while (v4);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  if (v6 <= 0)
  {
    unint64_t v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100019524(&qword_1003090C8);
    unint64_t v8 = (void *)sub_10001B538();
    size_t v9 = j__malloc_size(v8);
    sub_10001B65C(v9);
  }
  if (sub_10013CB5C((uint64_t)&v11, (uint64_t)(v8 + 4), v6) != v6) {
LABEL_13:
  }
    __break(1u);
  return v8;
}

uint64_t sub_10001900C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (result == -1 && v3 == 0x8000000000000000) {
      goto LABEL_16;
    }
    uint64_t v6 = v3 / result;
    if (((v3 / result) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        sub_100019524(&qword_1003090D0);
        size_t v9 = (uint64_t *)sub_10001B538();
        j__malloc_size(v9);
        sub_10001B628();
        v9[2] = v6;
        v9[3] = v10;
        if (sub_10013CCC8(v11, v9 + 4, v6, v4, a2, a3) == (uint64_t *)v6) {
          return (uint64_t)v9;
        }
        __break(1u);
      }
      return (uint64_t)&_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_1000190DC(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[4];
  uint64_t v3 = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFSUB__(v2, v1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (uint64_t)result;
  if (v3 <= 0)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100019524(&qword_100309130);
    uint64_t v5 = (void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    v5[2] = v3;
    v5[3] = 2 * v6 - 64;
  }
  sub_10013CD90();
  uint64_t v8 = v7;
  sub_10001B078(v4);
  uint64_t result = (void *)swift_release();
  if (v8 == v3) {
    return v5;
  }
LABEL_12:
  __break(1u);
  return result;
}

void *sub_1000191B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100019524(&qword_100309128);
  uint64_t v2 = (const void *)sub_10001B538();
  size_t v3 = j__malloc_size(v2);
  sub_10001B65C(v3);
  sub_10013CEC4();
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v2;
}

void sub_100019260()
{
  sub_10001B51C();
  if (*(void *)(v0 + 16))
  {
    sub_100019524(&qword_100309110);
    uint64_t v1 = (const void *)sub_10001B538();
    size_t v2 = j__malloc_size(v1);
    sub_10001B5C4(2 * ((uint64_t)(v2 - 32) / 8));
    sub_10013D208(v3, v4, v5, v6);
    sub_10001B5DC();
    sub_10001B598();
    if (!v7) {
      __break(1u);
    }
  }
  sub_10001B500();
}

void *sub_1000192E8()
{
  sub_10001B6D8();
  if (v4) {
    goto LABEL_8;
  }
  sub_10001B69C();
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v1 <= 0)
    {
      size_t v2 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100019524((uint64_t *)&unk_10030FD80);
      uint64_t v5 = (void *)sub_10001B538();
      sub_10001B4C0(v5);
    }
    sub_10001B6E4();
    sub_10001AECC(v3, v1, v0, sub_1001DD344, &qword_1003090E0, &unk_1003090D8, sub_100200618);
    uint64_t v0 = v6;
    swift_bridgeObjectRelease();
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_8:
    sub_10001B56C();
    sub_10024F6F0();
    sub_10001B63C();
    if (!v1) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v2;
}

void sub_1000193C8()
{
  sub_10001B51C();
  if (*(void *)(v0 + 16))
  {
    sub_100019524(&qword_1003090E8);
    uint64_t v1 = (const void *)sub_10001B538();
    j__malloc_size(v1);
    sub_10001B628();
    sub_10001B5C4(v2);
    sub_10013D878();
    sub_10001B5DC();
    sub_10001B598();
    if (!v3) {
      __break(1u);
    }
  }
  sub_10001B500();
}

void *sub_100019444()
{
  sub_10001B6D8();
  if (v4) {
    goto LABEL_8;
  }
  sub_10001B69C();
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v1 <= 0)
    {
      uint64_t v2 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_100019524((uint64_t *)&unk_10030FD80);
      uint64_t v5 = (void *)sub_10001B538();
      sub_10001B4C0(v5);
    }
    sub_10001B6E4();
    sub_10001AD70(v3, v1, v0, sub_1001DDD14, &unk_100309160, &unk_100309158, sub_100200664);
    uint64_t v0 = v6;
    swift_bridgeObjectRelease();
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_8:
    sub_10001B56C();
    sub_10024F6F0();
    sub_10001B63C();
    if (!v1) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v2;
}

uint64_t sub_100019524(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100019568()
{
  unint64_t result = qword_100308F28;
  if (!qword_100308F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100308F28);
  }
  return result;
}

uint64_t sub_1000195B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

void sub_1000195DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 > 0)
    {
      sub_100019524(&qword_100309150);
      uint64_t v8 = (void *)sub_10001B538();
      j__malloc_size(v8);
      sub_10001B628();
      v8[2] = v5;
      v8[3] = v9;
    }
    if (v4 != a3)
    {
      sub_1001DDE04(a2 + 16 * a3, v5);
      return;
    }
    goto LABEL_9;
  }
}

void *sub_100019688(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100019524(&qword_100309130);
    uint64_t v3 = (void *)swift_allocObject();
    size_t v4 = j__malloc_size(v3);
    v3[2] = a2;
    v3[3] = 2 * v4 - 64;
  }
  sub_1001DDEBC();
  return v3;
}

void *sub_100019718()
{
  sub_10001B6D8();
  if (v4) {
    goto LABEL_8;
  }
  sub_10001B69C();
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v1 <= 0)
    {
      uint64_t v2 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_100019524((uint64_t *)&unk_10030FD80);
      uint64_t v5 = (void *)sub_10001B538();
      sub_10001B4C0(v5);
    }
    sub_10001B6E4();
    sub_10001AECC(v3, v1, v0, sub_1001DDFF8, &unk_100309108, &unk_100309100, sub_1002006B0);
    uint64_t v0 = v6;
    swift_bridgeObjectRelease();
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_8:
    sub_10001B56C();
    sub_10024F6F0();
    sub_10001B63C();
    if (!v1) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v2;
}

void sub_1000197F8()
{
  sub_10001B51C();
  if (*(void *)(v0 + 16))
  {
    sub_100019524((uint64_t *)&unk_10030FD80);
    uint64_t v1 = (const void *)sub_10001B538();
    size_t v2 = j__malloc_size(v1);
    sub_10001B5C4((2 * ((uint64_t)(v2 - 32) / 8)) | 1);
    sub_10013DEB4();
    sub_10001B5DC();
    sub_10001B598();
    if (!v3) {
      __break(1u);
    }
  }
  sub_10001B500();
}

void *sub_100019884()
{
  sub_10001B6D8();
  if (v4) {
    goto LABEL_8;
  }
  sub_10001B69C();
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v1 <= 0)
    {
      size_t v2 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_100019524((uint64_t *)&unk_10030FD80);
      uint64_t v5 = (void *)sub_10001B538();
      sub_10001B4C0(v5);
    }
    sub_10001B6E4();
    sub_10001AD70(v3, v1, v0, sub_1001DE42C, &unk_100309148, &unk_100309140, sub_10020057C);
    uint64_t v0 = v6;
    swift_bridgeObjectRelease();
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_8:
    sub_10001B56C();
    sub_10024F6F0();
    sub_10001B63C();
    if (!v1) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v2;
}

void type metadata accessor for http_errno(uint64_t a1)
{
}

void *initializeWithTake for RefundRequestUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t sub_100019984(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000199D8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

void type metadata accessor for http_parser_settings(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for BillingErrorHelperRoute.Request(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for BillingErrorHelperRoute.Request(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AuditToken(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AuditToken(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for http_parser(uint64_t a1)
{
}

__n128 initializeWithTake for PendingStreamWritesState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100019B08(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019B28(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_cond_t(uint64_t a1)
{
}

__n128 initializeWithTake for PendingDatagramWrite(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100019B88(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019BA8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *sub_100019C0C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_100019C14(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019C38(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 40++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 36++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 32++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 28++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 24++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 20++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 16++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 80++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 76++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 72++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 68++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 64++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 60++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 56++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 52++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 48++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 44++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

void type metadata accessor for SecIdentity(uint64_t a1)
{
}

void type metadata accessor for SecKeychain(uint64_t a1)
{
}

__n128 sub_10001A55C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for kevent(uint64_t a1)
{
}

void type metadata accessor for SecKeyAlgorithm(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for ASDOctaneValueIdentifier(uint64_t a1)
{
}

void type metadata accessor for ASDOctaneEventType(uint64_t a1)
{
}

__n128 initializeWithTake for PendingDatagramWritesState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001A5E8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A608(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

void type metadata accessor for CNIODarwin_mmsghdr(uint64_t a1)
{
}

__n128 initializeWithTake for HTTPMethod(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneConfigurationVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for iovec(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_unsigned_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_unsigned_long_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_long_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least32_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least32_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least16_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least16_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least8_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least8_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic__Bool(uint64_t a1)
{
}

void type metadata accessor for ASOctaneSimulatedErrorCategory(uint64_t a1)
{
}

void *initializeWithTake for EditSubscriptionUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_10001A794(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A7B4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
}

void *initializeWithTake for SubscriptionModificationContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_10001A81C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A83C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

void type metadata accessor for tcp_connection_info(uint64_t a1)
{
}

void type metadata accessor for in_addr(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NIOFileHandle.Flags(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NIOFileHandle.Flags(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NIOFileHandle.Flags(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for linger(uint64_t a1)
{
}

void *sub_10001A914(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x6AuLL);
}

uint64_t sub_10001A91C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A93C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 106) = v3;
  return result;
}

void type metadata accessor for sockaddr_un(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

__n128 sub_10001A9AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001A9C0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A9E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

void type metadata accessor for sockaddr_in6(uint64_t a1)
{
}

__n128 sub_10001AA24(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OctaneConfigurationVersion(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for sockaddr_in(uint64_t a1)
{
}

uint64_t sub_10001AA64()
{
  return sub_10001AAF4(&qword_1003090B8, type metadata accessor for ASDOctaneEventType);
}

uint64_t sub_10001AAAC()
{
  return sub_10001AAF4(&qword_1003090C0, type metadata accessor for ASDOctaneValueIdentifier);
}

uint64_t sub_10001AAF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10001AB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001AB54(a1, a2, a3, (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10013E118);
}

void *sub_10001AB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a3 - a2;
  if (a3 < a2) {
    v8 += *(void *)(a1 + 16);
  }
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
  if (v8 <= 0)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100019524(&qword_100309138);
    uint64_t v9 = (void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    v9[2] = v8;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 64);
  }
  uint64_t v11 = a4(v13, v9 + 4, v8, a1, a2, a3);
  swift_retain();
  uint64_t result = (void *)swift_release();
  if (v11 == v8) {
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001AC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    unint64_t v9 = ~a2 + a1;
    unint64_t v10 = a1 ^ 0x8000000000000000;
    if (v9 >= v10) {
      unint64_t v9 = v10;
    }
    unint64_t v11 = 0x8000000000000000;
    if (v9 < 0x8000000000000000) {
      unint64_t v11 = v9;
    }
    while ((v9 & 0x8000000000000000) == 0)
    {
      if (v10 == v11) {
        goto LABEL_23;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = ~a1 + a2;
    unint64_t v7 = a1 ^ 0x7FFFFFFFFFFFFFFFLL;
    if (v6 >= v7) {
      unint64_t v6 = v7;
    }
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6 < 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = v6;
    }
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v7 == v8) {
        goto LABEL_21;
      }
      if (v4 == ++result) {
        return result;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10001ACF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001AD70(a1, a2, a3, sub_1001DD4B8, &unk_100309120, &unk_100309118, sub_1002005CC);
}

uint64_t sub_10001AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001AD70(a1, a2, a3, sub_1001DD96C, &unk_1003090F8, &unk_1003090F0, sub_1002005CC);
}

#error "10001AE3C: call analysis failed (funcsize=87)"

#error "10001AF98: call analysis failed (funcsize=87)"

uint64_t sub_10001B028(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001B070()
{
  return swift_release();
}

uint64_t sub_10001B078(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001B0A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B0E8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

__n128 sub_10001B120(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sockaddr(uint64_t a1)
{
}

void type metadata accessor for http_method(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for CFNumber(uint64_t a1)
{
}

__n128 sub_10001B17C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_10001B190(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001B1B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

void type metadata accessor for ASOctaneSimulatedError(uint64_t a1)
{
}

__n128 initializeWithTake for CallbackList(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CallbackList(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallbackList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for msghdr(uint64_t a1)
{
}

void type metadata accessor for in6_addr(uint64_t a1)
{
}

uint64_t sub_10001B310()
{
  return sub_10001AAF4((unint64_t *)&qword_1003091C0, type metadata accessor for CFString);
}

uint64_t sub_10001B358()
{
  return sub_10001AAF4(&qword_1003091C8, type metadata accessor for CFString);
}

void type metadata accessor for CFBoolean(uint64_t a1)
{
}

uint64_t sub_10001B3B4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_10001B3C8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001B3E8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for cmsghdr(uint64_t a1)
{
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
}

void sub_10001B43C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0()
{
  return 0;
}

size_t sub_10001B4C0(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = (2 * ((uint64_t)(result - 32) / 8)) | 1;
  return result;
}

uint64_t sub_10001B4F0(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  return sub_100018BF0(a1, 24, a3);
}

uint64_t static NIODeadline.distantPast.getter()
{
  return 0;
}

uint64_t sub_10001B538()
{
  return swift_allocObject();
}

uint64_t sub_10001B56C()
{
  return swift_bridgeObjectRetain();
}

uint64_t variable initialization expression of ClientOverride.requestBundleVersion()
{
  return 0;
}

uint64_t sub_10001B598()
{
  return sub_10001B070();
}

void sub_10001B5C4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
}

uint64_t sub_10001B5DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001B63C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001B654()
{
  return swift_slowAlloc();
}

uint64_t sub_10001B65C(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2 * ((result - 32) / 32);
  return result;
}

uint64_t _s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorC15fullMessageHead33_EA03D782F2F5F710E65A4326ECAE420FLLAA012HTTPResponseI0VSgvpfi_0()
{
  return 0;
}

char *sub_10001B684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

void sub_10001B6A8()
{
  *(void *)(v0 + 8 * v1) = v2;
}

uint64_t static System.hasAsyncAwaitSupport.getter()
{
  return 1;
}

char *sub_10001B6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

uint64_t sub_10001B6E4()
{
  return swift_bridgeObjectRetain();
}

uint64_t static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter()
{
  return 2;
}

BOOL static NIOHTTPObjectAggregatorEvent.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NIOHTTPObjectAggregatorEvent.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t sub_10001B73C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x444970756F7267 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_10024FA60();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int NIOHTTPObjectAggregatorEvent.hashValue.getter(char a1)
{
  return sub_10024FC70();
}

uint64_t sub_10001B874(char a1)
{
  if (a1) {
    return 0x444970756F7267;
  }
  else {
    return 0x4449656C646E7562;
  }
}

BOOL sub_10001B8AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NIOHTTPObjectAggregatorEvent.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10001B8B8()
{
  return NIOHTTPObjectAggregatorEvent.hashValue.getter(*v0);
}

void sub_10001B8C0(uint64_t a1)
{
  NIOHTTPObjectAggregatorEvent.hash(into:)(a1, *v1);
}

Swift::Int sub_10001B8C8()
{
  Swift::UInt v1 = *v0;
  sub_10024FC00();
  sub_10024FC20(v1);
  return sub_10024FC70();
}

uint64_t sub_10001B90C()
{
  return sub_10001B874(*v0);
}

uint64_t sub_10001B914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001B73C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001B93C()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_10001B95C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B984(uint64_t a1)
{
  unint64_t v2 = sub_10001C500();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B9C0(uint64_t a1)
{
  unint64_t v2 = sub_10001C500();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001B9FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[0] = a4;
  v15[1] = a5;
  uint64_t v7 = sub_100019524(&qword_1003092D8);
  sub_10001B550();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  long long v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_10001C500();
  sub_10024FD40();
  char v17 = 0;
  sub_10024F940();
  if (!v5)
  {
    char v16 = 1;
    sub_10024F940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v7);
}

uint64_t sub_10001BB48(void *a1)
{
  sub_100019524(&qword_1003092C8);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  uint64_t v5 = a1[4];
  sub_10001C2A8(a1, a1[3]);
  sub_10001C500();
  sub_10024FD20();
  if (v1)
  {
    sub_10001C2EC((uint64_t)a1);
  }
  else
  {
    uint64_t v5 = sub_10024F830();
    swift_bridgeObjectRetain();
    sub_10024F830();
    uint64_t v7 = sub_10001C7E0();
    v8(v7);
    swift_bridgeObjectRetain();
    sub_10001C2EC((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_10001BD08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001BB48(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10001BD38(void *a1)
{
  return sub_10001B9FC(a1, *v1, v1[1], v1[2], v1[3]);
}

double sub_10001BD58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100216388();
  if (v3)
  {
    sub_10001BE20(v2, v3, v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = 3;
  }
  else
  {
    uint64_t v6 = 21;
  }
  ASOctaneSupportXPCService::HTTPVersion v7 = HTTPVersion.init(major:minor:)(1, 1);
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(v8 + 32) = v6;
  *(ASOctaneSupportXPCService::HTTPVersion *)(v8 + 40) = v7;
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 55) = 0;
  return result;
}

void sub_10001BE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = (void *)(v4 + 88);
  sub_10001C2A8((void *)(v4 + 88), *(void *)(v4 + 112));
  sub_10009D5A0();
  sub_10001C2A8((void *)(v4 + 88), *(void *)(v4 + 112));
  if ((sub_10009D5A0() & 1) == 0)
  {
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10024E1F0();
    sub_10001B0E8(v12, (uint64_t)qword_10034C0E0);
    long long v13 = sub_10024E1D0();
    os_log_type_t v14 = sub_10024EE30();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Did not find any transactions in billing error. Purchasing last transaction.", v15, 2u);
      swift_slowDealloc();
    }

    char v16 = sub_10001C2A8(v8, *(void *)(v5 + 112));
    sub_100019524(&qword_1003090E8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100255FB0;
    *(void *)(inited + 32) = a3;
    *(void *)(inited + 40) = a4;
    uint64_t v18 = *v16;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = (unint64_t)sub_1000FFCF4(inited, v18);
    swift_setDeallocating();
    sub_10020BB20();
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_10024F6F0();
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_15;
      }
    }
    else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_15:
      sub_10014ED88(0, (v19 & 0xC000000000000001) == 0, v19);
      if ((v19 & 0xC000000000000001) != 0) {
        id v20 = (id)sub_10024F380();
      }
      else {
        id v20 = *(id *)(v19 + 32);
      }
      int v21 = v20;
      swift_bridgeObjectRelease();
      sub_10001C2A8(v8, *(void *)(v5 + 112));
      id v22 = (void *)sub_10009E82C(v21, 0);

      return;
    }
    swift_bridgeObjectRelease();
    return;
  }
  sub_10001C2A8(v8, *(void *)(v4 + 112));
  sub_10009D83C();
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10024E1F0();
  sub_10001B0E8(v9, (uint64_t)qword_10034C0E0);
  oslog = sub_10024E1D0();
  os_log_type_t v10 = sub_10024EE30();
  if (os_log_type_enabled(oslog, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Resolved transactions in billing error.", v11, 2u);
    swift_slowDealloc();
  }
}

unint64_t sub_10001C19C(Swift::String a1, uint64_t a2, void *a3)
{
  sub_10024E800(a1);
  v6._countAndFlagsBits = 38;
  v6._object = (void *)0xE100000000000000;
  sub_10024E800(v6);
  v7._countAndFlagsBits = 6580578;
  v7._object = (void *)0xE300000000000000;
  sub_10024E800(v7);
  v8._countAndFlagsBits = 61;
  v8._object = (void *)0xE100000000000000;
  sub_10024E800(v8);
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  sub_10024E800(v9);
  return 0xD000000000000013;
}

uint64_t sub_10001C23C()
{
  uint64_t v0 = sub_100094D84();
  sub_10001C2EC(v0 + 88);
  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for BillingErrorHelperRoute()
{
  return self;
}

void *sub_10001C2A8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001C2EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t destroy for BillingErrorHelperRoute.Request()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BillingErrorHelperRoute.Request(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BillingErrorHelperRoute.Request(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BillingErrorHelperRoute.Request()
{
  return &type metadata for BillingErrorHelperRoute.Request;
}

unint64_t sub_10001C500()
{
  unint64_t result = qword_1003092D0;
  if (!qword_1003092D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003092D0);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for BillingErrorHelperRoute.Request.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BillingErrorHelperRoute.Request.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BillingErrorHelperRoute.Request.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001C6ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10001C6D4(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BillingErrorHelperRoute.Request.CodingKeys()
{
  return &type metadata for BillingErrorHelperRoute.Request.CodingKeys;
}

unint64_t sub_10001C6F4()
{
  unint64_t result = qword_1003092E0;
  if (!qword_1003092E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003092E0);
  }
  return result;
}

unint64_t sub_10001C744()
{
  unint64_t result = qword_1003092E8;
  if (!qword_1003092E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003092E8);
  }
  return result;
}

unint64_t sub_10001C794()
{
  unint64_t result = qword_1003092F0;
  if (!qword_1003092F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003092F0);
  }
  return result;
}

uint64_t sub_10001C7E0()
{
  return v0;
}

uint64_t sub_10001C7F8(uint64_t a1, void *a2)
{
  v7._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D5C58;
  v7._object = a2;
  Swift::Int v4 = sub_10024F790(v3, v7);
  swift_bridgeObjectRelease();
  if (v4 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C854(char a1)
{
  if (a1) {
    return 0x657070616D2D3276;
  }
  else {
    return 0x702D6C72752D3276;
  }
}

uint64_t sub_10001C8A4(char *a1, char *a2)
{
  return sub_1000FBC5C(*a1, *a2);
}

Swift::Int sub_10001C8B0()
{
  return sub_1001D33DC();
}

uint64_t sub_10001C8B8()
{
  return sub_1000D27B0();
}

Swift::Int sub_10001C8C0()
{
  return sub_1000D3C6C();
}

uint64_t sub_10001C8C8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10001C7F8(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10001C8F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001C854(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001C924()
{
  return sub_10001C854(*v0);
}

uint64_t sub_10001C92C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10001C84C();
  *a1 = result;
  return result;
}

void sub_10001C954(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001C960(uint64_t a1)
{
  unint64_t v2 = sub_100020224();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001C99C(uint64_t a1)
{
  unint64_t v2 = sub_100020224();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001C9D8(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_100309468);
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  sub_10001C2A8(a1, a1[3]);
  sub_100020224();
  sub_10024FD40();
  sub_100019524(&qword_100309410);
  sub_10001FC58((unint64_t *)&qword_100309418);
  sub_100020614();
  if (!v1)
  {
    sub_100019524(&qword_100309478);
    sub_100020270(&qword_100309480);
    sub_100020614();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v10, v3);
}

uint64_t sub_10001CB64(void *a1)
{
  sub_100019524(&qword_100309488);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  sub_10002059C();
  uint64_t v5 = a1[3];
  sub_10001C2A8(a1, v5);
  sub_100020224();
  sub_10024FD20();
  if (v1)
  {
    sub_10001C2EC((uint64_t)a1);
  }
  else
  {
    sub_100019524(&qword_100309410);
    sub_10001FC58(&qword_100309438);
    sub_100020670();
    sub_10024F870();
    uint64_t v5 = v9;
    sub_100019524(&qword_100309478);
    sub_100020270((unint64_t *)&qword_100309490);
    swift_bridgeObjectRetain();
    sub_100020670();
    sub_10024F870();
    uint64_t v7 = sub_1000206BC();
    v8(v7);
    swift_bridgeObjectRetain();
    sub_10001C2EC((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_10001CD6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001CB64(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10001CD98(void *a1)
{
  return sub_10001C9D8(a1);
}

uint64_t sub_10001CDB4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  a4[17] = 100;
  uint64_t v8 = (int *)type metadata accessor for BagResponse();
  unint64_t v35 = (char *)a4 + v8[19];
  uint64_t v9 = a3[1];
  uint64_t v10 = (uint64_t *)((char *)a4 + v8[17]);
  void *v10 = *a3;
  v10[1] = v9;
  sub_10001DAC0();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_10024F150();
  uint64_t v12 = (uint64_t *)((char *)a4 + v8[21]);
  uint64_t *v12 = v11;
  v12[1] = v13;
  uint64_t v15 = a3[4];
  uint64_t v14 = a3[5];
  swift_bridgeObjectRetain();
  sub_10001DB0C((uint64_t)a3);
  char v16 = (uint64_t *)((char *)a4 + v8[18]);
  void *v16 = v15;
  v16[1] = v14;
  uint64_t v17 = sub_10024F170();
  uint64_t v18 = (uint64_t *)((char *)a4 + v8[22]);
  uint64_t *v18 = v17;
  v18[1] = v19;
  v36._countAndFlagsBits = a1;
  v36._object = a2;
  sub_10024E800(v36);
  v37._countAndFlagsBits = 58;
  v37._object = (void *)0xE100000000000000;
  sub_10024E800(v37);
  v38._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v38);
  swift_bridgeObjectRelease();
  sub_100020534();
  v39._countAndFlagsBits = 0xD00000000000002ELL;
  v39._object = (void *)0x8000000100279E20;
  sub_10024E800(v39);
  sub_100019524(&qword_1003090E8);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100256170;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  swift_bridgeObjectRetain_n();
  v40._countAndFlagsBits = 58;
  v40._object = (void *)0xE100000000000000;
  sub_10024E800(v40);
  v41._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v41);
  swift_bridgeObjectRelease();
  *(void *)(v20 + 48) = a1;
  *(void *)(v20 + 56) = a2;
  *a4 = v20;
  sub_10024E020();
  v42._countAndFlagsBits = 58;
  v42._object = (void *)0xE100000000000000;
  sub_10024E800(v42);
  v43._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v43);
  swift_bridgeObjectRelease();
  int v21 = (uint64_t *)((char *)a4 + v8[20]);
  uint64_t *v21 = a1;
  v21[1] = (uint64_t)a2;
  *(void *)unint64_t v35 = 0;
  v35[8] = 0;
  *(uint64_t *)((char *)a4 + v8[23]) = 40;
  *(uint64_t *)((char *)a4 + v8[26]) = (uint64_t)_swiftEmptyArrayStorage;
  *(uint64_t *)((char *)a4 + v8[24]) = 900;
  *(uint64_t *)((char *)a4 + v8[25]) = 900;
  sub_100020534();
  v44._object = (void *)0x8000000100279E20;
  v44._countAndFlagsBits = 0xD00000000000002ELL;
  sub_10024E800(v44);
  swift_bridgeObjectRelease();
  a4[1] = a1;
  a4[2] = (uint64_t)a2;
  sub_100020534();
  v22._countAndFlagsBits = 0xD00000000000002DLL;
  sub_100020658(v22, (uint64_t)"/WebObjects/MZFinance.woa/wa/createAppReceipt");
  a4[3] = a1;
  a4[4] = (uint64_t)a2;
  sub_100020534();
  v23._countAndFlagsBits = 0xD000000000000027;
  sub_100020658(v23, (uint64_t)"/WebObjects/MZFinance.woa/wa/buyProduct");
  a4[5] = a1;
  a4[6] = (uint64_t)a2;
  sub_100020534();
  v24._countAndFlagsBits = 0xD000000000000021;
  sub_100020658(v24, (uint64_t)"/WebObjects/MZBuy.woa/wa/inAppBuy");
  a4[7] = a1;
  a4[8] = (uint64_t)a2;
  sub_100020534();
  v25._countAndFlagsBits = 0xD000000000000031;
  sub_100020658(v25, (uint64_t)"/WebObjects/MZFinance.woa/wa/inAppTransactionDone");
  a4[9] = a1;
  a4[10] = (uint64_t)a2;
  sub_100020534();
  v45._countAndFlagsBits = 0x2F737070416E692FLL;
  v45._object = (void *)0xEF79726F74736968;
  sub_10024E800(v45);
  a4[11] = a1;
  a4[12] = (uint64_t)a2;
  sub_100020534();
  v46._object = (void *)0x8000000100279D10;
  v46._countAndFlagsBits = 0xD000000000000038;
  sub_10024E800(v46);
  a4[13] = a1;
  a4[14] = (uint64_t)a2;
  sub_100020534();
  v26._countAndFlagsBits = 0xD000000000000015;
  sub_100020658(v26, (uint64_t)"/inApps/subscriptions");
  a4[15] = a1;
  a4[16] = (uint64_t)a2;
  sub_100020534();
  v47._object = (void *)0x8000000100279CD0;
  v47._countAndFlagsBits = 0xD000000000000038;
  sub_10024E800(v47);
  a4[18] = a1;
  a4[19] = (uint64_t)a2;
  sub_100020534();
  v27._countAndFlagsBits = 0xD000000000000035;
  sub_100020658(v27, (uint64_t)"/WebObjects/MZFinance.woa/wa/inAppPendingTransactions");
  a4[20] = a1;
  a4[21] = (uint64_t)a2;
  sub_100020534();
  v48._countAndFlagsBits = 0x2F646E756665722FLL;
  v48._object = (void *)0xEF74736575716572;
  sub_10024E800(v48);
  unsigned int v28 = (uint64_t *)((char *)a4 + v8[27]);
  *unsigned int v28 = a1;
  v28[1] = (uint64_t)a2;
  sub_100020534();
  sub_1000205AC();
  char v29 = (uint64_t *)((char *)a4 + v8[28]);
  *char v29 = a1;
  v29[1] = (uint64_t)a2;
  sub_100020534();
  v49._countAndFlagsBits = 0x6D65656465722FLL;
  v49._object = (void *)0xE700000000000000;
  sub_10024E800(v49);
  uint64_t v30 = (uint64_t *)((char *)a4 + v8[29]);
  *uint64_t v30 = a1;
  v30[1] = (uint64_t)a2;
  sub_10024E510();
  uint64_t v31 = (uint64_t *)((char *)a4 + v8[30]);
  *uint64_t v31 = &off_1002D5CA8;
  sub_100019524(&qword_100309300);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100256170;
  strcpy((char *)(inited + 32), "/subscriptions");
  *(unsigned char *)(inited + 47) = -18;
  sub_10024F330(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000205AC();
  *(void *)(inited + 48) = 0x2F2F3A70747468;
  *(void *)(inited + 56) = 0xE700000000000000;
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x8000000100279E50;
  sub_10024F330(28);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0xD00000000000001ALL;
  v50._object = (void *)0x8000000100279E50;
  sub_10024E800(v50);
  *(void *)(inited + 80) = 0x2F2F3A70747468;
  *(void *)(inited + 88) = 0xE700000000000000;
  uint64_t v33 = sub_10024E510();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  v31[1] = v33;
  return result;
}

void sub_10001D3B0(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 9:
      sub_100020688();
      break;
    default:
      return;
  }
}

uint64_t sub_10001D534()
{
  unint64_t v0 = sub_10024FB00();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B) {
    return 27;
  }
  else {
    return v0;
  }
}

uint64_t static NIOBSDSocket.Option.ipv6_v6only.getter()
{
  return 27;
}

void sub_10001D594(char a1)
{
  switch(a1)
  {
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 13:
    case 14:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 25:
      sub_100020688();
      break;
    default:
      return;
  }
}

uint64_t sub_10001D8E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000FBD08(*a1, *a2);
}

Swift::Int sub_10001D8EC()
{
  return sub_1001D33E8(*v0);
}

uint64_t sub_10001D8F4(uint64_t a1)
{
  return sub_1000D2834(a1, *v1);
}

Swift::Int sub_10001D8FC(uint64_t a1)
{
  return sub_1000D3CF4(a1, *v1);
}

uint64_t sub_10001D904@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10001D534();
  *a1 = result;
  return result;
}

void sub_10001D934(void *a1@<X8>)
{
  sub_10001D594(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t sub_10001D960()
{
  return sub_10001D8DC(*v0);
}

uint64_t sub_10001D968@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10001D588();
  *a1 = result;
  return result;
}

void sub_10001D990(unsigned char *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_10001D99C(uint64_t a1)
{
  unint64_t v2 = sub_10001FBC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001D9D8(uint64_t a1)
{
  unint64_t v2 = sub_10001FBC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001DA14(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  sub_10001D3B0(a2);
  uint64_t v8 = sub_1000FFC58(v6, v7, a3, a4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t type metadata accessor for BagResponse()
{
  uint64_t result = qword_100309360;
  if (!qword_100309360) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10001DAC0()
{
  unint64_t result = qword_1003092F8;
  if (!qword_1003092F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003092F8);
  }
  return result;
}

uint64_t sub_10001DB0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001DB78(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_100309400);
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  sub_10001C2A8(a1, a1[3]);
  sub_10001FBC0();
  sub_10024FD40();
  sub_100019524(&qword_100309410);
  sub_10001FC58((unint64_t *)&qword_100309418);
  sub_1000205E8();
  if (!v1)
  {
    sub_1000204C4(1);
    sub_1000204C4(2);
    sub_1000204C4(3);
    sub_1000204C4(4);
    sub_1000204C4(5);
    sub_1000204C4(6);
    sub_10002054C(7);
    sub_1000204C4(8);
    sub_1000204C4(9);
    uint64_t v12 = (int *)type metadata accessor for BagResponse();
    sub_10024E030();
    sub_10001FCBC((unint64_t *)&qword_100309420);
    sub_10024F980();
    sub_1000205DC(v12[17]);
    sub_1000204C4(11);
    sub_1000205DC(v12[18]);
    sub_1000204C4(12);
    sub_10024F8F0();
    sub_1000205DC(v12[20]);
    sub_1000204C4(14);
    sub_1000205DC(v12[21]);
    sub_1000204C4(15);
    sub_1000205DC(v12[22]);
    sub_1000204C4(16);
    sub_1000204C4(17);
    sub_1000204C4(18);
    sub_10002054C(19);
    sub_10002054C(20);
    sub_10002054C(21);
    sub_1000205E8();
    sub_1000205DC(v12[27]);
    sub_1000204C4(23);
    sub_1000205DC(v12[28]);
    sub_1000204C4(24);
    sub_10001FC0C();
    sub_10024F980();
    sub_1000205DC(v12[29]);
    sub_1000204C4(26);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v10, v3);
}

uint64_t sub_10001DFDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10024E030();
  sub_10001B550();
  uint64_t v52 = v6;
  uint64_t v53 = v5;
  __chkstk_darwin(v5, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  sub_100019524(&qword_100309430);
  sub_10001B550();
  __chkstk_darwin(v11, v12);
  sub_10002059C();
  uint64_t v13 = type metadata accessor for BagResponse();
  __chkstk_darwin(v13, v14);
  sub_10002059C();
  uint64_t v17 = (char *)(v16 - v15);
  *((void *)v17 + 17) = 100;
  v55 = v18;
  int v56 = v17;
  uint64_t v19 = &v17[v18[19]];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v54 = (uint64_t)a1;
  sub_10001C2A8(a1, a1[3]);
  sub_10001FBC0();
  sub_10024FD20();
  if (v2) {
    return sub_10001C2EC((uint64_t)a1);
  }
  sub_100019524(&qword_100309410);
  sub_10001FC58(&qword_100309438);
  sub_10024F870();
  *(void *)int v56 = v57;
  *((void *)v56 + 1) = sub_100020518(1);
  *((void *)v56 + 2) = v20;
  *((void *)v56 + 3) = sub_100020518(2);
  *((void *)v56 + 4) = v21;
  *((void *)v56 + 5) = sub_100020518(3);
  *((void *)v56 + 6) = v22;
  *((void *)v56 + 7) = sub_100020518(4);
  *((void *)v56 + 8) = v23;
  *((void *)v56 + 9) = sub_100020518(5);
  *((void *)v56 + 10) = v24;
  *((void *)v56 + 13) = sub_100020518(6);
  *((void *)v56 + 14) = v25;
  *((void *)v56 + 17) = sub_10024F850();
  *((void *)v56 + 18) = sub_100020518(8);
  *((void *)v56 + 19) = v26;
  *((void *)v56 + 20) = sub_100020518(9);
  *((void *)v56 + 21) = v27;
  sub_10001FCBC(&qword_100309440);
  sub_10024F870();
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(&v56[v55[16]], v10, v53);
  uint64_t v28 = sub_100020694(11);
  sub_100020570(v28, v29, v55[17]);
  uint64_t v30 = sub_100020580(12);
  sub_100020570(v30, v31, v55[18]);
  *(void *)uint64_t v19 = sub_10024F7E0();
  v19[8] = v32 & 1;
  uint64_t v33 = sub_100020694(14);
  sub_100020570(v33, v34, v55[20]);
  uint64_t v35 = sub_100020580(15);
  sub_100020570(v35, v36, v55[21]);
  uint64_t v37 = sub_100020580(16);
  sub_100020570(v37, v38, v55[22]);
  *((void *)v56 + 11) = sub_100020580(17);
  *((void *)v56 + 12) = v39;
  *((void *)v56 + 15) = sub_100020580(18);
  *((void *)v56 + 16) = v40;
  *(void *)&v56[v55[23]] = sub_10024F850();
  *(void *)&v56[v55[24]] = sub_10024F850();
  LOBYTE(v57) = 21;
  *(void *)&v56[v55[25]] = sub_10024F850();
  sub_10024F870();
  *(void *)&v56[v55[26]] = v57;
  LOBYTE(v57) = 23;
  uint64_t v41 = sub_10024F830();
  sub_100020570(v41, v42, v55[27]);
  uint64_t v43 = sub_100020580(24);
  sub_100020570(v43, v44, v55[28]);
  sub_10001FD00();
  sub_10024F870();
  *(_OWORD *)&v56[v55[30]] = v57;
  uint64_t v45 = sub_10024F830();
  uint64_t v47 = v46;
  uint64_t v48 = sub_1000204E8();
  v49(v48);
  Swift::String v50 = (uint64_t *)&v56[v55[29]];
  *Swift::String v50 = v45;
  v50[1] = v47;
  sub_10001FD4C((uint64_t)v56, a2);
  sub_10001C2EC(v54);
  return sub_10001FDB0((uint64_t)v56);
}

uint64_t sub_10001EA4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001DFDC(a1, a2);
}

uint64_t sub_10001EA64(void *a1)
{
  return sub_10001DB78(a1);
}

uint64_t sub_10001EA7C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v10;
    uint64_t v11 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v12;
    uint64_t v13 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v13;
    uint64_t v14 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v14;
    uint64_t v15 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    uint64_t v16 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v16;
    uint64_t v17 = a3[16];
    uint64_t v61 = (uint64_t)a2 + v17;
    uint64_t v62 = a1 + v17;
    *(void *)(a1 + 168) = a2[21];
    uint64_t v18 = sub_10024E030();
    unsigned int v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60(v62, v61, v18);
    uint64_t v19 = a3[17];
    uint64_t v20 = a3[18];
    uint64_t v21 = (void *)(v7 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)(v7 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v63 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v63;
    uint64_t v26 = a3[19];
    uint64_t v27 = a3[20];
    uint64_t v28 = v7 + v26;
    uint64_t v29 = (uint64_t)a2 + v26;
    *(void *)uint64_t v28 = *(void *)v29;
    *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
    uint64_t v30 = (void *)(v7 + v27);
    uint64_t v31 = (uint64_t *)((char *)a2 + v27);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[21];
    uint64_t v34 = a3[22];
    uint64_t v35 = (void *)(v7 + v33);
    uint64_t v36 = (uint64_t *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (void *)(v7 + v34);
    uint64_t v39 = (uint64_t *)((char *)a2 + v34);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = a3[24];
    *(void *)(v7 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)(v7 + v41) = *(uint64_t *)((char *)a2 + v41);
    uint64_t v42 = a3[26];
    *(void *)(v7 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    *(void *)(v7 + v42) = *(uint64_t *)((char *)a2 + v42);
    uint64_t v43 = a3[27];
    uint64_t v44 = a3[28];
    uint64_t v45 = (void *)(v7 + v43);
    uint64_t v46 = (uint64_t *)((char *)a2 + v43);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = (void *)(v7 + v44);
    Swift::String v49 = (uint64_t *)((char *)a2 + v44);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = a3[29];
    uint64_t v52 = a3[30];
    uint64_t v53 = (void *)(v7 + v51);
    uint64_t v54 = (uint64_t *)((char *)a2 + v51);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    int v56 = (void *)(v7 + v52);
    long long v57 = (uint64_t *)((char *)a2 + v52);
    uint64_t v58 = v57[1];
    *int v56 = *v57;
    v56[1] = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_10001ED70(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 64);
  uint64_t v5 = sub_10024E030();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001EEE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = a3[16];
  uint64_t v59 = a2 + v15;
  uint64_t v60 = a1 + v15;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v16 = sub_10024E030();
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58(v60, v59, v16);
  uint64_t v17 = a3[17];
  uint64_t v18 = a3[18];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v61 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v61;
  uint64_t v24 = a3[19];
  uint64_t v25 = a3[20];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = (void *)(a1 + v25);
  uint64_t v29 = (void *)(a2 + v25);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[21];
  uint64_t v32 = a3[22];
  uint64_t v33 = (void *)(a1 + v31);
  uint64_t v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (void *)(a1 + v32);
  uint64_t v37 = (void *)(a2 + v32);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v40 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v40) = *(void *)(a2 + v40);
  uint64_t v41 = a3[27];
  uint64_t v42 = a3[28];
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = (void *)(a1 + v42);
  uint64_t v47 = (void *)(a2 + v42);
  uint64_t v48 = v47[1];
  void *v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = a3[29];
  uint64_t v50 = a3[30];
  uint64_t v51 = (void *)(a1 + v49);
  uint64_t v52 = (void *)(a2 + v49);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = (void *)(a1 + v50);
  uint64_t v55 = (void *)(a2 + v50);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10001F18C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[16];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10024E030();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[17];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[18];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[19];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[20];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  void *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[21];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[22];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[23]) = *(void *)((char *)a2 + a3[23]);
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  *(void *)((char *)a1 + a3[25]) = *(void *)((char *)a2 + a3[25]);
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[27];
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[28];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[29];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[30];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  *(void *)((char *)a1 + v38) = *(void *)((char *)a2 + v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001F568(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v6 = *(_OWORD *)(a2 + 160);
  uint64_t v7 = a3[16];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  uint64_t v10 = sub_10024E030();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[19];
  uint64_t v13 = a3[20];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v16 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v20 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  return a1;
}

uint64_t sub_10001F6E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[16];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_10024E030();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[17];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[18];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[19];
  uint64_t v30 = a3[20];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = (void *)(a1 + v30);
  uint64_t v34 = (uint64_t *)(a2 + v30);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[21];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[22];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v47) = *(void *)(a2 + v47);
  uint64_t v48 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v48) = *(void *)(a2 + v48);
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[27];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (uint64_t *)(a2 + v49);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  *uint64_t v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[28];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  void *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[29];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[30];
  uint64_t v65 = a1 + v64;
  unsigned int v66 = (void *)(a2 + v64);
  *(void *)(a1 + v64) = *v66;
  swift_bridgeObjectRelease();
  *(void *)(v65 + 8) = v66[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001F970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F984);
}

uint64_t sub_10001F984(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10024E030();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 64);
    return sub_10001FA0C(v9, a2, v8);
  }
}

uint64_t sub_10001FA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10001FA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FA48);
}

void *sub_10001FA48(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10024E030();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 64);
    return (void *)sub_1000195B4(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10001FAC8()
{
  uint64_t result = sub_10024E030();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10001FBC0()
{
  unint64_t result = qword_100309408;
  if (!qword_100309408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309408);
  }
  return result;
}

unint64_t sub_10001FC0C()
{
  unint64_t result = qword_100309428;
  if (!qword_100309428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309428);
  }
  return result;
}

uint64_t sub_10001FC58(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(&qword_100309410);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001FCBC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10024E030();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001FD00()
{
  unint64_t result = qword_100309448;
  if (!qword_100309448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309448);
  }
  return result;
}

uint64_t sub_10001FD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BagResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FDB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BagResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001FE0C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE6)
  {
    if (a2 + 26 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 26) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 27;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v5 = v6 - 27;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10001FE94(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *unint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001FF60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

void type metadata accessor for BagResponse.CodingKeys()
{
}

uint64_t sub_10001FF98()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_10001FFD4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10002000C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10002006C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventLoopIterator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventLoopIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for BagResponse.CommerceUISection()
{
}

unint64_t sub_100020138()
{
  unint64_t result = qword_100309450;
  if (!qword_100309450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309450);
  }
  return result;
}

unint64_t sub_100020188()
{
  unint64_t result = qword_100309458;
  if (!qword_100309458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309458);
  }
  return result;
}

unint64_t sub_1000201D8()
{
  unint64_t result = qword_100309460;
  if (!qword_100309460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309460);
  }
  return result;
}

unint64_t sub_100020224()
{
  unint64_t result = qword_100309470;
  if (!qword_100309470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309470);
  }
  return result;
}

uint64_t sub_100020270(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(&qword_100309478);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_1000202D4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000203A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for BagResponse.CommerceUISection.CodingKeys()
{
}

unint64_t sub_1000203D8()
{
  unint64_t result = qword_100309498;
  if (!qword_100309498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309498);
  }
  return result;
}

unint64_t sub_100020428()
{
  unint64_t result = qword_1003094A0;
  if (!qword_1003094A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003094A0);
  }
  return result;
}

unint64_t sub_100020478()
{
  unint64_t result = qword_1003094A8;
  if (!qword_1003094A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003094A8);
  }
  return result;
}

uint64_t sub_1000204C4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return sub_10024F940();
}

uint64_t sub_1000204E8()
{
  return *(void *)(v0 - 136);
}

uint64_t sub_1000204FC()
{
  *(void *)(v2 - 112) = v1;
  return v0;
}

uint64_t sub_100020518@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return sub_10024F830();
}

uint64_t sub_100020534()
{
  *(void *)(v2 - 112) = v1;
  *(void *)(v2 - 104) = v0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002054C@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return sub_10024F960();
}

uint64_t sub_100020570@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (void *)(*(void *)(v3 - 104) + a3);
  void *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_100020580@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return sub_10024F830();
}

void sub_1000205AC()
{
  v1._countAndFlagsBits = 0x697263736275732FLL;
  v1._object = (void *)0xEE00736E6F697470;
  sub_10024E800(v1);
}

uint64_t sub_1000205DC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_1000205E8()
{
  return sub_10024F980();
}

uint64_t sub_100020614()
{
  return sub_10024F980();
}

uint64_t sub_100020640()
{
  return swift_bridgeObjectRelease();
}

void sub_100020658(Swift::String a1@<X1:X0>, uint64_t a2@<X8>)
{
  a1._object = (void *)((a2 - 32) | 0x8000000000000000);
  sub_10024E800(a1);
}

uint64_t sub_100020670()
{
  return v0;
}

uint64_t sub_100020694@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return sub_10024F830();
}

uint64_t sub_1000206BC()
{
  return v0;
}

uint64_t sub_1000206D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return a3 + a1;
  }
  else {
    return 0;
  }
}

char *sub_1000206EC(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return (char *)_swiftEmptyArrayStorage;
  }
LABEL_3:
  unint64_t v15 = v2;
  unint64_t result = sub_100038B88(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v2 & 0xC000000000000001;
    while (1)
    {
      if (v3 == v5)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        uint64_t v3 = sub_10024F6F0();
        swift_bridgeObjectRelease();
        if (!v3) {
          goto LABEL_25;
        }
        goto LABEL_3;
      }
      if (v6)
      {
        uint64_t v7 = sub_10024F380();
      }
      else
      {
        uint64_t v7 = *(void *)(v2 + 8 * v5 + 32);
        swift_retain();
      }
      unint64_t v8 = *(void *)(v7 + 56);
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain_n();
        if (!sub_10024F6F0())
        {
LABEL_16:
          swift_release();
          swift_bridgeObjectRelease();
          char v11 = 3;
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v9) {
          goto LABEL_16;
        }
      }
      if ((v8 & 0xC000000000000001) != 0)
      {
        sub_10024F380();
      }
      else
      {
        if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_23;
        }
        swift_retain();
      }
      swift_bridgeObjectRelease();
      sub_10001C2A8((void *)(a2 + 88), *(void *)(a2 + 112));
      uint64_t v10 = swift_retain();
      char v11 = sub_10009FC6C(v10);
      swift_release();
      swift_release_n();
      unint64_t v2 = v15;
LABEL_17:
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
      {
        sub_100038B88((char *)(v12 > 1), v13 + 1, 1);
        unint64_t v2 = v15;
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v8;
      *((unsigned char *)v14 + 40) = v11;
      if (v3 == v5) {
        goto LABEL_25;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_10002096C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    unint64_t v2 = sub_1000C2720(0x6465722D65646F63, 0xEB000000006D6565, 1819112552, 0xE400000000000000);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_100021534(v3);
  }
  sub_10002158C(v1);
  return v2;
}

uint64_t sub_100020A14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100212134();
  uint64_t v4 = sub_100161540(1684628080, 0xE400000000000000, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v81 = a1;
  if (!v6)
  {
    ASOctaneSupportXPCService::HTTPVersion v58 = HTTPVersion.init(major:minor:)(1, 1);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    long long v62 = 0uLL;
    uint64_t v63 = 21;
LABEL_97:
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = v63;
    *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v58;
    *(void *)uint64_t v81 = result;
    *(void *)(v81 + 8) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v81 + 16) = 2;
    *(_OWORD *)(v81 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v62;
    *(void *)(v81 + 40) = v60;
    *(void *)(v81 + 48) = v61;
    *(unsigned char *)(v81 + 62) = BYTE6(v6);
    *(_WORD *)(v81 + 60) = WORD2(v6);
    *(_DWORD *)(v81 + 56) = v6;
    return result;
  }
  uint64_t v7 = sub_10002096C();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    ASOctaneSupportXPCService::HTTPVersion v58 = HTTPVersion.init(major:minor:)(1, 1);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v6 = 0;
    long long v62 = 0uLL;
    uint64_t v63 = 49;
    goto LABEL_97;
  }
  Swift::Int v79 = v8;
  uint64_t v80 = (uint64_t)v7;
  sub_10001C2A8((void *)(v1 + 48), *(void *)(v1 + 72));
  sub_10008A7F0();
  sub_10001C2A8((void *)(v1 + 48), *(void *)(v1 + 72));
  uint64_t v78 = sub_10008A5FC(v4, v6);
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v76 = v4;
  int v77 = (void *)v6;
  uint64_t v10 = sub_1000206EC(v9, v1);
  swift_bridgeObjectRelease();
  uint64_t v83 = *((void *)v10 + 2);
  if (!v83)
  {
    swift_bridgeObjectRelease();
    unsigned int v85 = _swiftEmptyArrayStorage;
LABEL_93:
    type metadata accessor for AppIconRoute();
    unint64_t v64 = sub_10006ACC8(v76, v77);
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    if (*(void *)(v78 + 24))
    {
      uint64_t v67 = *(void *)(v78 + 16);
      unint64_t v68 = *(void *)(v78 + 24);
    }
    else
    {
      unint64_t v68 = 0xE800000000000000;
      uint64_t v67 = 0x656D614E20707041;
    }
    v104 = &type metadata for OfferCodeRedeemUIRoute.ViewProperties;
    unsigned int v69 = (void *)swift_allocObject();
    *(void *)&long long v102 = v69;
    v69[2] = v64;
    v69[3] = v66;
    v69[4] = v67;
    v69[5] = v68;
    v69[6] = v85;
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_1000C2DBC((uint64_t)&v102, v80, v79);
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    sub_10001C2EC((uint64_t)&v102);
    sub_1000CB5C8(v70, v72, 1, (uint64_t)&v102);
    long long v101 = v102;
    uint64_t v60 = v103;
    uint64_t v61 = v104;
    uint64_t v73 = v105;
    uint64_t v74 = v106;
    uint64_t v75 = v107;
    swift_release();
    swift_release();
    uint64_t v6 = v73 | (v74 << 32) | (v75 << 48);
    ASOctaneSupportXPCService::HTTPVersion v58 = HTTPVersion.init(major:minor:)(1, 1);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    long long v62 = v101;
    uint64_t v63 = 3;
    goto LABEL_97;
  }
  int v82 = v10 + 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  unsigned int v85 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v84 = v11;
    unint64_t v12 = &v82[16 * v11];
    uint64_t v13 = *(void *)v12;
    int v14 = v12[8];
    if (!(*(void *)v12 >> 62))
    {
      uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v15) {
        break;
      }
      goto LABEL_72;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v15 = sub_10024F6F0();
    if (v15) {
      break;
    }
LABEL_72:
    int v93 = _swiftEmptyArrayStorage;
LABEL_73:
    swift_bridgeObjectRelease_n();
    uint64_t v47 = v93[2];
    uint64_t v48 = v85[2];
    if (__OFADD__(v48, v47)) {
      goto LABEL_99;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = v85;
    if (!isUniquelyReferenced_nonNull_native || v48 + v47 > v85[3] >> 1)
    {
      sub_100034FB8();
      uint64_t v50 = v51;
    }
    unsigned int v85 = v50;
    if (v93[2])
    {
      uint64_t v52 = v50[2];
      if ((v50[3] >> 1) - v52 < v47) {
        goto LABEL_102;
      }
      unint64_t v53 = (unint64_t)&v50[5 * v52 + 4];
      if ((unint64_t)(v93 + 4) < v53 + 40 * v47 && v53 < (unint64_t)&v93[5 * v47 + 4]) {
        goto LABEL_104;
      }
      swift_arrayInitWithCopy();
      if (v47)
      {
        uint64_t v55 = v85[2];
        BOOL v56 = __OFADD__(v55, v47);
        uint64_t v57 = v55 + v47;
        if (v56) {
          goto LABEL_103;
        }
        v85[2] = v57;
      }
    }
    else if (v47)
    {
      goto LABEL_100;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v84 + 1;
    if (v84 + 1 == v83)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_93;
    }
  }
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    unint64_t v87 = v13 & 0xC000000000000001;
    int v93 = _swiftEmptyArrayStorage;
    uint64_t v86 = v15;
    while (1)
    {
      uint64_t v17 = v87 ? sub_10024F380() : swift_retain();
      uint64_t v92 = v16;
      v94 = (void *)v17;
      unint64_t v18 = *(void *)(v17 + 152);
      if (v18 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_10024F6F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
      }
      if (v19) {
        break;
      }
      swift_release();
      swift_release();
LABEL_69:
      uint64_t v16 = v92 + 1;
      if (v92 + 1 == v86) {
        goto LABEL_73;
      }
    }
    uint64_t v90 = v94[10];
    uint64_t v91 = v94[11];
    swift_bridgeObjectRetain();
    unint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = sub_1000F072C(v20);
    swift_bridgeObjectRelease();
    if (v21)
    {
      uint64_t v88 = *(void *)(v21 + 40);
      uint64_t v89 = *(void *)(v21 + 32);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      uint64_t v22 = sub_10020F734();
      uint64_t v88 = v23;
      uint64_t v89 = v22;
    }
    unint64_t v24 = v94[19];
    if (!(v24 >> 62))
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25) {
        goto LABEL_21;
      }
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10024F6F0();
    if (!v25)
    {
LABEL_63:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_64:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100034FB8();
        int v93 = v45;
      }
      unint64_t v43 = v93[2];
      if (v43 >= v93[3] >> 1)
      {
        sub_100034FB8();
        int v93 = v46;
      }
      v93[2] = v43 + 1;
      uint64_t v44 = &v93[5 * v43];
      v44[4] = v90;
      v44[5] = v91;
      v44[6] = v89;
      v44[7] = v88;
      v44[8] = v27;
      goto LABEL_69;
    }
LABEL_21:
    unsigned int v108 = _swiftEmptyArrayStorage;
    sub_100038AFC();
    if ((v25 & 0x8000000000000000) == 0)
    {
      uint64_t v26 = 0;
      uint64_t v27 = v108;
      uint64_t v95 = v25;
      while (1)
      {
        if ((v24 & 0xC000000000000001) != 0)
        {
          uint64_t v28 = (void *)sub_10024F380();
        }
        else
        {
          uint64_t v28 = *(void **)(v24 + 32 + 8 * v26);
          swift_retain();
        }
        uint64_t v99 = v28[2];
        uint64_t v100 = v28[11];
        uint64_t v97 = v28[10];
        uint64_t v98 = v28[3];
        if (v14 == 3)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_release();
          char v29 = 1;
          goto LABEL_57;
        }
        uint64_t v30 = v28[12];
        if (!*(void *)(v30 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_release();
          char v29 = 1;
          uint64_t v25 = v95;
          goto LABEL_57;
        }
        sub_10024FC00();
        unint64_t v96 = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10024E780();
        swift_bridgeObjectRelease();
        Swift::Int v31 = sub_10024FC70();
        uint64_t v32 = -1 << *(unsigned char *)(v30 + 32);
        unint64_t v33 = v31 & ~v32;
        if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
        {
LABEL_52:
          swift_release();
          swift_bridgeObjectRelease();
          char v29 = 1;
          goto LABEL_56;
        }
        uint64_t v34 = ~v32;
        while (1)
        {
          if (*(unsigned char *)(*(void *)(v30 + 48) + v33))
          {
            if (*(unsigned char *)(*(void *)(v30 + 48) + v33) == 1)
            {
              unint64_t v35 = 0xE800000000000000;
              uint64_t v36 = 0x676E697473697865;
              if (!v14) {
                goto LABEL_45;
              }
            }
            else
            {
              unint64_t v35 = 0xE700000000000000;
              uint64_t v36 = 0x64657269707865;
              if (!v14)
              {
LABEL_45:
                unint64_t v38 = 0xE300000000000000;
                uint64_t v37 = 7824750;
                goto LABEL_46;
              }
            }
          }
          else
          {
            unint64_t v35 = 0xE300000000000000;
            uint64_t v36 = 7824750;
            if (!v14) {
              goto LABEL_45;
            }
          }
          uint64_t v37 = v14 == 1 ? 0x676E697473697865 : 0x64657269707865;
          unint64_t v38 = v14 == 1 ? 0xE800000000000000 : 0xE700000000000000;
LABEL_46:
          if (v36 == v37 && v35 == v38)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_55;
          }
          char v40 = sub_10024FA60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v40) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v34;
          if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
            goto LABEL_52;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
LABEL_55:
        char v29 = 0;
LABEL_56:
        uint64_t v25 = v95;
        uint64_t v27 = v96;
LABEL_57:
        unsigned int v108 = v27;
        unint64_t v41 = v27[2];
        if (v41 >= v27[3] >> 1)
        {
          sub_100038AFC();
          uint64_t v27 = v108;
        }
        ++v26;
        v27[2] = v41 + 1;
        uint64_t v42 = &v27[5 * v41];
        v42[4] = v99;
        v42[5] = v98;
        v42[6] = v97;
        v42[7] = v100;
        *((unsigned char *)v42 + 64) = v29;
        if (v26 == v25)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          goto LABEL_64;
        }
      }
    }
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_1000214A0()
{
  return sub_100021534(*(void *)(v0 + 128));
}

uint64_t sub_1000214A8()
{
  uint64_t v0 = sub_100094D84();
  sub_10001C2EC(v0 + 88);
  sub_100021534(*(void *)(v0 + 128));
  return v0;
}

uint64_t sub_1000214E0()
{
  uint64_t v0 = sub_1000214A8();
  return _swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for OfferCodeRedeemUIRoute()
{
  return self;
}

uint64_t sub_100021534(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100021544()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002158C(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t initializeWithCopy for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code;
}

__n128 initializeWithTake for OfferCodeRedeemUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties;
}

uint64_t destroy for FetchSoftwareAddOnsResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FetchSoftwareAddOnsResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FetchSoftwareAddOnsResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FetchSoftwareAddOnsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchSoftwareAddOnsResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchSoftwareAddOnsResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties.Subscription()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties.Subscription;
}

void sub_1000219A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100216628();
  uint64_t v6 = v19;
  if (!v19) {
    goto LABEL_5;
  }
  uint64_t v2 = v18[0];
  v28[0] = v18[0];
  v28[1] = v18[1];
  v28[2] = v18[2];
  void v28[3] = v18[3];
  v28[4] = v18[4];
  v28[5] = v19;
  v28[6] = v20;
  v28[7] = v21;
  uint64_t v7 = sub_100161540(25705, 0xE200000000000000, *(void *)(a1 + 96));
  if (!v8)
  {
    sub_100022CE4();
LABEL_5:
    unsigned int v16 = sub_100022D68();
    Swift::UInt16 v10 = v16;
    unsigned int v11 = HIWORD(v16);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v14 = sub_100022D50();
    *(double *)&long long v13 = sub_100022D80();
    *(_OWORD *)(v12 + 16) = v13;
    uint64_t v15 = 21;
    goto LABEL_6;
  }
  sub_100021BD0((uint64_t)v28, v7, v8, v18);
  swift_bridgeObjectRelease();
  sub_100022CE4();
  sub_100217E14();
  long long v17 = v22;
  uint64_t v6 = v23;
  uint64_t v2 = v24;
  unint64_t v3 = v25 | ((unint64_t)v26 << 32) | ((unint64_t)v27 << 48);
  unsigned int v9 = sub_100022D68();
  Swift::UInt16 v10 = v9;
  unsigned int v11 = HIWORD(v9);
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v12 = sub_100022D50();
  long long v13 = v17;
  uint64_t v14 = v12;
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  uint64_t v15 = 3;
LABEL_6:
  *(void *)(v12 + 32) = v15;
  *(_WORD *)(v12 + 40) = v10;
  *(_WORD *)(v12 + 42) = v11;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a2 + 16) = 2;
  *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v2;
  *(unsigned char *)(a2 + 62) = BYTE6(v3);
  *(_WORD *)(a2 + 60) = WORD2(v3);
  *(_DWORD *)(a2 + 56) = v3;
}

void *sub_100021BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10024E1F0();
  sub_10001B0E8(v9, (uint64_t)qword_10034C0E0);
  swift_bridgeObjectRetain();
  sub_10002293C(a1);
  swift_bridgeObjectRetain();
  sub_10002293C(a1);
  Swift::UInt16 v10 = sub_10024E1D0();
  os_log_type_t v11 = sub_10024EE30();
  uint64_t v30 = a2;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000F3F3C(a2, a3, &v33);
    sub_10024F100();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    long long v13 = v5;
    uint64_t v14 = *(void *)(a1 + 32);
    unint64_t v15 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    sub_1000F3F3C(v14, v15, &v33);
    sub_10024F100();
    uint64_t v5 = v13;
    swift_bridgeObjectRelease();
    sub_100022994(a1);
    sub_100022994(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling in-app subscription status request for subscription group \"%s\" and app \"%s\".", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100022994(a1);
    sub_100022994(a1);
  }

  sub_10001C2A8(v5 + 6, v5[9]);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  if (sub_100022014(a2, a3, v17, v16))
  {
    unint64_t v18 = sub_10001C2A8(v5 + 11, v5[14]);
    sub_100019524(&qword_1003090E8);
    uint64_t inited = swift_initStackObject();
    uint64_t v20 = a2;
    uint64_t v21 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100255FB0;
    *(void *)(inited + 32) = v20;
    *(void *)(inited + 40) = a3;
    uint64_t v22 = *v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1000FFCF4(v21, v22);
    swift_setDeallocating();
    sub_10020BB20();
    sub_10001C2A8(v5 + 6, v5[9]);
    uint64_t v23 = sub_10008A5FC(v17, v16);
    uint64_t v24 = swift_allocObject();
    sub_100022D10(v24);
    uint64_t v25 = swift_allocObject();
    sub_100022D10(v25);
    sub_10002293C(a1);
    sub_10002293C(a1);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10002293C(a1);
    swift_retain();
    swift_retain();
    sub_1001C5530((long long *)a1, (uint64_t)v28, v30, a3, 0, v23, (uint64_t)sub_100022CDC, v24, (uint64_t)v31, (uint64_t)sub_100022CE0, v25);
    sub_10005B104((uint64_t)v31, (uint64_t)__src);
    swift_release();
    return memcpy(a4, __src, 0x59uLL);
  }
  else
  {
    sub_100022A5C();
    swift_allocError();
    void *v27 = 0;
    v27[1] = 0;
    v27[2] = 25;
    return (void *)swift_willThrow();
  }
}

uint64_t sub_100022014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008A5FC(a3, a4);
  swift_bridgeObjectRetain();
  unint64_t v6 = swift_bridgeObjectRetain();
  LOBYTE(a2) = sub_100022768(v6, a1, a2);
  swift_bridgeObjectRelease();
  swift_release();
  return a2 & 1;
}

uint64_t type metadata accessor for SingleStatusRoute()
{
  return self;
}

uint64_t sub_1000220BC@<X0>(uint64_t a1@<X8>)
{
  sub_100216628();
  uint64_t v2 = v20;
  if (v20)
  {
    uint64_t v4 = v18;
    uint64_t v3 = v19;
    uint64_t v6 = v16;
    uint64_t v5 = v17;
    uint64_t v7 = v15;
    v30[0] = v15;
    v30[1] = v16;
    v30[2] = v17;
    v30[3] = v18;
    v30[4] = v19;
    v30[5] = v20;
    void v30[6] = v21;
    v30[7] = v22;
    sub_10002220C((uint64_t)v30, &v15);
    sub_1000228D8(v7, v6, v5, v4, v3, v2);
    sub_100217E14();
    uint64_t v2 = v23;
    uint64_t v8 = v24;
    uint64_t v9 = v25;
    uint64_t v10 = v26;
    unint64_t v11 = v27 | ((unint64_t)v28 << 32) | ((unint64_t)v29 << 48);
    uint64_t v12 = 3;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 21;
  }
  ASOctaneSupportXPCService::HTTPVersion v13 = sub_100022D68();
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = sub_100022D50();
  *(void *)(result + 16) = 0;
  *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(result + 32) = v12;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v13;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 62) = BYTE6(v11);
  *(_WORD *)(a1 + 60) = WORD2(v11);
  *(_DWORD *)(a1 + 56) = v11;
  return result;
}

void sub_10002220C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10024E1F0();
  sub_10001B0E8(v5, (uint64_t)qword_10034C0E0);
  sub_10002293C(a1);
  uint64_t v6 = sub_10024E1D0();
  os_log_type_t v7 = sub_10024EE30();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = a1;
    uint64_t v10 = *(void *)(a1 + 32);
    unint64_t v11 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    __src[0] = sub_1000F3F3C(v10, v11, v36);
    sub_10024F100();
    a1 = v9;
    swift_bridgeObjectRelease();
    sub_100022994(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Handling in-app subscription status request for \"%s\".", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100022994(a1);
  }

  uint64_t v12 = v3 + 6;
  sub_10001C2A8(v3 + 6, v3[9]);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v33 = *(void *)(a1 + 40);
  unint64_t v14 = *(void *)(sub_10008A5FC(v13, v33) + 56);
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10024F6F0();
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v34 = v13;
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v23 = *sub_10001C2A8(v3 + 11, v3[14]);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1000FFCF4((uint64_t)v17, v23);
    sub_10001C2A8(v12, v3[9]);
    uint64_t v25 = sub_10008A5FC(v34, v33);
    uint64_t v26 = swift_allocObject();
    sub_100022D30(v26);
    uint64_t v27 = swift_allocObject();
    sub_100022D30(v27);
    sub_10002293C(a1);
    sub_10002293C(a1);
    swift_retain();
    sub_10002293C(a1);
    swift_retain();
    swift_retain();
    sub_1001C5530((long long *)a1, (uint64_t)v24, (uint64_t)v17, 0, 1, v25, (uint64_t)sub_1000229F0, v26, (uint64_t)v36, (uint64_t)sub_100022A28, v27);
    unsigned __int16 v28 = sub_10001C2A8(v3 + 11, v3[14]);
    uint64_t v29 = *v28;
    uint64_t v30 = *(os_unfair_lock_s **)(*(void *)(*v28 + 128) + 16);
    swift_retain();
    os_unfair_lock_lock(v30);
    *(unsigned char *)(v29 + 112) = 1;
    os_unfair_lock_unlock(v30);
    swift_release();
    sub_10005B104((uint64_t)v36, (uint64_t)__src);
    swift_release();
    swift_release();
    memcpy(a2, __src, 0x59uLL);
    return;
  }
  v36[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000389BC();
  if ((v15 & 0x8000000000000000) == 0)
  {
    Swift::Int v31 = v3 + 6;
    uint64_t v32 = v3;
    uint64_t v16 = 0;
    uint64_t v17 = (void *)v36[0];
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        uint64_t v18 = sub_10024F380();
      }
      else
      {
        uint64_t v18 = *(void *)(v14 + 8 * v16 + 32);
        swift_retain();
      }
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v20 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v36[0] = (uint64_t)v17;
      unint64_t v21 = v17[2];
      if (v21 >= v17[3] >> 1)
      {
        sub_1000389BC();
        uint64_t v17 = (void *)v36[0];
      }
      ++v16;
      void v17[2] = v21 + 1;
      uint64_t v22 = &v17[2 * v21];
      v22[4] = v19;
      v22[5] = v20;
    }
    while (v15 != v16);
    swift_bridgeObjectRelease();
    uint64_t v3 = v32;
    uint64_t v12 = v31;
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_1000226A8(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  sub_10001C2A8(a2 + 11, a2[14]);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  sub_10001C2A8(a2 + 6, a2[9]);
  uint64_t v15 = sub_10008AEB4(2uLL, v8, v9, v10, v11, v12, v13, v14);
  return a4(a1, v15, v16 & 1);
}

uint64_t type metadata accessor for AllStatusRoute()
{
  return self;
}

uint64_t sub_100022768(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_10024F6F0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = sub_10024F380();
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (*(void *)(v8 + 16) == a2 && *(void *)(v8 + 24) == a3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      char v11 = sub_10024FA60();
      swift_release();
      if (v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v7;
      if (v9 == v6) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000228D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002293C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100022994(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000229F0(uint64_t a1)
{
  return sub_1000226A8(a1, *(void **)(v1 + 16), v1 + 24, (uint64_t (*)(uint64_t, uint64_t, void))sub_1002186D8);
}

uint64_t sub_100022A28(uint64_t a1)
{
  return sub_1000226A8(a1, *(void **)(v1 + 16), v1 + 24, (uint64_t (*)(uint64_t, uint64_t, void))sub_10021870C);
}

unint64_t sub_100022A5C()
{
  unint64_t result = qword_100309770;
  if (!qword_100309770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309770);
  }
  return result;
}

uint64_t sub_100022AB0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100022B0C()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for StatusRouteType()
{
  return sub_100022B28();
}

uint64_t sub_100022B28()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s25ASOctaneSupportXPCService15StatusRouteTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100022B0C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StatusRouteType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100022B0C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100022B28();
  return a1;
}

__n128 initializeWithTake for StatusRouteType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for StatusRouteType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100022B28();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatusRouteType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatusRouteType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100022CB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100022CC0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StatusRouteType()
{
  return &type metadata for StatusRouteType;
}

uint64_t sub_100022CE4()
{
  return sub_1000228D8(v1, v5, v4, v3, v2, v0);
}

__n128 sub_100022D10(uint64_t a1)
{
  *(void *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 40) = v3;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

__n128 sub_100022D30(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  long long v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 40) = v3;
  __n128 result = *(__n128 *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

uint64_t sub_100022D50()
{
  return swift_allocObject();
}

ASOctaneSupportXPCService::HTTPVersion sub_100022D68()
{
  return HTTPVersion.init(major:minor:)(1, 1);
}

double sub_100022D80()
{
  return 0.0;
}

uint64_t sub_100022D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v12 = sub_100019524(&qword_100309778);
  uint64_t v13 = sub_100026018(v12);
  __chkstk_darwin(v13, v14);
  uint64_t v15 = sub_100025F94();
  uint64_t v16 = type metadata accessor for AppInformationResponse.PlatformAttributes(v15);
  uint64_t v17 = sub_100026018(v16);
  __chkstk_darwin(v17, v18);
  sub_100025FE8();
  *a5 = a1;
  a5[1] = a2;
  sub_10024DD90();
  swift_bridgeObjectRelease();
  sub_100022EE4(v5, v6);
  uint64_t v19 = (void *)(v6 + *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20));
  void *v19 = a3;
  v19[1] = a4;
  uint64_t v20 = type metadata accessor for AppInformationResponse(0);
  return sub_100025988(v6, (uint64_t)a5 + *(int *)(v20 + 20), (void (*)(void))type metadata accessor for AppInformationResponse.PlatformAttributes);
}

uint64_t type metadata accessor for AppInformationResponse.PlatformAttributes(uint64_t a1)
{
  return sub_100022F8C(a1, qword_100309870);
}

uint64_t sub_100022EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_100309778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(uint64_t a1)
{
  return sub_100022F8C(a1, (uint64_t *)&unk_1003097D8);
}

uint64_t type metadata accessor for AppInformationResponse(uint64_t a1)
{
  return sub_100022F8C(a1, qword_100309900);
}

uint64_t sub_100022F8C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_100022FC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10024DDC0();
    if (sub_10001FA0C((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_100019524(&qword_100309778);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      sub_1000195B4((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 20);
    char v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *char v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000230F4(uint64_t a1)
{
  uint64_t v2 = sub_10024DDC0();
  if (!sub_10001FA0C(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  return swift_bridgeObjectRelease();
}

char *sub_10002318C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    sub_1000195B4((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100023270(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10024DDC0();
  int v7 = sub_10001FA0C((uint64_t)a1, 1, v6);
  int v8 = sub_10001FA0C((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  sub_1000195B4((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1000233F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    sub_1000195B4((uint64_t)a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000234C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10024DDC0();
  int v7 = sub_10001FA0C((uint64_t)a1, 1, v6);
  int v8 = sub_10001FA0C((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  sub_1000195B4((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100023638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002364C);
}

uint64_t sub_10002364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100019524(&qword_100309778);
  sub_100025F58();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10001FA0C(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000236EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023700);
}

void sub_100023700(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  sub_100019524(&qword_100309778);
  sub_100025F58();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_100026024();
    sub_1000195B4(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

void sub_100023784()
{
  sub_100023818();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100023818()
{
  if (!qword_1003097E8)
  {
    sub_10024DDC0();
    unint64_t v0 = sub_10024F030();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003097E8);
    }
  }
}

uint64_t *sub_100023870(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_10024DDC0();
    if (sub_10001FA0C((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_100019524(&qword_100309778);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      sub_1000195B4((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000239AC(uint64_t a1)
{
  uint64_t v2 = sub_10024DDC0();
  if (!sub_10001FA0C(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  return swift_bridgeObjectRelease();
}

char *sub_100023A40(char *a1, char *a2)
{
  uint64_t v4 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    sub_1000195B4((uint64_t)a1, 0, 1, v4);
  }
  uint64_t v6 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *((void *)v8 + 1);
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100023B28(char *a1, char *a2)
{
  uint64_t v4 = sub_10024DDC0();
  int v5 = sub_10001FA0C((uint64_t)a1, 1, v4);
  int v6 = sub_10001FA0C((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  sub_1000195B4((uint64_t)a1, 0, 1, v4);
LABEL_7:
  uint64_t v9 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100023CA4(char *a1, char *a2)
{
  uint64_t v4 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    sub_1000195B4((uint64_t)a1, 0, 1, v4);
  }
  uint64_t v6 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
  return a1;
}

char *sub_100023D80(char *a1, char *a2)
{
  uint64_t v4 = sub_10024DDC0();
  int v5 = sub_10001FA0C((uint64_t)a1, 1, v4);
  int v6 = sub_10001FA0C((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_100019524(&qword_100309778);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  sub_1000195B4((uint64_t)a1, 0, 1, v4);
LABEL_7:
  uint64_t v9 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100023EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100023F00);
}

uint64_t sub_100023F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  return sub_10001FA0C(a1, a2, v4);
}

uint64_t sub_100023F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023F5C);
}

uint64_t sub_100023F5C()
{
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  uint64_t v0 = sub_100026024();
  return sub_1000195B4(v0, v1, v2, v3);
}

uint64_t sub_100023F9C()
{
  uint64_t result = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100024028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10024DDC0();
    swift_bridgeObjectRetain();
    if (sub_10001FA0C((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = sub_100019524(&qword_100309778);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      sub_1000195B4((uint64_t)v7, 0, 1, v9);
    }
    uint64_t v12 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    uint64_t v15 = *((void *)v14 + 1);
    *(void *)uint64_t v13 = *(void *)v14;
    *((void *)v13 + 1) = v15;
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_100024180(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10024DDC0();
  if (!sub_10001FA0C(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  return swift_bridgeObjectRelease();
}

void *sub_100024228(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10024DDC0();
  swift_bridgeObjectRetain();
  if (sub_10001FA0C((uint64_t)v7, 1, v8))
  {
    uint64_t v9 = sub_100019524(&qword_100309778);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    sub_1000195B4((uint64_t)v6, 0, 1, v8);
  }
  uint64_t v10 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100024330(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10024DDC0();
  int v10 = sub_10001FA0C((uint64_t)v7, 1, v9);
  int v11 = sub_10001FA0C((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_100019524(&qword_100309778);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_1000195B4((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000244E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_100019524(&qword_100309778);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    sub_1000195B4((uint64_t)v5, 0, 1, v7);
  }
  uint64_t v9 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  *(_OWORD *)&v5[*(int *)(v9 + 20)] = *(_OWORD *)&v6[*(int *)(v9 + 20)];
  return a1;
}

void *sub_1000245D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10024DDC0();
  int v11 = sub_10001FA0C((uint64_t)v8, 1, v10);
  int v12 = sub_10001FA0C((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_100019524(&qword_100309778);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_1000195B4((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0) + 20);
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100024764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024778);
}

uint64_t sub_100024778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AppInformationResponse.PlatformAttributes(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10001FA0C(v9, a2, v8);
  }
}

uint64_t sub_100024800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024814);
}

uint64_t sub_100024814(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppInformationResponse.PlatformAttributes(0);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_1000195B4(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_100024894()
{
  uint64_t result = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10002492C(uint64_t a1, void *a2)
{
  v7._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D69E8;
  v7._object = a2;
  Swift::Int v4 = sub_10024F790(v3, v7);
  swift_bridgeObjectRelease();
  if (v4 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_100024984(char a1)
{
  if (a1) {
    return 0xD000000000000012;
  }
  else {
    return 1634497893;
  }
}

uint64_t sub_1000249B8()
{
  sub_100019524(&qword_100309988);
  sub_10001B550();
  __chkstk_darwin(v1, v2);
  sub_100025F70();
  sub_1000259E8();
  sub_100025FCC();
  sub_100026038();
  sub_10024F940();
  if (!v0)
  {
    type metadata accessor for AppInformationResponse(0);
    type metadata accessor for AppInformationResponse.PlatformAttributes(0);
    sub_1000258F4(&qword_100309998, (void (*)(uint64_t))type metadata accessor for AppInformationResponse.PlatformAttributes);
    sub_100026038();
    sub_10024F980();
  }
  sub_100025FB0();
  return v3();
}

uint64_t sub_100024B20(char *a1, char *a2)
{
  return sub_1000F99B8(*a1, *a2);
}

Swift::Int sub_100024B2C()
{
  return sub_1001D3400();
}

uint64_t sub_100024B34()
{
  return sub_1000D1130();
}

Swift::Int sub_100024B3C()
{
  return sub_1000D2DE4();
}

uint64_t sub_100024B44@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002492C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100024B74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100024984(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100024BA0()
{
  return sub_100024984(*v0);
}

uint64_t sub_100024BA8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100024980();
  *a1 = result;
  return result;
}

uint64_t sub_100024BD0(uint64_t a1)
{
  unint64_t v2 = sub_1000259E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100024C0C(uint64_t a1)
{
  unint64_t v2 = sub_1000259E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100024C48()
{
  return sub_1000249B8();
}

BOOL sub_100024C60(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6A38;
  v6._object = a2;
  Swift::Int v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  return v4 != 0;
}

BOOL sub_100024CA8(uint64_t a1, void *a2)
{
  return sub_100024C60(a1, a2);
}

uint64_t sub_100024CC4()
{
  return 7565161;
}

uint64_t sub_100024CD4()
{
  sub_100019524(&qword_100309978);
  sub_10001B550();
  __chkstk_darwin(v0, v1);
  sub_100026000();
  sub_100025F70();
  sub_10002593C();
  sub_100025FCC();
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  sub_1000258F4(&qword_100309980, (void (*)(uint64_t))type metadata accessor for AppInformationResponse.PlatformAttributes.Platform);
  sub_10024F980();
  sub_100025FB0();
  return v2();
}

uint64_t sub_100024DF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  sub_100025FBC();
  __chkstk_darwin(v5, v6);
  uint64_t v20 = (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100019524(&qword_100309960);
  sub_10001B550();
  uint64_t v19 = v9;
  __chkstk_darwin(v10, v11);
  sub_100025FE8();
  uint64_t v12 = type metadata accessor for AppInformationResponse.PlatformAttributes(0);
  uint64_t v13 = sub_100026018(v12);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_10002593C();
  sub_10024FD20();
  if (!v2)
  {
    sub_1000258F4(&qword_100309970, (void (*)(uint64_t))type metadata accessor for AppInformationResponse.PlatformAttributes.Platform);
    sub_10024F870();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v3, v8);
    sub_100025988(v20, (uint64_t)v16, (void (*)(void))type metadata accessor for AppInformationResponse.PlatformAttributes.Platform);
    sub_100025988((uint64_t)v16, v18, (void (*)(void))type metadata accessor for AppInformationResponse.PlatformAttributes);
  }
  return sub_10001C2EC((uint64_t)a1);
}

uint64_t sub_100025014(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100278820 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100279FA0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_10024FA60();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100025100(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10002513C()
{
  sub_100019524(&qword_100309950);
  sub_10001B550();
  __chkstk_darwin(v1, v2);
  sub_100025F70();
  sub_100025788();
  sub_100025FCC();
  sub_10024DDC0();
  sub_1000258F4(&qword_100309958, (void (*)(uint64_t))&type metadata accessor for URL);
  sub_100026038();
  sub_10024F910();
  if (!v0)
  {
    type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
    sub_100026038();
    sub_10024F8D0();
  }
  sub_100025FB0();
  return v3();
}

uint64_t sub_1000252A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v5 = sub_100019524(&qword_100309778);
  uint64_t v6 = sub_100026018(v5);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019524(&qword_100309938);
  sub_10001B550();
  uint64_t v25 = v11;
  uint64_t v26 = v10;
  __chkstk_darwin(v10, v12);
  uint64_t v13 = sub_100025F94();
  uint64_t v14 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(v13);
  sub_100025FBC();
  __chkstk_darwin(v15, v16);
  sub_100026000();
  sub_10001C2A8(a1, a1[3]);
  sub_100025788();
  sub_10024FD20();
  if (v2) {
    return sub_10001C2EC((uint64_t)a1);
  }
  sub_10024DDC0();
  char v28 = 0;
  sub_1000258F4(&qword_100309948, (void (*)(uint64_t))&type metadata accessor for URL);
  sub_10024F800();
  sub_100022EE4((uint64_t)v9, v3);
  char v27 = 1;
  uint64_t v17 = sub_10024F7C0();
  uint64_t v19 = v18;
  sub_100025FB0();
  v20();
  unint64_t v21 = (uint64_t *)(v3 + *(int *)(v14 + 20));
  uint64_t *v21 = v17;
  v21[1] = v19;
  sub_100025834(v3, v24);
  sub_10001C2EC((uint64_t)a1);
  return sub_100025898(v3);
}

BOOL sub_100025534@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100024C60(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100025568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100024CC4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_100025594@<W0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = sub_100024CA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000255C0()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_1000255DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static System.hasAsyncAwaitSupport.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100025608(uint64_t a1)
{
  unint64_t v2 = sub_10002593C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100025644(uint64_t a1)
{
  unint64_t v2 = sub_10002593C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100025680@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100024DF0(a1, a2);
}

uint64_t sub_100025698()
{
  return sub_100024CD4();
}

unint64_t sub_1000256B0()
{
  return sub_100025100(*v0);
}

uint64_t sub_1000256B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100025014(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000256E0(uint64_t a1)
{
  unint64_t v2 = sub_100025788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002571C(uint64_t a1)
{
  unint64_t v2 = sub_100025788();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100025758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000252A4(a1, a2);
}

uint64_t sub_100025770()
{
  return sub_10002513C();
}

unint64_t sub_100025788()
{
  unint64_t result = qword_100309940;
  if (!qword_100309940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309940);
  }
  return result;
}

uint64_t sub_1000257D4(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_100309778);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100025834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025898(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000258F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002593C()
{
  unint64_t result = qword_100309968;
  if (!qword_100309968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309968);
  }
  return result;
}

uint64_t sub_100025988(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_100025FBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_1000259E8()
{
  unint64_t result = qword_100309990;
  if (!qword_100309990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309990);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.CodingKeys()
{
  return &type metadata for AppInformationResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AppInformationResponse.PlatformAttributes.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AppInformationResponse.PlatformAttributes.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100025B3CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.PlatformAttributes.CodingKeys()
{
  return &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys;
}

unsigned char *_s25ASOctaneSupportXPCService22AppInformationResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100025C40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.PlatformAttributes.Platform.CodingKeys()
{
  return &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys;
}

unint64_t sub_100025C7C()
{
  unint64_t result = qword_1003099A0;
  if (!qword_1003099A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099A0);
  }
  return result;
}

unint64_t sub_100025CCC()
{
  unint64_t result = qword_1003099A8;
  if (!qword_1003099A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099A8);
  }
  return result;
}

unint64_t sub_100025D1C()
{
  unint64_t result = qword_1003099B0;
  if (!qword_1003099B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099B0);
  }
  return result;
}

unint64_t sub_100025D6C()
{
  unint64_t result = qword_1003099B8;
  if (!qword_1003099B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099B8);
  }
  return result;
}

unint64_t sub_100025DBC()
{
  unint64_t result = qword_1003099C0;
  if (!qword_1003099C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099C0);
  }
  return result;
}

unint64_t sub_100025E0C()
{
  unint64_t result = qword_1003099C8;
  if (!qword_1003099C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099C8);
  }
  return result;
}

unint64_t sub_100025E5C()
{
  unint64_t result = qword_1003099D0;
  if (!qword_1003099D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099D0);
  }
  return result;
}

unint64_t sub_100025EAC()
{
  unint64_t result = qword_1003099D8;
  if (!qword_1003099D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099D8);
  }
  return result;
}

unint64_t sub_100025EFC()
{
  unint64_t result = qword_1003099E0;
  if (!qword_1003099E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003099E0);
  }
  return result;
}

void *sub_100025F70()
{
  return sub_10001C2A8(v0, v0[3]);
}

uint64_t sub_100025F94()
{
  return 0;
}

uint64_t sub_100025FCC()
{
  return sub_10024FD40();
}

uint64_t sub_100026018(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100026024()
{
  return v0;
}

uint64_t sub_100026044()
{
  unint64_t v1 = v0[18];
  if (v1 >> 62)
  {
    sub_100027B4C();
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_10024F680();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_10024FAD0();
    _s8DiscountCMa();
    uint64_t v2 = v1;
  }
  swift_bridgeObjectRelease();
  if (v0[19] >> 62)
  {
    sub_100027B4C();
    swift_bridgeObjectRetain();
    sub_10024F680();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_10024FAD0();
    _s8DiscountCMa();
  }
  swift_bridgeObjectRelease();
  sub_1001D68DC();
  if (v0[20] >> 62)
  {
    _s8DiscountCMa();
    swift_bridgeObjectRetain();
    sub_10024F680();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_10024FAD0();
    _s8DiscountCMa();
  }
  swift_bridgeObjectRelease();
  sub_1001D68DC();
  uint64_t v3 = v0[17];
  if (v3)
  {
    sub_100019524((uint64_t *)&unk_10030FD80);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100256B00;
    *(void *)(v4 + 32) = v3;
    sub_10024EAC0();
  }
  swift_retain();
  sub_1001D68DC();
  return v2;
}

BOOL static CloseMode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_100026234(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6A70;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 7) {
    return 7;
  }
  else {
    return v4;
  }
}

uint64_t static NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted.getter()
{
  return 7;
}

unint64_t sub_10002628C(char a1)
{
  unint64_t result = 0x66664F636F486461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6566664F65646F63;
      break;
    case 2:
      unint64_t result = 0x4F6B6361626E6977;
      break;
    case 3:
      unint64_t result = 0x6D754E70756F7267;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000263A4(char a1)
{
  unint64_t result = 0x66664F636F486461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6566664F65646F63;
      break;
    case 2:
      unint64_t result = 0x4F6B6361626E6977;
      break;
    case 3:
      unint64_t result = 0x6D754E70756F7267;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000264BC()
{
  return sub_1000FA308();
}

Swift::Int sub_1000264C8()
{
  return sub_1001D341C(*v0);
}

uint64_t sub_1000264D0()
{
  return sub_1000D16AC();
}

Swift::Int sub_1000264D8(uint64_t a1)
{
  return sub_1000D31CC(a1, *v1);
}

uint64_t sub_1000264E0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100026234(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_100026510@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10002628C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10002653C()
{
  return sub_1000263A4(*v0);
}

uint64_t sub_100026544@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100026280();
  *a1 = result;
  return result;
}

uint64_t sub_10002656C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100026594(uint64_t a1)
{
  unint64_t v2 = sub_100027278();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000265D0(uint64_t a1)
{
  unint64_t v2 = sub_100027278();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002660C(void *a1)
{
  return sub_100026658(a1);
}

uint64_t sub_100026658(void *a1)
{
  sub_100019524(&qword_100309D50);
  sub_10001B550();
  __chkstk_darwin(v4, v5);
  *(void *)(v1 + 136) = 0;
  sub_10001C2A8(a1, a1[3]);
  sub_100027278();
  swift_retain();
  sub_10024FD20();
  if (v2)
  {
    swift_release();
    uint64_t v6 = 0;
    sub_10001C2EC((uint64_t)a1);
    swift_release();
    type metadata accessor for OctaneSubscription();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_100019524(&qword_100309CF0);
    char v21 = 0;
    sub_100027554();
    sub_100027A68();
    uint64_t v8 = (void *)v20[0];
    if (!v20[0]) {
      uint64_t v8 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 144) = v8;
    sub_100019524(&qword_100309D08);
    char v21 = 1;
    sub_1000275F8();
    sub_100027A68();
    uint64_t v9 = (void *)v20[0];
    if (!v20[0]) {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 152) = v9;
    sub_100019524(&qword_100309D20);
    char v21 = 2;
    sub_10002769C();
    sub_100027A68();
    uint64_t v10 = (void *)v20[0];
    if (!v20[0]) {
      uint64_t v10 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 160) = v10;
    sub_100027B00(3);
    *(void *)(v1 + 168) = sub_10024F850();
    _s17IntroductoryOfferCMa();
    char v21 = 4;
    sub_100027740(&qword_100309D88, (void (*)(uint64_t))_s17IntroductoryOfferCMa);
    sub_100027A68();
    *(void *)(v1 + 136) = v20[0];
    swift_release();
    LOBYTE(v20[0]) = 5;
    uint64_t v11 = sub_10024F830();
    uint64_t v13 = sub_100213024(v11, v12);
    if (v14 == 7) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v13;
    }
    if (v14 == 7) {
      char v16 = 5;
    }
    else {
      char v16 = v14;
    }
    *(void *)(v1 + 176) = v15;
    *(unsigned char *)(v1 + 184) = v16;
    sub_100027B00(6);
    *(void *)(v1 + 192) = sub_10024F830();
    *(void *)(v1 + 200) = v17;
    swift_release();
    sub_100027788((uint64_t)a1, (uint64_t)v20);
    uint64_t v6 = sub_10020F084(v20);
    uint64_t v18 = sub_100027AC4();
    v19(v18);
    sub_10001C2EC((uint64_t)a1);
  }
  return v6;
}

uint64_t sub_100026A3C(void *a1)
{
  sub_100019524(&qword_100309CE0);
  sub_10001B550();
  __chkstk_darwin(v4, v5);
  sub_10001C2A8(a1, a1[3]);
  sub_100027278();
  sub_10024FD40();
  sub_100019524(&qword_100309CF0);
  sub_1000272C4();
  sub_100027A98();
  if (!v2)
  {
    sub_100019524(&qword_100309D08);
    sub_100027368();
    sub_100027A98();
    sub_100019524(&qword_100309D20);
    sub_10002740C();
    sub_100027A98();
    sub_10024F960();
    sub_100019524(&qword_100309D38);
    sub_1000274B0();
    sub_100027A98();
    sub_100213730(*(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
    sub_10024F940();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_10024F940();
    swift_bridgeObjectRelease();
    sub_10020F404(a1);
  }
  uint64_t v6 = sub_100027B38();
  return v7(v6);
}

uint64_t sub_100026CB8(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(v2 + 144);
  if (v6 >> 62) {
    goto LABEL_18;
  }
  sub_100027B18();
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_10024F6F0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = sub_10024F380();
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      BOOL v10 = *(void *)(v8 + 96) == a1 && *(void *)(v8 + 104) == a2;
      if (v10 || (sub_10024FA60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      swift_release();
      ++v7;
      if (v9 == v3) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    sub_100027ADC();
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = 0;
LABEL_16:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100026DD8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_10024F6F0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = sub_10024F380();
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      BOOL v10 = *(void *)(v8 + 16) == a2 && *(void *)(v8 + 24) == a3;
      if (v10 || (sub_10024FA60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v6) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100026F0C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_100026DD8(v4, a1, a2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100026F74(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(v2 + 160);
  if (v6 >> 62) {
    goto LABEL_18;
  }
  sub_100027B18();
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_10024F6F0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = sub_10024F380();
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      BOOL v10 = *(void *)(v8 + 96) == a1 && *(void *)(v8 + 104) == a2;
      if (v10 || (sub_10024FA60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      swift_release();
      ++v7;
      if (v9 == v3) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    sub_100027ADC();
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = 0;
LABEL_16:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100027094(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 168);
  uint64_t v3 = *(void *)(a1 + 168);
  if (v2 < v3) {
    return 0;
  }
  if (v3 < v2) {
    return 2;
  }
  if (*(void *)(v1 + 176) == *(void *)(a1 + 176))
  {
    char v6 = *(unsigned char *)(a1 + 184);
    uint64_t v7 = sub_100213DA0(*(unsigned char *)(v1 + 184));
    uint64_t v9 = v8;
    if (v7 == sub_100213DA0(v6) && v9 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v12 = sub_10024FA60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 1;
      }
    }
    BOOL v13 = *(void *)(v1 + 80) == *(void *)(a1 + 80) && *(void *)(v1 + 88) == *(void *)(a1 + 88);
    if (!v13 && (sub_10024FA60() & 1) == 0) {
      return 2;
    }
  }
  return 1;
}

uint64_t sub_10002718C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000271D4()
{
  uint64_t v0 = sub_10020F6E4();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100027224()
{
  uint64_t v0 = sub_1000271D4();
  return _swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for OctaneSubscription()
{
  return self;
}

unint64_t sub_100027278()
{
  unint64_t result = qword_100309CE8;
  if (!qword_100309CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309CE8);
  }
  return result;
}

unint64_t sub_1000272C4()
{
  unint64_t result = qword_100309CF8;
  if (!qword_100309CF8)
  {
    sub_10001B028(&qword_100309CF0);
    sub_100027740(&qword_100309D00, (void (*)(uint64_t))_s10AdHocOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309CF8);
  }
  return result;
}

unint64_t sub_100027368()
{
  unint64_t result = qword_100309D10;
  if (!qword_100309D10)
  {
    sub_10001B028(&qword_100309D08);
    sub_100027740(&qword_100309D18, (void (*)(uint64_t))_s9CodeOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D10);
  }
  return result;
}

unint64_t sub_10002740C()
{
  unint64_t result = qword_100309D28;
  if (!qword_100309D28)
  {
    sub_10001B028(&qword_100309D20);
    sub_100027740(&qword_100309D30, (void (*)(uint64_t))_s12WinbackOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D28);
  }
  return result;
}

unint64_t sub_1000274B0()
{
  unint64_t result = qword_100309D40;
  if (!qword_100309D40)
  {
    sub_10001B028(&qword_100309D38);
    sub_100027740(&qword_100309D48, (void (*)(uint64_t))_s17IntroductoryOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D40);
  }
  return result;
}

unint64_t sub_100027554()
{
  unint64_t result = qword_100309D58;
  if (!qword_100309D58)
  {
    sub_10001B028(&qword_100309CF0);
    sub_100027740(&qword_100309D60, (void (*)(uint64_t))_s10AdHocOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D58);
  }
  return result;
}

unint64_t sub_1000275F8()
{
  unint64_t result = qword_100309D68;
  if (!qword_100309D68)
  {
    sub_10001B028(&qword_100309D08);
    sub_100027740(&qword_100309D70, (void (*)(uint64_t))_s9CodeOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D68);
  }
  return result;
}

unint64_t sub_10002769C()
{
  unint64_t result = qword_100309D78;
  if (!qword_100309D78)
  {
    sub_10001B028(&qword_100309D20);
    sub_100027740(&qword_100309D80, (void (*)(uint64_t))_s12WinbackOfferCMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D78);
  }
  return result;
}

uint64_t sub_100027740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027788(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for OctaneSubscriptionPeriod.Unit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for OctaneSubscription.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100027940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OctaneSubscription.CodingKeys()
{
  return &type metadata for OctaneSubscription.CodingKeys;
}

unint64_t sub_10002797C()
{
  unint64_t result = qword_100309D90;
  if (!qword_100309D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D90);
  }
  return result;
}

unint64_t sub_1000279CC()
{
  unint64_t result = qword_100309D98;
  if (!qword_100309D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309D98);
  }
  return result;
}

unint64_t sub_100027A1C()
{
  unint64_t result = qword_100309DA0;
  if (!qword_100309DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309DA0);
  }
  return result;
}

uint64_t sub_100027A68()
{
  return sub_10024F800();
}

uint64_t sub_100027A98()
{
  return sub_10024F980();
}

uint64_t sub_100027AC4()
{
  return v0;
}

uint64_t sub_100027ADC()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100027B00@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_100027B18()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100027B38()
{
  return v0;
}

uint64_t sub_100027B4C()
{
  return _s8DiscountCMa();
}

void *sub_100027B6C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  int v2 = (void *)v1;
  if (v1 == 1)
  {
    int v2 = sub_1000C2720(0x722D646E75666572, 0xEE00747365757165, 1819112552, 0xE400000000000000);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_100021534(v3);
  }
  sub_10002158C(v1);
  return v2;
}

uint64_t sub_100027C18@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = (uint8_t *)sub_10024E030();
  uint64_t v5 = *((void *)v4 - 1);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100212134();
  uint64_t v10 = sub_100161540(0x746361736E617274, 0xED000064496E6F69, v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_96;
  }
  uint64_t v13 = HIBYTE(v12) & 0xF;
  uint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v15 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1001A4FCC(v10, v12, 10);
    char v97 = v96;
    swift_bridgeObjectRelease_n();
    if ((v97 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_96:
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v98 = sub_10024E1F0();
    sub_10001B0E8(v98, (uint64_t)qword_10034C0E0);
    uint64_t v99 = sub_10024E1D0();
    os_log_type_t v100 = sub_10024EE10();
    uint64_t v38 = v100;
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v38, "No transaction id parameter passed for refund request UI", v4, 2u);
      swift_slowDealloc();
    }

    sub_100028C8C();
    uint64_t v39 = 21;
    goto LABEL_101;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    unsigned int v132 = (uint8_t *)v10;
    uint64_t v133 = v12 & 0xFFFFFFFFFFFFFFLL;
    if (v10 == 43)
    {
      if (v13)
      {
        if (v13 != 1 && (BYTE1(v10) - 48) <= 9u)
        {
          uint64_t v9 = (BYTE1(v10) - 48);
          if (v13 == 2) {
            goto LABEL_37;
          }
          if ((BYTE2(v10) - 48) <= 9u)
          {
            uint64_t v9 = 10 * (BYTE1(v10) - 48) + (BYTE2(v10) - 48);
            if (v13 != 3)
            {
              while (1)
              {
                sub_100028C7C();
                if (!v23 && v19) {
                  goto LABEL_34;
                }
                if (!is_mul_ok(v9, v21)) {
                  goto LABEL_34;
                }
                BOOL v19 = __CFADD__(10 * v9, v22);
                uint64_t v9 = 10 * v9 + v22;
                if (v19) {
                  goto LABEL_34;
                }
                sub_100028CA4();
                if (v23) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (v10 != 45)
      {
        if (v13 && (v10 - 48) <= 9u)
        {
          uint64_t v9 = (v10 - 48);
          if (v13 == 1) {
            goto LABEL_37;
          }
          if ((BYTE1(v10) - 48) <= 9u)
          {
            uint64_t v9 = 10 * (v10 - 48) + (BYTE1(v10) - 48);
            if (v13 != 2)
            {
              while (1)
              {
                sub_100028C7C();
                if (!v23 && v19) {
                  goto LABEL_34;
                }
                if (!is_mul_ok(v9, v46)) {
                  goto LABEL_34;
                }
                BOOL v19 = __CFADD__(10 * v9, v47);
                uint64_t v9 = 10 * v9 + v47;
                if (v19) {
                  goto LABEL_34;
                }
                sub_100028CA4();
                if (v23) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
LABEL_34:
        uint64_t v9 = 0;
LABEL_35:
        LOBYTE(v10) = 1;
        goto LABEL_38;
      }
      if (v13)
      {
        if (v13 != 1)
        {
          unsigned __int8 v18 = BYTE1(v10) - 48;
          if ((BYTE1(v10) - 48) <= 9u)
          {
            uint64_t v9 = 0;
            BOOL v19 = v18 == 0;
            unint64_t v20 = -(uint64_t)v18;
            if (!v19) {
              goto LABEL_35;
            }
            if (v13 == 2)
            {
              LOBYTE(v10) = 0;
              uint64_t v9 = v20;
              goto LABEL_38;
            }
            unsigned __int8 v48 = BYTE2(v10) - 48;
            if ((BYTE2(v10) - 48) <= 9u && is_mul_ok(v20, 0xAuLL))
            {
              unint64_t v49 = 10 * v20;
              uint64_t v9 = v49 - v48;
              if (v49 >= v48)
              {
                if (v13 != 3)
                {
                  while (1)
                  {
                    sub_100028C7C();
                    if (!v23 && v19) {
                      goto LABEL_34;
                    }
                    if (!is_mul_ok(v9, v50)) {
                      goto LABEL_34;
                    }
                    BOOL v19 = 10 * v9 >= (unint64_t)v51;
                    uint64_t v9 = 10 * v9 - v51;
                    if (!v19) {
                      goto LABEL_34;
                    }
                    sub_100028CA4();
                    if (v23) {
                      goto LABEL_38;
                    }
                  }
                }
LABEL_37:
                LOBYTE(v10) = 0;
                goto LABEL_38;
              }
            }
          }
        }
        goto LABEL_34;
      }
      __break(1u);
    }
    __break(1u);
LABEL_105:
    swift_once();
LABEL_92:
    uint64_t v80 = (void *)qword_10030B088;
    Class isa = sub_10024DFB0().super.isa;
    id v82 = [v80 stringFromDate:isa];

    uint64_t v83 = sub_10024E6B0();
    uint64_t v85 = v84;

    (*(void (**)(uint64_t, uint8_t *))(v118 + 8))(v8, v4);
    unsigned int v126 = &type metadata for RefundRequestUIRoute.ViewProperties;
    uint64_t v86 = (void *)swift_allocObject();
    v125[0] = v86;
    unint64_t v87 = v111;
    v86[2] = v112;
    v86[3] = v87;
    uint64_t v88 = v107;
    v86[4] = v108;
    v86[5] = v88;
    uint64_t v89 = v110;
    v86[6] = v120;
    v86[7] = v89;
    v86[8] = v109;
    v86[9] = v2;
    v86[10] = v83;
    v86[11] = v85;
    uint64_t v90 = sub_1000C2DBC((uint64_t)v125, v9, v117);
    unint64_t v92 = v91;
    swift_bridgeObjectRelease();
    sub_10001C2EC((uint64_t)v125);
    sub_1000CB5C8(v90, v92, 1, (uint64_t)v125);
    uint64_t v4 = (uint8_t *)v125[0];
    uint64_t v8 = v125[1];
    int v2 = (void *)v125[2];
    uint64_t v9 = (uint64_t)v126;
    uint64_t v93 = v127;
    uint64_t v94 = v128;
    uint64_t v95 = v129;
    swift_release();

    uint64_t v38 = v93 | (v94 << 32) | (v95 << 48);
    swift_release();
    swift_release();
    goto LABEL_52;
  }
  if ((v10 & 0x1000000000000000) != 0) {
    char v16 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    char v16 = (unsigned __int8 *)sub_10024F3E0();
  }
  uint64_t v9 = (uint64_t)sub_1001A4F70(v16, v14);
  LOBYTE(v10) = v17 & 1;
LABEL_38:
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_96;
  }
LABEL_39:
  sub_10001C2A8(v2 + 11, v2[14]);
  uint64_t v24 = sub_1000A0FFC();
  if (v24)
  {
    uint64_t v10 = v24;
    uint64_t v9 = (uint64_t)sub_100027B6C();
    if (!v9)
    {

      uint64_t v4 = 0;
      uint64_t v8 = 0;
      int v2 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 49;
      goto LABEL_101;
    }
    Swift::Int v26 = v25;
    if ((sub_1000D4218() & 1) != 0 || (sub_1000D9478(3), (v27 & 1) == 0) || sub_1000D4238() != 2)
    {
      unsigned int v135 = &type metadata for RefundRequestUIRoute.DuplicateProperties;
      LOBYTE(v132) = 1;
      uint64_t v40 = sub_1000C2DBC((uint64_t)&v132, v9, v26);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      sub_10001C2EC((uint64_t)&v132);
      sub_1000CB5C8(v40, v42, 1, (uint64_t)&v132);
      uint64_t v4 = v132;
      uint64_t v8 = v133;
      int v2 = v134;
      uint64_t v9 = (uint64_t)v135;
      uint64_t v43 = v136;
      uint64_t v44 = WORD2(v136);
      uint64_t v45 = BYTE6(v136);

      uint64_t v38 = v43 | (v44 << 32) | (v45 << 48);
LABEL_52:
      uint64_t v39 = 3;
      goto LABEL_101;
    }
    Swift::Int v117 = v26;
    uint64_t v118 = v5;
    int64_t v120 = v2 + 6;
    int v122 = sub_10001C2A8(v2 + 6, v2[9]);
    uint64_t v123 = sub_1000D427C();
    uint64_t v29 = v28;
    uint64_t v30 = sub_1000D428C();
    sub_10008A5FC(v30, v31);
    uint64_t v121 = sub_1000FE198(v123, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10001C2A8(v120, v2[9]);
    sub_1000D428C();
    uint64_t v32 = v121;
    uint64_t v33 = sub_10008A7F0();
    swift_bridgeObjectRelease();
    if (v32)
    {
      uint64_t v34 = *(void **)(v32 + 56);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v34 = _swiftEmptyArrayStorage;
    }
    uint64_t v119 = v33;
    uint64_t v52 = sub_1000F072C((unint64_t)v34);
    swift_bridgeObjectRelease();
    uint64_t v116 = v52;
    if (v52)
    {
      uint64_t v53 = *(void *)(v52 + 32);
      uint64_t v107 = *(void *)(v52 + 40);
      uint64_t v108 = v53;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v32) {
        uint64_t v54 = sub_10020F734();
      }
      else {
        uint64_t v54 = sub_1000D427C();
      }
      uint64_t v107 = v55;
      uint64_t v108 = v54;
    }
    sub_1000D4318();
    uint64_t v56 = v124[1];
    uint64_t v57 = (ValueMetadata *)v124[3];
    unsigned int v111 = (uint8_t *)v124[0];
    unint64_t v112 = v124[2];
    uint64_t v58 = v124[5];
    uint64_t v113 = v124[4];
    char v114 = (ValueMetadata *)v124[6];
    uint64_t v115 = v124[8];
    int v122 = (void *)v124[9];
    uint64_t v123 = v124[7];
    sub_100028760((uint64_t)v124, (uint64_t)v130);
    if (v131)
    {
      uint64_t v60 = v122;
      uint64_t v59 = v123;
      long long v62 = v114;
      uint64_t v61 = v115;
      unint64_t v64 = (void *)v112;
      uint64_t v63 = v113;
      uint64_t v65 = v111;
    }
    else
    {
      sub_10001C2A8(v120, v2[9]);
      sub_1000D428C();
      sub_10008AFE8();
      swift_bridgeObjectRelease();
      uint64_t v61 = v124[18];
      uint64_t v60 = (void *)v124[19];
      long long v62 = (ValueMetadata *)v124[16];
      uint64_t v59 = v124[17];
      uint64_t v63 = v124[14];
      uint64_t v58 = v124[15];
      unint64_t v64 = (void *)v124[12];
      uint64_t v57 = (ValueMetadata *)v124[13];
      uint64_t v65 = (uint8_t *)v124[10];
      uint64_t v56 = v124[11];
    }
    unsigned int v132 = v65;
    uint64_t v133 = v56;
    char v114 = v57;
    uint64_t v115 = v56;
    int v134 = v64;
    unsigned int v135 = v57;
    uint64_t v136 = v63;
    uint64_t v137 = v58;
    uint64_t v113 = v58;
    unsigned int v138 = v62;
    uint64_t v139 = v59;
    int v122 = v60;
    uint64_t v123 = v59;
    uint64_t v140 = v61;
    uint64_t v141 = v60;
    sub_1000D44D4();
    if ((v68 & 0x100000000) != 0)
    {
      if (!v121)
      {
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        uint64_t v104 = 0;
        LODWORD(v109) = 1;
LABEL_88:
        type metadata accessor for AppIconRoute();
        uint64_t v72 = sub_1000D428C();
        unint64_t v74 = sub_10006ACC8(v72, v73);
        unsigned int v111 = v75;
        unint64_t v112 = v74;
        swift_bridgeObjectRelease();
        sub_10001C2A8(v120, v2[9]);
        uint64_t v76 = sub_1000D428C();
        int64_t v120 = (void *)sub_10008A4B8(v76, v77);
        uint64_t v110 = v78;
        swift_bridgeObjectRelease();
        if (v109)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v109 = 0;
          int v2 = (void *)0xE000000000000000;
        }
        else
        {
          swift_retain();
          uint64_t v109 = sub_1000512DC();
          int v2 = v79;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1000D453C();
        sub_10024DF60();
        if (qword_100308CE8 == -1) {
          goto LABEL_92;
        }
        goto LABEL_105;
      }
      swift_retain();
      uint64_t v69 = sub_10020F78C();
      uint64_t v105 = v70;
      uint64_t v106 = v69;
      uint64_t v104 = v71;
      swift_release();
    }
    else
    {
      uint64_t v104 = v68;
      uint64_t v105 = v67;
      uint64_t v106 = v66;
    }
    LODWORD(v109) = 0;
    goto LABEL_88;
  }
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v35 = sub_10024E1F0();
  sub_10001B0E8(v35, (uint64_t)qword_10034C0E0);
  uint64_t v36 = sub_10024E1D0();
  os_log_type_t v37 = sub_10024EE10();
  uint64_t v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v8 = 12;
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    unsigned int v132 = (uint8_t *)v9;
    sub_10024F100();
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v38, "No transaction found for id %lu to refund", v4, 0xCu);
    swift_slowDealloc();
  }

  sub_100028C8C();
  uint64_t v39 = 25;
LABEL_101:
  ASOctaneSupportXPCService::HTTPVersion v101 = HTTPVersion.init(major:minor:)(1, 1);
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(result + 32) = v39;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v101;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 62) = BYTE6(v38);
  *(_WORD *)(a1 + 60) = WORD2(v38);
  *(_DWORD *)(a1 + 56) = v38;
  return result;
}

uint64_t type metadata accessor for RefundRequestUIRoute()
{
  return self;
}

uint64_t sub_100028760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_100309EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000287C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 96, 7);
}

uint64_t getEnumTagSinglePayload for RefundRequestUIRoute.DuplicateProperties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RefundRequestUIRoute.DuplicateProperties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100028984);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestUIRoute.DuplicateProperties()
{
  return &type metadata for RefundRequestUIRoute.DuplicateProperties;
}

uint64_t destroy for RefundRequestUIRoute.ViewProperties()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RefundRequestUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RefundRequestUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestUIRoute.ViewProperties()
{
  return &type metadata for RefundRequestUIRoute.ViewProperties;
}

uint64_t sub_100028CB4(int a1)
{
  uint64_t result = dup(a1);
  if (result == -1)
  {
    uint64_t result = sub_10024E210();
    int v3 = result;
    if (result == 4)
    {
      while (1)
      {
        uint64_t result = dup(a1);
        if (result != -1) {
          break;
        }
        uint64_t result = sub_10024E210();
        if (result != 4)
        {
          int v3 = result;
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if (v3 == 9 || v3 == 14)
      {
        __break(1u);
      }
      else
      {
        sub_100028EB4();
        sub_1000290D0();
        return sub_1000290A8(v5, (uint64_t)"dup(descriptor:)");
      }
    }
  }
  return result;
}

uint64_t sub_100028D58(int a1)
{
  uint64_t result = close(a1);
  if (result == -1)
  {
    uint64_t result = sub_10024E210();
    if (result != 4)
    {
      int v2 = result;
      if (result == 9 || result == 14)
      {
        __break(1u);
      }
      else
      {
        sub_100028EB4();
        sub_1000290D0();
        *(void *)uint64_t v4 = 0x65736F6C63;
        *(void *)(v4 + 8) = 0xE500000000000000;
        *(_DWORD *)(v4 + 16) = v2;
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_100028DE0()
{
  uint64_t result = sub_10024E200();
  if (result == -1)
  {
    uint64_t result = sub_10024E210();
    int v1 = result;
    if (result == 4)
    {
      while (1)
      {
        uint64_t result = sub_10024E200();
        if (result != -1) {
          break;
        }
        uint64_t result = sub_10024E210();
        if (result != 4)
        {
          int v1 = result;
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if (v1 == 9 || v1 == 14)
      {
        __break(1u);
      }
      else
      {
        sub_100028EB4();
        sub_1000290D0();
        *(void *)uint64_t v3 = 0xD000000000000016;
        *(void *)(v3 + 8) = 0x800000010027A060;
        *(_DWORD *)(v3 + 16) = v1;
        return swift_willThrow();
      }
    }
  }
  return result;
}

unint64_t sub_100028EB4()
{
  unint64_t result = qword_100309EA8;
  if (!qword_100309EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309EA8);
  }
  return result;
}

off_t sub_100028F00(int a1, off_t a2, int a3)
{
  off_t result = lseek(a1, a2, a3);
  if (result == -1)
  {
    off_t result = sub_10024E210();
    int v7 = result;
    if (result == 4)
    {
      while (1)
      {
        off_t result = lseek(a1, a2, a3);
        if (result != -1) {
          break;
        }
        off_t result = sub_10024E210();
        if (result != 4)
        {
          int v7 = result;
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if (v7 == 9 || v7 == 14)
      {
        __break(1u);
      }
      else
      {
        sub_100028EB4();
        sub_1000290D0();
        return sub_1000290A8(v9, (uint64_t)"lseek(descriptor:offset:whence:)");
      }
    }
  }
  return result;
}

uint64_t sub_100028FBC(const char *a1)
{
  return if_nametoindex(a1);
}

uint64_t sub_100028FE4(ifaddrs **a1)
{
  uint64_t result = getifaddrs(a1);
  if (result == -1)
  {
    uint64_t result = sub_10024E210();
    int v3 = result;
    if (result == 4)
    {
      while (1)
      {
        uint64_t result = getifaddrs(a1);
        if (result != -1) {
          break;
        }
        uint64_t result = sub_10024E210();
        if (result != 4)
        {
          int v3 = result;
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if (v3 == 9 || v3 == 14)
      {
        __break(1u);
      }
      else
      {
        sub_100028EB4();
        sub_1000290D0();
        strcpy(v5, "getifaddrs(_:)");
        v5[15] = -18;
        *((_DWORD *)v5 + 4) = v3;
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_1000290A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_willThrow();
}

uint64_t sub_1000290D0()
{
  return swift_allocError();
}

ValueMetadata *type metadata accessor for OctaneConfigurationVersion()
{
  return &type metadata for OctaneConfigurationVersion;
}

uint64_t sub_1000290F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F6A616DLL && a2 == 0xE500000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6E696DLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_10024FA60();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000291E0(char a1)
{
  if (a1) {
    return 0x726F6E696DLL;
  }
  else {
    return 0x726F6A616DLL;
  }
}

uint64_t sub_100029208(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_100309EC0);
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_100029594();
  sub_10024FD40();
  char v13 = 0;
  sub_10024F960();
  if (!v1)
  {
    char v12 = 1;
    sub_10024F960();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_100029348(void *a1)
{
  sub_100019524(&qword_100309EB0);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  uint64_t v5 = a1[3];
  sub_10001C2A8(a1, v5);
  sub_100029594();
  sub_10024FD20();
  if (!v1)
  {
    uint64_t v5 = sub_10024F850();
    sub_10024F850();
    uint64_t v6 = sub_1000297D4();
    v7(v6);
  }
  sub_10001C2EC((uint64_t)a1);
  return v5;
}

uint64_t sub_1000294A4()
{
  return sub_1000291E0(*v0);
}

uint64_t sub_1000294AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000290F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000294D4(uint64_t a1)
{
  unint64_t v2 = sub_100029594();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100029510(uint64_t a1)
{
  unint64_t v2 = sub_100029594();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002954C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100029348(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100029578(void *a1)
{
  return sub_100029208(a1);
}

unint64_t sub_100029594()
{
  unint64_t result = qword_100309EB8;
  if (!qword_100309EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309EB8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OctaneConfigurationVersion.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000296ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OctaneConfigurationVersion.CodingKeys()
{
  return &type metadata for OctaneConfigurationVersion.CodingKeys;
}

unint64_t sub_1000296E8()
{
  unint64_t result = qword_100309EC8;
  if (!qword_100309EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309EC8);
  }
  return result;
}

unint64_t sub_100029738()
{
  unint64_t result = qword_100309ED0;
  if (!qword_100309ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309ED0);
  }
  return result;
}

unint64_t sub_100029788()
{
  unint64_t result = qword_100309ED8[0];
  if (!qword_100309ED8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100309ED8);
  }
  return result;
}

uint64_t sub_1000297D4()
{
  return v0;
}

uint64_t OS_dispatch_queue.asyncWithFuture<A>(eventLoop:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10024E2A0();
  sub_10001B550();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10024E2D0();
  sub_10001B550();
  uint64_t v17 = v16;
  __chkstk_darwin(v18, v19);
  unint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = EventLoop.makePromise<A>(of:file:line:)(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/DispatchQueue+WithFuture.swift", 126, 2, 35, ObjectType, a5, a2);
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = a5;
  v24[3] = a3;
  void v24[4] = a4;
  v24[5] = v23;
  aBlock[4] = sub_100029B9C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018758;
  aBlock[3] = &unk_1002DBCE8;
  Swift::Int v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_10024E2C0();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100029BC0();
  sub_100019524(&qword_100309168);
  sub_100029C10();
  sub_10024F280();
  sub_10024EEB0();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v28);
  swift_release();
  return v23;
}

uint64_t sub_100029A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  unsigned int v6 = (void (*)(void))__chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6();
  EventLoopPromise.succeed(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t sub_100029B5C()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100029B9C()
{
  return sub_100029A58(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t sub_100029BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100029BB8()
{
  return swift_release();
}

unint64_t sub_100029BC0()
{
  unint64_t result = qword_100317080;
  if (!qword_100317080)
  {
    sub_10024E2A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100317080);
  }
  return result;
}

unint64_t sub_100029C10()
{
  unint64_t result = qword_100317090;
  if (!qword_100317090)
  {
    sub_10001B028(&qword_100309168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100317090);
  }
  return result;
}

uint64_t sub_100029C68()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

void CloseMode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CloseMode.hashValue.getter(unsigned __int8 a1)
{
  return sub_10024FC70();
}

BOOL sub_100029DF0(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100029DFC()
{
  return CloseMode.hashValue.getter(*v0);
}

void sub_100029E04(uint64_t a1)
{
  CloseMode.hash(into:)(a1, *v1);
}

void sub_100029E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a1) {
    sub_1000B44D0(0, 0, a1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
}

#error "100029E50: call analysis failed (funcsize=62)"

#error "100029F4C: call analysis failed (funcsize=41)"

uint64_t sub_100029FCC()
{
  sub_10002F9E0();
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FB34();
  char v2 = v1();
  swift_unknownObjectRelease();
  sub_10002FA28();
  if (v2)
  {
    unsigned int v4 = (uint64_t *)(v0 + *(void *)(v3 + 208));
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    sub_10002F288(*v4);
    sub_10002F288(v6);
  }
  else
  {
    type metadata accessor for BaseSocketChannel.AddressCache();
    Lock.withLock<A>(_:)();
    return v8;
  }
  return v5;
}

uint64_t sub_10002A0B0()
{
  return swift_retain();
}

uint64_t sub_10002A0F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v2 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 208));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  *a2 = *v2;
  a2[1] = v4;
  sub_10002F288(v3);
  return sub_10002F288(v4);
}

uint64_t sub_10002A140(uint64_t a1, uint64_t a2)
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.preconditionInEventLoop(file:line:)(v5, v6, v7, 259, v8);
  swift_unknownObjectRelease();
  sub_10002FA28();
  Lock.lock()();
  sub_10002A200(v2, a1, a2);
  Lock.unlock()();
  sub_10002F2A0(a1);
  return sub_10002F2A0(a2);
}

uint64_t sub_10002A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 208));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t *v4 = a2;
  v4[1] = a3;
  sub_10002F288(a2);
  sub_10002F288(a3);
  sub_10002F2A0(v5);
  return sub_10002F2A0(v6);
}

void sub_10002A270()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FB34();
  char v1 = v0();
  swift_unknownObjectRelease();
  if ((v1 & 1) == 0) {
    sub_10008196C((void (*)(uint64_t *__return_ptr))sub_10002F76C);
  }
}

__n128 sub_10002A32C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 + 216);
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  *a2 = *(_OWORD *)v2;
  a2[1] = v4;
  return result;
}

void sub_10002A350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.preconditionInEventLoop(file:line:)(v9, v10, v11, 278, v12);
  swift_unknownObjectRelease();
  sub_10002FA28();
  Lock.lock()();
  uint64_t v13 = (void *)(v4 + *(void *)(*(void *)v4 + 216));
  *uint64_t v13 = a1;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  Lock.unlock()();
}

uint64_t sub_10002A400()
{
  sub_10002FC68();
  return *(unsigned __int8 *)(v0 + *(void *)(v1 + 224));
}

void sub_10002A420()
{
  sub_10002FC68();
  *(unsigned char *)(v0 + *(void *)(v1 + 224)) = v2;
}

uint64_t sub_10002A440()
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 295, ObjectType, &protocol witness table for SelectableEventLoop);
  return swift_unknownObjectRelease();
}

uint64_t sub_10002A4A0()
{
  sub_10002FC68();
  char v2 = (uint64_t *)(v0 + *(void *)(v1 + 232));
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_unknownObjectRetain();
  swift_retain();
  return v3;
}

void sub_10002A528()
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 301, ObjectType, &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease();
  char v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 240));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  sub_10002A350(v3, v4, v5, v6);
}

uint64_t sub_10002A5B0()
{
  sub_10002FC68();
  return *(void *)(v0 + *(void *)(v1 + 240));
}

void sub_10002A5D8()
{
  sub_10002FC68();
  char v2 = (void *)(v0 + *(void *)(v1 + 240));
  void *v2 = v3;
  v2[1] = v4;
  v2[2] = v5;
  v2[3] = v6;
  sub_10002A528();
}

uint64_t sub_10002A600()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10002A630()
{
  uint64_t v0 = sub_100029FCC();
  sub_10002F2A0(v1);
  return v0;
}

uint64_t sub_10002A660()
{
  uint64_t v0 = sub_100029FCC();
  uint64_t v2 = v1;
  sub_10002F2A0(v0);
  return v2;
}

BOOL sub_10002A68C()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v0, v1, v2, 320, v3, v4);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  uint64_t v6 = v5;
  __int16 v8 = v7;
  swift_getObjectType();
  uint64_t v9 = sub_10002FB04();
  EventLoop.assertInEventLoop(file:line:)(v9, v10, v11, 188, v12, v6);
  swift_release();
  swift_unknownObjectRelease();
  return (v8 & 0xFF00) != 1024;
}

uint64_t sub_10002A744()
{
  sub_10002FC68();
  uint64_t v2 = *(void *)(v0 + *(void *)(v1 + 136));
  swift_retain();
  uint64_t v3 = sub_100007640((unsigned char *)(v2 + 16));
  swift_release();
  return v3;
}

uint64_t sub_10002A798()
{
  return swift_retain();
}

uint64_t sub_10002A7BC()
{
  sub_10002FC68();
  uint64_t result = *(void *)(v0 + *(void *)(v1 + 200));
  if (result) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

void sub_10002A7E4()
{
}

void sub_10002A840()
{
}

void sub_10002A884()
{
}

void sub_10002A8C8()
{
}

void sub_10002A90C()
{
}

void sub_10002A950()
{
}

void sub_10002A994()
{
}

void sub_10002A9D8()
{
}

char *sub_10002AA1C()
{
  uint64_t v1 = *(void *)v0;
  swift_unknownObjectRelease();
  sub_10002FC68();
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(&v0[*(void *)(v2 + 104)]);
  swift_release();
  sub_10002FC68();
  swift_release();
  sub_10002FC68();
  swift_release();
  sub_10002FC68();
  swift_release();
  sub_10002FC68();
  swift_bridgeObjectRelease();
  sub_10002FC68();
  swift_release();
  sub_10002FC68();
  sub_10001C2EC((uint64_t)&v0[*(void *)(v3 + 168)]);
  sub_10002FC68();
  swift_release();
  sub_10002FC68();
  uint64_t v5 = (uint64_t *)&v0[*(void *)(v4 + 208)];
  uint64_t v6 = v5[1];
  sub_10002F2A0(*v5);
  sub_10002F2A0(v6);
  sub_10002FC68();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10002ABAC()
{
  sub_10002AA1C();
  sub_10002F9E0();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return _swift_deallocClassInstance(v0, v2, v3);
}

uint64_t type metadata accessor for BaseSocketChannel()
{
  return sub_10002F7A4();
}

uint64_t sub_10002ABFC()
{
  sub_10002F9E0();
  uint64_t v1 = v0;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 460, v5, v6);
  swift_unknownObjectRelease();
  sub_10002FBAC();
  sub_10002FAE0();
  if (v7()) {
    return (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 56))(*(void *)(v1 + 80));
  }
  sub_10002F0C8();
  uint64_t v9 = sub_1000290D0();
  return sub_10002FABC(v9, v10);
}

uint64_t sub_10002ACE0()
{
  sub_10002F9E0();
  uint64_t v1 = v0;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 468, v5, v6);
  swift_unknownObjectRelease();
  sub_10002FBAC();
  sub_10002FAE0();
  if (v7()) {
    return (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 64))(*(void *)(v1 + 80));
  }
  sub_10002F0C8();
  uint64_t v9 = sub_1000290D0();
  return sub_10002FABC(v9, v10);
}

void sub_10002ADC4()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v1, v2, v3, 484, v4, v5);
  swift_unknownObjectRelease();
  sub_10002FA28();
  uint64_t v7 = *(void *)(v6 + 184);
  if ((*(unsigned char *)(v0 + v7) & 1) == 0)
  {
    *(unsigned char *)(v0 + v7) = 1;
    sub_10002FA28();
    v8 += 81;
    uint64_t v9 = *v8;
    if ((*v8)())
    {
      sub_10002FA28();
      v10 += 73;
      uint64_t v11 = *v10;
      if ((*v10)())
      {
        sub_10002FA28();
        uint64_t v13 = *(uint64_t (**)(void))(v12 + 616);
        uint64_t v23 = v13;
        do
        {
          __int16 v14 = v13();
          char v15 = v14;
          if ((v14 & 0x100) != 0)
          {
            uint64_t v16 = v9;
            uint64_t v17 = *(void *)(sub_10002A7BC() + 56);
            swift_getObjectType();
            sub_10002FD7C();
            EventLoop.assertInEventLoop(file:line:)(v18, v19, v20, 1173, v21, v17);
            if (sub_1000B05F8())
            {
              sub_1000B1558();
              swift_release();
            }
            swift_release();
            uint64_t v9 = v16;
            uint64_t v13 = v23;
          }
        }
        while ((v15 & 1) == 0 && (v9() & 1) != 0 && (v11() & 1) != 0);
      }
    }
    sub_10002FA28();
    *(unsigned char *)(v0 + *(void *)(v22 + 184)) = 0;
  }
  sub_10002FD48();
}

uint64_t (*sub_10002B0E0())(void, void, void, void, void)
{
  sub_10002FE20();
  uint64_t v62 = v1;
  uint64_t v63 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v54 = v6;
  uint64_t v55 = v7;
  sub_10002F9E0();
  uint64_t v53 = v8;
  uint64_t v56 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  uint64_t v11 = v10;
  uint64_t v13 = *(uint64_t (**)(void, void, void, void, void))(v12 + 64);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v48 - v16;
  sub_10002F9C8();
  uint64_t v19 = v18;
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v22, v23);
  uint64_t v24 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FB34();
  char v26 = v25();
  swift_unknownObjectRelease();
  if (v26)
  {
    sub_10002A0B0();
    swift_getObjectType();
    sub_10002FCDC();
    EventLoop.makePromise<A>(of:file:line:)(v27, v28, v29, v30, 545, v31, v27, v32);
    sub_10002FF00();
    sub_10002F9F4();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 696);
    swift_retain();
    v34(v54, v55, v5, v56);
    sub_1000B44D0(0, 0, (uint64_t)v13, v42, v43, v44, v45, v46, v48, v49, ObjectType, v51, AssociatedTypeWitness, v53, v54, v55, v56, v57, v58,
      v59,
      v60,
      v61);
  }
  else
  {
    uint64_t v51 = sub_10002A0B0();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v54, v5);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    BOOL v49 = (BOOL)v17;
    uint64_t v36 = v17;
    uint64_t v37 = AssociatedTypeWitness;
    v35(v36, v55, AssociatedTypeWitness);
    unint64_t v38 = (*(unsigned __int8 *)(v19 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    unint64_t v39 = (v21 + v38 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v40 = (char *)swift_allocObject();
    unint64_t v41 = (char *)sub_10002FD64(v40);
    *((void *)v41 + 6) = v3;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v41[v38], v24, v5);
    (*(void (**)(char *, BOOL, uint64_t))(v11 + 32))(&v40[v39], v49, v37);
    uint64_t v13 = sub_100172158;
    swift_retain();
    sub_100172158(sub_10002F448, v40, (char *)&type metadata for () + 8, ObjectType, &protocol witness table for SelectableEventLoop);
    sub_10002FF00();
  }
  swift_release();
  return v13;
}

#error "10002B458: call analysis failed (funcsize=49)"

uint64_t sub_10002B4D4(uint64_t a1)
{
  sub_10002F9C8();
  double v4 = __chkstk_darwin(v2, v3);
  v5(v4);
  if (a1) {
    EventLoopPromise.succeed(_:)();
  }
  uint64_t v6 = sub_10002FE0C();
  return v7(v6);
}

uint64_t sub_10002B5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  uint64_t v61 = v7;
  __chkstk_darwin(v8, v9);
  sub_10002F9C8();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  v58[1] = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v58 - v17;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v19, v20, v21, 554, v22, v23);
  swift_unknownObjectRelease();
  sub_10002FAE0();
  if ((v24() & 1) == 0)
  {
    sub_10002F0C8();
    uint64_t v26 = sub_1000290D0();
    return sub_10002FABC(v26, v27);
  }
  uint64_t v59 = v11;
  uint64_t v60 = v4;
  Swift::Int v25 = *(void (**)(void))(v11 + 16);
  sub_10002FDB8();
  v25();
  if (sub_10002FB48())
  {
    sub_100211458(v63, DWORD1(v63), v64, AssociatedTypeWitness);
LABEL_16:
    uint64_t v57 = v59;
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, a3);
  }
  if (sub_10002FB48())
  {
    uint64_t v29 = sub_10002FA74();
    v30(v29);
    sub_10002FB14();
    sub_10002A5D8();
    goto LABEL_16;
  }
  if (sub_10002FB48())
  {
    uint64_t v31 = sub_10002FA74();
    v32(v31);
    sub_100019524(qword_10030A060);
    sub_10002FB14();
    sub_10002F754(&v63, (uint64_t)v62);
    sub_10002FDAC();
    uint64_t v34 = v3 + *(void *)(v33 + 168);
    swift_beginAccess();
    sub_10001C2EC(v34);
    sub_10002F754(v62, v34);
    swift_endAccess();
    goto LABEL_16;
  }
  if (sub_10002FB48())
  {
    uint64_t v35 = a3;
    uint64_t v36 = v18;
    uint64_t v37 = sub_10002FA74();
    v38(v37);
    sub_10002FB14();
    int v39 = v63;
    sub_10002FDAC();
    uint64_t v41 = *(void *)(v40 + 192);
    int v42 = *(unsigned __int8 *)(v3 + v41);
    *(unsigned char *)(v3 + v41) = v39;
    sub_10002A4A0();
    uint64_t v44 = v43;
    __int16 v46 = v45;
    swift_getObjectType();
    sub_10002FB9C();
    EventLoop.assertInEventLoop(file:line:)(v47, v48, v49, v50, v51, v44);
    swift_release();
    swift_unknownObjectRelease();
    if (v46 & 0xFB00) != 0 && ((v39 ^ v42))
    {
      uint64_t v18 = v36;
      if (v39)
      {
        sub_10002FDAC();
        (*(void (**)(void))(v52 + 752))();
      }
      else
      {
        sub_10002BA34();
      }
      uint64_t v57 = v59;
    }
    else
    {
      uint64_t v57 = v59;
      uint64_t v18 = v36;
    }
    a3 = v35;
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, a3);
  }
  if (sub_10002FB48())
  {
    uint64_t v53 = sub_10002FA74();
    v54(v53);
    sub_10002FB14();
    sub_10002FDAC();
    *(void *)(v3 + *(void *)(v55 + 176)) = v56;
    goto LABEL_16;
  }
  sub_10002FDB8();
  v25();
  sub_10002FE34();
  sub_10002FC3C();
  sub_10024FA20();
  sub_10002FC0C();
  uint64_t result = sub_10002FE54();
  __break(1u);
  return result;
}

uint64_t sub_10002BA34()
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 723, ObjectType, &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  uint64_t v2 = v1;
  __int16 v4 = v3;
  uint64_t v5 = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 166, v5, v2);
  swift_release();
  uint64_t result = swift_unknownObjectRelease();
  if ((v4 & 0xFB00) != 0)
  {
    return sub_10002CE30();
  }
  return result;
}

uint64_t sub_10002BB18()
{
  sub_10002FE20();
  uint64_t v32 = v1;
  uint64_t v33 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10002F9E0();
  v30[1] = v7;
  sub_10002F9C8();
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12, v13);
  uint64_t v31 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  v30[0] = v16;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v30 - v19;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FB34();
  char v22 = v21();
  swift_unknownObjectRelease();
  sub_10002A0B0();
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v0 + 712))(v6, v4, v31);
    swift_getObjectType();
    sub_10002FCDC();
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v28 = v27;
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v30[0] + 8))(v20, AssociatedTypeWitness);
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v6, v4);
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    Swift::Int v25 = (void *)swift_allocObject();
    uint64_t v26 = (char *)sub_10002FD64(v25);
    *((void *)v26 + 6) = v0;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v26[v24], (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    swift_retain();
    uint64_t v28 = sub_100172158(sub_10002F6C8, v25, AssociatedTypeWitness, ObjectType, &protocol witness table for SelectableEventLoop);
    swift_release();
    swift_unknownObjectRelease();
  }
  return v28;
}

uint64_t sub_10002BE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v27[6] = a3;
  sub_10002F9C8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  __chkstk_darwin(v8, v9);
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v10, v11, v12, 601, v13, v14);
  swift_unknownObjectRelease();
  sub_10002FAE0();
  if ((v15() & 1) == 0)
  {
    sub_10002F0C8();
    uint64_t v18 = sub_1000290D0();
    return sub_10002FABC(v18, v19);
  }
  uint64_t v16 = *(void (**)(void))(v5 + 16);
  sub_10002FD98();
  v16();
  if (sub_10002FB48())
  {
    uint64_t v17 = sub_10002FBF0();
    sub_1002114CC(LODWORD(v27[0]), HIDWORD(v27[0]), v17);
LABEL_10:
    uint64_t v25 = sub_10002FE0C();
    return v26(v25);
  }
  if (sub_10002FB48())
  {
    v27[0] = sub_10002A5B0();
    v27[1] = v21;
    v27[2] = v22;
    v27[3] = v23;
    sub_10002FBF0();
LABEL_9:
    swift_dynamicCast();
    goto LABEL_10;
  }
  if (sub_10002FB48())
  {
    uint64_t v24 = v3 + *(void *)(*(void *)v3 + 168);
    swift_beginAccess();
    sub_100027788(v24, (uint64_t)v27);
    sub_100019524(qword_10030A060);
    sub_10002FBF0();
    goto LABEL_9;
  }
  if (sub_10002FB48())
  {
    LOBYTE(v27[0]) = *(unsigned char *)(v3 + *(void *)(*(void *)v3 + 192));
    sub_10002FBF0();
    goto LABEL_9;
  }
  if (sub_10002FB48())
  {
    v27[0] = *(void *)(v3 + *(void *)(*(void *)v3 + 176));
    sub_10002FBF0();
    goto LABEL_9;
  }
  sub_10002FD98();
  v16();
  sub_10002FE34();
  sub_10002FC3C();
  sub_10024FA20();
  sub_10002FC0C();
  uint64_t result = sub_10002FE54();
  __break(1u);
  return result;
}

uint64_t sub_10002C1DC()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v3, v4, v5, 627, v6, v7);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  sub_10002FEA0();
  uint64_t v8 = sub_10002FB04();
  EventLoop.assertInEventLoop(file:line:)(v8, v9, v10, 161, v11, v1);
  swift_release();
  swift_unknownObjectRelease();
  if ((v2 & 0xFF00) != 0x300) {
    return 0;
  }
  sub_10002FB60();
  uint64_t v14 = *(void *)(v13 + 152);
  if ((*(unsigned char *)(v0 + v14) & 1) == 0 && *(unsigned char *)(v0 + *(void *)(v12 + 192)) == 1)
  {
    uint64_t v15 = *(void *)(sub_10002A7BC() + 56);
    swift_getObjectType();
    sub_10002FD7C();
    EventLoop.assertInEventLoop(file:line:)(v16, v17, v18, 1213, v19, v15);
    if (sub_1000B05CC())
    {
      sub_1000B0854();
      swift_release();
    }
    swift_release();
  }
  return *(unsigned __int8 *)(v0 + v14);
}

#error "10002C3FC: call analysis failed (funcsize=69)"

uint64_t sub_10002C444(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)a1 + 88) + 48))(a2, *(void *)(*(void *)a1 + 80));
  if (!v2) {
    return sub_10002C4E8();
  }
  return result;
}

uint64_t sub_10002C4E8()
{
  sub_10002FE20();
  char v1 = v0;
  char v3 = v2;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v4, v5, v6, 1131, v7, v8);
  swift_unknownObjectRelease();
  uint64_t v9 = sub_100029FCC();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  if (v3)
  {
    uint64_t v13 = sub_10002ABFC();
    if (v1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10002F288(v9);
    uint64_t v13 = v10;
    if (v1)
    {
LABEL_3:
      uint64_t v14 = sub_10002ACE0();
      goto LABEL_6;
    }
  }
  sub_10002F288(v12);
  uint64_t v14 = v12;
LABEL_6:
  sub_10002F288(v13);
  sub_10002F288(v14);
  sub_10002A140(v13, v14);
  sub_10002F2A0(v14);
  sub_10002F2A0(v13);
  sub_10002F2A0(v10);
  sub_10002FAEC();
  return sub_10002F2A0(v15);
}

#error "10002C788: call analysis failed (funcsize=103)"

uint64_t sub_10002C7D8()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v1, v2, v3, 671, v4, v5);
  uint64_t result = swift_unknownObjectRelease();
  char v7 = *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 224));
  if ((v7 & 8) == 0)
  {
    return sub_10002C878(v7 | 8u);
  }
  return result;
}

uint64_t sub_10002C868(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_10002C870(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_10002C878(unsigned __int8 a1)
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 1202, ObjectType, &protocol witness table for SelectableEventLoop);
  uint64_t v4 = swift_unknownObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 584))(v4);
  if (result)
  {
    uint64_t v6 = *(void *)(*(void *)v1 + 224);
    if (*(unsigned __int8 *)(v1 + v6) != a1)
    {
      *(unsigned char *)(v1 + v6) = a1;
      uint64_t v7 = type metadata accessor for BaseSocketChannel();
      uint64_t WitnessTable = swift_getWitnessTable();
      return sub_10004AD40(v1, v7, WitnessTable);
    }
  }
  return result;
}

uint64_t sub_10002CAA0()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v1, v2, v3, 681, v4, v5);
  uint64_t result = swift_unknownObjectRelease();
  char v7 = *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 224));
  if ((v7 & 8) != 0)
  {
    return sub_10002C878(v7 & 0xF7);
  }
  return result;
}

void sub_10002CB30()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 691, v5, v6);
  swift_unknownObjectRelease();
  sub_10002F9F4();
  sub_10002FAE0();
  if (v7())
  {
    sub_10002FA28();
    (*(void (**)(void))(v8 + 664))();
    sub_10002A4A0();
    uint64_t v9 = sub_10002FC74();
    sub_10002FDEC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", v10, v11, v12, v9);
    swift_release();
    swift_unknownObjectRelease();
    if ((v1 & 0xFF00) == 0x300)
    {
      sub_10002FB60();
      if ((*(unsigned char *)(v0 + *(void *)(v14 + 224)) & 8) == 0 && ((*(uint64_t (**)(void))(v13 + 688))() & 1) == 0)
      {
        sub_10002C7D8();
      }
    }
  }
}

uint64_t sub_10002CC74()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v3, v4, v5, 710, v6, v7);
  swift_unknownObjectRelease();
  sub_10002F9F4();
  sub_10002FAE0();
  uint64_t result = v8();
  if (result)
  {
    sub_10002FA28();
    *(unsigned char *)(v0 + *(void *)(v10 + 152)) = 1;
    sub_10002A4A0();
    sub_10002FC74();
    sub_10002FB9C();
    EventLoop.assertInEventLoop(file:line:)(v11, v12, v13, v14, v15, v1);
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    if ((v2 & 0xFB00) != 0)
    {
      return sub_10002CD70();
    }
  }
  return result;
}

uint64_t sub_10002CD70()
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 731, ObjectType, &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  char v3 = v2;
  swift_unknownObjectRelease();
  uint64_t result = swift_release();
  if ((v3 & 1) == 0)
  {
    char v5 = *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 224));
    if ((v5 & 4) == 0)
    {
      return sub_10002C878(v5 | 4u);
    }
  }
  return result;
}

uint64_t sub_10002CE30()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v1, v2, v3, 763, v4, v5);
  uint64_t result = swift_unknownObjectRelease();
  char v7 = *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 224));
  if ((v7 & 4) != 0)
  {
    return sub_10002C878(v7 & 0xFB);
  }
  return result;
}

uint64_t sub_10002CEC0()
{
  sub_10002A0B0();
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 747, ObjectType, &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  char v3 = v2;
  swift_unknownObjectRelease();
  uint64_t result = swift_release();
  if ((v3 & 1) == 0)
  {
    char v5 = *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 224));
    if ((v5 & 2) == 0)
    {
      return sub_10002C878(v5 | 2u);
    }
  }
  return result;
}

void sub_10002CF80(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_10002F9E0();
  uint64_t v9 = v8;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v10, v11, v12, 782, v13, v14);
  swift_unknownObjectRelease();
  sub_10002F9F4();
  sub_10002FAE0();
  if (v15())
  {
    if (a2 == 2)
    {
      *(unsigned char *)(v3 + *(void *)(*(void *)v3 + 224)) = 1;
      sub_10002FA28();
      uint64_t v16 = *(void *)(v9 + 80);
      uint64_t v17 = *(void *)(v9 + 88);
      uint64_t v18 = type metadata accessor for BaseSocketChannel();
      uint64_t WitnessTable = swift_getWitnessTable();
      sub_10004A5EC(v3, 2, v18, WitnessTable);
      sub_10002FA28();
      (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v16, v17);
      swift_retain();
      sub_10002FA28();
      uint64_t v30 = v3 + *(void *)(v29 + 232);
      swift_beginAccess();
      uint64_t v31 = *(void *)(v30 + 8);
      uint64_t ObjectType = swift_getObjectType();
      EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 91, ObjectType, v31);
      switch(*(unsigned char *)(v30 + 25))
      {
        case 1:
        case 2:
          *(unsigned char *)(v30 + 25) = 4;
          sub_10002FB78((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/"
                                 "SwiftNIO/BaseSocketChannel.swift");
          uint64_t v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100029F24;
          break;
        case 3:
          *(unsigned char *)(v30 + 25) = 4;
          sub_10002FB78((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/"
                                 "SwiftNIO/BaseSocketChannel.swift");
          uint64_t v34 = *(void *)(v30 + 16);
          swift_retain();
          sub_10000764C((unsigned char *)(v34 + 16), 0);
          swift_release();
          uint64_t v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100029E24;
          break;
        case 4:
          __break(1u);
          JUMPOUT(0x10002D568);
        default:
          *(unsigned char *)(v30 + 25) = 4;
          sub_10002FB78((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/"
                                 "SwiftNIO/BaseSocketChannel.swift");
          uint64_t v33 = sub_100029E0C;
          break;
      }
      uint64_t v35 = v33;
      swift_endAccess();
      sub_10002A440();
      sub_10002FA28();
      (*(void (**)(uint64_t))(v36 + 672))(a1);
      uint64_t v37 = _swiftEmptyArrayStorage[2];
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = 0;
        do
        {
          int v39 = &_swiftEmptyArrayStorage[2 * v38++];
          long long v49 = *((_OWORD *)v39 + 2);
          swift_retain();
          sub_10002D668((void (**)(uint64_t *))&v49);
          swift_release();
        }
        while (v37 != v38);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_10002FA28();
      uint64_t v41 = *(void *)(v40 + 160);
      uint64_t v42 = *(void *)(v4 + v41);
      if (v42)
      {
        *(void *)(v4 + v41) = 0;
        swift_errorRetain();
        sub_1000B44D0(a1, 1, v42, v43, v44, v45, v46, v47, v49, SBYTE8(v49), v50, v51, v52, v53, v54, v55, v56, v57, v58,
          v59,
          v60,
          v61);
        swift_errorRelease();
        swift_release();
      }
      uint64_t v48 = sub_10002A7BC();
      ((void (*)(uint64_t, uint64_t))v35)(a3, v48);
      swift_release();
      sub_10002A0B0();
      swift_getObjectType();
      swift_retain();
      j___s25ASOctaneSupportXPCService19SelectableEventLoopC7executeyyyycF((uint64_t)sub_10002F604, v4);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_22;
    }
    if (a3)
    {
      sub_10002F0C8();
      uint64_t v20 = sub_1000290D0();
      sub_10002FCB0(v22, 1);
      goto LABEL_8;
    }
LABEL_22:
    sub_10002FD48();
    return;
  }
  if (!a3) {
    goto LABEL_22;
  }
  sub_10002F0C8();
  uint64_t v20 = sub_1000290D0();
  *(void *)uint64_t v21 = 3;
  *(unsigned char *)(v21 + 8) = 3;
LABEL_8:
  swift_errorRetain();
  sub_1000B44D0(v20, 1, a3, v23, v24, v25, v26, v27, v49, SBYTE8(v49), v50, v51, v52, v53, v54, v55, v56, v57, v58,
    v59,
    v60,
    v61);
  swift_errorRelease();
  sub_10002FD48();
  swift_errorRelease();
}

uint64_t sub_10002D57C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56);
  swift_getObjectType();
  sub_10002FD88();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, v5, v6, v1);
  uint64_t result = sub_1000B05F8();
  if (result)
  {
    sub_10002FE88();
    sub_1000B1750();
    swift_release();
    return swift_release();
  }
  return result;
}

#error "10002D640: call analysis failed (funcsize=22)"

uint64_t sub_10002D668(void (**a1)(uint64_t *))
{
  uint64_t v1 = *a1;
  uint64_t v3 = sub_10002A7BC();
  v1(&v3);
  return swift_release();
}

#error "10002D758: call analysis failed (funcsize=41)"

uint64_t sub_10002D770()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v0, v1, v2, 1140, v3, v4);
  swift_unknownObjectRelease();
  return sub_10002A140(0xF000000000000007, 0xF000000000000007);
}

void sub_10002D7DC(uint64_t a1)
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v5, v6, v7, 854, v8, v9);
  swift_unknownObjectRelease();
  sub_10002FA14();
  sub_10002FAE0();
  if ((v10() & 1) == 0)
  {
    if (a1)
    {
      sub_10002F0C8();
      sub_1000290D0();
      uint64_t v17 = 2;
      goto LABEL_7;
    }
LABEL_22:
    sub_10002FD30();
    return;
  }
  sub_10002A4A0();
  sub_10002FEA0();
  sub_10002FB9C();
  EventLoop.assertInEventLoop(file:line:)(v11, v12, v13, v14, v15, v2);
  swift_release();
  swift_unknownObjectRelease();
  if ((v3 & 0xFB00) == 0)
  {
    if (*(unsigned char *)(*(void *)(v1 + *(void *)(*(void *)v1 + 120)) + 88))
    {
      uint64_t v27 = sub_10002A7BC();
      sub_10002F2C8();
      sub_1000290D0();
      *uint64_t v28 = 2;
      uint64_t v29 = *(void *)(v27 + 56);
      swift_getObjectType();
      sub_10002FD88();
      EventLoop.assertInEventLoop(file:line:)(v30, v31, v32, v33, v34, v29);
      if (sub_1000B05F8())
      {
        sub_1000B1750();
        swift_release();
      }
      swift_errorRelease();
      swift_release();
      sub_1000290D0();
      *uint64_t v35 = 2;
      sub_10002FA14();
      (*(void (**)(void))(v36 + 760))();
      swift_errorRelease();
      if (a1)
      {
        sub_1000290D0();
        *uint64_t v37 = 2;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v38 = v1 + *(void *)(*(void *)v1 + 232);
      swift_beginAccess();
      swift_getObjectType();
      sub_10002FD0C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/Swif"
                             "tNIO/BaseSocketChannel.swift");
      if (*(unsigned char *)(v38 + 25))
      {
        __break(1u);
        return;
      }
      *(unsigned char *)(v38 + 25) = 1;
      sub_10002FCE8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/Swif"
                             "tNIO/BaseSocketChannel.swift");
      sub_10002A440();
      uint64_t v44 = sub_10002A7BC();
      if (a1) {
        sub_1000B44D0(0, 0, a1, v39, v40, v41, v42, v43, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
      }
          v61,
          vars0,
          vars8);
      uint64_t v45 = *(void *)(v44 + 56);
      swift_getObjectType();
      sub_10002FD7C();
      EventLoop.assertInEventLoop(file:line:)(v46, v47, v48, 1125, v49, v45);
      if (sub_1000B05F8())
      {
        swift_retain();
        sub_1000B1044();
        swift_release_n();
      }
      swift_release();
    }
    goto LABEL_22;
  }
  if (!a1) {
    goto LABEL_22;
  }
  sub_10002F0C8();
  sub_1000290D0();
  uint64_t v17 = 12;
LABEL_7:
  sub_10002FCB0(v16, v17);
LABEL_8:
  uint64_t v18 = swift_errorRetain();
  sub_10002FBD4(v18, v19, v20, v21, v22, v23, v24, v25, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
    v61,
    vars0,
    vars8);
  swift_errorRelease();
  sub_10002FD30();
  swift_errorRelease();
}

uint64_t sub_10002DB3C()
{
  sub_10002FE20();
  uint64_t v1 = v0;
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 881, v5, &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease();
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FCDC();
  EventLoop.makePromise<A>(of:file:line:)(v6, v7, v8, v9, 884, v10, v6, (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002FF00();
  uint64_t v11 = swift_retain();
  sub_10002D7DC(v11);
  swift_release();
  swift_retain_n();
  swift_retain_n();
  sub_10012DD14();
  swift_release();
  swift_release_n();
  swift_retain();
  sub_10002DDEC(v1);
  swift_release();
  sub_10002A4A0();
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  __int16 v17 = v16;
  swift_getObjectType();
  uint64_t v18 = sub_10002FB04();
  EventLoop.assertInEventLoop(file:line:)(v18, v19, v20, 166, v21, v13);
  swift_release();
  swift_unknownObjectRelease();
  if ((v17 & 0xFB00) != 0)
  {
    sub_10002DE68();
    sub_10002A4A0();
    uint64_t v22 = sub_10002FEE0();
    sub_10002FDCC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", v23, v24, v25, v22);
    if (v15 <= 4)
    {
      sub_10002FE74();
      if (!v26)
      {
        swift_release();
        swift_release();
        sub_10002FAEC();
        return swift_unknownObjectRelease();
      }
    }
    swift_release();
    swift_unknownObjectRelease();
    sub_10002DF9C(v1);
  }
  sub_10002FAEC();
  return swift_release();
}

uint64_t sub_10002DD80()
{
  uint64_t v0 = type metadata accessor for BaseSocketChannel();
  return Channel.close(mode:promise:)(2, 0, v0);
}

uint64_t sub_10002DDEC(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain_n();
    sub_10012DD14();
    return swift_release();
  }
  return result;
}

uint64_t sub_10002DE68()
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241, v5, v6);
  swift_unknownObjectRelease();
  uint64_t result = sub_10002E5F4(1);
  if (!v1)
  {
    sub_10002FA28();
    uint64_t v9 = v0 + *(void *)(v8 + 232);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 91, ObjectType, v10);
    if (*(unsigned char *)(v9 + 25) == 1)
    {
      *(unsigned char *)(v9 + 25) = 2;
      EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 44, ObjectType, v10);
      sub_10002A440();
      sub_10002A7BC();
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_10002DF9C(uint64_t a1)
{
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v4, v5, v6, 1253, v7, v8);
  swift_unknownObjectRelease();
  sub_10002A4A0();
  uint64_t v9 = sub_10002FEE0();
  sub_10002FDCC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", v10, v11, v12, v9);
  if (v2 > 4 || (sub_10002FE74(), v13))
  {
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
    sub_10002DE68();
  }
  sub_10002FA28();
  uint64_t v15 = v1 + *(void *)(v14 + 232);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v15 + 8);
  swift_getObjectType();
  sub_10002FD0C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO"
                         "/BaseSocketChannel.swift");
  if (*(unsigned char *)(v15 + 25) == 2)
  {
    *(unsigned char *)(v15 + 25) = 3;
    sub_10002FCE8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftN"
                           "IO/BaseSocketChannel.swift");
    uint64_t v17 = *(void *)(v15 + 16);
    swift_retain();
    sub_10000764C((unsigned char *)(v17 + 16), 1);
    swift_endAccess();
    swift_release();
    sub_10002A440();
    uint64_t v23 = sub_10002A7BC();
    if (a1) {
      sub_1000B44D0(0, 0, a1, v18, v19, v20, v21, v22, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
    }
        v44,
        vars0,
        vars8);
    uint64_t v24 = *(void *)(v23 + 56);
    swift_getObjectType();
    sub_10002FD7C();
    EventLoop.assertInEventLoop(file:line:)(v25, v26, v27, 1149, v28, v24);
    uint64_t v29 = sub_1000B05F8();
    if (v29)
    {
      uint64_t v30 = v29;
      swift_retain();
      sub_1000B12CC();
      swift_release_n();
      uint64_t v23 = v30;
    }
    swift_release();
    sub_10002A4A0();
    uint64_t v31 = sub_10002FC74();
    EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift", 119, 2, 188, v31, v23);
    swift_release();
    swift_unknownObjectRelease();
    if ((v16 & 0xFF00) != 0x400)
    {
      sub_10002CEC0();
      sub_10002FA28();
      (*(void (**)(void))(v32 + 720))();
    }
    sub_10002FD30();
  }
  else
  {
    __break(1u);
  }
}

#error "10002E28C: call analysis failed (funcsize=25)"

#error "10002E3A4: call analysis failed (funcsize=190)"

uint64_t sub_10002E5D4()
{
  return (*(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 224)) >> 3) & 1;
}

uint64_t sub_10002E5F4(char a1)
{
  sub_10002F9E0();
  sub_10002A0B0();
  swift_getObjectType();
  sub_10002FA08();
  EventLoop.assertInEventLoop(file:line:)(v4, v5, v6, 1223, v7, v8);
  swift_unknownObjectRelease();
  sub_10002F9F4();
  sub_10002FAE0();
  if (v9())
  {
    *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 224)) = a1;
    sub_10002FA28();
    uint64_t v10 = type metadata accessor for BaseSocketChannel();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t result = sub_10004ADA8(v1, v10, WitnessTable);
    if (!v2) {
      return result;
    }
    uint64_t v13 = *(void *)(sub_10002A7BC() + 56);
    swift_getObjectType();
    sub_10002FD88();
    EventLoop.assertInEventLoop(file:line:)(v14, v15, v16, v17, v18, v13);
    if (sub_1000B05F8())
    {
      sub_1000B1750();
      swift_release();
    }
    swift_release();
    sub_10002FA28();
    uint64_t v19 = sub_10002FC94();
    v20(v19);
  }
  else
  {
    sub_10002F0C8();
    sub_1000290D0();
    sub_10002FCB0(v21, 2);
  }
  return swift_willThrow();
}

void sub_10002E7A8()
{
}

void sub_10002E7DC()
{
}

void sub_10002E810()
{
}

uint64_t destroy for SocketChannelLifecycleManager()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_WORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for SocketChannelLifecycleManager(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 26))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SocketChannelLifecycleManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SocketChannelLifecycleManager()
{
  return &type metadata for SocketChannelLifecycleManager;
}

uint64_t sub_10002EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void *sub_10002EA4C(void *result)
{
  uint64_t v1 = result;
  if ((~*result & 0xF000000000000007) != 0) {
    __n128 result = (void *)swift_release();
  }
  if ((~v1[1] & 0xF000000000000007) != 0)
  {
    return (void *)swift_release();
  }
  return result;
}

void *sub_10002EAB0(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  *a1 = v4;
  uint64_t v5 = a2[1];
  if ((~v5 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  a1[1] = v5;
  return a1;
}

void *sub_10002EB14(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a2 & 0xF000000000000007;
  if ((~*a1 & 0xF000000000000007) == 0)
  {
    if (v5 != 0xF000000000000007)
    {
      *a1 = v4;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 == 0xF000000000000007)
  {
    sub_10002EC10((uint64_t)a1);
    uint64_t v4 = *a2;
LABEL_6:
    *a1 = v4;
    goto LABEL_8;
  }
  *a1 = v4;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a2[1];
  unint64_t v8 = v7 & 0xF000000000000007;
  if ((~a1[1] & 0xF000000000000007) != 0)
  {
    if (v8 != 0xF000000000000007)
    {
      void *v6 = v7;
      swift_retain();
      swift_release();
      return a1;
    }
    sub_10002EC10((uint64_t)(a1 + 1));
    uint64_t v7 = a2[1];
    goto LABEL_13;
  }
  if (v8 == 0xF000000000000007)
  {
LABEL_13:
    void *v6 = v7;
    return a1;
  }
  void *v6 = v7;
  swift_retain();
  return a1;
}

uint64_t sub_10002EC10(uint64_t a1)
{
  return a1;
}

void *sub_10002EC64(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((~*a1 & 0xF000000000000007) == 0) {
    goto LABEL_4;
  }
  if ((~v4 & 0xF000000000000007) == 0)
  {
    sub_10002EC10((uint64_t)a1);
LABEL_4:
    *a1 = v4;
    goto LABEL_6;
  }
  *a1 = v4;
  swift_release();
LABEL_6:
  unint64_t v5 = a1 + 1;
  uint64_t v6 = a2[1];
  if ((~a1[1] & 0xF000000000000007) != 0)
  {
    if ((~v6 & 0xF000000000000007) != 0)
    {
      *unint64_t v5 = v6;
      swift_release();
      return a1;
    }
    sub_10002EC10((uint64_t)(a1 + 1));
  }
  *unint64_t v5 = v6;
  return a1;
}

uint64_t sub_10002ED08(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7D && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 124;
    }
    else
    {
      int v3 = ((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7));
      unsigned int v4 = v3 ^ 0x7F;
      int v2 = 126 - v3;
      if (v4 >= 0x7D) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10002ED64(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)__n128 result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t type metadata accessor for BaseSocketChannel.AddressCache()
{
  return sub_10002F7A4();
}

uint64_t sub_10002EDD0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t sub_10002EE10()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t sub_10002EE50()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t sub_10002EE90()
{
  return sub_10002ABFC();
}

uint64_t sub_10002EEA8()
{
  return sub_10002ACE0();
}

uint64_t sub_10002EEC8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t sub_10002EF00()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t sub_10002EF2C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t sub_10002EF58()
{
  return sub_10002E254();
}

uint64_t sub_10002EF70()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t sub_10002EFB0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10002EFE0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t sub_10002F010()
{
  return sub_10002A600();
}

uint64_t sub_10002F034@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for BaseSocketChannel.SynchronousOptions();
  a1[4] = &off_1002DC110;
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_10002F0AC()
{
  return swift_getAssociatedConformanceWitness();
}

unint64_t sub_10002F0C8()
{
  unint64_t result = qword_10030A050;
  if (!qword_10030A050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A050);
  }
  return result;
}

uint64_t sub_10002F114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 696))(a1, a2, a5, a7);
}

uint64_t sub_10002F168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 712))(a1, a4, a6);
}

uint64_t sub_10002F1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10002F114(a1, a2, *v6, a4, a3, a6, a4);
}

uint64_t sub_10002F1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10002F168(a1, *v5, a3, a2, a5, a3);
}

BOOL sub_10002F204(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10002F210(char a1, unsigned __int8 a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10002F220(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_10002F22C(unsigned __int8 a1, char a2)
{
  return (a1 & ~a2) == 0;
}

#error "10002F264: call analysis failed (funcsize=19)"

uint64_t sub_10002F288(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10002F2A0(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10002F2B8()
{
  return sub_10002DD80();
}

uint64_t sub_10002F2C0(uint64_t a1)
{
  return sub_10002F23C(a1, v1);
}

unint64_t sub_10002F2C8()
{
  unint64_t result = qword_10030A058;
  if (!qword_10030A058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A058);
  }
  return result;
}

uint64_t type metadata accessor for BaseSocketChannel.SynchronousOptions()
{
  return sub_10002F7A4();
}

uint64_t sub_10002F32C()
{
  sub_10002FE20();
  uint64_t v19 = v1;
  uint64_t v2 = *(void *)(v0 + 24);
  sub_10002F9C8();
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v8 = v6 + *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v8 + v14) & ~v14;
  uint64_t v16 = v15 + *(void *)(v13 + 64);
  uint64_t v17 = v5 | v14 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v15, AssociatedTypeWitness);
  return _swift_deallocObject(v0, v16, v17);
}

uint64_t sub_10002F448()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_10002F9C8();
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = v4 + *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(v0 + 48) + 696))(v0 + v4, v0 + ((v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v1, v2);
}

uint64_t sub_10002F550()
{
  return sub_10002A0B0();
}

uint64_t sub_10002F57C()
{
  swift_errorRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F5B4(uint64_t a1)
{
  return sub_10002D57C(a1);
}

uint64_t sub_10002F5BC()
{
  swift_release();
  swift_errorRelease();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F5FC(uint64_t a1)
{
  return sub_10002D610(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002F604()
{
  return sub_10002D6C8(v0);
}

uint64_t sub_10002F60C()
{
  return sub_10002C444(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002F628()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_10002F9C8();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 56) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);
  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_10002F6C8()
{
  return (*(uint64_t (**)(unint64_t))(**(void **)(v0 + 48) + 712))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));
}

uint64_t sub_10002F754(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double sub_10002F76C@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = sub_10002A32C(v1, a1).n128_u64[0];
  return result;
}

uint64_t sub_10002F788@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002A0F0(v1, a1);
}

uint64_t sub_10002F7A4()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for SelectableEventLoop.ExternalState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SocketChannelLifecycleManager.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *double result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002F928);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SocketChannelLifecycleManager.State()
{
  return &type metadata for SocketChannelLifecycleManager.State;
}

unint64_t sub_10002F964()
{
  unint64_t result = qword_10030A0E8[0];
  if (!qword_10030A0E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10030A0E8);
  }
  return result;
}

uint64_t sub_10002FA34()
{
  return sub_10024F670();
}

uint64_t sub_10002FA74()
{
  return v0;
}

uint64_t sub_10002FA94()
{
  return sub_10024F670();
}

uint64_t sub_10002FABC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 2;
  *(unsigned char *)(a2 + 8) = 3;
  return swift_willThrow();
}

uint64_t sub_10002FB04()
{
  return v0;
}

uint64_t sub_10002FB14()
{
  return swift_dynamicCast();
}

uint64_t sub_10002FB48()
{
  return swift_dynamicCast();
}

uint64_t sub_10002FB78(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119, 2, 44, v2, v1);
}

void sub_10002FBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1000B44D0(v23, 1, v22, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
}

uint64_t sub_10002FBF0()
{
  return swift_getAssociatedTypeWitness();
}

void sub_10002FC0C()
{
  v1._countAndFlagsBits = 0x70757320746F6E20;
  v1._object = (void *)0xEE00646574726F70;
  sub_10024E800(v1);
}

void sub_10002FC3C()
{
  uint64_t v2 = *(void *)(v0 - 112);
  *(void *)(v0 - 120) = *(void *)(v0 - 120);
  *(void *)(v0 - 112) = v2;
  v3._countAndFlagsBits = 0x206E6F6974706FLL;
  v3._object = (void *)0xE700000000000000;
  sub_10024E800(v3);
}

uint64_t sub_10002FC74()
{
  return swift_getObjectType();
}

uint64_t sub_10002FC94()
{
  return v0;
}

void sub_10002FCB0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 3;
}

uint64_t sub_10002FCC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 3;
  return swift_errorRetain();
}

uint64_t sub_10002FCE8(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119, 2, 44, v2, v1);
}

uint64_t sub_10002FD0C(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119, 2, 91, v2, v1);
}

void *sub_10002FD64(void *result)
{
  result[2] = *(void *)(v1 + 80);
  result[3] = v2;
  uint64_t v4 = *(void *)(v3 - 96);
  result[4] = *(void *)(v1 + 88);
  result[5] = v4;
  return result;
}

uint64_t sub_10002FDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119, 2, 176, a5, v5);
}

uint64_t sub_10002FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119, 2, 161, a5, v5);
}

uint64_t sub_10002FE0C()
{
  return v0;
}

void sub_10002FE34()
{
  *(void *)(v0 - 120) = 0;
  *(void *)(v0 - 112) = 0xE000000000000000;
  sub_10024F330(23);
}

uint64_t sub_10002FE54()
{
  return sub_10024F670();
}

uint64_t sub_10002FE88()
{
  return swift_retain();
}

uint64_t sub_10002FEA0()
{
  return swift_getObjectType();
}

uint64_t sub_10002FEC0()
{
  return swift_getObjectType();
}

uint64_t sub_10002FEE0()
{
  return swift_getObjectType();
}

uint64_t sub_10002FF00()
{
  return swift_unknownObjectRelease();
}

uint64_t NIOMulticastNotSupportedError.device.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_UInt24._backing.modify())(void)
{
  return debugOnly(_:);
}

uint64_t PriorityQueue.remove(_:)()
{
  sub_1000304BC();
  return Heap.remove(value:)();
}

void PriorityQueue.push(_:)()
{
  sub_1000304BC();
  Heap.append(_:)();
}

uint64_t PriorityQueue.peek()()
{
  return sub_10024ED10();
}

uint64_t PriorityQueue.isEmpty.getter()
{
  return sub_10024ED20() & 1;
}

uint64_t PriorityQueue.pop()(uint64_t a1)
{
  return sub_10003023C(a1, (uint64_t (*)(void, void, void))type metadata accessor for Heap, (uint64_t (*)(uint64_t))Heap.removeRoot());
}

Swift::Void __swiftcall PriorityQueue.clear()()
{
  uint64_t v1 = Heap.init()();
  swift_release();
  *uint64_t v0 = v1;
}

uint64_t static PriorityQueue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = Heap.count.getter(a1, a3, a4);
  if (v7 == Heap.count.getter(a2, a3, a4))
  {
    type metadata accessor for PriorityQueue();
    swift_getWitnessTable();
    char v8 = sub_10024E9E0();
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t type metadata accessor for PriorityQueue()
{
  return sub_10002F7A4();
}

uint64_t sub_1000301FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static PriorityQueue.== infix(_:_:)(*a1, *a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t PriorityQueue.Iterator.next()(uint64_t a1)
{
  return sub_10003023C(a1, (uint64_t (*)(void, void, void))type metadata accessor for PriorityQueue, PriorityQueue.pop());
}

uint64_t sub_10003023C(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  return a3(v3);
}

uint64_t sub_10003029C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  Scheduled._promise.getter(v3);
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000302DC()
{
  return sub_10024E9B0();
}

uint64_t PriorityQueue.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10024F330(28);
  v7._object = (void *)0x800000010027A430;
  v7._countAndFlagsBits = 0xD000000000000015;
  sub_10024E800(v7);
  Heap.count.getter(a1, a2, a3);
  v8._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 2112041;
  v9._object = (void *)0xE300000000000000;
  sub_10024E800(v9);
  type metadata accessor for PriorityQueue();
  swift_retain();
  swift_getWitnessTable();
  sub_10024EB50();
  sub_10024EB40();
  swift_getWitnessTable();
  sub_10024FA30();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100030474()
{
  return swift_getWitnessTable();
}

uint64_t sub_100030490(uint64_t a1)
{
  return PriorityQueue.description.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t type metadata accessor for PriorityQueue.Iterator()
{
  return sub_10002F7A4();
}

uint64_t sub_1000304BC()
{
  return type metadata accessor for Heap();
}

unint64_t sub_1000304DC(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 != v5;
    }
    unint64_t result = v8;
    if ((v8 & 0xC) == v7) {
      unint64_t result = sub_1000F44B4(v8, a1, a2);
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_10024E890();
      char v12 = result;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v14[0] = a1;
      v14[1] = v15;
      char v12 = *((unsigned char *)v14 + v11);
    }
    else
    {
      unint64_t result = v13;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = sub_10024F3E0();
      }
      char v12 = *(unsigned char *)(result + v11);
    }
    if ((v8 & 0xC) == v7)
    {
      unint64_t result = sub_1000F44B4(v8, a1, a2);
      unint64_t v8 = result;
      if ((a2 & 0x1000000000000000) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      if (v4 <= v8 >> 16) {
        goto LABEL_27;
      }
      unint64_t v8 = sub_10024E860();
      if (v12 < 0) {
        return v9 != v5;
      }
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0) {
        goto LABEL_23;
      }
LABEL_19:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v12 < 0) {
        return v9 != v5;
      }
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t HTTPServerPipelineHandler.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  HTTPServerPipelineHandler.init()();
  return v0;
}

uint64_t HTTPServerPipelineHandler.init()()
{
  *(_WORD *)(v0 + 16) = 2;
  sub_1000308C8(0);
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v3;
  *(_WORD *)(v0 + 48) = 512;
  *(unsigned char *)(v0 + 50) = 2;
  return v0;
}

void sub_1000306E4(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_10011355C(a1);
      memset(v2, 0, sizeof(v2));
      uint64_t v3 = 1;
      sub_1000338D8(v2, v1);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_100030788(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_10011355C(a1);
      uint64_t v3 = 0;
      memset(v2, 0, sizeof(v2));
      char v4 = -1;
      sub_10003397C(v2, v1);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_100030830(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      sub_10011355C(a1);
      sub_10003C888();
      sub_100033A20(v1, v2, v3, 1, v4);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_1000308C8(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      sub_10011355C(a1);
      sub_10003C804();
      sub_100033B18(v2, v1);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_10003095C(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      sub_10011355C(a1);
      sub_10003C888();
      sub_100033BBC(v1, v2, v3, v4);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_1000309F0(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_10011355C(a1);
      sub_100033CAC(0, 0, 0, v1);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_100030A88(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_10011355C(a1);
      memset(v2, 0, sizeof(v2));
      sub_100033D88(v2, v1);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

void sub_100030B24(unint64_t a1)
{
}

void sub_100030B3C(unint64_t a1)
{
}

void sub_100030B54(unint64_t a1, void (*a2)(void, void, void))
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v3 = sub_10011355C(a1);
      a2(0, 0, v3);
      sub_10003C888();
      return;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  sub_10003C850();
  __break(1u);
}

Swift::Int sub_100030BFC()
{
  return CloseMode.hashValue.getter(*v0);
}

uint64_t HTTPServerPipelineHandler.channelRead(context:data:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(v2 + 48) & 0xFE) != 2)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = *(void *)(v2 + 40);
    BOOL v6 = __OFSUB__(v5, v4);
    uint64_t v7 = v5 - v4;
    if (v7 < 0 != v6) {
      v7 += *(void *)(*(void *)(v2 + 24) + 16);
    }
    if (v7 || !*(unsigned char *)(v2 + 16))
    {
      sub_100030CE8(a2, (uint64_t)v9);
      char v10 = 0;
      swift_beginAccess();
      sub_1000312C4(v9);
      swift_endAccess();
      return sub_100031378((uint64_t)v9);
    }
    else
    {
      return sub_1000313A8();
    }
  }
  return result;
}

uint64_t sub_100030CE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100030D44(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = v2[2];
  uint64_t v6 = *v2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FCDC();
    uint64_t v6 = v7;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5 >= *(void *)(v6 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v8 = v6 + 16 * v5;
  sub_10003C350(*(void *)(v8 + 32));
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t *v2 = v6;
  sub_10003C708(v5 + 1);
  if (v9)
  {
    sub_100121740();
  }
}

void sub_100030E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003C7F0();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t v17 = v10[2];
  uint64_t v18 = *v10;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FCEC();
    uint64_t v18 = v19;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v17 >= *(void *)(v18 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v20 = v18 + 24 * v17;
  swift_release();
  *(void *)(v20 + 32) = v16;
  *(void *)(v20 + 40) = v14;
  *(unsigned char *)(v20 + 54) = BYTE6(v12);
  *(_WORD *)(v20 + 52) = WORD2(v12);
  *(_DWORD *)(v20 + 48) = v12;
  uint64_t *v10 = v18;
  sub_10003C708(v17 + 1);
  if (v21)
  {
    sub_10003C780();
    sub_100121864(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
  }
  else
  {
    sub_10003C780();
  }
}

void sub_100030ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003C7F0();
  char v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t v17 = v10[2];
  uint64_t v18 = *v10;
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FCFC();
    uint64_t v18 = v19;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v17 >= *(void *)(v18 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v20 = v18 + 24 * v17;
  sub_10003B934(*(void *)(v20 + 32));
  *(void *)(v20 + 32) = v16;
  *(void *)(v20 + 40) = v14;
  *(unsigned char *)(v20 + 48) = v12;
  uint64_t *v10 = v18;
  sub_10003C708(v17 + 1);
  if (v21)
  {
    sub_10003C780();
    sub_10012195C(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
  }
  else
  {
    sub_10003C780();
  }
}

void sub_100030FA4(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(unsigned __int16 *)(a1 + 20);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = v1[2];
  uint64_t v10 = *v1;
  sub_10003BC9C(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FD1C();
    uint64_t v10 = v11;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v9 >= *(void *)(v10 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v12 = v2 | (v3 << 32) | (v4 << 48);
  uint64_t v13 = (uint64_t *)(v10 + (v9 << 6));
  sub_10003BC24(v13[4], v13[5], v13[6], v13[7], v13[8], v13[9], v13[10]);
  void v13[4] = v18;
  v13[5] = v17;
  v13[6] = v12;
  v13[7] = v16;
  v13[8] = v5;
  v13[9] = v6;
  v13[10] = v7;
  v13[11] = v8;
  *unsigned int v1 = v10;
  sub_10003C708(v9 + 1);
  if (v14)
  {
    sub_10002FD48();
    sub_100121A54();
  }
  else
  {
    sub_10002FD48();
  }
}

void sub_1000310B4(uint64_t a1)
{
  unint64_t v2 = v1[2];
  sub_100030CE8(a1, (uint64_t)v7);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unsigned int v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10011FD0C();
    uint64_t v3 = v5;
    *unsigned int v1 = v5;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }
  sub_10003C384((uint64_t)v7, v3 + (v2 << 6) + 32, &qword_10030A508);
  sub_10003C938();
  if (v6) {
    sub_100121B24();
  }
}

void sub_10003114C()
{
  sub_10003C7F0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v9 = v0[2];
  uint64_t v10 = *v0;
  sub_10003AFD0();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FD2C();
    uint64_t v10 = v11;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v9 >= *(void *)(v10 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v12 = (uint64_t *)(v10 + 32 * v9);
  sub_10003BD68(v12[4], v12[5], v12[6], v12[7]);
  v12[4] = v8;
  v12[5] = v6;
  v12[6] = v4 & 0xFFFFFFFFFFFFFFLL;
  v12[7] = v2;
  *uint64_t v0 = v10;
  sub_10003C708(v9 + 1);
  if (v13)
  {
    sub_10003C780();
    sub_100121BE0();
  }
  else
  {
    sub_10003C780();
  }
}

void sub_100031220(uint64_t a1)
{
  unint64_t v2 = v1[2];
  sub_10003C170(a1, (uint64_t)v7, &qword_10030A548);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10011FD3C();
    uint64_t v3 = v5;
    *uint64_t v1 = v5;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }
  sub_10003C384((uint64_t)v7, v3 + 72 * v2 + 32, &qword_10030A550);
  sub_10003C938();
  if (v6) {
    sub_100121CB0();
  }
}

void sub_1000312C4(uint64_t *a1)
{
  unint64_t v2 = v1[2];
  sub_10003C450(a1, (uint64_t)v8);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10011FD4C();
    uint64_t v3 = v5;
    *uint64_t v1 = v5;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }
  sub_10003C384((uint64_t)v8, v3 + (v2 << 6) + 32, &qword_10030A1F0);
  uint64_t v6 = v1[1];
  uint64_t v7 = (*(void *)(*v1 + 16) - 1) & (v1[2] + 1);
  v1[2] = v7;
  if (v6 == v7) {
    sub_100121D90();
  }
}

uint64_t sub_100031378(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000313A8()
{
  sub_100019524(&qword_10030A518);
  sub_10003320C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = HIBYTE(v5);
  if (HIBYTE(v5))
  {
    if (v7 != 1)
    {
      char v8 = 2;
      switch(*(unsigned char *)(v0 + 16))
      {
        case 1:
          char v8 = 0;
          goto LABEL_5;
        case 3:
LABEL_5:
          *(unsigned char *)(v0 + 16) = v8;
          int v9 = *(unsigned __int8 *)(v0 + 48);
          if (v9 == 1)
          {
            *(unsigned char *)(v0 + 48) = 2;
            swift_beginAccess();
            swift_release();
            uint64_t v17 = 0;
            memset(v16, 0, sizeof(v16));
            __int16 v18 = -256;
            *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = _swiftEmptyArrayStorage;
            sub_100038FB8();
            uint64_t v10 = *(void *)(v0 + 24);
            unint64_t v11 = *(void *)(v10 + 16);
            unint64_t v12 = v11 + 1;
            if (v11 >= *(void *)(v10 + 24) >> 1)
            {
              unint64_t v14 = *(void *)(v10 + 16);
              unint64_t v15 = v11 + 1;
              sub_100038FB8();
              unint64_t v11 = v14;
              unint64_t v12 = v15;
              uint64_t v10 = *(void *)(v0 + 24);
            }
            *(void *)(v10 + 16) = v12;
            sub_10003C248((uint64_t)v16, v10 + (v11 << 6) + 32, &qword_10030A1F0);
            *(void *)(v0 + 32) = 0;
            *(void *)(v0 + 40) = 0;
            swift_endAccess();
            int v9 = *(unsigned __int8 *)(v0 + 48);
          }
          if (v9 == 2 && *(unsigned char *)(v0 + 16) == 2)
          {
            *(unsigned char *)(v0 + 48) = 3;
            ChannelHandlerContext.close(mode:promise:)(2, 0);
          }
          break;
        default:
          __break(1u);
          goto LABEL_16;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(v0 + 16) != 2)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x100031590);
    }
    *(unsigned char *)(v0 + 16) = 1;
  }
  ChannelHandlerContext.fireChannelRead(_:)();
  return sub_10003C488(v2, v4, v6, v7);
}

uint64_t sub_1000315A0()
{
  if ((*(unsigned char *)(v0 + 16) & 0xFE) == 2)
  {
    swift_errorRetain();
    sub_100019524(&qword_100309768);
    if (swift_dynamicCast()) {
      *(unsigned char *)(v0 + 16) = 0;
    }
  }
  return ChannelHandlerContext.fireErrorCaught(_:)();
}

uint64_t HTTPServerPipelineHandler.userInboundEventTriggered(context:event:)(uint64_t a1, uint64_t a2)
{
  sub_1000318C8(a2, (uint64_t)v17);
  if (swift_dynamicCast())
  {
    switch(*(unsigned char *)(v2 + 16))
    {
      case 1:
      case 3:
        *(unsigned char *)(v2 + 48) = 1;
        break;
      case 2:
        *(unsigned char *)(v2 + 48) = 3;
        sub_10003C9E8();
        swift_release();
        sub_10003C804();
        sub_10003CBEC((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v5 = *(void *)(v2 + 24);
        unint64_t v6 = *(void *)(v5 + 16);
        unint64_t v7 = v6 + 1;
        if (v6 >= *(void *)(v5 + 24) >> 1)
        {
          unint64_t v13 = *(void *)(v5 + 16);
          sub_100038FB8();
          unint64_t v6 = v13;
          uint64_t v5 = *(void *)(v2 + 24);
        }
        *(void *)(v5 + 16) = v7;
        sub_10003C248((uint64_t)v14, v5 + (v6 << 6) + 32, &qword_10030A1F0);
        *(void *)(v2 + 32) = 0;
        *(void *)(v2 + 40) = 0;
        swift_endAccess();
        ChannelHandlerContext.close(mode:promise:)(2, 0);
        break;
      default:
        *(unsigned char *)(v2 + 48) = 2;
        sub_10003C9E8();
        swift_release();
        sub_10003C804();
        sub_10003CBEC((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v3 = *(void *)(v2 + 24);
        unint64_t v4 = *(void *)(v3 + 16);
        if (v4 >= *(void *)(v3 + 24) >> 1)
        {
          sub_100038FB8();
          uint64_t v3 = *(void *)(v2 + 24);
        }
        *(void *)(v3 + 16) = v4 + 1;
        sub_10003C248((uint64_t)v14, v3 + (v4 << 6) + 32, &qword_10030A1F0);
        *(void *)(v2 + 32) = 0;
        *(void *)(v2 + 40) = 0;
        swift_endAccess();
        break;
    }
  }
  else
  {
    if (!swift_dynamicCast() || (v16 & 1) != 0 || *(unsigned char *)(v2 + 16)) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v9 = *(void *)(v2 + 32);
    uint64_t v10 = *(void *)(v2 + 40);
    BOOL v11 = __OFSUB__(v10, v9);
    uint64_t v12 = v10 - v9;
    if (v12 < 0 != v11) {
      v12 += *(void *)(*(void *)(v2 + 24) + 16);
    }
    if (v12 < 1)
    {
LABEL_7:
      ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
      char v15 = 2;
      swift_beginAccess();
      sub_1000312C4((uint64_t *)v14);
      swift_endAccess();
      sub_100031378((uint64_t)v14);
    }
  }
  return sub_10001C2EC((uint64_t)v17);
}

uint64_t sub_1000318C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t HTTPServerPipelineHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
  v5[0] = a2;
  swift_errorRetain();
  sub_100019524(&qword_100309768);
  if (!swift_dynamicCast() || *(unsigned char *)(v2 + 16)) {
    return sub_1000315A0();
  }
  LOBYTE(v5[0]) = v4;
  char v6 = 1;
  sub_10003C9E8();
  sub_1000312C4(v5);
  swift_endAccess();
  return sub_100031378((uint64_t)v5);
}

void HTTPServerPipelineHandler.write(context:data:promise:)()
{
  sub_10003C984();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100019524(&qword_10030A1F8);
  sub_10003320C();
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  unsigned __int8 v11 = v8;
  if (!HIBYTE(v8))
  {
    uint64_t v31 = v7;
    if (!*(unsigned char *)(v0 + 48))
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_18;
    }
    uint64_t v12 = *(unsigned int *)(v6 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1001D5270(v12, v10, v11);
    LOBYTE(v12) = v13;
    swift_bridgeObjectRelease();
    swift_release();
    if ((v12 & 1) == 0)
    {
LABEL_13:
      uint64_t v29 = v5;
      v26[0] = v9;
      v26[1] = v10;
      int v27 = v11;
      int v28 = 0;
      char v30 = 2;
      swift_retain();
      swift_bridgeObjectRetain();
      ChannelHandlerContext.write(_:promise:)((uint64_t)v26, v2);
      sub_10003908C((uint64_t)v26);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_19:
      sub_10003C8C8();
      return;
    }
    unsigned __int8 v14 = sub_10003C5F8();
    uint64_t v15 = sub_10003C5F8();
    __chkstk_darwin(v15, v16);
    uint64_t v17 = sub_10003A870(&v31);
    if (*(void *)(v31 + 16) < v17)
    {
      __break(1u);
    }
    else
    {
      sub_10003ABA4();
      if ((sub_1000304DC(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL) & 1) == 0)
      {
        uint64_t v10 = v31;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_9:
          unint64_t v18 = *(void *)(v10 + 16);
          unint64_t v19 = v18 + 1;
          if (v18 >= *(void *)(v10 + 24) >> 1)
          {
            sub_1000351AC();
            unint64_t v19 = v18 + 1;
            uint64_t v10 = v25;
          }
          *(void *)(v10 + 16) = v19;
          uint64_t v20 = (void *)(v10 + 32 * v18);
          v20[4] = 0x697463656E6E6F63;
          void v20[5] = 0xEA00000000006E6FLL;
          v20[6] = 0x65736F6C63;
          v20[7] = 0xE500000000000000;
          uint64_t v31 = v10;
          if (((sub_10003C5F8() | v15) | v14)) {
            unsigned __int8 v11 = 2;
          }
          goto LABEL_13;
        }
LABEL_30:
        sub_1000351AC();
        uint64_t v10 = v24;
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
  if (HIBYTE(v8) == 1)
  {
    sub_100039008(v6, v7, v8, 1);
LABEL_18:
    ChannelHandlerContext.write(_:promise:)(v4, v2);
    goto LABEL_19;
  }
  sub_100039008(v6, v7, v8, 2);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
      if (!*(unsigned char *)(v0 + 16)) {
        goto LABEL_20;
      }
      goto LABEL_16;
    case 2:
LABEL_20:
      *(unsigned char *)(v0 + 48) = 3;
      sub_10003CBD8();
      sub_100032844();
      ChannelHandlerContext.write(_:promise:)(v4, v21);
      swift_retain_n();
      sub_10003CBD8();
      sub_100120A9C();
      swift_release();
      swift_release();
      sub_100031E30(v2);
      swift_release();
      break;
    default:
LABEL_16:
      ChannelHandlerContext.write(_:promise:)(v4, v2);
      break;
  }
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) != 1)
    {
      __break(1u);
      JUMPOUT(0x100031DC8);
    }
    char v22 = 3;
  }
  else
  {
    char v22 = 2;
  }
  *(unsigned char *)(v0 + 16) = v22;
  sub_100031F8C();
  sub_10003C8C8();
  sub_100032430();
}

uint64_t sub_100031DD8()
{
  sub_100032844();
  uint64_t v1 = v0;
  swift_retain();
  ChannelHandlerContext.close(mode:promise:)(2, v1);
  swift_release();
  return v1;
}

uint64_t sub_100031E30(uint64_t result)
{
  if (result)
  {
    swift_retain_n();
    swift_retain();
    sub_10012DE30();
    return swift_release();
  }
  return result;
}

uint64_t sub_100031EA4(uint64_t result)
{
  if (result)
  {
    swift_retain_n();
    swift_retain();
    sub_10012FA30();
    return swift_release();
  }
  return result;
}

uint64_t sub_100031F18(uint64_t result)
{
  if (result)
  {
    swift_retain_n();
    swift_retain();
    sub_100130818();
    return swift_release();
  }
  return result;
}

uint64_t sub_100031F8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 24);
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 16))
  {
    char v3 = 0;
    do
    {
      unint64_t v4 = *(void *)(v1 + 32);
      if (v4 == *(void *)(v1 + 40)) {
        break;
      }
      if ((v4 & 0x8000000000000000) != 0 || HIDWORD(v4)) {
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v1 + 24);
      if (v4 >= *(void *)(v5 + 16))
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      sub_10003C170(v5 + (v4 << 6) + 32, (uint64_t)&v23, &qword_10030A1F0);
      if (v26 == 255) {
        goto LABEL_44;
      }
      sub_10003AC98(&v23, &v27);
      sub_10003AC98(&v27, &v30);
      swift_beginAccess();
      unint64_t v6 = *(void *)(v1 + 32);
      if (v6 == *(void *)(v1 + 40)) {
        goto LABEL_38;
      }
      if ((v6 & 0x8000000000000000) != 0 || HIDWORD(v6)) {
        goto LABEL_46;
      }
      uint64_t v7 = *(void *)(v1 + 24);
      if (v6 >= *(void *)(v7 + 16)) {
        goto LABEL_39;
      }
      sub_10003C170(v7 + (v6 << 6) + 32, (uint64_t)&v27, &qword_10030A1F0);
      if (v29[25] == 255) {
        goto LABEL_45;
      }
      sub_10003C3FC((uint64_t)&v27, &qword_10030A1F0);
      uint64_t v8 = *(void *)(v1 + 24);
      unint64_t v9 = *(void *)(v1 + 32);
      uint64_t v10 = *(void *)(v1 + 40);
      BOOL v11 = v10 < (uint64_t)v9;
      uint64_t v12 = v10 - v9;
      if (v11) {
        v12 += *(void *)(v8 + 16);
      }
      if (v12 < 1) {
        goto LABEL_40;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v2 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10011FD4C();
        uint64_t v8 = v14;
      }
      long long v28 = 0u;
      memset(v29, 0, 24);
      long long v27 = 0u;
      *(_WORD *)&v29[24] = -256;
      void *v2 = v8;
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_41;
      }
      if (v9 >= *(void *)(v8 + 16)) {
        goto LABEL_42;
      }
      sub_10003C384((uint64_t)&v27, v8 + (v9 << 6) + 32, &qword_10030A1F0);
      *(void *)(v1 + 32) = (*(void *)(*(void *)(v1 + 24) + 16) - 1) & (v9 + 1);
      swift_endAccess();
      sub_10003C450((uint64_t *)&v30, (uint64_t)&v27);
      if (v29[25])
      {
        if (v29[25] == 1)
        {
          char v15 = v27;
          sub_10003ACB8();
          swift_allocError();
          unsigned char *v16 = v15;
          sub_1000315A0();
          sub_100031378((uint64_t)&v30);
          swift_errorRelease();
        }
        else
        {
          *(unsigned char *)(v1 + 17) = 0;
          *((void *)&v24 + 1) = &type metadata for ChannelEvent;
          LOBYTE(v23) = 0;
          ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
          sub_100031378((uint64_t)&v30);
          sub_10001C2EC((uint64_t)&v23);
        }
      }
      else
      {
        long long v23 = v27;
        long long v24 = v28;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v29;
        *(_OWORD *)&v25[9] = *(_OWORD *)&v29[9];
        sub_1000313A8();
        sub_10003908C((uint64_t)&v23);
        sub_100031378((uint64_t)&v30);
        char v3 = 1;
      }
    }
    while (*(unsigned char *)(v1 + 16));
    if (v3) {
      ChannelHandlerContext.fireChannelReadComplete()();
    }
  }
  uint64_t result = swift_beginAccess();
  if (*(void *)(v1 + 32) != *(void *)(v1 + 40))
  {
    uint64_t v18 = *(void *)(v1 + 24);
    uint64_t v19 = sub_100032984(v18, *(void *)(v1 + 32));
    sub_100032A04((_OWORD *)(v19 & 0x1FFFFFFFFFFFFFFLL), v18, &v30);
    if (v35 != 2) {
      return sub_100031378((uint64_t)&v30);
    }
    if (v34) {
      return sub_100031378((uint64_t)&v30);
    }
    int8x16_t v20 = vorrq_s8(v32, v33);
    if (*(void *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | v31 | *((void *)&v30 + 1) | (unint64_t)v30)
    {
      return sub_100031378((uint64_t)&v30);
    }
    else
    {
      sub_100031378((uint64_t)&v30);
      swift_beginAccess();
      if (*(void *)(v1 + 32) == *(void *)(v1 + 40))
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        uint64_t result = sub_10024F660();
        __break(1u);
      }
      else
      {
        uint64_t v21 = *(void *)(v1 + 24);
        uint64_t v22 = sub_100032984(v21, *(void *)(v1 + 32));
        sub_100032A04((_OWORD *)(v22 & 0x1FFFFFFFFFFFFFFLL), v21, &v30);
        sub_100034184(1);
        swift_endAccess();
        sub_100031378((uint64_t)&v30);
        *(unsigned char *)(v1 + 17) = 0;
        v32.i64[0] = (uint64_t)&type metadata for ChannelEvent;
        LOBYTE(v30) = 0;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        return sub_10001C2EC((uint64_t)&v30);
      }
    }
  }
  return result;
}

void sub_100032430()
{
  if (v0[17] == 1 && v0[16] && (v0[48] & 0xFE) != 2)
  {
    v0[17] = 0;
    ChannelHandlerContext.read()();
  }
}

void HTTPServerPipelineHandler.read(context:)()
{
  if ((v0[48] & 0xFE) != 2)
  {
    if (v0[16]) {
      ChannelHandlerContext.read()();
    }
    else {
      v0[17] = 1;
    }
  }
}

void HTTPServerPipelineHandler.handlerRemoved(context:)()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 < 0) {
    goto LABEL_28;
  }
  if (HIDWORD(v1)) {
    goto LABEL_26;
  }
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  BOOL v20 = 1;
  swift_retain();
  if (v3 < 0) {
    goto LABEL_28;
  }
  if (HIDWORD(v3)) {
    goto LABEL_26;
  }
  if (v1 != v3)
  {
    LODWORD(v4) = v1;
    goto LABEL_9;
  }
  LODWORD(v4) = v1;
  if ((((v3 < v1) ^ v20) & 1) == 0)
  {
LABEL_9:
    while (1)
    {
      sub_10003CC90();
      if (v5) {
        break;
      }
      sub_10003C170(v2 + 32 + ((unint64_t)v4 << 6), (uint64_t)&v8, &qword_10030A1F0);
      if (v11 == 255) {
        goto LABEL_25;
      }
      sub_10003AC98(&v8, v12);
      sub_10003AC98(v12, &v15);
      uint64_t v4 = (*(void *)(v2 + 16) - 1) & (v4 + 1);
      if (HIDWORD(v4)) {
        goto LABEL_26;
      }
      BOOL v20 = v4 >= v1;
      sub_10003AC98(&v15, v12);
      if (v14)
      {
        if (v14 == 1)
        {
          char v6 = v12[0];
          sub_10003ACB8();
          swift_allocError();
          *uint64_t v7 = v6;
          ChannelHandlerContext.fireErrorCaught(_:)();
          swift_errorRelease();
        }
        else
        {
          *((void *)&v9 + 1) = &type metadata for ChannelEvent;
          LOBYTE(v8) = 0;
          ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
          sub_10001C2EC((uint64_t)&v8);
        }
      }
      else
      {
        long long v8 = v12[0];
        long long v9 = v12[1];
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v13;
        *(_OWORD *)&v10[9] = *(_OWORD *)&v13[9];
        ChannelHandlerContext.fireChannelRead(_:)();
        sub_10003908C((uint64_t)&v8);
      }
      if v4 == v3 && (((v3 < v1) ^ v20)) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_10003C4F8();
    sub_10003C6D8();
    while (1)
    {
      sub_10003C850();
      __break(1u);
LABEL_28:
      sub_10003C4F8();
      sub_10003C6E8();
    }
  }
LABEL_19:
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  __int16 v19 = -256;
  swift_release();
  if (*(unsigned __int8 *)(v0 + 48) - 1 <= 1)
  {
    *((void *)&v16 + 1) = &type metadata for ChannelShouldQuiesceEvent;
    ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
    sub_10001C2EC((uint64_t)&v15);
  }
  if (*(unsigned char *)(v0 + 17) == 1) {
    ChannelHandlerContext.read()();
  }
}

void HTTPServerPipelineHandler.channelInactive(context:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 24;
  sub_10003C9E8();
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  char v5 = (void *)(v1 + 32);
  uint64_t v6 = v4 - v3;
  if (v4 < v3) {
    v6 += *(void *)(*(void *)v2 + 16);
  }
  sub_100034184(v6);
  *char v5 = 0;
  v5[1] = 0;
  swift_endAccess();
  ChannelHandlerContext.fireChannelInactive()();
}

uint64_t HTTPServerPipelineHandler.deinit()
{
  swift_release();
  return v0;
}

uint64_t HTTPServerPipelineHandler.__deallocating_deinit()
{
  swift_release();
  return _swift_deallocClassInstance(v0, 51, 7);
}

void sub_100032844()
{
  sub_10003C7F0();
  sub_10003C9AC();
  uint64_t ObjectType = swift_getObjectType();
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for () + 8);
  sub_10003C8E0();
  sub_10003C780();
}

uint64_t sub_1000328A8()
{
  sub_10003C9AC();
  uint64_t ObjectType = swift_getObjectType();
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for () + 8);
  return sub_10004A268(v3, v2, v1, v0);
}

void sub_100032910()
{
  sub_10003C7F0();
  sub_10003C9AC();
  EmbeddedChannel.eventLoop.getter();
  uint64_t ObjectType = swift_getObjectType();
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for ()[8]);
  sub_10003C8E0();
  swift_unknownObjectRelease();
  sub_10003C780();
}

uint64_t sub_100032984(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    sub_10003C6E8();
  }
  else
  {
    if (!HIDWORD(a2)) {
      return a2 | 0x1FFFFFF00000000;
    }
    sub_10003C4F8();
    sub_10003C6D8();
  }
  uint64_t result = sub_10003C850();
  __break(1u);
  return result;
}

_OWORD *sub_100032A04@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (_OWORD *)sub_10003C170(a2 + ((unint64_t)result << 6) + 32, (uint64_t)v4, &qword_10030A1F0);
    if (v5 != 255) {
      return sub_10003AC98(v4, a3);
    }
  }
  __break(1u);
  return result;
}

void sub_100032A74()
{
  sub_10003CAEC();
  if (v2)
  {
    __break(1u);
  }
  else if (*(void *)(v0 + 24 * v1 + 32))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return;
  }
  __break(1u);
}

void sub_100032ADC()
{
  sub_10003CAEC();
  if (v2)
  {
    __break(1u);
  }
  else if (*(void *)(v0 + 16 * v1 + 32))
  {
    swift_retain();
    return;
  }
  __break(1u);
}

void sub_100032B28(_OWORD *a1@<X8>)
{
  sub_10003CAEC();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    sub_10003C170(v2 + (v3 << 6) + 32, (uint64_t)v6, &qword_10030A508);
    if (v7[24] != 255)
    {
      long long v5 = v6[1];
      *a1 = v6[0];
      a1[1] = v5;
      a1[2] = *(_OWORD *)v7;
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)&v7[9];
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100032B9C()
{
  sub_10003CB90();
  unint64_t v10 = v2;
  unint64_t v11 = v3;
  v9[2] = &v10;
  unsigned __int8 v6 = sub_1001D5944((void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_10003C3CC, (uint64_t)v9, v4, v5);
  if ((v6 & 0xFE) == 2) {
    char v7 = sub_1001D60B0(v10, v11, v1, v0);
  }
  else {
    char v7 = v6 & 1;
  }
  return v7 & 1;
}

uint64_t sub_100032C20()
{
  sub_10003B8AC(v0, (uint64_t)&v5);
  if (!v8)
  {
    sub_10001B070();
    return 0;
  }
  if (v8 == 1)
  {
    uint64_t v1 = v6;
    uint64_t v2 = v7;
    swift_release();
    swift_release();
    sub_10003B918(v1, v2);
    return 0;
  }
  sub_10003B908(&v5, &v4);
  type metadata accessor for SocketChannel(0);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_100032CF8()
{
  sub_10003B8AC(v0, (uint64_t)&v9);
  if (v16)
  {
    if (v16 == 1)
    {
      long long v2 = v9;
      uint64_t v3 = v10;
      int v4 = v11;
      __int16 v5 = v12;
      char v6 = v13;
      long long v7 = v14;
      uint64_t v8 = v15;
      sub_100019524(&qword_10030A530);
      sub_100019524(&qword_10030A528);
    }
    else
    {
      sub_10003B908(&v9, &v2);
      sub_100019524(&qword_10030A528);
    }
  }
  else
  {
    long long v2 = v9;
    BYTE6(v3) = BYTE6(v10);
    WORD2(v3) = WORD2(v10);
    LODWORD(v3) = v10;
    sub_100019524(&qword_10030A528);
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  return v17;
}

uint64_t sub_100032E28(uint64_t *a1)
{
  sub_10003B8AC(v1, (uint64_t)&v7);
  if (!v10)
  {
    sub_10001B070();
    return 0;
  }
  if (v10 == 1)
  {
    uint64_t v3 = v8;
    uint64_t v4 = v9;
    swift_release();
    swift_release();
    sub_10003B918(v3, v4);
    return 0;
  }
  sub_10003B908(&v7, &v6);
  sub_100019524(a1);
  if (swift_dynamicCast()) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_100032F1C@<X0>(_OWORD *a1@<X8>)
{
  sub_10003B8AC(v1, (uint64_t)&v4);
  if (v5)
  {
    if (v5 != 1) {
      return (uint64_t)sub_10003B908(&v4, a1);
    }
    sub_100019524(&qword_10030A530);
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void sub_10003301C()
{
}

uint64_t sub_100033028()
{
  sub_10024FCD0();
  sub_10003C56C();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_10003C744();
  __chkstk_darwin(v5, v6);
  sub_10003CA4C();
  uint64_t result = sub_100032C20();
  if (!result)
  {
    sub_100030CE8(v0, (uint64_t)v15);
    sub_10003CC24();
    long long v14 = v11;
    sub_10003CB28((uint64_t)"tried to decode as type ");
    v16._countAndFlagsBits = 0x684374656B636F53;
    v16._object = (void *)0xED00006C656E6E61;
    sub_10024E800(v16);
    sub_10003C6AC();
    __int16 v12 = &type metadata for NIOAny._NIOAny;
    *(void *)&long long v11 = sub_10003CC0C();
    sub_10003B8AC((uint64_t)v15, v11 + 16);
    sub_10024FC80();
    sub_10024FCC0();
    uint64_t v8 = *(void (**)(uint64_t))(v2 + 8);
    sub_10003C99C();
    v8(v9);
    sub_10009A190(&v11);
    swift_release();
    if (!v13) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_10024FC80();
    sub_10024FC90();
    sub_10003C99C();
    v8(v10);
    v17._countAndFlagsBits = sub_10003CC6C();
    sub_10024E800(v17);
    swift_bridgeObjectRelease();
    sub_10003C638();
    sub_10024F5C0();
    sub_10003C83C();
    sub_10003C868();
    sub_10003CBCC();
  }
  return result;
}

void sub_100033200()
{
}

void sub_10003320C()
{
  sub_10003C7F0();
  uint64_t v4 = v3;
  sub_10024FCD0();
  sub_10003C56C();
  __chkstk_darwin(v5, v6);
  sub_10003C744();
  __chkstk_darwin(v7, v8);
  sub_10003CA4C();
  sub_100032E28(v4);
  if (HIBYTE(v9) == 255)
  {
    sub_100030CE8(v1, (uint64_t)v17);
    *((void *)&v12 + 1) = 0xE000000000000000;
    sub_10024F330(56);
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    v18._object = (void *)0x800000010027A660;
    v18._countAndFlagsBits = 0xD000000000000018;
    sub_10024E800(v18);
    v19._countAndFlagsBits = sub_10024FDC0();
    object = (void (*)(uint64_t))v19._object;
    sub_10024E800(v19);
    swift_bridgeObjectRelease();
    sub_10003C6AC();
    uint64_t v13 = &type metadata for NIOAny._NIOAny;
    *(void *)&long long v12 = sub_10003CC0C();
    sub_10003B8AC((uint64_t)v17, v12 + 16);
    sub_10024FC80();
    sub_10024FCC0();
    uint64_t v11 = sub_10003CC58();
    object(v11);
    sub_10009A190(&v12);
    swift_release();
    if (!v14) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_10024FC80();
    sub_10024FC90();
    ((void (*)(uint64_t, uint64_t))object)(v2, v0);
    v20._countAndFlagsBits = sub_10003CC6C();
    sub_10024E800(v20);
    swift_bridgeObjectRelease();
    sub_10003C638();
    sub_10024F5C0();
    sub_10003C83C();
    sub_10003C868();
    sub_10003CBCC();
  }
  sub_10003C780();
}

void sub_100033418()
{
}

void sub_100033424()
{
}

uint64_t sub_100033430()
{
  sub_10024FCD0();
  sub_10003C56C();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_10003C744();
  __chkstk_darwin(v5, v6);
  sub_10003CA4C();
  uint64_t result = sub_100032CF8();
  if (!result)
  {
    sub_100030CE8(v0, (uint64_t)v15);
    sub_10003CC24();
    long long v14 = v11;
    sub_10003CB28((uint64_t)"tried to decode as type ");
    v16._countAndFlagsBits = 0x6C656E6E616843;
    v16._object = (void *)0xE700000000000000;
    sub_10024E800(v16);
    sub_10003C6AC();
    long long v12 = &type metadata for NIOAny._NIOAny;
    *(void *)&long long v11 = sub_10003CC0C();
    sub_10003B8AC((uint64_t)v15, v11 + 16);
    sub_10024FC80();
    sub_10024FCC0();
    uint64_t v8 = *(void (**)(uint64_t))(v2 + 8);
    sub_10003C99C();
    v8(v9);
    sub_10009A190(&v11);
    swift_release();
    if (!v13) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_10024FC80();
    sub_10024FC90();
    sub_10003C99C();
    v8(v10);
    v17._countAndFlagsBits = sub_10003CC6C();
    sub_10024E800(v17);
    swift_bridgeObjectRelease();
    sub_10003C638();
    sub_10024F5C0();
    sub_10003C83C();
    sub_10003C868();
    sub_10003CBCC();
  }
  return result;
}

void sub_1000335FC()
{
  sub_10003C984();
  uint64_t v4 = v3;
  sub_10024FCD0();
  sub_10003C56C();
  __chkstk_darwin(v5, v6);
  sub_10003C744();
  __chkstk_darwin(v7, v8);
  sub_10003CA4C();
  sub_10003B8AC(v1, (uint64_t)&v15);
  if (v19 != 2)
  {
    if (v19)
    {
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      swift_release();
      swift_release();
      sub_10003B918(v10, v11);
    }
    else
    {
      sub_10001B070();
    }
    sub_10003CAD0();
    goto LABEL_10;
  }
  sub_10003B908(&v15, &v14);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10003CAD0();
LABEL_10:
    sub_10003C3FC((uint64_t)v20, &qword_10030A508);
    sub_100030CE8(v1, (uint64_t)v20);
    *(void *)&long long v15 = 0;
    *((void *)&v15 + 1) = 0xE000000000000000;
    sub_10024F330(56);
    long long v14 = v15;
    v22._object = (void *)0x800000010027A660;
    v22._countAndFlagsBits = 0xD000000000000018;
    sub_10024E800(v22);
    v23._countAndFlagsBits = sub_10024FDC0();
    object = (void (*)(uint64_t))v23._object;
    sub_10024E800(v23);
    swift_bridgeObjectRelease();
    sub_10003C6AC();
    Swift::String v16 = &type metadata for NIOAny._NIOAny;
    *(void *)&long long v15 = sub_10003CC0C();
    sub_10003B8AC((uint64_t)v20, v15 + 16);
    sub_10024FC80();
    sub_10024FCC0();
    uint64_t v13 = sub_10003CC58();
    object(v13);
    sub_10009A190(&v15);
    swift_release();
    if (!v18) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_10024FC80();
    sub_10024FC90();
    ((void (*)(uint64_t, uint64_t))object)(v2, v0);
    v24._countAndFlagsBits = sub_10003CC6C();
    sub_10024E800(v24);
    swift_bridgeObjectRelease();
    sub_10003C638();
    sub_10024F5C0();
    sub_10003C83C();
    sub_10003C868();
    sub_10003CBCC();
  }
  if (v21[24] == 255) {
    goto LABEL_10;
  }
  long long v9 = v20[1];
  _OWORD *v4 = v20[0];
  v4[1] = v9;
  v4[2] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)&v21[9];
  sub_10003C8C8();
}

void *sub_1000338D8(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      sub_100019524(&qword_10030A550);
      uint64_t v4 = (void *)sub_10024F480();
      v4[2] = v2;
      uint64_t v5 = (uint64_t)(v4 + 4);
      do
      {
        sub_10003C170(v3, v5, &qword_10030A550);
        v5 += 72;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = &_swiftEmptyArrayStorage;
    }
    sub_10003C3FC(v3, &qword_10030A550);
    return v4;
  }
  return result;
}

void *sub_10003397C(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      sub_100019524(&qword_10030A508);
      uint64_t v4 = (void *)sub_10024F480();
      v4[2] = v2;
      uint64_t v5 = (uint64_t)(v4 + 4);
      do
      {
        sub_10003C170(v3, v5, &qword_10030A508);
        v5 += 64;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = &_swiftEmptyArrayStorage;
    }
    sub_10003C3FC(v3, &qword_10030A508);
    return v4;
  }
  return result;
}

void *sub_100033A20(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = (uint64_t)result;
    if (a5)
    {
      sub_100019524(&qword_10030A408);
      uint64_t v10 = (void *)sub_10024F480();
      uint64_t v11 = v10;
      v10[2] = a5;
      v10[4] = v9;
      v10[5] = a2;
      v10[6] = a3;
      v10[7] = a4;
      if (a5 != 1)
      {
        v10[8] = v9;
        v10[9] = a2;
        v10[10] = a3;
        v10[11] = a4;
        uint64_t v12 = a5 - 2;
        if (v12)
        {
          uint64_t v13 = v10 + 15;
          do
          {
            sub_10003BD24(v9, a2, a3, a4);
            *(v13 - 3) = v9;
            *(v13 - 2) = a2;
            *(v13 - 1) = a3;
            *uint64_t v13 = a4;
            v13 += 4;
            --v12;
          }
          while (v12);
        }
        sub_10003BD24(v9, a2, a3, a4);
      }
    }
    else
    {
      sub_10003BD68((uint64_t)result, a2, a3, a4);
      return _swiftEmptyArrayStorage;
    }
    return v11;
  }
  return result;
}

void *sub_100033B18(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      sub_100019524(&qword_10030A1F0);
      uint64_t v4 = (void *)sub_10024F480();
      v4[2] = v2;
      uint64_t v5 = (uint64_t)(v4 + 4);
      do
      {
        sub_10003C170(v3, v5, &qword_10030A1F0);
        v5 += 64;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = &_swiftEmptyArrayStorage;
    }
    sub_10003C3FC(v3, &qword_10030A1F0);
    return v4;
  }
  return result;
}

void *sub_100033BBC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (a4)
    {
      sub_100019524(&qword_10030A600);
      uint64_t v8 = sub_10024F480();
      uint64_t v9 = v8;
      *(void *)(v8 + 16) = a4;
      *(void *)(v8 + 32) = v5;
      *(void *)(v8 + 40) = a2;
      *(unsigned char *)(v8 + 54) = BYTE6(a3);
      *(_WORD *)(v8 + 52) = WORD2(a3);
      *(_DWORD *)(v8 + 48) = a3;
      if (a4 != 1)
      {
        *(void *)(v8 + 56) = v5;
        *(void *)(v8 + 64) = a2;
        *(_DWORD *)(v8 + 72) = a3;
        *(unsigned char *)(v8 + 78) = BYTE6(a3);
        *(_WORD *)(v8 + 76) = WORD2(a3);
        uint64_t v10 = a4 - 2;
        if (v10)
        {
          uint64_t v11 = v8 + 96;
          do
          {
            *(void *)(v11 - 16) = v5;
            *(void *)(v11 - 8) = a2;
            *(_DWORD *)uint64_t v11 = a3;
            *(unsigned char *)(v11 + 6) = BYTE6(a3);
            *(_WORD *)(v11 + 4) = WORD2(a3);
            swift_retain();
            v11 += 24;
            --v10;
          }
          while (v10);
        }
        swift_retain();
      }
    }
    else
    {
      swift_release();
      return _swiftEmptyArrayStorage;
    }
    return (void *)v9;
  }
  return result;
}

void *sub_100033CAC(void *result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = (uint64_t)result;
    if (a4)
    {
      sub_100019524(&qword_10030A570);
      uint64_t v8 = sub_10024F480();
      uint64_t v9 = v8;
      *(void *)(v8 + 16) = a4;
      *(void *)(v8 + 32) = v7;
      *(void *)(v8 + 40) = a2;
      *(unsigned char *)(v8 + 48) = a3;
      if (a4 != 1)
      {
        *(void *)(v8 + 56) = v7;
        *(void *)(v8 + 64) = a2;
        *(unsigned char *)(v8 + 72) = a3;
        uint64_t v10 = a4 - 2;
        if (v10)
        {
          uint64_t v11 = (unsigned char *)(v8 + 96);
          do
          {
            sub_10003C1B8(v7);
            *((void *)v11 - 2) = v7;
            *((void *)v11 - 1) = a2;
            *uint64_t v11 = a3;
            v11 += 24;
            --v10;
          }
          while (v10);
        }
        sub_10003C1B8(v7);
      }
    }
    else
    {
      sub_10003B934((uint64_t)result);
      return _swiftEmptyArrayStorage;
    }
    return (void *)v9;
  }
  return result;
}

void *sub_100033D88(void *result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = result;
    if (a2)
    {
      sub_100019524(&qword_10030A588);
      uint64_t v4 = (void *)sub_10024F480();
      v4[2] = a2;
      sub_10003C248((uint64_t)v3, (uint64_t)(v4 + 4), &qword_10030A588);
      if (a2 == 1) {
        return v4;
      }
      sub_10003C248((uint64_t)v3, (uint64_t)(v4 + 12), &qword_10030A588);
      uint64_t v5 = a2 - 2;
      if (a2 == 2)
      {
        uint64_t v6 = sub_10003C290;
      }
      else
      {
        uint64_t v7 = (uint64_t)(v4 + 20);
        do
        {
          uint64_t v6 = sub_10003C290;
          sub_10003C30C(v3, (void (*)(void, void, void, void, void, void, void, void))sub_10003C290);
          sub_10003C248((uint64_t)v3, v7, &qword_10030A588);
          v7 += 64;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      uint64_t v6 = sub_10003BC24;
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    sub_10003C30C(v3, (void (*)(void, void, void, void, void, void, void, void))v6);
    return v4;
  }
  __break(1u);
  return result;
}

void *sub_100033EB0(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (uint64_t)result;
    if (a3)
    {
      sub_100019524(&qword_10030A568);
      uint64_t v6 = (void *)sub_10024F480();
      uint64_t v7 = v6;
      _OWORD v6[2] = a3;
      v6[4] = v5;
      void v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = v5;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          uint64_t v9 = v6 + 9;
          do
          {
            sub_10003C360(v5);
            *(v9 - 1) = v5;
            *uint64_t v9 = a2;
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        sub_10003C360(v5);
      }
    }
    else
    {
      sub_10003C350((uint64_t)result);
      return _swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

void *sub_100033F74(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (uint64_t)result;
    if (a3)
    {
      sub_100019524(&qword_10030A5C8);
      uint64_t v6 = (void *)sub_10024F480();
      uint64_t v7 = v6;
      _OWORD v6[2] = a3;
      v6[4] = v5;
      void v6[5] = a2;
      uint64_t v8 = a3 - 1;
      if (v8)
      {
        uint64_t v9 = v6 + 7;
        do
        {
          sub_10003C360(v5);
          *(v9 - 1) = v5;
          *uint64_t v9 = a2;
          v9 += 2;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      sub_10003C350((uint64_t)result);
      return &_swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

void sub_100034020()
{
  sub_10003C7F0();
  sub_10003CA04();
  if (v5 != v6) {
    sub_10003CC84();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      sub_10003C780();
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011FCEC();
      uint64_t v2 = v7;
    }
    while ((v3 & 0x8000000000000000) == 0)
    {
      sub_10003CC90();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = (void *)(v2 + 32 + 24 * v3);
      swift_release();
      *(void *)((char *)v9 + 15) = 0;
      *uint64_t v9 = 0;
      v9[1] = 0;
      sub_10003CA5C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

void sub_1000340CC()
{
  sub_10003CA04();
  if (v5 != v6) {
    sub_10003CC84();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011FD1C();
      uint64_t v2 = v7;
    }
    while ((v3 & 0x8000000000000000) == 0)
    {
      sub_10003CC90();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = (uint64_t *)(v2 + 32 + (v3 << 6));
      sub_10003BC24(*v9, v9[1], v9[2], v9[3], v9[4], v9[5], v9[6]);
      *((_OWORD *)v9 + 2) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *(_OWORD *)uint64_t v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      sub_10003CA5C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

void sub_100034184(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  BOOL v6 = v5 < v4;
  uint64_t v7 = v5 - v4;
  if (v6) {
    v7 += *(void *)(v3 + 16);
  }
  if (v7 < a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (!a1)
    {
LABEL_12:
      v1[1] = v4;
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011FD4C();
      uint64_t v3 = v8;
    }
    while (1)
    {
      uint64_t v10 = 0;
      memset(v9, 0, sizeof(v9));
      __int16 v11 = -256;
      *uint64_t v1 = v3;
      if (v4 < 0) {
        break;
      }
      if ((unint64_t)v4 >= *(void *)(v3 + 16)) {
        goto LABEL_14;
      }
      sub_10003C384((uint64_t)v9, v3 + (v4 << 6) + 32, &qword_10030A1F0);
      uint64_t v3 = *v1;
      uint64_t v4 = (*(void *)(*v1 + 16) - 1) & (v4 + 1);
      if (!--v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
}

void sub_100034274()
{
  sub_10003C7F0();
  sub_10003CA04();
  if (v5 != v6) {
    sub_10003CC84();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      sub_10003C780();
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011FCFC();
      uint64_t v2 = v7;
    }
    while ((v3 & 0x8000000000000000) == 0)
    {
      sub_10003CC90();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = v2 + 32 + 24 * v3;
      sub_10003B934(*(void *)v9);
      *(unsigned char *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      sub_10003CA5C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

void sub_100034324(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  BOOL v6 = v5 < v4;
  uint64_t v7 = v5 - v4;
  if (v6) {
    sub_10003CC84();
  }
  if (v7 < a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (!a1)
    {
LABEL_12:
      v1[1] = v4;
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011FD0C();
      uint64_t v3 = v8;
    }
    while (1)
    {
      uint64_t v10 = 0;
      memset(v9, 0, sizeof(v9));
      char v11 = -1;
      *uint64_t v1 = v3;
      if (v4 < 0) {
        break;
      }
      if ((unint64_t)v4 >= *(void *)(v3 + 16)) {
        goto LABEL_14;
      }
      sub_10003C384((uint64_t)v9, v3 + (v4 << 6) + 32, &qword_10030A508);
      uint64_t v3 = *v1;
      uint64_t v4 = (*(void *)(*v1 + 16) - 1) & (v4 + 1);
      if (!--a1) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
}

#error "100034468: call analysis failed (funcsize=32)"

#error "1000344DC: call analysis failed (funcsize=31)"

#error "100034554: call analysis failed (funcsize=30)"

uint64_t sub_100034584()
{
  return sub_10003481C((uint64_t)&unk_10030A5E0, (uint64_t)sub_100036354, (uint64_t)sub_100037D14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100035CEC);
}

uint64_t sub_1000345CC()
{
  return sub_1000346A4((uint64_t)&unk_10030A440, (uint64_t)&_s6ParsedON, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100034E08);
}

uint64_t sub_1000345F4()
{
  return sub_1000346A4((uint64_t)&qword_10030A3C0, (uint64_t)&unk_10030A3C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000350DC);
}

uint64_t sub_10003461C()
{
  return sub_100034730((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000351AC);
}

uint64_t sub_100034634()
{
  return sub_10003481C((uint64_t)&unk_10030A388, (uint64_t)sub_100036958, (uint64_t)sub_1000380CC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100035334);
}

uint64_t sub_10003467C()
{
  return sub_1000346A4((uint64_t)&unk_10030A470, (uint64_t)&unk_1002EE650, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100034E08);
}

uint64_t sub_1000346A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v7;
  if (!result)
  {
    uint64_t result = a3(result, *(void *)(v7 + 16) + 1, 1, v7, a1, a2);
    *uint64_t v3 = result;
  }
  return result;
}

uint64_t sub_100034718()
{
  return sub_100034730((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100035A34);
}

uint64_t sub_100034730(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_10003478C()
{
  return sub_10003481C((uint64_t)&unk_10030A3D0, (uint64_t)sub_100037800, (uint64_t)sub_100037EA4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100035F24);
}

uint64_t sub_1000347D4()
{
  return sub_10003481C((uint64_t)&unk_10030A398, (uint64_t)sub_100037AE4, (uint64_t)sub_100037EA4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100035F24);
}

uint64_t sub_10003481C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v4 = v9;
  if (!result)
  {
    uint64_t result = a4(result, *(void *)(v9 + 16) + 1, 1, v9, a1, a2, a3);
    uint64_t *v4 = result;
  }
  return result;
}

void sub_100034898()
{
}

void sub_1000348E4()
{
}

void sub_10003490C()
{
}

void sub_100034934()
{
}

void sub_10003494C()
{
}

void sub_100034994()
{
}

void sub_1000349BC()
{
  sub_10003C9D4();
  if (!(v2 ^ v3 | v1))
  {
    BOOL v4 = sub_10003CC44();
    *uint64_t v0 = v5(v4);
  }
}

void sub_1000349F4()
{
}

void sub_100034A0C()
{
  sub_10003C9D4();
  if (!(v4 ^ v5 | v3)) {
    *uint64_t v0 = v1(v2 > 1);
  }
}

void sub_100034A48()
{
}

uint64_t sub_100034A90(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return sub_10024EAD0();
  }
  return result;
}

void sub_100034ABC()
{
}

void sub_100034B04()
{
  sub_10003C9D4();
  if (!(v2 ^ v3 | v1))
  {
    BOOL v4 = sub_10003CC44();
    *uint64_t v0 = v5(v4);
  }
}

void sub_100034B40()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A370);
    char v5 = (const void *)sub_10001B538();
    size_t v6 = j__malloc_size(v5);
    sub_10003C7E4((uint64_t)(v6 - 32) / 8);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_10003C7D8();
    sub_100037BD8(v7, v8, v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C6F8();
    sub_100036044(v10, v11, v12, v13);
  }
}

void sub_100034BF0()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_1003090E8);
    char v5 = (const void *)sub_10001B538();
    size_t v6 = j__malloc_size(v5);
    sub_10003C7E4((uint64_t)(v6 - 32) / 16);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_10003C7D8();
    sub_100038960(v7, v8, v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C6F8();
    sub_10003613C(v10, v11, v12, v13);
  }
}

void sub_100034CA0()
{
}

void sub_100034CD4()
{
}

void sub_100034D08()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A368);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)sub_10003C7D8();
    sub_100037DA8(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_10003644C(v9, v10, v11, v12);
  }
}

void sub_100034DAC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100034DF4()
{
}

void sub_100034E08()
{
  sub_10003C8B8();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C8A8();
  if (v1)
  {
    sub_100019524(v5);
    size_t v6 = (void *)sub_10003CB4C();
    sub_10003C95C(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_10003CB84();
    sub_100038188(v7, v8, v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C9C0();
    sub_100036B70(v10, v11, v12, v13);
  }
}

void sub_100034EA8()
{
}

void sub_100034EDC()
{
}

void sub_100034EF0()
{
}

void sub_100034F04()
{
}

void sub_100034F18()
{
  sub_10003C8B8();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C8A8();
  if (v1)
  {
    sub_100019524(v5);
    size_t v6 = (void *)sub_10003CB4C();
    sub_10003C95C(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_10003CB84();
    sub_100037E44(v7, v8, v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C9C0();
    sub_10003654C(v10, v11, v12, v13);
  }
}

void sub_100034FB8()
{
}

void sub_100034FEC()
{
  sub_10003C7F0();
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (void *)sub_10003CB68();
    sub_10003C910(v8);
  }
  if (v2)
  {
    uint64_t v9 = sub_10003C7B0();
    v1(v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C7C8();
    v0(v10);
  }
  sub_10003C780();
}

void sub_100035094()
{
}

void sub_1000350C8()
{
}

void sub_1000350DC()
{
  sub_10003C8B8();
  if (v3)
  {
    sub_10003C54C();
    if (v4 != v5)
    {
      sub_10003C58C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C8A8();
  if (v2)
  {
    sub_100019524(v6);
    uint64_t v7 = (void *)sub_10001B538();
    size_t v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 16);
  }
  if (v0)
  {
    uint64_t v9 = (char *)sub_10003CB84();
    sub_100038960(v9, v10, v11);
    sub_10003C668();
  }
  else
  {
    uint64_t v12 = sub_10003C9C0();
    sub_100036FA0(v12, v13);
  }
}

void sub_100035194()
{
}

void sub_1000351AC()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_100309300);
    char v5 = (const void *)sub_10001B538();
    size_t v6 = j__malloc_size(v5);
    sub_10003C7E4((uint64_t)(v6 - 32) / 32);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_10003C7D8();
    sub_10003867C(v7, v8, v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C6F8();
    sub_100037A10(v10, v11);
  }
}

void sub_10003525C()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A448);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)sub_10003C7D8();
    sub_100038030(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_100036838(v9, v10, v11, v12);
  }
}

void sub_100035300()
{
}

void sub_100035334()
{
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (const void *)sub_10001B538();
    size_t v9 = j__malloc_size(v8);
    sub_10003C720(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_10003C7B0();
    v1(v10);
    sub_10003C668();
  }
  else
  {
    uint64_t v11 = sub_10003C7C8();
    v0(v11);
  }
}

void sub_1000353EC()
{
  sub_10003C7F0();
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (void *)sub_10003CB68();
    sub_10003C910(v8);
  }
  if (v2)
  {
    uint64_t v9 = sub_10003C7B0();
    v1(v9);
    sub_10003C668();
  }
  else
  {
    uint64_t v10 = sub_10003C7C8();
    v0(v10);
  }
  sub_10003C780();
}

void sub_100035494()
{
}

void sub_1000354A8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000354F0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    sub_10003C54C();
    if (v11 != v12)
    {
      sub_10003C58C();
      if (v11)
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_10003C55C();
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v10 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v10;
  }
  if (!v14) {
    goto LABEL_17;
  }
  sub_100019524(a5);
  uint64_t v15 = a6(0);
  sub_10003C680(v15);
  uint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = (void *)sub_10003CA70();
  size_t v19 = j__malloc_size(v18);
  if (!v17 || (v19 - v6 == 0x8000000000000000 ? (BOOL v20 = v17 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_22:
    sub_10003C4F8();
    sub_10024F660();
    __break(1u);
    return;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v6) / v17);
LABEL_17:
  uint64_t v21 = *(void *)(a6(0) - 8);
  if (a1)
  {
    sub_1000384F8(a4 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v13);
    sub_10003C668();
  }
  else
  {
    sub_100036E98(0, v13);
  }
  sub_10002FD48();
}

void sub_1000356C0()
{
}

void sub_1000356F4()
{
  sub_10003C698();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    v9[2] = v3;
    _OWORD v9[3] = 2 * v10 - 64;
  }
  if (v2)
  {
    uint64_t v11 = sub_10003C7B0();
    v1(v11);
    sub_10003C668();
  }
  else
  {
    uint64_t v12 = sub_10003C7C8();
    v0(v12);
  }
}

void sub_1000357B0()
{
}

uint64_t sub_1000357E4()
{
  sub_10003C7BC();
  if (v3)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_10003C55C();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  if (v4 <= v7) {
    uint64_t v8 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100019524(&qword_10030A378);
  uint64_t v9 = sub_100019524(&qword_10030A380);
  sub_10003C680(v9);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = j__malloc_size(v14);
  if (!v11 || (v15 - v13 == 0x8000000000000000 ? (BOOL v16 = v11 == -1) : (BOOL v16 = 0), v16))
  {
LABEL_23:
    sub_10003C4F8();
    uint64_t result = sub_10024F660();
    __break(1u);
    return result;
  }
  sub_10003C7E4((uint64_t)(v15 - v13) / v11);
LABEL_18:
  uint64_t v17 = *(void *)(sub_100019524(&qword_10030A380) - 8);
  if (v1)
  {
    sub_100038284(v0 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v7);
    sub_10003C668();
  }
  else
  {
    uint64_t v18 = sub_10003C6F8();
    sub_100036C3C(v18, v19, v20, v21);
  }
  return (uint64_t)v14;
}

void sub_1000359B8()
{
}

void sub_1000359EC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100035A34()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A590);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    char v6 = (char *)sub_10003C7D8();
    sub_1000388FC(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_100037604(v9, v10);
  }
}

void sub_100035AD8()
{
}

void sub_100035AEC()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A4A8);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    char v6 = (char *)sub_10003C7D8();
    sub_1000385E4(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_100037070(v9, v10, v11, v12);
  }
}

void sub_100035B90()
{
}

void sub_100035BC4()
{
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (const void *)swift_allocObject();
    size_t v9 = j__malloc_size(v8);
    sub_10003C720(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_10003C7B0();
    v1(v10);
    sub_10003C668();
  }
  else
  {
    uint64_t v11 = sub_10003C7C8();
    v0(v11);
  }
}

void sub_100035C84()
{
}

void sub_100035CB8()
{
}

void sub_100035CEC()
{
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (const void *)sub_10001B538();
    size_t v9 = j__malloc_size(v8);
    sub_10003C720(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_10003C7B0();
    v1(v10);
    sub_10003C668();
  }
  else
  {
    uint64_t v11 = sub_10003C7C8();
    v0(v11);
  }
}

void sub_100035DA4()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A4B8);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    char v6 = (char *)sub_10003C7D8();
    sub_100038804(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_100037458(v9, v10, v11, v12);
  }
}

void sub_100035E48()
{
}

void sub_100035E80()
{
  sub_10003C7BC();
  if (v2)
  {
    sub_10003C54C();
    if (v3 != v4)
    {
      sub_10003C58C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v1)
  {
    sub_100019524(&qword_10030A5A8);
    char v5 = (void *)sub_10003C794();
    sub_10003C5B0(v5);
  }
  if (v0)
  {
    char v6 = (char *)sub_10003C7D8();
    sub_1000386D8(v6, v7, v8);
    sub_10003C668();
  }
  else
  {
    uint64_t v9 = sub_10003C6F8();
    sub_1000376E0(v9, v10, v11, v12);
  }
}

void sub_100035F24()
{
  sub_10003C698();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (const void *)sub_10001B538();
    size_t v9 = j__malloc_size(v8);
    sub_10003C720(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_10003C7B0();
    v1(v10);
    sub_10003C668();
  }
  else
  {
    uint64_t v11 = sub_10003C7C8();
    v0(v11);
  }
}

void sub_100035FDC()
{
}

void sub_100036010()
{
}

uint64_t sub_100036044(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_10003613C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036234(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100019524(&qword_10030A3E0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036354(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_10003644C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_10003654C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 48 * a1 + 32;
  unint64_t v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_100036618(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036718(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100019524(&qword_10030A4E8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036838(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_100019524(&qword_10030A450);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036958(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100019524(&qword_10030A390);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036A70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036B70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_100036C3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100019524(&qword_10030A380) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036DA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100036E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  sub_10003CB90();
  uint64_t v6 = v5;
  v7(0);
  sub_10003C820();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v13 = *(void *)(v11 + 72);
  unint64_t v14 = v12 + v13 * v6;
  unint64_t v15 = v3 + v13 * v4;
  if (v14 >= v15 || v14 + v13 * v4 <= v3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v15;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_100036FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  sub_10003CB90();
  unint64_t v7 = v6 + 16 * v5 + 32;
  unint64_t v8 = v3 + 16 * v2;
  if (v7 >= v8 || v7 + 16 * v2 <= v3)
  {
    sub_100019524(v4);
    sub_10003CA18();
    swift_bridgeObjectRelease();
    return v8;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_100037070(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037174(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

char *sub_10003726C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037360(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037458(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 136 * a1 + 32;
    unint64_t v6 = a3 + 136 * v4;
    if (v5 >= v6 || v5 + 136 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037558(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  sub_10003CAB4();
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v6 > (unint64_t)v4;
  }
  if (!v8)
  {
    memcpy(v4, v3, v5);
    swift_bridgeObjectRelease();
    return v2;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_100037604(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  sub_10003CB90();
  unint64_t v6 = v5 + 80 * v4 + 32;
  unint64_t v7 = v3 + 80 * v2;
  if (v6 >= v7 || v6 + 80 * v2 <= v3)
  {
    sub_100019524(&qword_10030A598);
    sub_10003CA18();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

uint64_t sub_1000376E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100019524(&qword_10030A5B0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_1000378F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100019524(&qword_10030A400);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_100037A10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 0)
  {
LABEL_9:
    sub_10003C4F8();
    sub_10003C770();
    goto LABEL_11;
  }
  sub_10003CB90();
  unint64_t v6 = v5 + 32 * v4 + 32;
  unint64_t v7 = v3 + 32 * v2;
  if (v6 >= v7 || v6 + 32 * v2 <= v3)
  {
    sub_100019524(&qword_10030A578);
    sub_10003CA18();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_10003C4F8();
  sub_10003C760();
LABEL_11:
  uint64_t result = sub_10003C598();
  __break(1u);
  return result;
}

char *sub_100037AE4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_10024F730();
  __break(1u);
  return result;
}

char *sub_100037BD8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_100037C70(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_100037D14(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_100037DA8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[80 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 80 * a2);
  }
  return __src;
}

char *sub_100037E44(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_100037EA4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100037F38(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_100037F9C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

char *sub_100038030(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

char *sub_1000380CC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_100038128(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_100038188(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_1000381E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[248 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 248 * a2);
  }
  return __src;
}

void sub_100038284(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t v8 = sub_10003C50C();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  sub_10003CB9C();
  if (v6 && (sub_100019524(v5), sub_100025FBC(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      uint64_t v8 = sub_10003C894();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    sub_100019524(v5);
    uint64_t v9 = sub_10003C894();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

char *sub_100038368(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[224 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 224 * a2);
  }
  return __src;
}

char *sub_100038400(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_10003845C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[72 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 72 * a2);
  }
  return __src;
}

void sub_1000384F8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t v8 = sub_10003C50C();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  sub_10003CB9C();
  if (v6 && (v5(0), sub_100025FBC(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      uint64_t v8 = sub_10003C894();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    v5(0);
    uint64_t v9 = sub_10003C894();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

char *sub_1000385E4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[112 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 112 * a2);
  }
  return __src;
}

char *sub_10003867C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_1000386D8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_100038774(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_100038804(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_10024F730();
    __break(1u);
  }
  else if (__dst != __src || &__src[136 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 136 * a2);
  }
  return __src;
}

char *sub_1000388A0(char *result, size_t a2, char *a3)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[a2] <= a3)
  {
    return (char *)sub_10003CBB4(a3, result, a2);
  }
  return result;
}

char *sub_1000388FC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[80 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

char *sub_100038960(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C4F8();
    uint64_t result = (char *)sub_10003C50C();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10003C530(a3, result);
  }
  return result;
}

void sub_1000389BC()
{
  sub_10003A250();
  *char v0 = v1;
}

void sub_100038A0C()
{
  sub_1000394C8();
  *char v0 = v1;
}

void sub_100038A48()
{
  sub_100039DB4();
  *char v0 = v1;
}

void sub_100038AAC()
{
  sub_100039570();
  *char v0 = v1;
}

void sub_100038AFC()
{
  sub_1000394C8();
  *char v0 = v1;
}

void sub_100038B38()
{
  sub_100039570();
  *char v0 = v1;
}

char *sub_100038B88(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003961C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100038BA8()
{
  sub_100039570();
  *char v0 = v1;
}

void sub_100038BF8()
{
  sub_100039570();
  *char v0 = v1;
}

void sub_100038C48()
{
  sub_100039FEC();
  *char v0 = v1;
}

void sub_100038C98()
{
  sub_100039570();
  *char v0 = v1;
}

void sub_100038CE8()
{
  sub_100039570();
  *char v0 = v1;
}

void sub_100038D38()
{
  sub_1000397D0();
  *char v0 = v1;
}

void sub_100038D58()
{
  sub_1000398AC();
  *char v0 = v1;
}

void sub_100038DA8()
{
  sub_10003A4B8();
  *char v0 = v1;
}

char *sub_100038DF8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100039968(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100038E18(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100039A54(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_100038E38()
{
  sub_100039C04();
  *char v0 = v1;
}

char *sub_100038E88(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100039CC8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100038EA8()
{
  sub_100039DB4();
  *char v0 = v1;
}

void sub_100038F0C()
{
  sub_100039C04();
  *char v0 = v1;
}

void sub_100038F5C()
{
  sub_10003A3F8();
  *char v0 = v1;
}

void sub_100038F98()
{
  sub_100039F10();
  *char v0 = v1;
}

void sub_100038FB8()
{
  sub_100039C04();
  *char v0 = v1;
}

uint64_t sub_100039008(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2)
  {
LABEL_5:
    return swift_bridgeObjectRelease();
  }
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_release();
    goto LABEL_5;
  }
  return sub_10001B070();
}

uint64_t sub_100039084()
{
  return sub_100031DD8();
}

uint64_t sub_10003908C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000390E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D99E8(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

void sub_1000390E8()
{
  sub_100039FEC();
  *char v0 = v1;
}

char *sub_100039138(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003A164(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100039158()
{
  sub_10003A250();
  *char v0 = v1;
}

char *sub_1000391A8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003A30C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000391C8()
{
  sub_1000398AC();
  *char v0 = v1;
}

void sub_100039218()
{
  sub_10003A3F8();
  *char v0 = v1;
}

void sub_100039254()
{
  sub_10003A4B8();
  *char v0 = v1;
}

char *sub_1000392A4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003A574(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1000392C4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003A660(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000392E4()
{
  sub_10003A4B8();
  *char v0 = v1;
}

void sub_100039334()
{
  sub_1000398AC();
  *char v0 = v1;
}

void sub_100039384()
{
  sub_10003A250();
  *char v0 = v1;
}

char *sub_1000393D4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003A738(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_1000393F4()
{
  sub_100039FEC();
  *char v0 = v1;
}

void sub_100039444()
{
  sub_100039C04();
  *char v0 = v1;
}

void sub_100039494()
{
}

void sub_1000394C8()
{
  sub_10003C8B8();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C8A8();
  if (v3)
  {
    sub_100019524(v7);
    uint64_t v8 = (void *)sub_10003CB4C();
    sub_10003C95C(v8);
  }
  uint64_t v9 = (char *)sub_10003CB84();
  if (v2)
  {
    sub_100038188(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v9);
  }
  swift_release();
}

void sub_100039570()
{
  sub_10003C7F0();
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (void *)sub_10003CB68();
    sub_10003C910(v9);
  }
  uint64_t v10 = sub_10003C7B0();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
  sub_10003C780();
}

char *sub_10003961C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A500);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100037EA4(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DD294((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void sub_100039700()
{
}

void sub_100039734()
{
}

void sub_100039768()
{
}

void sub_10003979C()
{
}

void sub_1000397D0()
{
  sub_10003C7BC();
  if (v3)
  {
    sub_10003C54C();
    if (v4 != v5)
    {
      sub_10003C58C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v2)
  {
    sub_100019524(&qword_10030A3F0);
    unint64_t v6 = (const void *)swift_allocObject();
    size_t v7 = j__malloc_size(v6);
    sub_10003C7E4((uint64_t)(v7 - 32) / 64);
  }
  uint64_t v8 = (char *)sub_10003C7D8();
  if (v1)
  {
    sub_100037F9C(v8, v9, v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_1001DD5A4((uint64_t)v8, v9);
  }
  swift_release();
}

void sub_10003988C()
{
}

void sub_1000398AC()
{
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (const void *)sub_10001B538();
    size_t v10 = j__malloc_size(v9);
    sub_10003C720(v10 - 32);
  }
  uint64_t v11 = sub_10003C7B0();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_100039968(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A4C0);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 248);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_1000381E8((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DD984();
  }
  swift_release();
  return v10;
}

size_t sub_100039A54(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100019524(&qword_10030A3A8);
  uint64_t v10 = *(void *)(sub_100019524(&qword_10030A3B0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100019524(&qword_10030A3B0) - 8);
  uint64_t v16 = a4 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (v5)
  {
    sub_100038284(v16, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DDA30(v16, v8);
  }
  swift_release();
  return (size_t)v13;
}

void sub_100039C04()
{
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_10003C720(v10 - 32);
  }
  uint64_t v11 = sub_10003C7B0();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_100039CC8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A4B0);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 224);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_100038368((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DDB9C();
  }
  swift_release();
  return v10;
}

void sub_100039DB4()
{
  sub_10003C984();
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  if (v11)
  {
    sub_10003C54C();
    if (v13 != v14)
    {
      sub_10003C58C();
      if (v13)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  else
  {
    uint64_t v12 = v1;
  }
  uint64_t v15 = *(void *)(v8 + 16);
  if (v12 <= v15) {
    uint64_t v16 = *(void *)(v8 + 16);
  }
  else {
    uint64_t v16 = v12;
  }
  if (!v16)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100019524(v2);
  uint64_t v17 = v6(0);
  sub_10003C680(v17);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (void *)sub_10003CA70();
  size_t v21 = j__malloc_size(v20);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v21 - v0 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_23;
  }
  _OWORD v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(v21 - v0) / v19);
LABEL_18:
  uint64_t v23 = *(void *)(v6(0) - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = v8 + v24;
  if (v10)
  {
    sub_1000384F8(v25, v15);
    *(void *)(v8 + 16) = 0;
  }
  else
  {
    v4(v25, v15, (char *)v20 + v24);
  }
  swift_release();
  sub_10003C8C8();
}

void sub_100039F10()
{
  sub_10003C7BC();
  if (v3)
  {
    sub_10003C54C();
    if (v4 != v5)
    {
      sub_10003C58C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v2)
  {
    sub_100019524(&qword_10030A540);
    unint64_t v6 = (void *)sub_10003C794();
    sub_10003C5B0(v6);
  }
  uint64_t v7 = (char *)sub_10003C7D8();
  if (v1)
  {
    sub_10003845C(v7, v8, v9);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_1001DDC48((uint64_t)v7, v8);
  }
  swift_release();
}

void sub_100039FB8()
{
}

void sub_100039FEC()
{
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    char v9 = (const void *)sub_10001B538();
    size_t v10 = j__malloc_size(v9);
    sub_10003C720(v10 - 32);
  }
  uint64_t v11 = sub_10003C7B0();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_10003A0A8()
{
  sub_10003C7BC();
  if (v4)
  {
    sub_10003C54C();
    if (v5 != v6)
    {
      sub_10003C58C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5E8();
  if (v3)
  {
    sub_100019524((uint64_t *)&unk_10030FD80);
    char v7 = (void *)sub_10001B538();
    size_t v8 = j__malloc_size(v7);
    v7[2] = v2;
    v7[3] = (2 * ((uint64_t)(v8 - 32) / 8)) | 1;
  }
  char v9 = (char *)sub_10003C7D8();
  if (v1)
  {
    sub_1000380CC(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_1001DDD14((uint64_t)v9, v10);
  }
  swift_release();
}

char *sub_10003A164(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A590);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000388FC(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DDD38((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void sub_10003A250()
{
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (const void *)sub_10001B538();
    size_t v10 = j__malloc_size(v9);
    sub_10003C720(v10 - 32);
  }
  uint64_t v11 = sub_10003C7B0();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_10003A30C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A4A8);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_1000385E4((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DDE10();
  }
  swift_release();
  return v10;
}

void sub_10003A3F8()
{
  sub_10003C8B8();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C8A8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (void *)sub_10001B538();
    size_t v10 = j__malloc_size(v9);
    v9[2] = v3;
    _OWORD v9[3] = 2 * ((uint64_t)(v10 - 32) / 32);
  }
  size_t v11 = (char *)sub_10003CB84();
  if (v2)
  {
    sub_10003867C(v11, v12, v13);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_10003A4B8()
{
  sub_10003C730();
  if (v5)
  {
    sub_10003C54C();
    if (v6 != v7)
    {
      sub_10003C58C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10003C55C();
    }
  }
  sub_10003C5D8();
  if (v4)
  {
    sub_100019524(v8);
    uint64_t v9 = (const void *)sub_10001B538();
    size_t v10 = j__malloc_size(v9);
    sub_10003C720(v10 - 32);
  }
  uint64_t v11 = sub_10003C7B0();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_10003A574(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524((uint64_t *)&unk_10030FDB0);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000386D8(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DE0CC((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

char *sub_10003A660(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A460);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_100038774((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DDEBC();
  }
  swift_release();
  return v10;
}

char *sub_10003A738(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100019524(&qword_10030A580);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[8 * v8] <= v12) {
      memmove(v10 + 32, v13, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    sub_1001DE0C8(a4 + 32, v8, v12);
  }
  swift_release();
  return v10;
}

void sub_10003A83C()
{
}

uint64_t sub_10003A870(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_10003CA98();
    char v7 = v6(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7) {
      break;
    }
    ++v4;
    v3 += 32;
    if (v2 == v4)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v1 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v9 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    unint64_t v10 = *(void *)(v1 + 16);
    while (v9 != v10)
    {
      if (v9 >= v10)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      size_t v11 = (void *)(v1 + v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_10003CA98();
      char v14 = v13(v12);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        if (v9 != v4)
        {
          if ((v4 & 0x8000000000000000) != 0) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v1 + 16);
          if (v4 >= v15) {
            goto LABEL_26;
          }
          if (v9 >= v15) {
            goto LABEL_27;
          }
          uint64_t v16 = (uint64_t *)(v1 + 32 + 32 * v4);
          uint64_t v17 = v16[3];
          uint64_t v24 = v16[2];
          uint64_t v25 = v16[1];
          uint64_t v18 = v11[9];
          uint64_t v28 = v11[8];
          uint64_t v19 = v11[11];
          uint64_t v26 = *v16;
          uint64_t v27 = v11[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v1 = sub_1001A8C00(v1);
          }
          unint64_t v20 = (void *)(v1 + 32 * v4);
          v20[4] = v28;
          void v20[5] = v18;
          v20[6] = v27;
          v20[7] = v19;
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v9 >= *(void *)(v1 + 16)) {
            goto LABEL_28;
          }
          size_t v21 = (void *)(v1 + v3);
          v21[8] = v26;
          v21[9] = v25;
          v21[10] = v24;
          v21[11] = v17;
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *a1 = v1;
        }
        if (__OFADD__(v4++, 1)) {
          goto LABEL_24;
        }
      }
      ++v9;
      unint64_t v10 = *(void *)(v1 + 16);
      v3 += 32;
    }
    return v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_10003AAB8()
{
  sub_10003C7F0();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_10003CA38();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_100034B40();
    uint64_t v0 = v11;
  }
  uint64_t v12 = (char *)(v0 + 32 + 8 * v8);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  sub_100037BD8((char *)(v0 + 32 + 8 * v2), v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v14, v10);
  uint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *uint64_t v1 = v0;
    sub_10003C780();
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_10003ABA4()
{
  sub_10003C7F0();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_10003CA38();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_1000351AC();
    uint64_t v0 = v11;
  }
  uint64_t v12 = (char *)(v0 + 32 + 32 * v8);
  sub_100019524(&qword_10030A578);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  sub_10003867C((char *)(v0 + 32 + 32 * v2), v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v14, v10);
  uint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *uint64_t v1 = v0;
    sub_10003C780();
    return;
  }
LABEL_20:
  __break(1u);
}

_OWORD *sub_10003AC98(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(long long *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

unint64_t sub_10003ACB8()
{
  unint64_t result = qword_10030A200;
  if (!qword_10030A200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A200);
  }
  return result;
}

uint64_t type metadata accessor for HTTPServerPipelineHandler()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for HTTPServerPipelineHandler.NextExpectedMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003ADF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.NextExpectedMessageType()
{
  return &type metadata for HTTPServerPipelineHandler.NextExpectedMessageType;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.LifecycleState()
{
  return &type metadata for HTTPServerPipelineHandler.LifecycleState;
}

uint64_t getEnumTagSinglePayload for OctaneIAPType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s25ASOctaneSupportXPCService25HTTPServerPipelineHandlerC15ConnectionStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003AF98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.ConnectionState()
{
  return &type metadata for HTTPServerPipelineHandler.ConnectionState;
}

uint64_t sub_10003AFD0()
{
  return swift_retain();
}

uint64_t destroy for HTTPServerPipelineHandler.BufferedEvent(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 57);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (!v2)
  {
    int v3 = *(unsigned __int8 *)(result + 56);
    if (v3 == 2)
    {
      return sub_10001C2EC(result);
    }
    else if (v3 == 1)
    {
      swift_release();
      unint64_t result = swift_release();
      if (*(unsigned char *)(v1 + 32) != 4 && (~*(void *)(v1 + 40) & 0xF000000000000007) != 0)
      {
        return swift_release();
      }
    }
    else if (!*(unsigned char *)(result + 56))
    {
      return sub_10001B070();
    }
  }
  return result;
}

uint64_t initializeWithCopy for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 57);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 57) = 1;
  }
  else if (v4)
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)a2 + 42);
  }
  else
  {
    int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 == 2)
    {
      uint64_t v10 = a2[3];
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      (**(void (***)(uint64_t, uint64_t *))(v10 - 8))(a1, a2);
    }
    else if (v5 == 1)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = a2[2];
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
      BOOL v7 = a2 + 4;
      uint64_t v8 = *((unsigned __int8 *)a2 + 32);
      swift_retain();
      swift_retain();
      if (v8 == 4)
      {
        *(_OWORD *)(a1 + 32) = *v7;
        *(void *)(a1 + 48) = a2[6];
      }
      else
      {
        *(unsigned char *)(a1 + 32) = v8;
        uint64_t v16 = a2[5];
        if ((~v16 & 0xF000000000000007) != 0)
        {
          uint64_t v17 = a2[6];
          *(void *)(a1 + 40) = v16;
          *(void *)(a1 + 48) = v17;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        }
      }
    }
    else
    {
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      int v13 = *((_DWORD *)a2 + 4);
      char v14 = *((unsigned char *)a2 + 22);
      __int16 v15 = *((_WORD *)a2 + 10);
      sub_10003AFD0();
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 22) = v14;
      *(_WORD *)(a1 + 20) = v15;
      *(_DWORD *)(a1 + 16) = v13;
    }
    *(unsigned char *)(a1 + 56) = v5;
    *(unsigned char *)(a1 + 57) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4)
    {
      int v11 = *(unsigned __int8 *)(a1 + 56);
      if (v11 == 2)
      {
        sub_10001C2EC(a1);
      }
      else if (v11 == 1)
      {
        swift_release();
        swift_release();
        if (*(unsigned char *)(a1 + 32) != 4 && (~*(void *)(a1 + 40) & 0xF000000000000007) != 0) {
          swift_release();
        }
      }
      else if (!*(unsigned char *)(a1 + 56))
      {
        sub_10001B070();
      }
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 57);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(unsigned char *)(a1 + 57) = 1;
    }
    else
    {
      if (!v5)
      {
        int v6 = *((unsigned __int8 *)a2 + 56);
        if (v6 == 2)
        {
          uint64_t v15 = a2[3];
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
          (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
        }
        else if (v6 == 1)
        {
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
          *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
          int v7 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
          *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
          uint64_t v8 = *((unsigned __int8 *)a2 + 32);
          swift_retain();
          swift_retain();
          if (v8 == 4)
          {
            long long v9 = (_OWORD *)(a1 + 32);
            long long v10 = *((_OWORD *)a2 + 2);
            *(void *)(a1 + 48) = a2[6];
          }
          else
          {
            *(unsigned char *)(a1 + 32) = v8;
            uint64_t v21 = a2[5];
            if ((~v21 & 0xF000000000000007) != 0)
            {
              *(void *)(a1 + 40) = v21;
              *(void *)(a1 + 48) = a2[6];
              swift_retain();
              goto LABEL_29;
            }
            long long v9 = (_OWORD *)(a1 + 40);
            long long v10 = *(_OWORD *)(a2 + 5);
          }
          *long long v9 = v10;
        }
        else
        {
          uint64_t v16 = *a2;
          uint64_t v17 = a2[1];
          int v20 = *((_DWORD *)a2 + 4);
          uint64_t v18 = a2 + 2;
          int v19 = v20;
          LOWORD(v20) = *((_WORD *)v18 + 2);
          LOBYTE(v18) = *((unsigned char *)v18 + 6);
          sub_10003AFD0();
          *(void *)a1 = v16;
          *(void *)(a1 + 8) = v17;
          *(unsigned char *)(a1 + 22) = (_BYTE)v18;
          *(_WORD *)(a1 + 20) = v20;
          *(_DWORD *)(a1 + 16) = v19;
        }
LABEL_29:
        *(unsigned char *)(a1 + 56) = v6;
        *(unsigned char *)(a1 + 57) = 0;
        return a1;
      }
      long long v12 = *(_OWORD *)a2;
      long long v13 = *((_OWORD *)a2 + 1);
      long long v14 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)a2 + 42);
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v14;
      *(_OWORD *)a1 = v12;
    }
  }
  return a1;
}

__n128 initializeWithTake for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4)
    {
      int v7 = *(unsigned __int8 *)(a1 + 56);
      if (v7 == 2)
      {
        sub_10001C2EC(a1);
      }
      else if (v7 == 1)
      {
        swift_release();
        swift_release();
        if (*(unsigned char *)(a1 + 32) != 4 && (~*(void *)(a1 + 40) & 0xF000000000000007) != 0) {
          swift_release();
        }
      }
      else if (!*(unsigned char *)(a1 + 56))
      {
        sub_10001B070();
      }
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(unsigned char *)(a1 + 57) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      if (v5)
      {
        *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
      }
      else
      {
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *(unsigned char *)(a1 + 57) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPServerPipelineHandler.BufferedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003B6B8(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_10003B6D4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.BufferedEvent()
{
  return &type metadata for HTTPServerPipelineHandler.BufferedEvent;
}

unint64_t sub_10003B714()
{
  unint64_t result = qword_10030A348;
  if (!qword_10030A348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A348);
  }
  return result;
}

unint64_t sub_10003B764()
{
  unint64_t result = qword_10030A350;
  if (!qword_10030A350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A350);
  }
  return result;
}

unint64_t sub_10003B7B4()
{
  unint64_t result = qword_10030A358;
  if (!qword_10030A358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A358);
  }
  return result;
}

uint64_t sub_10003B800()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    sub_10001C2EC(v0 + 16);
  }
  else if (v1 == 1)
  {
    swift_release();
    swift_release();
    if (*(unsigned char *)(v0 + 48) != 4 && (~*(void *)(v0 + 56) & 0xF000000000000007) != 0) {
      swift_release();
    }
  }
  else if (!*(unsigned char *)(v0 + 72))
  {
    sub_10001B070();
  }
  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_10003B8AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_10003B908(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003B918(uint64_t result, uint64_t a2)
{
  if (result != 4) {
    return sub_10002F2A0(a2);
  }
  return result;
}

uint64_t sub_10003B934(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003B974(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = result;
  uint64_t v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v8, v11))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v8 + v11 > *(void *)(v7 + 24) >> 1)
  {
    sub_1000353EC();
    uint64_t v7 = v14;
  }
  uint64_t v15 = v7 + 32 + 24 * v9;
  unint64_t result = swift_arrayDestroy();
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v16 = *(void *)(v7 + 16);
  if (__OFSUB__(v16, a2)) {
    goto LABEL_19;
  }
  unint64_t result = (uint64_t)sub_100038128((char *)(v7 + 32 + 24 * a2), v16 - a2, (char *)(v15 + 24));
  uint64_t v17 = *(void *)(v7 + 16);
  BOOL v18 = __OFADD__(v17, v11);
  uint64_t v19 = v17 + v11;
  if (!v18)
  {
    *(void *)(v7 + 16) = v19;
LABEL_13:
    *(void *)uint64_t v15 = a3;
    *(void *)(v15 + 8) = a4;
    *(unsigned char *)(v15 + 16) = a5;
    *unsigned int v5 = v7;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

void sub_10003BAD8()
{
  sub_10003C984();
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *v0;
  uint64_t v6 = *(void *)(*v0 + 16);
  if (v6 < v2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = v1;
  uint64_t v8 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = v3;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(v6, v11))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v6 + v11 > *(void *)(v5 + 24) >> 1)
  {
    sub_100034E08();
    uint64_t v5 = v12;
  }
  uint64_t v13 = v5 + 32 + 40 * v7;
  swift_arrayDestroy();
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  if (__OFSUB__(v14, v4)) {
    goto LABEL_22;
  }
  sub_100038188((char *)(v5 + 32 + 40 * v4), v14 - v4, (char *)(v13 + 40 * v10));
  uint64_t v15 = *(void *)(v5 + 16);
  BOOL v16 = __OFADD__(v15, v11);
  uint64_t v17 = v15 + v11;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(void *)(v5 + 16) = v17;
LABEL_13:
  if (!v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v5;
    sub_10003C8C8();
    return;
  }
  if (*(void *)(v9 + 16) == v10)
  {
    swift_arrayInitWithCopy();
    goto LABEL_16;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_10003BC24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return sub_10003B918(a6, a7);
  }
  return result;
}

uint64_t sub_10003BC9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10003BD08(v2, v3);
  return a1;
}

uint64_t sub_10003BD08(uint64_t result, uint64_t a2)
{
  if (result != 4) {
    return sub_10002F288(a2);
  }
  return result;
}

uint64_t sub_10003BD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_10003AFD0();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003BD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_10001B070();
    return swift_release();
  }
  return result;
}

void sub_10003BDAC()
{
  sub_10003C7F0();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_10003CA38();
  if (v6 != v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = v5 - v2;
  if (__OFSUB__(0, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = v3 - v8;
  if (__OFADD__(v3, v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v0 + 24) >> 1)
  {
    if (v3 <= v10) {
      uint64_t v12 = v3 + v9;
    }
    else {
      uint64_t v12 = v3;
    }
    sub_1000354F0(isUniquelyReferenced_nonNull_native, v12, 1, v0, &qword_10030A4A0, type metadata accessor for EventManager.Observer);
    uint64_t v0 = v13;
  }
  type metadata accessor for EventManager.Observer(0);
  sub_10003C820();
  unint64_t v15 = v0 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v17 = *(void *)(v16 + 72);
  swift_arrayDestroy();
  if (!v8) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v0 + 16);
  if (__OFSUB__(v18, v2)) {
    goto LABEL_22;
  }
  sub_1000384F8(v15 + v17 * v2, v18 - v2);
  uint64_t v19 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v19, v9);
  uint64_t v20 = v19 - v8;
  if (!v7)
  {
    *(void *)(v0 + 16) = v20;
LABEL_16:
    *uint64_t v1 = v0;
    sub_10003C780();
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_10003BF1C()
{
  sub_10003C984();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = v5;
    uint64_t v2 = v4;
    if (!(*v1 >> 62))
    {
      uint64_t v6 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10024F6F0();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v6 < v0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (__OFSUB__(v0, v2))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v3 = v2 - v0;
  if (__OFSUB__(0, v0 - v2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v1 >> 62))
  {
    uint64_t v7 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10024F6F0();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v8 = v7 + v3;
  if (__OFADD__(v7, v3))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v9 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_10024F390();
      swift_bridgeObjectRelease();
      *uint64_t v1 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    sub_10024F6F0();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v12 = (char *)(v11 + 32 + 8 * v2);
  type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask();
  swift_arrayDestroy();
  if (!v3) {
    goto LABEL_24;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10024F6F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)(v11 + 16);
  }
  if (__OFSUB__(v13, v0))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_1000380CC((char *)(v11 + 32 + 8 * v0), v13 - v0, v12);
  if (v9 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10024F6F0();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(v11 + 16);
LABEL_22:
  if (__OFADD__(v15, v3))
  {
    __break(1u);
    return result;
  }
  *(void *)(v11 + 16) = v15 + v3;
LABEL_24:
  sub_10003C8C8();
  return sub_10024EAC0();
}

uint64_t sub_10003C170(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10003CB0C(a1, a2, a3);
  sub_100025FBC();
  uint64_t v4 = sub_10003CAFC();
  v5(v4);
  return v3;
}

uint64_t sub_10003C1B8(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003C1F8(uint64_t a1, uint64_t a2)
{
  return sub_100034410(*(void *)a1, *(unsigned __int8 *)(a1 + 8), a2);
}

uint64_t sub_10003C20C(uint64_t a1, uint64_t a2)
{
  return sub_100034490(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2);
}

uint64_t sub_10003C220(uint64_t a1, uint64_t a2)
{
  return sub_10003450C(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2);
}

uint64_t sub_10003C234(uint64_t a1)
{
  return sub_10003C220(a1, v1);
}

uint64_t sub_10003C23C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_10003C248(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10003CB0C(a1, a2, a3);
  sub_100025FBC();
  uint64_t v4 = sub_10003CAFC();
  v5(v4);
  return v3;
}

uint64_t sub_10003C290(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return sub_10003BD08(a6, a7);
  }
  return result;
}

void *sub_10003C30C(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10003C350(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10003C360(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003C370(uint64_t a1)
{
  return sub_10003C20C(a1, v1);
}

uint64_t sub_10003C378(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_10003C350(a1);
  }
}

uint64_t sub_10003C384(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10003CB0C(a1, a2, a3);
  sub_100025FBC();
  uint64_t v4 = sub_10003CAFC();
  v5(v4);
  return v3;
}

uint64_t sub_10003C3CC@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1001DF074(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t sub_10003C3E8(uint64_t a1)
{
  return sub_10003C1F8(a1, v1);
}

uint64_t sub_10003C3F0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10003C3FC(uint64_t a1, uint64_t *a2)
{
  sub_100019524(a2);
  sub_100025FBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10003C450(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003C488(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2)
  {
LABEL_5:
    return swift_bridgeObjectRelease();
  }
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_release();
    goto LABEL_5;
  }
  return swift_release();
}

uint64_t sub_10003C50C()
{
  return sub_10024F730();
}

void *sub_10003C530@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10003C598()
{
  return sub_10024F730();
}

size_t sub_10003C5B0(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_10003C5F8()
{
  return sub_100032B9C();
}

void sub_10003C638()
{
  v1._countAndFlagsBits = 0x6F63206874697720;
  v1._object = (void *)0xEF2073746E65746ELL;
  sub_10024E800(v1);
}

uint64_t sub_10003C668()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003C680(uint64_t a1)
{
  return a1 - 8;
}

void sub_10003C6AC()
{
  v1._countAndFlagsBits = 0x756F662074756220;
  v1._object = (void *)0xEB0000000020646ELL;
  sub_10024E800(v1);
}

uint64_t sub_10003C6F8()
{
  return 0;
}

void sub_10003C708(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = (v1 - 1) & a1;
}

void sub_10003C720(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2 * (a1 / v1);
}

uint64_t sub_10003C794()
{
  return swift_allocObject();
}

uint64_t sub_10003C7B0()
{
  return v0 + 32;
}

uint64_t sub_10003C7C8()
{
  return 0;
}

uint64_t sub_10003C7D8()
{
  return v0 + 32;
}

void sub_10003C7E4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2 * a1;
}

double sub_10003C804()
{
  return 0.0;
}

uint64_t sub_10003C850()
{
  return sub_10024F660();
}

uint64_t sub_10003C868()
{
  return sub_10024F670();
}

uint64_t sub_10003C894()
{
  return v0;
}

uint64_t sub_10003C8E0()
{
  return EventLoop.makePromise<A>(of:file:line:)(v6, v3, v2, v1, v0, v5, v6, v4);
}

size_t sub_10003C910(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void sub_10003C938()
{
  v0[2] = (*(void *)(*v0 + 16) - 1) & (v0[2] + 1);
}

size_t sub_10003C95C(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_10003C9C0()
{
  return 0;
}

uint64_t sub_10003C9E8()
{
  return swift_beginAccess();
}

uint64_t sub_10003CA18()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_10003CA70()
{
  return swift_allocObject();
}

uint64_t sub_10003CA98()
{
  return v0;
}

double sub_10003CAD0()
{
  *(void *)(v0 - 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  *(unsigned char *)(v0 - 88) = -1;
  return result;
}

uint64_t sub_10003CAFC()
{
  return v0;
}

uint64_t sub_10003CB0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019524(a3);
}

void sub_10003CB28(uint64_t a1@<X8>)
{
  v2._countAndFlagsBits = 0xD000000000000018;
  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  sub_10024E800(v2);
}

uint64_t sub_10003CB4C()
{
  return swift_allocObject();
}

uint64_t sub_10003CB68()
{
  return swift_allocObject();
}

uint64_t sub_10003CB84()
{
  return v0 + 32;
}

void *sub_10003CBB4@<X0>(void *__dst@<X2>, const void *a2@<X1>, size_t a3@<X8>)
{
  return memmove(__dst, a2, a3);
}

void sub_10003CBCC()
{
}

uint64_t sub_10003CBD8()
{
  return v0;
}

void sub_10003CBEC(uint64_t a1@<X8>)
{
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  sub_100038FB8();
}

uint64_t sub_10003CC0C()
{
  return swift_allocObject();
}

void sub_10003CC24()
{
  *(void *)(v0 - 176) = 0;
  *(void *)(v0 - 168) = 0xE000000000000000;
  sub_10024F330(56);
}

BOOL sub_10003CC44()
{
  return v0 > 1;
}

uint64_t sub_10003CC58()
{
  return v0;
}

uint64_t sub_10003CC6C()
{
  return sub_10024FDC0();
}

uint64_t HTTPServerProtocolErrorHandler.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t HTTPServerProtocolErrorHandler.init()()
{
  uint64_t result = v0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

uint64_t HTTPServerProtocolErrorHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  swift_errorRetain();
  sub_100019524(&qword_100309768);
  if (swift_dynamicCast() && (*(unsigned char *)(v2 + 16) & 1) == 0)
  {
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v3 + 32) = 21;
    *(_DWORD *)(v3 + 40) = 65537;
    uint64_t v4 = sub_100019524(&qword_10030A1F8);
    uint64_t v6 = v3;
    *(void *)&long long v7 = &off_1002D6988;
    *((void *)&v7 + 1) = 2;
    uint64_t v8 = v4;
    char v9 = 2;
    swift_retain();
    ChannelHandlerContext.write(_:promise:)((uint64_t)&v6, 0);
    sub_10003908C((uint64_t)&v6);
    uint64_t v8 = v4;
    uint64_t v6 = 0;
    *(void *)&long long v7 = 0;
    *(void *)((char *)&v7 + 7) = 0;
    HIBYTE(v7) = 2;
    char v9 = 2;
    ChannelHandlerContext.writeAndFlush(_:promise:)((uint64_t)&v6, 0);
    swift_release();
    sub_10003908C((uint64_t)&v6);
  }
  return ChannelHandlerContext.fireErrorCaught(_:)();
}

void HTTPServerProtocolErrorHandler.write(context:data:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_100019524(&qword_10030A1F8);
  sub_100033424();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  unint64_t v13 = HIBYTE(v11);
  if (!HIBYTE(v11)) {
    goto LABEL_5;
  }
  if (v13 != 1)
  {
    if (*(unsigned char *)(v4 + 16))
    {
      *(unsigned char *)(v4 + 16) = 0;
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if ((*(unsigned char *)(v4 + 16) & 1) == 0)
  {
    __break(1u);
LABEL_5:
    if ((*(unsigned char *)(v4 + 16) & 1) == 0)
    {
      *(unsigned char *)(v4 + 16) = 1;
      goto LABEL_9;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
LABEL_9:
  ChannelHandlerContext.write(_:promise:)(a2, a3);
  sub_100039008(v8, v10, v12, v13);
}

uint64_t HTTPServerProtocolErrorHandler.deinit()
{
  return v0;
}

uint64_t HTTPServerProtocolErrorHandler.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 17, 7);
}

uint64_t type metadata accessor for HTTPServerProtocolErrorHandler()
{
  return self;
}

unint64_t sub_10003CF14()
{
  unint64_t result = qword_10030A728;
  if (!qword_10030A728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A728);
  }
  return result;
}

uint64_t sub_10003CF60()
{
  uint64_t v180 = sub_10024E490();
  sub_10001B550();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  int v181 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  char v185 = (char *)&v159 - v8;
  uint64_t v9 = sub_10024E450();
  sub_10001B550();
  uint64_t v183 = v10;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  int v182 = (char *)&v159 - v17;
  sub_10024E6F0();
  sub_10001B550();
  unint64_t v186 = v18;
  __chkstk_darwin(v19, v20);
  Swift::String v22 = (char *)&v159 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = 0x6E6F6973726576;
  unint64_t v190 = 0xE700000000000000;
  sub_10024F2E0();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  uint64_t v184 = v2;
  if (v194)
  {
    if (sub_10003FB2C())
    {
      uint64_t v23 = v189;
      unint64_t v24 = v190;
      goto LABEL_6;
    }
  }
  else
  {
    sub_10003F748((uint64_t)v193);
  }
  unint64_t v24 = 0xE300000000000000;
  uint64_t v23 = 3157553;
LABEL_6:
  uint64_t v187 = v23;
  strcpy((char *)v193, "adNetwork");
  WORD1(v193[1]) = 0;
  HIDWORD(v193[1]) = -385875968;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    int v25 = sub_10003FB2C();
    BOOL v26 = v25 == 0;
    if (v25) {
      unint64_t v27 = v189;
    }
    else {
      unint64_t v27 = 0;
    }
    if (v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v190;
    }
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    unint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v29 = sub_10003FBB0(v27, v28, 0);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  os_log_t v178 = v29;
  unsigned int v179 = (char *)v30;
  swift_bridgeObjectRelease();
  v193[0] = 0x6449707061;
  v193[1] = 0xE500000000000000;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    int v31 = sub_10003FCB8();
    if (v31) {
      uint64_t v32 = v189;
    }
    else {
      uint64_t v32 = 0;
    }
    char v33 = v31 ^ 1;
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    uint64_t v32 = 0;
    char v33 = 1;
  }
  unsigned int v177 = (uint8_t *)sub_10003FB4C(v32, v33, 3);
  strcpy((char *)v193, "transactionId");
  HIWORD(v193[1]) = -4864;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    int v35 = sub_10003FB2C();
    BOOL v36 = v35 == 0;
    if (v35) {
      unint64_t v37 = v189;
    }
    else {
      unint64_t v37 = 0;
    }
    if (v36) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v190;
    }
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    unint64_t v37 = 0;
    uint64_t v38 = 0;
  }
  unint64_t v165 = sub_10003FBB0(v37, v38, 6);
  uint64_t v175 = v39;
  uint64_t v164 = v9;
  swift_bridgeObjectRelease();
  strcpy((char *)v193, "campaignId");
  BYTE3(v193[1]) = 0;
  HIDWORD(v193[1]) = -369098752;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FCB8();
    sub_10003FC2C();
    sub_10003FD10(v40);
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    sub_10003FD1C((uint64_t)&v193[1]);
  }
  LODWORD(v172) = v41;
  v193[0] = 0xD000000000000010;
  v193[1] = 0x800000010027AAC0;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    unint64_t v169 = v43;
    if (v26) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v42;
    }
    uint64_t v173 = v44;
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    unint64_t v169 = 0;
    uint64_t v173 = 0;
  }
  strcpy((char *)v193, "sourceAppId");
  HIDWORD(v193[1]) = -352321536;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    sub_10003FD10(v45);
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    sub_10003FD1C((uint64_t)&v192);
  }
  int v168 = v46;
  strcpy((char *)v193, "sourceDomain");
  BYTE5(v193[1]) = 0;
  HIWORD(v193[1]) = -5120;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    uint64_t v159 = v48;
    if (v26) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = v47;
    }
    uint64_t v176 = v49;
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    uint64_t v159 = 0;
    uint64_t v176 = 0;
  }
  strcpy((char *)v193, "fidelityType");
  BYTE5(v193[1]) = 0;
  HIWORD(v193[1]) = -5120;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    sub_10003FD10(v50);
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    sub_10003FD1C((uint64_t)&v189);
  }
  LODWORD(v167) = v51;
  strcpy((char *)v193, "redownload");
  BYTE3(v193[1]) = 0;
  HIDWORD(v193[1]) = -369098752;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    unint64_t v170 = v52;
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    unint64_t v170 = 0;
  }
  v193[0] = 0x6E6957646964;
  v193[1] = 0xE600000000000000;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    unint64_t v162 = v54;
    if (v26) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v53;
    }
    uint64_t v174 = v55;
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    unint64_t v162 = 0;
    uint64_t v174 = 0;
  }
  v193[0] = 0xD000000000000015;
  v193[1] = 0x800000010027AAE0;
  sub_10003FC14();
  sub_10003FB68();
  sub_10003F6F4((uint64_t)&v191);
  if (v194)
  {
    sub_10003FB2C();
    sub_10003FC2C();
    sub_10003FD10(v56);
  }
  else
  {
    sub_10003F748((uint64_t)v193);
    sub_10003FD1C((uint64_t)&v188);
  }
  int v160 = v57;
  NSString v58 = sub_10024E6A0();
  uint64_t v59 = (char *)objc_msgSend(v58, "skan_version");

  if ((unint64_t)(v59 - 200) < 2)
  {
    sub_10003FCDC();
    sub_10003FC58();
    sub_10003FD60();
    sub_10003FB4C(v171, v172, 1);
    unint64_t v60 = sub_10003FB84();
    sub_10003FC70(v60);
    sub_10003FB4C((uint64_t)v166, v168, 4);
    uint64_t v61 = sub_10003FADC();
    uint64_t v69 = sub_10003F3F8(v61, v62, v63, v64, v65, v66, v67, v68, v154, (uint64_t)&OctaneXPCServiceDelegate.ivars);
LABEL_70:
    unint64_t v24 = v69;
    unint64_t v71 = v70;
LABEL_71:
    swift_bridgeObjectRelease();
LABEL_72:
    swift_bridgeObjectRelease();
    goto LABEL_91;
  }
  if (v59 == (char *)400)
  {
    unint64_t v72 = sub_10003FBB0(v169, v173, 2);
    uint64_t v95 = v94;
    unint64_t v172 = v72;
    swift_bridgeObjectRelease();
    unint64_t v96 = sub_10003FB84();
    uint64_t v104 = v103;
    uint64_t v173 = v96;
    swift_bridgeObjectRelease();
    uint64_t v171 = sub_10003FB4C(v163, v167, 7);
    unint64_t v169 = sub_10003FBB0(v162, v174, 9);
    unint64_t v170 = v137;
    swift_bridgeObjectRelease();
    unint64_t v71 = sub_10003FB4C(v161, v160, 10);
    uint64_t v167 = v104;
    uint64_t v174 = v95;
    if (!v176)
    {
      if (v168)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10003FD60();
        sub_10003FBFC();
        sub_10003FBE4();
        swift_bridgeObjectRelease();
        if (qword_100308DE0 != -1) {
          swift_once();
        }
        uint64_t v147 = sub_10024E1F0();
        sub_10001B0E8(v147, (uint64_t)qword_10034C0E0);
        int v148 = sub_10024E1D0();
        os_log_type_t v149 = sub_10024EE10();
        if (os_log_type_enabled(v148, v149))
        {
          BOOL v150 = (uint8_t *)sub_10003FD28();
          *(_WORD *)BOOL v150 = 0;
          _os_log_impl((void *)&_mh_execute_header, v148, v149, "SKAdNetwork signing failure: Source Domain or Source App ID is absent or of unexpected type", v150, 2u);
          sub_10003FBCC();
        }

        sub_10003CF14();
        sub_1000290D0();
        *int v151 = 5;
        swift_willThrow();
        return (uint64_t)v22;
      }
      unsigned int v191 = v166;
      uint64_t v159 = sub_10024F9E0();
      uint64_t v176 = v152;
    }
    sub_10003F220(v187, v24, (uint64_t)v178, (uint64_t)v179, v172, v174, (uint64_t)v177, v165, v175, v173, v167, v159, v176, v171, v169, v170);
    sub_10003FDA8();
    sub_10003FC58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  if (v59 == (char *)202)
  {
    sub_10003FCDC();
    sub_10003FC58();
    sub_10003FD60();
    sub_10003FB4C(v171, v172, 1);
    unint64_t v73 = sub_10003FB84();
    sub_10003FC70(v73);
    sub_10003FB4C((uint64_t)v166, v168, 4);
    sub_10003FB4C(v163, v167, 7);
    uint64_t v128 = sub_10003FADC();
    uint64_t v69 = sub_10003EEB0(v128, v129, v130, v131, v132, v133, v134, v135, v154, (uint64_t)&OctaneXPCServiceDelegate.ivars);
    goto LABEL_70;
  }
  if (v59 == (char *)300)
  {
    sub_10003FCDC();
    sub_10003FC58();
    sub_10003FB4C(v171, v172, 1);
    unint64_t v97 = sub_10003FB84();
    sub_10003FC70(v97);
    uint64_t v105 = sub_10003FB4C((uint64_t)v166, v168, 4);
    uint64_t v171 = sub_10003FB4C(v163, v167, 7);
    unint64_t v172 = v105;
    unint64_t v71 = v174;
    unint64_t v170 = sub_10003FBB0(v162, v174, 9);
    uint64_t v173 = v136;
    swift_bridgeObjectRelease();
    uint64_t v158 = v173;
    uint64_t v157 = v170;
    uint64_t v156 = v171;
    uint64_t v155 = v172;
    uint64_t v139 = sub_10003FADC();
    sub_10003F058(v139, v140, v141, v142, v143, v144, v145, v146, v153, (uint64_t)&OctaneXPCServiceDelegate.ivars, v155, v156, v157, v158);
    sub_10003FDA8();
    goto LABEL_71;
  }
  if (v59 != (char *)100)
  {
    sub_10003FBFC();
    sub_10003FBE4();
    swift_bridgeObjectRelease();
    sub_10003FCDC();
    sub_10003FC58();
    swift_bridgeObjectRelease();
LABEL_92:
    swift_bridgeObjectRelease();
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v90 = sub_10024E1F0();
    sub_10001B0E8(v90, (uint64_t)qword_10034C0E0);
    unint64_t v91 = sub_10024E1D0();
    os_log_type_t v92 = sub_10024EDF0();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)sub_10003FD28();
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "SKAdNetwork postback signing: Unable to compose digest.", v93, 2u);
      sub_10003FBCC();
    }

    return 0;
  }
  swift_bridgeObjectRelease();
  sub_10003FCDC();
  sub_10003FC58();
  swift_bridgeObjectRelease();
  sub_10003FD60();
  uint64_t v74 = sub_10003FB4C(v171, v172, 1);
  if ((v167 & 1) == 0)
  {
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v75 = sub_10024E1F0();
    sub_10001B0E8(v75, (uint64_t)qword_10034C0E0);
    uint64_t v76 = (void *)sub_10024E1D0();
    os_log_type_t v77 = sub_10024EDF0();
    if (sub_10003FCF4(v77))
    {
      *(_WORD *)sub_10003FD28() = 0;
      sub_10003FD40((void *)&_mh_execute_header, v78, v79, "SKAdNetwork signature verification: Found fidelity type specified for unsupported version");
      sub_10003FBCC();
    }
  }
  if ((v168 & 1) == 0)
  {
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v80 = sub_10024E1F0();
    sub_10001B0E8(v80, (uint64_t)qword_10034C0E0);
    uint64_t v81 = (void *)sub_10024E1D0();
    os_log_type_t v82 = sub_10024EDF0();
    if (sub_10003FCF4(v82))
    {
      *(_WORD *)sub_10003FD28() = 0;
      sub_10003FD40((void *)&_mh_execute_header, v83, v84, "SKAdNetwork signature verification: Found source app id specified for unsupported version");
      sub_10003FBCC();
    }
  }
  unint64_t v24 = sub_10003ED90((uint64_t)v178, (uint64_t)v179, v74, (uint64_t)v177, v165, v175);
  unint64_t v71 = v85;
LABEL_91:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10024E6E0();
  uint64_t v187 = v24;
  uint64_t v86 = sub_10024E6C0();
  unint64_t v88 = v87;
  sub_10003FDC8();
  v89();
  if (v88 >> 60 == 15) {
    goto LABEL_92;
  }
  unsigned int v179 = (char *)v86;
  unint64_t v186 = v88;
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v98 = sub_10024E1F0();
  uint64_t v99 = sub_10001B0E8(v98, (uint64_t)qword_10034C0E0);
  swift_bridgeObjectRetain();
  os_log_t v178 = v99;
  os_log_type_t v100 = sub_10024E1D0();
  os_log_type_t v101 = sub_10024EDF0();
  if (sub_10003FCF4(v101))
  {
    long long v102 = (uint8_t *)sub_10003FD90();
    unsigned int v191 = (char *)sub_10003FD78();
    *(_DWORD *)long long v102 = 136315138;
    unsigned int v177 = v102 + 4;
    swift_bridgeObjectRetain();
    v193[0] = sub_1000F3F3C(v187, v71, (uint64_t *)&v191);
    sub_10024F100();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v86, "Composed digest: %s", v102, 0xCu);
    swift_arrayDestroy();
    sub_10003FBCC();
    sub_10003FBCC();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v106 = v164;
  uint64_t v107 = v184;
  uint64_t v108 = v185;
  uint64_t result = sub_10024DE60();
  if (v109 >> 60 != 15)
  {
    unsigned int v191 = (char *)result;
    unint64_t v192 = v109;
    sub_10003F7A8();
    sub_10024E3F0();
    (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v182, v14, v106);
    unsigned int v191 = v179;
    unint64_t v192 = v186;
    sub_10003F860();
    uint64_t v110 = v181;
    sub_10024E440();
    uint64_t v111 = v180;
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v108, v110, v180);
    uint64_t v112 = sub_10024E460();
    unint64_t v114 = v113;
    Swift::String v22 = (char *)sub_10024DF00(0);
    unint64_t v116 = v115;
    sub_10003F808(v112, v114);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    Swift::Int v117 = sub_10024E1D0();
    os_log_type_t v118 = sub_10024EDF0();
    int v119 = v118;
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v120 = swift_slowAlloc();
      LODWORD(v187) = v119;
      uint64_t v121 = v120;
      int v181 = (char *)swift_slowAlloc();
      unsigned int v191 = v181;
      *(_DWORD *)uint64_t v121 = 136315394;
      swift_bridgeObjectRetain();
      v193[0] = sub_1000F3F3C((uint64_t)v22, v116, (uint64_t *)&v191);
      sub_10024F100();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v121 + 12) = 2080;
      unsigned int v177 = (uint8_t *)(v121 + 14);
      swift_bridgeObjectRetain();
      uint64_t v122 = sub_10024E500();
      os_log_t v178 = v117;
      uint64_t v123 = v122;
      unint64_t v125 = v124;
      swift_bridgeObjectRelease();
      v193[0] = sub_1000F3F3C(v123, v125, (uint64_t *)&v191);
      sub_10024F100();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v126 = v178;
      _os_log_impl((void *)&_mh_execute_header, v178, (os_log_type_t)v187, "Generated signature: %s from parameters: %s", (uint8_t *)v121, 0x16u);
      swift_arrayDestroy();
      sub_10003FBCC();
      sub_10003FBCC();
      sub_10003F7F4((uint64_t)v179, v186);

      sub_10003FDC8();
      v127();
      sub_10003FC38();
    }
    else
    {
      sub_10003F7F4((uint64_t)v179, v186);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v107 + 8))(v185, v111);
    }
    sub_10003FDC8();
    v138();
    return (uint64_t)v22;
  }
  __break(1u);
  return result;
}

unint64_t sub_10003E94C(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (a5)
    {
      a1 = a5;
    }
    else
    {
      LOBYTE(v16) = a3;
      sub_10003CF14();
      a4 = sub_10024FB80();
      a1 = v8;
    }
    uint64_t v9 = qword_100308DE0;
    swift_bridgeObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10024E1F0();
    sub_10001B0E8(v10, (uint64_t)qword_10034C0E0);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_10024E1D0();
    os_log_type_t v12 = sub_10024EE10();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000F3F3C(a4, a1, &v16);
      sub_10024F100();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_10003CF14();
    swift_allocError();
    unsigned char *v14 = a3;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_10003EB88(uint64_t a1, char a2, char a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    if (a5)
    {
      unint64_t v8 = a5;
    }
    else
    {
      LOBYTE(v17) = a3;
      sub_10003CF14();
      a4 = sub_10024FB80();
      unint64_t v8 = v9;
    }
    uint64_t v10 = qword_100308DE0;
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10024E1F0();
    sub_10001B0E8(v11, (uint64_t)qword_10034C0E0);
    swift_bridgeObjectRetain();
    os_log_type_t v12 = sub_10024E1D0();
    os_log_type_t v13 = sub_10024EE10();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)sub_10003FD90();
      uint64_t v17 = sub_10003FD78();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000F3F3C(a4, v8, &v17);
      sub_10024F100();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s", v14, 0xCu);
      swift_arrayDestroy();
      sub_10003FBCC();
      sub_10003FBCC();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_10003CF14();
    sub_1000290D0();
    *uint64_t v15 = a3;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_10003ED90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100019524(&qword_1003090E8);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002576E0;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  swift_bridgeObjectRetain();
  *(void *)(v10 + 48) = sub_10024F9E0();
  *(void *)(v10 + 56) = v11;
  *(void *)(v10 + 64) = sub_10024F9E0();
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = a5;
  *(void *)(v10 + 88) = a6;
  swift_bridgeObjectRetain();
  sub_100019524(&qword_100309410);
  sub_10003F8AC();
  uint64_t v13 = sub_10024E5C0();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10003EEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100019524(&qword_1003090E8);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1002576F0;
  *(void *)(v15 + 32) = a1;
  *(void *)(v15 + 40) = a2;
  *(void *)(v15 + 48) = a3;
  *(void *)(v15 + 56) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v15 + 64) = sub_10024F9E0();
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = sub_10024F9E0();
  *(void *)(v15 + 88) = v17;
  *(void *)(v15 + 96) = a7;
  *(void *)(v15 + 104) = a8;
  *(void *)(v15 + 112) = a9;
  *(void *)(v15 + 120) = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v15 + 128) = sub_10024F9E0();
  *(void *)(v15 + 136) = v18;
  *(void *)(v15 + 144) = sub_10024F9E0();
  *(void *)(v15 + 152) = v19;
  sub_100019524(&qword_100309410);
  sub_10003F8AC();
  uint64_t v20 = sub_10024E5C0();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_10003F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100019524(&qword_1003090E8);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100257700;
  *(void *)(v19 + 32) = a1;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 48) = a3;
  *(void *)(v19 + 56) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v19 + 64) = sub_10024F9E0();
  *(void *)(v19 + 72) = v20;
  *(void *)(v19 + 80) = sub_10024F9E0();
  *(void *)(v19 + 88) = v21;
  *(void *)(v19 + 96) = a7;
  *(void *)(v19 + 104) = a8;
  *(void *)(v19 + 112) = a9;
  *(void *)(v19 + 120) = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v19 + 128) = sub_10024F9E0();
  *(void *)(v19 + 136) = v22;
  *(void *)(v19 + 144) = sub_10024F9E0();
  *(void *)(v19 + 152) = v23;
  *(void *)(v19 + 160) = a13;
  *(void *)(v19 + 168) = a14;
  swift_bridgeObjectRetain();
  sub_100019524(&qword_100309410);
  sub_10003F8AC();
  uint64_t v24 = sub_10024E5C0();
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_10003F220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100019524(&qword_1003090E8);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100257710;
  *(void *)(v22 + 32) = a1;
  *(void *)(v22 + 40) = a2;
  *(void *)(v22 + 48) = a3;
  *(void *)(v22 + 56) = a4;
  *(void *)(v22 + 64) = a5;
  *(void *)(v22 + 72) = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v22 + 80) = sub_10024F9E0();
  *(void *)(v22 + 88) = v23;
  *(void *)(v22 + 96) = a8;
  *(void *)(v22 + 104) = a9;
  *(void *)(v22 + 112) = a10;
  *(void *)(v22 + 120) = a11;
  *(void *)(v22 + 128) = a12;
  *(void *)(v22 + 136) = a13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v22 + 144) = sub_10024F9E0();
  *(void *)(v22 + 152) = v24;
  *(void *)(v22 + 160) = a15;
  *(void *)(v22 + 168) = a16;
  swift_bridgeObjectRetain();
  *(void *)(v22 + 176) = sub_10024F9E0();
  *(void *)(v22 + 184) = v25;
  sub_100019524(&qword_100309410);
  sub_10003F8AC();
  uint64_t v26 = sub_10024E5C0();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_10003F3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100019524(&qword_1003090E8);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100257720;
  *(void *)(v15 + 32) = a1;
  *(void *)(v15 + 40) = a2;
  *(void *)(v15 + 48) = a3;
  *(void *)(v15 + 56) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v15 + 64) = sub_10024F9E0();
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = sub_10024F9E0();
  *(void *)(v15 + 88) = v17;
  *(void *)(v15 + 96) = a7;
  *(void *)(v15 + 104) = a8;
  *(void *)(v15 + 112) = a9;
  *(void *)(v15 + 120) = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v15 + 128) = sub_10024F9E0();
  *(void *)(v15 + 136) = v18;
  sub_100019524(&qword_100309410);
  sub_10003F8AC();
  uint64_t v19 = sub_10024E5C0();
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_10003F584(char a1)
{
  unint64_t result = 0xD000000000000035;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000033;
      break;
    case 2:
      unint64_t result = 0xD000000000000039;
      break;
    case 3:
      unint64_t result = 0xD000000000000033;
      break;
    case 4:
      unint64_t result = 0xD00000000000003ALL;
      break;
    case 5:
      unint64_t result = 0xD00000000000004BLL;
      break;
    case 6:
    case 13:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000035;
      break;
    case 8:
      unint64_t result = 0xD000000000000032;
      break;
    case 9:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000003FLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000038;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10003F6E0()
{
  return sub_10003F584(*v0);
}

uint64_t sub_10003F6F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003F748(uint64_t a1)
{
  uint64_t v2 = sub_100019524((uint64_t *)&unk_100319510);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10003F7A8()
{
  unint64_t result = qword_10030A730;
  if (!qword_10030A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A730);
  }
  return result;
}

uint64_t sub_10003F7F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10003F808(a1, a2);
  }
  return a1;
}

uint64_t sub_10003F808(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_10003F860()
{
  unint64_t result = qword_10030A738;
  if (!qword_10030A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A738);
  }
  return result;
}

unint64_t sub_10003F8AC()
{
  unint64_t result = qword_10030A740;
  if (!qword_10030A740)
  {
    sub_10001B028(&qword_100309410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A740);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SKANPostbackSigningError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SKANPostbackSigningError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003FA54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANPostbackSigningError()
{
  return &type metadata for SKANPostbackSigningError;
}

unint64_t sub_10003FA90()
{
  unint64_t result = qword_10030A748;
  if (!qword_10030A748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A748);
  }
  return result;
}

uint64_t sub_10003FADC()
{
  uint64_t result = *(void *)(v1 - 240);
  *(void *)(v1 - 240) = v0;
  return result;
}

uint64_t sub_10003FB2C()
{
  return swift_dynamicCast();
}

uint64_t sub_10003FB4C(uint64_t a1, char a2, char a3)
{
  return sub_10003EB88(a1, a2, a3, 0, 0);
}

double sub_10003FB68()
{
  return sub_1001616DC(v1 - 160, v0);
}

unint64_t sub_10003FB84()
{
  unint64_t v3 = *(void *)(v1 - 376);
  return sub_10003E94C(v3, v0, 8, 0, 0);
}

unint64_t sub_10003FBB0(unint64_t a1, uint64_t a2, char a3)
{
  return sub_10003E94C(a1, a2, a3, 0, 0);
}

uint64_t sub_10003FBCC()
{
  return swift_slowDealloc();
}

uint64_t sub_10003FBE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FBFC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FC14()
{
  return sub_10024F2E0();
}

uint64_t sub_10003FC38()
{
  return *(void *)(v0 - 280);
}

uint64_t sub_10003FC58()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FC70(uint64_t a1)
{
  *(void *)(v1 - 328) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FC90(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return sub_10024F100();
}

uint64_t sub_10003FCB8()
{
  return swift_dynamicCast();
}

uint64_t sub_10003FCDC()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_10003FCF4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10003FD10(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void sub_10003FD1C(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = 0;
}

uint64_t sub_10003FD28()
{
  return swift_slowAlloc();
}

void sub_10003FD40(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10003FD60()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FD78()
{
  return swift_slowAlloc();
}

uint64_t sub_10003FD90()
{
  return swift_slowAlloc();
}

uint64_t sub_10003FDA8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FDD4()
{
  *(void *)(v1 + 80) = v0;
  return _swift_task_switch(sub_10003FDF4, 0, 0);
}

uint64_t sub_10003FDF4()
{
  sub_100043B04();
  sub_100043C4C();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100043A64;
  sub_100043C34();
  uint64_t v3 = sub_100043C1C();
  sub_100043C04(v3);
  swift_retain();
  sub_100043BF8();
  sub_100130028();
  swift_release();
  return _swift_continuation_await(v0);
}

uint64_t sub_10003FEBC()
{
  *(void *)(v1 + 80) = v0;
  return _swift_task_switch(sub_10003FEDC, 0, 0);
}

uint64_t sub_10003FEDC()
{
  sub_100043B04();
  sub_100043C4C();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_10003FFA4;
  sub_100043C34();
  uint64_t v3 = sub_100043C1C();
  sub_100043C04(v3);
  swift_retain();
  sub_100043BF8();
  sub_10012DE30();
  swift_release();
  return _swift_continuation_await(v0);
}

uint64_t sub_10003FFA4()
{
  sub_100043B04();
  sub_100043A74();
  uint64_t v1 = *v0;
  sub_100043ADC();
  void *v2 = v1;
  if (*(void *)(v3 + 48)) {
    swift_willThrow();
  }
  sub_100043BC0();
  return v4();
}

uint64_t sub_100040078()
{
  *(void *)(v1 + 88) = v0;
  return _swift_task_switch(sub_100040098, 0, 0);
}

uint64_t sub_100040098()
{
  sub_100043B04();
  sub_100043C4C();
  v1[2] = v2;
  v1[7] = v1 + 10;
  v1[3] = sub_100040168;
  sub_100043C34();
  uint64_t v3 = sub_100043C1C();
  sub_100043C04(v3);
  swift_retain();
  sub_100043BF8();
  sub_100130280();
  swift_release();
  return _swift_continuation_await(v0);
}

uint64_t sub_100040168()
{
  sub_100043B04();
  sub_100043ADC();
  uint64_t *v2 = v1;
  uint64_t v3 = *v0;
  uint64_t *v2 = *v0;
  if (*(void *)(v4 + 48))
  {
    swift_willThrow();
    sub_100043BC0();
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 80);
    unint64_t v8 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v8(v7);
  }
}

uint64_t sub_100040298()
{
  *(void *)(v1 + 88) = v0;
  return _swift_task_switch(sub_1000402B8, 0, 0);
}

uint64_t sub_1000402B8()
{
  sub_100043B04();
  sub_100043C4C();
  v1[2] = v2;
  v1[7] = v1 + 10;
  v1[3] = sub_100043A60;
  sub_100043C34();
  uint64_t v3 = sub_100043C1C();
  sub_100043C04(v3);
  swift_retain();
  sub_100043BF8();
  sub_10013039C();
  swift_release();
  return _swift_continuation_await(v0);
}

uint64_t EventLoopFuture.get()(uint64_t a1)
{
  v2[2] = a1;
  _OWORD v2[3] = v1;
  _OWORD v2[4] = *v1;
  return sub_100043A8C((uint64_t)sub_1000403C8);
}

uint64_t sub_1000403C8()
{
  sub_100043A98();
  uint64_t v1 = (void *)sub_100043ABC();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004047C;
  sub_10003C888();
  return v3();
}

uint64_t sub_10004047C()
{
  sub_100043A98();
  sub_100043A74();
  sub_100043ADC();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100043ADC();
  *uint64_t v5 = v4;
  *(void *)(v6 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10003C888();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    sub_100043B28();
    return v10();
  }
}

uint64_t sub_100040578()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040590(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = *(void *)(v3 + 80);
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  EventLoopFuture.whenComplete(_:)();
  return swift_release();
}

uint64_t sub_100040620(uint64_t a1)
{
  return sub_100040590(a1, v1);
}

uint64_t sub_100040628(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    sub_100019524(&qword_100309768);
    uint64_t v5 = swift_allocError();
    void *v6 = a1;
    swift_errorRetain();
    return _swift_continuation_throwingResumeWithError(a3, v5);
  }
  else
  {
    return _swift_continuation_throwingResume(a3);
  }
}

uint64_t sub_1000406C4(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    sub_100019524(&qword_100309768);
    uint64_t v5 = swift_allocError();
    void *v6 = a1;
    swift_errorRetain();
    return _swift_continuation_throwingResumeWithError(a3, v5);
  }
  else
  {
    **(void **)(*(void *)(a3 + 64) + 40) = a1;
    swift_retain();
    return _swift_continuation_throwingResume(a3);
  }
}

void sub_100040784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = __chkstk_darwin(a1, a2);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = sub_10001B028(&qword_100309768);
  uint64_t v14 = sub_10024FCF0();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v19 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v19 - v16, a1, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v17;
    sub_100040A38((uint64_t)&v20, a2, a3, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v12, v17, a3);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, a3);
    sub_1000409C0((uint64_t)v9, a2, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a3);
  }
}

uint64_t sub_1000409C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t))(*(void *)(a3 - 8) + 32))(*(void *)(*(void *)(a2 + 64) + 40), a1);
  return _swift_continuation_throwingResume(a2);
}

void sub_100040A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v6, a1, a4);
  JUMPOUT(0x100250FF0);
}

uint64_t sub_100040ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = sub_10024EB80();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(sub_100040B60, v6, v8);
}

uint64_t sub_100040B60()
{
  sub_100043B04();
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_10003FFA4;
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return _swift_continuation_await(v0 + 2);
}

uint64_t EventLoopGroup.shutdownGracefully()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100043A8C((uint64_t)sub_100040C20);
}

uint64_t sub_100040C20()
{
  sub_100043A98();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = sub_100043BA4(v2);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v3 + 32) = v1;
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100043BE0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100040D04;
  sub_10003C888();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100040D04()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100040DF0()
{
  sub_100043A98();
  swift_task_dealloc();
  sub_100043BB0();
  return v0();
}

uint64_t sub_100040E48(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030A848);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  EventLoopGroup.shutdownGracefully(_:)();
  return swift_release();
}

uint64_t sub_100040FA0(uint64_t a1)
{
  return sub_100040E48(a1);
}

uint64_t sub_100040FAC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_100019524(&qword_10030A848);
    return sub_10024EB90();
  }
  else
  {
    sub_100019524(&qword_10030A848);
    return sub_10024EBA0();
  }
}

uint64_t EventLoopPromise.completeWithTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100019524(&qword_10030A768);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10024EBD0();
  sub_1000195B4((uint64_t)v11, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  void v13[4] = a4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  LODWORD(a4) = sub_10001FA0C((uint64_t)v11, 1, v12);
  swift_retain();
  swift_retain();
  if (a4 == 1)
  {
    sub_100043550((uint64_t)v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    sub_10024EBC0();
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    if (v13[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = sub_10024EB80();
      uint64_t v15 = v16;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = &unk_10030A778;
  *(void *)(v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
  if (v15 | v14)
  {
    v19[0] = 0;
    v19[1] = 0;
    void v19[2] = v14;
    v19[3] = v15;
  }
  return swift_task_create();
}

uint64_t sub_100041230(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  void v7[4] = *(void *)(a7 - 8);
  uint64_t v9 = swift_task_alloc();
  v7[5] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc();
  v7[6] = v10;
  void *v10 = v7;
  v10[1] = sub_100041368;
  return v12(v9);
}

uint64_t sub_100041368()
{
  sub_100043A98();
  sub_100043A74();
  sub_100043ADC();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100043ADC();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100041448()
{
  sub_100043B04();
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  EventLoopPromise.succeed(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  sub_100043B28();
  return v4();
}

uint64_t sub_1000414D4()
{
  sub_100043A98();
  EventLoopPromise.fail(_:)(*(void *)(v0 + 56));
  swift_errorRelease();
  swift_task_dealloc();
  sub_100043B28();
  return v1();
}

uint64_t Channel.writeAndFlush<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  return sub_100043A8C((uint64_t)sub_100041564);
}

{
  return sub_10004473C(a1, a2, a3, a4, 233, (uint64_t (*)(_OWORD *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))ChannelOutboundInvoker.writeAndFlush(_:file:line:));
}

uint64_t sub_100041564()
{
  sub_100043A98();
  v0[7] = Channel.writeAndFlush<A>(_:)(v0[2], v0[3], v0[4], v0[5]);
  uint64_t v1 = (void *)sub_100043ABC();
  v0[8] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100041604;
  uint64_t v9 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v11);
  return v9();
}

uint64_t sub_100041604()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000416EC()
{
  sub_100043A98();
  swift_release();
  sub_100043B28();
  return v0();
}

uint64_t Channel.setOption<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100043A8C((uint64_t)sub_10004176C);
}

uint64_t sub_10004176C()
{
  sub_100043A98();
  uint64_t v1 = (*(uint64_t (**)(void, void, void, void, void))(v0[6] + 64))(v0[2], v0[3], v0[5], v0[7], v0[4]);
  sub_100043B48(v1);
  uint64_t v2 = sub_100043ABC();
  uint64_t v3 = (void *)sub_100043B64(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_100041818;
  uint64_t v12 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11, v14);
  return v12();
}

uint64_t sub_100041818()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100041900()
{
  sub_100043A98();
  swift_release();
  sub_100043B54();
  return v0();
}

uint64_t Channel.getOption<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100043A8C((uint64_t)sub_10004197C);
}

uint64_t sub_10004197C()
{
  sub_100043A98();
  uint64_t v1 = (*(uint64_t (**)(void, void, void, void))(v0[6] + 72))(v0[3], v0[5], v0[7], v0[4]);
  sub_100043B48(v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_100043B64(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_100041A2C;
  uint64_t v5 = v0[2];
  return EventLoopFuture.get()(v5);
}

uint64_t sub_100041A2C()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10003C888();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    sub_100043B28();
    return v10();
  }
}

uint64_t ChannelOutboundInvoker.register(file:line:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 88) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return sub_100043A8C((uint64_t)sub_100041B54);
}

uint64_t sub_100041B54()
{
  sub_100043A98();
  *(void *)(v0 + 64) = ChannelOutboundInvoker.register(file:line:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 88), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
  uint64_t v1 = (void *)sub_100043ABC();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100041BF8;
  uint64_t v9 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v11);
  return v9();
}

uint64_t sub_100041BF8()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100041CE0()
{
  sub_100043A98();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ChannelOutboundInvoker.bind(to:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100043A8C((uint64_t)sub_100041D60);
}

uint64_t sub_100041D60()
{
  sub_100043A98();
  sub_100043B10();
  ChannelOutboundInvoker.bind(to:file:line:)();
  sub_100043B48(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043B64(v1);
  void *v2 = v3;
  v2[1] = sub_100041DF0;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_100041DF0()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ChannelOutboundInvoker.connect(to:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100043A8C((uint64_t)sub_100041EF8);
}

uint64_t sub_100041EF8()
{
  sub_100043A98();
  sub_100043B10();
  ChannelOutboundInvoker.connect(to:file:line:)();
  sub_100043B48(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043B64(v1);
  void *v2 = v3;
  v2[1] = sub_100041DF0;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t ChannelOutboundInvoker.writeAndFlush(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100043A8C((uint64_t)sub_100041FA8);
}

uint64_t sub_100041FA8()
{
  sub_100043A98();
  sub_100043B10();
  ChannelOutboundInvoker.writeAndFlush(_:file:line:)();
  sub_100043B48(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043B64(v1);
  void *v2 = v3;
  v2[1] = sub_100041DF0;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t ChannelOutboundInvoker.close(mode:file:line:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(unsigned char *)(v8 + 89) = a4;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(unsigned char *)(v8 + 88) = a1;
  return sub_100043A8C((uint64_t)sub_100042060);
}

uint64_t sub_100042060()
{
  sub_100043A98();
  ChannelOutboundInvoker.close(mode:file:line:)();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)sub_100043ABC();
  *(void *)(v0 + 72) = v2;
  void *v2 = v0;
  v2[1] = sub_100042108;
  uint64_t v10 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

uint64_t sub_100042108()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100043A8C((uint64_t)sub_100042210);
}

uint64_t sub_100042210()
{
  sub_100043A98();
  sub_100043B10();
  ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)();
  sub_100043B48(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043B64(v1);
  void *v2 = v3;
  v2[1] = sub_1000422A0;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_1000422A0()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ChannelPipeline.addHandler(_:name:position:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100043A8C((uint64_t)sub_1000423AC);
}

uint64_t sub_1000423AC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = sub_1000B5894(v7, v5, v4, v3, v1, v2, ObjectType, v6);
  sub_100043B48(v9);
  uint64_t v10 = sub_100043ABC();
  uint64_t v11 = (void *)sub_100043B64(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_1000422A0;
  uint64_t v20 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v11, v13, v14, v15, v16, v17, v18, v19, v22);
  return v20();
}

uint64_t ChannelPipeline.removeHandler(_:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100043A8C((uint64_t)sub_1000424A8);
}

uint64_t sub_1000424A8()
{
  sub_100043A98();
  sub_100043BEC();
  ChannelPipeline.removeHandler(_:)();
  sub_100043BA4(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043BE0(v1);
  void *v2 = v3;
  v2[1] = sub_100042538;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_100042538()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ChannelPipeline.removeHandler(name:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100043A8C((uint64_t)sub_10004263C);
}

uint64_t sub_10004263C()
{
  sub_100043A98();
  sub_100043BEC();
  ChannelPipeline.removeHandler(name:)();
  sub_100043BA4(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043BE0(v1);
  void *v2 = v3;
  v2[1] = sub_1000426CC;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_1000426CC()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000427B4()
{
  sub_100043A98();
  swift_release();
  sub_100043BB0();
  return v0();
}

uint64_t ChannelPipeline.removeHandler(context:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  return sub_100043A8C((uint64_t)sub_100042824);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *(void *)(v1 + 56);
  swift_getObjectType();
  sub_1000B7AA8();
  uint64_t v9 = EventLoop.makePromise<A>(of:file:line:)(v4, v5, v6, v7, 359, v8, v4, v3);
  swift_retain();
  ChannelPipeline.removeHandler(context:promise:)(a1, v9);
  swift_release();
  return v9;
}

uint64_t sub_100042824()
{
  sub_100043A98();
  v0[4] = ChannelPipeline.removeHandler(context:)(v0[2]);
  uint64_t v1 = (void *)sub_100043ABC();
  v0[5] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000428BC;
  uint64_t v9 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v11);
  return v9();
}

uint64_t sub_1000428BC()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000429A4()
{
  sub_100043A98();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ChannelPipeline.context(handler:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100043A8C((uint64_t)sub_100042A20);
}

uint64_t sub_100042A20()
{
  sub_100043A98();
  sub_100043BEC();
  ChannelPipeline.context(handler:)();
  sub_100043BA4(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043BE0(v1);
  void *v2 = v3;
  v2[1] = sub_100042AB0;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_100042AB0()
{
  sub_100043B04();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10003C888();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = sub_100043B34();
    return v11(v10);
  }
}

uint64_t ChannelPipeline.context(name:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100043A8C((uint64_t)sub_100042BE4);
}

uint64_t sub_100042BE4()
{
  sub_100043A98();
  sub_100043BEC();
  ChannelPipeline.context(name:)();
  sub_100043BA4(v0);
  uint64_t v1 = sub_100043ABC();
  uint64_t v2 = (void *)sub_100043BE0(v1);
  void *v2 = v3;
  v2[1] = sub_100042C74;
  uint64_t v11 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13);
  return v11();
}

uint64_t sub_100042C74()
{
  sub_100043B04();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10003C888();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = sub_100043B34();
    return v11(v10);
  }
}

uint64_t ChannelPipeline.context<A>(handlerType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  long long v4[3] = a2;
  return sub_100043A8C((uint64_t)sub_100042DA8);
}

uint64_t sub_100042DA8()
{
  sub_100043A98();
  ChannelPipeline.context<A>(handlerType:)();
  *(void *)(v0 + 48) = v1;
  uint64_t v2 = (void *)sub_100043ABC();
  *(void *)(v0 + 56) = v2;
  void *v2 = v0;
  v2[1] = sub_100042E44;
  uint64_t v10 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

uint64_t sub_100042E44()
{
  sub_100043B04();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10003C888();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = sub_100043B34();
    return v11(v10);
  }
}

uint64_t sub_100042F5C()
{
  sub_100043A98();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ChannelPipeline.addHandlers(_:position:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  long long v4[3] = a2;
  return sub_100043A8C((uint64_t)sub_100042FD8);
}

uint64_t sub_100042FD8()
{
  sub_100043A98();
  v0[6] = ChannelPipeline.addHandlers(_:position:)(v0[2], v0[3], v0[4]);
  uint64_t v1 = (void *)sub_100043ABC();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100043074;
  uint64_t v9 = (uint64_t (*)(void))sub_100043AF8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v11);
  return v9();
}

uint64_t sub_100043074()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v3 = v2;
  sub_100043ADC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100043ADC();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10003C888();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ChannelPipeline.addHandlers(_:position:)()
{
  sub_100043B04();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100043204;
  return ChannelPipeline.addHandlers(_:position:)(v6, v4, v2);
}

uint64_t sub_100043204()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v1 = *v0;
  sub_100043ADC();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100043B28();
  return v3();
}

uint64_t sub_1000432C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10024EBD0();
  if (sub_10001FA0C(a1, 1, v6) == 1)
  {
    sub_100043550(a1);
  }
  else
  {
    sub_10024EBC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10024EB80();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100043430()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100043478(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = (int *)v1[5];
  uint64_t v8 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)sub_100043BD0(v9);
  void *v10 = v11;
  v10[1] = sub_100043204;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_10030A770
                                                                                            + dword_10030A770);
  return v12(a1, v3, v4, v6, v8, v7, v5);
}

uint64_t sub_100043550(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030A768);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000435B0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10004368C;
  return v6(a1);
}

uint64_t sub_10004368C()
{
  sub_100043A98();
  sub_100043A74();
  uint64_t v1 = *v0;
  sub_100043ADC();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100043758()
{
  sub_100043B04();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100043BD0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100043A58;
  uint64_t v3 = sub_100043B70();
  return v4(v3);
}

uint64_t sub_1000437F0(uint64_t a1, uint64_t a2)
{
  return sub_100040628(*(void *)a1, *(unsigned char *)(a1 + 8), a2);
}

uint64_t sub_100043818(uint64_t a1, uint64_t a2)
{
  return sub_1000406C4(*(void *)a1, *(unsigned char *)(a1 + 8), a2);
}

uint64_t sub_100043848(uint64_t a1)
{
  return sub_100043818(a1, *(void *)(v1 + 16));
}

uint64_t sub_100043854(uint64_t a1)
{
  return sub_1000437F0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100043860()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043898()
{
  sub_100043B04();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100043BD0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100043204;
  uint64_t v3 = sub_100043B70();
  return v4(v3);
}

uint64_t sub_100043930()
{
  uint64_t v1 = sub_100019524(&qword_10030A848);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000439C4(uint64_t a1)
{
  sub_100019524(&qword_10030A848);
  return sub_100040FAC(a1);
}

uint64_t sub_100043A38()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100043A48(uint64_t a1)
{
  sub_100040784(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_100043A8C(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_100043AA4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043ABC()
{
  return swift_task_alloc();
}

uint64_t sub_100043AE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t sub_100043B10()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100043B28()
{
  return v0 + 8;
}

uint64_t sub_100043B34()
{
  return v0;
}

uint64_t sub_100043B48(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_100043B54()
{
  return v0 + 8;
}

uint64_t sub_100043B64(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t sub_100043B70()
{
  return v0;
}

uint64_t sub_100043B8C(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(unsigned char *)(v8 + 96) = a4;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = result;
  return result;
}

uint64_t sub_100043BA4(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_100043BB0()
{
  return v0 + 8;
}

uint64_t sub_100043BC0()
{
  return v0 + 8;
}

uint64_t sub_100043BD0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100043BE0(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_100043BEC()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100043C04(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return swift_retain();
}

uint64_t sub_100043C1C()
{
  return swift_allocObject();
}

uint64_t sub_100043C34()
{
  return swift_continuation_init();
}

uint64_t ChannelCore.removeHandlers(pipeline:)()
{
  return sub_1000AE4C0();
}

uint64_t sub_100043C7C()
{
  swift_retain();
  ChannelPipeline.close(mode:promise:)();
  return swift_release();
}

uint64_t sub_100043CD4()
{
  EmbeddedChannel.pipeline.getter();
  ChannelPipeline.close(mode:promise:)();
  return swift_release();
}

uint64_t Channel.close(mode:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_100045100(a1, a2, a3);
  v4(v3);
  ChannelPipeline.close(mode:promise:)();
  return swift_release();
}

uint64_t static ChannelError.__derived_enum_equals(_:_:)(unint64_t a1, char a2, unint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 != 1) {
        goto LABEL_80;
      }
      sub_100044A70(a1, 1);
      sub_100044A70(a3, 1);
      BOOL v7 = static SocketAddress.== infix(_:_:)(a1, a3);
      sub_100044A90(a3, 1);
      uint64_t v8 = a1;
      char v9 = 1;
      goto LABEL_8;
    case 2:
      if (a4 != 2) {
        goto LABEL_80;
      }
      type metadata accessor for NIONetworkInterface();
      sub_100044A70(a1, 2);
      sub_100044A70(a3, 2);
      BOOL v7 = static NIONetworkInterface.== infix(_:_:)(a1);
      sub_100044A90(a3, 2);
      uint64_t v8 = a1;
      char v9 = 2;
LABEL_8:
      sub_100044A90(v8, v9);
      uint64_t result = v7;
      break;
    case 3:
      switch(a1)
      {
        case 1uLL:
          sub_10004511C();
          if (!v10 || a3 != 1) {
            goto LABEL_80;
          }
          break;
        case 2uLL:
          sub_10004511C();
          if (!v10 || a3 != 2) {
            goto LABEL_80;
          }
          break;
        case 3uLL:
          sub_10004511C();
          if (!v10 || a3 != 3) {
            goto LABEL_80;
          }
          break;
        case 4uLL:
          sub_10004511C();
          if (!v10 || a3 != 4) {
            goto LABEL_80;
          }
          break;
        case 5uLL:
          sub_10004511C();
          if (!v10 || a3 != 5) {
            goto LABEL_80;
          }
          break;
        case 6uLL:
          sub_10004511C();
          if (!v10 || a3 != 6) {
            goto LABEL_80;
          }
          break;
        case 7uLL:
          sub_10004511C();
          if (!v10 || a3 != 7) {
            goto LABEL_80;
          }
          break;
        case 8uLL:
          sub_10004511C();
          if (!v10 || a3 != 8) {
            goto LABEL_80;
          }
          break;
        case 9uLL:
          sub_10004511C();
          if (!v10 || a3 != 9) {
            goto LABEL_80;
          }
          break;
        case 0xAuLL:
          sub_10004511C();
          if (!v10 || a3 != 10) {
            goto LABEL_80;
          }
          break;
        case 0xBuLL:
          sub_10004511C();
          if (!v10 || a3 != 11) {
            goto LABEL_80;
          }
          break;
        case 0xCuLL:
          sub_10004511C();
          if (!v10 || a3 != 12) {
            goto LABEL_80;
          }
          break;
        case 0xDuLL:
          sub_10004511C();
          if (!v10 || a3 != 13) {
            goto LABEL_80;
          }
          break;
        default:
          sub_10004511C();
          BOOL v10 = v10 && a3 == 0;
          if (!v10) {
            goto LABEL_80;
          }
          break;
      }
      return 1;
    default:
      if (a4) {
LABEL_80:
      }
        uint64_t result = 0;
      else {
        uint64_t result = a1 == a3;
      }
      break;
  }
  return result;
}

uint64_t sub_100043FE0(uint64_t a1, uint64_t a2)
{
  return Channel.register(promise:)(a1, a2, (uint64_t)&off_1002DBF00);
}

uint64_t sub_10004400C()
{
  swift_retain();
  ChannelPipeline.register(promise:)();
  return swift_release();
}

uint64_t sub_100044054()
{
  EmbeddedChannel.pipeline.getter();
  ChannelPipeline.register(promise:)();
  return swift_release();
}

uint64_t Channel.register(promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  ChannelPipeline.register(promise:)();
  return swift_release();
}

uint64_t sub_1000440F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.bind(to:promise:)(a1, a2, a3, (uint64_t)&off_1002DBF00);
}

uint64_t Channel.bind(to:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000441C8(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))ChannelPipeline.bind(to:promise:));
}

uint64_t sub_100044138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.connect(to:promise:)(a1, a2, a3, (uint64_t)&off_1002DBF00);
}

uint64_t sub_100044164()
{
  sub_100045168();
  v0(v2, v1);
  return swift_release();
}

uint64_t Channel.connect(to:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000441C8(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))ChannelPipeline.connect(to:promise:));
}

uint64_t sub_1000441C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_100045100(a1, a2, a3);
  v9(v8);
  a5(a1, a2);
  return swift_release();
}

uint64_t sub_100044228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.write(_:promise:)(a1, a2, a3, (uint64_t)&off_1002DBF00);
}

uint64_t Channel.write(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000443A4(a1, a2, a3, a4, (void (*)(uint64_t))ChannelPipeline.write(_:promise:));
}

void sub_10004426C()
{
}

Swift::Void __swiftcall Channel.flush()()
{
  sub_1000444CC(v0, v1, ChannelPipeline.flush());
}

uint64_t sub_1000442B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.writeAndFlush(_:promise:)(a1, a2, a3, (uint64_t)&off_1002DBF00);
}

uint64_t sub_1000442DC()
{
  sub_100045168();
  uint64_t v1 = sub_100045158();
  v0(v1);
  return swift_release();
}

uint64_t sub_100044320(uint64_t a1, uint64_t a2)
{
  return sub_100044338(a1, a2, (void (*)(uint64_t))ChannelPipeline.writeAndFlush(_:promise:));
}

uint64_t sub_100044338(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  EmbeddedChannel.pipeline.getter();
  uint64_t v4 = sub_100045158();
  a3(v4);
  return swift_release();
}

uint64_t Channel.writeAndFlush(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000443A4(a1, a2, a3, a4, (void (*)(uint64_t))ChannelPipeline.writeAndFlush(_:promise:));
}

uint64_t sub_1000443A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = sub_100045100(a1, a2, a3);
  v7(v6);
  uint64_t v8 = sub_100045158();
  a5(v8);
  return swift_release();
}

void sub_1000443FC()
{
}

uint64_t sub_100044428(void (*a1)(uint64_t))
{
  uint64_t v2 = swift_retain();
  a1(v2);
  return swift_release();
}

uint64_t sub_100044470(void (*a1)(void))
{
  EmbeddedChannel.pipeline.getter();
  a1();
  return swift_release();
}

Swift::Void __swiftcall Channel.read()()
{
  sub_1000444CC(v0, v1, ChannelPipeline.read());
}

uint64_t sub_1000444CC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  (*(void (**)(void))(a2 + 32))();
  a3();
  return swift_release();
}

uint64_t sub_100044520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.close(mode:promise:)(a1, a2, a3);
}

uint64_t sub_10004454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Channel.triggerUserOutboundEvent(_:promise:)(a1, a2, a3);
}

uint64_t sub_100044578(uint64_t a1, uint64_t a2)
{
  swift_retain();
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return swift_release();
}

uint64_t sub_1000445D0(uint64_t a1, uint64_t a2)
{
  EmbeddedChannel.pipeline.getter();
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return swift_release();
}

uint64_t Channel.triggerUserOutboundEvent(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100045100(a1, a2, a3);
  v6(v5);
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return swift_release();
}

#error "1000446F0: call analysis failed (funcsize=33)"

uint64_t Channel.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004473C(a1, a2, a3, a4, 219, (uint64_t (*)(_OWORD *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))ChannelOutboundInvoker.write(_:file:line:));
}

uint64_t sub_10004473C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_OWORD *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  sub_10002F9C8();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v6;
  (*(void (**)(char *))(v16 + 16))(v15);
  NIOAny.init<A>(_:)((uint64_t)v15, a3, v20);
  uint64_t v17 = a6(v20, "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Channel.swift", 109, 2, a5, a2, *(void *)(a4 + 8));
  sub_10003908C((uint64_t)v20);
  return v17;
}

uint64_t Channel.write<A>(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002F9C8();
  __chkstk_darwin(v6, v7);
  char v9 = sub_100045128(v8, v14);
  v10(v9);
  NIOAny.init<A>(_:)(v4, a4, v15);
  uint64_t v11 = sub_10004518C();
  v12(v11);
  return sub_10003908C((uint64_t)v15);
}

uint64_t Channel.writeAndFlush<A>(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002F9C8();
  __chkstk_darwin(v6, v7);
  char v9 = sub_100045128(v8, v14);
  v10(v9);
  NIOAny.init<A>(_:)(v4, a4, v15);
  uint64_t v11 = sub_10004518C();
  v12(v11);
  return sub_10003908C((uint64_t)v15);
}

uint64_t ChannelCore.unwrapData<A>(_:as:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  return NIOAny.forceAs<A>(type:)(a1, a2);
}

uint64_t ChannelCore.tryUnwrapData<A>(_:as:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  return NIOAny.tryAs<A>(type:)(a1, a2);
}

uint64_t ChannelCore.removeHandlers(channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  sub_1000AE4C0();
  return swift_release();
}

uint64_t sub_100044A70(uint64_t a1, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100044A90(uint64_t a1, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100044AB0(uint64_t a1, uint64_t a2)
{
  return static ChannelError.__derived_enum_equals(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_100044ACC()
{
  return sub_10004400C();
}

uint64_t sub_100044AF0()
{
  return sub_100044164();
}

uint64_t sub_100044B28()
{
  return sub_100044164();
}

uint64_t sub_100044B60()
{
  return sub_1000442DC();
}

uint64_t sub_100044B98()
{
  return sub_100044428((void (*)(uint64_t))ChannelPipeline.flush());
}

uint64_t sub_100044BD0()
{
  return sub_1000442DC();
}

uint64_t sub_100044C08()
{
  return sub_100044428((void (*)(uint64_t))ChannelPipeline.read());
}

uint64_t sub_100044C40()
{
  return sub_100043C7C();
}

uint64_t sub_100044C64(uint64_t a1, uint64_t a2)
{
  return sub_100044578(a1, a2);
}

unint64_t sub_100044C8C()
{
  unint64_t result = qword_10030A850;
  if (!qword_10030A850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A850);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100044A70(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ChannelError(uint64_t a1)
{
  return sub_100044A90(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100044A70(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100044A90(v5, v6);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for OctaneSubscriptionPeriod(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ChannelError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100044A90(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100044E5C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_100044E74(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void type metadata accessor for ChannelError()
{
}

void type metadata accessor for NIOAttemptedToRemoveHandlerMultipleTimesError()
{
}

unsigned char *storeEnumTagSinglePayload for ChannelEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044F70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ChannelEvent()
{
}

void type metadata accessor for ChannelShouldQuiesceEvent()
{
}

uint64_t sub_100044FB0()
{
  return sub_100044054();
}

uint64_t sub_100044FD4(uint64_t a1, uint64_t a2)
{
  return sub_100044338(a1, a2, (void (*)(uint64_t))ChannelPipeline.write(_:promise:));
}

uint64_t sub_10004500C()
{
  return sub_100044470(ChannelPipeline.flush());
}

uint64_t sub_100045044(uint64_t a1, uint64_t a2)
{
  return sub_100044338(a1, a2, (void (*)(uint64_t))ChannelPipeline.writeAndFlush(_:promise:));
}

uint64_t sub_10004507C()
{
  return sub_100044470(ChannelPipeline.read());
}

uint64_t sub_1000450B4()
{
  return sub_100043CD4();
}

uint64_t sub_1000450D8(uint64_t a1, uint64_t a2)
{
  return sub_1000445D0(a1, a2);
}

uint64_t sub_100045100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

char *sub_100045128@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v3 - 56) = v2;
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100045158()
{
  return v0;
}

uint64_t sub_100045168()
{
  return swift_retain();
}

uint64_t sub_10004518C()
{
  return v0 - 120;
}

uint64_t sub_1000451A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100212134();
  uint64_t v5 = a1[12];
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_100161540(0x6F726665726F7473, 0xEA0000000000746ELL, v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    sub_1000457A8(a1);
LABEL_7:
    swift_bridgeObjectRelease();
    sub_1000458AC(v49);
    sub_1000458B4((uint64_t)v49, (uint64_t)&v50, &qword_10030A858);
    return sub_1000458B4((uint64_t)&v50, a2, &qword_10030A858);
  }
  uint64_t v9 = sub_100161540(0xD000000000000010, 0x800000010027AC40, v4);
  if (!v10)
  {
    sub_1000457A8(a1);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  uint64_t v41 = v9;
  uint64_t v44 = v8;
  swift_bridgeObjectRetain();
  uint64_t v43 = v11;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100161540(0x646E65747865, 0xE600000000000000, v4);
  if (v13)
  {
    uint64_t v50 = v12;
    uint64_t v51 = v13;
    sub_100046C80();
    uint64_t v14 = (void *)sub_100046CA0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v42 = v6;
  uint64_t v45 = a2;
  uint64_t v15 = v14[2];
  if (v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = (void **)(v14 + 5);
    uint64_t v17 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v18 = (uint64_t)*(v16 - 1);
      uint64_t v19 = *v16;
      swift_bridgeObjectRetain();
      v20._rawValue = &off_1002D67D8;
      v52._countAndFlagsBits = v18;
      v52._object = v19;
      Swift::Int v21 = sub_10024F790(v20, v52);
      swift_bridgeObjectRelease();
      if (!v21) {
        break;
      }
      if (v21 == 1)
      {
        char v22 = 1;
LABEL_15:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000357B0();
          uint64_t v17 = v24;
        }
        unint64_t v23 = v17[2];
        if (v23 >= v17[3] >> 1)
        {
          sub_1000357B0();
          uint64_t v17 = v25;
        }
        void v17[2] = v23 + 1;
        *((unsigned char *)v17 + v23 + 32) = v22;
      }
      v16 += 2;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    char v22 = 0;
    goto LABEL_15;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1001D4E44((uint64_t)v17);
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_100161540(0x73646C656966, 0xE600000000000000, v4);
  if (v28)
  {
    uint64_t v50 = v27;
    uint64_t v51 = v28;
    sub_100046C80();
    uint64_t v29 = (void *)sub_100046CA0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  sub_100161540(108, 0xE100000000000000, v4);
  if (!v30
    || (type metadata accessor for OctaneLocale(), uint64_t inited = sub_1000EFD68(), swift_bridgeObjectRelease(), !inited))
  {
    type metadata accessor for OctaneLocale();
    uint64_t inited = swift_initStaticObject();
  }
  uint64_t v32 = sub_100161540(0x6D726F6674616C70, 0xE800000000000000, v4);
  uint64_t v34 = v33;
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_100161540(0xD000000000000013, 0x800000010027AC60, v4);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (v37)
  {
    uint64_t v50 = v35;
    uint64_t v51 = v37;
    sub_100046C80();
    uint64_t v38 = (void *)sub_100046CA0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v38 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = swift_bridgeObjectRetain();
  sub_1000F2780(v39, (uint64_t)__src);
  sub_1000457A8(a1);
  memcpy(__dst, __src, 0x139uLL);
  debugOnly(_:)(__dst);
  v48[0] = v42;
  v48[1] = v44;
  v48[2] = v41;
  v48[3] = v43;
  v48[4] = v26;
  v48[5] = v29;
  v48[6] = inited;
  v48[7] = v32;
  v48[8] = v34;
  v48[9] = v38;
  sub_1000458B4((uint64_t)__dst, (uint64_t)&v48[10], &qword_10030A860);
  swift_retain();
  sub_100045918(v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100045BF8(v48);
  memcpy(v49, v48, 0x189uLL);
  debugOnly(_:)(v49);
  sub_1000458B4((uint64_t)v49, (uint64_t)&v50, &qword_10030A858);
  a2 = v45;
  return sub_1000458B4((uint64_t)&v50, a2, &qword_10030A858);
}

uint64_t sub_1000456A0(uint64_t a1, void *a2)
{
  v7._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6B38;
  v7._object = a2;
  Swift::Int v4 = sub_10024F790(v3, v7);
  swift_bridgeObjectRelease();
  if (v4 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000456F4(char a1)
{
  if (a1) {
    return 1634497893;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100045728(char *a1, char *a2)
{
  return sub_1000F9AB0(*a1, *a2);
}

uint64_t sub_100045734@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000456A0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100045764@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000456F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_100045790()
{
  return sub_1001D3434();
}

uint64_t sub_100045798()
{
  return sub_1000D11D8();
}

Swift::Int sub_1000457A0()
{
  return sub_1000D2EA4();
}

uint64_t *sub_1000457A8(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  sub_100045854(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  sub_100045868(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100045854(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100045868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000458AC(void *a1)
{
}

uint64_t sub_1000458B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100019524(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_100045918(void *a1)
{
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[10];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100045AC0(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_100045AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_100045BF8(void *a1)
{
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[10];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100045DA0(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_100045DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppInformationRequest.Extension(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100045FA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInformationRequest.Extension()
{
  return &type metadata for AppInformationRequest.Extension;
}

uint64_t destroy for AppInformationRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 104);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  __dst = (void *)(a1 + 80);
  uint64_t v9 = (unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    memcpy(__dst, v9, 0x139uLL);
  }
  else
  {
    void *__dst = *(void *)v9;
    *(unsigned char *)(a1 + 88) = v9[8];
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v11;
    uint64_t v12 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v12;
    uint64_t v13 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v13;
    uint64_t v14 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = v14;
    uint64_t v15 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v15;
    uint64_t v16 = *(void *)(a2 + 216);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v16;
    uint64_t v17 = *(void *)(a2 + 232);
    *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v17;
    uint64_t v18 = *(void *)(a2 + 248);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = v18;
    *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
    uint64_t v19 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v19;
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    uint64_t v20 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v20;
    uint64_t v21 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = v21;
    uint64_t v22 = *(void *)(a2 + 336);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = v22;
    uint64_t v23 = *(void *)(a2 + 352);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = v23;
    uint64_t v24 = *(void *)(a2 + 368);
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = v24;
    uint64_t v25 = *(void *)(a2 + 384);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = v25;
    *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) != 1)
  {
    if (v6 != 1)
    {
      uint64_t v10 = *v5;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      void *v4 = v10;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v11;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(void *)(a1 + 280) = v12;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
      return a1;
    }
    sub_1000468B4(a1 + 80);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x139uLL);
    return a1;
  }
  uint64_t v7 = *v5;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  void *v4 = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v9 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v9;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000468B4(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for AppInformationRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x189uLL);
}

uint64_t assignWithTake for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 104);
    if (v7 != 1)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v7;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 176);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 224);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 248);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v14;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
      uint64_t v15 = *(void *)(a2 + 272);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = v15;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      uint64_t v16 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 336);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 368);
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 384);
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = v21;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
      return a1;
    }
    sub_1000468B4(a1 + 80);
  }
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x139uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppInformationRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 393))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppInformationRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 392) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 393) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 393) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInformationRequest()
{
  return &type metadata for AppInformationRequest;
}

unint64_t sub_100046C34()
{
  unint64_t result = qword_10030A868;
  if (!qword_10030A868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A868);
  }
  return result;
}

unint64_t sub_100046C80()
{
  STACK[0x438] = 44;
  STACK[0x440] = 0xE100000000000000;
  return sub_10001DAC0();
}

uint64_t sub_100046CA0()
{
  return sub_10024F130();
}

void sub_100046CC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for IAPTransaction();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v10);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047280(a1 + 56, (uint64_t)v51);
  sub_100047280((uint64_t)v51, (uint64_t)&v54);
  if (!*(void *)v55)
  {
    sub_100047430();
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    uint64_t v17 = v45;
    sub_100047404();
    uint64_t v18 = 21;
LABEL_4:
    ASOctaneSupportXPCService::HTTPVersion v19 = HTTPVersion.init(major:minor:)(1, 1);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v20 + 32) = v18;
    *(ASOctaneSupportXPCService::HTTPVersion *)(v20 + 40) = v19;
    *(void *)a2 = v20;
    *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
    *(unsigned char *)(a2 + 16) = 2;
    *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 40) = v17;
    *(void *)(a2 + 48) = v3;
    *(unsigned char *)(a2 + 62) = BYTE6(v4);
    *(_WORD *)(a2 + 60) = WORD2(v4);
    *(_DWORD *)(a2 + 56) = v4;
    return;
  }
  long long v52 = v54;
  *(_OWORD *)uint64_t v53 = *(_OWORD *)v55;
  *(void *)&v53[15] = *(void *)&v55[15];
  uint64_t v3 = sub_1000CB7C4();
  unint64_t v14 = v13;
  sub_10024DC80();
  swift_allocObject();
  sub_10024DC70();
  sub_1000472E8();
  sub_10024DC60();
  swift_release();
  uint64_t v4 = v44;
  if (!v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100047430();
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    uint64_t v17 = v45;
    sub_100047404();
    sub_10003F808(v29, v14);
    uint64_t v18 = 21;
    goto LABEL_4;
  }
  uint64_t v42 = v46;
  v38[6] = v47;
  v38[7] = v48;
  uint64_t v21 = v43;
  v38[1] = v45;
  v38[3] = v49;
  uint64_t v39 = v5;
  uint64_t v22 = *(void *)(v5 + 112);
  uint64_t v23 = v50;
  v38[0] = (void *)(v5 + 88);
  sub_10001C2A8((void *)(v5 + 88), v22);
  v38[4] = v23;
  swift_bridgeObjectRetain();
  v38[2] = v21;
  v38[5] = (void *)v4;
  unint64_t v24 = sub_1000A01A0();
  unint64_t v25 = v24;
  if (v24 >> 62) {
    uint64_t v4 = sub_10024F6F0();
  }
  else {
    uint64_t v4 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v41 = v14;
  uint64_t v40 = v3;
  if (!v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
LABEL_20:
    type metadata accessor for InAppPendingTransactionsResponse();
    uint64_t v30 = sub_1000807D4((uint64_t)v26);
    sub_10001C2A8(v38[0], *(void *)(v39 + 112));
    swift_retain();
    sub_1000A021C();
    uint64_t v32 = v31;
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void *)(v30 + 56);
    unint64_t v36 = *(void *)(v30 + 64);
    *(void *)(v30 + 56) = v32;
    *(void *)(v30 + 64) = v34;
    sub_100047398(v32, v34);
    sub_10003F7F4(v35, v36);
    swift_release();
    sub_10003F7F4(v32, v34);
    uint64_t v37 = swift_retain();
    sub_1001E6790(v37);
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    uint64_t v17 = v45;
    sub_100047404();
    sub_10003F808(v40, v41);
    swift_release();
    uint64_t v18 = 3;
    goto LABEL_4;
  }
  uint64_t v43 = _swiftEmptyArrayStorage;
  sub_100038EA8();
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v26 = v43;
    do
    {
      if ((v25 & 0xC000000000000001) != 0) {
        id v27 = (id)sub_10024F380();
      }
      else {
        id v27 = *(id *)(v25 + 8 * v3 + 32);
      }
      sub_1001F99F0(v27, 0, (uint64_t)v12);
      uint64_t v43 = v26;
      unint64_t v28 = v26[2];
      if (v28 >= v26[3] >> 1)
      {
        sub_100038EA8();
        uint64_t v26 = v43;
      }
      ++v3;
      void v26[2] = v28 + 1;
      sub_100047334((uint64_t)v12, (uint64_t)v26+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v28);
    }
    while (v4 != v3);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t type metadata accessor for InAppPendingTransactionsRoute()
{
  return self;
}

uint64_t sub_100047280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030A948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000472E8()
{
  unint64_t result = qword_10030A950;
  if (!qword_10030A950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030A950);
  }
  return result;
}

uint64_t sub_100047334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IAPTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047398(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000473AC(a1, a2);
  }
  return a1;
}

uint64_t sub_1000473AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_100047430()
{
  return sub_1000CB5C8(0x2064696C61766E49, 0xEF74736575716572, 6, v0 - 296);
}

char *sub_100047468(unint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, _OWORD *a4, void *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v11 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_10024F6F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12)
  {
LABEL_21:
    sub_10001DB0C((uint64_t)a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return (char *)v13;
  }
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100038DF8(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = 0;
    unint64_t v13 = v50;
    unint64_t v36 = v11 & 0xC000000000000001;
    uint64_t v37 = v12;
    long long v49 = *a4;
    uint64_t v45 = a6;
    uint64_t v46 = a5;
    uint64_t v39 = a7;
    uint64_t v40 = a4;
    unint64_t v38 = v11;
    do
    {
      if (v36)
      {
        uint64_t v16 = sub_10024F380();
      }
      else
      {
        uint64_t v16 = *(void *)(v11 + 8 * v15 + 32);
        swift_retain();
      }
      type metadata accessor for OctaneSubscription();
      uint64_t v17 = swift_dynamicCastClass();
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 192);
        uint64_t v19 = *(void *)(v17 + 200);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v20 = a2(v18, v19);
        uint64_t v42 = v21;
        uint64_t v43 = v20;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain();
        uint64_t v42 = 0;
        uint64_t v43 = 0;
      }
      if (*(void *)(a7 + 16))
      {
        sub_100048DF8((uint64_t)a4);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v22 = sub_10011ED00();
        if (v23)
        {
          unint64_t v24 = (uint64_t *)(*(void *)(a7 + 56) + 16 * v22);
          uint64_t v25 = v24[1];
          uint64_t v41 = *v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v41 = 0;
          uint64_t v25 = 0;
        }
        uint64_t v26 = (uint64_t)v40;
      }
      else
      {
        sub_100048DF8((uint64_t)a4);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v41 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = (uint64_t)a4;
      }
      uint64_t v27 = *(void *)(v16 + 48);
      uint64_t v44 = *(void *)(v16 + 40);
      __src[0] = 0;
      __src[1] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_10024F330(20);
      swift_bridgeObjectRelease();
      strcpy((char *)__src, "/v1/catalog/");
      BYTE5(__src[1]) = 0;
      HIWORD(__src[1]) = -5120;
      *(_OWORD *)__dst = v49;
      sub_10001DAC0();
      v51._countAndFlagsBits = sub_10024F150();
      sub_10024E800(v51);
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = 47;
      v52._object = (void *)0xE100000000000000;
      sub_10024E800(v52);
      v53._countAndFlagsBits = 0x737070612D6E69;
      v53._object = (void *)0xE700000000000000;
      sub_10024E800(v53);
      v54._countAndFlagsBits = 47;
      v54._object = (void *)0xE100000000000000;
      sub_10024E800(v54);
      uint64_t v29 = *(void *)(v16 + 40);
      unint64_t v28 = *(void **)(v16 + 48);
      swift_bridgeObjectRetain();
      v55._countAndFlagsBits = v29;
      v55._object = v28;
      sub_10024E800(v55);
      swift_bridgeObjectRelease();
      uint64_t v30 = __src[0];
      uint64_t v31 = __src[1];
      sub_1000E570C(v16, v43, v42, v26, v46, v45, v41, v25, (uint64_t)__src);
      swift_release();
      uint64_t v50 = v13;
      unint64_t v33 = v13[2];
      unint64_t v32 = v13[3];
      if (v33 >= v32 >> 1)
      {
        sub_100038DF8((char *)(v32 > 1), v33 + 1, 1);
        unint64_t v13 = v50;
      }
      ++v15;
      memcpy(__dst, __src, sizeof(__dst));
      v13[2] = v33 + 1;
      unint64_t v34 = &v13[31 * v33];
      v34[4] = v44;
      v34[5] = v27;
      v34[6] = v30;
      v34[7] = v31;
      memcpy(v34 + 8, __dst, 0xD8uLL);
      unint64_t v11 = v38;
      a7 = v39;
      a4 = v40;
    }
    while (v37 != v15);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004784C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(sub_10008A5FC(a3, a4) + 56);
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100026DD8(v6, a1, a2);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000478D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = v2;
  uint64_t v7 = sub_100212134();
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016B858(v7, v8, v9, (uint64_t)v18);
  sub_1000458B4((uint64_t)v18, (uint64_t)__src, &qword_10030AA28);
  if (sub_100048738((uint64_t)__src) == 1)
  {
    sub_1000CB5C8(0x2064696C61766E49, 0xEF74736575716572, 6, (uint64_t)__dst);
    uint64_t v10 = __dst[0];
    uint64_t v11 = __dst[1];
    uint64_t v12 = __dst[2];
    uint64_t v13 = __dst[3];
    unint64_t v14 = LODWORD(__dst[4]) | ((unint64_t)WORD2(__dst[4]) << 32) | ((unint64_t)BYTE6(__dst[4]) << 48);
    sub_100022D68();
    sub_100049038();
    uint64_t result = sub_100022D50();
    uint64_t v16 = result;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = 21;
    *(_WORD *)(result + 40) = v4;
    *(_WORD *)(result + 42) = v3;
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  else
  {
    memcpy(__dst, __src, 0x1C1uLL);
    sub_100047B6C(__dst);
    sub_100048750(v18);
    sub_100217F00();
    uint64_t v10 = v18[57];
    uint64_t v11 = v18[58];
    uint64_t v12 = v18[59];
    uint64_t v13 = v18[60];
    unint64_t v14 = v19 | ((unint64_t)v20 << 32) | ((unint64_t)v21 << 48);
    sub_100022D68();
    sub_100049038();
    uint64_t result = sub_100022D50();
    uint64_t v16 = result;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = 3;
    *(_WORD *)(result + 40) = 0;
    uint64_t v17 = &off_1002D6798;
    *(_WORD *)(result + 42) = v3;
  }
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = v17;
  *(unsigned char *)(a2 + 16) = 2;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 62) = BYTE6(v14);
  *(_WORD *)(a2 + 60) = WORD2(v14);
  *(_DWORD *)(a2 + 56) = v14;
  return result;
}

uint64_t sub_100047B6C(uint64_t *a1)
{
  uint64_t v3 = a1[6];
  if (v3
    || (sub_1000458B4((uint64_t)(a1 + 16), (uint64_t)v65, &qword_10030AA38),
        sub_1000458B4((uint64_t)v65, (uint64_t)&v78, &qword_10030AA38),
        v78))
  {
    uint64_t v41 = v1;
    unint64_t v38 = (void *)(v1 + 48);
    sub_10001C2A8((void *)(v1 + 48), *(void *)(v1 + 72));
    uint64_t v4 = a1[16];
    uint64_t v44 = a1[1];
    uint64_t v45 = *a1;
    sub_10008A5FC(*a1, v44);
    uint64_t v40 = sub_1000FE40C(v3, v4);
    swift_release();
    uint64_t v39 = a1;
    sub_1000458B4((uint64_t)(a1 + 4), (uint64_t)v64, &qword_10030AA30);
    sub_1000458B4((uint64_t)v64, (uint64_t)&v75, &qword_10030AA30);
    uint64_t v5 = v76;
    if (!v76) {
      goto LABEL_14;
    }
    uint64_t v6 = v75;
    if (qword_100308D78 != -1)
    {
      uint64_t v35 = v76;
      uint64_t v36 = v75;
      swift_once();
      uint64_t v6 = v36;
      uint64_t v5 = v35;
    }
    uint64_t v7 = *(void *)(qword_10034C0A0 + 16);
    if (v7)
    {
      uint64_t v8 = (uint64_t *)(qword_10034C0A0 + 56);
      while (1)
      {
        uint64_t v10 = *(v8 - 3);
        uint64_t v9 = *(v8 - 2);
        uint64_t v11 = *v8;
        uint64_t v12 = v8[2];
        uint64_t v47 = v8[1];
        uint64_t v48 = *(v8 - 1);
        uint64_t v13 = v8[4];
        uint64_t v49 = v8[3];
        uint64_t v50 = v8[5];
        uint64_t v51 = v8[6];
        if (v10 == v6 && v9 == v5) {
          break;
        }
        uint64_t v15 = v6;
        uint64_t v16 = v5;
        if (sub_10024FA60()) {
          goto LABEL_17;
        }
        v8 += 10;
        --v7;
        uint64_t v5 = v16;
        uint64_t v6 = v15;
        if (!v7) {
          goto LABEL_14;
        }
      }
      uint64_t v10 = v6;
LABEL_17:
      uint64_t v37 = v10;
      uint64_t v20 = v9;
      swift_bridgeObjectRetain();
      uint64_t v46 = v11;
      swift_bridgeObjectRetain();
      uint64_t v43 = v12;
      swift_bridgeObjectRetain();
      uint64_t v42 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = v38;
      uint64_t v18 = v47;
      uint64_t v19 = v48;
    }
    else
    {
LABEL_14:
      uint64_t v17 = v38;
      sub_10001C2A8(v38, *(void *)(v41 + 72));
      sub_10008AFE8();
      uint64_t v50 = v61;
      uint64_t v51 = v62;
      uint64_t v49 = v59;
      uint64_t v18 = v57;
      uint64_t v42 = v60;
      uint64_t v43 = v58;
      uint64_t v19 = v55;
      uint64_t v46 = v56;
      uint64_t v20 = v54;
      uint64_t v37 = v53;
    }
    sub_1000458B4((uint64_t)(v39 + 2), (uint64_t)v63, &qword_10030AA30);
    sub_1000458B4((uint64_t)v63, (uint64_t)v77, &qword_10030AA30);
    if (v77[1] && (type metadata accessor for OctaneLocale(), (uint64_t v23 = sub_1000EFD68()) != 0))
    {
      unint64_t v24 = (void *)v23;
      uint64_t v25 = v41;
    }
    else
    {
      uint64_t v25 = v41;
      sub_10001C2A8(v17, *(void *)(v41 + 72));
      unint64_t v24 = (void *)sub_10008A7F0();
    }
    *(void *)&long long v66 = v37;
    *((void *)&v66 + 1) = v20;
    uint64_t v67 = v19;
    uint64_t v68 = v46;
    uint64_t v69 = v18;
    uint64_t v70 = v43;
    uint64_t v71 = v49;
    uint64_t v72 = v42;
    uint64_t v73 = v50;
    uint64_t v74 = v51;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_10024E510();
    sub_100027788((uint64_t)v17, (uint64_t)v52);
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = v26;
    sub_10002F754(v52, (uint64_t)(v27 + 3));
    memcpy(v27 + 8, v39, 0x1C1uLL);
    v27[65] = v24;
    sub_10001C2A8(v17, *(void *)(v25 + 72));
    swift_retain();
    swift_retain();
    sub_100048C3C(v39);
    uint64_t v28 = sub_10008A770(31, v45, v44);
    unint64_t v30 = v29;
    Swift::Int v31 = sub_10024E510();
    sub_100048C3C(v39);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100048278(v31, (unint64_t)v40, v25, v39, v28, v30);
    swift_bridgeObjectRelease();
    uint64_t v33 = v39[15];
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_100047468((unint64_t)v40, sub_100048C28, (uint64_t)v27, &v66, v24, v33, v32);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v34;
  }
  else
  {
    sub_100022A5C();
    swift_allocError();
    void *v21 = 0;
    v21[1] = 0;
    void v21[2] = 21;
    return swift_willThrow();
  }
}

uint64_t sub_1000480E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  swift_beginAccess();
  uint64_t v10 = *(void *)(a3 + 16);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_10011ED00();
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v13;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_10001C2A8(a4, a4[3]);
  if (sub_10004784C(a1, a2, *a5, a5[1]))
  {
    uint64_t v13 = sub_10016D5F4();
    uint64_t v15 = v14;
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_10020C758(v13, v15, a1, a2);
  }
  else
  {
    sub_10020C220(a1, a2, v16, v17, v18, v19, v20, v21, v23, v24);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v13;
}

uint64_t sub_100048278(Swift::Int a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t isUniquelyReferenced_nonNull_native = a2;
  if (a2 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_10024F6F0();
    if (v8) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100048E64(a4);
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_33;
  }
LABEL_3:
  unint64_t v62 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v9 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v9 = a5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v57 = v9;
  uint64_t v10 = 4;
  uint64_t v59 = v8;
  uint64_t v60 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    if (v62)
    {
      unint64_t v11 = (void *)sub_10024F380();
    }
    else
    {
      unint64_t v11 = *(void **)(isUniquelyReferenced_nonNull_native + 8 * v10);
      swift_retain();
    }
    uint64_t v12 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v13 = (void *)v11[16];
    if (v13)
    {
      uint64_t v63 = v10 - 3;
      uint64_t v64 = v10;
      uint64_t v14 = v11[15];
      type metadata accessor for AssetRoute();
      uint64_t v15 = *a4;
      uint64_t v16 = (void *)a4[1];
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_100064FE8(v14, v13, v15, v16);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = sub_1001CF778(v17, v19);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v23 = v11[10];
      uint64_t v24 = v11[11];
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = (void *)a1;
      unint64_t v25 = sub_10011ED00();
      uint64_t v27 = *(void *)(a1 + 16);
      BOOL v28 = (v26 & 1) == 0;
      a1 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_35;
      }
      unint64_t v29 = v25;
      char v30 = v26;
      sub_100019524(&qword_10030AA40);
      if (sub_10024F630(isUniquelyReferenced_nonNull_native, a1))
      {
        unint64_t v31 = sub_10011ED00();
        if ((v30 & 1) != (v32 & 1)) {
          goto LABEL_41;
        }
        unint64_t v29 = v31;
      }
      a1 = (Swift::Int)v65;
      if (v30)
      {
        uint64_t v33 = (uint64_t *)(v65[7] + 16 * v29);
        *uint64_t v33 = v20;
        v33[1] = v22;
      }
      else
      {
        v65[(v29 >> 6) + 8] |= 1 << v29;
        uint64_t v46 = (void *)(v65[6] + 16 * v29);
        void *v46 = v23;
        v46[1] = v24;
        uint64_t v47 = (uint64_t *)(v65[7] + 16 * v29);
        *uint64_t v47 = v20;
        v47[1] = v22;
        uint64_t v48 = v65[2];
        BOOL v49 = __OFADD__(v48, 1);
        uint64_t v50 = v48 + 1;
        if (v49) {
          goto LABEL_36;
        }
        v65[2] = v50;
        swift_bridgeObjectRetain();
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v59;
      uint64_t isUniquelyReferenced_nonNull_native = v60;
LABEL_31:
      uint64_t v12 = v63;
      uint64_t v10 = v64;
      goto LABEL_32;
    }
    if (v57) {
      break;
    }
    swift_release();
LABEL_32:
    ++v10;
    if (v12 == v8) {
      goto LABEL_33;
    }
  }
  uint64_t v63 = v10 - 3;
  uint64_t v64 = v10;
  uint64_t v34 = v11[10];
  uint64_t v35 = v11[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  long long v66 = (void *)a1;
  unint64_t v37 = sub_10011ED00();
  uint64_t v39 = *(void *)(a1 + 16);
  BOOL v40 = (v38 & 1) == 0;
  a1 = v39 + v40;
  if (__OFADD__(v39, v40)) {
    goto LABEL_37;
  }
  unint64_t v41 = v37;
  char v42 = v38;
  sub_100019524(&qword_10030AA40);
  if (!sub_10024F630(v36, a1))
  {
LABEL_22:
    a1 = (Swift::Int)v66;
    if (v42)
    {
      uint64_t v45 = (void *)(v66[7] + 16 * v41);
      *uint64_t v45 = a5;
      v45[1] = a6;
    }
    else
    {
      v66[(v41 >> 6) + 8] |= 1 << v41;
      uint64_t v51 = (void *)(v66[6] + 16 * v41);
      *uint64_t v51 = v34;
      v51[1] = v35;
      Swift::String v52 = (void *)(v66[7] + 16 * v41);
      *Swift::String v52 = a5;
      v52[1] = a6;
      uint64_t v53 = v66[2];
      BOOL v49 = __OFADD__(v53, 1);
      uint64_t v54 = v53 + 1;
      if (v49) {
        goto LABEL_38;
      }
      v66[2] = v54;
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  unint64_t v43 = sub_10011ED00();
  if ((v42 & 1) == (v44 & 1))
  {
    unint64_t v41 = v43;
    goto LABEL_22;
  }
LABEL_41:
  uint64_t result = sub_10024FB70();
  __break(1u);
  return result;
}

uint64_t sub_1000486C4()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1000486CC()
{
  uint64_t v0 = sub_100094D84();
  swift_unknownObjectRelease();
  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for CheddarFetchRoute()
{
  return self;
}

uint64_t sub_100048738(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t *sub_100048750(uint64_t *a1)
{
  sub_100048804(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20]);
  return a1;
}

void sub_100048804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100045DA0(a18, a19, a20, a21);
  }
}

uint64_t sub_100048AD8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100048B10()
{
  swift_release();
  sub_10001C2EC(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 224) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return _swift_deallocObject(v0, 528, 7);
}

uint64_t sub_100048C28(uint64_t a1, uint64_t a2)
{
  return sub_1000480E4(a1, a2, v2[2], v2 + 3, v2 + 8);
}

void *sub_100048C3C(void *a1)
{
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100045AC0(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_100048DF8(uint64_t a1)
{
  return a1;
}

void *sub_100048E64(void *a1)
{
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100045DA0(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_100049038()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void ByteBufferFoundationError.hash(into:)()
{
}

uint64_t sub_10004907C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_10024FA60();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int ByteBufferFoundationError.hashValue.getter()
{
  return sub_10024FC70();
}

uint64_t sub_100049140()
{
  return 0x726F727265;
}

uint64_t sub_100049154(void *a1)
{
  uint64_t v2 = sub_100019524(&qword_10030ABE0);
  sub_10001B550();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_1000496E0();
  sub_10024FD40();
  sub_10024F940();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v2);
}

uint64_t sub_100049268(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_10030ABF0);
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t)sub_10001C2A8(a1, a1[3]);
  sub_1000496E0();
  sub_10024FD20();
  if (!v1)
  {
    uint64_t v10 = sub_10024F830();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  }
  sub_10001C2EC((uint64_t)a1);
  return v10;
}

Swift::Int sub_1000493A0()
{
  return sub_10024FC70();
}

uint64_t sub_1000493E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004907C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100049410(uint64_t a1)
{
  unint64_t v2 = sub_1000496E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004944C(uint64_t a1)
{
  unint64_t v2 = sub_1000496E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100049488@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100049268(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000494B4(void *a1)
{
  return sub_100049154(a1);
}

uint64_t sub_1000494D0(uint64_t a1, char a2, uint64_t a3)
{
  char v5 = a2 & 1;
  type metadata accessor for InAppTransactionDoneResponse();
  swift_allocObject();
  uint64_t v6 = sub_1000CC340();
  *(unsigned char *)(v6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  swift_retain();
  sub_1000CC3B0(a1, v5);
  *(void *)(v6 + 48) = a3;
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100049550()
{
  uint64_t v0 = sub_1000CC378();
  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for InAppTransactionDoneResponse()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InAppTransactionDoneErrorResponse()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InAppTransactionDoneErrorResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InAppTransactionDoneErrorResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InAppTransactionDoneErrorResponse()
{
  return &type metadata for InAppTransactionDoneErrorResponse;
}

unint64_t sub_1000496E0()
{
  unint64_t result = qword_10030ABE8;
  if (!qword_10030ABE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030ABE8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InAppTransactionDoneErrorResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000497C8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for InAppTransactionDoneErrorResponse.CodingKeys()
{
  return &type metadata for InAppTransactionDoneErrorResponse.CodingKeys;
}

unint64_t sub_100049804()
{
  unint64_t result = qword_10030ABF8;
  if (!qword_10030ABF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030ABF8);
  }
  return result;
}

unint64_t sub_100049854()
{
  unint64_t result = qword_10030AC00;
  if (!qword_10030AC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030AC00);
  }
  return result;
}

unint64_t sub_1000498A4()
{
  unint64_t result = qword_10030AC08;
  if (!qword_10030AC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030AC08);
  }
  return result;
}

char *sub_1000498F4(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
      unint64_t result = sub_100038E88(0, v7 & ~(v7 >> 63), 0);
      if (v7 < 0) {
        break;
      }
      uint64_t v9 = 0;
      uint64_t v10 = v17;
      unint64_t v15 = v6 & 0xC000000000000001;
      a4 &= 1u;
      unint64_t v11 = v6;
      while (v7 != v9)
      {
        if (v15)
        {
          uint64_t v12 = sub_10024F380();
        }
        else
        {
          uint64_t v12 = *(void *)(v6 + 8 * v9 + 32);
          swift_retain();
        }
        swift_retain();
        sub_100048DF8(a3);
        sub_1000878C8(v12, a3, a4, __src);
        uint64_t v17 = v10;
        unint64_t v14 = v10[2];
        unint64_t v13 = v10[3];
        if (v14 >= v13 >> 1)
        {
          sub_100038E88((char *)(v13 > 1), v14 + 1, 1);
          uint64_t v10 = v17;
        }
        ++v9;
        v10[2] = v14 + 1;
        memcpy(&v10[28 * v14 + 4], __src, 0xD9uLL);
        unint64_t v6 = v11;
        if (v7 == v9)
        {
          swift_release();
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_10024F6F0();
      swift_bridgeObjectRelease();
      if (!v7) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_release();
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_16:
    sub_10001DB0C(a3);
    return (char *)v10;
  }
  return result;
}

uint64_t sub_100049AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = v2;
  uint64_t v7 = sub_100212134();
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_10016BDE4(v7, v8, (uint64_t)v17);
  sub_100049F38((uint64_t)v17, (uint64_t)__src);
  if (sub_100048738((uint64_t)__src) == 1)
  {
    sub_1000CB5C8(0x2064696C61766E49, 0xEF74736575716572, 6, (uint64_t)__dst);
    uint64_t v9 = __dst[0];
    uint64_t v10 = __dst[1];
    uint64_t v11 = __dst[2];
    uint64_t v12 = __dst[3];
    unint64_t v13 = LODWORD(__dst[4]) | ((unint64_t)WORD2(__dst[4]) << 32) | ((unint64_t)BYTE6(__dst[4]) << 48);
    sub_100022D68();
    sub_100049038();
    uint64_t result = sub_100022D50();
    uint64_t v15 = result;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = 21;
    *(_WORD *)(result + 40) = v4;
    *(_WORD *)(result + 42) = v3;
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  else
  {
    memcpy(__dst, __src, 0x1C1uLL);
    sub_100049D4C(__dst, v18);
    sub_100048750(v17);
    sub_1001E640C(v18);
    uint64_t v9 = v19;
    uint64_t v10 = v20;
    uint64_t v11 = v21;
    uint64_t v12 = v22;
    unint64_t v13 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 48);
    sub_100022D68();
    sub_100049038();
    uint64_t result = sub_100022D50();
    uint64_t v15 = result;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = 3;
    *(_WORD *)(result + 40) = 0;
    uint64_t v16 = &off_1002D68C8;
    *(_WORD *)(result + 42) = v3;
  }
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 16) = 2;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v12;
  *(unsigned char *)(a2 + 62) = BYTE6(v13);
  *(_WORD *)(a2 + 60) = WORD2(v13);
  *(_DWORD *)(a2 + 56) = v13;
  return result;
}

uint64_t sub_100049D4C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = v2;
    sub_10001C2A8((void *)(v4 + 48), *(void *)(v4 + 72));
    sub_10008A5FC(*a1, a1[1]);
    uint64_t v7 = sub_1000FE40C(v3, 0);
    swift_release();
    sub_10001C2A8((void *)(v4 + 48), *(void *)(v4 + 72));
    uint64_t v8 = sub_10008A7F0();
    sub_10001C2A8((void *)(v4 + 48), *(void *)(v4 + 72));
    sub_10008AFE8();
    swift_retain();
    sub_100048DF8((uint64_t)v12);
    uint64_t v9 = sub_1000498F4((unint64_t)v7, v8, (uint64_t)v12, 0);
    swift_release();
    sub_10001DB0C((uint64_t)v12);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 3157553;
    a2[1] = 0xE300000000000000;
    a2[2] = 0x61502D6472696854;
    a2[3] = 0xEB00000000797472;
    a2[4] = v9;
  }
  else
  {
    sub_100022A5C();
    swift_allocError();
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = 21;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100049EE4()
{
  uint64_t v0 = sub_100094D84();
  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for FetchSoftwareAddOnsRoute()
{
  return self;
}

uint64_t sub_100049F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030AA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100049FA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10024F450();
    uint64_t v4 = sub_10004EA40(a1);
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t v6 = v4;
      if (v4 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_17;
          }
          uint64_t v8 = *(void *)(a1 + 56) + 16 * v6;
          uint64_t v9 = *(void *)v8;
          uint64_t v10 = *(unsigned __int8 *)(v8 + 8);
          int v12 = v5;
          swift_getObjectType();
          static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
          sub_10018E878();
          Scheduled._promise.getter(v9);
          swift_retain();
          ChannelPipeline.close(mode:promise:)();
          swift_release();
          swift_retain();
          j__swift_release(v9, v10);
          j__swift_release(v9, v10);
          sub_10024F400();
          sub_10024F490();
          sub_10024F4A0();
          sub_10024F420();
          if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_18;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_19;
          }
          if (v12 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_20;
          }
          uint64_t v11 = sub_10024F2A0();
          if (!--v2) {
            return &_swiftEmptyArrayStorage;
          }
          unint64_t v6 = v11;
          if ((v11 & 0x8000000000000000) == 0)
          {
            int v5 = *(_DWORD *)(a1 + 36);
            if (v11 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_13;
        }
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x10004A210);
      }
    }
LABEL_13:
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10004A220()
{
  sub_100019524(&qword_10030AE38);
  uint64_t v0 = swift_allocObject();
  sub_10004F1EC(v0, (uint64_t)&protocol witness table for EmbeddedEventLoop);
  return v0;
}

uint64_t sub_10004A268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A28C(a1, a2, a3, a4, &qword_10030AE38);
}

uint64_t sub_10004A274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A28C(a1, a2, a3, a4, &qword_10030AE40);
}

uint64_t sub_10004A280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A28C(a1, a2, a3, a4, &qword_10030AE48);
}

uint64_t sub_10004A28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_100019524(a5);
  uint64_t v5 = swift_allocObject();
  sub_10004F1EC(v5, (uint64_t)&protocol witness table for SelectableEventLoop);
  return v5;
}

uint64_t EmbeddedChannel.WrongTypeError.actual.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_10004A2D8(uint64_t (*a1)(void))
{
  BOOL v2 = 1;
  if ((v1[152] & 1) == 0)
  {
    v1[152] = 1;
    uint64_t v4 = (uint64_t (**)(void))(*(void *)v1 + 648);
    uint64_t v5 = *v4;
    if ((*v4)())
    {
      unint64_t v6 = (uint64_t (**)(void))(*(void *)v1 + 584);
      uint64_t v7 = *v6;
      if ((*v6)())
      {
        unint64_t v13 = *(uint64_t (**)(void))(*(void *)v1 + 616);
        do
        {
          __int16 v8 = v13();
          BOOL v2 = (v8 & 1) == 0;
          char v9 = v8;
          if ((v8 & 0x100) != 0)
          {
            uint64_t v10 = *(void *)(a1() + 56);
            uint64_t ObjectType = swift_getObjectType();
            EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift", 117, 2, 1173, ObjectType, v10);
            if (sub_1000B05F8())
            {
              sub_1000B1558();
              swift_release();
            }
            swift_release();
          }
        }
        while ((v9 & 1) == 0 && (v5() & 1) != 0 && (v7() & 1) != 0);
      }
    }
    v1[152] = 0;
  }
  return v2;
}

uint64_t sub_10004A5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(v4 + 88)) {
    return (*(uint64_t (**)(void))(a4 + 96))(*(void *)(v4 + 16));
  }
  return result;
}

uint64_t sub_10004A630()
{
  sub_10004A864((uint64_t)sub_10018EF48, (void (*)(uint64_t))sub_10019050C);
  uint64_t result = sub_10004A2D8(sub_10018E878);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584))();
    if (result)
    {
      return sub_10018F268();
    }
  }
  return result;
}

uint64_t sub_10004A6E8()
{
  sub_10004A864((uint64_t)sub_10018EF30, (void (*)(uint64_t))sub_10019050C);
  uint64_t result = sub_10004A2D8(sub_10018E878);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584))();
    if (result)
    {
      return sub_10018F268();
    }
  }
  return result;
}

uint64_t sub_10004A7A0()
{
  uint64_t v1 = sub_10004A864((uint64_t)sub_10018EF30, (void (*)(uint64_t))sub_10019050C);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 688))(v1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584))();
    if (result)
    {
      return sub_10018F268();
    }
  }
  return result;
}

uint64_t sub_10004A864(uint64_t result, void (*a2)(uint64_t))
{
  if (v2[12])
  {
    uint64_t v4 = (void (*)(void, uint64_t))result;
    uint64_t v5 = *(void (**)(uint64_t))(*v2 + 640);
    uint64_t v6 = swift_retain();
    v5(v6);
    v2[12] = 0;
    swift_release();
    v4(0, 1);
    uint64_t v7 = swift_retain();
    a2(v7);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10004A994(uint64_t *a1)
{
  sub_10024F330(40);
  sub_100019524(a1);
  sub_10024F5C0();
  v2._object = (void *)0x800000010027B1B0;
  v2._countAndFlagsBits = 0xD000000000000026;
  sub_10024E800(v2);
  sub_10024F670();
  __break(1u);
}

uint64_t sub_10004AA54(uint64_t a1)
{
  sub_1000C8E78(a1);
  uint64_t result = sub_1000C7EEC();
  if (result)
  {
    sub_10002F0C8();
    uint64_t v3 = swift_allocError();
    *(void *)uint64_t v4 = 1;
    *(unsigned char *)(v4 + 8) = 3;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v1 + 760))(v3, 2, 0);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10004AB3C(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1();
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t result = sub_1000F152C();
  if (result)
  {
    if (sub_1000F152C())
    {
      int v5 = sub_100192770(*(unsigned int *)(v3 + 16), 0xFFFFLL, 4103);
      if (v5) {
        int v6 = v5;
      }
      else {
        int v6 = 54;
      }
      if (v5) {
        unint64_t v7 = 0xD00000000000001CLL;
      }
      else {
        unint64_t v7 = 0xD000000000000050;
      }
      if (v5) {
        unint64_t v8 = 0x800000010027B130;
      }
      else {
        unint64_t v8 = 0x800000010027B150;
      }
      sub_100028EB4();
      uint64_t v9 = swift_allocError();
      *(void *)uint64_t v10 = v7;
      *(void *)(v10 + 8) = v8;
      *(_DWORD *)(v10 + 16) = v6;
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, void))(*(void *)v2 + 760);
      swift_bridgeObjectRetain();
      v11(v9, 2, 0);
      swift_errorRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_100028EB4();
      swift_allocError();
      *(void *)uint64_t v12 = 0xD00000000000001FLL;
      *(void *)(v12 + 8) = 0x800000010027B110;
      *(_DWORD *)(v12 + 16) = 9;
      swift_willThrow();
      sub_10004F218();
      v13();
      return swift_errorRelease();
    }
  }
  return result;
}

uint64_t sub_10004AD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10004F158(a1, a2);
  uint64_t v8 = v7(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104))(v4, v8, v3, a3);
}

uint64_t sub_10004ADA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 88))
  {
    sub_10002F2C8();
    swift_allocError();
    unsigned char *v6 = 2;
    return swift_willThrow();
  }
  else
  {
    uint64_t v9 = sub_10004F158(a1, a2);
    uint64_t v11 = v10(v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 88))(v5, v11, v4, a3);
  }
}

void sub_10004AE50()
{
  sub_10003C984();
  sub_10004F294();
  sub_10024F400();
  sub_10024F490();
  sub_10024F4A0();
  sub_10024F420();
  if (v1)
  {
    type metadata accessor for ScheduledTask();
    while (1)
    {
      uint64_t v3 = *v0;
      sub_10004F288();
      if (v5) {
        break;
      }
      unint64_t v6 = v1 - 1;
      unint64_t v7 = (v1 - 1) >> 1;
      if (v7 >= v4) {
        goto LABEL_17;
      }
      uint64_t v8 = sub_10004F274();
      if ((static ScheduledTask.< infix(_:_:)(v8, v9) & 1) == 0) {
        goto LABEL_15;
      }
      if (v1 != v7)
      {
        uint64_t v10 = *(void *)(v2 + 8 * v1);
        uint64_t v11 = *(void *)(v2 + 8 * v7);
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v0 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v3 = sub_100120718(v3);
          *uint64_t v0 = v3;
        }
        sub_10004F288();
        if (v5) {
          goto LABEL_18;
        }
        *(void *)(v3 + 8 * v1 + 32) = v11;
        swift_release();
        sub_10024F420();
        uint64_t v13 = *v0;
        char v14 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v0 = v13;
        if ((v14 & 1) == 0)
        {
          uint64_t v13 = sub_100120718(v13);
          *uint64_t v0 = v13;
        }
        if (v7 >= *(void *)(v13 + 16)) {
          goto LABEL_19;
        }
        *(void *)(v13 + 8 * v7 + 32) = v10;
        swift_release();
        sub_10024F420();
      }
      unint64_t v1 = (v1 - 1) >> 1;
      if (v6 <= 1) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_10003C8C8();
  }
}

void sub_10004AFA0()
{
  sub_10003C984();
  sub_10004F294();
  sub_10024F400();
  sub_10024F490();
  sub_10024F4A0();
  sub_10024F420();
  if (v1)
  {
    type metadata accessor for EmbeddedScheduledTask();
    while (1)
    {
      uint64_t v3 = *v0;
      sub_10004F288();
      if (v5) {
        break;
      }
      unint64_t v6 = v1 - 1;
      unint64_t v7 = (v1 - 1) >> 1;
      if (v7 >= v4) {
        goto LABEL_17;
      }
      uint64_t v8 = sub_10004F274();
      if ((sub_1001FC77C(v8, v9) & 1) == 0) {
        goto LABEL_15;
      }
      if (v1 != v7)
      {
        uint64_t v10 = *(void *)(v2 + 8 * v1);
        uint64_t v11 = *(void *)(v2 + 8 * v7);
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v0 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v3 = sub_100120718(v3);
          *uint64_t v0 = v3;
        }
        sub_10004F288();
        if (v5) {
          goto LABEL_18;
        }
        *(void *)(v3 + 8 * v1 + 32) = v11;
        swift_release();
        sub_10024F420();
        uint64_t v13 = *v0;
        char v14 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v0 = v13;
        if ((v14 & 1) == 0)
        {
          uint64_t v13 = sub_100120718(v13);
          *uint64_t v0 = v13;
        }
        if (v7 >= *(void *)(v13 + 16)) {
          goto LABEL_19;
        }
        *(void *)(v13 + 8 * v7 + 32) = v10;
        swift_release();
        sub_10024F420();
      }
      unint64_t v1 = (v1 - 1) >> 1;
      if (v6 <= 1) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_10003C8C8();
  }
}

void withAutoReleasePool<A>(_:)(void (*a1)(void))
{
  a1();
}

uint64_t SelectableEventLoop._pendingTaskPop.getter()
{
  sub_10004F1B0();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SelectableEventLoop._pendingTaskPop.setter(char a1)
{
  uint64_t result = sub_10004F230();
  *(unsigned char *)(v1 + 32) = a1;
  return result;
}

uint64_t (*SelectableEventLoop._pendingTaskPop.modify())()
{
  return j__swift_endAccess;
}

uint64_t SelectableEventLoop._scheduledTasks.getter()
{
  return swift_retain();
}

uint64_t SelectableEventLoop._scheduledTasks.setter(uint64_t a1)
{
  sub_10004F230();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*SelectableEventLoop._scheduledTasks.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SelectableEventLoop._succeededVoidFuture.getter()
{
  return swift_retain();
}

uint64_t SelectableEventLoop._succeededVoidFuture.setter(uint64_t a1)
{
  sub_10004F230();
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*SelectableEventLoop._succeededVoidFuture.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SelectableEventLoop._tasksLock.getter()
{
  return swift_retain();
}

BOOL SelectableEventLoop.inEventLoop.getter()
{
  return sub_1000C6ADC();
}

uint64_t SelectableEventLoop._preconditionSafeToWait(file:line:)()
{
  uint64_t result = sub_1000C6ADC();
  if (result)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for MultiThreadedEventLoopGroup();
  uint64_t v1 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
  uint64_t result = swift_unknownObjectRelease();
  if (v1) {
LABEL_5:
  }
    __break(1u);
  return result;
}

BOOL SelectableEventLoop._validInternalStateToScheduleTasks.getter()
{
  return *(unsigned char *)(v0 + 88) != 3;
}

uint64_t sub_10004B3E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  *(unsigned char *)(v3 + 32) = 0;
  uint64_t v8 = &_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    uint64_t v8 = sub_100019444();
  }
  *(void *)(v3 + 40) = v8;
  *(void *)(v3 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(v3 + 56) = 0;
  uint64_t v9 = (void *)(v3 + 56);
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(v3 + 72) = Lock.init()();
  swift_allocObject();
  *(void *)(v3 + 80) = Lock.init()();
  *(_WORD *)(v3 + 88) = 0;
  swift_allocObject();
  *(void *)(v3 + 216) = Lock.init()();
  sub_100019524(&qword_100308F20);
  sub_100019568();
  *(void *)(v3 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_10024E510();
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_slowAlloc();
  *(void *)(v4 + 96) = v10;
  uint64_t v11 = swift_slowAlloc();
  *(void *)(v4 + 104) = v11;
  *(void *)(v4 + 112) = v10;
  *(void *)(v4 + 120) = 1024;
  *(void *)(v4 + 128) = v11;
  *(void *)(v4 + 136) = 1024;
  uint64_t v12 = swift_slowAlloc();
  *(void *)(v4 + 144) = v12;
  uint64_t v13 = swift_slowAlloc();
  *(void *)(v4 + 152) = v13;
  *(void *)(v4 + 160) = v12;
  *(void *)(v4 + 168) = 1024;
  *(void *)(v4 + 176) = v13;
  *(void *)(v4 + 184) = 1024;
  *(void *)(v4 + 192) = sub_10007AAA0(1024);
  *(void *)(v4 + 200) = v14;
  *(void *)(v4 + 208) = v15;
  swift_beginAccess();
  sub_10007D29C(4096);
  swift_endAccess();
  *(unsigned char *)(v4 + 64) = a3 & 1;
  sub_10004A28C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SelectableEventLoop.swift", 121, 2, 183, &qword_10030AE38);
  uint64_t v16 = sub_10004F2B4();
  sub_1000B44D0(v16, v17, v18, v19, v20, v21, v22, v23, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35,
    v36,
    v37,
    v38);
  swift_release();
  swift_release();
  swift_beginAccess();
  *uint64_t v9 = v4;
  swift_release();
  return v4;
}

uint64_t SelectableEventLoop.deinit()
{
  sub_10003FBCC();
  sub_10003FBCC();
  sub_10003FBCC();
  sub_10003FBCC();
  swift_beginAccess();
  if (*(void *)(v0 + 200)) {
    sub_10003FBCC();
  }
  *(int64x2_t *)(v0 + 200) = vdupq_n_s64(0x7EADBEEFuLL);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SelectableEventLoop.__deallocating_deinit()
{
  SelectableEventLoop.deinit();
  return _swift_deallocClassInstance(v0, 232, 7);
}

uint64_t SelectableEventLoop.scheduleTask<A>(deadline:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = v4;
  uint64_t v10 = EventLoop.makePromise<A>(of:file:line:)(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SelectableEventLoop.swift", 121, 2, 252, *v4, a4, (uint64_t)&protocol witness table for SelectableEventLoop);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a4;
  v11[3] = v10;
  uint64_t v11[4] = a2;
  v11[5] = a3;
  uint64_t v12 = sub_10004F2C8();
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  type metadata accessor for ScheduledTask();
  swift_allocObject();
  uint64_t v13 = ScheduledTask.init(_:_:_:)((uint64_t)sub_10004BA24, (uint64_t)v11, (uint64_t)sub_10004BA68, v12, a1);
  uint64_t v14 = sub_10004F2C8();
  *(void *)(v14 + 16) = v5;
  *(void *)(v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = Scheduled.init(promise:cancellationTask:)(v10, (uint64_t)sub_10004E538, v14);
  SelectableEventLoop._schedule0(_:)();
  swift_release();
  swift_release();
  return v15;
}

uint64_t sub_10004B8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t v6 = __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  EventLoopPromise.succeed(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t sub_10004B9EC()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_10004F264();
  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004BA24()
{
  return sub_10004B8E8(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t sub_10004BA30()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004BA68(uint64_t a1)
{
  return EventLoopPromise.fail(_:)(a1);
}

void sub_10004BA70(uint64_t a1, uint64_t a2)
{
  Lock.lock()();
  sub_10004F24C();
  swift_beginAccess();
  unint64_t v4 = sub_1000EFFDC(a2, *(void *)(a1 + 40));
  if ((v5 & 1) == 0)
  {
    sub_1001FC344(v4);
    swift_release();
  }
  swift_endAccess();
  Lock.unlock()();
}

void SelectableEventLoop._schedule0(_:)()
{
  if (sub_1000C6ADC())
  {
    if (*(unsigned char *)(v0 + 88) == 3)
    {
      __break(1u);
    }
    else
    {
      Lock.lock()();
      sub_10004F24C();
      swift_beginAccess();
      sub_10004AE50();
      swift_endAccess();
      Lock.unlock()();
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v1 = swift_retain();
    char v2 = sub_100172468(v1, v0);
    swift_release();
    if (v2) {
      sub_10004E338();
    }
  }
}

uint64_t SelectableEventLoop.scheduleTask<A>(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static NIODeadline.now()();
  uint64_t v9 = static NIODeadline.+ infix(_:_:)(v8, a1);
  return SelectableEventLoop.scheduleTask<A>(deadline:_:)(v9, a2, a3, a4);
}

uint64_t SelectableEventLoop.execute(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  uint64_t v4 = static NIODeadline.now()();
  type metadata accessor for ScheduledTask();
  swift_allocObject();
  ScheduledTask.init(_:_:_:)(a1, a2, (uint64_t)debugOnly(_:), 0, v4);
  SelectableEventLoop._schedule0(_:)();
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SelectableEventLoop._wakeupSelector()()
{
}

void sub_10004BD04(char a1, uint64_t a2)
{
  if (((uint64_t (*)(void))sub_10018E7A4)())
  {
    if (a1)
    {
      sub_10004AB3C(sub_1000C8F64);
    }
    else
    {
      if ((a1 & 0x10) != 0) {
        sub_10004A994(&qword_10030AE58);
      }
      if (a1 & 8) == 0 || (uint64_t v4 = sub_10004A7A0(), (sub_10018E7A4(v4)))
      {
        if ((a1 & 2) != 0)
        {
          swift_beginAccess();
          *(unsigned char *)(a2 + 248) = 1;
          sub_1000C8F64();
        }
        else if ((a1 & 4) != 0)
        {
          sub_1000C94F8();
        }
      }
    }
  }
}

void sub_10004BDB0(uint64_t a1, uint64_t a2)
{
  char v3 = a1;
  if (sub_10018E7A4(a1))
  {
    if (v3)
    {
      sub_10004AB3C(sub_1000C8F64);
    }
    else
    {
      if ((v3 & 0x10) != 0) {
        sub_10004A994(&qword_10030AE60);
      }
      if (v3 & 8) == 0 || (uint64_t v4 = sub_10004A6E8(), (sub_10018E7A4(v4)))
      {
        if ((v3 & 2) != 0)
        {
          swift_beginAccess();
          *(unsigned char *)(a2 + 248) = 1;
          sub_1000C8F64();
        }
        else if ((v3 & 4) != 0)
        {
          sub_1000C94F8();
        }
      }
    }
  }
}

uint64_t sub_10004BE5C(uint64_t a1)
{
  char v1 = a1;
  uint64_t result = sub_10018E7A4(a1);
  if (result)
  {
    if (v1) {
      return sub_10004AA54(result);
    }
    if ((v1 & 0x10) != 0)
    {
      uint64_t v3 = sub_1000CA12C();
    }
    else
    {
      if ((v1 & 8) == 0)
      {
LABEL_9:
        if ((v1 & 2) != 0) {
          return sub_1000CA054();
        }
        if ((v1 & 4) != 0) {
          return sub_1000C908C();
        }
        return result;
      }
      uint64_t v3 = sub_10004A630();
    }
    uint64_t result = sub_10018E7A4(v3);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10004BEC8(uint64_t result)
{
  if (result)
  {
    swift_retain();
    unint64_t v1 = static NIODeadline.now()();
    uint64_t v2 = sub_10014C8DC(v1);
    swift_release();
    if (v2 <= 1) {
      return 1;
    }
    else {
      return v2;
    }
  }
  return result;
}

uint64_t sub_10004BF18()
{
  uint64_t v2 = v0;
  if (sub_1000C6ADC())
  {
    uint64_t v25 = 0;
    Lock.lock()();
    swift_beginAccess();
    uint64_t v3 = sub_10009A144(*(void *)(v0 + 40));
    if (v3) {
      uint64_t v25 = v3;
    }
    Lock.unlock()();
    if ((*(unsigned char *)(v0 + 88) & 0xFE) == 2)
    {
LABEL_5:
      sub_10004E180();
      if (!v1) {
        SelectableEventLoop._succeededVoidFuture.setter(0);
      }
    }
    else
    {
      uint64_t v5 = v0 + 48;
      uint64_t v24 = v0;
      while (1)
      {
        uint64_t v7 = swift_retain();
        uint64_t v8 = sub_10004BEC8(v7);
        char v10 = v9;
        swift_release();
        sub_10004DCAC(v8, v10 & 1, sub_10004E898, v2, (void (*)(unint64_t *))sub_10004E8A0, v2);
        uint64_t v11 = v6;
        if (v1) {
          break;
        }
        swift_beginAccess();
        Lock.lock()();
        while (1)
        {
          sub_10004C8B0(v2, &v25);
          Lock.unlock()();
          uint64_t v12 = *(void *)v5;
          uint64_t v13 = *(void *)(*(void *)v5 + 16);
          if (!v13) {
            break;
          }
          uint64_t v11 = (void *)swift_retain();
          unint64_t v14 = 0;
          uint64_t v2 = v12 + 40;
          do
          {
            if (v14 >= *(void *)(v12 + 16))
            {
              __break(1u);
              goto LABEL_30;
            }
            uint64_t v15 = *(void (**)(void))(v2 - 8);
            ++v14;
            swift_retain();
            v15();
            uint64_t v11 = (void *)swift_release();
            v2 += 16;
          }
          while (v13 != v14);
          swift_release();
          swift_beginAccess();
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v18 = *(void **)v5;
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v19 = v18[2];
            char v20 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v5 = v18;
            if ((v20 & 1) == 0)
            {
              sub_1000390E8();
              uint64_t v18 = *(void **)v5;
            }
            sub_100019524(&qword_10030A3C8);
            swift_arrayDestroy();
            if (v19)
            {
              uint64_t v21 = v18[2] - v19;
              if (v21 < 0) {
                goto LABEL_33;
              }
              memmove(v18 + 4, &v18[2 * v19 + 4], 16 * v21);
              long long v18[2] = v21;
            }
            *(void *)uint64_t v5 = v18;
          }
          else
          {
            uint64_t v22 = &_swiftEmptyArrayStorage;
            if (v18[3] >= 2uLL)
            {
              sub_100019524(&qword_10030A5A0);
              uint64_t v22 = (void *)swift_allocObject();
              size_t v23 = j__malloc_size(v22);
              void v22[2] = 0;
              v22[3] = 2 * ((uint64_t)(v23 - 32) / 16);
            }
            *(void *)uint64_t v5 = v22;
            swift_release();
          }
          swift_endAccess();
          Lock.lock()();
          uint64_t v2 = v24;
        }
        if ((*(unsigned char *)(v2 + 88) & 0xFE) == 2) {
          goto LABEL_5;
        }
      }
LABEL_30:
    }
    swift_release();
    return sub_10004C2BC(v2);
  }
  else
  {
    __break(1u);
    Lock.unlock()();
    __break(1u);
LABEL_33:
    uint64_t result = sub_10024F730();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004C2BC(uint64_t a1)
{
  uint64_t v1 = &_swiftEmptyArrayStorage;
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (uint64_t *)(a1 + 40);
  uint64_t v31 = (unsigned char *)(a1 + 32);
  swift_beginAccess();
  swift_beginAccess();
  unint64_t v32 = 0;
  do
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      sub_10004E8BC(0, v1[2]);
    }
    else
    {
      uint64_t v33 = sub_1001E5968(0, v1[3] >> 1);
      swift_release();
    }
    Lock.lock()();
    *uint64_t v31 = 1;
    sub_10024F450();
    while (1)
    {
      swift_beginAccess();
      uint64_t v3 = *v2;
      uint64_t v4 = *(void *)(*v2 + 16);
      if (!v4) {
        break;
      }
      uint64_t v5 = v3 + 32;
      uint64_t v6 = *(void *)(v3 + 32);
      uint64_t v7 = v4 - 1;
      if (v4 == 1 || (uint64_t v8 = *(void *)(v5 + 8 * v7), v6 == v8))
      {
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v2 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v3 = sub_100120718(v3);
          uint64_t *v2 = v3;
        }
        uint64_t v16 = *(void *)(v3 + 16);
        if (!v16) {
          goto LABEL_44;
        }
        *(void *)(v3 + 16) = v16 - 1;
        sub_10024F420();
LABEL_22:
        swift_release();
        goto LABEL_23;
      }
      type metadata accessor for ScheduledTask();
      char v9 = static ScheduledTask.< infix(_:_:)(v6, v8);
      uint64_t v10 = *(void *)(v5 + 8 * v7);
      if ((v9 & 1) == 0)
      {
        if (static ScheduledTask.< infix(_:_:)(v6, *(void *)(v5 + 8 * v7))) {
          goto LABEL_52;
        }
        swift_retain();
        swift_retain();
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v2 = v3;
        if ((v17 & 1) == 0)
        {
          uint64_t v3 = sub_100120718(v3);
          uint64_t *v2 = v3;
        }
        if (!*(void *)(v3 + 16)) {
          goto LABEL_46;
        }
        swift_retain();
        swift_release();
        *(void *)(v3 + 32) = v10;
        sub_10024F420();
        swift_release();
        uint64_t v18 = *v2;
        if (!*(void *)(*v2 + 16)) {
          goto LABEL_47;
        }
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v2 = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_100120718(v18);
          uint64_t *v2 = v18;
        }
        uint64_t v20 = *(void *)(v18 + 16);
        if (!v20) {
          goto LABEL_50;
        }
        *(void *)(v18 + 16) = v20 - 1;
        sub_10024F420();
        goto LABEL_22;
      }
      swift_retain();
      swift_retain();
      char v11 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v2 = v3;
      if ((v11 & 1) == 0)
      {
        uint64_t v3 = sub_100120718(v3);
        uint64_t *v2 = v3;
      }
      if (!*(void *)(v3 + 16)) {
        goto LABEL_45;
      }
      swift_release();
      *(void *)(v3 + 32) = v10;
      sub_10024F420();
      uint64_t v12 = *v2;
      if (!*(void *)(*v2 + 16)) {
        goto LABEL_48;
      }
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v2 = v12;
      if ((v13 & 1) == 0)
      {
        uint64_t v12 = sub_100120718(v12);
        uint64_t *v2 = v12;
      }
      uint64_t v14 = *(void *)(v12 + 16);
      if (!v14) {
        goto LABEL_49;
      }
      *(void *)(v12 + 16) = v14 - 1;
      sub_10024F420();
      swift_release();
      sub_1001FBC70(0);
LABEL_23:
      swift_endAccess();
      swift_retain();
      sub_10024F400();
      sub_10024F490();
      sub_10024F4A0();
      sub_10024F420();
      swift_release();
    }
    swift_endAccess();
    Lock.unlock()();
    uint64_t v21 = v33[2];
    if (v21)
    {
      swift_retain();
      unint64_t v22 = 0;
      while (v22 < v33[2])
      {
        uint64_t v23 = v33[v22++ + 4];
        sub_10002F2C8();
        uint64_t v24 = swift_allocError();
        *uint64_t v25 = 2;
        BOOL v26 = *(void (**)(uint64_t))(v23 + 32);
        swift_retain();
        v26(v24);
        swift_errorRelease();
        swift_release();
        if (v21 == v22)
        {
          swift_release();
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
LABEL_38:
    uint64_t v1 = v33;
    uint64_t v27 = v33[2];
    if (!v27) {
      break;
    }
  }
  while (v32++ < 0x3E7);
  if (!v27)
  {
    *(unsigned char *)(a1 + 88) = 3;
    return swift_release();
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = sub_10024F670();
  __break(1u);
  return result;
}

void sub_10004C760(uint64_t a1)
{
  *(unsigned char *)(a1 + 32) = 1;
  Lock.unlock()();
}

uint64_t sub_10004C7B8(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  switch(v2 >> 6)
  {
    case 1u:
    case 2u:
      swift_retain();
      sub_10004BDB0(v3, v1);
      break;
    case 3u:
      if (v2) {
        int v4 = 16;
      }
      else {
        int v4 = 2;
      }
      if (v3) {
        uint64_t v5 = v4 | (v3 & 0xFE);
      }
      else {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      }
      swift_retain();
      sub_10004BE5C(v5);
      break;
    default:
      swift_retain();
      sub_10004BD04(v3, v1);
      break;
  }
  return j__swift_release(v1, v2);
}

uint64_t sub_10004C8B0(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 40;
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 40) + 16))
  {
    char v17 = a2;
    unint64_t v5 = static NIODeadline.now()();
    uint64_t v6 = (uint64_t *)(a1 + 48);
    swift_beginAccess();
    for (uint64_t i = *(void *)(a1 + 48);
          *(void *)(i + 16) < *(void *)(i + 24) >> 1 && *(void *)(*(void *)v4 + 16);
          uint64_t i = *v6)
    {
      uint64_t v8 = *(void *)(*(void *)v4 + 32);
      if (sub_10014C8DC(v5) > 0)
      {
        *char v17 = v8;
        swift_retain();
        goto LABEL_13;
      }
      swift_beginAccess();
      swift_retain();
      sub_1001FC4C4(0);
      swift_endAccess();
      swift_release();
      uint64_t v9 = *(void *)(v8 + 16);
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      *(void *)(v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      swift_beginAccess();
      uint64_t v12 = *v6;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v6 = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000390E8();
        uint64_t v12 = *v6;
      }
      unint64_t v14 = *(void *)(v12 + 16);
      if (v14 >= *(void *)(v12 + 24) >> 1)
      {
        sub_1000390E8();
        uint64_t v12 = *v6;
      }
      *(void *)(v12 + 16) = v14 + 1;
      uint64_t v15 = v12 + 16 * v14;
      *(void *)(v15 + 32) = sub_10004E9CC;
      *(void *)(v15 + 40) = v11;
      swift_endAccess();
      swift_release();
    }
  }
  else
  {
    *a2 = 0;
LABEL_13:
    swift_release();
  }
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(a1 + 48) + 16))
  {
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_10004CAEC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10004CB14()
{
  sub_10003C984();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_10024E2A0();
  sub_10001B550();
  uint64_t v32 = v10;
  __chkstk_darwin();
  sub_100026000();
  uint64_t v11 = sub_10024E2D0();
  sub_10001B550();
  uint64_t v13 = v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000C6ADC())
  {
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = v0;
    _OWORD v16[3] = v8;
    v16[4] = v6;
    v16[5] = v4;
    uint64_t v38 = sub_10004EA14;
    uint64_t v39 = v16;
    uint64_t v34 = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_100018758;
    uint64_t v37 = &unk_1002DCE98;
    char v17 = _Block_copy(&v34);
    swift_retain();
    v8;
    swift_retain();
    sub_10024E2C0();
    uint64_t v33 = &_swiftEmptyArrayStorage;
    sub_100029BC0();
    sub_100019524(&qword_100309168);
    sub_100029C10();
    sub_10004F184();
    sub_10024EEB0();
    _Block_release(v17);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
LABEL_5:
    swift_release();
    sub_10003C8C8();
    return;
  }
  uint64_t v29 = v15;
  uint64_t v30 = v4;
  uint64_t v31 = v8;
  uint64_t v18 = v32;
  swift_retain();
  swift_retain();
  Lock.lock()();
  if (*(unsigned char *)(v0 + 89))
  {
    Lock.unlock()();
    swift_release();
    swift_release();
    uint64_t v19 = sub_10004F2C8();
    uint64_t v20 = v30;
    *(void *)(v19 + 16) = v6;
    *(void *)(v19 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
    uint64_t v38 = sub_10004E9F8;
    uint64_t v39 = (void *)v19;
    uint64_t v34 = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_100018758;
    uint64_t v37 = &unk_1002DCE20;
    uint64_t v21 = _Block_copy(&v34);
    swift_retain();
    unint64_t v22 = v29;
    sub_10024E2C0();
    uint64_t v33 = &_swiftEmptyArrayStorage;
    sub_100029BC0();
    sub_100019524(&qword_100309168);
    sub_100029C10();
    sub_10004F184();
    sub_10024EEB0();
    _Block_release(v21);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v11);
    goto LABEL_5;
  }
  *(unsigned char *)(v0 + 89) = 1;
  Lock.unlock()();
  swift_release();
  swift_release();
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v25 = v30;
  uint64_t v24 = v31;
  void v23[2] = v2;
  v23[3] = v24;
  v23[4] = v6;
  v23[5] = v25;
  swift_retain();
  id v26 = v24;
  swift_retain();
  SelectableEventLoop.execute(_:)((uint64_t)sub_10004EA04, (uint64_t)v23);
  sub_10003C8C8();
  swift_release();
}

uint64_t sub_10004CEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v24 = a3;
  uint64_t v7 = sub_10024E2A0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10024E2D0();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)a1;
  char v15 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 88) = 2;
  SelectableEventLoop.execute(_:)((uint64_t)debugOnly(_:), 0);
  swift_retain();
  Lock.lock()();
  *(unsigned char *)(a2 + 89) = 2;
  Lock.unlock()();
  swift_release();
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v22;
  *(void *)(v16 + 16) = v21;
  *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
  *(void *)(v16 + 32) = v14;
  *(unsigned char *)(v16 + 40) = v15;
  aBlock[4] = sub_10004F050;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018758;
  aBlock[3] = &unk_1002DCF10;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  sub_10004F084(v14, v15);
  sub_10024E2C0();
  uint64_t v25 = &_swiftEmptyArrayStorage;
  sub_100029BC0();
  sub_100019524(&qword_100309168);
  sub_100029C10();
  sub_10024F280();
  sub_10024EEB0();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  return swift_release();
}

uint64_t sub_10004D1D0(void (*a1)(uint64_t, uint64_t))
{
  sub_10002F2C8();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = 2;
  a1(v2, 1);
  return swift_errorRelease();
}

uint64_t sub_10004D244(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  swift_retain();
  Lock.lock()();
  Lock.unlock()();
  swift_release();
  sub_10004EAC0(a1, *(void *)(a1 + 16));
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  void v8[4] = a3;
  v8[5] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  id v9 = a2;
  swift_retain();
  sub_10012DE30();
  swift_release();
  return swift_release();
}

void sub_10004D334(char a1)
{
  swift_retain();
  swift_retain();
  Lock.lock()();
  int v3 = *(unsigned __int8 *)(v1 + 89);
  if ((v3 - 3) >= 2)
  {
    if (v3 == 2)
    {
      *(unsigned char *)(v1 + 89) = 3;
      Lock.unlock()();
      swift_release();
      swift_release();
      if (a1) {
        pthread_join(*(pthread_t *)(*(void *)(v1 + 24) + 32), 0);
      }
      swift_retain();
      Lock.lock()();
      if (*(unsigned char *)(v1 + 89) == 3)
      {
        *(unsigned char *)(v1 + 89) = 4;
        Lock.unlock()();
        goto LABEL_8;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  Lock.unlock()();
  swift_release();
LABEL_8:
  swift_release();
}

void SelectableEventLoop.shutdownGracefully(queue:_:)()
{
  sub_10003C984();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10024E2A0();
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10024E2D0();
  sub_10001B550();
  uint64_t v15 = v14;
  __chkstk_darwin(v16, v17);
  sub_100026000();
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    uint64_t v18 = (void *)swift_allocObject();
    long long v18[2] = v0;
    v18[3] = v5;
    v18[4] = v3;
    swift_retain();
    swift_retain();
    sub_10004CB14();
    sub_10003C8C8();
    swift_release();
  }
  else
  {
    uint64_t v20 = sub_10004F2C8();
    *(void *)(v20 + 16) = v5;
    *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
    v23[4] = sub_10004E598;
    v23[5] = v20;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    void v23[2] = sub_100018758;
    v23[3] = &unk_1002DCBD0;
    uint64_t v21 = _Block_copy(v23);
    swift_retain();
    sub_10024E2C0();
    v22[1] = _swiftEmptyArrayStorage;
    sub_100029BC0();
    sub_100019524(&qword_100309168);
    sub_100029C10();
    sub_10024F280();
    sub_10024EEB0();
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v6);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v13);
    swift_release();
    sub_10003C8C8();
  }
}

uint64_t sub_10004D690(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_10004D334(0);
  if ((a2 & 1) == 0) {
    return a4(0);
  }
  swift_errorRetain();
  a4(a1);
  return sub_10003C3F0(a1, 1);
}

uint64_t sub_10004D730(void (*a1)(void))
{
  sub_10002F2C8();
  swift_allocError();
  unsigned char *v2 = 0;
  a1();
  return swift_errorRelease();
}

#error "10004D804: call analysis failed (funcsize=30)"

void sub_10004D834()
{
}

unint64_t SelectableEventLoop.description.getter()
{
  sub_10024F330(50);
  swift_bridgeObjectRelease();
  swift_retain();
  v1._countAndFlagsBits = sub_10004E414();
  sub_10024E800(v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x646165726874202CLL;
  v2._object = (void *)0xEB00000000203D20;
  sub_10024E800(v2);
  swift_retain();
  v3._countAndFlagsBits = sub_1000C6EDC();
  sub_10024E800(v3);
  swift_release();
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32032;
  v4._object = (void *)0xE200000000000000;
  sub_10024E800(v4);
  return 0xD000000000000021;
}

uint64_t SelectableEventLoop.debugDescription.getter()
{
  swift_retain();
  Lock.lock()();
  sub_10004D9A8(&v1);
  Lock.unlock()();
  swift_release();
  return v1;
}

void sub_10004D9A8(void *a1@<X8>)
{
  sub_10024F330(71);
  v3._countAndFlagsBits = 0xD000000000000021;
  v3._object = (void *)0x800000010027AE00;
  sub_10024E800(v3);
  swift_retain();
  v4._countAndFlagsBits = sub_10004E414();
  sub_10024E800(v4);
  swift_release();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x646165726874202CLL;
  v5._object = (void *)0xEB00000000203D20;
  sub_10024E800(v5);
  swift_retain();
  v6._countAndFlagsBits = sub_1000C6EDC();
  sub_10024E800(v6);
  swift_release();
  swift_bridgeObjectRelease();
  v7._object = (void *)0x800000010027B1E0;
  v7._countAndFlagsBits = 0xD000000000000013;
  sub_10024E800(v7);
  swift_beginAccess();
  swift_retain();
  sub_10024F330(28);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 2112041;
  v9._object = (void *)0xE300000000000000;
  sub_10024E800(v9);
  uint64_t v2 = swift_retain();
  sub_1001716FC(v2);
  swift_release();
  type metadata accessor for ScheduledTask();
  v10._countAndFlagsBits = sub_10024EAB0();
  sub_10024E800(v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD000000000000015;
  v11._object = (void *)0x800000010027A430;
  sub_10024E800(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32032;
  v12._object = (void *)0xE200000000000000;
  sub_10024E800(v12);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

unint64_t sub_10004DBF0()
{
  return SelectableEventLoop.description.getter();
}

uint64_t sub_10004DC14()
{
  return SelectableEventLoop.debugDescription.getter();
}

_OWORD *sub_10004DC38(_OWORD *result)
{
  if (*(_OWORD **)(v1 + 72) == result)
  {
    uint64_t v2 = result;
    uint64_t result = (_OWORD *)swift_slowDealloc();
    *(void *)(v1 + 72) = 2 * (void)v2;
    if ((unint64_t)(2 * (void)v2 - 0x400000000000000) >> 59 == 31)
    {
      uint64_t result = (_OWORD *)swift_slowAlloc();
      *uint64_t result = 0u;
      result[1] = 0u;
      *(void *)(v1 + 64) = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

_OWORD *sub_10004DCAC(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, void (*a5)(unint64_t *), __int16 a6)
{
  uint64_t v8 = v6;
  if (*(unsigned char *)(v6 + 16))
  {
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    sub_10024F330(45);
    v51._countAndFlagsBits = 0xD00000000000002ALL;
    v51._object = (void *)0x800000010027B090;
    sub_10024E800(v51);
    char v49 = *(unsigned char *)(v6 + 16);
    sub_10024F5C0();
    v52._countAndFlagsBits = 46;
    v52._object = (void *)0xE100000000000000;
    sub_10024E800(v52);
    unint64_t v9 = 0xE000000000000000;
    sub_100028EB4();
    swift_allocError();
    *(void *)uint64_t v10 = 0;
    LODWORD(v11) = 9;
LABEL_3:
    *(void *)(v10 + 8) = v9;
    *(_DWORD *)(v10 + 16) = v11;
    return (_OWORD *)swift_willThrow();
  }
  uint64_t v13 = v7;
  LOWORD(v14) = a6;
  uint64_t v17 = sub_10004E540(a1, a2 & 1);
  uint64_t v19 = v18;
  uint64_t v21 = v20 & 1;
  swift_retain();
  uint64_t result = (_OWORD *)sub_1000819EC(v17, v19, v21, v6);
  if (v13) {
    return result;
  }
  unint64_t v22 = (unint64_t)result;
  a3();
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v41 = (_OWORD *)v22;
  if (!v22) {
    return sub_10004DC38(v41);
  }
  BOOL v40 = a5;
  uint64_t v50 = v6 + 24;
  swift_beginAccess();
  for (uint64_t i = 0; ; i += 32)
  {
    uint64_t v24 = v8;
    uint64_t v25 = *(void *)(v8 + 64) + i;
    uint64_t v21 = *(void *)v25;
    int v26 = *(__int16 *)(v25 + 8);
    int v14 = *(unsigned __int16 *)(v25 + 8);
    __int16 v27 = *(_WORD *)(v25 + 10);
    int v28 = *(_DWORD *)(v25 + 12);
    if ((v27 & 0x4000) != 0) {
      break;
    }
    if (v14 == 65526) {
      goto LABEL_34;
    }
    if (v21 < 0)
    {
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v29 = *(void *)v50;
    if (!*(void *)(*(void *)v50 + 16)) {
      goto LABEL_34;
    }
    uint64_t v42 = *(void *)(v25 + 24);
    unint64_t v30 = sub_10011EDD4(v21);
    if (v31)
    {
      uint64_t v32 = *(void *)(v29 + 56) + 16 * v30;
      if (*(_DWORD *)(v32 + 12) == v42)
      {
        uint64_t v21 = *(void *)v32;
        uint64_t v33 = *(unsigned __int8 *)(v32 + 8);
        int v34 = *(unsigned __int8 *)(v32 + 9);
        if (v26 == -15)
        {
          if (v27 < 0 && (v34 & 2) != 0)
          {
            if (v28)
            {
              int v35 = 3;
              goto LABEL_27;
            }
            LOBYTE(v36) = 2;
LABEL_44:
            uint64_t v8 = v24;
LABEL_45:
            unint64_t v43 = v21;
            LOBYTE(v44) = v33;
            BYTE1(v44) = v34;
            HIDWORD(v44) = v42;
            LOBYTE(v45) = v36;
            uint64_t v37 = v33;
            Scheduled._promise.getter(v21);
            Scheduled._promise.getter(v21);
            v40(&v43);
            j__swift_release(v21, v37);
            j__swift_release(v21, v37);
            goto LABEL_35;
          }
          if (v28)
          {
            int v35 = 1;
            goto LABEL_27;
          }
          goto LABEL_34;
        }
        if (v26 == -2)
        {
          if (v28)
          {
            int v35 = 9;
            goto LABEL_27;
          }
          if ((v34 & 8) != 0)
          {
            LOBYTE(v36) = v34 & 8;
            goto LABEL_44;
          }
          goto LABEL_34;
        }
        if (v26 != -1) {
          goto LABEL_55;
        }
        if ((v27 & 0x8000) == 0)
        {
          if (v28) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }
        if ((v34 & 2) != 0)
        {
          if (v28)
          {
            int v35 = 7;
            goto LABEL_27;
          }
          LOBYTE(v36) = v34 & 6;
          if ((v34 & 6) != 0) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v28)
          {
LABEL_26:
            int v35 = 5;
LABEL_27:
            int v36 = v35 & v34;
            uint64_t v8 = v24;
            if (!v36) {
              goto LABEL_35;
            }
            goto LABEL_45;
          }
LABEL_33:
          if ((v34 & 4) != 0)
          {
            LOBYTE(v36) = v34 & 4;
            goto LABEL_44;
          }
        }
LABEL_34:
        uint64_t v8 = v24;
        goto LABEL_35;
      }
    }
    uint64_t v8 = v24;
LABEL_35:
    if (!--v22) {
      return sub_10004DC38(v41);
    }
  }
  uint64_t v11 = *(void *)(v25 + 16);
  if (v11 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_53;
  }
  if (v11 <= 0x7FFFFFFF)
  {
    uint64_t v38 = *(void *)(v25 + 24);
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    sub_10024F330(37);
    swift_bridgeObjectRelease();
    unint64_t v47 = 0xD000000000000023;
    unint64_t v48 = 0x800000010027B0C0;
    unint64_t v43 = v21;
    LOWORD(v44) = v14;
    WORD1(v44) = v27;
    HIDWORD(v44) = v28;
    uint64_t v45 = v11;
    uint64_t v46 = v38;
    type metadata accessor for kevent(0);
    v53._countAndFlagsBits = sub_10024E700();
    sub_10024E800(v53);
    swift_bridgeObjectRelease();
    unint64_t v39 = v47;
    unint64_t v9 = v48;
    sub_100028EB4();
    swift_allocError();
    *(void *)uint64_t v10 = v39;
    goto LABEL_3;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  unint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  Scheduled._promise.getter(v21);
  sub_10024F330(20);
  swift_bridgeObjectRelease();
  unint64_t v43 = 0xD000000000000012;
  unint64_t v44 = 0x800000010027B0F0;
  LOWORD(v47) = v14;
  v54._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v54);
  swift_bridgeObjectRelease();
  uint64_t result = (_OWORD *)sub_10024F670();
  __break(1u);
  return result;
}

void sub_10004E180()
{
  if (*(unsigned char *)(v0 + 16))
  {
    sub_10024F330(32);
    v3._object = (void *)0x800000010027AFD0;
    v3._countAndFlagsBits = 0xD00000000000001DLL;
    sub_10024E800(v3);
    sub_10024F5C0();
    v4._countAndFlagsBits = 46;
    v4._object = (void *)0xE100000000000000;
    sub_10024E800(v4);
    sub_100028EB4();
    swift_allocError();
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0xE000000000000000;
    *(_DWORD *)(v2 + 16) = 9;
    swift_willThrow();
  }
  else
  {
    sub_10004E2C0();
    if (!v1)
    {
      *(unsigned char *)(v0 + 16) = 2;
      swift_beginAccess();
      sub_100019524(&qword_10030AE50);
      sub_10024E520(0);
      swift_endAccess();
    }
  }
}

void sub_10004E2C0()
{
  Lock.lock()();
  sub_100028D58(*(_DWORD *)(v0 + 56));
  if (v1)
  {
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v0 + 56) = -1;
    Lock.unlock()();
  }
}

void sub_10004E338()
{
  Lock.lock()();
  if ((*(_DWORD *)(v0 + 56) & 0x80000000) != 0)
  {
    sub_10002F2C8();
    swift_allocError();
    *uint64_t v1 = 2;
    swift_willThrow();
  }
  else
  {
    v2.ident = 0;
    *(void *)&v2.filter = 0x10000000000FFF6;
    v2.data = 0;
    v2.udata = 0;
    sub_10015CCE4(&v2, 1);
  }
  Lock.unlock()();
}

unint64_t sub_10004E414()
{
  uint64_t v1 = pthread_self();
  if (pthread_equal(v1, *(pthread_t *)(*(void *)(v0 + 40) + 32)))
  {
    sub_10024F330(28);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = sub_10024F9E0();
    sub_10024E800(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 32032;
    v4._object = (void *)0xE200000000000000;
    sub_10024E800(v4);
    return 0xD000000000000018;
  }
  else
  {
    swift_retain();
    return sub_1001726E8();
  }
}

uint64_t sub_10004E4F8()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004E538()
{
  sub_10004BA70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004E540(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  if (result < 1)
  {
    __break(1u);
  }
  else if ((uint64_t)(result / 0x3B9ACA00uLL) >= 100000000)
  {
    return 100000000;
  }
  else
  {
    return result / 0x3B9ACA00uLL;
  }
  return result;
}

uint64_t sub_10004E598()
{
  return sub_10004D730(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10004E5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004E5B0()
{
  return swift_release();
}

uint64_t sub_10004E5BC(uint64_t a1, char a2)
{
  return sub_10004D690(a1, a2 & 1, *(void *)(v2 + 16), *(uint64_t (**)(uint64_t))(v2 + 24));
}

uint64_t type metadata accessor for SelectableEventLoop()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SelectableEventLoop.ExternalState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004E6BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectableEventLoop.ExternalState()
{
  return &type metadata for SelectableEventLoop.ExternalState;
}

unsigned char *storeEnumTagSinglePayload for SelectableEventLoop.InternalState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004E7C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectableEventLoop.InternalState()
{
  return &type metadata for SelectableEventLoop.InternalState;
}

unint64_t sub_10004E7FC()
{
  unint64_t result = qword_10030AE28;
  if (!qword_10030AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030AE28);
  }
  return result;
}

unint64_t sub_10004E84C()
{
  unint64_t result = qword_10030AE30;
  if (!qword_10030AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030AE30);
  }
  return result;
}

void sub_10004E898()
{
  sub_10004C760(v0);
}

uint64_t sub_10004E8A0(uint64_t a1)
{
  return sub_10004C7B8(a1);
}

uint64_t sub_10004E8BC(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_10024F460();
    uint64_t v4 = *v2;
  }
  uint64_t v10 = v4 + 32 + 8 * v6;
  type metadata accessor for ScheduledTask();
  unint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_21;
  }
  unint64_t result = sub_100037D0C(v4 + 32 + 8 * a2, v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (v13)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  *(void *)(v4 + 16) = v14;
LABEL_13:
  return sub_10024F420();
}

uint64_t sub_10004E9CC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10004E9F8()
{
  return sub_10004D1D0(*(void (**)(uint64_t, uint64_t))(v0 + 16));
}

uint64_t sub_10004EA04()
{
  return sub_10004D244(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10004EA14()
{
  return sub_10004CB14(v0[3], v0[4], v0[5]);
}

uint64_t sub_10004EA40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10004EAC0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    sub_10024F330(39);
    v30._object = (void *)0x800000010027B220;
    v30._countAndFlagsBits = 0xD000000000000024;
    sub_10024E800(v30);
    sub_10024F5C0();
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    sub_10024E800(v31);
    sub_100028EB4();
    uint64_t v3 = swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0xE000000000000000;
    *(_DWORD *)(v4 + 16) = 9;
    sub_100019524(&qword_10030AE38);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 32) = a1;
    *(void *)(v5 + 40) = &protocol witness table for SelectableEventLoop;
    *(void *)(v5 + 16) = v3;
    *(unsigned char *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 48) = 0;
    swift_retain();
    return v5;
  }
  swift_beginAccess();
  uint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)sub_100049FA0(v6);
  swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    if ((unint64_t)&_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_10024F6F0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v24 < 1)
    {
      uint64_t v25 = swift_bridgeObjectRelease();
      return SelectableEventLoop.makeSucceededVoidFuture()(v25);
    }
    else
    {
      uint64_t v5 = sub_10004A28C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift", 117, 2, 1084, &qword_10030AE38);
      sub_10011EBE0((uint64_t)&_swiftEmptyArrayStorage, v5);
      swift_bridgeObjectRelease();
    }
    return v5;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10024F6F0();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_16;
  }
LABEL_5:
  uint64_t result = sub_10024F450();
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    unint64_t v27 = v7 & 0xC000000000000001;
    uint64_t v28 = v8;
    unint64_t v29 = v7;
    do
    {
      if (v27)
      {
        uint64_t v11 = sub_10024F380();
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + 8 * v10 + 32);
        swift_retain();
      }
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(void *)(v11 + 40);
      sub_100019524(&qword_10030AE38);
      uint64_t v14 = swift_allocObject();
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v16 = sub_10013F1AC(v12, 0, 255, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SelectorGeneric.swift", 117, 2, 366, v14, ObjectType, v13);
      uint64_t v17 = (void *)swift_allocObject();
      void v17[2] = v11;
      v17[3] = v16;
      v17[4] = sub_100081F90;
      v17[5] = 0;
      uint64_t v18 = *(void *)(v11 + 40);
      uint64_t v19 = swift_getObjectType();
      char v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
      swift_retain_n();
      swift_retain_n();
      swift_unknownObjectRetain();
      if (v20(v19, v18))
      {
        swift_retain();
        swift_retain();
        sub_1001293E4();
        uint64_t v22 = v21;
        CallbackList._run()();
        sub_10003C350(v22);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = (void *)swift_allocObject();
        void v23[2] = v11;
        v23[3] = sub_10004F0D0;
        v23[4] = v17;
        int v26 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v18 + 24);
        swift_retain();
        swift_retain();
        v26(sub_10004F120, v23, v19, v18);
        swift_release();
        swift_release();
        swift_release();
      }
      swift_release();
      swift_release_n();
      ++v10;
      sub_10024F400();
      sub_10024F490();
      sub_10024F4A0();
      sub_10024F420();
      unint64_t v7 = v29;
    }
    while (v28 != v10);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004EFC0()
{
  swift_release();

  swift_release();
  uint64_t v1 = sub_10004F264();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004F000(uint64_t a1)
{
  return sub_10004CEF8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10004F00C()
{
  swift_release();
  sub_10003C3F0(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10004F050()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_10004F084(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10004F090()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10004F264();
  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004F0D0()
{
  return sub_100132404(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10004F0E0()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004F120()
{
  return sub_100135408(v0[2], v0[3], v0[4]);
}

uint64_t sub_10004F158(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10004F184()
{
  return sub_10024F280();
}

uint64_t sub_10004F1B0()
{
  return swift_beginAccess();
}

uint64_t sub_10004F1CC()
{
  return swift_beginAccess();
}

uint64_t sub_10004F1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  return swift_retain();
}

uint64_t sub_10004F230()
{
  return swift_beginAccess();
}

uint64_t sub_10004F24C()
{
  return v0 + 40;
}

uint64_t sub_10004F264()
{
  return v0;
}

uint64_t sub_10004F274()
{
  return *(void *)(v0 + 32 + 8 * v1);
}

uint64_t sub_10004F294()
{
  return swift_retain();
}

uint64_t sub_10004F2B4()
{
  return 0;
}

uint64_t sub_10004F2C8()
{
  return swift_allocObject();
}

void ChannelOutboundInvoker.write(_:file:line:)()
{
  sub_10003C7F0();
  sub_10004F80C(v1, v2, v3, v4, v5, v6, v7);
  sub_10004F858();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 32);
  swift_retain();
  uint64_t v9 = sub_10004F840();
  v8(v9);
  swift_release();
  sub_10003C780();
}

void ChannelOutboundInvoker.close(mode:file:line:)()
{
  sub_10003C7F0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10004F574(v8, v9, v10, v11, v4, v2);
  sub_10004F858();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 64);
  swift_retain();
  v12(v7, v0, v5, v3);
  swift_release();
  sub_10003C780();
}

uint64_t ChannelOutboundInvoker.register(file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_10004F574(a1, a2, a3, a4, a5, a6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 8);
  uint64_t v10 = swift_retain();
  v9(v10, a5, a6);
  swift_release();
  return v8;
}

void ChannelOutboundInvoker.bind(to:file:line:)()
{
  sub_10003C7F0();
  sub_10004F80C(v1, v2, v3, v4, v5, v6, v7);
  sub_10004F858();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 16);
  swift_retain();
  uint64_t v9 = sub_10004F840();
  v8(v9);
  swift_release();
  sub_10003C780();
}

void ChannelOutboundInvoker.connect(to:file:line:)()
{
  sub_10003C7F0();
  sub_10004F80C(v1, v2, v3, v4, v5, v6, v7);
  sub_10004F858();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 24);
  swift_retain();
  uint64_t v9 = sub_10004F840();
  v8(v9);
  swift_release();
  sub_10003C780();
}

void ChannelOutboundInvoker.writeAndFlush(_:file:line:)()
{
  sub_10003C7F0();
  sub_10004F80C(v1, v2, v3, v4, v5, v6, v7);
  sub_10004F858();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 48);
  swift_retain();
  uint64_t v9 = sub_10004F840();
  v8(v9);
  swift_release();
  sub_10003C780();
}

void ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)()
{
  sub_10003C7F0();
  sub_10004F80C(v1, v2, v3, v4, v5, v6, v7);
  sub_10004F858();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 72);
  swift_retain();
  uint64_t v9 = sub_10004F840();
  v8(v9);
  swift_release();
  sub_10003C780();
}

uint64_t sub_10004F574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(a6 + 80))(a5, a6);
  uint64_t v11 = v10;
  uint64_t ObjectType = swift_getObjectType();
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for () + 8);
  uint64_t v13 = EventLoop.makePromise<A>(of:file:line:)((uint64_t)&type metadata for () + 8, a1, a2, a3, a4, ObjectType, (uint64_t)&type metadata for () + 8, v11);
  swift_unknownObjectRelease();
  return v13;
}

unint64_t sub_10004F634()
{
  unint64_t result = qword_10030AE68;
  if (!qword_10030AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030AE68);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CloseMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CloseMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004F7D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloseMode()
{
  return &type metadata for CloseMode;
}

uint64_t sub_10004F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10004F574(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10004F840()
{
  return v0;
}

#error "10004F910: call analysis failed (funcsize=80)"

uint64_t sub_10004F9A4(uint64_t a1, uint64_t a2)
{
  return static IOData.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)(*(unsigned __int16 *)(a2 + 20) | (*(unsigned __int8 *)(a2 + 22) << 16)) << 32));
}

uint64_t IOData.readableBytes.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return a2 - (a3 & 0xFFFFFFFFFFFFFFLL);
    }
    goto LABEL_7;
  }
  unint64_t result = (HIDWORD(a2) - a2);
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall IOData.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  unint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v5 = *((unsigned int *)v1 + 4) | ((unint64_t)(*((unsigned __int16 *)v1 + 10) | (*((unsigned __int8 *)v1 + 22) << 16)) << 32);
  if ((*v1 & 0x8000000000000000) == 0)
  {
    BOOL v6 = __CFADD__(v3, forwardBy);
    unint64_t v7 = (v3 + forwardBy);
    if (v6)
    {
      __break(1u);
    }
    else if (v7 <= HIDWORD(v3))
    {
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v7;
LABEL_8:
      v1[1] = v3;
      *((_DWORD *)v1 + 4) = v5;
      *((unsigned char *)v1 + 22) = BYTE6(v5);
      *((_WORD *)v1 + 10) = WORD2(v5);
      return;
    }
    __break(1u);
    goto LABEL_11;
  }
  BOOL v8 = __OFADD__(v5 & 0xFFFFFFFFFFFFFFLL, forwardBy);
  uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFLL) + forwardBy;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v9 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(v9);
    *uint64_t v1 = v4 | 0x8000000000000000;
    goto LABEL_8;
  }
LABEL_12:
  sub_10024F660();
  __break(1u);
}

uint64_t IOData.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    sub_10003AFD0();
    FileRegion.description.getter(a1 & 0x7FFFFFFFFFFFFFFFLL, a2);
  }
  else
  {
    sub_10003AFD0();
    ByteBuffer.description.getter(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL);
  }
  sub_10024E800(v6);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32032;
  v8._object = (void *)0xE200000000000000;
  sub_10024E800(v8);
  sub_10001B070();
  return 0x7B20617461444F49;
}

uint64_t sub_10004FBE0()
{
  return IOData.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)(*(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16)) << 32));
}

uint64_t destroy for IOData()
{
  return sub_10001B070();
}

uint64_t _s25ASOctaneSupportXPCService6IODataOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v6 = *((_DWORD *)a2 + 4);
  unint64_t v5 = a2 + 2;
  char v7 = *((unsigned char *)v5 + 6);
  __int16 v8 = *((_WORD *)v5 + 2);
  sub_10003AFD0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithCopy for IOData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v6 = *((_DWORD *)a2 + 4);
  unint64_t v5 = a2 + 2;
  char v7 = *((unsigned char *)v5 + 6);
  __int16 v8 = *((_WORD *)v5 + 2);
  sub_10003AFD0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  sub_10001B070();
  return a1;
}

__n128 initializeWithTake for ByteBuffer(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 15) = *(void *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IOData(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  uint64_t v4 = a2 + 1;
  int v5 = v6;
  LOWORD(v6) = *((_WORD *)v4 + 2);
  char v7 = *((unsigned char *)v4 + 6);
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 20) = v6;
  *(unsigned char *)(a1 + 22) = v7;
  sub_10001B070();
  return a1;
}

uint64_t getEnumTagSinglePayload for IOData(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7F && *(unsigned char *)(a1 + 23))
    {
      unsigned int v2 = *(_DWORD *)a1 + 126;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7E) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for IOData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(unsigned char *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 23) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 23) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 22) = 0;
      *(_WORD *)(result + 20) = 0;
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_10004FE48(void *a1)
{
  return *a1 >> 63;
}

void *sub_10004FE54(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_10004FE64(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for IOData()
{
  return &type metadata for IOData;
}

uint64_t sub_10004FE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v7 = v2;
  sub_100047280(a1 + 56, (uint64_t)v20);
  sub_100047280((uint64_t)v20, (uint64_t)&v23);
  if (*(void *)&v24[0])
  {
    long long v21 = v23;
    *(_OWORD *)uint64_t v22 = v24[0];
    *(void *)&v22[15] = *(void *)((char *)v24 + 15);
    uint64_t v9 = sub_1000CB7C4();
    unint64_t v11 = v10;
    sub_10024DC80();
    swift_allocObject();
    sub_10024DC70();
    sub_1000472E8();
    sub_10024DC60();
    swift_release();
    uint64_t v6 = v19[1];
    unint64_t v3 = v2 + 88;
    uint64_t v13 = sub_10001C2A8((void *)(v2 + 88), *(void *)(v2 + 112));
    uint64_t v4 = *v13;
    int v5 = *(os_unfair_lock_s **)(*(void *)(*v13 + 128) + 16);
    swift_retain();
    os_unfair_lock_lock(v5);
    *(unsigned char *)(v4 + 112) = 0;
    os_unfair_lock_unlock(v5);
    swift_release();
    sub_10001C2A8((void *)(v2 + 88), *(void *)(v2 + 112));
    unint64_t v14 = sub_1000A01A0();
    unint64_t v7 = v14;
    if (v14 >> 62) {
      uint64_t v15 = sub_10024F6F0();
    }
    else {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InAppCheckDownloadQueueCountResponse();
    sub_1000F6F78(v15);
    uint64_t v16 = swift_retain();
    sub_1001E6654(v16);
    sub_100050168();
    sub_10003F808(v9, v11);
    swift_release();
    uint64_t v12 = 3;
  }
  else
  {
    sub_1000CB5C8(0x2064696C61766E49, 0xEF74736575716572, 6, (uint64_t)v19);
    sub_100050168();
    uint64_t v12 = 21;
  }
  ASOctaneSupportXPCService::HTTPVersion v17 = HTTPVersion.init(major:minor:)(1, 1);
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(result + 32) = v12;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v17;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a2 + 16) = 2;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 62) = BYTE6(v6);
  *(_WORD *)(a2 + 60) = WORD2(v6);
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t type metadata accessor for InAppCheckDownloadQueueRoute()
{
  return self;
}

uint64_t sub_100050188()
{
  sub_100019524(&qword_10030B068);
  uint64_t v0 = swift_allocObject();
  sub_100019524(&qword_10030B070);
  swift_allocObject();
  uint64_t result = sub_100050F34((void (__cdecl *)(void *))j_j__swift_release);
  *(void *)(v0 + 16) = result;
  qword_10034C008 = v0;
  return result;
}

uint64_t sub_1000501FC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = sub_100019524(&qword_10030B078);
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, v9);
  uint64_t v10 = sub_1000511C0();
  *(void *)(v4 + 16) = EventLoop.makePromise<A>(of:file:line:)(v10, v11, v12, v13, 45, ObjectType, v9, a2);
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, v9);
  uint64_t v14 = sub_1000511C0();
  uint64_t v18 = EventLoop.makePromise<A>(of:file:line:)(v14, v15, v16, v17, 46, ObjectType, v9, a2);
  swift_unknownObjectRelease();
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
  *(_DWORD *)(v4 + 32) = a3;
  *(_DWORD *)(v4 + 36) = a4;
  return v4;
}

uint64_t sub_1000502D0()
{
  return swift_retain();
}

uint64_t sub_1000502D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = sub_10024E2A0();
  sub_10001B550();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  uint64_t v22 = sub_100051170();
  sub_10001B550();
  uint64_t v15 = v14;
  __chkstk_darwin(v16, v17);
  sub_100026000();
  id v18 = sub_100050534();
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = v3;
  void v19[3] = a1;
  void v19[4] = a2;
  v19[5] = a3;
  aBlock[4] = sub_100051094;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018758;
  aBlock[3] = &unk_1002DD0F0;
  char v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10024E2C0();
  sub_1000510D8((unint64_t *)&qword_100317080, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100019524(&qword_100309168);
  sub_100051120((unint64_t *)&qword_100317090, &qword_100309168);
  sub_10024F280();
  sub_10024EEB0();
  _Block_release(v20);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v9);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v22);
  swift_release();
  return swift_retain();
}

id sub_100050534()
{
  uint64_t v1 = sub_10024E2B0();
  sub_10001B550();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100026000();
  uint64_t v6 = sub_10024EE80();
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10024EE60();
  __chkstk_darwin(v13, v14);
  uint64_t v15 = sub_100051170();
  __chkstk_darwin(v15 - 8, v16);
  if (qword_100308CE0 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10014C954();
  if (v17) {
    return v17;
  }
  type metadata accessor for MultiThreadedEventLoopGroup();
  char v20 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
  swift_unknownObjectRelease();
  v23[0] = sub_100051014();
  if (!v20)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for DispatchQoS.QoSClass.default(_:), v1);
    uint64_t v18 = sub_10024EED0();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
    return (id)v18;
  }
  sub_10024E2C0();
  v23[1] = _swiftEmptyArrayStorage;
  sub_1000510D8((unint64_t *)&qword_10030B050, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100019524((uint64_t *)&unk_1003170E0);
  sub_100051120((unint64_t *)&qword_10030B058, (uint64_t *)&unk_1003170E0);
  sub_10024F280();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  long long v21 = (void *)sub_10024EEC0();
  id v22 = v21;
  sub_100050848(v21);
  return v22;
}

void sub_100050848(void *a1)
{
  if (pthread_getspecific(*(void *)(*(void *)(v1 + 16) + 16))) {
    swift_release();
  }
  if (a1)
  {
    sub_100019524(&qword_10030B060);
    uint64_t v3 = (void *)swift_allocObject();
    v3[2] = v1;
    v3[3] = a1;
    swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = a1;
  sub_100050FA0(v3);
}

uint64_t sub_1000508E8(uint64_t a1)
{
  if (pthread_getspecific(*(void *)(*(void *)(v1 + 16) + 16))) {
    swift_release();
  }
  if (a1)
  {
    sub_100019524(&qword_10030B080);
    uint64_t v3 = (void *)swift_allocObject();
    v3[2] = v1;
    v3[3] = a1;
    swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_retain();
  sub_100050FA0(v3);
  return swift_release();
}

void sub_100050980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0;
  *(void *)&v15.ai_flags = 0;
  v15.ai_addrlen = 0;
  memset(&v15.ai_canonname, 0, 24);
  *(void *)&v15.ai_socktype = *(void *)(v3 + 32);
  sub_10024F9E0();
  uint64_t v7 = (const char *)(sub_10024E730() + 32);
  uint64_t v8 = sub_10024E730();
  swift_bridgeObjectRelease();
  int v9 = getaddrinfo(v7, (const char *)(v8 + 32), &v15, &v16);
  swift_release();
  swift_release();
  if (v9)
  {
    sub_100050FC8();
    uint64_t v10 = swift_allocError();
    *(void *)uint64_t v11 = a1;
    *(void *)(v11 + 8) = a2;
    *(void *)(v11 + 16) = a3;
    *(unsigned char *)(v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    swift_bridgeObjectRetain();
    sub_100050D9C(v10);
LABEL_3:
    swift_errorRelease();
    return;
  }
  uint64_t v12 = v16;
  if (!v16)
  {
    sub_100050FC8();
    uint64_t v13 = swift_allocError();
    sub_1000511AC(v13, v14);
    ((void (*)(void))sub_100050D9C)();
    goto LABEL_3;
  }
  sub_100050B2C((uint64_t)v16, a1, a2);
  freeaddrinfo(v12);
}

void sub_100050B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    int v8 = *(_DWORD *)(a1 + 4);
    if (v8 != 30) {
      break;
    }
    uint64_t v18 = *(int **)(a1 + 32);
    if (!v18) {
      goto LABEL_23;
    }
    int v19 = *v18;
    int v20 = v18[1];
    uint64_t v21 = *((void *)v18 + 2);
    uint64_t v46 = *((void *)v18 + 1);
    int v22 = v18[6];
    sub_100019524(&qword_10030B040);
    uint64_t v23 = swift_allocObject();
    *(_DWORD *)(v23 + 16) = v19;
    *(_DWORD *)(v23 + 20) = v20;
    *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v46;
    *(void *)(v23 + 32) = v21;
    *(_DWORD *)(v23 + 40) = v22;
    *(void *)(v23 + 48) = a2;
    *(void *)(v23 + 56) = a3;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100034B40();
      uint64_t v7 = v26;
    }
    uint64_t v12 = v23 | 0x4000000000000000;
    unint64_t v15 = v7[2];
    unint64_t v24 = v7[3];
    unint64_t v16 = v15 + 1;
    if (v15 >= v24 >> 1)
    {
      sub_100051198(v24);
      sub_100034B40();
      uint64_t v7 = v17;
    }
    else
    {
      uint64_t v17 = v7;
    }
LABEL_14:
    void v17[2] = v16;
    v17[v15 + 4] = v12;
    a1 = *(void *)(a1 + 40);
    if (!a1)
    {
      uint64_t v27 = v44;
      uint64_t v28 = *(void *)(v44 + 24);
      uint64_t v29 = swift_bridgeObjectRetain();
      sub_1000B4B18(v29, 0, v28, v30, v31, v32, v33, v34, v44, v46, v48, v50, v52, v54, v56, v58, v60, v62, v64,
        v66,
        vars0,
        vars8);
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void *)(v27 + 16);
      uint64_t v36 = swift_bridgeObjectRetain();
      sub_1000B4B18(v36, 0, v35, v37, v38, v39, v40, v41, v45, v47, v49, v51, v53, v55, v57, v59, v61, v63, v65,
        v67,
        vars0a,
        vars8a);
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  if (v8 == 2)
  {
    int v9 = *(int **)(a1 + 32);
    if (!v9)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
    int v11 = *v9;
    int v10 = v9[1];
    sub_100019524(&qword_10030B048);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = *((void *)v9 + 1);
    *(_DWORD *)(v12 + 16) = v11;
    *(_DWORD *)(v12 + 20) = v10;
    *(void *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
    *(void *)(v12 + 32) = a2;
    *(void *)(v12 + 40) = a3;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100034B40();
      uint64_t v6 = v25;
    }
    unint64_t v15 = v6[2];
    unint64_t v14 = v6[3];
    unint64_t v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      sub_100051198(v14);
      sub_100034B40();
      uint64_t v6 = v17;
    }
    else
    {
      uint64_t v17 = v6;
    }
    goto LABEL_14;
  }
  sub_100050FC8();
  uint64_t v42 = swift_allocError();
  sub_1000511AC(v42, v43);
  sub_100050D9C();
  swift_errorRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

#error "100050DC8: call analysis failed (funcsize=30)"

uint64_t sub_100050E14()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100050E3C()
{
  sub_100050E14();
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for GetaddrinfoResolver()
{
  return self;
}

uint64_t sub_100050E94()
{
  return sub_1000502D0();
}

uint64_t sub_100050EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000502D8(a1, a2, a3);
}

uint64_t sub_100050EDC(void (__cdecl *a1)(void *))
{
  return sub_100050F34(a1);
}

uint64_t sub_100050F34(void (__cdecl *a1)(void *))
{
  pthread_key_t v3 = 0;
  if (pthread_key_create(&v3, a1)) {
    __break(1u);
  }
  *(void *)(v1 + 16) = v3;
  return v1;
}

uint64_t sub_100050FA0(void *a1)
{
  uint64_t result = pthread_setspecific(*(void *)(v1 + 16), a1);
  if (result) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100050FC8()
{
  unint64_t result = qword_10030B038;
  if (!qword_10030B038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B038);
  }
  return result;
}

unint64_t sub_100051014()
{
  unint64_t result = qword_1003170D0;
  if (!qword_1003170D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003170D0);
  }
  return result;
}

uint64_t sub_100051054()
{
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

void sub_100051094()
{
  sub_100050980(v0[3], v0[4], v0[5]);
}

uint64_t sub_1000510C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000510D0()
{
  return swift_release();
}

uint64_t sub_1000510D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051120(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051170()
{
  return sub_10024E2D0();
}

BOOL sub_100051198@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_1000511AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2;
}

uint64_t sub_1000511C0()
{
  return v0;
}

uint64_t sub_1000511D4()
{
  uint64_t v1 = sub_10024E0A0();
  sub_10001B550();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100051C7C();
  sub_10024E090();
  uint64_t v6 = sub_10024E050();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  sub_10001DAC0();
  uint64_t v7 = sub_10024F130();
  if (*(void *)(v7 + 16))
  {
    uint64_t v6 = *(void *)(v7 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000512DC()
{
  uint64_t v0 = sub_10024E0F0();
  __chkstk_darwin(v0 - 8, v1);
  sub_100051C60();
  uint64_t v2 = sub_10024EF60();
  sub_10001B550();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_10002059C();
  uint64_t v9 = v8 - v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10024E0B0();
  sub_10024EF50();
  sub_100051C10();
  sub_10024EFD0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v2);
  return v11;
}

id sub_100051428()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v0 setDateStyle:2];
  id result = [v0 setTimeStyle:0];
  qword_10030B088 = (uint64_t)v0;
  return result;
}

uint64_t sub_10005148C()
{
  uint64_t v1 = sub_100019524(&qword_10030B090);
  __chkstk_darwin(v1 - 8, v2);
  sub_100051C60();
  uint64_t v3 = sub_10024E0F0();
  sub_1000195B4(v0, 1, 1, v3);
  sub_10024EFC0();
  uint64_t v5 = v4;
  sub_100051BB4(v0, &qword_10030B090);
  if ((v5 & 0x100000000) != 0) {
    sub_10024EF80(v6, 0.0);
  }
  return sub_1000512DC();
}

double sub_100051580(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v52 = a3;
  int v51 = a2;
  uint64_t v50 = a1;
  int v49 = a4;
  int v53 = a4;
  sub_10024DBF0();
  sub_10001B550();
  uint64_t v47 = v6;
  uint64_t v48 = v5;
  __chkstk_darwin(v5, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_10024E100();
  sub_10001B550();
  uint64_t v13 = v12;
  __chkstk_darwin(v14, v15);
  sub_10002059C();
  uint64_t v18 = v17 - v16;
  sub_10024E150();
  sub_10001B550();
  uint64_t v45 = v20;
  uint64_t v46 = v19;
  __chkstk_darwin(v19, v21);
  sub_100051C7C();
  uint64_t v22 = sub_100019524((uint64_t *)&unk_10030FD70);
  __chkstk_darwin(v22 - 8, v23);
  sub_10002059C();
  uint64_t v26 = v25 - v24;
  uint64_t v27 = sub_10024E030();
  sub_10001B550();
  uint64_t v29 = v28;
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v34 = (char *)&v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v44 - v36;
  if (v53)
  {
    uint64_t v38 = v52;
    sub_10024DF70();
    double v40 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v34, v38, v27);
    return v40 + sub_1001EF934(v50, v51, v49, (uint64_t)v34);
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v18, enum case for Calendar.Identifier.gregorian(_:), v11);
    sub_10024E110();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v18, v11);
    sub_100213A0C(v50, v51);
    sub_10024E130();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v10, v48);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v4, v46);
    if (sub_10001FA0C(v26, 1, v27) == 1)
    {
      sub_10024E020();
      sub_100051BB4(v26, (uint64_t *)&unk_10030FD70);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v37, v26, v27);
    }
    sub_10024DF70();
    double v41 = v42;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v27);
  }
  return v41;
}

void sub_1000518C4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = a1 + 56;
    sub_10024FBF0();
    sub_100051C94();
    if (v5)
    {
      uint64_t v6 = 0;
      BOOL v7 = 0;
      uint64_t v8 = ~v4;
      uint64_t v9 = *(void *)(a1 + 48);
      while (1)
      {
        while (*(void *)(v9 + 8 * v3) != v6)
        {
          unint64_t v3 = (v3 + 1) & v8;
          if (((*(void *)(v2 + ((v3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v3) & 1) == 0) {
            return;
          }
        }
        if (v7) {
          break;
        }
        if (__CFADD__(v6++, 1))
        {
          __break(1u);
          return;
        }
        sub_10024FBF0();
        sub_100051C94();
        if ((v11 & 1) == 0) {
          return;
        }
        BOOL v7 = v6 == -1;
      }
    }
  }
}

uint64_t sub_1000519A0()
{
  uint64_t v0 = sub_10024D9C0();
  sub_100051A3C(v0, qword_10034C010);
  uint64_t v1 = (void *)sub_10001B0E8(v0, (uint64_t)qword_10034C010);
  *uint64_t v1 = sub_100051AA0;
  v1[1] = 0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);
  return v2();
}

uint64_t *sub_100051A3C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100051AA0(uint64_t a1, void *a2)
{
  sub_10001C2A8(a2, a2[3]);
  sub_10024FD30();
  sub_10024DFF0();
  sub_100051B64((uint64_t)v3, v4);
  sub_10024FAB0();
  return sub_10001C2EC((uint64_t)v3);
}

uint64_t sub_100051B64(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100051BB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100019524(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100051C10()
{
  unint64_t result = qword_10030B098;
  if (!qword_10030B098)
  {
    sub_10024EF60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B098);
  }
  return result;
}

uint64_t sub_100051C60()
{
  return 0;
}

uint64_t destroy for CreateAppReceiptRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CreateAppReceiptRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CreateAppReceiptRequest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for CreateAppReceiptRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

void *assignWithTake for CreateAppReceiptRequest(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateAppReceiptRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateAppReceiptRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptRequest()
{
  return &type metadata for CreateAppReceiptRequest;
}

uint64_t sub_100051FBC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6B88;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 6) {
    return 6;
  }
  else {
    return v4;
  }
}

uint64_t static NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent.getter()
{
  return 6;
}

unint64_t sub_100052014(char a1)
{
  unint64_t result = 0x692D656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x2D6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 1684632935;
      break;
    case 4:
      unint64_t result = 0x6E4F707041534F69;
      break;
    case 5:
      unint64_t result = 6580598;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000520E4(char a1)
{
  unint64_t result = 0x692D656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x2D6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 1684632935;
      break;
    case 4:
      unint64_t result = 0x6E4F707041534F69;
      break;
    case 5:
      unint64_t result = 6580598;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000521B4(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_10030B0B0);
  sub_10001B550();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001C2A8(a1, a1[3]);
  sub_1000528D8();
  sub_10024FD40();
  v11[15] = 0;
  sub_10024F940();
  if (!v1)
  {
    v11[14] = 1;
    sub_10024F940();
    v11[13] = 2;
    sub_100052BD4();
    v11[12] = 3;
    sub_100052BD4();
    v11[11] = 4;
    sub_100052BD4();
    v11[10] = 5;
    sub_100052BD4();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_10005235C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100019524(&qword_10030B0A0);
  sub_10001B550();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  sub_10001C2A8(a1, v12);
  sub_1000528D8();
  sub_10024FD20();
  if (v2) {
    return sub_10001C2EC((uint64_t)a1);
  }
  char v43 = 0;
  uint64_t v13 = sub_10024F830();
  char v42 = 1;
  sub_100052BF0();
  uint64_t v14 = sub_10024F830();
  uint64_t v37 = v12;
  uint64_t v33 = v14;
  uint64_t v34 = v13;
  char v41 = 2;
  sub_100052BF0();
  uint64_t v15 = sub_100052BB8();
  uint64_t v35 = v16;
  uint64_t v36 = v12;
  uint64_t v32 = v15;
  char v40 = 3;
  sub_100052BF0();
  uint64_t v31 = sub_100052BB8();
  char v39 = 4;
  sub_100052BF0();
  uint64_t v29 = sub_100052BB8();
  uint64_t v30 = v17;
  char v38 = 5;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100052BB8();
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v28 = v18;
  v21(v11, v5);
  swift_bridgeObjectRetain();
  sub_10001C2EC((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v30;
  swift_bridgeObjectRelease();
  uint64_t v23 = v12;
  swift_bridgeObjectRelease();
  uint64_t v24 = v35;
  swift_bridgeObjectRelease();
  uint64_t v25 = v36;
  swift_bridgeObjectRelease();
  uint64_t v26 = v37;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v34;
  a2[1] = v26;
  a2[2] = v33;
  a2[3] = v25;
  a2[4] = v32;
  a2[5] = v24;
  a2[6] = v31;
  a2[7] = v23;
  a2[8] = v29;
  a2[9] = v22;
  a2[10] = v28;
  a2[11] = v20;
  return result;
}

uint64_t sub_100052724(unsigned __int8 *a1, char *a2)
{
  return sub_1000F96A0(*a1, *a2);
}

Swift::Int sub_100052730()
{
  return sub_1001D3440(*v0);
}

uint64_t sub_100052738(uint64_t a1)
{
  return sub_1000D0F7C(a1, *v1);
}

Swift::Int sub_100052740(uint64_t a1)
{
  return sub_1000D2D8C(a1, *v1);
}

uint64_t sub_100052748@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100051FBC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_100052778@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100052014(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000527A4()
{
  return sub_1000520E4(*v0);
}

uint64_t sub_1000527AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100052008();
  *a1 = result;
  return result;
}

uint64_t sub_1000527D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000527FC(uint64_t a1)
{
  unint64_t v2 = sub_1000528D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100052838(uint64_t a1)
{
  unint64_t v2 = sub_1000528D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100052874@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10005235C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x60uLL);
  }
  return result;
}

uint64_t sub_1000528C0(void *a1)
{
  return sub_1000521B4(a1);
}

unint64_t sub_1000528D8()
{
  unint64_t result = qword_10030B0A8;
  if (!qword_10030B0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B0A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CreateAppReceiptRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CreateAppReceiptRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100052A78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptRequest.CodingKeys()
{
  return &type metadata for CreateAppReceiptRequest.CodingKeys;
}

unint64_t sub_100052AB4()
{
  unint64_t result = qword_10030B0B8;
  if (!qword_10030B0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B0B8);
  }
  return result;
}

unint64_t sub_100052B04()
{
  unint64_t result = qword_10030B0C0;
  if (!qword_10030B0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B0C0);
  }
  return result;
}

unint64_t sub_100052B54()
{
  unint64_t result = qword_10030B0C8;
  if (!qword_10030B0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B0C8);
  }
  return result;
}

uint64_t sub_100052BA0()
{
  return v0;
}

uint64_t sub_100052BB8()
{
  return sub_10024F7C0();
}

uint64_t sub_100052BD4()
{
  return sub_10024F8D0();
}

uint64_t sub_100052BF0()
{
  return swift_bridgeObjectRetain();
}

double sub_100052C08@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10024D980();
  swift_allocObject();
  sub_10024D970();
  sub_1000554E4();
  sub_10024D960();
  sub_10003F808(a1, a2);
  swift_release();
  if (!v3)
  {
    double result = *(double *)&v8;
    *a3 = v8;
    a3[1] = v9;
    a3[2] = v10;
  }
  return result;
}

uint64_t sub_100052CC8(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (char v7 = sub_10024FA60(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[3];
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (a1[2] != a2[2] || v9 != v10)
      {
        char v12 = sub_10024FA60();
        uint64_t result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t v13 = a1[5];
    uint64_t v14 = a2[5];
    if (v13)
    {
      if (v14)
      {
        BOOL v15 = a1[4] == a2[4] && v13 == v14;
        if (v15 || (sub_10024FA60() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v14)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100052DAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x49746375646F7270 && a2 == 0xE900000000000044;
    if (v6 || (sub_10024FA60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000013 && a2 == 0x8000000100278710)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_10024FA60();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_100052F08(char a1)
{
  if (!a1) {
    return 0x4449656C646E7562;
  }
  if (a1 == 1) {
    return 0x49746375646F7270;
  }
  return 0xD000000000000013;
}

uint64_t sub_100052F68(void *a1)
{
  sub_100019524(&qword_10030B350);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  sub_10001C2A8(a1, a1[3]);
  sub_100056DA4();
  sub_1000572C8();
  sub_10005723C();
  if (!v1)
  {
    sub_10005723C();
    sub_10005723C();
  }
  uint64_t v5 = sub_10005728C();
  return v6(v5);
}

uint64_t sub_100053084@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = sub_100019524(&qword_10030B318);
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  sub_100057274();
  sub_10001C2A8(a1, a1[3]);
  sub_100056DA4();
  sub_10024FD20();
  if (v2)
  {
    sub_10001C2EC((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = sub_100057258();
    uint64_t v13 = v12;
    uint64_t v23 = v11;
    uint64_t v14 = sub_100057258();
    uint64_t v16 = v15;
    uint64_t v22 = v14;
    uint64_t v17 = sub_100057258();
    uint64_t v18 = v3;
    uint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v18, v6);
    uint64_t result = sub_10001C2EC((uint64_t)a1);
    *a2 = v23;
    a2[1] = v13;
    a2[2] = v22;
    a2[3] = v16;
    a2[4] = v17;
    a2[5] = v20;
  }
  return result;
}

uint64_t sub_100053248()
{
  return sub_100052F08(*v0);
}

uint64_t sub_100053250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100052DAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100053278(uint64_t a1)
{
  unint64_t v2 = sub_100056DA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000532B4(uint64_t a1)
{
  unint64_t v2 = sub_100056DA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000532F0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100053084(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100053334(void *a1)
{
  return sub_100052F68(a1);
}

uint64_t sub_100053350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10024E0A0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_1000533B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E617254646C6FLL && a2 == 0xEE006E6F69746361;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x736E61725477656ELL && a2 == 0xEE006E6F69746361;
    if (v6 || (sub_10024FA60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_10024FA60();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter()
{
  return 3;
}

uint64_t sub_10005355C(char a1)
{
  if (!a1) {
    return 0x736E617254646C6FLL;
  }
  if (a1 == 1) {
    return 0x736E61725477656ELL;
  }
  return 0x6D617473656D6974;
}

uint64_t sub_1000535C0(void *a1)
{
  sub_100019524(&qword_10030B328);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  sub_10001C2A8(a1, a1[3]);
  sub_100056DF0();
  sub_1000572C8();
  sub_100056E3C();
  sub_100057214();
  if (!v1)
  {
    sub_100057214();
    type metadata accessor for EventManager.EventData(0);
    sub_10024E030();
    sub_10005549C((unint64_t *)&qword_100309420, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10024F980();
  }
  uint64_t v5 = sub_10005728C();
  return v6(v5);
}

uint64_t sub_100053758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = sub_10024E030();
  sub_10001B550();
  uint64_t v22 = v4;
  __chkstk_darwin(v5, v6);
  sub_10002059C();
  uint64_t v9 = v8 - v7;
  sub_100019524(&qword_10030B340);
  sub_10001B550();
  __chkstk_darwin(v10, v11);
  sub_10002059C();
  uint64_t v12 = type metadata accessor for EventManager.EventData(0);
  sub_100025FBC();
  __chkstk_darwin(v13, v14);
  sub_10002059C();
  uint64_t v17 = v16 - v15;
  *(_OWORD *)uint64_t v17 = xmmword_100258490;
  *(_OWORD *)(v17 + 16) = xmmword_100258490;
  sub_10001C2A8(a1, a1[3]);
  sub_100056DF0();
  sub_10024FD20();
  if (v2)
  {
    sub_10001C2EC((uint64_t)a1);
    sub_10003F7F4(*(void *)v17, *(void *)(v17 + 8));
    return sub_10003F7F4(*(void *)(v17 + 16), *(void *)(v17 + 24));
  }
  else
  {
    sub_100056E88();
    sub_1000572A4();
    *(_OWORD *)uint64_t v17 = v24;
    sub_1000572A4();
    *(_OWORD *)(v17 + 16) = v24;
    sub_10005549C(&qword_100309440, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10024F870();
    uint64_t v18 = sub_100057314();
    v19(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v17 + *(int *)(v12 + 24), v9, v23);
    sub_100055A58(v17, a2, (void (*)(void))type metadata accessor for EventManager.EventData);
    sub_10001C2EC((uint64_t)a1);
    return sub_100055AB8(v17, (void (*)(void))type metadata accessor for EventManager.EventData);
  }
}

uint64_t sub_100053A34()
{
  return sub_10005355C(*v0);
}

uint64_t sub_100053A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000533B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100053A64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100053A8C(uint64_t a1)
{
  unint64_t v2 = sub_100056DF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100053AC8(uint64_t a1)
{
  unint64_t v2 = sub_100056DF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100053B04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100053758(a1, a2);
}

uint64_t sub_100053B1C(void *a1)
{
  return sub_1000535C0(a1);
}

uint64_t sub_100053B34()
{
  type metadata accessor for EventManager();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for ASDOctaneEventType(0);
  sub_100019524(&qword_10030B248);
  sub_10005549C(&qword_10030B250, type metadata accessor for ASDOctaneEventType);
  uint64_t result = sub_10024E510();
  *(void *)(v0 + 112) = result;
  qword_10034C028 = v0;
  return result;
}

void sub_100053BE4()
{
  sub_10003C984();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100019524(&qword_10030B278);
  __chkstk_darwin(v7 - 8, v8);
  sub_10002059C();
  uint64_t v56 = v10 - v9;
  uint64_t v58 = type metadata accessor for EventManager.Observer(0);
  sub_10001B550();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v53 - v19;
  __chkstk_darwin(v21, v22);
  long long v24 = (char *)v53 - v23;
  __chkstk_darwin(v25, v26);
  uint64_t v54 = (char *)v53 - v27;
  uint64_t v55 = v0 + 112;
  swift_beginAccess();
  uint64_t v28 = sub_100161734(v4, *(void *)(v0 + 112));
  if (v28) {
    uint64_t v29 = (void *)v28;
  }
  else {
    uint64_t v29 = _swiftEmptyArrayStorage;
  }
  uint64_t v30 = v29[2];
  if (v30)
  {
    v53[1] = v16;
    v53[3] = v20;
    v53[4] = v4;
    v53[5] = v6;
    sub_1000572E8();
    uint64_t v20 = (char *)v29 + v31;
    uint64_t v32 = *(void *)(v2 + 8);
    uint64_t v57 = *(void *)v2;
    uint64_t v33 = v29;
    uint64_t v29 = (void *)v2;
    v53[2] = v12;
    uint64_t v12 = *(void *)(v12 + 72);
    v53[0] = v33;
    swift_bridgeObjectRetain();
    uint64_t v34 = v58;
    while (1)
    {
      sub_100055A58((uint64_t)v20, (uint64_t)v24, (void (*)(void))type metadata accessor for EventManager.Observer);
      uint64_t v35 = &v24[*(int *)(v34 + 20)];
      uint64_t v36 = *((void *)v35 + 1);
      uint64_t v16 = (char *)*((void *)v35 + 2);
      uint64_t v37 = *((void *)v35 + 3);
      uint64_t v6 = *((void *)v35 + 4);
      uint64_t v2 = *((void *)v35 + 5);
      if (v36)
      {
        if (!v32) {
          goto LABEL_33;
        }
        BOOL v38 = *(void *)v35 == v57 && v36 == v32;
        if (!v38 && (sub_10024FA60() & 1) == 0) {
          goto LABEL_33;
        }
      }
      else if (v32)
      {
        goto LABEL_33;
      }
      uint64_t v39 = v29[3];
      if (v37)
      {
        if (!v39) {
          goto LABEL_33;
        }
        BOOL v40 = v16 == (char *)v29[2] && v37 == v39;
        if (!v40 && (sub_10024FA60() & 1) == 0) {
          goto LABEL_33;
        }
      }
      else if (v39)
      {
        goto LABEL_33;
      }
      uint64_t v41 = v29[5];
      if (v2)
      {
        if (v41)
        {
          BOOL v42 = v6 == v29[4] && v2 == v41;
          if (v42 || (sub_10024FA60() & 1) != 0)
          {
LABEL_45:
            uint64_t v44 = v56;
            sub_100056304((uint64_t)v24, v56);
            sub_1000571F4();
            uint64_t v34 = v58;
            goto LABEL_37;
          }
        }
      }
      else if (!v41)
      {
        goto LABEL_45;
      }
LABEL_33:
      sub_100055AB8((uint64_t)v24, (void (*)(void))type metadata accessor for EventManager.Observer);
      v20 += v12;
      --v30;
      uint64_t v34 = v58;
      if (!v30)
      {
        sub_1000571F4();
        goto LABEL_36;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v43 = 1;
  uint64_t v34 = v58;
LABEL_36:
  uint64_t v44 = v56;
LABEL_37:
  sub_1000195B4(v44, v43, 1, v34);
  swift_bridgeObjectRelease();
  if (sub_10001FA0C(v44, 1, v34) == 1)
  {
    sub_100056210(v44);
    sub_100056270(v2, (uint64_t)v61);
    sub_100056270(v2 + 16, (uint64_t)v60);
    sub_100056270(v2 + 32, (uint64_t)v59);
    sub_1000562D8((uint64_t)v61);
    sub_1000562D8((uint64_t)v60);
    sub_1000562D8((uint64_t)v59);
    sub_10024E090();
    uint64_t v45 = &v20[*(int *)(v34 + 20)];
    long long v46 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v2;
    *((_OWORD *)v45 + 1) = v46;
    *((_OWORD *)v45 + 2) = *(_OWORD *)(v2 + 32);
    sub_100055A58((uint64_t)v20, (uint64_t)v16, (void (*)(void))type metadata accessor for EventManager.Observer);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000359EC(0, v29[2] + 1, 1, (uint64_t)v29);
      uint64_t v29 = v51;
    }
    unint64_t v48 = v29[2];
    unint64_t v47 = v29[3];
    if (v48 >= v47 >> 1)
    {
      sub_1000359EC(v47 > 1, v48 + 1, 1, (uint64_t)v29);
      uint64_t v29 = v52;
    }
    v29[2] = v48 + 1;
    sub_1000572E8();
    sub_100056304((uint64_t)v16, (uint64_t)v29 + v49 + *(void *)(v12 + 72) * v48);
    swift_beginAccess();
    sub_10020C84C();
    swift_endAccess();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = v54;
    sub_100056304(v44, (uint64_t)v54);
  }
  sub_10024E0A0();
  sub_100025FBC();
  (*(void (**)(uint64_t, char *))(v50 + 16))(v6, v20);
  sub_100055AB8((uint64_t)v20, (void (*)(void))type metadata accessor for EventManager.Observer);
  sub_10003C8C8();
}

void sub_1000540A8()
{
  sub_10003C984();
  int64_t v2 = v1;
  uint64_t v3 = type metadata accessor for EventManager.Observer(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8, v5);
  sub_10002059C();
  uint64_t v8 = v7 - v6;
  uint64_t v34 = v0 + 112;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v10 = v9 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v9 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  uint64_t v36 = v9;
  uint64_t v32 = v9 + 64;
  uint64_t v33 = v4;
  int64_t v31 = v14;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(*(void *)(v9 + 48) + 8 * i);
    uint64_t v22 = *(void *)(*(void *)(v9 + 56) + 8 * i);
    uint64_t v37 = v22;
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v35 = v21;
      sub_1000572E8();
      uint64_t v25 = v22 + v24;
      swift_bridgeObjectRetain_n();
      uint64_t v26 = *(void *)(v4 + 72);
      while (1)
      {
        sub_100055A58(v25, v8, (void (*)(void))type metadata accessor for EventManager.Observer);
        char v27 = sub_10024E070();
        sub_100055AB8(v8, (void (*)(void))type metadata accessor for EventManager.Observer);
        if (v27) {
          break;
        }
        v25 += v26;
        if (!--v23)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v9 = v36;
          uint64_t v10 = v32;
          uint64_t v4 = v33;
          int64_t v14 = v31;
          goto LABEL_25;
        }
      }
      uint64_t v28 = swift_bridgeObjectRelease_n();
      __chkstk_darwin(v28, v29);
      *(&v31 - 2) = v2;
      sub_100055B40((uint64_t (*)(unint64_t))sub_100055B10);
      if (*(void *)(v37 + 16) >= v30)
      {
        sub_10003BDAC();
        swift_beginAccess();
        sub_10020C84C();
        swift_endAccess();
LABEL_29:
        swift_release();
        sub_10003C8C8();
        return;
      }
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
LABEL_25:
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v18 >= v14) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v18);
    ++v15;
    if (!v19)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_29;
      }
      unint64_t v19 = *(void *)(v10 + 8 * v15);
      if (!v19)
      {
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v14) {
          goto LABEL_29;
        }
        unint64_t v19 = *(void *)(v10 + 8 * v15);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v14) {
    goto LABEL_29;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
    int64_t v15 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v14) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_33:
  __break(1u);
}

void sub_1000543D0()
{
  sub_10003C984();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v88 = type metadata accessor for EventManager.EventData(0);
  sub_100025FBC();
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v80 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v75 - v11;
  __chkstk_darwin(v10, v13);
  int64_t v15 = (uint64_t *)((char *)&v75 - v14);
  uint64_t v16 = type metadata accessor for EventManager.Observer(0);
  sub_10001B550();
  uint64_t v18 = v17;
  __chkstk_darwin(v19, v20);
  sub_100057274();
  uint64_t v21 = v4;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    type metadata accessor for Transaction();
    uint64_t v21 = sub_1000D8FFC(v21);
  }
  swift_beginAccess();
  uint64_t v22 = sub_100161734(0, *(void *)(v2 + 112));
  if (!v22) {
    goto LABEL_54;
  }
  uint64_t v23 = *(void *)(v22 + 16);
  if (!v23) {
    goto LABEL_53;
  }
  sub_1000572E8();
  uint64_t v24 = v21;
  uint64_t v75 = v25;
  uint64_t v27 = v25 + v26;
  uint64_t v78 = &v94;
  uint64_t v89 = *(void *)(v18 + 72);
  uint64_t v76 = v24;
  uint64_t v28 = v24;
  uint64_t v90 = 0;
  uint64_t v86 = 0;
  unint64_t v91 = 0xF000000000000000;
  os_log_type_t v92 = v28;
  uint64_t v83 = (char *)&type metadata for Any + 8;
  *(void *)&long long v29 = 136315138;
  long long v77 = v29;
  uint64_t v79 = v12;
  uint64_t v84 = v16;
  unint64_t v85 = v15;
  uint64_t v87 = v1;
  while (1)
  {
    sub_100055A58(v27, v1, (void (*)(void))type metadata accessor for EventManager.Observer);
    uint64_t v30 = (uint64_t *)(v1 + *(int *)(v16 + 20));
    uint64_t v31 = v30[1];
    if (v31)
    {
      uint64_t v32 = *v30;
      swift_bridgeObjectRetain();
      if (sub_1000D428C() == v32 && v31 == v33)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v35 = sub_1000571D4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v36 = v30[3];
    if (v36)
    {
      uint64_t v37 = v30[2];
      swift_bridgeObjectRetain();
      if (sub_1000D427C() == v37 && v36 == v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v40 = sub_1000571D4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v41 = v30[5];
    if (!v41) {
      goto LABEL_32;
    }
    uint64_t v42 = v30[4];
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_1000D939C(15);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    if (v43 == v42 && v44 == v41) {
      break;
    }
    char v46 = sub_1000571D4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v46) {
      goto LABEL_32;
    }
LABEL_50:
    sub_100055AB8(v1, (void (*)(void))type metadata accessor for EventManager.Observer);
    v27 += v89;
    if (!--v23)
    {
      sub_10003F7F4(v90, v91);

      goto LABEL_52;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  unint64_t v47 = v91;
  if (v91 >> 60 != 15)
  {
    uint64_t v57 = v90;
    uint64_t v58 = v90;
    unint64_t v59 = v91;
LABEL_47:
    sub_100047398(v57, v47);
    if (qword_100308D48 != -1) {
      swift_once();
    }
    sub_1000473AC(v58, v59);
    uint64_t v74 = v87;
    sub_100144454(0, v58, v59);
    sub_10003F7F4(v58, v59);
    sub_10003F808(v58, v59);
    uint64_t v90 = v58;
    unint64_t v91 = v59;
    uint64_t v1 = v74;
    goto LABEL_50;
  }
  uint64_t v48 = v90;
  *int64_t v15 = v90;
  v15[1] = v47;
  void v15[2] = v48;
  v15[3] = v47;
  sub_10024E020();
  uint64_t v49 = self;
  sub_1000D4700();
  Class isa = sub_10024E4E0().super.isa;
  swift_bridgeObjectRelease();
  v95[0] = 0;
  id v51 = [v49 dataWithJSONObject:isa options:0 error:v95];

  id v52 = v95[0];
  uint64_t v53 = v86;
  if (v51)
  {
    uint64_t v54 = sub_10024DF10();
    unint64_t v56 = v55;
  }
  else
  {
    uint64_t v60 = v52;
    sub_10024DCE0();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v54 = 0;
    uint64_t v53 = 0;
    unint64_t v56 = 0xF000000000000000;
  }
  swift_beginAccess();
  uint64_t v61 = *v15;
  unint64_t v62 = v15[1];
  *int64_t v15 = v54;
  v15[1] = v56;
  sub_10003F7F4(v61, v62);
  sub_100055A58((uint64_t)v15, (uint64_t)v12, (void (*)(void))type metadata accessor for EventManager.EventData);
  sub_10024DA00();
  swift_allocObject();
  sub_10024D9F0();
  sub_10005549C(&qword_10030B270, (void (*)(uint64_t))type metadata accessor for EventManager.EventData);
  uint64_t v63 = sub_10024D9E0();
  if (v53)
  {
    swift_release();
    swift_errorRelease();
    uint64_t v58 = 0;
    unint64_t v59 = 0xF000000000000000;
  }
  else
  {
    uint64_t v58 = v63;
    unint64_t v59 = v64;
    swift_release();
  }
  sub_100055AB8((uint64_t)v12, (void (*)(void))type metadata accessor for EventManager.EventData);
  if (qword_100308DE0 != -1) {
    swift_once();
  }
  uint64_t v65 = sub_10024E1F0();
  sub_10001B0E8(v65, (uint64_t)qword_10034C0E0);
  uint64_t v66 = sub_10024E1D0();
  os_log_type_t v67 = sub_10024EE30();
  BOOL v68 = os_log_type_enabled(v66, v67);
  uint64_t v86 = 0;
  if (v68)
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    v95[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = v77;
    uint64_t v81 = v69 + 4;
    os_log_type_t v82 = type metadata accessor for EventManager.EventData;
    sub_100055A58((uint64_t)v85, v80, (void (*)(void))type metadata accessor for EventManager.EventData);
    uint64_t v70 = sub_10024E700();
    uint64_t v93 = sub_1000F3F3C(v70, v71, (uint64_t *)v95);
    sub_10024F100();
    uint64_t v12 = v79;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Sending subscriptionWillRenew %s", v69, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    int64_t v15 = v85;
    swift_slowDealloc();

    uint64_t v72 = (uint64_t)v15;
    uint64_t v73 = v82;
  }
  else
  {

    uint64_t v73 = type metadata accessor for EventManager.EventData;
    uint64_t v72 = (uint64_t)v15;
  }
  sub_100055AB8(v72, (void (*)(void))v73);
  uint64_t v16 = v84;
  if (v59 >> 60 != 15)
  {
    sub_1000473AC(v58, v59);
    uint64_t v57 = v90;
    unint64_t v47 = v91;
    goto LABEL_47;
  }

  sub_100055AB8(v87, (void (*)(void))type metadata accessor for EventManager.Observer);
LABEL_52:
  uint64_t v21 = v76;
LABEL_53:
  swift_bridgeObjectRelease();
LABEL_54:

  sub_10003C8C8();
}

uint64_t sub_100054BEC(void *a1)
{
  uint64_t v3 = sub_100019524(&qword_10030A768);
  __chkstk_darwin(v3 - 8, v4);
  sub_10002059C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_100054CCC((char *)a1);
  uint64_t v9 = sub_10024EBD0();
  sub_1000195B4(v7, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v1;
  v10[5] = v8;
  swift_retain();
  sub_100198B48(v7, (uint64_t)&unk_10030B268, (uint64_t)v10);
  return swift_release();
}

char *sub_100054CCC(char *a1)
{
  if (swift_isUniquelyReferenced_nonNull()) {
    return a1;
  }
  else {
    return sub_1000D8FFC(a1);
  }
}

uint64_t sub_100054D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a5;
  return _swift_task_switch(sub_100054D30, a4, 0);
}

uint64_t sub_100054D30()
{
  sub_1000543D0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100054D90()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for EventManager()
{
  return self;
}

uint64_t *sub_100054DEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10024E0A0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v10[3];
    v9[2] = v10[2];
    _OWORD v9[3] = v12;
    uint64_t v13 = v10[5];
    void v9[4] = v10[4];
    v9[5] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100054EE4(uint64_t a1)
{
  uint64_t v2 = sub_10024E0A0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100054F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10024E0A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = v9[5];
  void v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100055014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10024E0A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = v9[2];
  v8[3] = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[4] = v9[4];
  v8[5] = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000550F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10024E0A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  return a1;
}

uint64_t sub_10005517C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10024E0A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[5];
  void v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100055228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005523C);
}

uint64_t sub_10005523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10024E0A0();
  sub_100025F58();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10001FA0C(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000552D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000552EC);
}

void sub_1000552EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_10024E0A0();
  sub_100025F58();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_1000195B4(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

uint64_t type metadata accessor for EventManager.Observer(uint64_t a1)
{
  return sub_100022F8C(a1, qword_10030B208);
}

uint64_t sub_100055398()
{
  uint64_t result = sub_10024E0A0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10005542C()
{
  return sub_10005549C(&qword_10030B240, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_100055474()
{
  return v0;
}

uint64_t sub_100055480()
{
  return sub_100055474();
}

uint64_t sub_10005549C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000554E4()
{
  unint64_t result = qword_10030B258;
  if (!qword_10030B258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10030B258);
  }
  return result;
}

uint64_t sub_100055530()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100055578(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100055638;
  return sub_100054D10(a1, v4, v5, v7, v6);
}

uint64_t sub_100055638()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10005572C(unint64_t a1, unint64_t a2)
{
  return sub_100055744(a1, a2, sub_100120718);
}

unint64_t sub_100055744(unint64_t result, unint64_t a2, uint64_t (*a3)(unint64_t))
{
  if (result == a2) {
    return result;
  }
  unint64_t v4 = result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  unint64_t v6 = *(void *)(*v3 + 16);
  if (v6 <= result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 <= a2)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(v5 + 32 + 8 * result);
  uint64_t v10 = *(void *)(v5 + 32 + 8 * a2);
  swift_retain();
  swift_retain();
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if ((result & 1) == 0)
  {
    unint64_t result = a3(v5);
    unint64_t v5 = result;
    *uint64_t v3 = result;
  }
  if (*(void *)(v5 + 16) <= v4) {
    goto LABEL_17;
  }
  *(void *)(v5 + 8 * v4 + 32) = v10;
  swift_release();
  sub_10024F420();
  unint64_t v11 = *v3;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v11;
  if ((result & 1) == 0)
  {
    unint64_t result = a3(v11);
    unint64_t v11 = result;
    *uint64_t v3 = result;
  }
  if (*(void *)(v11 + 16) <= a2) {
    goto LABEL_18;
  }
  *(void *)(v11 + 8 * a2 + 32) = v9;
  swift_release();
  return sub_10024F420();
}

void sub_100055888()
{
  sub_10003C984();
  if (v1 == v2)
  {
    sub_10003C8C8();
    return;
  }
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  if (v4 > v1 || v5 <= v1)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v2;
  if ((sub_1000572F4(v1) & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v4 > v7 || v5 <= v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __int16 v9 = sub_1000572F4(v7);
  if ((v9 & 0x100) != 0)
  {
LABEL_19:
    __break(1u);
    return;
  }
  ByteBufferView.subscript.setter(v9, v3);
  sub_10003C8C8();
  ByteBufferView.subscript.setter(v10, v11);
}

void sub_100055958(unint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *v2;
      unint64_t v5 = *(void *)(*v2 + 16);
      if (v5 > a1)
      {
        if (v5 > a2)
        {
          uint64_t v7 = *(void *)(v4 + 32 + 8 * a1);
          uint64_t v8 = *(void *)(v4 + 32 + 8 * a2);
          swift_retain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10011FD5C();
            uint64_t v4 = v9;
          }
          if (*(void *)(v4 + 16) > a1)
          {
            *(void *)(v4 + 32 + 8 * a1) = v8;
            swift_release();
            if (*(void *)(v4 + 16) > a2)
            {
              *(void *)(v4 + 32 + 8 * a2) = v7;
              swift_release();
              uint64_t *v2 = v4;
              return;
            }
LABEL_15:
            __break(1u);
            return;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t type metadata accessor for EventManager.EventData(uint64_t a1)
{
  return sub_100022F8C(a1, qword_10030B2D8);
}

uint64_t sub_100055A58(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_100025FBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100055AB8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_100025FBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100055B10()
{
  return sub_10024E070() & 1;
}

void sub_100055B40(uint64_t (*a1)(unint64_t))
{
  uint64_t v4 = type metadata accessor for EventManager.Observer(0) - 8;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v40 = (uint64_t)&v37 - v10;
  __chkstk_darwin(v11, v12);
  uint64_t v41 = (uint64_t)&v37 - v14;
  uint64_t v42 = v1;
  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(*v1 + 16);
  if (v16)
  {
    unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v18 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    unint64_t v19 = 0;
    unint64_t v39 = v17;
    while (1)
    {
      char v20 = a1(v15 + v17);
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return;
      }
      if (v20) {
        break;
      }
      ++v19;
      v17 += v18;
      if (v16 == v19) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    if (!__OFADD__(v19, 1))
    {
      unint64_t v21 = *(void *)(v15 + 16);
      if (v19 + 1 == v21) {
        return;
      }
      uint64_t v38 = v7;
      uint64_t v22 = v18 + v17;
      unint64_t v23 = v19 + 1;
      while (v23 < v21)
      {
        unint64_t v43 = v23;
        uint64_t v24 = v18;
        uint64_t v25 = v22;
        uint64_t v26 = v15 + v22;
        uint64_t v27 = a1;
        uint64_t v28 = v41;
        sub_100055A58(v26, v41, (void (*)(void))type metadata accessor for EventManager.Observer);
        long long v29 = v27;
        LOBYTE(v27) = v27(v28);
        sub_100055AB8(v28, (void (*)(void))type metadata accessor for EventManager.Observer);
        if (v27)
        {
          a1 = v29;
          uint64_t v18 = v24;
          unint64_t v30 = v43;
        }
        else
        {
          unint64_t v30 = v43;
          a1 = v29;
          uint64_t v18 = v24;
          if (v43 != v19)
          {
            if ((v19 & 0x8000000000000000) != 0) {
              goto LABEL_31;
            }
            uint64_t v31 = *v42;
            unint64_t v32 = *(void *)(*v42 + 16);
            if (v19 >= v32) {
              goto LABEL_32;
            }
            sub_100055A58(v31 + v39 + v19 * v24, v40, (void (*)(void))type metadata accessor for EventManager.Observer);
            if (v43 >= v32) {
              goto LABEL_33;
            }
            uint64_t v22 = v25;
            sub_100055A58(v31 + v25, (uint64_t)v38, (void (*)(void))type metadata accessor for EventManager.Observer);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v42 = v31;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001A8C14(v31);
              uint64_t v31 = v36;
              *uint64_t v42 = v36;
            }
            if (v19 >= *(void *)(v31 + 16)) {
              goto LABEL_34;
            }
            sub_1000561AC((uint64_t)v38, v31 + v39 + v19 * v24);
            if (v43 >= *(void *)(*v42 + 16)) {
              goto LABEL_35;
            }
            sub_1000561AC(v40, *v42 + v25);
            unint64_t v30 = v43;
          }
          if (__OFADD__(v19++, 1)) {
            goto LABEL_30;
          }
        }
        unint64_t v35 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_29;
        }
        uint64_t v15 = *v42;
        unint64_t v21 = *(void *)(*v42 + 16);
        unint64_t v23 = v30 + 1;
        v22 += v18;
        if (v35 == v21) {
          return;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_100055EC8()
{
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  if (v3 == v2) {
    return v3;
  }
  uint64_t v5 = *((unsigned int *)v0 + 2);
  unsigned int v4 = *((_DWORD *)v0 + 3);
  uint64_t v6 = v4 - v5;
  if (v4 < v5)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
  uint64_t v7 = *v0;
  unint64_t v39 = v0;
  unint64_t v8 = *((unsigned __int8 *)v0 + 22) | ((unint64_t)*((unsigned __int16 *)v0 + 10) << 8);
  uint64_t v9 = (void *)(v7 + 24);
  swift_retain();
  swift_beginAccess();
  uint64_t v38 = v3;
  while (1)
  {
    if (v3 >= v2)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v10 = v3 - v5;
    if (__OFSUB__(v3, v5)) {
      goto LABEL_43;
    }
    if (v10 < 0) {
      goto LABEL_44;
    }
    if (v10 >= v6) {
      goto LABEL_45;
    }
    v41[0] = *(unsigned char *)(*v9 + v8 + v3);
    sub_100057328();
    char v12 = v11();
    if (v1)
    {
      swift_release();
      return v3;
    }
    if (v12) {
      break;
    }
    if (v2 == ++v3)
    {
      swift_release();
      return v2;
    }
  }
  swift_release();
  if (v2 - 1 != v3)
  {
    uint64_t v13 = v3 + 1;
    uint64_t v34 = v3 + 1;
    uint64_t v14 = v39;
    uint64_t v37 = v2;
    while (v34 >= v38 && v13 < v2)
    {
      uint64_t v16 = *((unsigned int *)v14 + 2);
      unint64_t v17 = v13 - v16;
      if (__OFSUB__(v13, v16)) {
        goto LABEL_47;
      }
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_48;
      }
      unsigned int v18 = *((_DWORD *)v14 + 3);
      BOOL v19 = v18 >= v16;
      unint64_t v20 = v18 - v16;
      if (!v19) {
        goto LABEL_49;
      }
      if (v17 >= v20) {
        goto LABEL_50;
      }
      uint64_t v21 = *v14;
      uint64_t v22 = *((unsigned __int16 *)v14 + 10);
      uint64_t v23 = *((unsigned __int8 *)v14 + 22);
      unint64_t v35 = (void *)(*v14 + 24);
      unint64_t v36 = v20;
      swift_beginAccess();
      uint64_t v24 = v23 | (v22 << 8);
      char v40 = *(unsigned char *)(*(void *)(v21 + 24) + v24 + v13);
      sub_100057328();
      char v26 = v25();
      if ((v26 & 1) == 0)
      {
        if (v13 != v3)
        {
          if (v3 < v38 || v3 >= v37) {
            goto LABEL_54;
          }
          unint64_t v28 = v3 - v16;
          if (__OFSUB__(v3, v16)) {
            goto LABEL_55;
          }
          if ((v28 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v28 >= v36) {
            goto LABEL_57;
          }
          uint64_t v29 = *v35 + v24 + v16;
          char v30 = *(unsigned char *)(v29 + v28);
          char v40 = *(unsigned char *)(v29 + v17);
          ByteBuffer._setBytes(_:at:)((uint64_t)&v40, (uint64_t)v41, v3);
          char v40 = v30;
          ByteBuffer._setBytes(_:at:)((uint64_t)&v40, (uint64_t)v41, v13);
        }
        if (__OFADD__(v3++, 1)) {
          goto LABEL_52;
        }
      }
      uint64_t v32 = v13 + 1;
      uint64_t v14 = v39;
      uint64_t v2 = v37;
      if (__OFADD__(v13, 1)) {
        goto LABEL_51;
      }
      ++v13;
      if (v32 == v37) {
        return v3;
      }
    }
    goto LABEL_46;
  }
  return v3;
}

uint64_t sub_1000561AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventManager.Observer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056210(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030B278);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100056270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030AA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000562D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100056304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventManager.Observer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100056368(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_1000473AC(*(void *)a2, *(void *)(a2 + 8));
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }
    uint64_t v10 = (uint64_t *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v12 = *v10;
      sub_1000473AC(*v10, *(void *)(a2 + 24));
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = sub_10024E030();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_1000564A4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10003F808(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_10003F808(a1[2], v5);
  }
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_10024E030();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

uint64_t sub_100056544(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000473AC(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000473AC(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = sub_10024E030();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t *sub_100056630(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_1000473AC(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000567A4((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)a2;
  sub_1000473AC(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10003F808(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_1000473AC(*v11, *(void *)(a2 + 24));
      uint64_t v15 = a1[2];
      unint64_t v16 = a1[3];
      a1[2] = v14;
      a1[3] = v12;
      sub_10003F808(v15, v16);
      goto LABEL_15;
    }
    sub_1000567A4((uint64_t)(a1 + 2));
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v13 = *v11;
  sub_1000473AC(*v11, *(void *)(a2 + 24));
  a1[2] = v13;
  a1[3] = v12;
LABEL_15:
  uint64_t v17 = *(int *)(a3 + 24);
  unsigned int v18 = (char *)a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_10024E030();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000567A4(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000567F8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10024E030();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_100056874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000567A4(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10003F808(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v9;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
      sub_10003F808(v12, v10);
      goto LABEL_11;
    }
    sub_1000567A4(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
LABEL_11:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_10024E030();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_100056988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005699C);
}

uint64_t sub_10005699C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 11)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    BOOL v5 = ((4 * v4) & 0xC) == 0;
    unsigned int v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v10 = sub_10024E030();
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return sub_10001FA0C(v11, a2, v10);
  }
}

uint64_t sub_100056A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056A3C);
}

void *sub_100056A3C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 11)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v7 = sub_10024E030();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)sub_1000195B4(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_100056AC4()
{
  uint64_t result = sub_10024E030();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for EventManager.EventFilter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EventManager.EventFilter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EventManager.EventFilter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for EventManager.EventFilter(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventManager.EventFilter(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventManager.EventFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventFilter()
{
  return &type metadata for EventManager.EventFilter;
}

unint64_t sub_100056DA4()
{
  unint64_t result = qword_10030B320;
  if (!qword_10030B320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B320);
  }
  return result;
}

unint64_t sub_100056DF0()
{
  unint64_t result = qword_10030B330;
  if (!qword_10030B330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B330);
  }
  return result;
}

unint64_t sub_100056E3C()
{
  unint64_t result = qword_10030B338;
  if (!qword_10030B338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B338);
  }
  return result;
}

unint64_t sub_100056E88()
{
  unint64_t result = qword_10030B348;
  if (!qword_10030B348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B348);
  }
  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventData.CodingKeys()
{
  return &type metadata for EventManager.EventData.CodingKeys;
}

unsigned char *_s25ASOctaneSupportXPCService12EventManagerC9EventDataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100056FB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventFilter.CodingKeys()
{
  return &type metadata for EventManager.EventFilter.CodingKeys;
}

unint64_t sub_100056FF4()
{
  unint64_t result = qword_10030B358;
  if (!qword_10030B358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B358);
  }
  return result;
}

unint64_t sub_100057044()
{
  unint64_t result = qword_10030B360;
  if (!qword_10030B360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B360);
  }
  return result;
}

unint64_t sub_100057094()
{
  unint64_t result = qword_10030B368;
  if (!qword_10030B368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B368);
  }
  return result;
}

unint64_t sub_1000570E4()
{
  unint64_t result = qword_10030B370;
  if (!qword_10030B370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B370);
  }
  return result;
}

unint64_t sub_100057134()
{
  unint64_t result = qword_10030B378;
  if (!qword_10030B378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B378);
  }
  return result;
}

unint64_t sub_100057184()
{
  unint64_t result = qword_10030B380;
  if (!qword_10030B380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B380);
  }
  return result;
}

uint64_t sub_1000571D4()
{
  return sub_10024FA60();
}

uint64_t sub_100057214()
{
  return sub_10024F910();
}

uint64_t sub_10005723C()
{
  return sub_10024F8D0();
}

uint64_t sub_100057258()
{
  return sub_10024F7C0();
}

uint64_t sub_10005728C()
{
  return v0;
}

uint64_t sub_1000572A4()
{
  return sub_10024F800();
}

uint64_t sub_1000572C8()
{
  return sub_10024FD40();
}

uint64_t sub_1000572F4(uint64_t a1)
{
  return sub_10007274C(a1, 0, v1, v2, v3);
}

uint64_t sub_100057314()
{
  return v0;
}

uint64_t sub_10005733C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(v3 + 16);
  if (a2)
  {
    sub_1000578C0();
    sub_10011EF34(a3);
    if (v6)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v5;
      uint64_t v8 = *v5;
      *uint64_t v5 = 0x8000000000000000;
      Swift::Int v9 = *(void *)(v8 + 24);
      sub_100019524(&qword_10030B488);
      sub_10024F630(isUniquelyReferenced_nonNull_native, v9);
      type metadata accessor for ASDOctaneValueIdentifier(0);
      sub_100057870();
      sub_10024F650();
      *uint64_t v5 = v11;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000578C0();
    sub_10020C864();
  }
  return swift_endAccess();
}

uint64_t sub_100057444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100019524(&qword_100309778);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    sub_1000578C0();
    sub_10020C304(a3, v15, v16, v17, v18, v19, v20, v21, v32[0], v32[1]);
    swift_endAccess();
    goto LABEL_8;
  }
  if (a3 != 31)
  {
    if (a3 != 6)
    {
      if (a3 != 4) {
        return 0;
      }
      type metadata accessor for OctaneLocale();
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1000EFD68();
      swift_bridgeObjectRelease();
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *(void *)(v12 + 24);
        sub_1000578C0();
        swift_bridgeObjectRetain();
        sub_10020C904(v13, v14, 4);
        swift_endAccess();
        swift_release();
        return 0;
      }
      goto LABEL_23;
    }
    v32[0] = v4;
    uint64_t v25 = qword_100308D78;
    swift_bridgeObjectRetain();
    if (v25 != -1) {
      swift_once();
    }
    uint64_t v26 = *(void *)(qword_10034C0A0 + 16);
    if (!v26)
    {
LABEL_22:
      swift_bridgeObjectRelease();
LABEL_23:
      sub_100057824();
      uint64_t result = swift_allocError();
      *uint64_t v31 = 1;
      return result;
    }
    uint64_t v27 = qword_10034C0A0 + 56;
    while (1)
    {
      uint64_t v29 = *(void *)(v27 - 24);
      uint64_t v28 = *(void *)(v27 - 16);
      if (v29 == a1 && v28 == a2) {
        break;
      }
      if (sub_10024FA60()) {
        goto LABEL_26;
      }
      v27 += 80;
      if (!--v26) {
        goto LABEL_22;
      }
    }
    uint64_t v29 = a1;
LABEL_26:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1000578C0();
    swift_bridgeObjectRetain();
    sub_10020C904(v29, v28, 6);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10024DD90();
  uint64_t v23 = sub_10024DDC0();
  if (sub_10001FA0C((uint64_t)v11, 1, v23) != 1)
  {
    sub_1000257D4((uint64_t)v11);
    sub_1000578C0();
    sub_10020C904(a1, a2, 31);
    swift_endAccess();
    return 0;
  }
  swift_bridgeObjectRelease();
  sub_1000257D4((uint64_t)v11);
  sub_100057824();
  uint64_t result = swift_allocError();
  *uint64_t v24 = 1;
  return result;
}

uint64_t sub_1000577A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000577CC()
{
  sub_1000577A4();
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for OctaneConfigurationOverrides()
{
  return self;
}

unint64_t sub_100057824()
{
  unint64_t result = qword_10030B480;
  if (!qword_10030B480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B480);
  }
  return result;
}

unint64_t sub_100057870()
{
  unint64_t result = qword_100319630;
  if (!qword_100319630)
  {
    type metadata accessor for ASDOctaneValueIdentifier(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100319630);
  }
  return result;
}

uint64_t sub_1000578C0()
{
  return swift_beginAccess();
}

void *sub_1000578D8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000C2720(0x6E692D6563697270, 0xEE00657361657263, 1819112552, 0xE400000000000000);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_100021534(v3);
  }
  sub_10002158C(v1);
  return v2;
}

void sub_100057984(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100212134();
  uint64_t v6 = sub_100161540(1682534515, 0xE400000000000000, v5);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v2 = v7,
        uint64_t v9 = sub_100161540(6580578, 0xE300000000000000, v5),
        uint64_t v11 = v10,
        swift_bridgeObjectRelease(),
        v11))
  {
    uint64_t v5 = 0;
    sub_100057CA0(v8, v2, v9, v11, __src);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_1000578D8();
    if (v16)
    {
      uint64_t v18 = (uint64_t)v16;
      Swift::Int v19 = v17;
      uint64_t v27 = &type metadata for PriceIncreaseUIRoute.ViewProperties;
      *(void *)&long long v25 = swift_allocObject();
      memcpy((void *)(v25 + 16), __src, 0x61uLL);
      uint64_t v20 = sub_1000C2DBC((uint64_t)&v25, v18, v19);
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      sub_10001C2EC((uint64_t)&v25);
      sub_1000CB5C8(v20, v22, 1, (uint64_t)&v25);
      long long v23 = v25;
      uint64_t v5 = v26;
      uint64_t v3 = v27;
      uint64_t v2 = (void *)(v28 | ((unint64_t)v29 << 32) | ((unint64_t)v30 << 48));
      ASOctaneSupportXPCService::HTTPVersion v12 = HTTPVersion.init(major:minor:)(1, 1);
      type metadata accessor for HTTPResponseHead._Storage();
      uint64_t v13 = swift_allocObject();
      long long v14 = v23;
      uint64_t v15 = 3;
    }
    else
    {
      sub_10005857C((uint64_t)__src);
      ASOctaneSupportXPCService::HTTPVersion v12 = HTTPVersion.init(major:minor:)(1, 1);
      type metadata accessor for HTTPResponseHead._Storage();
      swift_allocObject();
      *(double *)&long long v14 = sub_1000589C0();
      uint64_t v15 = 49;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    ASOctaneSupportXPCService::HTTPVersion v12 = HTTPVersion.init(major:minor:)(1, 1);
    type metadata accessor for HTTPResponseHead._Storage();
    swift_allocObject();
    *(double *)&long long v14 = sub_1000589C0();
    uint64_t v15 = 21;
  }
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(v13 + 32) = v15;
  *(ASOctaneSupportXPCService::HTTPVersion *)(v13 + 40) = v12;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 62) = BYTE6(v2);
  *(_WORD *)(a1 + 60) = WORD2(v2);
  *(_DWORD *)(a1 + 56) = v2;
}

uint64_t sub_100057CA0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v103 = a1;
  uint64_t v98 = a5;
  uint64_t v97 = sub_10024DBF0();
  sub_10001B550();
  unint64_t v96 = v8;
  __chkstk_darwin(v9, v10);
  sub_1000589AC();
  unint64_t v95 = v11;
  uint64_t v12 = sub_100019524((uint64_t *)&unk_10030FD70);
  __chkstk_darwin(v12 - 8, v13);
  sub_1000589AC();
  uint64_t v102 = v14;
  uint64_t v15 = sub_10024E030();
  sub_10001B550();
  uint64_t v17 = v16;
  uint64_t v20 = __chkstk_darwin(v18, v19);
  os_log_type_t v101 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v87 - v23;
  uint64_t v25 = *(void *)(v5 + 112);
  uint64_t v99 = v5;
  sub_10001C2A8((void *)(v5 + 88), v25);
  uint64_t v26 = v15;
  sub_1001D255C();
  uint64_t v100 = a3;
  uint64_t v27 = a4;
  unsigned int v28 = (void *)sub_10009DC4C();
  unsigned __int16 v29 = *(void (**)(char *, uint64_t))(v17 + 8);
  v29(v24, v15);
  if (!v28) {
    goto LABEL_9;
  }
  sub_1000D9478(4);
  if (v30)
  {
    uint64_t v31 = v102;
    sub_1000195B4(v102, 1, 1, v15);
    goto LABEL_8;
  }
  uint64_t v31 = v102;
  sub_10024DF60();
  sub_1000195B4(v31, 0, 1, v15);
  if (sub_10001FA0C(v31, 1, v15) == 1)
  {
LABEL_8:

    sub_100058654(v31);
LABEL_9:
    sub_100022A5C();
    uint64_t v38 = swift_allocError();
    return sub_100058988(v38, v39);
  }
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v33 = v101;
  v32(v101, v31, v15);
  char v34 = sub_1000D55F8();
  if (((1 << v34) & 0x36) != 0)
  {
    sub_100022A5C();
    swift_allocError();
    *unint64_t v35 = 0;
    v35[1] = 0;
    v35[2] = 33;
    swift_willThrow();

    unint64_t v36 = v33;
    return ((uint64_t (*)(char *, uint64_t))v29)(v36, v26);
  }
  uint64_t v108 = v27;
  BOOL v40 = v34 == 0;
  uint64_t v94 = (void *)(v99 + 48);
  sub_100027788(v99 + 48, (uint64_t)&v104);
  uint64_t v103 = (uint64_t)sub_10001C2A8(&v104, v106);
  uint64_t v41 = sub_1000D563C();
  uint64_t v43 = v100;
  if (v42)
  {
    uint64_t v44 = v42;
    uint64_t v45 = (uint64_t)v41;
  }
  else
  {
    uint64_t v45 = sub_1000D427C();
    uint64_t v44 = v46;
  }
  sub_10008A5FC(v43, (uint64_t)v108);
  uint64_t v47 = sub_1000FE9DC(v45, v44);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v102 = v47;
  if (!v47)
  {
    sub_10001C2EC((uint64_t)&v104);
    sub_100022A5C();
    uint64_t v54 = swift_allocError();
    sub_100058988(v54, v55);

    unint64_t v36 = v101;
    return ((uint64_t (*)(char *, uint64_t))v29)(v36, v26);
  }
  BOOL v92 = v40;
  sub_10001C2EC((uint64_t)&v104);
  uint64_t v48 = v99;
  uint64_t v49 = v94;
  sub_10001C2A8(v94, *(void *)(v99 + 72));
  uint64_t v103 = sub_10008A7F0();
  sub_10001C2A8(v49, *(void *)(v48 + 72));
  sub_10008AFE8();
  uint64_t v50 = v102;
  unint64_t v51 = swift_bridgeObjectRetain();
  uint64_t v52 = sub_1000F072C(v51);
  swift_bridgeObjectRelease();
  uint64_t v91 = v52;
  if (v52)
  {
    uint64_t v53 = *(void **)(v52 + 40);
    uint64_t v89 = *(void *)(v52 + 32);
    uint64_t v88 = v53;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v89 = sub_10020F734();
    uint64_t v88 = v56;
  }
  uint64_t v93 = v26;
  uint64_t v57 = *(void *)(v50 + 176);
  char v58 = *(unsigned char *)(v50 + 184);
  id v59 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v59 setUnitsStyle:3];
  [v59 setAllowedUnits:4124];
  unint64_t v60 = v95;
  sub_100213A0C(v57, v58);
  Class isa = sub_10024DBC0().super.isa;
  (*(void (**)(unint64_t, uint64_t))(v96 + 8))(v60, v97);
  id v62 = [v59 stringFromDateComponents:isa];

  if (v62)
  {
    uint64_t v87 = sub_10024E6B0();
    unint64_t v64 = v63;
  }
  else
  {

    uint64_t v87 = 0;
    unint64_t v64 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  uint64_t v97 = sub_10005148C();
  unint64_t v66 = v65;
  swift_bridgeObjectRelease();
  type metadata accessor for AppIconRoute();
  uint64_t v67 = v100;
  uint64_t v68 = (uint64_t)v108;
  unint64_t v95 = sub_10006ACC8(v100, v108);
  unint64_t v90 = v69;
  sub_10001C2A8(v94, *(void *)(v99 + 72));
  uint64_t v108 = (void *)sub_10008A4B8(v67, v68);
  uint64_t v100 = v70;
  uint64_t v104 = v89;
  uint64_t v105 = v88;
  v109._countAndFlagsBits = 10272;
  v109._object = (void *)0xE200000000000000;
  sub_10024E800(v109);
  v110._countAndFlagsBits = v87;
  v110._object = v64;
  sub_10024E800(v110);
  swift_bridgeObjectRelease();
  v111._countAndFlagsBits = 41;
  v111._object = (void *)0xE100000000000000;
  sub_10024E800(v111);
  uint64_t v99 = v104;
  uint64_t v94 = v105;
  sub_1000D44D4();
  unint64_t v96 = v66;
  if ((v71 & 0x100000000) != 0)
  {
    sub_10001DB0C((uint64_t)v107);
    swift_bridgeObjectRetain();
    uint64_t v72 = v97;
    unint64_t v74 = v66;
  }
  else
  {
    swift_retain();
    uint64_t v72 = sub_1000512DC();
    unint64_t v74 = v73;
    sub_10001DB0C((uint64_t)v107);
    swift_release();
  }
  uint64_t v75 = v101;
  if (qword_100308CE8 != -1) {
    swift_once();
  }
  uint64_t v76 = (void *)qword_10030B088;
  Class v77 = sub_10024DFB0().super.isa;
  id v78 = [v76 stringFromDate:v77];

  uint64_t v79 = sub_10024E6B0();
  unint64_t v81 = v80;
  swift_release();
  swift_release();

  swift_release();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v75, v93);
  os_log_type_t v82 = v98;
  unint64_t v83 = v90;
  *uint64_t v98 = v95;
  v82[1] = v83;
  uint64_t v84 = v100;
  v82[2] = (unint64_t)v108;
  v82[3] = v84;
  unint64_t v85 = v94;
  v82[4] = v99;
  v82[5] = (unint64_t)v85;
  unint64_t v86 = v96;
  v82[6] = v97;
  v82[7] = v86;
  v82[8] = v72;
  v82[9] = v74;
  v82[10] = v79;
  v82[11] = v81;
  *((unsigned char *)v82 + 96) = v92;
  return result;
}

unint64_t sub_1000584B8(Swift::String a1, uint64_t a2, void *a3)
{
  sub_10024E800(a1);
  v6._countAndFlagsBits = 38;
  v6._object = (void *)0xE100000000000000;
  sub_10024E800(v6);
  v7._countAndFlagsBits = 6580578;
  v7._object = (void *)0xE300000000000000;
  sub_10024E800(v7);
  v8._countAndFlagsBits = 61;
  v8._object = (void *)0xE100000000000000;
  sub_10024E800(v8);
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  sub_10024E800(v9);
  return 0xD000000000000014;
}

uint64_t type metadata accessor for PriceIncreaseUIRoute()
{
  return self;
}

uint64_t sub_10005857C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000585F4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100058654(uint64_t a1)
{
  uint64_t v2 = sub_100019524((uint64_t *)&unk_10030FD70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

void *initializeWithTake for PriceIncreaseUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t assignWithTake for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PriceIncreaseUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PriceIncreaseUIRoute.ViewProperties()
{
  return &type metadata for PriceIncreaseUIRoute.ViewProperties;
}

uint64_t sub_100058988(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 25;
  return swift_willThrow();
}

double sub_1000589C0()
{
  return 0.0;
}

uint64_t (*NIOHTTPClientResponseFull.body.modify())(void)
{
  return debugOnly(_:);
}

uint64_t static NIOHTTPServerRequestFull.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100058B80(a1, a2, (uint64_t (*)(void, void, void, void, void, void))static HTTPRequestHead.== infix(_:_:));
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4headAA16HTTPResponseHeadVvg_0()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4headAA16HTTPResponseHeadVvs_0(uint64_t a1, uint64_t a2, char a3)
{
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3;
  return result;
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4bodyAA10ByteBufferVSgvg_0()
{
  return swift_retain();
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4bodyAA10ByteBufferVSgvs_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_release();
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(void *)(v3 + 32) = a2;
  *(unsigned char *)(v3 + 46) = BYTE6(a3);
  *(_WORD *)(v3 + 44) = WORD2(a3);
  *(_DWORD *)(v3 + 40) = a3;
  return result;
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4head4bodyAcA16HTTPResponseHeadV_AA10ByteBufferVSgtcfC_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = a3;
  *(void *)(a7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(_DWORD *)(a7 + 40) = a6;
  *(unsigned char *)(a7 + 46) = BYTE6(a6);
  *(_WORD *)(a7 + 44) = WORD2(a6);
  return result;
}

uint64_t static NIOHTTPClientResponseFull.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100058B80(a1, a2, (uint64_t (*)(void, void, void, void, void, void))static HTTPResponseHead.== infix(_:_:));
}

uint64_t sub_100058B80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  if (a3(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a2 + 24);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        unint64_t v8 = *(unsigned int *)(a1 + 40) | ((unint64_t)(*(unsigned __int16 *)(a1 + 44) | (*(unsigned __int8 *)(a1 + 46) << 16)) << 32);
        uint64_t v9 = *(void *)(a2 + 32);
        unint64_t v10 = *(unsigned int *)(a2 + 40) | ((unint64_t)(*(unsigned __int16 *)(a2 + 44) | (*(unsigned __int8 *)(a2 + 46) << 16)) << 32);
        uint64_t v11 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v12 = v10 & 0xFFFFFFFFFFFFFFLL;
        swift_retain();
        swift_retain();
        LOBYTE(v11) = static ByteBuffer.== infix(_:_:)(v5, v7, v11, v6, v9, v12);
        swift_release();
        swift_release();
        if (v11) {
          return 1;
        }
      }
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

void *NIOHTTPObjectAggregatorError.frameTooLong.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.frameTooLong;
}

void *NIOHTTPObjectAggregatorError.connectionClosed.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.connectionClosed;
}

void *NIOHTTPObjectAggregatorError.endingIgnoredMessage.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.endingIgnoredMessage;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageHead.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageHead;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageBody.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageBody;
}

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageBody.getter()
{
  return 4;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageEnd.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageEnd;
}

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageEnd.getter()
{
  return 5;
}

uint64_t sub_100058CD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NIOHTTPObjectAggregatorError.__derived_struct_equals(_:_:)(*a1, *a2);
}

void *NIOHTTPObjectAggregatorEvent.httpExpectationFailed.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorEvent.httpExpectationFailed;
}

void *NIOHTTPObjectAggregatorEvent.httpFrameTooLong.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorEvent.httpFrameTooLong;
}

void sub_100058CF8()
{
  if (*v0 - 1 >= 2)
  {
    if (!*v0)
    {
      *uint64_t v0 = 2;
      return;
    }
    char v1 = 1;
  }
  else
  {
    char v1 = 3;
  }
  sub_10005A5C0();
  swift_allocError();
  char *v2 = v1;
  swift_willThrow();
}

void sub_100058D74()
{
  char v1 = 0;
  switch(*v0)
  {
    case 1:
      goto LABEL_4;
    case 2:
      return;
    case 3:
      char v1 = 1;
      goto LABEL_4;
    default:
      char v1 = 4;
LABEL_4:
      sub_10005A5C0();
      swift_allocError();
      char *v2 = v1;
      swift_willThrow();
      return;
  }
}

void sub_100058E08()
{
  char v1 = 5;
  switch(*v0)
  {
    case 1:
      *uint64_t v0 = 0;
      char v1 = 2;
      goto LABEL_5;
    case 2:
      *uint64_t v0 = 0;
      return;
    case 3:
      char v1 = 1;
      goto LABEL_5;
    default:
LABEL_5:
      sub_10005A5C0();
      swift_allocError();
      char *v2 = v1;
      swift_willThrow();
      return;
  }
}

uint64_t NIOHTTPServerRequestAggregator.__allocating_init(maxContentLength:closeOnExpectationFailed:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  NIOHTTPServerRequestAggregator.init(maxContentLength:closeOnExpectationFailed:)(a1, a2);
  return v4;
}

uint64_t NIOHTTPServerRequestAggregator.init(maxContentLength:closeOnExpectationFailed:)(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 55) = 0;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 64) = result;
    *(unsigned char *)(v2 + 72) = a2 & 1;
    *(unsigned char *)(v2 + 73) = 0;
    return v2;
  }
  return result;
}

uint64_t NIOHTTPServerRequestAggregator.channelRead(context:data:)(uint64_t a1)
{
  sub_100019524(&qword_10030A518);
  sub_10003301C();
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  if (HIBYTE(v5))
  {
    if (HIBYTE(v5) != 1)
    {
      sub_100058E08();
      sub_10005958C(a1, v6, v7);
      uint64_t v21 = v6;
      uint64_t v22 = v7;
      uint64_t v23 = v8;
      char v24 = 2;
      return sub_10003C488(v21, v22, v23, v24);
    }
    unint64_t v29 = v3;
    *(void *)&long long v30 = v4;
    DWORD2(v30) = v5;
    WORD6(v30) = WORD2(v5);
    BYTE14(v30) = BYTE6(v5);
    swift_retain();
    sub_100058D74();
    unint64_t v10 = sub_100059490(a1, (uint64_t)&v29, v6, v7, v8 & 0xFFFFFFFFFFFFFFLL | 0x100000000000000);
    uint64_t v12 = v11;
    unsigned __int8 v14 = v13;
    sub_10005ADC0();
    if (!v10)
    {
LABEL_6:
      uint64_t v21 = sub_10005ADE0();
      return sub_10003C488(v21, v22, v23, v24);
    }
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100058CF8();
    unint64_t v10 = sub_1000593CC(a1, v6, v7, v8, v6, v7, v8 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v12 = v15;
    unsigned __int8 v14 = v16;
    swift_bridgeObjectRelease();
    swift_release();
    if (!v10) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = sub_100019524(&qword_10030A1F8);
  uint64_t v31 = (ValueMetadata *)v17;
  unint64_t v29 = v10;
  *(void *)&long long v30 = v12;
  *((void *)&v30 + 1) = v14;
  char v32 = 2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10003C1B8(v10);
  ChannelHandlerContext.write(_:promise:)((uint64_t)&v29, 0);
  sub_10003908C((uint64_t)&v29);
  uint64_t v31 = (ValueMetadata *)v17;
  unint64_t v29 = 0;
  *(void *)&long long v30 = 0;
  *(void *)((char *)&v30 + 7) = 0;
  HIBYTE(v30) = 2;
  char v32 = 2;
  ChannelHandlerContext.writeAndFlush(_:promise:)((uint64_t)&v29, 0);
  sub_10003908C((uint64_t)&v29);
  unint64_t v18 = *(void *)(v10 + 32);
  if (v18 < 0x3C && HTTPResponseStatus.code.getter(*(void *)(v10 + 16), *(void *)(v10 + 24), v18) == 413)
  {
    switch(*(unsigned char *)(v1 + 73))
    {
      case 1:
      case 3:
        __break(1u);
        JUMPOUT(0x1000593BCLL);
      default:
        *(unsigned char *)(v1 + 73) = 1;
        sub_10005A5C0();
        swift_allocError();
        unsigned char *v19 = 0;
        ChannelHandlerContext.fireErrorCaught(_:)();
        swift_errorRelease();
        uint64_t v31 = &type metadata for NIOHTTPObjectAggregatorEvent;
        LOBYTE(v29) = 1;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        sub_10001C2EC((uint64_t)&v29);
        break;
    }
  }
  sub_1001D5270(*(unsigned int *)(v10 + 40), v12, v14);
  if (v20)
  {
    sub_10003B934(v10);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  ChannelHandlerContext.close(mode:promise:)(2, 0);
  sub_10003B934(v10);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v25 = sub_10005ADE0();
  uint64_t result = sub_10003C488(v25, v26, v27, v28);
  *(unsigned char *)(v1 + 73) = 3;
  return result;
}

unint64_t sub_1000593CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  swift_beginAccess();
  uint64_t v14 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(unsigned char *)(v7 + 32) = a4;
  sub_10003B934(v14);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1001DC608();
  if ((v16 & 1) != 0 || *(void *)(v7 + 64) >= v15) {
    return 0;
  }
  else {
    return sub_1000598BC(a5, a6, a7);
  }
}

unint64_t sub_100059490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  uint64_t v8 = v7 - v6;
  if (v7 < v6)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(v5 + 64);
  unint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 40))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  unsigned int v14 = *(_DWORD *)(v5 + 48);
  unsigned int v15 = *(_DWORD *)(v5 + 52);
  BOOL v16 = v15 >= v14;
  unsigned int v17 = v15 - v14;
  if (!v16) {
    goto LABEL_12;
  }
  BOOL v18 = __OFSUB__(v12, v17);
  uint64_t v19 = v12 - v17;
  if (v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v19 < v8) {
    return sub_1000598BC(a3, a4, a5);
  }
  unint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 40)) {
    goto LABEL_15;
  }
  ByteBuffer.writeBuffer(_:)();
  swift_endAccess();
  return 0;
}

uint64_t sub_10005958C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3 + 16;
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 16);
  if (!v9) {
    return result;
  }
  char v10 = *(unsigned char *)(v3 + 32);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v23 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v12 = sub_100032B9C();
    char v13 = v12;
    __chkstk_darwin(v12, v14);
    uint64_t result = sub_10003A870(&v23);
    if (*(void *)(v23 + 16) < result)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    sub_10003ABA4();
    swift_bridgeObjectRetain();
    sub_1001D6E5C();
    if ((a3 == 2) | v13 & 1) {
      char v10 = 2;
    }
    uint64_t v11 = v23;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *(void *)(v4 + 40);
  if (!v15)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v16 = *(void *)(v4 + 48);
  if (HIDWORD(v16) < v16)
  {
    __break(1u);
    goto LABEL_18;
  }
  char v20 = v10;
  if (HIDWORD(v16) == v16)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = *(unsigned int *)(v4 + 56) | ((unint64_t)(*(unsigned __int16 *)(v4 + 60) | (*(unsigned __int8 *)(v4 + 62) << 16)) << 32);
    swift_retain();
  }
  uint64_t v17 = *(void *)(v4 + 16);
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10003B934(v17);
  swift_beginAccess();
  uint64_t result = *(void *)(v4 + 40);
  if (!result) {
    goto LABEL_20;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)(v4 + 40) = sub_10006C75C(*(_DWORD *)(*(void *)(v4 + 40) + 16));
    swift_release();
  }
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(*(void *)(v4 + 40) + 16);
  *(_WORD *)(v4 + 60) = 0;
  *(unsigned char *)(v4 + 62) = 0;
  *(void *)(v4 + 48) = 0;
  swift_endAccess();
  v21[3] = &type metadata for NIOHTTPServerRequestFull;
  uint64_t v18 = swift_allocObject();
  v21[0] = v18;
  *(void *)(v18 + 16) = v9;
  *(void *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  *(unsigned char *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v15;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 62) = BYTE6(v19);
  *(_WORD *)(v18 + 60) = WORD2(v19);
  *(_DWORD *)(v18 + 56) = v19;
  char v22 = 2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.fireChannelRead(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10003908C((uint64_t)v21);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000598BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(v3 + 16);
  if (v7)
  {
    __int16 v8 = *(_WORD *)(v7 + 48);
    __int16 v9 = *(_WORD *)(v7 + 50);
  }
  else
  {
    __int16 v8 = 1;
    __int16 v9 = 1;
  }
  swift_endAccess();
  sub_100019524(&qword_100309300);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100255FB0;
  strcpy((char *)(v10 + 32), "content-length");
  *(unsigned char *)(v10 + 47) = -18;
  *(void *)(v10 + 48) = 48;
  *(void *)(v10 + 56) = 0xE100000000000000;
  type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(v11 + 32) = 34;
  *(_WORD *)(v11 + 40) = v8;
  *(_WORD *)(v11 + 42) = v9;
  if (HIBYTE(a3))
  {
    unint64_t result = sub_1000304DC(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL);
    if ((result & 1) == 0)
    {
      uint64_t v16 = (void *)sub_1000351A8(1, 2, 1, v10);
      void v16[2] = 2;
      v16[8] = 0x697463656E6E6F63;
      v16[9] = 0xEA00000000006E6FLL;
      v16[10] = 0x65736F6C63;
      v16[11] = 0xE500000000000000;
      sub_100032B9C();
      return v11;
    }
    __break(1u);
  }
  else
  {
    uint64_t v12 = *(unsigned int *)(a1 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1001D5270(v12, a2, a3);
    if (v13)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      swift_release();
      return v11;
    }
    unint64_t result = sub_1000304DC(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL);
    if ((result & 1) == 0)
    {
      uint64_t v15 = (void *)sub_1000351A8(1, 2, 1, v10);
      void v15[2] = 2;
      v15[8] = 0x697463656E6E6F63;
      v15[9] = 0xEA00000000006E6FLL;
      v15[10] = 0x65736F6C63;
      v15[11] = 0xE500000000000000;
      sub_100032B9C();
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t NIOHTTPServerRequestAggregator.__deallocating_deinit()
{
  NIOHTTPClientResponseAggregator.deinit();
  return _swift_deallocClassInstance(v0, 74, 7);
}

uint64_t NIOHTTPClientResponseAggregator.__allocating_init(maxContentLength:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  NIOHTTPClientResponseAggregator.init(maxContentLength:)(a1);
  return v2;
}

uint64_t NIOHTTPClientResponseAggregator.init(maxContentLength:)(uint64_t result)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 55) = 0;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 64) = result;
    *(unsigned char *)(v1 + 72) = 0;
    return v1;
  }
  return result;
}

uint64_t NIOHTTPClientResponseAggregator.channelRead(context:data:)(uint64_t a1)
{
  sub_100019524(&qword_10030A520);
  sub_100033418();
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  char v7 = v4;
  if (HIBYTE(v4))
  {
    if (HIBYTE(v4) == 1)
    {
      v16[0] = v2;
      v16[1] = v3;
      int v17 = v4;
      __int16 v18 = WORD2(v4);
      char v19 = BYTE6(v4);
      sub_100058D74();
      sub_100059FDC(a1, (uint64_t)v16);
      uint64_t v8 = sub_10005ADB0();
      char v11 = 1;
    }
    else
    {
      sub_100058E08();
      sub_10005A150(a1, v5, v6);
      uint64_t v8 = sub_10005ADB0();
      char v11 = 2;
    }
    return sub_10003C488(v8, v9, v10, v11);
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100058CF8();
    sub_100059EC0(a1, v5, v6, v7);
    uint64_t v13 = sub_10005ADB0();
    sub_10003C488(v13, v14, v15, 0);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_100059EC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(unsigned char *)(v4 + 32) = a4;
  sub_10003B934(v5);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1001DC608();
  if ((v7 & 1) == 0 && *(void *)(v4 + 64) < result)
  {
    switch(*(unsigned char *)(v4 + 72))
    {
      case 1:
      case 3:
        __break(1u);
        JUMPOUT(0x100059FCCLL);
      default:
        *(unsigned char *)(v4 + 72) = 1;
        uint64_t v10 = &type metadata for NIOHTTPObjectAggregatorEvent;
        v9[0] = 1;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        sub_10001C2EC((uint64_t)v9);
        sub_10005A5C0();
        swift_allocError();
        unsigned char *v8 = 0;
        ChannelHandlerContext.fireErrorCaught(_:)();
        uint64_t result = swift_errorRelease();
        break;
    }
  }
  return result;
}

uint64_t sub_100059FDC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = v4 - v3;
  if (v4 < v3)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(v2 + 64);
  swift_beginAccess();
  if (!*(void *)(v2 + 40)) {
    goto LABEL_15;
  }
  unsigned int v7 = *(_DWORD *)(v2 + 48);
  unsigned int v8 = *(_DWORD *)(v2 + 52);
  BOOL v9 = v8 >= v7;
  unsigned int v10 = v8 - v7;
  if (!v9) {
    goto LABEL_13;
  }
  BOOL v11 = __OFSUB__(v6, v10);
  uint64_t v12 = v6 - v10;
  if (v11)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v12 < v5)
  {
    switch(*(unsigned char *)(v2 + 72))
    {
      case 1:
      case 3:
        goto LABEL_16;
      default:
        *(unsigned char *)(v2 + 72) = 1;
        uint64_t v16 = &type metadata for NIOHTTPObjectAggregatorEvent;
        v15[0] = 1;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        sub_10001C2EC((uint64_t)v15);
        sub_10005A5C0();
        swift_allocError();
        *uint64_t v13 = 0;
        ChannelHandlerContext.fireErrorCaught(_:)();
        return swift_errorRelease();
    }
  }
  swift_beginAccess();
  if (!*(void *)(v2 + 40))
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x10005A140);
  }
  ByteBuffer.writeBuffer(_:)();
  return swift_endAccess();
}

uint64_t sub_10005A150(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3 + 16;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return result;
  }
  uint64_t v6 = v3;
  char v9 = *(unsigned char *)(v3 + 32);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v23 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v11 = sub_100032B9C();
    char v12 = v11;
    __chkstk_darwin(v11, v13);
    uint64_t result = sub_10003A870(&v23);
    if (*(void *)(v23 + 16) < result)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    sub_10003ABA4();
    swift_bridgeObjectRetain();
    sub_1001D6E5C();
    if ((a3 == 2) | v12 & 1) {
      char v9 = 2;
    }
    uint64_t v10 = v23;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *(void *)(v6 + 40);
  if (!v15)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v16 = *(void *)(v6 + 48);
  if (HIDWORD(v16) < v16)
  {
    __break(1u);
    goto LABEL_18;
  }
  char v20 = v9;
  if (HIDWORD(v16) == v16)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = *(unsigned int *)(v6 + 56) | ((unint64_t)(*(unsigned __int16 *)(v6 + 60) | (*(unsigned __int8 *)(v6 + 62) << 16)) << 32);
    swift_retain();
  }
  uint64_t v17 = *(void *)(v6 + 16);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10003B934(v17);
  swift_beginAccess();
  uint64_t result = *(void *)(v6 + 40);
  if (!result) {
    goto LABEL_20;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)(v6 + 40) = sub_10006C75C(*(_DWORD *)(*(void *)(v6 + 40) + 16));
    swift_release();
  }
  *(_DWORD *)(v6 + 56) = *(_DWORD *)(*(void *)(v6 + 40) + 16);
  *(_WORD *)(v6 + 60) = 0;
  *(unsigned char *)(v6 + 62) = 0;
  *(void *)(v6 + 48) = 0;
  swift_endAccess();
  v21[3] = &type metadata for NIOHTTPClientResponseFull;
  uint64_t v18 = swift_allocObject();
  v21[0] = v18;
  *(void *)(v18 + 16) = v4;
  *(void *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  *(unsigned char *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v15;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 62) = BYTE6(v19);
  *(_WORD *)(v18 + 60) = WORD2(v19);
  *(_DWORD *)(v18 + 56) = v19;
  char v22 = 2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.fireChannelRead(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10003908C((uint64_t)v21);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorC12handlerAdded7contextyAA21ChannelHandlerContextC_tF_0()
{
  uint64_t v1 = v0;
  sub_1000AE91C();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  swift_unknownObjectRelease();
  if (qword_100308D08 != -1) {
    swift_once();
  }
  uint64_t v5 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v6 = qword_10034C038;
  int v7 = dword_10034C040;
  __int16 v8 = word_10034C044;
  char v9 = byte_10034C046;
  swift_beginAccess();
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = v6;
  *(unsigned char *)(v1 + 62) = v9;
  *(_WORD *)(v1 + 60) = v8;
  *(_DWORD *)(v1 + 56) = v7;
  swift_retain();
  return swift_release();
}

uint64_t _s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorCfd_0()
{
  sub_10003B934(*(void *)(v0 + 16));
  swift_release();
  return v0;
}

uint64_t NIOHTTPClientResponseAggregator.__deallocating_deinit()
{
  NIOHTTPClientResponseAggregator.deinit();
  return _swift_deallocClassInstance(v0, 73, 7);
}

unint64_t sub_10005A5C0()
{
  unint64_t result = qword_10030B590;
  if (!qword_10030B590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B590);
  }
  return result;
}

unint64_t sub_10005A610()
{
  unint64_t result = qword_10030B598;
  if (!qword_10030B598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B598);
  }
  return result;
}

__n128 initializeWithTake for NIOHTTPServerRequestFull(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for NIOHTTPServerRequestFull()
{
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwxx_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 43);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return sub_10005AD90();
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return sub_10005AD90();
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwet_0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 47))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005A878(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 46) = 0;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 47) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 47) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for NIOHTTPClientResponseFull()
{
}

void type metadata accessor for NIOHTTPObjectAggregatorError()
{
}

void type metadata accessor for NIOHTTPObjectAggregatorEvent()
{
}

uint64_t type metadata accessor for NIOHTTPServerRequestAggregator()
{
  return self;
}

uint64_t type metadata accessor for NIOHTTPClientResponseAggregator()
{
  return self;
}

unsigned char *sub_10005A944(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005AA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for AggregatorState()
{
}

unsigned char *_s25ASOctaneSupportXPCService28NIOHTTPObjectAggregatorEventV4BaseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005AB10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPObjectAggregatorEvent.Base()
{
  return &type metadata for NIOHTTPObjectAggregatorEvent.Base;
}

unsigned char *_s25ASOctaneSupportXPCService28NIOHTTPObjectAggregatorErrorV4BaseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005AC14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPObjectAggregatorError.Base()
{
  return &type metadata for NIOHTTPObjectAggregatorError.Base;
}

unint64_t sub_10005AC50()
{
  unint64_t result = qword_10030B7B8;
  if (!qword_10030B7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B7B8);
  }
  return result;
}

unint64_t sub_10005ACA0()
{
  unint64_t result = qword_10030B7C0;
  if (!qword_10030B7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B7C0);
  }
  return result;
}

unint64_t sub_10005ACF0()
{
  unint64_t result = qword_10030B7C8;
  if (!qword_10030B7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B7C8);
  }
  return result;
}

uint64_t sub_10005AD44()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 63, 7);
}

uint64_t sub_10005AD90()
{
  *(_DWORD *)(v1 + 40) = *(_DWORD *)(v0 + 40);
  *(_WORD *)(v1 + 44) = *(_WORD *)(v0 + 44);
  *(unsigned char *)(v1 + 46) = *(unsigned char *)(v0 + 46);
  return v1;
}

uint64_t sub_10005ADB0()
{
  return v0;
}

uint64_t sub_10005ADC0()
{
  return sub_10003C488(v2, v1, v0, 1);
}

uint64_t sub_10005ADE0()
{
  return v0;
}

uint64_t sub_10005ADF4()
{
  return sub_10003C488(v0, v1, v2, v3);
}

void *sub_10005AE14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100019524(&qword_10030B7D0);
  __chkstk_darwin(v5 - 8, v6);
  __int16 v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for StatusResponse.Datum.TransactionContainer();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v32 = (uint64_t)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v35 = a2;
    v30[1] = v2;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_100038BF8();
    uint64_t v13 = v37;
    uint64_t v14 = (void **)(a1 + 48);
    long long v31 = xmmword_100255FB0;
    do
    {
      uint64_t v15 = (uint64_t)*(v14 - 2);
      uint64_t v16 = (uint64_t)*(v14 - 1);
      uint64_t v17 = *v14;
      if (*v14)
      {
        uint64_t v36 = (uint64_t)*(v14 - 2);
        id v18 = v17;
        swift_bridgeObjectRetain_n();
        id v19 = v18;
        uint64_t v20 = v35;
        sub_10005CD24(v35);
        sub_10005B670(v19, v20, (uint64_t)v8);
        if (sub_10001FA0C((uint64_t)v8, 1, v34) == 1)
        {
          sub_10003C3FC((uint64_t)v8, &qword_10030B7D0);
          swift_bridgeObjectRelease();

          uint64_t v21 = _swiftEmptyArrayStorage;
        }
        else
        {
          uint64_t v22 = (uint64_t)v8;
          uint64_t v23 = v8;
          uint64_t v24 = v32;
          sub_10005CF20(v22, v32);
          sub_100019524(&qword_10030B7D8);
          unint64_t v25 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
          uint64_t v21 = (void *)swift_allocObject();
          *((_OWORD *)v21 + 1) = v31;
          uint64_t v26 = v24;
          __int16 v8 = v23;
          sub_10005CF20(v26, (uint64_t)v21 + v25);
          swift_bridgeObjectRelease();
        }
        uint64_t v15 = v36;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = _swiftEmptyArrayStorage;
      }
      uint64_t v37 = v13;
      unint64_t v27 = v13[2];
      if (v27 >= v13[3] >> 1)
      {
        uint64_t v36 = v15;
        sub_100038BF8();
        uint64_t v15 = v36;
        uint64_t v13 = v37;
      }
      v14 += 3;
      v13[2] = v27 + 1;
      char v28 = &v13[3 * v27];
      v28[4] = v15;
      v28[5] = v16;
      v28[6] = v21;
      --v12;
    }
    while (v12);
    sub_10005CDE4(v35);
  }
  else
  {
    sub_10005CDE4(a2);
    return _swiftEmptyArrayStorage;
  }
  return v13;
}

uint64_t sub_10005B104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&void v28[3] = *(_OWORD *)a1;
  *(_OWORD *)&v28[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v29 = *(_OWORD *)(a1 + 32);
  long long v30 = v5;
  sub_100210624();
  uint64_t v7 = v6;
  char v9 = v8;
  sub_100210840();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v14 = *((void *)&v29 + 1);
  uint64_t v27 = v29;
  sub_10005CCC8((__n128 *)(a1 + 72), (__n128 *)v28);
  sub_10005CCC8((__n128 *)v28, &v31);
  char v15 = v32;
  if ((v32 & 1) == 0)
  {
    uint64_t v21 = v31.n128_i64[1];
    uint64_t v25 = v31.n128_u64[0];
    uint64_t v26 = v7;
    unint64_t v22 = *(void *)(a1 + 64);
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_10005CEA4((uint64_t)v28);
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)sub_10024F6F0();
      if (v23) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v23 = *(void **)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      sub_10005CEA4((uint64_t)v28);
      swift_bridgeObjectRetain();
      if (v23)
      {
LABEL_5:
        sub_10014ED88(0, (v22 & 0xC000000000000001) == 0, v22);
        if ((v22 & 0xC000000000000001) != 0) {
          id v24 = (id)sub_10024F380();
        }
        else {
          id v24 = *(id *)(v22 + 32);
        }
        uint64_t v23 = v24;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = sub_10005C114(v23, v25, v21, a1);
    uint64_t v17 = (void *)result;
    uint64_t v7 = v26;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10005C5E0(a1);
  sub_10005CD24(a1);
  uint64_t v17 = sub_10005AE14((uint64_t)v16, a1);
  sub_10005CDE4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
LABEL_9:
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v9 & 1;
  *(void *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13 & 1;
  *(void *)(a2 + 32) = v27;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = 0x65646F6358;
  *(void *)(a2 + 56) = 0xE500000000000000;
  *(void *)(a2 + 64) = v17;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v20;
  *(unsigned char *)(a2 + 88) = v15;
  return result;
}

uint64_t sub_10005B300(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_10001C2A8(a1, a1[3]);
  sub_10024FD30();
  sub_100051B64((uint64_t)v7, v8);
  if (a5)
  {
    sub_100019524(&qword_10030B968);
    sub_100061FCC();
  }
  else
  {
    sub_100062040();
  }
  sub_10024FAC0();
  return sub_10001C2EC((uint64_t)v7);
}

uint64_t sub_10005B400(void *a1)
{
  return sub_10005B300(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10005B424(void *a1)
{
  sub_10024E030();
  sub_10001B550();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100062164();
  sub_10024E010();
  char v6 = sub_1000D56E0();
  uint64_t v7 = *(void (**)(void))(v3 + 8);
  sub_10003C99C();
  v7();
  if (v6)
  {

    return 4;
  }
  if (sub_1000D5828())
  {

    return 3;
  }
  sub_10024E010();
  char v9 = sub_1000D5964();
  sub_10003C99C();
  v7();
  if (v9)
  {

    return 1;
  }
  sub_1000D9478(3);
  if (v10)
  {
  }
  else
  {
    char v11 = sub_1000D4218();

    if (v11) {
      return 5;
    }
  }
  return 2;
}

unint64_t sub_10005B53C(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

uint64_t ExternalGatewayMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_10005B554()
{
  return sub_1001D3458(*v0);
}

uint64_t sub_10005B55C(uint64_t a1)
{
  return RemoveAfterUpgradeStrategy.hash(into:)(a1, *v1);
}

uint64_t sub_10005B564(uint64_t a1)
{
  return sub_1000D36A8(a1, *v1);
}

unint64_t sub_10005B56C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005B53C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005B598()
{
  uint64_t v1 = sub_1000621E4();
  uint64_t result = ExternalGatewayMode.rawValue.getter(v1);
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_10005B5C0()
{
  return sub_10024EA60();
}

uint64_t sub_10005B620()
{
  return sub_10024EA10();
}

uint64_t sub_10005B670@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100019524(&qword_10030B7E0);
  uint64_t v8 = sub_100026018(v7);
  __chkstk_darwin(v8, v9);
  sub_1000589AC();
  uint64_t v67 = v10;
  uint64_t v11 = sub_100019524(&qword_10030B7E8);
  sub_100025FBC();
  __chkstk_darwin(v12, v13);
  sub_100026000();
  uint64_t v14 = sub_100019524(&qword_10030B7F0);
  uint64_t v15 = sub_100026018(v14);
  __chkstk_darwin(v15, v16);
  sub_1000589AC();
  uint64_t v65 = v17;
  uint64_t v63 = sub_100019524(&qword_10030A380);
  sub_100025FBC();
  __chkstk_darwin(v18, v19);
  sub_100062164();
  uint64_t v20 = type metadata accessor for RenewalInfo();
  uint64_t v21 = sub_100026018(v20);
  __chkstk_darwin(v21, v22);
  sub_1000589AC();
  unint64_t v64 = v23;
  uint64_t v24 = sub_100019524((uint64_t *)&unk_10030FD70);
  uint64_t v25 = sub_100026018(v24);
  __chkstk_darwin(v25, v26);
  sub_10002059C();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = type metadata accessor for CheddarTransaction();
  uint64_t v31 = sub_100026018(v30);
  __chkstk_darwin(v31, v32);
  sub_1000589AC();
  unint64_t v69 = v33;
  uint64_t v66 = type metadata accessor for StatusResponse.Datum.TransactionContainer();
  sub_100025FBC();
  __chkstk_darwin(v34, v35);
  sub_10002059C();
  uint64_t v38 = v37 - v36;
  id v39 = a1;
  *(unsigned char *)uint64_t v38 = sub_10005B424(v39);
  sub_1000D946C(8);
  uint64_t v61 = v3;
  if (v40) {
    sub_1000D5AE4();
  }
  *(void *)(v38 + 8) = sub_10024F9E0();
  *(void *)(v38 + 16) = v41;
  uint64_t v43 = *(void *)(a2 + 48);
  uint64_t v42 = *(void *)(a2 + 56);
  uint64_t v44 = *(void *)(a2 + 136);
  int v45 = *(unsigned __int8 *)(a2 + 144);
  swift_bridgeObjectRetain_n();
  id v46 = v39;
  uint64_t v62 = v44;
  sub_100155BB8(v46, v43, v42, v44, v45, v69);
  sub_1000D5B40(v29);
  uint64_t v47 = sub_10024E030();
  LODWORD(v44) = sub_10001FA0C(v29, 1, v47);
  sub_10003C3FC(v29, (uint64_t *)&unk_10030FD70);
  if (v44 == 1)
  {
    uint64_t v59 = v11;
    uint64_t v60 = v4;
    if (qword_100308DE0 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_10024E1F0();
    sub_10001B0E8(v48, (uint64_t)qword_10034C0E0);
    uint64_t v49 = v46;
    uint64_t v50 = sub_10024E1D0();
    os_log_type_t v51 = sub_10024EE10();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v58 = v43;
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 134217984;
      sub_1000D5AE4();
      sub_10024F100();

      uint64_t v43 = v58;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v50 = v49;
    }
    uint64_t v11 = v59;

    uint64_t v4 = v60;
  }
  uint64_t v53 = *(void *)(a2 + 96);
  id v54 = v46;
  swift_retain();
  sub_100146174((uint64_t)v54, v53, v43, v42, v62, v45, v64);
  (*(void (**)(uint64_t *))(a2 + 104))(v69);
  if (sub_10001FA0C(v65, 1, v63) == 1)
  {
    sub_10005CDE4(a2);

    sub_10005D044(v64, (void (*)(void))type metadata accessor for RenewalInfo);
    sub_10005D044((uint64_t)v69, (void (*)(void))type metadata accessor for CheddarTransaction);
    unint64_t v55 = &qword_10030B7F0;
    uint64_t v56 = v65;
LABEL_14:
    sub_10003C3FC(v56, v55);
    swift_bridgeObjectRelease();
    return sub_1000195B4(a3, 1, 1, v66);
  }
  sub_10005CF84(v65, v61, &qword_10030A380);
  (*(void (**)(unint64_t))(a2 + 120))(v64);

  sub_10005CDE4(a2);
  sub_10005D044(v64, (void (*)(void))type metadata accessor for RenewalInfo);
  sub_10005D044((uint64_t)v69, (void (*)(void))type metadata accessor for CheddarTransaction);
  if (sub_10001FA0C(v67, 1, v11) == 1)
  {
    sub_10003C3FC(v61, &qword_10030A380);
    unint64_t v55 = &qword_10030B7E0;
    uint64_t v56 = v67;
    goto LABEL_14;
  }
  sub_10005CF84(v67, v4, &qword_10030B7E8);
  sub_10005CF84(v61, v38 + *(int *)(v66 + 24), &qword_10030A380);
  sub_10005CF84(v4, v38 + *(int *)(v66 + 28), &qword_10030B7E8);
  sub_10005CFE0(v38, a3);
  sub_1000195B4(a3, 0, 1, v66);
  return sub_10005D044(v38, (void (*)(void))type metadata accessor for StatusResponse.Datum.TransactionContainer);
}

uint64_t sub_10005BC8C(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6C38;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

unint64_t sub_10005BCDC(char a1)
{
  unint64_t result = 0x737574617473;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = sub_100062150();
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005BD5C(char a1)
{
  unint64_t result = 0x737574617473;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = sub_100062150();
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005BDDC(void *a1)
{
  Swift::OpaquePointer v3 = v1;
  uint64_t v5 = sub_100019524(&qword_10030B8F0);
  sub_10001B550();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_1000615D4();
  sub_1000572C8();
  char v18 = *v3;
  char v17 = 0;
  sub_100061620();
  sub_100062204();
  if (!v2)
  {
    char v16 = 1;
    sub_10024F940();
    type metadata accessor for StatusResponse.Datum.TransactionContainer();
    char v15 = 2;
    sub_100019524(&qword_10030A380);
    sub_10006166C((unint64_t *)&qword_10030B908, &qword_10030A380);
    sub_100062204();
    char v14 = 3;
    sub_100019524(&qword_10030B7E8);
    sub_10006166C(&qword_10030B910, &qword_10030B7E8);
    sub_100062204();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t sub_10005BFCC(unsigned __int8 *a1, char *a2)
{
  return sub_1000FAED4(*a1, *a2);
}

Swift::Int sub_10005BFD8()
{
  return sub_1001D345C(*v0);
}

uint64_t sub_10005BFE0(uint64_t a1)
{
  return sub_1000D1DF8(a1, *v1);
}

Swift::Int sub_10005BFE8(uint64_t a1)
{
  return sub_1000D36AC(a1, *v1);
}

uint64_t sub_10005BFF0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005BC8C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10005C020()
{
  char v1 = sub_1000621E4();
  unint64_t result = sub_10005BCDC(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

unint64_t sub_10005C048()
{
  return sub_10005BD5C(*v0);
}

uint64_t sub_10005C050@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10005BCD8();
  *a1 = result;
  return result;
}

void sub_10005C078(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10005C084(uint64_t a1)
{
  unint64_t v2 = sub_1000615D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C0C0(uint64_t a1)
{
  unint64_t v2 = sub_1000615D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C0FC(void *a1)
{
  return sub_10005BDDC(a1);
}

uint64_t sub_10005C114(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100019524(&qword_10030B7D0);
  uint64_t v9 = sub_100026018(v8);
  __chkstk_darwin(v9, v10);
  sub_100026000();
  uint64_t v11 = type metadata accessor for StatusResponse.Datum.TransactionContainer();
  sub_10001B550();
  uint64_t v13 = v12;
  __chkstk_darwin(v14, v15);
  sub_10002059C();
  uint64_t v18 = v17 - v16;
  if (a1)
  {
    id v19 = a1;
    sub_10005CD24(a4);
    sub_10005B670(v19, a4, v4);
    if (sub_10001FA0C(v4, 1, v11) == 1)
    {
      sub_10003C3FC(v4, &qword_10030B7D0);
    }
    else
    {
      sub_10005CF20(v4, v18);
      sub_100019524(&qword_10030B7D8);
      unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_100255FB0;
      sub_10005CF20(v18, v21 + v20);
      a1 = v19;
    }
  }
  sub_10005CDE4(a4);

  return a2;
}

uint64_t sub_10005C2A4(uint64_t a1, void *a2)
{
  v7._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6CB8;
  v7._object = a2;
  Swift::Int v4 = sub_10024F790(v3, v7);
  swift_bridgeObjectRelease();
  if (v4 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

unint64_t sub_10005C2FC(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

uint64_t sub_10005C33C(void *a1)
{
  sub_100019524(&qword_10030B8C8);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  sub_10001C2A8(a1, a1[3]);
  sub_10006149C();
  sub_10024FD40();
  sub_10024F940();
  if (!v1)
  {
    sub_100019524(&qword_10030B8D8);
    sub_1000614E8();
    sub_100062204();
  }
  sub_10003C99C();
  return v5();
}

uint64_t sub_10005C49C(char *a1, char *a2)
{
  return sub_1000FB020(*a1, *a2);
}

Swift::Int sub_10005C4A8()
{
  return sub_1001D3474();
}

uint64_t sub_10005C4B0()
{
  return sub_1000D1EAC();
}

Swift::Int sub_10005C4B8()
{
  return sub_1000D36C4();
}

uint64_t sub_10005C4C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005C2A4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10005C4F0()
{
  char v1 = sub_1000621E4();
  unint64_t result = sub_10005C2FC(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

unint64_t sub_10005C518()
{
  return sub_10005C2FC(*v0);
}

uint64_t sub_10005C520@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10005C2F8();
  *a1 = result;
  return result;
}

uint64_t sub_10005C548(uint64_t a1)
{
  unint64_t v2 = sub_10006149C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C584(uint64_t a1)
{
  unint64_t v2 = sub_10006149C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C5C0(void *a1)
{
  return sub_10005C33C(a1);
}

void *sub_10005C5E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88) != 1) {
    return _swiftEmptyArrayStorage;
  }
  char v1 = *(uint64_t **)(a1 + 72);
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = *(void *)(a1 + 64);
    unint64_t v30 = v3;
    uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 >> 62)
    {
LABEL_43:
      sub_100022B0C();
      sub_10005D09C((uint64_t)&v30);
      uint64_t v5 = sub_10024F6F0();
      sub_10005D0C8((uint64_t)&v30);
    }
    else
    {
      uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v6 = 0;
    unint64_t v29 = v3 & 0xC000000000000001;
    unint64_t v27 = v3 + 32;
    v1 += 5;
    Swift::String v7 = _swiftEmptyArrayStorage;
    uint64_t v28 = v5;
    while (1)
    {
      uint64_t v9 = *(v1 - 1);
      uint64_t v8 = *v1;
      if (v6 >= v5)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000620D8();
          Swift::String v7 = v19;
        }
        unint64_t v3 = v7[2];
        if (v3 >= v7[3] >> 1)
        {
          sub_100035094();
          Swift::String v7 = v20;
        }
        v7[2] = v3 + 1;
        sub_1000621F0();
        goto LABEL_34;
      }
      if (v29)
      {
        swift_bridgeObjectRetain();
        id v11 = (id)sub_10024F380();
      }
      else
      {
        if (v6 < 0)
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if ((unint64_t)v6 >= *(void *)(v4 + 16)) {
          goto LABEL_42;
        }
        uint64_t v10 = *(void **)(v27 + 8 * v6);
        swift_bridgeObjectRetain();
        id v11 = v10;
      }
      uint64_t v12 = v11;
      uint64_t v13 = sub_1000D939C(15);
      if (v14)
      {
        if (v13 == v9 && v14 == v8)
        {
          swift_bridgeObjectRelease();
LABEL_28:
          id v17 = v12;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000620D8();
            Swift::String v7 = v23;
          }
          unint64_t v3 = v7[2];
          if (v3 >= v7[3] >> 1)
          {
            sub_1000621A0();
            Swift::String v7 = v24;
          }
          v7[2] = v3 + 1;
          uint64_t v18 = &v7[3 * v3];
          v18[4] = v9;
          void v18[5] = v8;
          v18[6] = v17;

          ++v6;
          goto LABEL_33;
        }
        char v16 = sub_10024FA60();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_28;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000620D8();
        Swift::String v7 = v21;
      }
      unint64_t v3 = v7[2];
      if (v3 >= v7[3] >> 1)
      {
        sub_1000621A0();
        Swift::String v7 = v22;
      }
      v7[2] = v3 + 1;
      sub_1000621F0();

LABEL_33:
      uint64_t v5 = v28;
LABEL_34:
      v1 += 2;
      if (!--v2)
      {
        sub_100022B28();
        goto LABEL_39;
      }
    }
  }
  Swift::String v7 = _swiftEmptyArrayStorage;
LABEL_39:
  uint64_t v25 = sub_10007C608((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10005C8AC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6D08;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

uint64_t sub_10005C8FC(char a1)
{
  uint64_t result = 1684632420;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_10006211C();
      break;
    case 2:
      uint64_t result = sub_100062138();
      break;
    case 3:
      uint64_t result = sub_1000620FC();
      break;
    case 4:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005C95C(char a1)
{
  uint64_t result = 1684632420;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_10006211C();
      break;
    case 2:
      uint64_t result = sub_100062138();
      break;
    case 3:
      uint64_t result = sub_1000620FC();
      break;
    case 4:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005C9BC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100019524(&qword_10030B8B0);
  sub_10001B550();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  id v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001C2A8(a1, a1[3]);
  sub_1000613EC();
  sub_1000572C8();
  LOBYTE(v14) = 0;
  sub_1000621C4();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_1000621C4();
    sub_10006217C(2);
    sub_10006217C(3);
    sub_100061438((long long *)(v3 + 64), v15);
    sub_100061438(v15, &v14);
    v13[15] = 4;
    sub_100061450();
    sub_10024F980();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t sub_10005CB44()
{
  return sub_1000FB0BC();
}

Swift::Int sub_10005CB50()
{
  return sub_1001D3480(*v0);
}

uint64_t sub_10005CB58()
{
  return sub_1000D1F14();
}

Swift::Int sub_10005CB60(uint64_t a1)
{
  return sub_1000D3730(a1, *v1);
}

uint64_t sub_10005CB68@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005C8AC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10005CB98()
{
  char v1 = sub_1000621E4();
  uint64_t result = sub_10005C8FC(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_10005CBC0()
{
  return sub_10005C95C(*v0);
}

uint64_t sub_10005CBC8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10005C8F8();
  *a1 = result;
  return result;
}

void sub_10005CBF0(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10005CBFC(uint64_t a1)
{
  unint64_t v2 = sub_1000613EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005CC38(uint64_t a1)
{
  unint64_t v2 = sub_1000613EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005CC74(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_10005C9BC(a1);
}

__n128 *sub_10005CCC8(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_10005CD24(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005CDE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005CEA4(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for StatusResponse.Datum.TransactionContainer()
{
  uint64_t result = qword_10030B850;
  if (!qword_10030B850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005CF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StatusResponse.Datum.TransactionContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005CF84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100019524(a3);
  sub_100025FBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_10005CFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StatusResponse.Datum.TransactionContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D044(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_100025FBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10005D09C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005D0C8(uint64_t a1)
{
  return a1;
}

uint64_t destroy for TargetIterator()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s25ASOctaneSupportXPCService24OctaneSimulatedErrorDataVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ProductResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProductResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetIterator(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TargetIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse.Datum()
{
}

uint64_t *sub_10005D2B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v74 = *a2;
    *a1 = *a2;
    uint64_t v75 = v74 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    v213 = a1;
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = *(uint64_t *)((char *)a2 + v6 + 16);
    v7[3] = v10;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 40);
    void v7[4] = *(uint64_t *)((char *)a2 + v6 + 32);
    v7[5] = v11;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v6 + 48);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v6 + 56);
    v7[6] = v13;
    v7[7] = v12;
    v7[8] = *((void *)v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v205 = (int *)sub_100019524(&qword_10030A380);
    v206 = v8;
    uint64_t v14 = v205[9];
    v207 = v7;
    uint64_t v15 = (void *)((char *)v7 + v14);
    char v16 = &v8[v14];
    uint64_t v17 = *(void *)&v8[v14 + 8];
    *uint64_t v15 = *(void *)&v8[v14];
    v15[1] = v17;
    uint64_t v18 = (int *)type metadata accessor for CheddarTransaction();
    uint64_t v19 = v18[5];
    unint64_t v20 = (char *)v15 + v19;
    uint64_t v21 = &v16[v19];
    uint64_t v22 = sub_10024E030();
    unint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    v23(v20, v21, v22);
    uint64_t v24 = v18[6];
    uint64_t v25 = (void *)((char *)v15 + v24);
    uint64_t v26 = &v16[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v18[7];
    unint64_t v29 = (void *)((char *)v15 + v28);
    unint64_t v30 = &v16[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *unint64_t v29 = *(void *)v30;
    v29[1] = v31;
    uint64_t v32 = v18[8];
    uint64_t v33 = (void *)((char *)v15 + v32);
    uint64_t v34 = &v16[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *uint64_t v33 = *(void *)v34;
    v33[1] = v35;
    uint64_t v36 = v18[9];
    uint64_t v37 = (char *)v15 + v36;
    uint64_t v38 = &v16[v36];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v37, v38, v22);
    uint64_t v39 = v18[10];
    char v40 = (void *)((char *)v15 + v39);
    uint64_t v41 = &v16[v39];
    uint64_t v42 = *((void *)v41 + 1);
    void *v40 = *(void *)v41;
    v40[1] = v42;
    *((unsigned char *)v15 + v18[11]) = v16[v18[11]];
    uint64_t v43 = v18[12];
    uint64_t v44 = (void *)((char *)v15 + v43);
    int v45 = &v16[v43];
    uint64_t v46 = *((void *)v45 + 1);
    *uint64_t v44 = *(void *)v45;
    v44[1] = v46;
    uint64_t v47 = v18[13];
    uint64_t v48 = (char *)v15 + v47;
    uint64_t v49 = &v16[v47];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v212 = v23;
    v23(v48, v49, v22);
    *(void *)((char *)v15 + v18[14]) = *(void *)&v16[v18[14]];
    uint64_t v50 = v18[15];
    os_log_type_t v51 = (void *)((char *)v15 + v50);
    uint64_t v52 = &v16[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *os_log_type_t v51 = *(void *)v52;
    v51[1] = v53;
    *(void *)((char *)v15 + v18[16]) = *(void *)&v16[v18[16]];
    *((unsigned char *)v15 + v18[17]) = v16[v18[17]];
    uint64_t v54 = v18[18];
    unint64_t v55 = (void *)((char *)v15 + v54);
    uint64_t v56 = &v16[v54];
    uint64_t v57 = *((void *)v56 + 1);
    void *v55 = *(void *)v56;
    v55[1] = v57;
    uint64_t v58 = v18[19];
    uint64_t v59 = (void *)((char *)v15 + v58);
    uint64_t v60 = &v16[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *uint64_t v59 = *(void *)v60;
    v59[1] = v61;
    uint64_t v62 = v18[20];
    uint64_t v63 = (void *)((char *)v15 + v62);
    unint64_t v64 = &v16[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *uint64_t v63 = *(void *)v64;
    v63[1] = v65;
    uint64_t v66 = v18[21];
    uint64_t v67 = (void *)((char *)v15 + v66);
    uint64_t v68 = &v16[v66];
    uint64_t v69 = *((void *)v68 + 1);
    void *v67 = *(void *)v68;
    v67[1] = v69;
    uint64_t v70 = v18[22];
    uint64_t v71 = (char *)v15 + v70;
    uint64_t v72 = &v16[v70];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001FA0C((uint64_t)v72, 1, v22))
    {
      uint64_t v73 = sub_100019524((uint64_t *)&unk_10030FD70);
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
    }
    else
    {
      v212(v71, v72, v22);
      sub_1000195B4((uint64_t)v71, 0, 1, v22);
    }
    uint64_t v76 = v18[23];
    Class v77 = (void *)((char *)v15 + v76);
    id v78 = &v16[v76];
    uint64_t v79 = *((void *)v78 + 1);
    *Class v77 = *(void *)v78;
    v77[1] = v79;
    uint64_t v80 = v18[24];
    unint64_t v81 = (void *)((char *)v15 + v80);
    os_log_type_t v82 = &v16[v80];
    uint64_t v83 = *((void *)v82 + 1);
    *unint64_t v81 = *(void *)v82;
    v81[1] = v83;
    uint64_t v84 = v18[25];
    unint64_t v85 = (void *)((char *)v15 + v84);
    unint64_t v86 = &v16[v84];
    uint64_t v87 = *((void *)v86 + 1);
    *unint64_t v85 = *(void *)v86;
    v85[1] = v87;
    uint64_t v88 = v18[26];
    uint64_t v89 = (char *)v15 + v88;
    unint64_t v90 = &v16[v88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v199 = v22;
    if (sub_10001FA0C((uint64_t)v90, 1, v22))
    {
      uint64_t v91 = sub_100019524((uint64_t *)&unk_10030FD70);
      memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      v212(v89, v90, v22);
      sub_1000195B4((uint64_t)v89, 0, 1, v22);
    }
    *((unsigned char *)v15 + v18[27]) = v16[v18[27]];
    uint64_t v92 = v18[28];
    uint64_t v93 = (void *)((char *)v15 + v92);
    uint64_t v94 = &v16[v92];
    uint64_t v203 = *((void *)v94 + 1);
    *uint64_t v93 = *(void *)v94;
    v93[1] = v203;
    *((unsigned char *)v15 + v18[29]) = v16[v18[29]];
    *((unsigned char *)v15 + v18[30]) = v16[v18[30]];
    *((unsigned char *)v15 + v18[31]) = v16[v18[31]];
    uint64_t v95 = v18[32];
    unint64_t v96 = (void *)((char *)v15 + v95);
    uint64_t v97 = &v16[v95];
    uint64_t v201 = *((void *)v97 + 1);
    *unint64_t v96 = *(void *)v97;
    v96[1] = v201;
    uint64_t v98 = v18[33];
    uint64_t v99 = (void *)((char *)v15 + v98);
    uint64_t v100 = &v16[v98];
    uint64_t v200 = *((void *)v100 + 1);
    *uint64_t v99 = *(void *)v100;
    v99[1] = v200;
    uint64_t v101 = v18[34];
    uint64_t v102 = (void *)((char *)v15 + v101);
    uint64_t v103 = &v16[v101];
    uint64_t v198 = *((void *)v103 + 1);
    void *v102 = *(void *)v103;
    v102[1] = v198;
    uint64_t v104 = v18[35];
    uint64_t v105 = (void *)((char *)v15 + v104);
    uint64_t v106 = &v16[v104];
    uint64_t v197 = *((void *)v106 + 1);
    *uint64_t v105 = *(void *)v106;
    v105[1] = v197;
    uint64_t v107 = v18[36];
    uint64_t v108 = (void *)((char *)v15 + v107);
    Swift::String v109 = &v16[v107];
    uint64_t v196 = *((void *)v109 + 1);
    *uint64_t v108 = *(void *)v109;
    v108[1] = v196;
    uint64_t v110 = v18[37];
    Swift::String v111 = (void *)((char *)v15 + v110);
    uint64_t v112 = &v16[v110];
    uint64_t v195 = *((void *)v112 + 1);
    *Swift::String v111 = *(void *)v112;
    v111[1] = v195;
    uint64_t v113 = v18[38];
    unint64_t v114 = (void *)((char *)v15 + v113);
    unint64_t v115 = &v16[v113];
    uint64_t v116 = *((void *)v115 + 1);
    *unint64_t v114 = *(void *)v115;
    v114[1] = v116;
    uint64_t v117 = v18[39];
    os_log_type_t v118 = (void *)((char *)v15 + v117);
    int v119 = &v16[v117];
    uint64_t v120 = *((void *)v119 + 1);
    *os_log_type_t v118 = *(void *)v119;
    v118[1] = v120;
    uint64_t v121 = v18[40];
    uint64_t v122 = (void *)((char *)v15 + v121);
    uint64_t v123 = &v16[v121];
    uint64_t v124 = *((void *)v123 + 1);
    *uint64_t v122 = *(void *)v123;
    v122[1] = v124;
    uint64_t v125 = v18[41];
    os_log_t v126 = (char *)v15 + v125;
    unsigned int v127 = &v16[v125];
    *(void *)os_log_t v126 = *(void *)v127;
    v126[8] = v127[8];
    uint64_t v128 = v18[42];
    uint64_t v129 = (void *)((char *)v15 + v128);
    uint64_t v130 = &v16[v128];
    uint64_t v131 = *((void *)v130 + 1);
    *uint64_t v129 = *(void *)v130;
    v129[1] = v131;
    uint64_t v132 = v205[10];
    v193 = &v206[v132];
    uint64_t v194 = (char *)v207 + v132;
    uint64_t v133 = sub_10024E450();
    uint64_t v134 = *(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v202 = v134;
    uint64_t v204 = v133;
    v134(v194, v193, v133);
    uint64_t v135 = v205[11];
    uint64_t v136 = (char *)v207 + v135;
    unint64_t v137 = &v206[v135];
    *(void *)uint64_t v136 = *(void *)v137;
    v136[8] = v137[8];
    *((unsigned char *)v207 + v205[12]) = v206[v205[12]];
    uint64_t v138 = *(int *)(a3 + 28);
    uint64_t v139 = (uint64_t *)((char *)v213 + v138);
    uint64_t v140 = (char *)a2 + v138;
    uint64_t v141 = *(uint64_t *)((char *)a2 + v138 + 8);
    *uint64_t v139 = *(uint64_t *)((char *)a2 + v138);
    v139[1] = v141;
    uint64_t v142 = *(uint64_t *)((char *)a2 + v138 + 24);
    v139[2] = *(uint64_t *)((char *)a2 + v138 + 16);
    v139[3] = v142;
    uint64_t v143 = *(uint64_t *)((char *)a2 + v138 + 40);
    v139[4] = *(uint64_t *)((char *)a2 + v138 + 32);
    v139[5] = v143;
    uint64_t v145 = *(uint64_t *)((char *)a2 + v138 + 48);
    uint64_t v144 = *(uint64_t *)((char *)a2 + v138 + 56);
    v139[6] = v145;
    v139[7] = v144;
    v139[8] = *((void *)v140 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v209 = (int *)sub_100019524(&qword_10030B7E8);
    v211 = (char *)v139;
    uint64_t v146 = v209[9];
    uint64_t v147 = (char *)v139 + v146;
    int v148 = &v140[v146];
    uint64_t v149 = *(void *)&v140[v146 + 8];
    *(void *)uint64_t v147 = *(void *)&v140[v146];
    *((void *)v147 + 1) = v149;
    v147[16] = v140[v146 + 16];
    uint64_t v150 = *(void *)&v140[v146 + 32];
    *((void *)v147 + 3) = *(void *)&v140[v146 + 24];
    *((void *)v147 + 4) = v150;
    uint64_t v151 = *(void *)&v140[v146 + 48];
    *((void *)v147 + 5) = *(void *)&v140[v146 + 40];
    *((void *)v147 + 6) = v151;
    uint64_t v152 = *(void *)&v140[v146 + 64];
    *((void *)v147 + 7) = *(void *)&v140[v146 + 56];
    *((void *)v147 + 8) = v152;
    v147[72] = v140[v146 + 72];
    *(_WORD *)(v147 + 73) = *(_WORD *)&v140[v146 + 73];
    uint64_t v153 = (int *)type metadata accessor for RenewalInfo();
    uint64_t v154 = v153[12];
    uint64_t v155 = &v147[v154];
    uint64_t v156 = &v148[v154];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001FA0C((uint64_t)v156, 1, v199))
    {
      uint64_t v157 = sub_100019524((uint64_t *)&unk_10030FD70);
      memcpy(v155, v156, *(void *)(*(void *)(v157 - 8) + 64));
      uint64_t v158 = v212;
    }
    else
    {
      uint64_t v158 = v212;
      v212(v155, v156, v199);
      sub_1000195B4((uint64_t)v155, 0, 1, v199);
    }
    uint64_t v159 = v153[13];
    int v160 = &v147[v159];
    uint64_t v161 = &v148[v159];
    uint64_t v162 = *((void *)v161 + 1);
    *(void *)int v160 = *(void *)v161;
    *((void *)v160 + 1) = v162;
    uint64_t v163 = v153[14];
    uint64_t v164 = &v147[v163];
    unint64_t v165 = &v148[v163];
    uint64_t v166 = *((void *)v165 + 1);
    *(void *)uint64_t v164 = *(void *)v165;
    *((void *)v164 + 1) = v166;
    uint64_t v167 = v153[15];
    int v168 = &v147[v167];
    unint64_t v169 = &v148[v167];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v158(v168, v169, v199);
    v147[v153[16]] = v148[v153[16]];
    uint64_t v170 = v153[17];
    uint64_t v171 = &v147[v170];
    unint64_t v172 = &v148[v170];
    uint64_t v173 = *((void *)v172 + 1);
    *(void *)uint64_t v171 = *(void *)v172;
    *((void *)v171 + 1) = v173;
    v147[v153[18]] = v148[v153[18]];
    uint64_t v174 = v153[19];
    uint64_t v175 = &v147[v174];
    uint64_t v176 = &v148[v174];
    *(void *)uint64_t v175 = *(void *)v176;
    v175[8] = v176[8];
    uint64_t v177 = v153[20];
    os_log_t v178 = &v147[v177];
    unsigned int v179 = &v148[v177];
    uint64_t v180 = *((void *)v179 + 1);
    *(void *)os_log_t v178 = *(void *)v179;
    *((void *)v178 + 1) = v180;
    *(void *)&v147[v153[21]] = *(void *)&v148[v153[21]];
    uint64_t v181 = v153[22];
    int v182 = &v147[v181];
    uint64_t v183 = &v148[v181];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001FA0C((uint64_t)v183, 1, v199))
    {
      uint64_t v184 = sub_100019524((uint64_t *)&unk_10030FD70);
      memcpy(v182, v183, *(void *)(*(void *)(v184 - 8) + 64));
    }
    else
    {
      v158(v182, v183, v199);
      sub_1000195B4((uint64_t)v182, 0, 1, v199);
    }
    uint64_t v185 = v153[23];
    unint64_t v186 = &v147[v185];
    uint64_t v187 = &v148[v185];
    if (sub_10001FA0C((uint64_t)&v148[v185], 1, v199))
    {
      uint64_t v188 = sub_100019524((uint64_t *)&unk_10030FD70);
      memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
    }
    else
    {
      v158(v186, v187, v199);
      sub_1000195B4((uint64_t)v186, 0, 1, v199);
    }
    v202(&v211[v209[10]], &v140[v209[10]], v204);
    uint64_t v189 = v209[11];
    unint64_t v190 = &v211[v189];
    unsigned int v191 = &v140[v189];
    *(void *)unint64_t v190 = *(void *)v191;
    v190[8] = v191[8];
    v211[v209[12]] = v140[v209[12]];
    return v213;
  }
  return (uint64_t *)v75;
}

uint64_t sub_10005DCFC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_100019524(&qword_10030A380);
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for CheddarTransaction();
  uint64_t v8 = v6 + v7[5];
  uint64_t v9 = sub_10024E030();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v6 + v7[9], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v6 + v7[13], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + v7[22];
  if (!sub_10001FA0C(v11, 1, v9)) {
    v10(v11, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v6 + v7[26];
  if (!sub_10001FA0C(v12, 1, v9)) {
    v10(v12, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v4 + *(int *)(v5 + 40);
  uint64_t v14 = sub_10024E450();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v24(v13, v14);
  uint64_t v15 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_100019524(&qword_10030B7E8);
  uint64_t v17 = v15 + *(int *)(v16 + 36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (int *)type metadata accessor for RenewalInfo();
  uint64_t v19 = v17 + v18[12];
  if (!sub_10001FA0C(v19, 1, v9)) {
    v10(v19, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v17 + v18[15], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v17 + v18[22];
  if (!sub_10001FA0C(v20, 1, v9)) {
    v10(v20, v9);
  }
  uint64_t v21 = v17 + v18[23];
  if (!sub_10001FA0C(v21, 1, v9)) {
    v10(v21, v9);
  }
  uint64_t v22 = v15 + *(int *)(v16 + 40);
  return ((uint64_t (*)(uint64_t, uint64_t))v24)(v22, v14);
}

uint64_t sub_10005E1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v210 = a1;
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void *)(a2 + v5 + 8);
  void *v6 = *(void *)(a2 + v5);
  v6[1] = v8;
  uint64_t v9 = *(void *)(a2 + v5 + 24);
  _OWORD v6[2] = *(void *)(a2 + v5 + 16);
  v6[3] = v9;
  uint64_t v10 = *(void *)(a2 + v5 + 40);
  v6[4] = *(void *)(a2 + v5 + 32);
  void v6[5] = v10;
  uint64_t v12 = *(void *)(a2 + v5 + 48);
  uint64_t v11 = *(void *)(a2 + v5 + 56);
  v6[6] = v12;
  v6[7] = v11;
  v6[8] = *(void *)(v7 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v202 = (int *)sub_100019524(&qword_10030A380);
  uint64_t v203 = v7;
  uint64_t v13 = v202[9];
  uint64_t v204 = v6;
  uint64_t v14 = (void *)((char *)v6 + v13);
  uint64_t v15 = v7 + v13;
  uint64_t v16 = *(void *)(v7 + v13 + 8);
  void *v14 = *(void *)(v7 + v13);
  v14[1] = v16;
  uint64_t v17 = (int *)type metadata accessor for CheddarTransaction();
  uint64_t v18 = v17[5];
  uint64_t v19 = (char *)v14 + v18;
  uint64_t v20 = v15 + v18;
  uint64_t v21 = sub_10024E030();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  uint64_t v23 = v17[6];
  uint64_t v24 = (void *)((char *)v14 + v23);
  uint64_t v25 = (void *)(v15 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v17[7];
  uint64_t v28 = (void *)((char *)v14 + v27);
  unint64_t v29 = (void *)(v15 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = v17[8];
  uint64_t v32 = (void *)((char *)v14 + v31);
  uint64_t v33 = (void *)(v15 + v31);
  uint64_t v34 = v33[1];
  void *v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = v17[9];
  uint64_t v36 = (char *)v14 + v35;
  uint64_t v37 = v15 + v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v36, v37, v21);
  uint64_t v38 = v17[10];
  uint64_t v39 = (void *)((char *)v14 + v38);
  char v40 = (void *)(v15 + v38);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  *((unsigned char *)v14 + v17[11]) = *(unsigned char *)(v15 + v17[11]);
  uint64_t v42 = v17[12];
  uint64_t v43 = (void *)((char *)v14 + v42);
  uint64_t v44 = (void *)(v15 + v42);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = v17[13];
  uint64_t v47 = (char *)v14 + v46;
  uint64_t v48 = v15 + v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v209 = (void (*)(char *, const void *, uint64_t))v22;
  v22(v47, v48, v21);
  *(void *)((char *)v14 + v17[14]) = *(void *)(v15 + v17[14]);
  uint64_t v49 = v17[15];
  uint64_t v50 = (void *)((char *)v14 + v49);
  os_log_type_t v51 = (void *)(v15 + v49);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  *(void *)((char *)v14 + v17[16]) = *(void *)(v15 + v17[16]);
  *((unsigned char *)v14 + v17[17]) = *(unsigned char *)(v15 + v17[17]);
  uint64_t v53 = v17[18];
  uint64_t v54 = (void *)((char *)v14 + v53);
  unint64_t v55 = (void *)(v15 + v53);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = v17[19];
  uint64_t v58 = (void *)((char *)v14 + v57);
  uint64_t v59 = (void *)(v15 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v17[20];
  uint64_t v62 = (void *)((char *)v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  uint64_t v64 = v63[1];
  *uint64_t v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = v17[21];
  uint64_t v66 = (void *)((char *)v14 + v65);
  uint64_t v67 = (void *)(v15 + v65);
  uint64_t v68 = v67[1];
  *uint64_t v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = v17[22];
  uint64_t v70 = (char *)v14 + v69;
  uint64_t v71 = (const void *)(v15 + v69);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001FA0C((uint64_t)v71, 1, v21))
  {
    uint64_t v72 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    v209(v70, v71, v21);
    sub_1000195B4((uint64_t)v70, 0, 1, v21);
  }
  uint64_t v73 = v17[23];
  uint64_t v74 = (void *)((char *)v14 + v73);
  uint64_t v75 = (void *)(v15 + v73);
  uint64_t v76 = v75[1];
  *uint64_t v74 = *v75;
  v74[1] = v76;
  uint64_t v77 = v17[24];
  id v78 = (void *)((char *)v14 + v77);
  uint64_t v79 = (void *)(v15 + v77);
  uint64_t v80 = v79[1];
  void *v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = v17[25];
  os_log_type_t v82 = (void *)((char *)v14 + v81);
  uint64_t v83 = (void *)(v15 + v81);
  uint64_t v84 = v83[1];
  *os_log_type_t v82 = *v83;
  v82[1] = v84;
  uint64_t v85 = v17[26];
  unint64_t v86 = (char *)v14 + v85;
  uint64_t v87 = (const void *)(v15 + v85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v196 = v21;
  if (sub_10001FA0C((uint64_t)v87, 1, v21))
  {
    uint64_t v88 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
  }
  else
  {
    v209(v86, v87, v21);
    sub_1000195B4((uint64_t)v86, 0, 1, v21);
  }
  *((unsigned char *)v14 + v17[27]) = *(unsigned char *)(v15 + v17[27]);
  uint64_t v89 = v17[28];
  unint64_t v90 = (void *)((char *)v14 + v89);
  uint64_t v91 = (void *)(v15 + v89);
  uint64_t v200 = v91[1];
  *unint64_t v90 = *v91;
  v90[1] = v200;
  *((unsigned char *)v14 + v17[29]) = *(unsigned char *)(v15 + v17[29]);
  *((unsigned char *)v14 + v17[30]) = *(unsigned char *)(v15 + v17[30]);
  *((unsigned char *)v14 + v17[31]) = *(unsigned char *)(v15 + v17[31]);
  uint64_t v92 = v17[32];
  uint64_t v93 = (void *)((char *)v14 + v92);
  uint64_t v94 = (void *)(v15 + v92);
  uint64_t v198 = v94[1];
  *uint64_t v93 = *v94;
  v93[1] = v198;
  uint64_t v95 = v17[33];
  unint64_t v96 = (void *)((char *)v14 + v95);
  uint64_t v97 = (void *)(v15 + v95);
  uint64_t v197 = v97[1];
  *unint64_t v96 = *v97;
  v96[1] = v197;
  uint64_t v98 = v17[34];
  uint64_t v99 = (void *)((char *)v14 + v98);
  uint64_t v100 = (void *)(v15 + v98);
  uint64_t v195 = v100[1];
  *uint64_t v99 = *v100;
  v99[1] = v195;
  uint64_t v101 = v17[35];
  uint64_t v102 = (void *)((char *)v14 + v101);
  uint64_t v103 = (void *)(v15 + v101);
  uint64_t v194 = v103[1];
  void *v102 = *v103;
  v102[1] = v194;
  uint64_t v104 = v17[36];
  uint64_t v105 = (void *)((char *)v14 + v104);
  uint64_t v106 = (void *)(v15 + v104);
  uint64_t v193 = v106[1];
  *uint64_t v105 = *v106;
  v105[1] = v193;
  uint64_t v107 = v17[37];
  uint64_t v108 = (void *)((char *)v14 + v107);
  Swift::String v109 = (void *)(v15 + v107);
  uint64_t v192 = v109[1];
  *uint64_t v108 = *v109;
  v108[1] = v192;
  uint64_t v110 = v17[38];
  Swift::String v111 = (void *)((char *)v14 + v110);
  uint64_t v112 = (void *)(v15 + v110);
  uint64_t v113 = v112[1];
  *Swift::String v111 = *v112;
  v111[1] = v113;
  uint64_t v114 = v17[39];
  unint64_t v115 = (void *)((char *)v14 + v114);
  uint64_t v116 = (void *)(v15 + v114);
  uint64_t v117 = v116[1];
  *unint64_t v115 = *v116;
  v115[1] = v117;
  uint64_t v118 = v17[40];
  int v119 = (void *)((char *)v14 + v118);
  uint64_t v120 = (void *)(v15 + v118);
  uint64_t v121 = v120[1];
  *int v119 = *v120;
  v119[1] = v121;
  uint64_t v122 = v17[41];
  uint64_t v123 = (char *)v14 + v122;
  uint64_t v124 = v15 + v122;
  *(void *)uint64_t v123 = *(void *)v124;
  v123[8] = *(unsigned char *)(v124 + 8);
  uint64_t v125 = v17[42];
  os_log_t v126 = (void *)((char *)v14 + v125);
  unsigned int v127 = (void *)(v15 + v125);
  uint64_t v128 = v127[1];
  *os_log_t v126 = *v127;
  v126[1] = v128;
  uint64_t v129 = v202[10];
  uint64_t v190 = v203 + v129;
  unsigned int v191 = (char *)v204 + v129;
  uint64_t v130 = sub_10024E450();
  uint64_t v131 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v199 = v131;
  uint64_t v201 = v130;
  v131(v191, v190, v130);
  uint64_t v132 = v202[11];
  uint64_t v133 = (char *)v204 + v132;
  uint64_t v134 = v203 + v132;
  *(void *)uint64_t v133 = *(void *)v134;
  v133[8] = *(unsigned char *)(v134 + 8);
  *((unsigned char *)v204 + v202[12]) = *(unsigned char *)(v203 + v202[12]);
  uint64_t v135 = *(int *)(a3 + 28);
  uint64_t v136 = (char *)(v210 + v135);
  uint64_t v137 = a2 + v135;
  uint64_t v138 = *(void *)(a2 + v135 + 8);
  *(void *)uint64_t v136 = *(void *)(a2 + v135);
  *((void *)v136 + 1) = v138;
  uint64_t v139 = *(void *)(a2 + v135 + 24);
  *((void *)v136 + 2) = *(void *)(a2 + v135 + 16);
  *((void *)v136 + 3) = v139;
  uint64_t v140 = *(void *)(a2 + v135 + 40);
  *((void *)v136 + 4) = *(void *)(a2 + v135 + 32);
  *((void *)v136 + 5) = v140;
  uint64_t v142 = *(void *)(a2 + v135 + 48);
  uint64_t v141 = *(void *)(a2 + v135 + 56);
  *((void *)v136 + 6) = v142;
  *((void *)v136 + 7) = v141;
  *((void *)v136 + 8) = *(void *)(v137 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v206 = (int *)sub_100019524(&qword_10030B7E8);
  v208 = v136;
  uint64_t v143 = v206[9];
  uint64_t v144 = &v136[v143];
  uint64_t v145 = v137 + v143;
  uint64_t v146 = *(void *)(v137 + v143 + 8);
  *(void *)uint64_t v144 = *(void *)(v137 + v143);
  *((void *)v144 + 1) = v146;
  v144[16] = *(unsigned char *)(v137 + v143 + 16);
  uint64_t v147 = *(void *)(v137 + v143 + 32);
  *((void *)v144 + 3) = *(void *)(v137 + v143 + 24);
  *((void *)v144 + 4) = v147;
  uint64_t v148 = *(void *)(v137 + v143 + 48);
  *((void *)v144 + 5) = *(void *)(v137 + v143 + 40);
  *((void *)v144 + 6) = v148;
  uint64_t v149 = *(void *)(v137 + v143 + 64);
  *((void *)v144 + 7) = *(void *)(v137 + v143 + 56);
  *((void *)v144 + 8) = v149;
  v144[72] = *(unsigned char *)(v137 + v143 + 72);
  *(_WORD *)(v144 + 73) = *(_WORD *)(v137 + v143 + 73);
  uint64_t v150 = (int *)type metadata accessor for RenewalInfo();
  uint64_t v151 = v150[12];
  uint64_t v152 = &v144[v151];
  uint64_t v153 = (const void *)(v145 + v151);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001FA0C((uint64_t)v153, 1, v196))
  {
    uint64_t v154 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
    uint64_t v155 = (void (*)(char *, uint64_t, uint64_t))v209;
  }
  else
  {
    uint64_t v155 = (void (*)(char *, uint64_t, uint64_t))v209;
    v209(v152, v153, v196);
    sub_1000195B4((uint64_t)v152, 0, 1, v196);
  }
  uint64_t v156 = v150[13];
  uint64_t v157 = &v144[v156];
  uint64_t v158 = (void *)(v145 + v156);
  uint64_t v159 = v158[1];
  *(void *)uint64_t v157 = *v158;
  *((void *)v157 + 1) = v159;
  uint64_t v160 = v150[14];
  uint64_t v161 = &v144[v160];
  uint64_t v162 = (void *)(v145 + v160);
  uint64_t v163 = v162[1];
  *(void *)uint64_t v161 = *v162;
  *((void *)v161 + 1) = v163;
  uint64_t v164 = v150[15];
  unint64_t v165 = &v144[v164];
  uint64_t v166 = v145 + v164;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v155(v165, v166, v196);
  v144[v150[16]] = *(unsigned char *)(v145 + v150[16]);
  uint64_t v167 = v150[17];
  int v168 = &v144[v167];
  unint64_t v169 = (void *)(v145 + v167);
  uint64_t v170 = v169[1];
  *(void *)int v168 = *v169;
  *((void *)v168 + 1) = v170;
  v144[v150[18]] = *(unsigned char *)(v145 + v150[18]);
  uint64_t v171 = v150[19];
  unint64_t v172 = &v144[v171];
  uint64_t v173 = v145 + v171;
  *(void *)unint64_t v172 = *(void *)v173;
  v172[8] = *(unsigned char *)(v173 + 8);
  uint64_t v174 = v150[20];
  uint64_t v175 = &v144[v174];
  uint64_t v176 = (void *)(v145 + v174);
  uint64_t v177 = v176[1];
  *(void *)uint64_t v175 = *v176;
  *((void *)v175 + 1) = v177;
  *(void *)&v144[v150[21]] = *(void *)(v145 + v150[21]);
  uint64_t v178 = v150[22];
  unsigned int v179 = &v144[v178];
  uint64_t v180 = (const void *)(v145 + v178);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001FA0C((uint64_t)v180, 1, v196))
  {
    uint64_t v181 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v179, v180, *(void *)(*(void *)(v181 - 8) + 64));
  }
  else
  {
    v155(v179, (uint64_t)v180, v196);
    sub_1000195B4((uint64_t)v179, 0, 1, v196);
  }
  uint64_t v182 = v150[23];
  uint64_t v183 = &v144[v182];
  uint64_t v184 = (const void *)(v145 + v182);
  if (sub_10001FA0C(v145 + v182, 1, v196))
  {
    uint64_t v185 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64));
  }
  else
  {
    v155(v183, (uint64_t)v184, v196);
    sub_1000195B4((uint64_t)v183, 0, 1, v196);
  }
  v199(&v208[v206[10]], v137 + v206[10], v201);
  uint64_t v186 = v206[11];
  uint64_t v187 = &v208[v186];
  uint64_t v188 = v137 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  v187[8] = *(unsigned char *)(v188 + 8);
  v208[v206[12]] = *(unsigned char *)(v137 + v206[12]);
  return v210;
}

uint64_t sub_10005EBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v163 = a3;
  uint64_t v164 = a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v166 = a1;
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v7 = *(void *)(a2 + v6);
  v7[1] = *(void *)(a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v7[4] = v8[4];
  v7[5] = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[6] = v8[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[7] = v8[7];
  v7[8] = v8[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v162 = (int *)sub_100019524(&qword_10030A380);
  uint64_t v9 = v162[9];
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = (char *)v8 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)v8 + v9);
  *((void *)v10 + 1) = *(void *)((char *)v8 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for CheddarTransaction();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v10[v13];
  uint64_t v15 = &v11[v13];
  uint64_t v16 = sub_10024E030();
  uint64_t v167 = *(void *)(v16 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v167 + 24);
  v17(v14, v15, v16);
  uint64_t v18 = v12[6];
  uint64_t v19 = &v10[v18];
  uint64_t v20 = &v11[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v12[7];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = v12[8];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17(&v10[v12[9]], &v11[v12[9]], v16);
  uint64_t v27 = v12[10];
  uint64_t v28 = &v10[v27];
  unint64_t v29 = &v11[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v12[11]] = v11[v12[11]];
  uint64_t v30 = v12[12];
  uint64_t v31 = &v10[v30];
  uint64_t v32 = &v11[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v165 = v17;
  v17(&v10[v12[13]], &v11[v12[13]], v16);
  *(void *)&v10[v12[14]] = *(void *)&v11[v12[14]];
  uint64_t v33 = v12[15];
  uint64_t v34 = &v10[v33];
  uint64_t v35 = &v11[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v10[v12[16]] = *(void *)&v11[v12[16]];
  v10[v12[17]] = v11[v12[17]];
  uint64_t v36 = v12[18];
  uint64_t v37 = &v10[v36];
  uint64_t v38 = &v11[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = v12[19];
  char v40 = &v10[v39];
  uint64_t v41 = &v11[v39];
  *(void *)char v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v12[20];
  uint64_t v43 = &v10[v42];
  uint64_t v44 = &v11[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = v12[21];
  uint64_t v46 = &v10[v45];
  uint64_t v47 = &v11[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v12[22];
  uint64_t v49 = &v10[v48];
  uint64_t v50 = &v11[v48];
  int v51 = sub_10001FA0C((uint64_t)&v10[v48], 1, v16);
  int v52 = sub_10001FA0C((uint64_t)v50, 1, v16);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v49, v50, v16);
      sub_1000195B4((uint64_t)v49, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v49, v16);
LABEL_6:
    uint64_t v53 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_7;
  }
  v17(v49, v50, v16);
LABEL_7:
  uint64_t v54 = v12[23];
  unint64_t v55 = &v10[v54];
  uint64_t v56 = &v11[v54];
  *(void *)unint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v12[24];
  uint64_t v58 = &v10[v57];
  uint64_t v59 = &v11[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v12[25];
  uint64_t v61 = &v10[v60];
  uint64_t v62 = &v11[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v12[26];
  uint64_t v64 = &v10[v63];
  uint64_t v65 = &v11[v63];
  int v66 = sub_10001FA0C((uint64_t)&v10[v63], 1, v16);
  int v67 = sub_10001FA0C((uint64_t)v65, 1, v16);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v64, v65, v16);
      sub_1000195B4((uint64_t)v64, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v64, v16);
LABEL_12:
    uint64_t v68 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_13;
  }
  v17(v64, v65, v16);
LABEL_13:
  v10[v12[27]] = v11[v12[27]];
  uint64_t v69 = v12[28];
  uint64_t v70 = &v10[v69];
  uint64_t v71 = &v11[v69];
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = *((void *)v71 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v12[29]] = v11[v12[29]];
  v10[v12[30]] = v11[v12[30]];
  v10[v12[31]] = v11[v12[31]];
  uint64_t v72 = v12[32];
  uint64_t v73 = &v10[v72];
  uint64_t v74 = &v11[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = *((void *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = v12[33];
  uint64_t v76 = &v10[v75];
  uint64_t v77 = &v11[v75];
  *(void *)uint64_t v76 = *(void *)v77;
  *((void *)v76 + 1) = *((void *)v77 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v78 = v12[34];
  uint64_t v79 = &v10[v78];
  uint64_t v80 = &v11[v78];
  *(void *)uint64_t v79 = *(void *)v80;
  *((void *)v79 + 1) = *((void *)v80 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = v12[35];
  os_log_type_t v82 = &v10[v81];
  uint64_t v83 = &v11[v81];
  *(void *)os_log_type_t v82 = *(void *)v83;
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v84 = v12[36];
  uint64_t v85 = &v10[v84];
  unint64_t v86 = &v11[v84];
  *(void *)uint64_t v85 = *(void *)v86;
  *((void *)v85 + 1) = *((void *)v86 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v12[37];
  uint64_t v88 = &v10[v87];
  uint64_t v89 = &v11[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *((void *)v88 + 1) = *((void *)v89 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = v12[38];
  uint64_t v91 = &v10[v90];
  uint64_t v92 = &v11[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  *((void *)v91 + 1) = *((void *)v92 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = v12[39];
  uint64_t v94 = &v10[v93];
  uint64_t v95 = &v11[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v12[40];
  uint64_t v97 = &v10[v96];
  uint64_t v98 = &v11[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = v12[41];
  uint64_t v100 = &v10[v99];
  uint64_t v101 = &v11[v99];
  uint64_t v102 = *(void *)v101;
  v100[8] = v101[8];
  *(void *)uint64_t v100 = v102;
  uint64_t v103 = v12[42];
  uint64_t v104 = &v10[v103];
  uint64_t v105 = &v11[v103];
  *(void *)uint64_t v104 = *(void *)v105;
  *((void *)v104 + 1) = *((void *)v105 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v106 = v162[10];
  uint64_t v107 = (char *)v7 + v106;
  uint64_t v108 = (char *)v8 + v106;
  uint64_t v109 = sub_10024E450();
  uint64_t v160 = *(void (**)(char *, char *))(*(void *)(v109 - 8) + 24);
  uint64_t v161 = v109;
  v160(v107, v108);
  uint64_t v110 = v162[11];
  Swift::String v111 = (char *)v7 + v110;
  uint64_t v112 = (char *)v8 + v110;
  uint64_t v113 = *(void *)v112;
  v111[8] = v112[8];
  *(void *)Swift::String v111 = v113;
  *((unsigned char *)v7 + v162[12]) = *((unsigned char *)v8 + v162[12]);
  uint64_t v114 = *(int *)(v163 + 28);
  unint64_t v115 = (void *)(v166 + v114);
  uint64_t v116 = (void *)(v164 + v114);
  *unint64_t v115 = *(void *)(v164 + v114);
  v115[1] = *(void *)(v164 + v114 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115[2] = v116[2];
  v115[3] = v116[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115[4] = v116[4];
  v115[5] = v116[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115[6] = v116[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115[7] = v116[7];
  v115[8] = v116[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v117 = (int *)sub_100019524(&qword_10030B7E8);
  uint64_t v118 = v117[9];
  int v119 = (char *)v115 + v118;
  uint64_t v120 = (char *)v116 + v118;
  *(void *)int v119 = *(void *)((char *)v116 + v118);
  *((void *)v119 + 1) = *(void *)((char *)v116 + v118 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v119[16] = v120[16];
  *((void *)v119 + 3) = *((void *)v120 + 3);
  *((void *)v119 + 4) = *((void *)v120 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v119 + 5) = *((void *)v120 + 5);
  *((void *)v119 + 6) = *((void *)v120 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v119 + 7) = *((void *)v120 + 7);
  *((void *)v119 + 8) = *((void *)v120 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v119[72] = v120[72];
  v119[73] = v120[73];
  v119[74] = v120[74];
  uint64_t v121 = (int *)type metadata accessor for RenewalInfo();
  uint64_t v122 = v121[12];
  uint64_t v123 = &v119[v122];
  uint64_t v124 = &v120[v122];
  LODWORD(v108) = sub_10001FA0C((uint64_t)&v119[v122], 1, v16);
  int v125 = sub_10001FA0C((uint64_t)v124, 1, v16);
  if (v108)
  {
    if (!v125)
    {
      (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v123, v124, v16);
      sub_1000195B4((uint64_t)v123, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v125)
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v123, v16);
LABEL_18:
    uint64_t v126 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v123, v124, *(void *)(*(void *)(v126 - 8) + 64));
    goto LABEL_19;
  }
  v165(v123, v124, v16);
LABEL_19:
  uint64_t v127 = v121[13];
  uint64_t v128 = &v119[v127];
  uint64_t v129 = &v120[v127];
  *(void *)uint64_t v128 = *(void *)v129;
  *((void *)v128 + 1) = *((void *)v129 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v130 = v121[14];
  uint64_t v131 = &v119[v130];
  uint64_t v132 = &v120[v130];
  *(void *)uint64_t v131 = *(void *)v132;
  *((void *)v131 + 1) = *((void *)v132 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v165(&v119[v121[15]], &v120[v121[15]], v16);
  v119[v121[16]] = v120[v121[16]];
  uint64_t v133 = v121[17];
  uint64_t v134 = &v119[v133];
  uint64_t v135 = &v120[v133];
  *(void *)uint64_t v134 = *(void *)v135;
  *((void *)v134 + 1) = *((void *)v135 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v119[v121[18]] = v120[v121[18]];
  uint64_t v136 = v121[19];
  uint64_t v137 = &v119[v136];
  uint64_t v138 = &v120[v136];
  char v139 = v138[8];
  *(void *)uint64_t v137 = *(void *)v138;
  v137[8] = v139;
  uint64_t v140 = v121[20];
  uint64_t v141 = &v119[v140];
  uint64_t v142 = &v120[v140];
  *(void *)uint64_t v141 = *(void *)v142;
  *((void *)v141 + 1) = *((void *)v142 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v119[v121[21]] = *(void *)&v120[v121[21]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v143 = v121[22];
  uint64_t v144 = &v119[v143];
  uint64_t v145 = &v120[v143];
  int v146 = sub_10001FA0C((uint64_t)&v119[v143], 1, v16);
  int v147 = sub_10001FA0C((uint64_t)v145, 1, v16);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v144, v145, v16);
      sub_1000195B4((uint64_t)v144, 0, 1, v16);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v147)
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v144, v16);
LABEL_24:
    uint64_t v148 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
    goto LABEL_25;
  }
  v165(v144, v145, v16);
LABEL_25:
  uint64_t v149 = v121[23];
  uint64_t v150 = &v119[v149];
  uint64_t v151 = &v120[v149];
  int v152 = sub_10001FA0C((uint64_t)&v119[v149], 1, v16);
  int v153 = sub_10001FA0C((uint64_t)v151, 1, v16);
  if (!v152)
  {
    if (!v153)
    {
      v165(v150, v151, v16);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v167 + 8))(v150, v16);
    goto LABEL_30;
  }
  if (v153)
  {
LABEL_30:
    uint64_t v154 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v150, v151, v16);
  sub_1000195B4((uint64_t)v150, 0, 1, v16);
LABEL_31:
  ((void (*)(char *, char *, uint64_t))v160)((char *)v115 + v117[10], (char *)v116 + v117[10], v161);
  uint64_t v155 = v117[11];
  uint64_t v156 = (char *)v115 + v155;
  uint64_t v157 = (char *)v116 + v155;
  uint64_t v158 = *(void *)v157;
  v156[8] = v157[8];
  *(void *)uint64_t v156 = v158;
  *((unsigned char *)v115 + v117[12]) = *((unsigned char *)v116 + v117[12]);
  return v166;
}

uint64_t sub_10005FA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(int *)(a3 + 24);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  memcpy((void *)(a1 + v3), (const void *)(a2 + v3), 0x48uLL);
  uint64_t v64 = (int *)sub_100019524(&qword_10030A380);
  uint64_t v6 = v64[9];
  uint64_t v7 = v4 + v6;
  uint64_t v8 = v5 + v6;
  *(_OWORD *)(v4 + v6) = *(_OWORD *)(v5 + v6);
  uint64_t v9 = (int *)type metadata accessor for CheddarTransaction();
  uint64_t v10 = v9[5];
  uint64_t v11 = (void *)(v7 + v10);
  uint64_t v12 = (const void *)(v8 + v10);
  uint64_t v13 = sub_10024E030();
  uint64_t v14 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  *(_OWORD *)(v7 + v9[6]) = *(_OWORD *)(v8 + v9[6]);
  *(_OWORD *)(v7 + v9[7]) = *(_OWORD *)(v8 + v9[7]);
  *(_OWORD *)(v7 + v9[8]) = *(_OWORD *)(v8 + v9[8]);
  v14((void *)(v7 + v9[9]), (const void *)(v8 + v9[9]), v13);
  *(_OWORD *)(v7 + v9[10]) = *(_OWORD *)(v8 + v9[10]);
  *(unsigned char *)(v7 + v9[11]) = *(unsigned char *)(v8 + v9[11]);
  *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v8 + v9[12]);
  v14((void *)(v7 + v9[13]), (const void *)(v8 + v9[13]), v13);
  *(void *)(v7 + v9[14]) = *(void *)(v8 + v9[14]);
  *(_OWORD *)(v7 + v9[15]) = *(_OWORD *)(v8 + v9[15]);
  *(void *)(v7 + v9[16]) = *(void *)(v8 + v9[16]);
  *(unsigned char *)(v7 + v9[17]) = *(unsigned char *)(v8 + v9[17]);
  *(_OWORD *)(v7 + v9[18]) = *(_OWORD *)(v8 + v9[18]);
  *(_OWORD *)(v7 + v9[19]) = *(_OWORD *)(v8 + v9[19]);
  *(_OWORD *)(v7 + v9[20]) = *(_OWORD *)(v8 + v9[20]);
  *(_OWORD *)(v7 + v9[21]) = *(_OWORD *)(v8 + v9[21]);
  uint64_t v15 = v9[22];
  uint64_t v16 = (void *)(v7 + v15);
  uint64_t v17 = (const void *)(v8 + v15);
  uint64_t v68 = v14;
  if (sub_10001FA0C(v8 + v15, 1, v13))
  {
    uint64_t v18 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v13);
    sub_1000195B4((uint64_t)v16, 0, 1, v13);
  }
  *(_OWORD *)(v7 + v9[23]) = *(_OWORD *)(v8 + v9[23]);
  *(_OWORD *)(v7 + v9[24]) = *(_OWORD *)(v8 + v9[24]);
  *(_OWORD *)(v7 + v9[25]) = *(_OWORD *)(v8 + v9[25]);
  uint64_t v19 = v9[26];
  uint64_t v20 = (void *)(v7 + v19);
  uint64_t v21 = (const void *)(v8 + v19);
  if (sub_10001FA0C(v8 + v19, 1, v13))
  {
    uint64_t v22 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v14(v20, v21, v13);
    sub_1000195B4((uint64_t)v20, 0, 1, v13);
  }
  *(unsigned char *)(v7 + v9[27]) = *(unsigned char *)(v8 + v9[27]);
  *(_OWORD *)(v7 + v9[28]) = *(_OWORD *)(v8 + v9[28]);
  *(unsigned char *)(v7 + v9[29]) = *(unsigned char *)(v8 + v9[29]);
  *(unsigned char *)(v7 + v9[30]) = *(unsigned char *)(v8 + v9[30]);
  *(unsigned char *)(v7 + v9[31]) = *(unsigned char *)(v8 + v9[31]);
  *(_OWORD *)(v7 + v9[32]) = *(_OWORD *)(v8 + v9[32]);
  *(_OWORD *)(v7 + v9[33]) = *(_OWORD *)(v8 + v9[33]);
  *(_OWORD *)(v7 + v9[34]) = *(_OWORD *)(v8 + v9[34]);
  *(_OWORD *)(v7 + v9[35]) = *(_OWORD *)(v8 + v9[35]);
  *(_OWORD *)(v7 + v9[36]) = *(_OWORD *)(v8 + v9[36]);
  *(_OWORD *)(v7 + v9[37]) = *(_OWORD *)(v8 + v9[37]);
  *(_OWORD *)(v7 + v9[38]) = *(_OWORD *)(v8 + v9[38]);
  *(_OWORD *)(v7 + v9[39]) = *(_OWORD *)(v8 + v9[39]);
  *(_OWORD *)(v7 + v9[40]) = *(_OWORD *)(v8 + v9[40]);
  uint64_t v23 = v9[41];
  uint64_t v24 = v7 + v23;
  uint64_t v25 = v8 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(_OWORD *)(v7 + v9[42]) = *(_OWORD *)(v8 + v9[42]);
  uint64_t v26 = v64[10];
  uint64_t v27 = v4 + v26;
  uint64_t v28 = v5 + v26;
  uint64_t v29 = sub_10024E450();
  uint64_t v62 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 32);
  uint64_t v63 = v29;
  v62(v27, v28);
  uint64_t v30 = v64[11];
  uint64_t v31 = v4 + v30;
  uint64_t v32 = v5 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(unsigned char *)(v4 + v64[12]) = *(unsigned char *)(v5 + v64[12]);
  uint64_t v33 = *(int *)(a3 + 28);
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  memcpy((void *)(a1 + v33), (const void *)(a2 + v33), 0x48uLL);
  int v67 = (int *)sub_100019524(&qword_10030B7E8);
  uint64_t v36 = v67[9];
  uint64_t v37 = v34 + v36;
  uint64_t v38 = v35 + v36;
  *(_OWORD *)uint64_t v37 = *(_OWORD *)(v35 + v36);
  *(unsigned char *)(v37 + 16) = *(unsigned char *)(v35 + v36 + 16);
  *(_OWORD *)(v37 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v35 + v36 + 24);
  *(_OWORD *)(v37 + 40) = *(_OWORD *)(v35 + v36 + 40);
  *(_OWORD *)(v37 + 56) = *(_OWORD *)(v35 + v36 + 56);
  *(unsigned char *)(v37 + 72) = *(unsigned char *)(v35 + v36 + 72);
  *(_WORD *)(v37 + 73) = *(_WORD *)(v35 + v36 + 73);
  uint64_t v39 = (int *)type metadata accessor for RenewalInfo();
  uint64_t v40 = v39[12];
  uint64_t v41 = (void *)(v37 + v40);
  uint64_t v42 = (const void *)(v38 + v40);
  if (sub_10001FA0C(v38 + v40, 1, v13))
  {
    uint64_t v43 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    uint64_t v44 = v68;
  }
  else
  {
    uint64_t v45 = v42;
    uint64_t v44 = v68;
    v68(v41, v45, v13);
    sub_1000195B4((uint64_t)v41, 0, 1, v13);
  }
  *(_OWORD *)(v37 + v39[13]) = *(_OWORD *)(v38 + v39[13]);
  *(_OWORD *)(v37 + v39[14]) = *(_OWORD *)(v38 + v39[14]);
  v44((void *)(v37 + v39[15]), (const void *)(v38 + v39[15]), v13);
  *(unsigned char *)(v37 + v39[16]) = *(unsigned char *)(v38 + v39[16]);
  *(_OWORD *)(v37 + v39[17]) = *(_OWORD *)(v38 + v39[17]);
  *(unsigned char *)(v37 + v39[18]) = *(unsigned char *)(v38 + v39[18]);
  uint64_t v46 = v39[19];
  uint64_t v47 = v37 + v46;
  uint64_t v48 = v38 + v46;
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  *(void *)uint64_t v47 = *(void *)v48;
  *(_OWORD *)(v37 + v39[20]) = *(_OWORD *)(v38 + v39[20]);
  *(void *)(v37 + v39[21]) = *(void *)(v38 + v39[21]);
  uint64_t v49 = v39[22];
  uint64_t v50 = (void *)(v37 + v49);
  int v51 = v44;
  int v52 = (const void *)(v38 + v49);
  if (sub_10001FA0C(v38 + v49, 1, v13))
  {
    uint64_t v53 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v50, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    v51(v50, v52, v13);
    sub_1000195B4((uint64_t)v50, 0, 1, v13);
  }
  uint64_t v54 = v39[23];
  unint64_t v55 = (void *)(v37 + v54);
  uint64_t v56 = (const void *)(v38 + v54);
  if (sub_10001FA0C(v38 + v54, 1, v13))
  {
    uint64_t v57 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    v51(v55, v56, v13);
    sub_1000195B4((uint64_t)v55, 0, 1, v13);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v34 + v67[10], v35 + v67[10], v63);
  uint64_t v58 = v67[11];
  uint64_t v59 = v34 + v58;
  uint64_t v60 = v35 + v58;
  *(void *)uint64_t v59 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(unsigned char *)(v34 + v67[12]) = *(unsigned char *)(v35 + v67[12]);
  return a1;
}

uint64_t sub_100060150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v229 = a3;
  uint64_t v230 = a2;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v232 = a1;
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  void *v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[5];
  void v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRelease();
  void v8[6] = v9[6];
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[8];
  v8[7] = v9[7];
  v8[8] = v13;
  swift_bridgeObjectRelease();
  v228 = (int *)sub_100019524(&qword_10030A380);
  uint64_t v14 = v228[9];
  uint64_t v15 = (char *)v8 + v14;
  uint64_t v16 = (char *)v9 + v14;
  uint64_t v17 = *(void *)((char *)v9 + v14 + 8);
  *(void *)uint64_t v15 = *(void *)((char *)v9 + v14);
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = (int *)type metadata accessor for CheddarTransaction();
  uint64_t v19 = v18[5];
  uint64_t v20 = &v15[v19];
  uint64_t v21 = &v16[v19];
  uint64_t v22 = sub_10024E030();
  uint64_t v233 = *(void *)(v22 - 8);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v233 + 40);
  v23(v20, v21, v22);
  uint64_t v24 = v18[6];
  uint64_t v25 = &v15[v24];
  uint64_t v26 = &v16[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v18[7];
  uint64_t v30 = &v15[v29];
  uint64_t v31 = &v16[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v18[8];
  uint64_t v35 = &v15[v34];
  uint64_t v36 = &v16[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  v23(&v15[v18[9]], &v16[v18[9]], v22);
  uint64_t v39 = v18[10];
  uint64_t v40 = &v15[v39];
  uint64_t v41 = &v16[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v15[v18[11]] = v16[v18[11]];
  uint64_t v44 = v18[12];
  uint64_t v45 = &v15[v44];
  uint64_t v46 = &v16[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v231 = v23;
  v23(&v15[v18[13]], &v16[v18[13]], v22);
  *(void *)&v15[v18[14]] = *(void *)&v16[v18[14]];
  uint64_t v49 = v18[15];
  uint64_t v50 = &v15[v49];
  int v51 = &v16[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  *(void *)&v15[v18[16]] = *(void *)&v16[v18[16]];
  v15[v18[17]] = v16[v18[17]];
  uint64_t v54 = v18[18];
  unint64_t v55 = &v15[v54];
  uint64_t v56 = &v16[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)unint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = v18[19];
  uint64_t v60 = &v15[v59];
  uint64_t v61 = &v16[v59];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  *(void *)uint64_t v60 = v63;
  *((void *)v60 + 1) = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = v18[20];
  uint64_t v65 = &v15[v64];
  int v66 = &v16[v64];
  uint64_t v68 = *(void *)v66;
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)uint64_t v65 = v68;
  *((void *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = v18[21];
  uint64_t v70 = &v15[v69];
  uint64_t v71 = &v16[v69];
  uint64_t v73 = *(void *)v71;
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = v73;
  *((void *)v70 + 1) = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = v18[22];
  uint64_t v75 = &v15[v74];
  uint64_t v76 = &v16[v74];
  int v77 = sub_10001FA0C((uint64_t)&v15[v74], 1, v22);
  int v78 = sub_10001FA0C((uint64_t)v76, 1, v22);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v75, v76, v22);
      sub_1000195B4((uint64_t)v75, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v75, v22);
LABEL_6:
    uint64_t v79 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_7;
  }
  v23(v75, v76, v22);
LABEL_7:
  uint64_t v80 = v18[23];
  uint64_t v81 = &v15[v80];
  os_log_type_t v82 = &v16[v80];
  uint64_t v84 = *(void *)v82;
  uint64_t v83 = *((void *)v82 + 1);
  *(void *)uint64_t v81 = v84;
  *((void *)v81 + 1) = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = v18[24];
  unint64_t v86 = &v15[v85];
  uint64_t v87 = &v16[v85];
  uint64_t v89 = *(void *)v87;
  uint64_t v88 = *((void *)v87 + 1);
  *(void *)unint64_t v86 = v89;
  *((void *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = v18[25];
  uint64_t v91 = &v15[v90];
  uint64_t v92 = &v16[v90];
  uint64_t v94 = *(void *)v92;
  uint64_t v93 = *((void *)v92 + 1);
  *(void *)uint64_t v91 = v94;
  *((void *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = v18[26];
  uint64_t v96 = &v15[v95];
  uint64_t v97 = &v16[v95];
  int v98 = sub_10001FA0C((uint64_t)&v15[v95], 1, v22);
  int v99 = sub_10001FA0C((uint64_t)v97, 1, v22);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v96, v97, v22);
      sub_1000195B4((uint64_t)v96, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v96, v22);
LABEL_12:
    uint64_t v100 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_13;
  }
  v23(v96, v97, v22);
LABEL_13:
  v15[v18[27]] = v16[v18[27]];
  uint64_t v101 = v18[28];
  uint64_t v102 = &v15[v101];
  uint64_t v103 = &v16[v101];
  uint64_t v105 = *(void *)v103;
  uint64_t v104 = *((void *)v103 + 1);
  *(void *)uint64_t v102 = v105;
  *((void *)v102 + 1) = v104;
  swift_bridgeObjectRelease();
  v15[v18[29]] = v16[v18[29]];
  v15[v18[30]] = v16[v18[30]];
  v15[v18[31]] = v16[v18[31]];
  uint64_t v106 = v18[32];
  uint64_t v107 = &v15[v106];
  uint64_t v108 = &v16[v106];
  uint64_t v110 = *(void *)v108;
  uint64_t v109 = *((void *)v108 + 1);
  *(void *)uint64_t v107 = v110;
  *((void *)v107 + 1) = v109;
  swift_bridgeObjectRelease();
  uint64_t v111 = v18[33];
  uint64_t v112 = &v15[v111];
  uint64_t v113 = &v16[v111];
  uint64_t v115 = *(void *)v113;
  uint64_t v114 = *((void *)v113 + 1);
  *(void *)uint64_t v112 = v115;
  *((void *)v112 + 1) = v114;
  swift_bridgeObjectRelease();
  uint64_t v116 = v18[34];
  uint64_t v117 = &v15[v116];
  uint64_t v118 = &v16[v116];
  uint64_t v120 = *(void *)v118;
  uint64_t v119 = *((void *)v118 + 1);
  *(void *)uint64_t v117 = v120;
  *((void *)v117 + 1) = v119;
  swift_bridgeObjectRelease();
  uint64_t v121 = v18[35];
  uint64_t v122 = &v15[v121];
  uint64_t v123 = &v16[v121];
  uint64_t v125 = *(void *)v123;
  uint64_t v124 = *((void *)v123 + 1);
  *(void *)uint64_t v122 = v125;
  *((void *)v122 + 1) = v124;
  swift_bridgeObjectRelease();
  uint64_t v126 = v18[36];
  uint64_t v127 = &v15[v126];
  uint64_t v128 = &v16[v126];
  uint64_t v130 = *(void *)v128;
  uint64_t v129 = *((void *)v128 + 1);
  *(void *)uint64_t v127 = v130;
  *((void *)v127 + 1) = v129;
  swift_bridgeObjectRelease();
  uint64_t v131 = v18[37];
  uint64_t v132 = &v15[v131];
  uint64_t v133 = &v16[v131];
  uint64_t v135 = *(void *)v133;
  uint64_t v134 = *((void *)v133 + 1);
  *(void *)uint64_t v132 = v135;
  *((void *)v132 + 1) = v134;
  swift_bridgeObjectRelease();
  uint64_t v136 = v18[38];
  uint64_t v137 = &v15[v136];
  uint64_t v138 = &v16[v136];
  uint64_t v140 = *(void *)v138;
  uint64_t v139 = *((void *)v138 + 1);
  *(void *)uint64_t v137 = v140;
  *((void *)v137 + 1) = v139;
  swift_bridgeObjectRelease();
  uint64_t v141 = v18[39];
  uint64_t v142 = &v15[v141];
  uint64_t v143 = &v16[v141];
  uint64_t v145 = *(void *)v143;
  uint64_t v144 = *((void *)v143 + 1);
  *(void *)uint64_t v142 = v145;
  *((void *)v142 + 1) = v144;
  swift_bridgeObjectRelease();
  uint64_t v146 = v18[40];
  int v147 = &v15[v146];
  uint64_t v148 = &v16[v146];
  uint64_t v150 = *(void *)v148;
  uint64_t v149 = *((void *)v148 + 1);
  *(void *)int v147 = v150;
  *((void *)v147 + 1) = v149;
  swift_bridgeObjectRelease();
  uint64_t v151 = v18[41];
  int v152 = &v15[v151];
  int v153 = &v16[v151];
  *(void *)int v152 = *(void *)v153;
  v152[8] = v153[8];
  uint64_t v154 = v18[42];
  uint64_t v155 = &v15[v154];
  uint64_t v156 = &v16[v154];
  uint64_t v158 = *(void *)v156;
  uint64_t v157 = *((void *)v156 + 1);
  *(void *)uint64_t v155 = v158;
  *((void *)v155 + 1) = v157;
  swift_bridgeObjectRelease();
  uint64_t v159 = v228[10];
  uint64_t v160 = (char *)v8 + v159;
  uint64_t v161 = (char *)v9 + v159;
  uint64_t v162 = sub_10024E450();
  v226 = *(void (**)(char *, char *))(*(void *)(v162 - 8) + 40);
  uint64_t v227 = v162;
  v226(v160, v161);
  uint64_t v163 = v228[11];
  uint64_t v164 = (char *)v8 + v163;
  unint64_t v165 = (char *)v9 + v163;
  *(void *)uint64_t v164 = *(void *)v165;
  v164[8] = v165[8];
  *((unsigned char *)v8 + v228[12]) = *((unsigned char *)v9 + v228[12]);
  uint64_t v166 = *(int *)(v229 + 28);
  uint64_t v167 = (void *)(v232 + v166);
  int v168 = (void *)(v230 + v166);
  uint64_t v169 = *(void *)(v230 + v166 + 8);
  void *v167 = *(void *)(v230 + v166);
  v167[1] = v169;
  swift_bridgeObjectRelease();
  uint64_t v170 = v168[3];
  v167[2] = v168[2];
  v167[3] = v170;
  swift_bridgeObjectRelease();
  uint64_t v171 = v168[5];
  v167[4] = v168[4];
  v167[5] = v171;
  swift_bridgeObjectRelease();
  v167[6] = v168[6];
  swift_bridgeObjectRelease();
  uint64_t v172 = v168[8];
  v167[7] = v168[7];
  v167[8] = v172;
  swift_bridgeObjectRelease();
  uint64_t v173 = (int *)sub_100019524(&qword_10030B7E8);
  uint64_t v174 = v173[9];
  uint64_t v175 = (char *)v167 + v174;
  uint64_t v176 = (char *)v168 + v174;
  uint64_t v177 = *(void *)((char *)v168 + v174 + 8);
  *(void *)uint64_t v175 = *(void *)((char *)v168 + v174);
  *((void *)v175 + 1) = v177;
  swift_bridgeObjectRelease();
  v175[16] = v176[16];
  uint64_t v178 = *((void *)v176 + 4);
  *((void *)v175 + 3) = *((void *)v176 + 3);
  *((void *)v175 + 4) = v178;
  swift_bridgeObjectRelease();
  uint64_t v179 = *((void *)v176 + 6);
  *((void *)v175 + 5) = *((void *)v176 + 5);
  *((void *)v175 + 6) = v179;
  swift_bridgeObjectRelease();
  uint64_t v180 = *((void *)v176 + 8);
  *((void *)v175 + 7) = *((void *)v176 + 7);
  *((void *)v175 + 8) = v180;
  swift_bridgeObjectRelease();
  v175[72] = v176[72];
  *(_WORD *)(v175 + 73) = *(_WORD *)(v176 + 73);
  uint64_t v181 = (int *)type metadata accessor for RenewalInfo();
  uint64_t v182 = v181[12];
  uint64_t v183 = &v175[v182];
  uint64_t v184 = &v176[v182];
  LODWORD(v161) = sub_10001FA0C((uint64_t)&v175[v182], 1, v22);
  int v185 = sub_10001FA0C((uint64_t)v184, 1, v22);
  if (v161)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v183, v184, v22);
      sub_1000195B4((uint64_t)v183, 0, 1, v22);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v183, v22);
LABEL_18:
    uint64_t v186 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v183, v184, *(void *)(*(void *)(v186 - 8) + 64));
    goto LABEL_19;
  }
  v231(v183, v184, v22);
LABEL_19:
  uint64_t v187 = v181[13];
  uint64_t v188 = &v175[v187];
  uint64_t v189 = &v176[v187];
  uint64_t v191 = *(void *)v189;
  uint64_t v190 = *((void *)v189 + 1);
  *(void *)uint64_t v188 = v191;
  *((void *)v188 + 1) = v190;
  swift_bridgeObjectRelease();
  uint64_t v192 = v181[14];
  uint64_t v193 = &v175[v192];
  uint64_t v194 = &v176[v192];
  uint64_t v196 = *(void *)v194;
  uint64_t v195 = *((void *)v194 + 1);
  *(void *)uint64_t v193 = v196;
  *((void *)v193 + 1) = v195;
  swift_bridgeObjectRelease();
  v231(&v175[v181[15]], &v176[v181[15]], v22);
  v175[v181[16]] = v176[v181[16]];
  uint64_t v197 = v181[17];
  uint64_t v198 = &v175[v197];
  uint64_t v199 = &v176[v197];
  uint64_t v201 = *(void *)v199;
  uint64_t v200 = *((void *)v199 + 1);
  *(void *)uint64_t v198 = v201;
  *((void *)v198 + 1) = v200;
  swift_bridgeObjectRelease();
  v175[v181[18]] = v176[v181[18]];
  uint64_t v202 = v181[19];
  uint64_t v203 = &v175[v202];
  uint64_t v204 = &v176[v202];
  *(void *)uint64_t v203 = *(void *)v204;
  v203[8] = v204[8];
  uint64_t v205 = v181[20];
  v206 = &v175[v205];
  v207 = &v176[v205];
  uint64_t v209 = *(void *)v207;
  uint64_t v208 = *((void *)v207 + 1);
  *(void *)v206 = v209;
  *((void *)v206 + 1) = v208;
  swift_bridgeObjectRelease();
  *(void *)&v175[v181[21]] = *(void *)&v176[v181[21]];
  swift_bridgeObjectRelease();
  uint64_t v210 = v181[22];
  v211 = &v175[v210];
  v212 = &v176[v210];
  int v213 = sub_10001FA0C((uint64_t)&v175[v210], 1, v22);
  int v214 = sub_10001FA0C((uint64_t)v212, 1, v22);
  if (v213)
  {
    if (!v214)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v211, v212, v22);
      sub_1000195B4((uint64_t)v211, 0, 1, v22);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v214)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v211, v22);
LABEL_24:
    uint64_t v215 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v211, v212, *(void *)(*(void *)(v215 - 8) + 64));
    goto LABEL_25;
  }
  v231(v211, v212, v22);
LABEL_25:
  uint64_t v216 = v181[23];
  v217 = &v175[v216];
  v218 = &v176[v216];
  int v219 = sub_10001FA0C((uint64_t)&v175[v216], 1, v22);
  int v220 = sub_10001FA0C((uint64_t)v218, 1, v22);
  if (!v219)
  {
    if (!v220)
    {
      v231(v217, v218, v22);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v233 + 8))(v217, v22);
    goto LABEL_30;
  }
  if (v220)
  {
LABEL_30:
    uint64_t v221 = sub_100019524((uint64_t *)&unk_10030FD70);
    memcpy(v217, v218, *(void *)(*(void *)(v221 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v217, v218, v22);
  sub_1000195B4((uint64_t)v217, 0, 1, v22);
LABEL_31:
  ((void (*)(char *, char *, uint64_t))v226)((char *)v167 + v173[10], (char *)v168 + v173[10], v227);
  uint64_t v222 = v173[11];
  v223 = (char *)v167 + v222;
  v224 = (char *)v168 + v222;
  *(void *)v223 = *(void *)v224;
  v223[8] = v224[8];
  *((unsigned char *)v167 + v173[12]) = *((unsigned char *)v168 + v173[12]);
  return v232;
}

uint64_t sub_100060CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060CF8);
}

uint64_t sub_100060CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_100019524(&qword_10030A380);
    sub_100025F58();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }
    else
    {
      uint64_t v10 = sub_100019524(&qword_10030B7E8);
      uint64_t v11 = *(int *)(a3 + 28);
    }
    return sub_10001FA0C(a1 + v11, a2, v10);
  }
}

uint64_t sub_100060DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060DC0);
}

uint64_t sub_100060DC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_100019524(&qword_10030A380);
    sub_100025F58();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }
    else
    {
      uint64_t v10 = sub_100019524(&qword_10030B7E8);
      uint64_t v11 = *(int *)(a4 + 28);
    }
    return sub_1000195B4(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100060E70()
{
  sub_100060F4C();
  if (v0 <= 0x3F)
  {
    sub_100060FE0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100060F4C()
{
  if (!qword_10030B860)
  {
    type metadata accessor for CheddarTransaction();
    sub_10006158C((unint64_t *)&qword_10030B868, (void (*)(uint64_t))type metadata accessor for CheddarTransaction);
    unint64_t v0 = type metadata accessor for JWS();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10030B860);
    }
  }
}

void sub_100060FE0()
{
  if (!qword_10030B870)
  {
    type metadata accessor for RenewalInfo();
    sub_10006158C((unint64_t *)&unk_10030B878, (void (*)(uint64_t))type metadata accessor for RenewalInfo);
    unint64_t v0 = type metadata accessor for JWS();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10030B870);
    }
  }
}

uint64_t sub_100061074(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000610B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  char v5 = *(unsigned char *)(a1 + 88);
  return sub_100061100(v2, v3, v4, v5);
}

uint64_t sub_100061100(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100061140(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  char v8 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100061074(v5, v6, v7, v8);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = v8;
  return a1;
}

uint64_t sub_1000611DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v2[6];
  *(void *)(a1 + 56) = v2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v2[8];
  uint64_t v7 = v2[9];
  uint64_t v8 = v2[10];
  LOBYTE(v2) = *((unsigned char *)v2 + 88);
  sub_100061074(v6, v7, v8, (char)v2);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  char v12 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 88) = (_BYTE)v2;
  sub_100061100(v9, v10, v11, v12);
  return a1;
}

void *sub_1000612B0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t sub_1000612B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  char v7 = *(unsigned char *)(a2 + 88);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  char v11 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = v7;
  sub_100061100(v8, v9, v10, v11);
  return a1;
}

uint64_t sub_100061348(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 89))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100061388(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse()
{
}

unint64_t sub_1000613EC()
{
  unint64_t result = qword_10030B8B8;
  if (!qword_10030B8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B8B8);
  }
  return result;
}

_OWORD *sub_100061438(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  *(_OWORD *)((char *)a2 + 9) = *(long long *)((char *)a1 + 9);
  *a2 = v2;
  return a2;
}

unint64_t sub_100061450()
{
  unint64_t result = qword_10030B8C0;
  if (!qword_10030B8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B8C0);
  }
  return result;
}

unint64_t sub_10006149C()
{
  unint64_t result = qword_10030B8D0;
  if (!qword_10030B8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B8D0);
  }
  return result;
}

unint64_t sub_1000614E8()
{
  unint64_t result = qword_10030B8E0;
  if (!qword_10030B8E0)
  {
    sub_10001B028(&qword_10030B8D8);
    sub_10006158C(&qword_10030B8E8, (void (*)(uint64_t))type metadata accessor for StatusResponse.Datum.TransactionContainer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B8E0);
  }
  return result;
}

uint64_t sub_10006158C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000615D4()
{
  unint64_t result = qword_10030B8F8;
  if (!qword_10030B8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B8F8);
  }
  return result;
}

unint64_t sub_100061620()
{
  unint64_t result = qword_10030B900;
  if (!qword_10030B900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B900);
  }
  return result;
}

uint64_t sub_10006166C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_1000616BC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061788);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse.Datum.TransactionContainer.CodingKeys()
{
}

unsigned char *sub_1000617BC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061888);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse.Datum.CodingKeys()
{
}

unsigned char *sub_1000618BC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse.CodingKeys()
{
}

unsigned char *sub_1000619BC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061A88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for StatusResponse.Datum.TransactionContainer.Code()
{
}

uint64_t sub_100061ABC(uint64_t a1)
{
  return sub_100061100(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_100061AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100061074(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  return a1;
}

uint64_t sub_100061B30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100061074(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  sub_100061100(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for SocketAddressError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100061BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  sub_100061100(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_100061C04(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100061C44(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100061C8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_100061C94(uint64_t result, char a2)
{
  *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 & 1;
  return result;
}

void type metadata accessor for StatusResponse.DataType()
{
}

unint64_t sub_100061CB0()
{
  unint64_t result = qword_10030B918;
  if (!qword_10030B918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B918);
  }
  return result;
}

unint64_t sub_100061D00()
{
  unint64_t result = qword_10030B920;
  if (!qword_10030B920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B920);
  }
  return result;
}

unint64_t sub_100061D50()
{
  unint64_t result = qword_10030B928;
  if (!qword_10030B928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B928);
  }
  return result;
}

unint64_t sub_100061DA0()
{
  unint64_t result = qword_10030B930;
  if (!qword_10030B930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B930);
  }
  return result;
}

unint64_t sub_100061DF0()
{
  unint64_t result = qword_10030B938;
  if (!qword_10030B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B938);
  }
  return result;
}

unint64_t sub_100061E40()
{
  unint64_t result = qword_10030B940;
  if (!qword_10030B940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B940);
  }
  return result;
}

unint64_t sub_100061E90()
{
  unint64_t result = qword_10030B948;
  if (!qword_10030B948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B948);
  }
  return result;
}

unint64_t sub_100061EE0()
{
  unint64_t result = qword_10030B950;
  if (!qword_10030B950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B950);
  }
  return result;
}

unint64_t sub_100061F30()
{
  unint64_t result = qword_10030B958;
  if (!qword_10030B958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B958);
  }
  return result;
}

unint64_t sub_100061F80()
{
  unint64_t result = qword_10030B960;
  if (!qword_10030B960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B960);
  }
  return result;
}

unint64_t sub_100061FCC()
{
  unint64_t result = qword_10030B970;
  if (!qword_10030B970)
  {
    sub_10001B028(&qword_10030B968);
    sub_100062040();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B970);
  }
  return result;
}

unint64_t sub_100062040()
{
  unint64_t result = qword_10030B978;
  if (!qword_10030B978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B978);
  }
  return result;
}

unint64_t sub_10006208C()
{
  unint64_t result = qword_10030B980;
  if (!qword_10030B980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030B980);
  }
  return result;
}

void sub_1000620D8()
{
  sub_100035094();
}

uint64_t sub_1000620FC()
{
  return 0x6D6E6F7269766E65;
}

uint64_t sub_10006211C()
{
  return 0x496D616441707061;
}

uint64_t sub_100062138()
{
  return 0x6449656C646E7562;
}

unint64_t sub_100062150()
{
  return 0xD000000000000015;
}

uint64_t sub_10006217C@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 128) = a1;
  return sub_10024F940();
}

void sub_1000621A0()
{
  sub_100035094();
}

uint64_t sub_1000621C4()
{
  return sub_10024F900();
}

uint64_t sub_1000621E4()
{
  return *v0;
}

void sub_1000621F0()
{
  char v4 = (void *)(v1 + 24 * v0);
  void v4[4] = v3;
  v4[5] = v2;
  v4[6] = 0;
}

uint64_t sub_100062204()
{
  return sub_10024F980();
}

uint64_t sub_10006221C(int a1, char a2)
{
  uint64_t v4 = v2;
  type metadata accessor for BaseSocket();
  swift_retain();
  uint64_t v7 = sub_1000F0FD4(a1, 1, a2);
  if (v3)
  {
    swift_release();
    type metadata accessor for ServerSocket();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v9 = v7;
    *(unsigned char *)(v4 + 20) = a1 == 1;
    swift_release();
    return sub_1000F1214(v9);
  }
}

uint64_t sub_1000622DC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 20) = 0;
  uint64_t v5 = sub_1000F1214(a1);
  if (!v3 && (a2 & 1) != 0)
  {
    if (sub_1000F152C())
    {
      sub_1001B7130();
    }
    else
    {
      sub_100028EB4();
      swift_allocError();
      sub_100062570(v6, 0xD00000000000001FLL);
      swift_release();
    }
  }
  return v5;
}

void sub_100062380(int a1)
{
  if (sub_1000F152C())
  {
    sub_1001B6A90(*(_DWORD *)(v1 + 16), a1);
  }
  else
  {
    sub_100028EB4();
    swift_allocError();
    sub_100062570(v3, 0xD00000000000001FLL);
  }
}

uint64_t sub_1000623FC()
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(v0 + 20) == 1)
  {
    unint64_t v3 = sub_1000F159C((uint64_t (*)(void))sub_1000F1BEC);
    if (v1)
    {
      swift_errorRelease();
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v4 = SocketAddress.pathname.getter(v3);
      uint64_t v5 = v6;
      swift_release();
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t result = sub_1000F14CC();
  if (!v2)
  {
    if (!v5) {
      return result;
    }
    sub_1001529BC(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000624C8()
{
  return _swift_deallocClassInstance(v0, 21, 7);
}

uint64_t type metadata accessor for ServerSocket()
{
  return self;
}

unint64_t sub_1000624FC(uint64_t a1)
{
  unint64_t result = sub_100062524();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100062524()
{
  unint64_t result = qword_10030BAA8;
  if (!qword_10030BAA8)
  {
    type metadata accessor for ServerSocket();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BAA8);
  }
  return result;
}

uint64_t sub_100062570@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_DWORD *)(a1 + 16) = 9;
  return swift_willThrow();
}

double sub_100062598@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ConfirmDialog();
  swift_allocObject();
  sub_100150D04(a1);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  sub_100064478();
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0xF000000000000000;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v6;
  double result = 0.0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(unsigned char *)(a2 + 176) = 19;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = v8;
  *(unsigned char *)(a2 + 208) = 2;
  return result;
}

void *sub_10006264C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, void *a8@<X8>, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  char v47 = 0;
  char v46 = 1;
  if (a7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
  }
  else
  {
    type metadata accessor for AlreadyOwnSubscriptionDialog();
    swift_unknownObjectRetain();
    uint64_t v19 = swift_retain();
    uint64_t v16 = sub_10014FBC8(v19, a3, a4, a5, a6, a9, a1, a2, a11, a12);
  }
  swift_release();
  swift_unknownObjectRelease();
  if (a10) {
    char v20 = 1;
  }
  else {
    char v20 = 2;
  }
  *(void *)__src = 0;
  *(void *)&__src[8] = 0;
  if (a10) {
    char v21 = 4;
  }
  else {
    char v21 = 22;
  }
  *(void *)&__src[16] = _swiftEmptyArrayStorage;
  *(_WORD *)&__src[24] = 0;
  strcpy(&__src[32], "17322632127");
  *(_DWORD *)&__src[44] = -352321536;
  *(void *)&__src[48] = 0;
  __src[56] = 1;
  *(void *)&__src[64] = 0;
  *(void *)&__src[72] = 0;
  *(void *)&__src[80] = 0xF000000000000000;
  *(void *)&__src[88] = 0;
  *(void *)&__src[96] = 0;
  *(void *)&unsigned char __src[104] = 1;
  memset(&__src[112], 0, 64);
  __src[176] = v21;
  *(void *)&__src[184] = 0x1000000000000026;
  *(void *)&__src[192] = 0x800000010027B730;
  *(void *)&__src[200] = v16;
  __src[208] = v20;
  v25[0] = 0;
  v25[1] = 0;
  void v25[2] = _swiftEmptyArrayStorage;
  __int16 v26 = 0;
  uint64_t v27 = 0x3233363232333731;
  unint64_t v28 = 0xEB00000000373231;
  uint64_t v29 = 0;
  char v30 = 1;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0xF000000000000000;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 1;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  char v41 = v21;
  uint64_t v42 = 0x1000000000000026;
  unint64_t v43 = 0x800000010027B730;
  uint64_t v44 = v16;
  char v45 = v20;
  sub_1000636BC(__src);
  sub_10006382C(v25);
  return memcpy(a8, __src, 0xD1uLL);
}

double sub_100062858@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000628B0(a1, a2, a3, (void (*)(void))type metadata accessor for AlreadyOwnNonConsumableDialog, (void (*)(uint64_t, uint64_t, uint64_t))sub_10015103C, a4);
}

double sub_100062884@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000628B0(a1, a2, a3, (void (*)(void))type metadata accessor for PreviouslyPurchasedNonRenewingSubscriptionDialog, (void (*)(uint64_t, uint64_t, uint64_t))sub_100151770, a4);
}

double sub_1000628B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  a4(0);
  swift_allocObject();
  a5(a1, a2, a3);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  sub_100064478();
  *(void *)(a6 + 32) = v11;
  *(void *)(a6 + 40) = v12;
  *(void *)(a6 + 48) = 0;
  *(unsigned char *)(a6 + 56) = v13;
  *(void *)(a6 + 64) = 0;
  *(void *)(a6 + 72) = 0;
  *(void *)(a6 + 80) = 0xF000000000000000;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 96) = 0;
  *(void *)(a6 + 104) = v13;
  double result = 0.0;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(unsigned char *)(a6 + 176) = 22;
  *(void *)(a6 + 184) = 0;
  *(void *)(a6 + 192) = 0;
  *(void *)(a6 + 200) = v15;
  *(unsigned char *)(a6 + 208) = 2;
  return result;
}

double sub_10006298C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  type metadata accessor for PurchaseEngagementDialog();
  sub_10014FC1C(a1, a2, a3, a4, a5, a6, a7);
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  sub_100064478();
  *(void *)(a8 + 32) = v16;
  *(void *)(a8 + 40) = v17;
  *(void *)(a8 + 48) = 0;
  *(unsigned char *)(a8 + 56) = v18;
  *(void *)(a8 + 64) = 0;
  *(void *)(a8 + 72) = 0;
  *(void *)(a8 + 80) = 0xF000000000000000;
  *(void *)(a8 + 88) = 0;
  *(void *)(a8 + 96) = 0;
  *(void *)(a8 + 104) = v18;
  double result = 0.0;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_OWORD *)(a8 + 160) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_OWORD *)(a8 + 128) = 0u;
  *(unsigned char *)(a8 + 176) = 19;
  *(void *)(a8 + 184) = 0xD000000000000022;
  *(void *)(a8 + 192) = 0x800000010027B700;
  *(void *)(a8 + 200) = v20;
  *(unsigned char *)(a8 + 208) = 2;
  return result;
}

uint64_t sub_100062A90(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6E10;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xC) {
    return 12;
  }
  else {
    return v4;
  }
}

uint64_t static NIOBSDSocket.Option.ip_add_membership.getter()
{
  return 12;
}

unint64_t sub_100062AE8(char a1)
{
  unint64_t result = 0x73676E6970;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F44656C676E696ALL;
      break;
    case 2:
      unint64_t result = 0x6341656C676E696ALL;
      break;
    case 3:
      unint64_t result = 1684632420;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0x7473696C2D707061;
      break;
    case 6:
      unint64_t result = 0x2D74706965636572;
      break;
    case 7:
      unint64_t result = 0x7363697274656DLL;
      break;
    case 8:
      unint64_t result = 0x546572756C696166;
      break;
    case 9:
      unint64_t result = 0x72656D6F74737563;
      break;
    case 10:
      unint64_t result = 0x676F6C616964;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100062C88(char a1)
{
  unint64_t result = 0x73676E6970;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F44656C676E696ALL;
      break;
    case 2:
      unint64_t result = 0x6341656C676E696ALL;
      break;
    case 3:
      unint64_t result = 1684632420;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0x7473696C2D707061;
      break;
    case 6:
      unint64_t result = 0x2D74706965636572;
      break;
    case 7:
      unint64_t result = 0x7363697274656DLL;
      break;
    case 8:
      unint64_t result = 0x546572756C696166;
      break;
    case 9:
      unint64_t result = 0x72656D6F74737563;
      break;
    case 10:
      unint64_t result = 0x676F6C616964;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100062E28(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100019524(&qword_10030BAB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 72;
  sub_10001C2A8(a1, a1[3]);
  sub_1000633E8();
  sub_10024FD40();
  uint64_t v11 = *(void *)(v3 + 16);
  char v16 = 0;
  sub_100019524(&qword_100309410);
  sub_100063434();
  sub_10024F980();
  if (!v2)
  {
    sub_1000458B4(v3 + 24, (uint64_t)&v19, &qword_10030BAC0);
    sub_1000644B4((uint64_t)&v19);
    char v16 = 1;
    sub_1000634A0();
    sub_100064454();
    sub_1000458B4(v3 + 25, (uint64_t)&v18, &qword_10030BAD0);
    sub_1000644B4((uint64_t)&v18);
    char v16 = 2;
    sub_1000634EC();
    sub_100064454();
    sub_100064498(3);
    sub_10024F940();
    sub_100064498(4);
    sub_10024F900();
    sub_1000458B4(v3 + 64, (uint64_t)v15, &qword_10030BAE0);
    sub_1000644B4((uint64_t)v15);
    char v16 = 5;
    sub_100019524(&qword_10030BAE8);
    sub_100063538();
    sub_1000644CC();
    sub_1000458B4(v3 + 72, (uint64_t)v14, &qword_10030BB00);
    sub_1000644B4((uint64_t)v14);
    char v16 = 6;
    sub_100056E3C();
    sub_100064454();
    sub_1000458B4(v3 + 88, (uint64_t)v13, &qword_10030BB08);
    sub_1000644B4((uint64_t)v13);
    char v16 = 7;
    sub_1000635DC();
    sub_100064454();
    sub_1000458B4(v3 + 176, (uint64_t)&v17, &qword_10030BB18);
    sub_1000644B4((uint64_t)&v17);
    char v16 = 8;
    sub_100063628();
    sub_100064454();
    sub_100064498(9);
    sub_10024F8D0();
    sub_1000458B4(v3 + 200, (uint64_t)v12, &qword_10030BB28);
    sub_1000644B4((uint64_t)v12);
    char v16 = 10;
    type metadata accessor for Dialog();
    sub_100063674(&qword_10030BB30, (void (*)(uint64_t))type metadata accessor for Dialog);
    sub_1000644CC();
    LOBYTE(v11) = 11;
    sub_10024F8E0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100063218(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 200) = a1;
  return result;
}

uint64_t sub_100063244(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000F9854(*a1, *a2);
}

Swift::Int sub_100063250()
{
  return sub_1001D3498(*v0);
}

uint64_t sub_100063258(uint64_t a1)
{
  return sub_1000D105C(a1, *v1);
}

Swift::Int sub_100063260(uint64_t a1)
{
  return sub_1000D2DA4(a1, *v1);
}

uint64_t sub_100063268@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100062A90(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_100063298@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100062AE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000632C4()
{
  return sub_100062C88(*v0);
}

uint64_t sub_1000632CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100062ADC();
  *a1 = result;
  return result;
}

uint64_t sub_1000632F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOBSDSocket.Option.ip_add_membership.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006331C(uint64_t a1)
{
  unint64_t v2 = sub_1000633E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100063358(uint64_t a1)
{
  unint64_t v2 = sub_1000633E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100063394(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_100062E28(a1);
}

unint64_t sub_1000633E8()
{
  unint64_t result = qword_10030BAB8;
  if (!qword_10030BAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BAB8);
  }
  return result;
}

unint64_t sub_100063434()
{
  unint64_t result = qword_100309418;
  if (!qword_100309418)
  {
    sub_10001B028(&qword_100309410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100309418);
  }
  return result;
}

unint64_t sub_1000634A0()
{
  unint64_t result = qword_10030BAC8;
  if (!qword_10030BAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BAC8);
  }
  return result;
}

unint64_t sub_1000634EC()
{
  unint64_t result = qword_10030BAD8;
  if (!qword_10030BAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BAD8);
  }
  return result;
}

unint64_t sub_100063538()
{
  unint64_t result = qword_10030BAF0;
  if (!qword_10030BAF0)
  {
    sub_10001B028(&qword_10030BAE8);
    sub_100063674((unint64_t *)&qword_10030BAF8, (void (*)(uint64_t))type metadata accessor for IAPTransaction);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BAF0);
  }
  return result;
}

unint64_t sub_1000635DC()
{
  unint64_t result = qword_10030BB10;
  if (!qword_10030BB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB10);
  }
  return result;
}

unint64_t sub_100063628()
{
  unint64_t result = qword_10030BB20;
  if (!qword_10030BB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB20);
  }
  return result;
}

uint64_t sub_100063674(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1000636BC(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v7 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100047398(v2, v3);
  sub_1000637B8(v7, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000637B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_10006382C(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v7 = a1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003F7F4(v2, v3);
  sub_100063924(v7, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100063924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LegacyInAppBuyResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LegacyInAppBuyResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100063AECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyInAppBuyResponse.CodingKeys()
{
  return &type metadata for LegacyInAppBuyResponse.CodingKeys;
}

uint64_t destroy for LegacyInAppBuyResponse(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[10];
  if (v2 >> 60 != 15) {
    sub_10003F808(a1[9], v2);
  }
  if (a1[13] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unsigned int v6 = (uint64_t *)(a2 + 72);
  unint64_t v7 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_1000473AC(*v6, v7);
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = v7;
  }
  uint64_t v9 = *(void *)(a2 + 104);
  if (v9 == 1)
  {
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
  }
  else
  {
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    uint64_t v10 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    uint64_t v11 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v11;
    uint64_t v12 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)(a2 + 72);
  unint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_1000473AC(*v5, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v7;
      *(void *)(a1 + 80) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000567A4(a1 + 72);
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v8 = *v5;
  sub_1000473AC(*v5, *(void *)(a2 + 80));
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v6;
  sub_10003F808(v9, v10);
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) != 1)
  {
    if (v11 != 1)
    {
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_100064030(a1 + 88);
    goto LABEL_13;
  }
  if (v11 == 1)
  {
LABEL_13:
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_15:
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  return a1;
}

uint64_t sub_100064030(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for LegacyInAppBuyResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD1uLL);
}

uint64_t assignWithTake for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  unint64_t v6 = (_OWORD *)(a2 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 80);
  if (v8 >> 60 == 15)
  {
    sub_1000567A4(a1 + 72);
LABEL_4:
    *(_OWORD *)(a1 + 72) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v6;
  *(void *)(a1 + 80) = v8;
  sub_10003F808(v9, v7);
LABEL_6:
  if (*(void *)(a1 + 104) != 1)
  {
    uint64_t v10 = *(void *)(a2 + 104);
    if (v10 != 1)
    {
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v10;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v11;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      uint64_t v12 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_100064030(a1 + 88);
  }
  memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
LABEL_11:
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyInAppBuyResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 209))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyInAppBuyResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 208) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 209) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 209) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyInAppBuyResponse()
{
  return &type metadata for LegacyInAppBuyResponse;
}

unint64_t sub_1000642F4()
{
  unint64_t result = qword_10030BB38;
  if (!qword_10030BB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB38);
  }
  return result;
}

unint64_t sub_100064340(uint64_t a1)
{
  unint64_t result = sub_100064368();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100064368()
{
  unint64_t result = qword_10030BB40;
  if (!qword_10030BB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB40);
  }
  return result;
}

unint64_t sub_1000643B8()
{
  unint64_t result = qword_10030BB48;
  if (!qword_10030BB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB48);
  }
  return result;
}

unint64_t sub_100064408()
{
  unint64_t result = qword_10030BB50;
  if (!qword_10030BB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BB50);
  }
  return result;
}

uint64_t sub_100064454()
{
  return sub_10024F910();
}

void sub_100064498(char a1@<W8>)
{
  *(unsigned char *)(v1 - 288) = a1;
}

uint64_t sub_1000644B4(uint64_t a1)
{
  return sub_1000458B4(a1, v2 - 288, v1);
}

uint64_t sub_1000644CC()
{
  return sub_10024F910();
}

uint64_t sub_1000644F8(uint64_t a1)
{
  uint64_t v2 = sub_10024FCD0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100064FD0();
  if (sub_100064FB0())
  {
    uint64_t v7 = v58;
    sub_10001C2EC(a1);
    return v7;
  }
  sub_100064FD0();
  if (sub_100064FB0())
  {
    uint64_t v7 = v58;
    sub_10001C2EC(a1);
    return v7;
  }
  sub_100064FD0();
  sub_100019524((uint64_t *)&unk_10030FD90);
  if (sub_100064FB0())
  {
    uint64_t v8 = v58;
    uint64_t v9 = *(void *)(v58 + 16);
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    if (v9)
    {
      uint64_t v50 = a1;
      *(void *)&long long v56 = _swiftEmptyArrayStorage;
      sub_100038B38();
      uint64_t v54 = v8;
      uint64_t v10 = v8 + 32;
      uint64_t v7 = v56;
      do
      {
        sub_1000318C8(v10, (uint64_t)v60);
        sub_1000318C8((uint64_t)v60, (uint64_t)&v58);
        uint64_t v11 = sub_1000644F8(&v58);
        uint64_t v13 = v12;
        char v15 = v14;
        sub_10001C2EC((uint64_t)v60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100038B38();
          uint64_t v7 = v56;
        }
        unint64_t v16 = *(void *)(v7 + 16);
        if (v16 >= *(void *)(v7 + 24) >> 1)
        {
          sub_100038B38();
          uint64_t v7 = v56;
        }
        *(void *)(v7 + 16) = v16 + 1;
        uint64_t v17 = v7 + 24 * v16;
        *(void *)(v17 + 32) = v11;
        *(void *)(v17 + 40) = v13;
        *(unsigned char *)(v17 + 48) = v15;
        v10 += 32;
        --v9;
      }
      while (v9);
      a1 = v50;
    }
    sub_10001C2EC(a1);
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_100064FD0();
  sub_100019524(&qword_10030A390);
  if (sub_100064FB0())
  {
    uint64_t v7 = sub_100064B90(v58);
    swift_bridgeObjectRelease();
    sub_10001C2EC(a1);
    return v7;
  }
  sub_100064FD0();
  sub_10024FC80();
  sub_10024FCC0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v18 = sub_10024FD50();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v18)
  {
    sub_100064FD0();
    uint64_t v7 = sub_10024E700();
    sub_10001C2EC(a1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return v7;
  }
  uint64_t v48 = v3;
  uint64_t v49 = v2;
  uint64_t v50 = a1;
  char v47 = v6;
  uint64_t v19 = sub_10024FCC0();
  uint64_t v7 = sub_10024E510();
  swift_retain();
  uint64_t v20 = sub_10024F5B0();
  uint64_t v46 = v19;
  swift_release();
  sub_10024F740();
  if (!*((void *)&v61 + 1))
  {
LABEL_36:
    swift_release();
    sub_10001C2EC(v50);
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    return v7;
  }
  char v21 = v57;
  uint64_t v22 = v59;
  uint64_t v53 = (char *)&type metadata for Any + 8;
  uint64_t v52 = v20;
  int v51 = v57;
  while (1)
  {
    long long v58 = v60[0];
    v59[0] = v60[1];
    v59[1] = v61;
    long long v23 = v60[0];
    long long v56 = v60[0];
    sub_1000318C8((uint64_t)v22, (uint64_t)v21);
    if (*((void *)&v23 + 1)) {
      break;
    }
    sub_10001C2EC((uint64_t)v21);
LABEL_35:
    sub_100051BB4((uint64_t)&v58, &qword_10030BB58);
    sub_10024F740();
    if (!*((void *)&v61 + 1)) {
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRetain();
  sub_10001C2EC((uint64_t)v21);
  sub_1000318C8((uint64_t)v22, (uint64_t)v55);
  sub_100019524((uint64_t *)&unk_100319510);
  swift_dynamicCast();
  if (!v57[1])
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  sub_100051BB4((uint64_t)&v56, (uint64_t *)&unk_100319510);
  uint64_t v24 = v22;
  sub_1000318C8((uint64_t)v22, (uint64_t)v21);
  uint64_t v25 = sub_1000644F8(v21);
  uint64_t v27 = v26;
  LODWORD(v54) = v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v56 = v7;
  unint64_t v30 = sub_10011ED00();
  uint64_t v32 = *(void *)(v7 + 16);
  BOOL v33 = (v31 & 1) == 0;
  Swift::Int v34 = v32 + v33;
  if (!__OFADD__(v32, v33))
  {
    unint64_t v35 = v30;
    char v36 = v31;
    sub_100019524(&qword_10030BB60);
    BOOL v37 = sub_10024F630(isUniquelyReferenced_nonNull_native, v34);
    uint64_t v22 = v24;
    if (v37)
    {
      unint64_t v38 = sub_10011ED00();
      if ((v36 & 1) != (v39 & 1)) {
        goto LABEL_40;
      }
      unint64_t v35 = v38;
    }
    uint64_t v7 = v56;
    if (v36)
    {
      uint64_t v40 = *(void *)(v56 + 56) + 24 * v35;
      sub_100064DC4(*(void *)v40, *(void *)(v40 + 8), *(unsigned char *)(v40 + 16));
      *(void *)uint64_t v40 = v25;
      *(void *)(v40 + 8) = v27;
      *(unsigned char *)(v40 + 16) = v54;
    }
    else
    {
      *(void *)(v56 + 8 * (v35 >> 6) + 64) |= 1 << v35;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v35) = v23;
      uint64_t v41 = *(void *)(v7 + 56) + 24 * v35;
      *(void *)uint64_t v41 = v25;
      *(void *)(v41 + 8) = v27;
      *(unsigned char *)(v41 + 16) = v54;
      uint64_t v42 = *(void *)(v7 + 16);
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_39;
      }
      *(void *)(v7 + 16) = v44;
      swift_bridgeObjectRetain();
    }
    char v21 = v51;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = sub_10024FB70();
  __break(1u);
  return result;
}

uint64_t sub_100064B90(uint64_t a1)
{
  sub_100019524(&qword_10030BB68);
  uint64_t result = sub_10024F700();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v34 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v29 = v6;
  int64_t v30 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v31 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_1000318C8(*(void *)(v34 + 56) + 32 * i, (uint64_t)v33);
    sub_1000318C8((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000644F8(v32);
    uint64_t v21 = v20;
    char v23 = v22;
    uint64_t result = sub_10001C2EC((uint64_t)v33);
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v24 = (void *)(v3[6] + 16 * i);
    *uint64_t v24 = v18;
    v24[1] = v17;
    uint64_t v25 = v3[7] + 24 * i;
    *(void *)uint64_t v25 = v19;
    *(void *)(v25 + 8) = v21;
    *(unsigned char *)(v25 + 16) = v23;
    uint64_t v26 = v3[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v28;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v30) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v30) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v30) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v30) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v30) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100064DC4(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3 || a3 == 3 || a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100064DF0(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3 || a3 == 3 || a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s5ValueOwxx(uint64_t a1)
{
  return sub_100064DC4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100064DF0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s5ValueOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100064DF0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100064DC4(v6, v7, v8);
  return a1;
}

uint64_t _s5ValueOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100064DC4(v4, v5, v6);
  return a1;
}

uint64_t _s5ValueOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s5ValueOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100064F98(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s5ValueOMa()
{
  return &_s5ValueON;
}

uint64_t sub_100064FB0()
{
  return swift_dynamicCast();
}

uint64_t sub_100064FD0()
{
  return sub_1000318C8(v0, v1 - 144);
}

uint64_t sub_100064FE8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  sub_10024F330(24);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  sub_10024E800(v9);
  v10._countAndFlagsBits = 0x3D6469623FLL;
  v10._object = (void *)0xE500000000000000;
  sub_10024E800(v10);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  sub_10024E800(v11);
  return 0x74694B65726F7453;
}

uint64_t sub_1000650A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100019524(&qword_10030BC38);
  __chkstk_darwin(v5 - 8, v6);
  char v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OctaneAsset();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100065878(a1);
  uint64_t v13 = sub_100205458(a1);
  if (!v14)
  {
    unsigned int v28 = HTTPVersion.init(major:minor:)(1, 1);
    Swift::UInt16 v22 = v28;
    unsigned int v23 = HIWORD(v28);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    unint64_t v25 = 0;
    long long v26 = 0uLL;
    *(_OWORD *)(result + 16) = 0u;
    uint64_t v27 = 21;
    goto LABEL_5;
  }
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  sub_10001C2A8((void *)(v2 + 48), *(void *)(v2 + 72));
  sub_10008A5FC(v19, v20);
  sub_1000FECA4(v17, v18, (uint64_t)v8);
  swift_release();
  if (sub_10001FA0C((uint64_t)v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006597C((uint64_t)v8);
    unsigned int v21 = HTTPVersion.init(major:minor:)(1, 1);
    Swift::UInt16 v22 = v21;
    unsigned int v23 = HIWORD(v21);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    unint64_t v25 = 0;
    long long v26 = 0uLL;
    *(_OWORD *)(result + 16) = 0u;
    uint64_t v27 = 25;
LABEL_5:
    *(void *)(result + 32) = v27;
    *(_WORD *)(result + 40) = v22;
    *(_WORD *)(result + 42) = v23;
    char v29 = 2;
    int64_t v30 = _swiftEmptyArrayStorage;
    long long v31 = 0uLL;
    goto LABEL_9;
  }
  sub_1000659DC((uint64_t)v8, (uint64_t)v12);
  if (qword_100308D00 != -1) {
    swift_once();
  }
  uint64_t v32 = (os_unfair_lock_s *)*((void *)off_10030BD50 + 2);
  os_unfair_lock_lock(v32);
  sub_100065384((uint64_t)v33);
  os_unfair_lock_unlock(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100065A40((uint64_t)v12);
  uint64_t result = v33[0];
  int64_t v30 = (void *)v33[1];
  char v29 = v34;
  long long v26 = v35;
  long long v31 = v36;
  unint64_t v25 = v37 | ((unint64_t)(v38 | (v39 << 16)) << 32);
LABEL_9:
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v30;
  *(unsigned char *)(a2 + 16) = v29;
  *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v26;
  *(_OWORD *)(a2 + 40) = v31;
  *(_DWORD *)(a2 + 56) = v25;
  *(unsigned char *)(a2 + 62) = BYTE6(v25);
  *(_WORD *)(a2 + 60) = WORD2(v25);
  return result;
}

__n128 sub_100065384@<Q0>(uint64_t a1@<X8>)
{
  type metadata accessor for OctaneAsset();
  uint64_t v2 = sub_10024DD80(0);
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone((Class)NSData);
  id v6 = sub_1000FF504(v2, v4, 0);
  uint64_t v7 = sub_10024DF10();
  unint64_t v9 = v8;

  uint64_t v10 = sub_100080E04();
  char v12 = sub_1000CB840(v10, v11);
  if (v12 == 9)
  {
    sub_10003F808(v7, v9);
    unsigned int v13 = HTTPVersion.init(major:minor:)(1, 1);
    Swift::UInt16 v14 = v13;
    unsigned int v15 = HIWORD(v13);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v16 + 32) = 36;
    *(_WORD *)(v16 + 40) = v14;
    *(_WORD *)(v16 + 42) = v15;
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
    *(unsigned char *)(a1 + 16) = 2;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 55) = 0;
  }
  else
  {
    unint64_t v18 = sub_1000CBEC4(v12);
    uint64_t v20 = v19;
    sub_1000473AC(v7, v9);
    sub_1000CBAF8(v7, v9, v18, v20, (uint64_t)&v30);
    __n128 v29 = v30;
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    int v23 = v33;
    __int16 v24 = v34;
    char v25 = v35;
    sub_10003F808(v7, v9);
    unsigned int v26 = HTTPVersion.init(major:minor:)(1, 1);
    LOWORD(v18) = v26;
    unsigned int v27 = HIWORD(v26);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v28 + 32) = 3;
    *(_WORD *)(v28 + 40) = v18;
    *(_WORD *)(v28 + 42) = v27;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
    *(unsigned char *)(a1 + 16) = 2;
    __n128 result = v29;
    *(__n128 *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
    *(void *)(a1 + 40) = v21;
    *(void *)(a1 + 48) = v22;
    *(unsigned char *)(a1 + 62) = v25;
    *(_WORD *)(a1 + 60) = v24;
    *(_DWORD *)(a1 + 56) = v23;
  }
  return result;
}

uint64_t type metadata accessor for AssetRoute()
{
  return self;
}

uint64_t *sub_100065878(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  sub_100065924(*a1, a1[1]);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100065938(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100065924(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100065938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10006597C(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030BC38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000659DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OctaneAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100065A40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OctaneAsset();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100065A9C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000C2720(0xD000000000000012, 0x800000010027B7F0, 1819112552, 0xE400000000000000);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_100021534(v3);
  }
  sub_10002158C(v1);
  return v2;
}

void sub_100065B40(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)v2;
  LODWORD(v2) = a1;
  uint64_t v6 = sub_100212134();
  uint64_t v7 = sub_100161540(7368801, 0xE300000000000000, v6);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    sub_100022D68();
    sub_10006711C();
    uint64_t v21 = sub_100022D50();
    uint64_t v6 = 0;
    uint64_t v13 = 0;
    long long v22 = 0uLL;
    int v23 = _swiftEmptyArrayStorage;
    uint64_t v24 = 21;
LABEL_74:
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v21 + 32) = v24;
    *(_DWORD *)(v21 + 40) = v2;
    *(void *)a2 = v21;
    *(void *)(a2 + 8) = v23;
    *(unsigned char *)(a2 + 16) = 2;
    *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
    *(void *)(a2 + 40) = v6;
    *(void *)(a2 + 48) = v13;
    *(unsigned char *)(a2 + 62) = BYTE6(v9);
    *(_WORD *)(a2 + 60) = WORD2(v9);
    *(_DWORD *)(a2 + 56) = v9;
    return;
  }
  int v78 = v4;
  uint64_t v75 = v4 + 6;
  sub_10001C2A8(v4 + 6, v4[9]);
  uint64_t v10 = sub_10008A5FC(v7, (uint64_t)v9);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 + 56);
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0) {
      uint64_t v6 = *(void *)(v10 + 56);
    }
    else {
      uint64_t v6 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10024F6F0();
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v64 = a2;
  uint64_t v77 = v7;
  if (v13)
  {
    uint64_t v87 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000389BC();
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_76;
    }
    int v66 = v9;
    uint64_t v14 = 0;
    unsigned int v15 = (void *)v87;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        uint64_t v16 = sub_10024F380();
      }
      else
      {
        uint64_t v16 = *(void *)(v12 + 8 * v14 + 32);
        swift_retain();
      }
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v18 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v87 = (uint64_t)v15;
      unint64_t v19 = v15[2];
      if (v19 >= v15[3] >> 1)
      {
        sub_1000389BC();
        unsigned int v15 = (void *)v87;
      }
      ++v14;
      long long v15[2] = v19 + 1;
      uint64_t v20 = &v15[2 * v19];
      _OWORD v20[4] = v17;
      void v20[5] = v18;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    unint64_t v9 = v66;
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned int v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *sub_10001C2A8(v78 + 11, v78[14]);
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_1000FFCF4((uint64_t)v15, v6);
  swift_bridgeObjectRelease();
  uint64_t v12 = v3 >> 62;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_10024F6F0();
    swift_bridgeObjectRelease();
    if (v6 != 1) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    if (!sub_10024F6F0())
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  else
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = v3 & 0xC000000000000001;
  sub_10014ED88(0, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) == 0)
  {
    id v25 = *(id *)(v3 + 32);
    goto LABEL_21;
  }
LABEL_76:
  id v25 = (id)sub_10024F380();
LABEL_21:
  unsigned int v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000D939C(15);
  uint64_t v13 = v28;

  if (v13)
  {
    swift_bridgeObjectRelease();
    sub_100019524(&qword_100309300);
    int v23 = (void *)swift_allocObject();
    *((_OWORD *)v23 + 1) = xmmword_100255FB0;
    v23[4] = 0x6E6F697461636F4CLL;
    v23[5] = 0xE800000000000000;
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    unint64_t v2 = (unint64_t)&v87;
    sub_10024F330(24);
    swift_bridgeObjectRelease();
    uint64_t v87 = 0x697263736275732FLL;
    unint64_t v88 = 0xEF2F736E6F697470;
    v96._countAndFlagsBits = v27;
    v96._object = (void *)v13;
    sub_10024E800(v96);
    swift_bridgeObjectRelease();
    v97._countAndFlagsBits = 0x3D7070613FLL;
    v97._object = (void *)0xE500000000000000;
    sub_10024E800(v97);
    v98._countAndFlagsBits = v77;
    v98._object = v9;
    sub_10024E800(v98);
    swift_bridgeObjectRelease();
    unint64_t v29 = v88;
    void v23[6] = v87;
    v23[7] = v29;
    swift_release();
    sub_100022D68();
    sub_10006711C();
    sub_100022D50();
    *(double *)&long long v22 = sub_100067108();
    uint64_t v24 = 16;
LABEL_61:
    a2 = v64;
    goto LABEL_74;
  }
LABEL_30:
  LODWORD(v2) = v78;
  __n128 v30 = sub_100065A9C();
  if (!v30)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100022D68();
    sub_10006711C();
    sub_100022D50();
    *(double *)&long long v22 = sub_100067108();
    int v23 = _swiftEmptyArrayStorage;
    uint64_t v24 = 49;
    goto LABEL_61;
  }
  a2 = v64;
  Swift::Int v62 = v31;
  uint64_t v63 = (uint64_t)v30;
  if (!v12)
  {
    uint64_t v32 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_33;
    }
LABEL_63:
    swift_bridgeObjectRelease();
    uint64_t v76 = _swiftEmptyArrayStorage;
    uint64_t v69 = _swiftEmptyArrayStorage;
LABEL_64:
    type metadata accessor for AppIconRoute();
    unint64_t v50 = sub_10006ACC8(v77, v9);
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    if (*(void *)(v11 + 24))
    {
      uint64_t v53 = *(void *)(v11 + 16);
      unint64_t v54 = *(void *)(v11 + 24);
    }
    else
    {
      unint64_t v54 = 0xE800000000000000;
      uint64_t v53 = 0x656D614E20707041;
    }
    if (v76[2])
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v76 = 0;
    }
    if (v69[2])
    {
      unint64_t v55 = v69;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v55 = 0;
    }
    uint64_t v83 = &unk_1002DE208;
    long long v56 = (void *)swift_allocObject();
    *(void *)&long long v81 = v56;
    v56[2] = v50;
    v56[3] = v52;
    v56[4] = v53;
    v56[5] = v54;
    v56[6] = v76;
    v56[7] = v55;
    uint64_t v57 = sub_1000C2DBC((uint64_t)&v81, v63, v62);
    unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    sub_10001C2EC((uint64_t)&v81);
    sub_1000CB5C8(v57, v59, 1, (uint64_t)&v81);
    long long v79 = v81;
    uint64_t v6 = v82;
    uint64_t v13 = (uint64_t)v83;
    unint64_t v2 = v84;
    uint64_t v60 = v85;
    uint64_t v61 = v86;
    swift_release();
    unint64_t v9 = (void *)(v2 | (v60 << 32) | (v61 << 48));
    sub_100022D68();
    sub_10006711C();
    uint64_t v21 = sub_100022D50();
    long long v22 = v79;
    int v23 = _swiftEmptyArrayStorage;
    uint64_t v24 = 3;
    goto LABEL_74;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_10024F6F0();
  swift_bridgeObjectRelease();
  if (!v32) {
    goto LABEL_63;
  }
LABEL_33:
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v76 = _swiftEmptyArrayStorage;
    uint64_t v68 = v32;
    uint64_t v69 = _swiftEmptyArrayStorage;
    uint64_t v65 = v11;
    uint64_t v67 = v9;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v34 = (id)sub_10024F380();
      }
      else {
        id v34 = *(id *)(v3 + 8 * v33 + 32);
      }
      char v35 = v34;
      uint64_t v36 = sub_1000D939C(15);
      if (v37 && (unsigned __int16 v38 = (void *)sub_1000FEBDC(v36, v37), swift_bridgeObjectRelease(), v38))
      {
        sub_10001C2A8(v75, v78[9]);
        uint64_t v39 = sub_10008A7F0();
        sub_10006634C(v35, v11, v39, v38, (uint64_t)v80);
        swift_release();
        sub_100066A9C((uint64_t)v80, (uint64_t)&v87);
        unint64_t v40 = v88;
        if (v88)
        {
          uint64_t v41 = v87;
          uint64_t v70 = v89;
          uint64_t v71 = v90;
          uint64_t v42 = v92;
          uint64_t v74 = v93;
          uint64_t v72 = v91;
          uint64_t v73 = v94;
          if (v95)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              BOOL v43 = v69;
            }
            else
            {
              sub_100067168();
              BOOL v43 = v46;
            }
            unint64_t v44 = v43[2];
            if (v44 >= v43[3] >> 1)
            {
              sub_100067134();
              BOOL v43 = v47;
            }
            v43[2] = v44 + 1;
            uint64_t v69 = v43;
          }
          else
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              BOOL v43 = v76;
            }
            else
            {
              sub_100067168();
              BOOL v43 = v48;
            }
            unint64_t v44 = v43[2];
            if (v44 >= v43[3] >> 1)
            {
              sub_100067134();
              BOOL v43 = v49;
            }
            v43[2] = v44 + 1;
            uint64_t v76 = v43;
          }
          char v45 = &v43[8 * v44];
          v45[4] = v41;
          v45[5] = v40;
          v45[6] = v70;
          v45[7] = v71;
          v45[8] = v72;
          v45[9] = v42;
          v45[10] = v74;
          v45[11] = v73;

          swift_release();
          uint64_t v11 = v65;
          unint64_t v9 = v67;
        }
        else
        {
          swift_release();
        }
        uint64_t v32 = v68;
      }
      else
      {
      }
      ++v33;
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    a2 = v64;
    goto LABEL_64;
  }
  __break(1u);
}

uint64_t sub_10006634C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v9 = sub_100019524((uint64_t *)&unk_10030FD70);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v75 - v15;
  uint64_t v17 = sub_10024E030();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v83 = (char *)v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  id v25 = (char *)v75 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)v75 - v27;
  id v85 = a1;
  sub_1000D9478(4);
  if (v29)
  {
    sub_1000195B4((uint64_t)v16, 1, 1, v17);
    goto LABEL_18;
  }
  sub_10024DF60();
  sub_1000195B4((uint64_t)v16, 0, 1, v17);
  if (sub_10001FA0C((uint64_t)v16, 1, v17) == 1)
  {
LABEL_18:
    uint64_t result = sub_100058654((uint64_t)v16);
    goto LABEL_19;
  }
  __n128 v30 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v82 = v28;
  v75[0] = v30;
  v75[1] = v18 + 32;
  v30(v28, v16, v17);
  unint64_t v31 = a4[7];
  uint64_t v78 = a3;
  long long v79 = a4;
  uint64_t v80 = v17;
  uint64_t v81 = v18;
  uint64_t v76 = v25;
  uint64_t v77 = v13;
  if (v31 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    id v74 = v85;
    uint64_t v32 = sub_10024F6F0();
    if (v32) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  id v33 = v85;
  if (!v32)
  {
LABEL_16:

    swift_bridgeObjectRelease_n();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v82, v80);
LABEL_19:
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    char v51 = 0;
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v34 = 4;
  while (1)
  {
    if ((v31 & 0xC000000000000001) != 0)
    {
      uint64_t v35 = sub_10024F380();
    }
    else
    {
      uint64_t v35 = *(void *)(v31 + 8 * v34);
      swift_retain();
    }
    uint64_t v36 = v34 - 3;
    if (__OFADD__(v34 - 4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v38 = *(void *)(v35 + 80);
    uint64_t v37 = *(void *)(v35 + 88);
    swift_bridgeObjectRetain();
    if (v38 == sub_1000D427C() && v37 == v39)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    char v41 = sub_10024FA60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41) {
      break;
    }
    swift_release();
    ++v34;
    if (v36 == v32) {
      goto LABEL_16;
    }
  }

LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = v79;
  uint64_t v53 = v80;
  if (qword_100308CE8 != -1) {
    swift_once();
  }
  unint64_t v54 = (void *)qword_10030B088;
  Class isa = sub_10024DFB0().super.isa;
  id v56 = [v54 stringFromDate:isa];

  uint64_t v57 = sub_10024E6B0();
  unint64_t v59 = v58;

  if (!sub_1000DA45C())
  {
    sub_1000D9478(3);
    if (v61)
    {
      uint64_t v62 = (uint64_t)v77;
      sub_1000195B4((uint64_t)v77, 1, 1, v53);
    }
    else
    {
      uint64_t v62 = (uint64_t)v77;
      sub_10024DF60();
      sub_1000195B4(v62, 0, 1, v53);
      if (sub_10001FA0C(v62, 1, v53) != 1)
      {
        swift_bridgeObjectRelease();
        ((void (*)(void))v75[0])();
        unint64_t v86 = 0x64656C65636E6143;
        unint64_t v87 = 0xE900000000000020;
        uint64_t v63 = (void *)qword_10030B088;
        Class v64 = sub_10024DFB0().super.isa;
        id v65 = [v63 stringFromDate:v64];

        uint64_t v66 = sub_10024E6B0();
        uint64_t v68 = v67;

        v88._countAndFlagsBits = v66;
        v88._object = v68;
        sub_10024E800(v88);
        swift_bridgeObjectRelease();
        unint64_t v49 = v86;
        unint64_t v50 = v87;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v76, v53);
        goto LABEL_35;
      }
    }
    sub_100058654(v62);
    uint64_t v69 = v83;
    sub_10024E020();
    char v70 = sub_10024DFC0();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v69, v53);
    if (v70)
    {
      v60._countAndFlagsBits = sub_100067154(0x2073657269707845);
      goto LABEL_27;
    }
    v89._countAndFlagsBits = sub_100067154(0x2064657269707845);
    v89._object = v59;
    sub_10024E800(v89);
    swift_bridgeObjectRelease();
    unint64_t v49 = v86;
    unint64_t v50 = v87;
LABEL_35:
    char v51 = 1;
    goto LABEL_36;
  }
  swift_release();
  unint64_t v86 = 0;
  unint64_t v87 = 0xE000000000000000;
  sub_10024F330(21);
  swift_bridgeObjectRelease();
  unint64_t v86 = 0xD000000000000013;
  unint64_t v87 = 0x800000010027B7D0;
  v60._countAndFlagsBits = v57;
LABEL_27:
  v60._object = v59;
  sub_10024E800(v60);
  swift_bridgeObjectRelease();
  char v51 = 0;
  unint64_t v49 = v86;
  unint64_t v50 = v87;
LABEL_36:
  unint64_t v71 = swift_bridgeObjectRetain();
  uint64_t v72 = sub_1000F072C(v71);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v53);
  if (v72)
  {
    uint64_t v47 = *(void *)(v72 + 32);
    uint64_t v48 = *(void *)(v72 + 40);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    uint64_t v47 = sub_10020F734();
    uint64_t v48 = v73;
  }
  swift_release();
  uint64_t v43 = v52[2];
  uint64_t v44 = v52[3];
  uint64_t v45 = v52[5];
  uint64_t v46 = v52[6];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
LABEL_20:
  *(void *)a5 = v43;
  *(void *)(a5 + 8) = v44;
  *(void *)(a5 + 16) = v45;
  *(void *)(a5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v46;
  *(void *)(a5 + 32) = v47;
  *(void *)(a5 + 40) = v48;
  *(void *)(a5 + 48) = v49;
  *(void *)(a5 + 56) = v50;
  *(unsigned char *)(a5 + 64) = v51;
  return result;
}

uint64_t type metadata accessor for SubscriptionsListUIRoute()
{
  return self;
}

uint64_t sub_100066A4C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100066A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030BD40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *sub_100066B04(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100066BD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.Section()
{
}

uint64_t destroy for ConfirmPurchaseEngagementUIRoute.ViewProperties()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmPurchaseEngagementUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmPurchaseEngagementUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.ViewProperties.Group()
{
}

uint64_t sub_100066E6C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_100066EB8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100066F18(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100066FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OctaneKeyPair(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OctaneKeyPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.ViewProperties()
{
}

unint64_t sub_1000670BC()
{
  unint64_t result = qword_10030BD48;
  if (!qword_10030BD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD48);
  }
  return result;
}

double sub_100067108()
{
  return 0.0;
}

uint64_t sub_10006711C()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void sub_100067134()
{
  sub_1000359B8();
}

uint64_t sub_100067154@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = 0xE800000000000000;
  return v1;
}

void sub_100067168()
{
  sub_1000359B8();
}

_DWORD *sub_100067188()
{
  type metadata accessor for UnfairLock();
  uint64_t v0 = swift_allocObject();
  unint64_t result = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = result;
  *unint64_t result = 0;
  off_10030BD50 = (_UNKNOWN *)v0;
  return result;
}

unint64_t sub_1000671D8(unint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = result;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)sub_10024F3E0();
      }
      unint64_t v8 = (unint64_t)sub_1001A4F70(v7, v4);
      LOBYTE(v6) = v9 & 1;
      goto LABEL_49;
    }
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_63;
      }
      if (v3 == 1) {
        goto LABEL_33;
      }
      sub_100067DD4();
      if (!v13 && v12) {
        goto LABEL_33;
      }
      unint64_t v8 = v16;
      if (v15 != 2)
      {
        sub_100067DD4();
        if (!v13 && v12) {
          goto LABEL_33;
        }
        unint64_t v8 = 10 * v8 + v18;
        if (v17 != 3)
        {
          while (1)
          {
            sub_100028C7C();
            if (!v13 && v12) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v8, v19)) {
              goto LABEL_33;
            }
            BOOL v12 = __CFADD__(10 * v8, v20);
            unint64_t v8 = 10 * v8 + v20;
            if (v12) {
              goto LABEL_33;
            }
            sub_100067DE4();
            if (v13) {
              goto LABEL_49;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1)
          {
            sub_100067DD4();
            if (v13 || !v12)
            {
              unint64_t v8 = 0;
              BOOL v12 = v11 == 0;
              unint64_t v14 = -(uint64_t)v11;
              if (!v12) {
                goto LABEL_34;
              }
              if (v10 == 2)
              {
                LOBYTE(v6) = 0;
                unint64_t v8 = v14;
                goto LABEL_49;
              }
              unsigned __int8 v25 = BYTE2(v6) - 48;
              if ((BYTE2(v6) - 48) <= 9u && is_mul_ok(v14, 0xAuLL))
              {
                unint64_t v26 = 10 * v14;
                unint64_t v8 = v26 - v25;
                if (v26 >= v25)
                {
                  if (v10 == 3) {
                    goto LABEL_48;
                  }
                  while (1)
                  {
                    sub_100028C7C();
                    if (!v13 && v12) {
                      break;
                    }
                    if (!is_mul_ok(v8, v27)) {
                      break;
                    }
                    BOOL v12 = 10 * v8 >= v28;
                    unint64_t v8 = 10 * v8 - v28;
                    if (!v12) {
                      break;
                    }
                    sub_100067DE4();
                    if (v13) {
                      goto LABEL_49;
                    }
                  }
                }
              }
            }
          }
LABEL_33:
          unint64_t v8 = 0;
LABEL_34:
          LOBYTE(v6) = 1;
          goto LABEL_49;
        }
        __break(1u);
LABEL_63:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_33;
      }
      unint64_t v8 = (result - 48);
      if (v3 != 1)
      {
        sub_100067DD4();
        if (!v13 && v12) {
          goto LABEL_33;
        }
        unint64_t v8 = 10 * v8 + v22;
        if (v21 != 2)
        {
          while (1)
          {
            sub_100028C7C();
            if (!v13 && v12) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v8, v23)) {
              goto LABEL_33;
            }
            BOOL v12 = __CFADD__(10 * v8, v24);
            unint64_t v8 = 10 * v8 + v24;
            if (v12) {
              goto LABEL_33;
            }
            sub_100067DE4();
            if (v13) {
              goto LABEL_49;
            }
          }
        }
      }
    }
LABEL_48:
    LOBYTE(v6) = 0;
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001A4FCC(v6, a2, 10);
  LOBYTE(v6) = v29;
  swift_bridgeObjectRelease();
LABEL_49:
  if (v6) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_100067480(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_10024FA60();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100067550(char a1)
{
  if (a1) {
    return 0x6E6F73616572;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100067578(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  uint64_t v6 = sub_100019524(&qword_10030BD70);
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  BOOL v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_100067AFC();
  sub_10024FD40();
  char v18 = 0;
  sub_10024F940();
  if (!v4)
  {
    char v17 = v15 & 1;
    char v16 = 1;
    sub_100067B94();
    sub_10024F980();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v6);
}

uint64_t sub_1000676DC(void *a1)
{
  sub_100019524(&qword_10030BD58);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  uint64_t v5 = a1[4];
  sub_10001C2A8(a1, a1[3]);
  sub_100067AFC();
  sub_10024FD20();
  if (v1)
  {
    sub_10001C2EC((uint64_t)a1);
  }
  else
  {
    uint64_t v5 = sub_10024F830();
    sub_100067B48();
    swift_bridgeObjectRetain();
    sub_10024F870();
    uint64_t v7 = sub_100067DF4();
    v8(v7);
    sub_10001C2EC((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_10006789C()
{
  return sub_100067550(*v0);
}

uint64_t sub_1000678A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100067480(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000678CC(uint64_t a1)
{
  unint64_t v2 = sub_100067AFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100067908(uint64_t a1)
{
  unint64_t v2 = sub_100067AFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100067944@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000676DC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_100067978(void *a1)
{
  return sub_100067578(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_10006799C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RefundRequestRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RefundRequestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RefundRequestRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RefundRequestRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestRequest()
{
  return &type metadata for RefundRequestRequest;
}

unint64_t sub_100067AFC()
{
  unint64_t result = qword_10030BD60;
  if (!qword_10030BD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD60);
  }
  return result;
}

unint64_t sub_100067B48()
{
  unint64_t result = qword_10030BD68;
  if (!qword_10030BD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD68);
  }
  return result;
}

unint64_t sub_100067B94()
{
  unint64_t result = qword_10030BD78;
  if (!qword_10030BD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD78);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RefundRequestRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100067CACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestRequest.CodingKeys()
{
  return &type metadata for RefundRequestRequest.CodingKeys;
}

unint64_t sub_100067CE8()
{
  unint64_t result = qword_10030BD80;
  if (!qword_10030BD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD80);
  }
  return result;
}

unint64_t sub_100067D38()
{
  unint64_t result = qword_10030BD88;
  if (!qword_10030BD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD88);
  }
  return result;
}

unint64_t sub_100067D88()
{
  unint64_t result = qword_10030BD90;
  if (!qword_10030BD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BD90);
  }
  return result;
}

uint64_t sub_100067DF4()
{
  return v0;
}

void sub_100067E0C(uint64_t a1)
{
  __int16 v3 = v1;
  uint64_t v4 = sub_100161540(0x444970756F7267, 0xE700000000000000, *(void *)(a1 + 96));
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = sub_100212134();
  __int16 v2 = v8;
  uint64_t v9 = sub_100161540(7368801, 0xE300000000000000, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_100022D68();
    sub_10006922C();
    uint64_t v12 = sub_100022D50();
    v24.n128_f64[0] = sub_100069318(v12);
    goto LABEL_6;
  }
  __int16 v3 = 0;
  sub_100067FCC(v6, v7, v9, v11, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10021832C();
  sub_100069294();
  sub_10006922C();
  uint64_t v13 = sub_100022D50();
  __n128 v24 = sub_100069340(v13, v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  *(void *)(v22 + 32) = v23;
  *(_WORD *)(v22 + 40) = v3;
  *(_WORD *)(v22 + 42) = v2;
  sub_100069248((uint64_t)_swiftEmptyArrayStorage, v24);
}

void sub_100067FCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v112 = a5;
  uint64_t v110 = sub_10024DBF0();
  sub_10001B550();
  uint64_t v109 = v11;
  __chkstk_darwin(v12, v13);
  uint64_t v108 = &v99[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_100019524((uint64_t *)&unk_10030FD70);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = &v99[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v123 = sub_10024E030();
  sub_10001B550();
  uint64_t v115 = v19;
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v111 = &v99[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22, v24);
  uint64_t v114 = &v99[-v25];
  unint64_t v26 = sub_10001C2A8((void *)(v5 + 88), *(void *)(v5 + 112));
  sub_100019524(&qword_1003090E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100255FB0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v28 = *v26;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v113 = a3;
  unint64_t v29 = (unint64_t)sub_1000FFCF4(inited, v28);
  swift_setDeallocating();
  sub_10020BB20();
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v96 = sub_10024F6F0();
    swift_bridgeObjectRelease();
    if (v96)
    {
LABEL_3:
      sub_10014ED88(0, (v29 & 0xC000000000000001) == 0, v29);
      if ((v29 & 0xC000000000000001) != 0) {
        id v30 = (id)sub_10024F380();
      }
      else {
        id v30 = *(id *)(v29 + 32);
      }
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      sub_1000D9478(4);
      if (v32)
      {
        sub_1000195B4((uint64_t)v18, 1, 1, v123);
      }
      else
      {
        sub_10024DF60();
        uint64_t v33 = v123;
        sub_1000195B4((uint64_t)v18, 0, 1, v123);
        if (sub_10001FA0C((uint64_t)v18, 1, v33) != 1)
        {
          uint64_t v107 = a4;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v115 + 32))(v114, v18, v33);
          uint64_t v106 = (void *)(v6 + 48);
          sub_100027788(v6 + 48, (uint64_t)&v118);
          sub_10001C2A8(&v118, v121);
          uint64_t v34 = (uint64_t)sub_1000D563C();
          if (!v35) {
            uint64_t v34 = sub_1000D427C();
          }
          uint64_t v36 = v34;
          uint64_t v37 = v35;
          sub_10008A5FC(v113, (uint64_t)v107);
          uint64_t v38 = sub_1000FE9DC(v36, v37);
          swift_bridgeObjectRelease();
          swift_release();
          if (!v38)
          {
            sub_10001C2EC((uint64_t)&v118);
            sub_100022A5C();
            uint64_t v53 = sub_1000290D0();
            sub_100069274(v53, v54);

            (*(void (**)(unsigned char *, uint64_t))(v115 + 8))(v114, v123);
            return;
          }
          sub_10001C2EC((uint64_t)&v118);
          uint64_t v39 = v106;
          sub_10001C2A8(v106, *(void *)(v6 + 72));
          uint64_t v40 = sub_10008A7F0();
          sub_10001C2A8(v39, *(void *)(v6 + 72));
          sub_10008AFE8();
          swift_bridgeObjectRetain();
          uint64_t v105 = v40;
          uint64_t v104 = sub_10005148C();
          uint64_t v103 = v41;
          sub_10001DB0C((uint64_t)v122);
          swift_bridgeObjectRelease();
          uint64_t v42 = *(void *)(v38 + 176);
          uint64_t v106 = (void *)v38;
          char v43 = *(unsigned char *)(v38 + 184);
          id v44 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
          [v44 setUnitsStyle:3];
          [v44 setAllowedUnits:4124];
          uint64_t v45 = v108;
          sub_100213A0C(v42, v43);
          Class isa = sub_10024DBC0().super.isa;
          (*(void (**)(unsigned char *, uint64_t))(v109 + 8))(v45, v110);
          id v47 = [v44 stringFromDateComponents:isa];

          if (v47)
          {
            uint64_t v48 = sub_10024E6B0();
            unint64_t v50 = v49;
          }
          else
          {
            uint64_t v48 = 0;
            unint64_t v50 = 0xE000000000000000;
          }
          unint64_t v55 = v111;
          if (v42 == 1)
          {
            uint64_t v118 = v48;
            uint64_t v119 = (void *)v50;
            uint64_t v116 = 32;
            unint64_t v117 = 0xE100000000000000;
            sub_10001DAC0();
            uint64_t v56 = sub_10024F130();
            swift_bridgeObjectRelease();
            uint64_t v118 = sub_10006BFC0(1, v56);
            uint64_t v119 = v57;
            uint64_t v120 = v58;
            uint64_t v121 = v59;
            sub_100019524(&qword_10030BF68);
            sub_1000691D8();
            sub_10024E5C0();
            swift_unknownObjectRelease();
          }

          sub_10024E010();
          char v60 = sub_1000D5964();
          char v61 = *(void (**)(unsigned char *, uint64_t))(v115 + 8);
          v115 += 8;
          v61(v55, v123);
          if (v60)
          {
            uint64_t v111 = sub_1000D563C();
            uint64_t v110 = v62;
          }
          else
          {
            uint64_t v111 = 0;
            uint64_t v110 = 0;
          }
          unint64_t v63 = swift_bridgeObjectRetain();
          uint64_t v64 = sub_1000F072C(v63);
          swift_bridgeObjectRelease();
          if (v64)
          {
            uint64_t v65 = *(void *)(v64 + 32);
            uint64_t v108 = *(unsigned char **)(v64 + 40);
            swift_bridgeObjectRetain();
            swift_release();
          }
          else
          {
            uint64_t v65 = sub_10020F734();
            uint64_t v108 = v66;
          }
          uint64_t v118 = v104;
          uint64_t v119 = v103;
          v124._countAndFlagsBits = 47;
          v124._object = (void *)0xE100000000000000;
          sub_10024E800(v124);
          uint64_t v67 = sub_10024E710();
          uint64_t v69 = v68;
          swift_bridgeObjectRelease();
          v125._countAndFlagsBits = v67;
          v125._object = v69;
          sub_10024E800(v125);
          swift_bridgeObjectRelease();
          uint64_t v104 = v118;
          uint64_t v103 = v119;
          if (qword_100308CE8 != -1) {
            swift_once();
          }
          char v70 = (void *)qword_10030B088;
          Class v71 = sub_10024DFB0().super.isa;
          id v72 = [v70 stringFromDate:v71];

          uint64_t v102 = sub_10024E6B0();
          uint64_t v101 = v73;

          uint64_t v118 = 0;
          uint64_t v119 = (void *)0xE000000000000000;
          sub_10024F330(40);
          swift_bridgeObjectRelease();
          uint64_t v118 = 0x797469746E617571;
          uint64_t v119 = (void *)0xEF3D64696226313DLL;
          v126._countAndFlagsBits = v113;
          v126._object = v107;
          sub_10024E800(v126);
          v127._object = (void *)0x800000010027B890;
          v127._countAndFlagsBits = 0xD000000000000017;
          sub_10024E800(v127);
          uint64_t v113 = v118;
          uint64_t v107 = v119;
          id v74 = sub_1000D563C();
          uint64_t v76 = v75;
          uint64_t v77 = sub_1000D427C();
          uint64_t v109 = v65;
          if (v76)
          {
            long long v79 = v61;
            if (v74 == (void *)v77 && v76 == v78)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              int v100 = 0;
              goto LABEL_35;
            }
            int v81 = sub_10024FA60();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int v82 = v81 ^ 1;
          }
          else
          {
            long long v79 = v61;
            swift_bridgeObjectRelease();
            int v82 = 1;
          }
          int v100 = v82;
LABEL_35:
          sub_10024E020();
          uint64_t v83 = v114;
          char v84 = sub_10024DFD0();
          uint64_t v85 = v123;
          unint64_t v86 = v79;
          v79(v55, v123);
          uint64_t v118 = sub_1000D5AE4();
          uint64_t v87 = sub_10024F9E0();
          uint64_t v89 = v88;
          swift_release();
          swift_release();

          v86(v83, v85);
          uint64_t v90 = v112;
          uint64_t v91 = v110;
          *uint64_t v112 = v111;
          v90[1] = v91;
          uint64_t v92 = v108;
          v90[2] = v109;
          v90[3] = v92;
          uint64_t v93 = v103;
          v90[4] = v104;
          v90[5] = v93;
          uint64_t v94 = v101;
          v90[6] = v102;
          v90[7] = v94;
          char v95 = v107;
          v90[8] = v113;
          v90[9] = v95;
          *((unsigned char *)v90 + 80) = v100 & 1;
          *((unsigned char *)v90 + 81) = v84 & 1;
          v90[11] = v87;
          v90[12] = v89;
          return;
        }
      }
      sub_100058654((uint64_t)v18);
      sub_100022A5C();
      uint64_t v51 = sub_1000290D0();
      sub_100069274(v51, v52);

      return;
    }
  }
  else if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  sub_100022A5C();
  uint64_t v97 = sub_1000290D0();
  sub_100069274(v97, v98);
}

uint64_t type metadata accessor for EditSubscriptionHelperRoute()
{
  return self;
}

void sub_100068A78()
{
  __int16 v2 = v0;
  uint64_t v3 = sub_100216F50();
  if (v4)
  {
    __int16 v2 = 0;
    sub_100068BCC(v3, v4, v18);
    swift_bridgeObjectRelease();
    sub_10021832C();
    sub_100069294();
    sub_10006922C();
    uint64_t v6 = sub_100022D50();
    __n128 v17 = sub_100069340(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    sub_100022D68();
    sub_10006922C();
    uint64_t v5 = sub_100022D50();
    v17.n128_f64[0] = sub_100069318(v5);
  }
  *(void *)(v15 + 32) = v16;
  *(_WORD *)(v15 + 40) = v2;
  *(_WORD *)(v15 + 42) = v1;
  sub_100069248((uint64_t)_swiftEmptyArrayStorage, v17);
}

void sub_100068BCC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = HIBYTE(a2) & 0xF;
  uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13) {
    goto LABEL_44;
  }
  uint64_t v14 = v4;
  uint64_t v15 = v3;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1001A4FCC(a1, a2, 10);
    LOBYTE(v5) = v46;
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    if (a1 == 43)
    {
      if (v11)
      {
        if (v11 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          if (v11 == 2) {
            goto LABEL_35;
          }
          if ((BYTE2(a1) - 48) <= 9u)
          {
            unint64_t v22 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
            if (v11 != 3)
            {
              while (1)
              {
                sub_100028C7C();
                if (!v25 && v20) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v22, v23)) {
                  goto LABEL_33;
                }
                BOOL v20 = __CFADD__(10 * v22, v24);
                unint64_t v22 = 10 * v22 + v24;
                if (v20) {
                  goto LABEL_33;
                }
                sub_100069330();
                if (v25) {
                  goto LABEL_36;
                }
              }
            }
            goto LABEL_35;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v11 && (a1 - 48) <= 9u)
        {
          if (v11 == 1) {
            goto LABEL_35;
          }
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v38 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
            if (v11 != 2)
            {
              while (1)
              {
                sub_100028C7C();
                if (!v25 && v20) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v38, v39)) {
                  goto LABEL_33;
                }
                BOOL v20 = __CFADD__(10 * v38, v40);
                unint64_t v38 = 10 * v38 + v40;
                if (v20) {
                  goto LABEL_33;
                }
                sub_100069330();
                if (v25) {
                  goto LABEL_36;
                }
              }
            }
            goto LABEL_35;
          }
        }
LABEL_33:
        LOBYTE(v5) = 1;
        goto LABEL_36;
      }
      if (v11)
      {
        if (v11 != 1)
        {
          unsigned __int8 v19 = BYTE1(a1) - 48;
          if ((BYTE1(a1) - 48) <= 9u)
          {
            BOOL v20 = v19 == 0;
            unint64_t v21 = -(uint64_t)v19;
            if (v20)
            {
              if (v11 == 2)
              {
                LOBYTE(v5) = 0;
                goto LABEL_36;
              }
              unsigned __int8 v41 = BYTE2(a1) - 48;
              if ((BYTE2(a1) - 48) <= 9u && is_mul_ok(v21, 0xAuLL))
              {
                unint64_t v42 = 10 * v21;
                unint64_t v43 = v42 - v41;
                if (v42 >= v41)
                {
                  if (v11 != 3)
                  {
                    while (1)
                    {
                      sub_100028C7C();
                      if (!v25 && v20) {
                        goto LABEL_33;
                      }
                      if (!is_mul_ok(v43, v44)) {
                        goto LABEL_33;
                      }
                      BOOL v20 = 10 * v43 >= v45;
                      unint64_t v43 = 10 * v43 - v45;
                      if (!v20) {
                        goto LABEL_33;
                      }
                      sub_100069330();
                      if (v25) {
                        goto LABEL_36;
                      }
                    }
                  }
LABEL_35:
                  LOBYTE(v5) = 0;
                  goto LABEL_36;
                }
              }
            }
          }
        }
        goto LABEL_33;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_78;
  }
  if ((a1 & 0x1000000000000000) != 0) {
    __n128 v17 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    __n128 v17 = (unsigned __int8 *)sub_10024F3E0();
  }
  sub_1001A4F70(v17, v12);
  LOBYTE(v5) = v18 & 1;
LABEL_36:
  if ((v5 & 1) != 0
    || (uint64_t v8 = (void *)(v3 + 88), sub_10001C2A8((void *)(v3 + 88), *(void *)(v3 + 112)),
                                  (uint64_t v26 = sub_1000A0FFC()) == 0))
  {
LABEL_44:
    sub_100022A5C();
    uint64_t v35 = sub_1000290D0();
    sub_100069274(v35, v36);
    return;
  }
  uint64_t v5 = (void *)v26;
  uint64_t v27 = sub_1000D939C(15);
  if (!v28)
  {
    sub_100022A5C();
    sub_1000290D0();
    *uint64_t v37 = 0;
    v37[1] = 0;
    v37[2] = 21;
    swift_willThrow();

    return;
  }
  uint64_t v7 = v27;
  uint64_t v6 = v28;
  __dst = a3;
  unint64_t v29 = sub_10001C2A8((void *)(v3 + 88), *(void *)(v3 + 112));
  sub_100019524(&qword_1003090E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100255FB0;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v6;
  swift_bridgeObjectRetain();
  sub_1000D428C();
  uint64_t v31 = *v29;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v32 = (unint64_t)sub_1000FFCF4(inited, v31);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10020BB20();
  if (!(v32 >> 62))
  {
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_41;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    id v34 = v5;
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_10024F6F0();
  swift_bridgeObjectRelease();
  if (!v47) {
    goto LABEL_68;
  }
LABEL_41:
  sub_10014ED88(0, (v32 & 0xC000000000000001) == 0, v32);
  if ((v32 & 0xC000000000000001) != 0)
  {
LABEL_78:
    id v33 = (id)sub_10024F380();
    goto LABEL_43;
  }
  id v33 = *(id *)(v32 + 32);
LABEL_43:
  id v34 = v33;
  swift_bridgeObjectRelease();
LABEL_69:
  sub_1000D5B48(0);
  if (sub_1000D55F8() != 5) {
    sub_1000D5C00(2u);
  }
  sub_10001C2A8(v8, *(void *)(v15 + 112));
  char v48 = sub_1000A1278(v34, 1);
  if (v48 == 4)
  {
    uint64_t v49 = sub_1000D428C();
    sub_100067FCC(v7, v6, v49, v50, __src);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v14) {
      memcpy(__dst, __src, 0x68uLL);
    }
  }
  else
  {
    char v51 = v48;
    swift_bridgeObjectRelease();
    sub_10006918C();
    sub_1000290D0();
    *uint64_t v52 = v51;
    swift_willThrow();
  }
}

uint64_t type metadata accessor for DisableAutoRenewRoute()
{
  return self;
}

unint64_t sub_10006918C()
{
  unint64_t result = qword_10030BF60;
  if (!qword_10030BF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BF60);
  }
  return result;
}

unint64_t sub_1000691D8()
{
  unint64_t result = qword_10030BF70;
  if (!qword_10030BF70)
  {
    sub_10001B028(&qword_10030BF68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BF70);
  }
  return result;
}

uint64_t sub_10006922C()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void sub_100069248(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = a1;
  *(unsigned char *)(v2 + 16) = 2;
  *(__n128 *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = v5;
  *(_DWORD *)(v2 + 56) = v6;
  *(unsigned char *)(v2 + 62) = BYTE6(v6);
  *(_WORD *)(v2 + 60) = WORD2(v6);
}

uint64_t sub_100069274(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 25;
  return swift_willThrow();
}

ASOctaneSupportXPCService::HTTPVersion sub_100069294()
{
  return HTTPVersion.init(major:minor:)(1, 1);
}

double sub_1000692CC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000692EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  *(_OWORD *)(a1 + 16) = a9;
  *(void *)(a1 + 32) = v10;
  *(_WORD *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 42) = v11;
  return swift_errorRelease();
}

double sub_100069318(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

__n128 sub_100069340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 result = a9;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t sub_100069354(uint64_t a1, uint64_t a2)
{
  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_10024FA60();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1000693CC()
{
  return 1702521203;
}

uint64_t sub_1000693DC(void *a1)
{
  sub_100019524(&qword_10030C010);
  sub_10001B550();
  __chkstk_darwin(v2, v3);
  sub_10001C2A8(a1, a1[3]);
  sub_10006AA48();
  sub_10006ACA8();
  sub_10024F900();
  uint64_t v4 = sub_100027AC4();
  return v5(v4);
}

uint64_t sub_1000694D0(void *a1)
{
  sub_100019524(&qword_10030C000);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  uint64_t v5 = (uint64_t)sub_10001C2A8(a1, a1[3]);
  sub_10006AA48();
  sub_10006AC84();
  if (!v1)
  {
    uint64_t v5 = sub_10024F7F0();
    uint64_t v7 = sub_1000297D4();
    v8(v7);
  }
  sub_10001C2EC((uint64_t)a1);
  return v5;
}

Swift::Int sub_1000695F4()
{
  return ByteBufferFoundationError.hashValue.getter();
}

uint64_t sub_100069614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100069354(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100069640(uint64_t a1)
{
  unint64_t v2 = sub_10006AA48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006967C(uint64_t a1)
{
  unint64_t v2 = sub_10006AA48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000696B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000694D0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1000696EC(void *a1)
{
  return sub_1000693DC(a1);
}

uint64_t sub_10006970C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x706169736F69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_10024FA60();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10006978C()
{
  return 0x706169736F69;
}

uint64_t sub_1000697A0(void *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_100019524(&qword_10030BFD8);
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C2A8(a1, a1[3]);
  sub_10006A804();
  sub_10006ACA8();
  uint64_t v14 = a2;
  __int16 v15 = a3 & 0x1FF;
  sub_10006A89C();
  sub_10024F910();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v6);
}

void *sub_1000698C4(void *a1)
{
  sub_100019524(&qword_10030BFC0);
  sub_10001B550();
  __chkstk_darwin(v3, v4);
  char v5 = sub_10001C2A8(a1, a1[3]);
  sub_10006A804();
  sub_10006AC84();
  if (v1)
  {
    sub_10001C2EC((uint64_t)a1);
  }
  else
  {
    sub_10006A850();
    sub_10024F800();
    uint64_t v6 = sub_1000297D4();
    v7(v6);
    char v5 = v9;
    sub_10001C2EC((uint64_t)a1);
  }
  return v5;
}

uint64_t sub_1000699F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10006970C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100069A20(uint64_t a1)
{
  unint64_t v2 = sub_10006A804();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069A5C(uint64_t a1)
{
  unint64_t v2 = sub_10006A804();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100069A98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000698C4(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 9) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_100069AD0(void *a1)
{
  return sub_1000697A0(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 9) << 8));
}

uint64_t sub_100069B00(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1002D6F50;
  v6._object = a2;
  unint64_t v4 = sub_10024F790(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_100069B50(char a1)
{
  uint64_t result = 0x6563697270;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x69642D6563697270;
      break;
    case 2:
      uint64_t result = 1702521203;
      break;
    case 3:
      uint64_t result = 0x6C662D7465737361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100069BF0(char a1)
{
  uint64_t result = 0x6563697270;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x69642D6563697270;
      break;
    case 2:
      uint64_t result = 1702521203;
      break;
    case 3:
      uint64_t result = 0x6C662D7465737361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100069C90(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100019524(&qword_10030BF90);
  sub_10001B550();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001C2A8(a1, a1[3]);
  sub_10006A224();
  sub_10024FD40();
  v14[0] = 0;
  sub_10006AC60();
  sub_10024F8F0();
  if (!v2)
  {
    v14[0] = 1;
    sub_10006AC60();
    sub_10024F8D0();
    v14[0] = 2;
    sub_10006AC60();
    sub_10024F900();
    sub_10006A2BC(v3 + 48, (uint64_t)v15);
    sub_10006A2BC((uint64_t)v15, (uint64_t)v14);
    v13[15] = 3;
    sub_10006A324();
    sub_10024F910();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t sub_100069E24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100019524(&qword_10030BF78);
  sub_10001B550();
  __chkstk_darwin(v5, v6);
  sub_10001C2A8(a1, a1[3]);
  sub_10006A224();
  sub_10024FD20();
  if (v2)
  {
    sub_10001C2EC((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10006AC74();
    uint64_t v7 = sub_10024F7E0();
    char v23 = v8;
    sub_10006AC74();
    uint64_t v9 = sub_10024F7C0();
    uint64_t v11 = v10;
    uint64_t v19 = v9;
    sub_10006AC74();
    uint64_t v12 = sub_10024F7F0();
    char v17 = v13;
    uint64_t v18 = v12;
    sub_10006A270();
    sub_10024F800();
    uint64_t v14 = sub_100027AC4();
    v15(v14);
    uint64_t result = sub_10001C2EC((uint64_t)a1);
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = v23 & 1;
    *(void *)(a2 + 16) = v19;
    *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
    *(void *)(a2 + 32) = v18;
    *(unsigned char *)(a2 + 40) = v17 & 1;
    *(void *)(a2 + 48) = v20;
    *(_WORD *)(a2 + 56) = v21;
    *(unsigned char *)(a2 + 58) = v22;
  }
  return result;
}

uint64_t sub_10006A044()
{
  return sub_1000FBDA4();
}

Swift::Int sub_10006A050()
{
  return sub_1001D34B0(*v0);
}

uint64_t sub_10006A058()
{
  return sub_1000D2890();
}

Swift::Int sub_10006A060(uint64_t a1)
{
  return sub_1000D3D60(a1, *v1);
}

uint64_t sub_10006A068@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100069B00(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10006A098@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100069B50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006A0C4()
{
  return sub_100069BF0(*v0);
}

uint64_t sub_10006A0CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100069B4C();
  *a1 = result;
  return result;
}

uint64_t sub_10006A0F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageBody.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006A11C(uint64_t a1)
{
  unint64_t v2 = sub_10006A224();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A158(uint64_t a1)
{
  unint64_t v2 = sub_10006A224();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10006A194@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100069E24(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 11);
    *(_OWORD *)((char *)a2 + 43) = *(_OWORD *)((char *)v7 + 11);
  }
  return result;
}

uint64_t sub_10006A1E0(void *a1)
{
  return sub_100069C90(a1);
}

unint64_t sub_10006A224()
{
  unint64_t result = qword_10030BF80;
  if (!qword_10030BF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BF80);
  }
  return result;
}

unint64_t sub_10006A270()
{
  unint64_t result = qword_10030BF88;
  if (!qword_10030BF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BF88);
  }
  return result;
}

uint64_t sub_10006A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030BF98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006A324()
{
  unint64_t result = qword_10030BFA0;
  if (!qword_10030BFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFA0);
  }
  return result;
}

uint64_t sub_10006A370(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_10006A384(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006A3A4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

void type metadata accessor for AssetFlavors()
{
}

unsigned char *storeEnumTagSinglePayload for StoreOffer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006A4A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StoreOffer.CodingKeys()
{
  return &type metadata for StoreOffer.CodingKeys;
}

uint64_t sub_10006A4E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006A4E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10006A548(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = a2[6];
  *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
  *(void *)(a1 + 48) = v6;
  return a1;
}

__n128 sub_10006A5C8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10006A5E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  return a1;
}

uint64_t sub_10006A64C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 59))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10006A6A0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 59) = 0;
    }
    if (a2) {
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
    }
  }
  return result;
}

void type metadata accessor for StoreOffer()
{
}

unint64_t sub_10006A718()
{
  unint64_t result = qword_10030BFA8;
  if (!qword_10030BFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFA8);
  }
  return result;
}

unint64_t sub_10006A768()
{
  unint64_t result = qword_10030BFB0;
  if (!qword_10030BFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFB0);
  }
  return result;
}

unint64_t sub_10006A7B8()
{
  unint64_t result = qword_10030BFB8;
  if (!qword_10030BFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFB8);
  }
  return result;
}

unint64_t sub_10006A804()
{
  unint64_t result = qword_10030BFC8;
  if (!qword_10030BFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFC8);
  }
  return result;
}

unint64_t sub_10006A850()
{
  unint64_t result = qword_10030BFD0;
  if (!qword_10030BFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFD0);
  }
  return result;
}

unint64_t sub_10006A89C()
{
  unint64_t result = qword_10030BFE0;
  if (!qword_10030BFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetFlavors.CodingKeys()
{
  return &type metadata for AssetFlavors.CodingKeys;
}

uint64_t sub_10006A900(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006A920(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

void type metadata accessor for iOSIAP()
{
}

unint64_t sub_10006A95C()
{
  unint64_t result = qword_10030BFE8;
  if (!qword_10030BFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFE8);
  }
  return result;
}

unint64_t sub_10006A9AC()
{
  unint64_t result = qword_10030BFF0;
  if (!qword_10030BFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFF0);
  }
  return result;
}

unint64_t sub_10006A9FC()
{
  unint64_t result = qword_10030BFF8;
  if (!qword_10030BFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030BFF8);
  }
  return result;
}

unint64_t sub_10006AA48()
{
  unint64_t result = qword_10030C008;
  if (!qword_10030C008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C008);
  }
  return result;
}

unsigned char *_s25ASOctaneSupportXPCService12AssetFlavorsV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10006AB30);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for iOSIAP.CodingKeys()
{
  return &type metadata for iOSIAP.CodingKeys;
}

unint64_t sub_10006AB6C()
{
  unint64_t result = qword_10030C018;
  if (!qword_10030C018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C018);
  }
  return result;
}

unint64_t sub_10006ABBC()
{
  unint64_t result = qword_10030C020;
  if (!qword_10030C020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C020);
  }
  return result;
}

unint64_t sub_10006AC0C()
{
  unint64_t result = qword_10030C028;
  if (!qword_10030C028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C028);
  }
  return result;
}

uint64_t sub_10006AC84()
{
  return sub_10024FD20();
}

uint64_t sub_10006ACA8()
{
  return sub_10024FD40();
}

unint64_t sub_10006ACC8(uint64_t a1, void *a2)
{
  sub_10024F330(24);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  sub_10024E800(v5);
  return 0xD000000000000016;
}

void *sub_10006AD48()
{
  unint64_t result = v0;
  v0[2] = 0xD000000000000011;
  v0[3] = 0x800000010027B8F0;
  v0[4] = 0;
  v0[5] = 0;
  return result;
}

uint64_t sub_10006AD70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = sub_100212134();
  sub_100161540(6580578, 0xE300000000000000, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    char v23 = &v21;
    if (qword_100308D00 != -1) {
      swift_once();
    }
    char v8 = (os_unfair_lock_s *)*((void *)off_10030BD50 + 2);
    os_unfair_lock_lock(v8);
    uint64_t v9 = sub_10006AF8C();
    unint64_t v11 = v10;
    sub_100047398((uint64_t)v9, v10);
    sub_1000CBAF8((uint64_t)v9, v11, 0x706A2F6567616D69, 0xE900000000000067, (uint64_t)&v24);
    uint64_t v12 = v25;
    uint64_t v22 = v24;
    sub_10006B3FC();
    sub_10003F7F4((uint64_t)v9, v11);
    unsigned int v13 = HTTPVersion.init(major:minor:)(1, 1);
    LOWORD(v11) = v13;
    unsigned int v14 = HIWORD(v13);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v15 + 32) = 3;
    *(_WORD *)(v15 + 40) = v11;
    uint64_t v16 = v22;
    *(_WORD *)(v15 + 42) = v14;
    os_unfair_lock_unlock(v8);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000CB5C8(0xD000000000000012, 0x800000010027B930, 6, (uint64_t)&v24);
    uint64_t v16 = v24;
    uint64_t v12 = v25;
    sub_10006B3FC();
    unsigned int v18 = HTTPVersion.init(major:minor:)(1, 1);
    Swift::UInt16 v19 = v18;
    unsigned int v20 = HIWORD(v18);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = swift_allocObject();
    uint64_t v15 = result;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(result + 32) = 21;
    *(_WORD *)(result + 40) = v19;
    *(_WORD *)(result + 42) = v20;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 56) = v3;
  *(unsigned char *)(a1 + 62) = BYTE6(v3);
  *(_WORD *)(a1 + 60) = WORD2(v3);
  return result;
}

__CFData *sub_10006AF8C()
{
  sub_1000184A4(0, &qword_10030C0E8);
  swift_bridgeObjectRetain();
  id v0 = sub_10006B14C();
  id v1 = [self imageDescriptorNamed:kISImageDescriptorLargeHomeScreen];
  sub_100019524((uint64_t *)&unk_10030FD80);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100256B00;
  *(void *)(v2 + 32) = v1;
  sub_10024EAC0();
  sub_1000184A4(0, &qword_10030C0F0);
  id v3 = v1;
  Class isa = sub_10024EA80().super.isa;
  swift_bridgeObjectRelease();
  [v0 prepareImagesForImageDescriptors:isa];

  id v5 = [v0 imageForDescriptor:v3];
  uint64_t v6 = (__CFData *)[v5 CGImage];

  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v6 = sub_10006B1C0();
  }
  else
  {
  }
  return v6;
}

id sub_10006B14C()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = sub_10024E6A0();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithBundleIdentifier:v1];

  return v2;
}

__CFData *sub_10006B1C0()
{
  Mutable = CFDataCreateMutable(0, 0);
  if (Mutable)
  {
    id v2 = (__CFString *)sub_10024E6A0();
    id v3 = CGImageDestinationCreateWithData(Mutable, v2, 1uLL, 0);

    if (v3)
    {
      CGImageDestinationAddImage(v3, v0, 0);
      if (CGImageDestinationFinalize(v3))
      {
        unsigned int v4 = Mutable;
        Mutable = (__CFData *)sub_10024DF10();

        return Mutable;
      }
    }
    else
    {
    }
    return 0;
  }
  return Mutable;
}

uint64_t sub_10006B29C()
{
  swift_bridgeObjectRelease();
  sub_10006B3E8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return v0;
}

uint64_t sub_10006B2C4()
{
  sub_10006B29C();
  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for AppIconRoute()
{
  return self;
}

uint64_t sub_10006B31C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10006B350()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  sub_10006B3D4(v1, *(void *)(*(void *)v0 + 40));
  return v1;
}

double sub_10006B388@<D0>(_OWORD *a1@<X8>)
{
  sub_10006AD70((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  a1[2] = v5[0];
  double result = *(double *)((char *)v5 + 15);
  *(_OWORD *)((char *)a1 + 47) = *(_OWORD *)((char *)v5 + 15);
  return result;
}

uint64_t sub_10006B3D4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x22) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10006B3E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x22) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006B418(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v57 = a4;
  uint64_t v55 = a3;
  uint64_t v60 = a2;
  uint64_t v4 = sub_10024E4D0();
  sub_10001B550();
  uint64_t v56 = v5;
  __chkstk_darwin(v6, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  sub_10024E3D0();
  sub_10001B550();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  Swift::UInt16 v19 = (char *)&v50 - v18;
  uint64_t v20 = sub_10024E0A0();
  sub_10001B550();
  uint64_t v22 = v21;
  __chkstk_darwin(v23, v24);
  sub_10002059C();
  uint64_t v27 = v26 - v25;
  sub_10024E090();
  uint64_t v28 = sub_10024E050();
  uint64_t v30 = v29;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  uint64_t v53 = v22 + 8;
  uint64_t v54 = v20;
  uint64_t v52 = v31;
  v31(v27, v20);
  uint64_t v61 = v28;
  uint64_t v62 = v30;
  sub_10001DAC0();
  uint64_t v32 = sub_10024F150();
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  uint64_t v51 = v32;
  uint64_t v60 = v34;
  uint64_t v35 = sub_10006B820();
  uint64_t v37 = sub_100075748(v35, v36);
  unint64_t v39 = v38;
  sub_10006B8A0();
  sub_10024E3C0();
  switch(v39 >> 62)
  {
    case 1uLL:
      if (v37 >> 32 < (int)v37)
      {
        __break(1u);
        JUMPOUT(0x10006B810);
      }
      uint64_t v50 = (int)v37;
      sub_1000473AC(v37, v39);
      sub_10006BC38(v50, v37 >> 32);
      goto LABEL_5;
    case 2uLL:
      uint64_t v40 = *(void *)(v37 + 16);
      uint64_t v50 = *(void *)(v37 + 24);
      sub_1000473AC(v37, v39);
      swift_retain();
      swift_retain();
      sub_10006BC38(v40, v50);
      swift_release();
      swift_release();
LABEL_5:
      sub_10006BD68();
      break;
    default:
      sub_10006BA64();
      sub_10006BD68();
      break;
  }
  sub_10024E3B0();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v10, v4);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v16, v19, v59);
  uint64_t v41 = sub_100075C34((uint64_t)v16);
  unint64_t v43 = v42;
  sub_10024DF00(0);
  sub_10003F808(v41, v43);
  if ((v57 & 1) != 0 || v55 != 19)
  {
    uint64_t v47 = sub_10006BD50();
    v48(v47);
    sub_10006BD68();
    return v51;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10024E090();
    uint64_t v44 = sub_10024E050();
    sub_10006BD68();
    v52(v27, v54);
    uint64_t v45 = sub_10006BD50();
    v46(v45);
  }
  return v44;
}

uint64_t sub_10006B820()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_10024E910();
  sub_10024E7E0();
  return v1;
}

unint64_t sub_10006B8A0()
{
  unint64_t result = qword_10030C0F8;
  if (!qword_10030C0F8)
  {
    sub_10024E4D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C0F8);
  }
  return result;
}

uint64_t sub_10006B8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100019524(&qword_10030C100);
  __chkstk_darwin(v6 - 8, v7);
  sub_10002059C();
  uint64_t v10 = v9 - v8;
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v11 = sub_10006BB5C(a1, a2, 0);
  uint64_t v14 = v11;
  if (v11)
  {
    id v15 = [v11 deviceIdentifierForVendor];
    if (v15)
    {
      uint64_t v16 = v15;
      sub_10024E080();

      uint64_t v17 = sub_10024E0A0();
      uint64_t v18 = 0;
    }
    else
    {

      uint64_t v17 = sub_10024E0A0();
      uint64_t v18 = 1;
    }
    sub_1000195B4(v10, v18, 1, v17);
    return sub_10006BCE8(v10, a3);
  }
  else
  {
    uint64_t v12 = sub_10024E0A0();
    return sub_1000195B4(a3, 1, 1, v12);
  }
}

uint64_t sub_10006BA64()
{
  return sub_10024E3A0();
}

id sub_10006BB5C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = sub_10024E6A0();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    sub_10024DCE0();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_10006BC38(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10024DB80();
  if (!result || (uint64_t result = sub_10024DBA0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_10024DB90();
      sub_10024E4D0();
      sub_10006B8A0();
      return sub_10024E3A0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006BCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524(&qword_10030C100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BD50()
{
  return v0;
}

uint64_t sub_10006BD68()
{
  return sub_10003F808(v0, v1);
}

#error "10006BE00: call analysis failed (funcsize=46)"

uint64_t ByteBuffer.readableBytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (HIDWORD(a2) - a2);
  if (HIDWORD(a2) < a2) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 8);
  BOOL v3 = __CFADD__(v2, forwardBy);
  unsigned int v4 = v2 + forwardBy;
  if (v3)
  {
    __break(1u);
  }
  else if (*(_DWORD *)(v1 + 12) >= v4)
  {
    *(_DWORD *)(v1 + 8) = v4;
    return;
  }
  __break(1u);
}

unint64_t sub_10006BE74(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    sub_1000701CC();
    uint64_t result = sub_10024E7C0();
    if (v6) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      sub_1000700DC();
      uint64_t v7 = sub_10024E920();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

void sub_10006BF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a3 - a2;
    sub_1000701CC();
    uint64_t v10 = sub_1001971CC(v5, v6, v7, v8, v9);
    if (v11)
    {
      uint64_t v10 = v4;
      if (!a2) {
        goto LABEL_7;
      }
    }
    else if (!a2)
    {
      uint64_t v4 = 0;
    }
    if (v4 >= v10)
    {
LABEL_7:
      sub_1000700DC();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10006BFC4(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_10006FE10(0, result, v3);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ByteBuffer.clear()()
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)uint64_t v0 = sub_10006C75C(*(_DWORD *)(*(void *)v0 + 16));
    swift_release();
  }
  sub_100070054();
}

uint64_t ByteBufferAllocator.buffer(capacity:)(uint64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    swift_once();
    return swift_retain();
  }
  if (a1)
  {
    type metadata accessor for ByteBuffer._Storage();
    sub_1000701CC();
    return static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v1, v2, v3, v4, v5);
  }
  if (qword_100308D08 != -1) {
    goto LABEL_7;
  }
  return swift_retain();
}

BOOL static _ByteBufferSlice.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return (a1 & 0xFFFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFFFLL);
}

BOOL sub_10006C174(unsigned int *a1, unsigned int *a2)
{
  return static _ByteBufferSlice.__derived_struct_equals(_:_:)(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

uint64_t SelectorRegistrationID._rawValue.setter(uint64_t result)
{
  *int v1 = result;
  return result;
}

uint64_t _ByteBufferSlice._begin.getter(unint64_t a1)
{
  return HIDWORD(a1) & 0xFFFFFF;
}

uint64_t _ByteBufferSlice._begin.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 6) = BYTE2(result);
  return result;
}

uint64_t (*_ByteBufferSlice._begin.modify())(void)
{
  return debugOnly(_:);
}

unint64_t _ByteBufferSlice.lowerBound.getter(unint64_t a1)
{
  return (a1 >> 24) & 0xFFFF00 | BYTE6(a1);
}

uint64_t _ByteBufferSlice.count.getter(unint64_t a1)
{
  unsigned int v1 = (a1 >> 24) & 0xFFFF00 | BYTE6(a1);
  BOOL v2 = a1 >= v1;
  uint64_t result = a1 - v1;
  if (!v2) {
    __break(1u);
  }
  return result;
}

unint64_t _ByteBufferSlice.description.getter()
{
  sub_10024F330(28);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 3943982;
  v2._object = (void *)0xE300000000000000;
  sub_10024E800(v2);
  v3._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32032;
  v4._object = (void *)0xE200000000000000;
  sub_10024E800(v4);
  return 0xD000000000000013;
}

unint64_t sub_10006C31C()
{
  return _ByteBufferSlice.description.getter();
}

void *sub_10006C348(void *a1, const void *a2, size_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    uint64_t result = (void *)sub_10024F730();
    __break(1u);
  }
  else
  {
    return memmove(a1, a2, a3);
  }
  return result;
}

uint64_t *ByteBufferAllocator.zeroCapacityWithDefaultAllocator.unsafeMutableAddressor()
{
  if (qword_100308D08 != -1) {
    swift_once();
  }
  return &static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
}

uint64_t sub_10006C404()
{
  type metadata accessor for ByteBuffer._Storage();
  uint64_t result = static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(0, (uint64_t (*)(void))j_j__malloc, (uint64_t)j_j__realloc, (uint64_t)j_j__free, (uint64_t)sub_10006C3B4);
  int v1 = *(_DWORD *)(result + 16);
  static ByteBufferAllocator.zeroCapacityWithDefaultAllocator = result;
  qword_10034C038 = 0;
  dword_10034C040 = v1;
  word_10034C044 = 0;
  byte_10034C046 = 0;
  return result;
}

uint64_t static ByteBufferAllocator.zeroCapacityWithDefaultAllocator.getter()
{
  if (qword_100308D08 != -1) {
    swift_once();
  }
  return swift_retain();
}

Swift::Void __swiftcall ByteBuffer._moveReaderIndex(to:)(Swift::UInt32 to)
{
  *(_DWORD *)(v1 + 8) = to;
}

uint64_t (*AddressedEnvelope.Metadata.packetInfo.modify())(void)
{
  return debugOnly(_:);
}

unint64_t ByteBuffer._writerIndex.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

Swift::Void __swiftcall ByteBuffer._moveWriterIndex(to:)(Swift::UInt32 to)
{
  *(_DWORD *)(v1 + 12) = to;
}

uint64_t (*ByteBuffer._writerIndex.modify())(void)
{
  return debugOnly(_:);
}

uint64_t FileRegion.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t ByteBuffer._slice.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(_WORD *)(v1 + 20) = WORD2(result);
  *(unsigned char *)(v1 + 22) = BYTE6(result);
  return result;
}

uint64_t (*CircularBuffer.tailBackingIndex.modify())(void)
{
  return debugOnly(_:);
}

uint64_t ByteBuffer._Storage.bytes.getter()
{
  sub_10006FF20();
  return *(void *)(v0 + 24);
}

uint64_t ByteBuffer._Storage.bytes.setter(uint64_t a1)
{
  uint64_t result = sub_1000701F8();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  return result;
}

uint64_t (*ByteBuffer._Storage.bytes.modify())()
{
  return j__swift_endAccess;
}

uint64_t ByteBuffer._Storage.__allocating_init(bytesNoCopy:capacity:allocator:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1000701D8();
  *(_DWORD *)(result + 16) = a2;
  *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = a5;
  *(void *)(result + 56) = a6;
  return result;
}

uint64_t ByteBuffer._Storage.init(bytesNoCopy:capacity:allocator:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(v6 + 16) = a2;
  *(void *)(v6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 56) = a6;
  return v6;
}

uint64_t ByteBuffer._Storage.deinit()
{
  sub_10006C6DC();
  return v0;
}

uint64_t sub_10006C6DC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  swift_beginAccess();
  return v1(*(void *)(v0 + 24));
}

uint64_t ByteBuffer._Storage.__deallocating_deinit()
{
  sub_10006C6DC();
  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t ByteBuffer._Storage.allocateStorage()()
{
  return sub_10006C75C(*(_DWORD *)(v0 + 16));
}

uint64_t sub_10006C75C(int a1)
{
  if (a1) {
    unsigned int v2 = sub_1000EAAF8(a1);
  }
  else {
    unsigned int v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 32);
  uint64_t result = v3(v2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(v1 + 56);
    uint64_t result = swift_allocObject();
    *(_DWORD *)(result + 16) = v2;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
    *(void *)(result + 32) = v3;
    *(_OWORD *)(result + 40) = *(_OWORD *)(v1 + 40);
    *(void *)(result + 56) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ByteBuffer._Storage.reallocSlice(_:capacity:)(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10006C75C(a2);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 56);
  sub_10006FF20();
  uint64_t v6 = *(void *)(v4 + 24);
  sub_10006FF20();
  uint64_t v7 = *(void *)(v2 + 24) + a1;
  uint64_t v8 = sub_10006C980(a1);
  v5(v6, v7, v8);
  return v4;
}

uint64_t sub_10006C88C()
{
  sub_1000700C4();
  if (!sub_10000CF7C(v0)) {
    return 0;
  }
  uint64_t v1 = 0;
  do
  {
    uint64_t v2 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      __break(1u);
    }
    sub_1000700C4();
    ++v1;
  }
  while (sub_10000CFB0(v3, v4));
  return v2;
}

uint64_t sub_10006C924(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result == -1 && v3 == 0x8000000000000000) {
    goto LABEL_12;
  }
  uint64_t result = v3 / result;
  if (result < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_10006C95C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, v1)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t Heap.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10006C980(uint64_t a1)
{
  if (HIDWORD(a1) < a1) {
    return -(uint64_t)(a1 - HIDWORD(a1));
  }
  else {
    return (HIDWORD(a1) - a1);
  }
}

uint64_t sub_10006C998(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1000F44B4(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000F44B4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  sub_1000700DC();
  return sub_10024E880();
}

Swift::Void __swiftcall ByteBuffer._Storage.reallocStorage(capacity:)(Swift::UInt32 capacity)
{
  unsigned int v2 = sub_1000EAAF8(capacity);
  uint64_t v3 = *(uint64_t (**)(void, void))(v1 + 40);
  sub_1000701F8();
  uint64_t v4 = v3(*(void *)(v1 + 24), v2);
  if (v4)
  {
    *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
    *(_DWORD *)(v1 + 16) = v2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(int a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    unsigned int v10 = sub_1000EAAF8(a1);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t result = a2(v10);
  if (result)
  {
    uint64_t result = sub_1000701D8();
    *(_DWORD *)(result + 16) = v10;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
    *(void *)(result + 32) = a2;
    *(void *)(result + 40) = a3;
    *(void *)(result + 48) = a4;
    *(void *)(result + 56) = a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::String __swiftcall ByteBuffer._Storage.dumpBytes(slice:offset:length:)(ASOctaneSupportXPCService::_ByteBufferSlice slice, Swift::Int offset, Swift::Int length)
{
  uint64_t v4 = *(void *)&slice._begin._backing._1;
  uint64_t v5 = *(void *)&slice._begin._backing._0;
  unint64_t v6 = *(void *)&slice.upperBound;
  uint64_t v7 = sub_10006FF20();
  uint64_t v9 = (v6 >> 24) & 0xFFFF00 | BYTE6(v6);
  int64_t v10 = v9 + v5;
  if (__OFADD__(v9, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = v10 + v4;
  if (__OFADD__(v10, v4))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v11 < v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v10 != v11)
  {
    if (v10 >= v11)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    unint64_t v12 = *(unsigned int *)(v3 + 16);
    while (v10 < v12)
    {
      ++v10;
      sub_10006F7E4();
      uint64_t v13 = sub_10024E8E0();
      id v15 = v14;
      uint64_t v16 = sub_10024E790();
      BOOL v17 = v16 == 1;
      if (v16 == 1) {
        v18._countAndFlagsBits = 48;
      }
      else {
        v18._countAndFlagsBits = 0;
      }
      if (v17) {
        Swift::UInt16 v19 = (void *)0xE100000000000000;
      }
      else {
        Swift::UInt16 v19 = (void *)0xE000000000000000;
      }
      v18._object = v19;
      sub_10024E800(v18);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = v13;
      v21._object = v15;
      sub_10024E800(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 32;
      v22._object = (void *)0xE100000000000000;
      sub_10024E800(v22);
      uint64_t v7 = swift_bridgeObjectRelease();
      if (!--v4) {
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_15:
  v23._countAndFlagsBits = 23840;
  v23._object = (void *)0xE200000000000000;
  sub_10024E800(v23);
  uint64_t v7 = 91;
  uint64_t v8 = (void *)0xE100000000000000;
LABEL_21:
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(Swift::UInt32 capacity, Swift::Bool resetIndices)
{
  uint64_t v3 = v2;
  if (resetIndices) {
    unsigned int v5 = *(_DWORD *)(v3 + 8);
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v6 = *(unsigned __int8 *)(v3 + 22) | (*(unsigned __int16 *)(v3 + 20) << 8);
  uint64_t v7 = v6 + v5;
  if (__CFADD__(v6, v5))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unsigned int v8 = *(_DWORD *)(v3 + 16);
  BOOL v9 = v8 >= v6;
  unsigned int v10 = v8 - v6;
  if (!v9) {
    goto LABEL_16;
  }
  if (__CFADD__(v7, v10))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__CFADD__(v7, capacity))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = sub_10006CDC8(v7 + v10, v8, v7 + capacity, (uint64_t)_swiftEmptyArrayStorage);
  if (v11 < v7)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v7 | (v11 << 32), capacity);
  swift_release();
  *(void *)uint64_t v3 = v12;
  unsigned int v13 = *(_DWORD *)(v3 + 8);
  BOOL v9 = v13 >= v5;
  unsigned int v14 = v13 - v5;
  if (!v9) {
    goto LABEL_20;
  }
  *(_DWORD *)(v3 + 8) = v14;
  unsigned int v15 = *(_DWORD *)(v3 + 12);
  BOOL v9 = v15 >= v5;
  unsigned int v16 = v15 - v5;
  if (v9)
  {
    *(_DWORD *)(v3 + 12) = v16;
    sub_100070164();
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_10006CDC8(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (a2 >= a1) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = a2;
  }
  if (v4 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v4;
  }
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    uint64_t v7 = (unsigned int *)(a4 + 32);
    do
    {
      unsigned int v9 = *v7++;
      unsigned int v8 = v9;
      if (v9 >= result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v8;
      }
      --v6;
    }
    while (v6);
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(Swift::UInt32 extraCapacity, Swift::Bool resetIndices)
{
  sub_100070094();
  if (v5)
  {
    BOOL v5 = __CFADD__(v4, v2);
    Swift::UInt32 v6 = v4 + v2;
    if (!v5)
    {
      ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v6, v3 & 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall ByteBuffer._ensureAvailableCapacity(_:at:)(Swift::UInt32 _, Swift::UInt32 at)
{
  uint64_t v4 = *(unsigned __int8 *)(v2 + 22) | (*(unsigned __int16 *)(v2 + 20) << 8);
  int v5 = v4 + at;
  if (__CFADD__(v4, at))
  {
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v6 = v5 + _;
  if (__CFADD__(v5, _))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v2;
  uint64_t v8 = *(unsigned int *)(v2 + 16);
  if (v8 >= v6) {
    return;
  }
  uint64_t v9 = *(void *)v2;
  unsigned int v10 = *(_DWORD *)(*(void *)v7 + 16);
  if (v10 < v6)
  {
    BOOL v11 = __CFADD__(at, _);
    at += _;
    if (!v11)
    {
      if (v4)
      {
        if (v8 >= v4)
        {
          uint64_t v12 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v4 | (v8 << 32), at);
          swift_release();
          *(void *)uint64_t v7 = v12;
          uint64_t v9 = v12;
LABEL_12:
          LODWORD(v4) = 0;
          unsigned int v10 = *(_DWORD *)(v9 + 16);
          goto LABEL_13;
        }
LABEL_18:
        __break(1u);
        return;
      }
LABEL_11:
      ByteBuffer._Storage.reallocStorage(capacity:)(at);
      goto LABEL_12;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v10 < v4)
  {
    __break(1u);
    goto LABEL_11;
  }
LABEL_13:
  unsigned __int16 v13 = (unsigned __int16)_UInt24.init(_:)(v4);
  *(_DWORD *)(v7 + 16) = v10;
  *(_WORD *)(v7 + 20) = v13;
  *(unsigned char *)(v7 + 22) = v14;
}

Swift::Void __swiftcall ByteBuffer._moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 8);
  BOOL v3 = __CFADD__(v2, forwardBy);
  int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v1 + 8) = v4;
  }
}

Swift::Void __swiftcall ByteBuffer._moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 12);
  BOOL v3 = __CFADD__(v2, forwardBy);
  int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v1 + 12) = v4;
  }
}

uint64_t ByteBuffer._setBytes(_:at:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  if (a1) {
    unint64_t v4 = a2 - a1;
  }
  else {
    unint64_t v4 = 0;
  }
  unsigned int v5 = a3 + v4;
  if (__CFADD__(a3, v4))
  {
    __break(1u);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      unsigned int v7 = *(_DWORD *)(v3 + 16);
      BOOL v8 = v5 >= v7;
      Swift::UInt32 v9 = v5 - v7;
      if (v8) {
        Swift::UInt32 v10 = v9;
      }
      else {
        Swift::UInt32 v10 = 0;
      }
      ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v10, 0);
    }
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    if (HIDWORD(v4))
    {
      sub_10003C4F8();
      sub_10003C6D8();
      goto LABEL_18;
    }
    ByteBuffer._ensureAvailableCapacity(_:at:)(v4, a3);
    unsigned int v11 = *(_DWORD *)(v3 + 16);
    int v12 = *(unsigned __int16 *)(v3 + 20);
    int v13 = *(unsigned __int8 *)(v3 + 22);
    char v14 = (void *)(*(void *)v3 + 24);
    sub_10006FF20();
    unsigned int v15 = v13 | (v12 << 8);
    if (v11 >= v15)
    {
      sub_10006BF3C(a3, *v14 + v15, *v14 + v15 + v11 - v15);
      UnsafeMutableRawBufferPointer.init(fastRebase:)();
      sub_10024F100();
      return v4;
    }
  }
  __break(1u);
LABEL_16:
  sub_10003C4F8();
  sub_10003C6E8();
LABEL_18:
  uint64_t result = sub_10003C850();
  __break(1u);
  return result;
}

uint64_t ByteBuffer._setBytesAssumingUniqueBufferAccess(_:at:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = *v3;
  unsigned int v6 = *((_DWORD *)v3 + 4);
  int v7 = *((unsigned __int16 *)v3 + 10);
  int v8 = *((unsigned __int8 *)v3 + 22);
  Swift::UInt32 v9 = (void *)(v5 + 24);
  uint64_t result = sub_10006FF20();
  unsigned int v11 = v8 | (v7 << 8);
  if (v6 < v11)
  {
    __break(1u);
  }
  else
  {
    sub_10006BF3C(a3, *v9 + v11, *v9 + v11 + v6 - v11);
    UnsafeMutableRawBufferPointer.init(fastRebase:)();
    return sub_10024F100();
  }
  return result;
}

uint64_t ByteBuffer._slicedStorageBuffer.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = (void *)(a1 + 24);
  uint64_t result = sub_10006FF20();
  unsigned int v6 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  if (a3 >= v6) {
    return *v4 + v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006D17C(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = a3 - a2;
  if (a3 < a2) {
    v9 += *(void *)(a1 + 16);
  }
  unsigned int v10 = a4 + v9;
  if (__CFADD__(a4, v9))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v11 = *(_DWORD *)(v5 + 16);
    BOOL v12 = v10 >= v11;
    Swift::UInt32 v13 = v10 - v11;
    if (v12) {
      Swift::UInt32 v14 = v13;
    }
    else {
      Swift::UInt32 v14 = 0;
    }
    ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v14, 0);
  }
  uint64_t v15 = sub_10006DF38(v9, (uint64_t *)v5, a4);
  uint64_t v16 = sub_10013D070((uint64_t)v42, v15, v9, a1, a2, a3);
  uint64_t v17 = v42[1];
  uint64_t v41 = v42[0];
  uint64_t v18 = v42[2];
  unint64_t v19 = v43;
  int v20 = v44;
  int v21 = v45;
  swift_retain();
  if ((v18 & 0x8000000000000000) == 0)
  {
    Swift::UInt32 v22 = a4;
    if (!HIDWORD(v18))
    {
      BOOL v23 = v46;
      BOOL v24 = v20 == 0xFFFF;
      for (BOOL i = v21 == 255; ; BOOL i = 1)
      {
        if (v19 == v18 && v24 && i && ((v23 ^ (v18 < v17)) & 1) != 0)
        {
          swift_release();
          return v16;
        }
        unint64_t v26 = *(void *)(v41 + 16);
        if (v26 <= v19) {
          break;
        }
        uint64_t v27 = (char *)(v41 + 32 + 2 * v19);
        if (v27[1]) {
          goto LABEL_45;
        }
        unint64_t v19 = (v26 + 0x1FFFFFFFFLL) & (v19 + 1);
        if (HIDWORD(v19)) {
          goto LABEL_46;
        }
        char v28 = *v27;
        BOOL v46 = (uint64_t)v19 >= v17;
        unint64_t v29 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_38;
        }
        if ((v29 & 0x8000000000000000) != 0 || HIDWORD(v29)) {
          goto LABEL_46;
        }
        uint64_t v30 = *(unsigned __int16 *)(v5 + 20);
        uint64_t v31 = *(unsigned __int8 *)(v5 + 22);
        uint64_t v32 = v31 | (v30 << 8);
        int v33 = v32 + v22;
        if (__CFADD__(v32, v22)) {
          goto LABEL_39;
        }
        unsigned int v34 = v33 + v29;
        if (__CFADD__(v33, v29)) {
          goto LABEL_40;
        }
        uint64_t v35 = *(unsigned int *)(v5 + 16);
        uint64_t v36 = *(void *)v5;
        if (v35 < v34)
        {
          unsigned int v37 = *(_DWORD *)(v36 + 16);
          if (v37 >= v34)
          {
            if (v37 < v32) {
              goto LABEL_42;
            }
            *(_DWORD *)(v5 + 16) = v37;
          }
          else
          {
            if (__CFADD__(a4, v29)) {
              goto LABEL_41;
            }
            if (v32)
            {
              if (v35 < v32) {
                goto LABEL_43;
              }
              uint64_t v38 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v32 | (v35 << 32), a4 + v29);
              swift_release();
              *(void *)uint64_t v5 = v38;
              uint64_t v36 = v38;
            }
            else
            {
              ByteBuffer._Storage.reallocStorage(capacity:)(a4 + v29);
              uint64_t v38 = *(void *)v5;
            }
            uint64_t v31 = 0;
            uint64_t v30 = 0;
            *(_DWORD *)(v5 + 16) = *(_DWORD *)(v36 + 16);
            *(_WORD *)(v5 + 20) = 0;
            *(unsigned char *)(v5 + 22) = 0;
            uint64_t v36 = v38;
            Swift::UInt32 v22 = a4;
          }
        }
        unint64_t v19 = v19;
        swift_beginAccess();
        *(unsigned char *)(*(void *)(v36 + 24) + (v31 | (v30 << 8)) + a4 + v16) = v28;
        BOOL v23 = v46;
        ++v16;
        BOOL v24 = 1;
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
  }
LABEL_46:
  uint64_t result = sub_10024F660();
  __break(1u);
  return result;
}

uint64_t sub_10006D4D0(Swift::UInt32 a1)
{
  uint64_t v3 = sub_100019524(&qword_10030C1E8);
  uint64_t result = sub_100019524(&qword_10030C110);
  if (v3 == result)
  {
    __break(1u);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      Swift::UInt32 v5 = *(_DWORD *)(v1 + 16);
      BOOL v6 = a1 >= v5;
      Swift::UInt32 v7 = a1 - v5;
      if (v6) {
        Swift::UInt32 v8 = v7;
      }
      else {
        Swift::UInt32 v8 = 0;
      }
      ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v8, 0);
    }
    sub_10006DF38(0, (uint64_t *)v1, a1);
    return 0;
  }
  return result;
}

void sub_10006D554(uint64_t a1, unint64_t a2, Swift::UInt32 a3)
{
  if ((_UNKNOWN *)sub_100019524(&qword_10030C110) == &type metadata for String.UTF8View) {
    goto LABEL_20;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v7 = sub_10024E850();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int v7 = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unsigned int v8 = a3 + v7;
  if (__CFADD__(a3, v7))
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100070178();
    BOOL v11 = v9 >= v10;
    unsigned int v12 = v9 - v10;
    if (!v11) {
      goto LABEL_18;
    }
    BOOL v11 = v8 >= v9;
    unsigned int v13 = v8 - v9;
    if (!v11) {
      unsigned int v13 = 0;
    }
    if (__CFADD__(v12, v13)) {
      goto LABEL_19;
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v12 + v13, 0);
  }
  sub_10006DF38(v7, v3, a3);
  swift_bridgeObjectRetain();
  sub_10024F340();
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
LABEL_21:
  __break(1u);
}

void sub_10006D660()
{
  sub_100070070();
  sub_10001B550();
  __chkstk_darwin(v4, v5);
  sub_10006FFF4(v6, v26);
  if ((void *)sub_100019524(&qword_10030C110) == &type metadata for Data)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    sub_10003C4F8();
    sub_10003C6E8();
    goto LABEL_40;
  }
  int v7 = sub_10006FE5C(v3, v2);
  unsigned int v8 = v0 + v7;
  if (__CFADD__(v0, v7))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v9 = *(_DWORD *)(v1 + 16);
    unsigned int v10 = *(unsigned __int8 *)(v1 + 22) | (*(unsigned __int16 *)(v1 + 20) << 8);
    BOOL v11 = v9 >= v10;
    unsigned int v12 = v9 - v10;
    if (!v11) {
      goto LABEL_35;
    }
    BOOL v11 = v8 >= v9;
    unsigned int v13 = v8 - v9;
    if (!v11) {
      unsigned int v13 = 0;
    }
    if (__CFADD__(v12, v13)) {
      goto LABEL_36;
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v12 + v13, 0);
  }
  uint64_t v14 = sub_100070128();
  sub_1000473AC(v3, v2);
  uint64_t v15 = sub_10007002C();
  sub_10003F808(v3, v2);
  sub_10006FECC();
  sub_100070104();
  if (v27 == 1)
  {
LABEL_27:
    uint64_t v24 = sub_100070010();
    v25(v24);
    sub_10003C8C8();
    return;
  }
  while (1)
  {
    unint64_t v16 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if ((v16 & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    if (HIDWORD(v16)) {
      break;
    }
    sub_1000701B8();
    if (v11) {
      goto LABEL_29;
    }
    if (__CFADD__(v17, v16)) {
      goto LABEL_30;
    }
    sub_1000701A4();
    if (!v11)
    {
      unsigned int v22 = *(_DWORD *)(v14 + 16);
      if (v22 >= v20)
      {
        if (v22 < v18) {
          goto LABEL_32;
        }
        *(_DWORD *)(v1 + 16) = v22;
      }
      else
      {
        if (__CFADD__(v21, v16)) {
          goto LABEL_31;
        }
        if (v18)
        {
          if (v19 < v18) {
            goto LABEL_33;
          }
          uint64_t v23 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v18 | (v19 << 32), v21 + (int)v16);
          swift_release();
          *(void *)uint64_t v1 = v23;
          uint64_t v14 = v23;
        }
        else
        {
          ByteBuffer._Storage.reallocStorage(capacity:)(v21 + v16);
        }
        sub_10006FF6C();
      }
    }
    sub_10006FF20();
    sub_10006FF38();
    ++v15;
    if (v27) {
      goto LABEL_27;
    }
  }
  sub_10003C4F8();
  sub_10003C6D8();
LABEL_40:
  sub_10003C850();
  __break(1u);
}

uint64_t sub_10006D8E0(char a1, Swift::UInt32 a2)
{
  uint64_t v5 = sub_100019524(&qword_10030C1F8);
  uint64_t result = sub_100019524(&qword_10030C110);
  if (v5 == result) {
    goto LABEL_10;
  }
  Swift::UInt32 v7 = a2 + 1;
  if (a2 == -1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    Swift::UInt32 v8 = *(_DWORD *)(v2 + 16);
    BOOL v9 = v7 >= v8;
    Swift::UInt32 v10 = v7 - v8;
    if (v9) {
      Swift::UInt32 v11 = v10;
    }
    else {
      Swift::UInt32 v11 = 0;
    }
    ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v11, 0);
  }
  *(unsigned char *)sub_10006DF38(1uLL, (uint64_t *)v2, a2) = a1;
  return 1;
}

void sub_10006D978()
{
  sub_100070070();
  sub_10001B550();
  __chkstk_darwin(v4, v5);
  sub_10006FFF4(v6, v25);
  if ((void *)sub_100019524(&qword_10030C110) == &type metadata for Data)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    sub_10003C4F8();
    sub_10003C6E8();
    goto LABEL_36;
  }
  int v7 = sub_10006FE5C(v3, v2);
  unsigned int v8 = v0 + v7;
  if (__CFADD__(v0, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v9 = *(_DWORD *)(v1 + 16);
    BOOL v10 = v8 >= v9;
    Swift::UInt32 v11 = v8 - v9;
    if (v10) {
      Swift::UInt32 v12 = v11;
    }
    else {
      Swift::UInt32 v12 = 0;
    }
    ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v12, 0);
  }
  uint64_t v13 = sub_100070128();
  sub_1000473AC(v3, v2);
  uint64_t v14 = sub_10007002C();
  sub_10003F808(v3, v2);
  sub_10006FECC();
  sub_100070104();
  if (v26 == 1)
  {
LABEL_25:
    uint64_t v23 = sub_100070010();
    v24(v23);
    sub_10003C8C8();
    return;
  }
  while (1)
  {
    unint64_t v15 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_34;
    }
    if (HIDWORD(v15)) {
      break;
    }
    sub_1000701B8();
    if (v10) {
      goto LABEL_27;
    }
    if (__CFADD__(v16, v15)) {
      goto LABEL_28;
    }
    sub_1000701A4();
    if (!v10)
    {
      unsigned int v21 = *(_DWORD *)(v13 + 16);
      if (v21 >= v19)
      {
        if (v21 < v17) {
          goto LABEL_30;
        }
        *(_DWORD *)(v1 + 16) = v21;
      }
      else
      {
        if (__CFADD__(v20, v15)) {
          goto LABEL_29;
        }
        if (v17)
        {
          if (v18 < v17) {
            goto LABEL_31;
          }
          uint64_t v22 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v17 | (v18 << 32), v20 + (int)v15);
          swift_release();
          *(void *)uint64_t v1 = v22;
          uint64_t v13 = v22;
        }
        else
        {
          ByteBuffer._Storage.reallocStorage(capacity:)(v20 + v15);
        }
        sub_10006FF6C();
      }
    }
    sub_10006FF20();
    sub_10006FF38();
    ++v14;
    if (v26) {
      goto LABEL_25;
    }
  }
  sub_10003C4F8();
  sub_10003C6D8();
LABEL_36:
  sub_10003C850();
  __break(1u);
}

void ByteBuffer._setSlowPath<A>(bytes:at:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10001B550();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  uint64_t v40 = (char *)&v38 - v11;
  if (sub_100019524(&qword_10030C110) == a3)
  {
    sub_10003C8C8();
    sub_10006D17C(v20, v21, v22, v23);
  }
  else
  {
    unint64_t v12 = sub_10024E940();
    Swift::UInt32 v39 = a2;
    unsigned int v13 = a2 + v12;
    if (__CFADD__(a2, v12))
    {
LABEL_37:
      __break(1u);
LABEL_38:
      sub_10003C4F8();
      sub_10003C6D8();
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        unsigned int v14 = *(_DWORD *)(v4 + 16);
        BOOL v15 = v13 >= v14;
        Swift::UInt32 v16 = v13 - v14;
        if (v15) {
          Swift::UInt32 v17 = v16;
        }
        else {
          Swift::UInt32 v17 = 0;
        }
        ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v17, 0);
      }
      uint64_t v38 = v8;
      Swift::UInt32 v18 = v39;
      sub_10006DF38(v12, (uint64_t *)v4, v39);
      uint64_t v19 = sub_10024F040();
      swift_getAssociatedConformanceWitness();
      sub_10024F0E0();
      if (v43 == 1)
      {
LABEL_30:
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, AssociatedTypeWitness);
        sub_10003C8C8();
        return;
      }
      uint64_t v25 = v18;
      Swift::UInt32 v26 = v18;
      while (1)
      {
        unint64_t v27 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        if ((v27 & 0x8000000000000000) != 0) {
          break;
        }
        if (HIDWORD(v27)) {
          goto LABEL_38;
        }
        uint64_t v28 = *(unsigned __int16 *)(v4 + 20);
        uint64_t v29 = *(unsigned __int8 *)(v4 + 22);
        uint64_t v30 = v29 | (v28 << 8);
        int v31 = v30 + v26;
        if (__CFADD__(v30, v26)) {
          goto LABEL_32;
        }
        unsigned int v32 = v31 + v27;
        if (__CFADD__(v31, v27)) {
          goto LABEL_33;
        }
        char v33 = v42;
        uint64_t v34 = *(unsigned int *)(v4 + 16);
        uint64_t v35 = *(void *)v4;
        if (v34 < v32)
        {
          unsigned int v36 = *(_DWORD *)(v35 + 16);
          if (v36 >= v32)
          {
            if (v36 < v30) {
              goto LABEL_35;
            }
            *(_DWORD *)(v4 + 16) = v36;
          }
          else
          {
            if (__CFADD__(v26, v27)) {
              goto LABEL_34;
            }
            if (v30)
            {
              if (v34 < v30) {
                goto LABEL_36;
              }
              uint64_t v37 = ByteBuffer._Storage.reallocSlice(_:capacity:)(v30 | (v34 << 32), v26 + v27);
              swift_release();
              *(void *)uint64_t v4 = v37;
            }
            else
            {
              ByteBuffer._Storage.reallocStorage(capacity:)(v26 + v27);
              uint64_t v37 = *(void *)v4;
            }
            uint64_t v29 = 0;
            uint64_t v28 = 0;
            sub_100070164();
            uint64_t v35 = v37;
            Swift::UInt32 v26 = v39;
          }
        }
        sub_10006FF20();
        *(unsigned char *)(*(void *)(v35 + 24) + (v29 | (v28 << 8)) + v25 + v19) = v33;
        sub_10024F0E0();
        ++v19;
        if (v43 == 1) {
          goto LABEL_30;
        }
      }
      sub_10003C4F8();
      sub_10003C6E8();
    }
    sub_10003C850();
    __break(1u);
  }
}

uint64_t sub_10006DF38(unint64_t a1, uint64_t *a2, Swift::UInt32 at)
{
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1))
  {
    uint64_t result = sub_10024F660();
    __break(1u);
  }
  else
  {
    ByteBuffer._ensureAvailableCapacity(_:at:)(a1, at);
    uint64_t v5 = *a2;
    uint64_t v6 = *((unsigned __int16 *)a2 + 10);
    uint64_t v7 = *((unsigned __int8 *)a2 + 22);
    swift_beginAccess();
    return *(void *)(v5 + 24) + (v7 | (v6 << 8)) + at;
  }
  return result;
}

void ByteBuffer._setBytes<A>(_:at:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3)
{
  sub_10024E950();
  if (v6) {
    ByteBuffer._setSlowPath<A>(bytes:at:)(a1, a2, a3);
  }
}

uint64_t sub_10006E0E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt32 a3@<W3>, _DWORD *a4@<X8>)
{
  if (a1) {
    uint64_t v5 = a1 + a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = ByteBuffer._setBytes(_:at:)(a1, v5, a3);
  *a4 = result;
  return result;
}

uint64_t ByteBuffer.writableBytes.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  BOOL v4 = a3 >= v3;
  unsigned int v5 = a3 - v3;
  if (v4)
  {
    uint64_t result = v5 - HIDWORD(a2);
    if (v5 >= HIDWORD(a2)) {
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ByteBuffer.capacity.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  uint64_t result = a3 - v3;
  if (a3 < v3) {
    __break(1u);
  }
  return result;
}

uint64_t ByteBuffer.storageCapacity.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

Swift::Void __swiftcall ByteBuffer.reserveCapacity(_:)(Swift::Int a1)
{
  sub_100070178();
  BOOL v4 = v2 >= v3;
  uint64_t v5 = v2 - v3;
  if (v4)
  {
    if (v5 < v1)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        Swift::UInt32 v6 = sub_10007018C();
        ByteBuffer._ensureAvailableCapacity(_:at:)(v6, v7);
      }
      else
      {
        Swift::UInt32 v8 = sub_10007018C();
        ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v8, v9);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ByteBuffer.reserveCapacity(minimumWritableBytes:)(Swift::Int minimumWritableBytes)
{
  uint64_t v2 = *(unsigned int *)(v1 + 12);
  uint64_t v3 = v2 + minimumWritableBytes;
  if (__OFADD__(v2, minimumWritableBytes))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  sub_100070094();
  if (!v5) {
    goto LABEL_14;
  }
  if (v3 > v4)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      Swift::UInt32 v6 = sub_10007018C();
      ByteBuffer._ensureAvailableCapacity(_:at:)(v6, v7);
    }
    else
    {
      Swift::UInt32 v8 = sub_10007018C();
      ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v8, v9);
    }
  }
}

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebaseIfNeeded()()
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    Swift::UInt32 v0 = sub_1000700AC();
    if (v1)
    {
      ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v0, 0);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10006E2DC()
{
  sub_10006FFBC();
  char v1 = v0;
  uint64_t v3 = v2;
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 20);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 22);
  Swift::UInt32 v7 = (void *)(*(void *)v3 + 24);
  sub_10006FF20();
  unsigned int v8 = *(_DWORD *)(v3 + 12);
  BOOL v9 = v8 >= v4;
  unsigned int v10 = v8 - v4;
  if (v9)
  {
    uint64_t v11 = *v7 + (v6 | (v5 << 8)) + v4;
    v1(v11, v11 + v10);
    sub_10006FFA4();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ByteBuffer.withUnsafeMutableReadableBytes<A>(_:)()
{
  sub_10006FFD4();
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  uint64_t result = sub_10006FF20();
  if (*(_DWORD *)(v0 + 12) >= v2)
  {
    sub_10006FF90();
    return v1();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t sub_10006E410(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(unsigned __int16 *)(a1 + 20);
  int v6 = *(unsigned __int8 *)(a1 + 22);
  Swift::UInt32 v7 = (void *)(*(void *)a1 + 24);
  uint64_t result = swift_beginAccess();
  unsigned int v9 = v6 | (v5 << 8);
  if (v4 < v9)
  {
    __break(1u);
  }
  else
  {
    sub_10006BF3C(*(unsigned int *)(a1 + 12), *v7 + v9, *v7 + v9 + v4 - v9);
    uint64_t v10 = UnsafeMutableRawBufferPointer.init(fastRebase:)();
    return a2(v10);
  }
  return result;
}

uint64_t ByteBuffer.withUnsafeMutableWritableBytes<A>(_:)()
{
  sub_10006FFD4();
  unsigned int v2 = *(_DWORD *)(v0 + 16);
  int v3 = *(unsigned __int16 *)(v0 + 20);
  int v4 = *(unsigned __int8 *)(v0 + 22);
  int v5 = (void *)(*(void *)v0 + 24);
  uint64_t result = sub_10006FF20();
  unsigned int v7 = v4 | (v3 << 8);
  if (v2 < v7)
  {
    __break(1u);
  }
  else
  {
    sub_10006BF3C(*(unsigned int *)(v0 + 12), *v5 + v7, *v5 + v7 + v2 - v7);
    UnsafeMutableRawBufferPointer.init(fastRebase:)();
    sub_10006FF90();
    return v1();
  }
  return result;
}

uint64_t ByteBuffer.writeWithUnsafeMutableBytes(minimumWritableBytes:_:)(Swift::Int a1, uint64_t (*a2)(uint64_t))
{
  if (a1 >= 1) {
    ByteBuffer.reserveCapacity(minimumWritableBytes:)(a1);
  }
  uint64_t result = sub_10006E410(v2, a2);
  if (!v3)
  {
    int v6 = *(_DWORD *)(v2 + 12);
    BOOL v7 = __CFADD__(v6, result);
    int v8 = v6 + result;
    if (v7) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v2 + 12) = v8;
    }
  }
  return result;
}

uint64_t ByteBuffer.writeWithUnsafeMutableBytes(_:)()
{
  uint64_t result = sub_10006E410(v0, (uint64_t (*)(uint64_t))sub_10006F880);
  if (!v1)
  {
    int v3 = *(_DWORD *)(v0 + 12);
    BOOL v4 = __CFADD__(v3, result);
    int v5 = v3 + result;
    if (v4) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v0 + 12) = v5;
    }
  }
  return result;
}

void ByteBuffer.withVeryUnsafeBytes<A>(_:)(void (*a1)(void, void), uint64_t a2, uint64_t a3)
{
  BOOL v4 = (void *)(a3 + 24);
  sub_10006FF20();
  sub_10007014C();
  if (v7) {
    a1(*v4 + v5, *v4 + v5 + v6);
  }
  else {
    __break(1u);
  }
}

void ByteBuffer.withVeryUnsafeMutableBytes<A>(_:)()
{
  sub_10006FFBC();
  sub_10006FFD4();
  unsigned int v2 = *(_DWORD *)(v0 + 16);
  int v3 = *(unsigned __int16 *)(v0 + 20);
  int v4 = *(unsigned __int8 *)(v0 + 22);
  sub_10006FF20();
  if (v2 < (v4 | (v3 << 8)))
  {
    __break(1u);
  }
  else
  {
    sub_10006FF90();
    v1();
    sub_10006FFA4();
  }
}

void sub_10006E70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, BOOL a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10006FFBC();
  a24 = v25;
  a25 = v26;
  uint64_t v28 = v27;
  unint64_t v30 = v29;
  uint64_t v32 = v31;
  unsigned int v34 = v33;
  unint64_t v35 = HIDWORD(v33);
  sub_10006FF20();
  if (v35 < v34)
  {
    __break(1u);
  }
  else
  {
    sub_1000700EC();
    sub_10006F3EC((const void *)(v36 + v34), v36 + v34 + v37, v32, v30, v28 & 0xFFFFFFFFFFFFFFLL, &a15);
    swift_release();
    sub_10006FFA4();
  }
}

uint64_t sub_10006E7B4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, void, void, void), uint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  unsigned int v13 = a2;
  unint64_t v14 = HIDWORD(a2);
  BOOL v15 = (void *)(a1 + 24);
  sub_10006FF20();
  if (v14 < v13)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((a7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    sub_10003C4F8();
    sub_10003C6E8();
LABEL_10:
    uint64_t result = sub_10024F660();
    __break(1u);
    return result;
  }
  if (HIDWORD(a7))
  {
    sub_10003C4F8();
    sub_10003C6D8();
    goto LABEL_10;
  }
  uint64_t v16 = *v15 + ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)) + v13;
  uint64_t v17 = a4(v16, v16 + v14 - v13, a6, a7, a8[5], a8[6], a8[7]);
  if (!v19) {
    unint64_t v14 = v17;
  }
  sub_10006FDA4((uint64_t)a8);
  return v14;
}

void ByteBuffer.withUnsafeReadableBytes<A>(_:)()
{
  sub_10006FFBC();
  unsigned int v1 = v0;
  int v3 = v2;
  unint64_t v4 = HIDWORD(v0);
  sub_10006FF20();
  if (v4 < v1)
  {
    __break(1u);
  }
  else
  {
    sub_1000700EC();
    v3(v5 + v1, v5 + v1 + v6);
    sub_10006FFA4();
  }
}

void ByteBuffer.withUnsafeReadableBytesWithStorageManagement<A>(_:)()
{
  sub_10006FFBC();
  unint64_t v1 = v0;
  unsigned int v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  unint64_t v8 = HIDWORD(v2);
  sub_10006FF20();
  if (v8 < v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = *(void *)(v5 + 24) + ((v1 >> 24) & 0xFFFF00 | BYTE6(v1)) + v3;
    v7(v9, v9 + v8 - v3, v5);
    sub_10006FFA4();
  }
}

void ByteBuffer.withVeryUnsafeBytesWithStorageManagement<A>(_:)(void (*a1)(void, void, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_10006FF20();
  sub_10007014C();
  if (v7) {
    a1(*(void *)(a3 + 24) + v5, *(void *)(a3 + 24) + v5 + v6, a3);
  }
  else {
    __break(1u);
  }
}

uint64_t ByteBuffer.getSlice(at:length:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if ((a1 & 0x8000000000000000) == 0)
  {
    Swift::UInt32 v7 = a2;
    if ((a2 & 0x8000000000000000) == 0 && a4 <= a1 && (uint64_t)(HIDWORD(a4) - a2) >= a1)
    {
      int v9 = BYTE6(a5) | (WORD2(a5) << 8);
      Swift::UInt32 v10 = v9 + a1;
      if (__CFADD__(v9, a1))
      {
        __break(1u);
      }
      else
      {
        if (!HIBYTE(v10))
        {
          if (!__CFADD__(v10, a2))
          {
            _UInt24.init(_:)(0);
            _UInt24.init(_:)(v10);
            return swift_retain();
          }
          goto LABEL_16;
        }
        if (!__CFADD__(a1, a2))
        {
          swift_retain();
          ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v7, 1);
          return a3;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

Swift::Bool __swiftcall ByteBuffer.discardReadBytes()()
{
  int v1 = *((_DWORD *)v0 + 2);
  if (!v1) {
    goto LABEL_11;
  }
  if (v1 != *((_DWORD *)v0 + 3))
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v2 = *v0;
      LOBYTE(v3) = sub_10006FF20();
      unsigned int v4 = *((unsigned __int8 *)v0 + 22) | (*((unsigned __int16 *)v0 + 10) << 8);
      unsigned int v5 = *((_DWORD *)v0 + 2);
      if (__CFADD__(v4, v5))
      {
        __break(1u);
      }
      else
      {
        unsigned int v6 = *((_DWORD *)v0 + 3);
        size_t v7 = v6 - v5;
        if (v6 >= v5)
        {
          memmove((void *)(*(void *)(v2 + 24) + v4), (const void *)(*(void *)(v2 + 24) + v4 + v5), v7);
          *((_DWORD *)v0 + 2) = 0;
          *((_DWORD *)v0 + 3) = v7;
          goto LABEL_11;
        }
      }
      __break(1u);
    }
    else
    {
      Swift::UInt32 v3 = sub_1000700AC();
      if (v8)
      {
        ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v3, 1);
        goto LABEL_11;
      }
    }
    __break(1u);
    return v3;
  }
  v0[1] = 0;
LABEL_11:
  LOBYTE(v3) = v1 != 0;
  return v3;
}

Swift::Void __swiftcall ByteBuffer.clear(minimumCapacity:)(Swift::UInt32 minimumCapacity)
{
}

Swift::Void __swiftcall ByteBuffer.clear(minimumCapacity:)(Swift::Int minimumCapacity)
{
  if (HIDWORD(minimumCapacity))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = v1;
    Swift::UInt32 v3 = minimumCapacity;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v5 = *v1;
    if (isUniquelyReferenced_nonNull_native)
    {
      if (*(_DWORD *)(v5 + 16) < v3) {
        ByteBuffer._Storage.reallocStorage(capacity:)(v3);
      }
    }
    else
    {
      uint64_t *v2 = sub_10006C75C(v3);
      swift_release();
    }
    sub_100070054();
  }
}

void ByteBuffer.description.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v5 = HIDWORD(a2);
  sub_10024F330(136);
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v6._object = (void *)0x800000010027B9D0;
  sub_10024E800(v6);
  v7._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = (unsigned __int16)sub_100070198() | 0x7265746972770000;
  v8._object = (void *)0xEF203A7865646E49;
  sub_10024E800(v8);
  v9._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x800000010027B9F0;
  v10._countAndFlagsBits = 0xD000000000000011;
  sub_10024E800(v10);
  if (v5 < v4)
  {
    __break(1u);
  }
  else
  {
    v11._countAndFlagsBits = sub_10024F9E0();
    sub_10024E800(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = (unsigned __int16)sub_100070198() | 0x6963617061630000;
    v12._object = (void *)0xEC000000203A7974;
    sub_10024E800(v12);
    if (a3 >= ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)))
    {
      v13._countAndFlagsBits = sub_10024F9E0();
      sub_10024E800(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0xD000000000000013;
      v14._object = (void *)0x800000010027BA10;
      sub_10024E800(v14);
      v15._countAndFlagsBits = sub_10024F9E0();
      sub_10024E800(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = (unsigned __int16)sub_100070198() | 0x3A6563696C730000;
      v16._object = (void *)0xE900000000000020;
      sub_10024E800(v16);
      v17._countAndFlagsBits = _ByteBufferSlice.description.getter();
      sub_10024E800(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = (unsigned __int16)sub_100070198() | 0x6761726F74730000;
      v18._object = (void *)0xEB00000000203A65;
      sub_10024E800(v18);
      sub_10006FF20();
      sub_10024F5C0();
      v19._countAndFlagsBits = 10272;
      v19._object = (void *)0xE200000000000000;
      sub_10024E800(v19);
      v20._countAndFlagsBits = sub_10024F9E0();
      sub_10024E800(v20);
      swift_bridgeObjectRelease();
      v21._object = (void *)0xE90000000000007DLL;
      v21._countAndFlagsBits = 0x2029736574796220;
      sub_10024E800(v21);
      return;
    }
  }
  __break(1u);
}

void ByteBuffer.debugDescription.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = HIDWORD(a2);
  sub_10024F330(30);
  unint64_t v7 = a3 & 0xFFFFFFFFFFFFFFLL;
  ByteBuffer.description.getter(a1, a2, v7);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x800000010027BA30;
  v13._countAndFlagsBits = 0xD00000000000001ALL;
  sub_10024E800(v13);
  if (v6 < a2)
  {
    __break(1u);
  }
  else
  {
    __int16 v10 = a2;
    if ((v6 - a2) >= 0x400) {
      char v11 = 0;
    }
    else {
      char v11 = v6 - a2;
    }
    int v12 = v7;
    Swift::String v14 = ByteBuffer._Storage.dumpBytes(slice:offset:length:)(*(ASOctaneSupportXPCService::_ByteBufferSlice *)(&v10 - 2), v8, v9);
    sub_10024E800(v14);
    swift_bridgeObjectRelease();
  }
}

void sub_10006F130()
{
  ByteBuffer.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48));
}

uint64_t ByteBuffer.setBytes<A>(_:at:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3)
{
  ByteBuffer._setBytes<A>(_:at:)(a1, a2, a3);
  return result;
}

uint64_t ByteBuffer.setBytes(_:at:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  return ByteBuffer._setBytes(_:at:)(a1, a2, a3);
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  if (*(unsigned int *)(v1 + 12) < (unint64_t)to) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v1 + 8) = to;
  }
}

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 12);
  BOOL v3 = __CFADD__(v2, forwardBy);
  unsigned int v4 = v2 + forwardBy;
  if (v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unsigned int v5 = *(_DWORD *)(v1 + 16);
  unsigned int v6 = *(unsigned __int8 *)(v1 + 22) | (*(unsigned __int16 *)(v1 + 20) << 8);
  BOOL v3 = v5 >= v6;
  unsigned int v7 = v5 - v6;
  if (!v3) {
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    *(_DWORD *)(v1 + 12) = v4;
    return;
  }
LABEL_8:
  __break(1u);
}

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(to:)(Swift::Int to)
{
  sub_100070094();
  if (v4)
  {
    if (v3 >= v2)
    {
      *(_DWORD *)(v1 + 12) = v2;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ByteBuffer.copyBytes(at:to:length:)(Swift::Int at, Swift::Int to, Swift::Int length)
{
  if (length < 0)
  {
    char v5 = 0;
    goto LABEL_8;
  }
  unint64_t v4 = length;
  if (!length) {
    return v4;
  }
  if (*(unsigned int *)(v3 + 8) > at)
  {
LABEL_6:
    char v5 = 1;
LABEL_8:
    sub_10006F8A8();
    swift_allocError();
    char *v6 = v5;
    swift_willThrow();
    return v4;
  }
  if (__OFADD__(at, length))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (at + length > *(unsigned int *)(v3 + 12)) {
    goto LABEL_6;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    if (__OFADD__(to, v4))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 12) <= (to + v4)) {
      Swift::UInt32 v9 = to + v4;
    }
    else {
      Swift::UInt32 v9 = *(_DWORD *)(v3 + 12);
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v9, 0);
  }
  if (!HIDWORD(v4))
  {
    ByteBuffer._ensureAvailableCapacity(_:at:)(v4, to);
    int v10 = *(unsigned __int16 *)(v3 + 20);
    int v11 = *(unsigned __int8 *)(v3 + 22);
    int v12 = (void *)(*(void *)v3 + 24);
    sub_10006FF20();
    unsigned int v13 = v11 | (v10 << 8);
    unsigned int v14 = *(_DWORD *)(v3 + 16);
    BOOL v15 = v14 >= v13;
    unsigned int v16 = v14 - v13;
    if (v15)
    {
      sub_10006BF3C(to, *v12 + v13, *v12 + v13 + v16);
      UnsafeMutableRawBufferPointer.init(fastRebase:)();
      sub_10024F100();
      return v4;
    }
    goto LABEL_21;
  }
LABEL_23:
  sub_10003C4F8();
  sub_10003C6D8();
  Swift::Int result = sub_10024F660();
  __break(1u);
  return result;
}

void *ByteBuffer.CopyBytesError.negativeLength.unsafeMutableAddressor()
{
  return &static ByteBuffer.CopyBytesError.negativeLength;
}

void *ByteBuffer.CopyBytesError.unreadableSourceBytes.unsafeMutableAddressor()
{
  return &static ByteBuffer.CopyBytesError.unreadableSourceBytes;
}

uint64_t ByteBuffer.CopyBytesError.debugDescription.getter()
{
  return sub_10024E700();
}

uint64_t sub_10006F3E4()
{
  return ByteBuffer.CopyBytesError.debugDescription.getter();
}

uint64_t sub_10006F3EC@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, BOOL *a6@<X8>)
{
  unsigned int v7 = a4;
  unint64_t v12 = HIDWORD(a4);
  uint64_t result = swift_beginAccess();
  if (v12 < v7)
  {
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = memcmp(a1, (const void *)(*(void *)(a3 + 24) + ((a5 >> 24) & 0xFFFF00 | BYTE6(a5)) + v7), a2 - (void)a1);
    *a6 = result == 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006F4A4(uint64_t a1, uint64_t a2)
{
  return static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48));
}

uint64_t ByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = a3;
  unint64_t v4 = HIDWORD(a3);
  uint64_t result = sub_10006FF20();
  if (v4 >= v3) {
    return sub_10024FC10();
  }
  __break(1u);
  return result;
}

Swift::Int ByteBuffer.hashValue.getter(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = HIDWORD(a2);
  sub_10024FC00();
  Swift::Int result = sub_10006FF20();
  if (v3 < v2)
  {
    __break(1u);
  }
  else
  {
    sub_10024FC10();
    return sub_10024FC70();
  }
  return result;
}

Swift::Int sub_10006F5F0()
{
  return ByteBuffer.hashValue.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_10006F60C(uint64_t a1)
{
  return ByteBuffer.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_10006F628()
{
  unsigned int v1 = *(_DWORD *)(v0 + 8);
  unsigned int v2 = *(_DWORD *)(v0 + 12);
  sub_10024FC00();
  Swift::Int result = swift_beginAccess();
  if (v2 < v1)
  {
    __break(1u);
  }
  else
  {
    sub_10024FC10();
    return sub_10024FC70();
  }
  return result;
}

uint64_t ByteBuffer.modifyIfUniquelyOwned<A>(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t result = a1(v3);
    if (v4) {
      return result;
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  return sub_1000195B4(a3, v9, 1, a2);
}

int64_t ByteBuffer.rangeWithinReadableBytes(index:length:)(int64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = result - a4;
  if (__OFSUB__(result, a4))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = 0;
  if ((v4 & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a4) >= a4)
    {
      if ((HIDWORD(a4) - a4) - a2 < v4) {
        return 0;
      }
      if (!__OFADD__(v4, a2))
      {
        if (v4 + a2 >= v4) {
          return v4;
        }
LABEL_15:
        __break(1u);
        return result;
      }
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t type metadata accessor for ByteBuffer._Storage()
{
  return self;
}

unint64_t sub_10006F7E4()
{
  unint64_t result = qword_10030C108;
  if (!qword_10030C108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C108);
  }
  return result;
}

uint64_t sub_10006F830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if (a1) {
    uint64_t v5 = a1 + a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = ByteBuffer._setBytes(_:at:)(a1, v5, *(_DWORD *)(v3 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_10006F880()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10006F8A8()
{
  unint64_t result = qword_10030C118;
  if (!qword_10030C118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C118);
  }
  return result;
}

unint64_t sub_10006F8F8()
{
  unint64_t result = qword_10030C120;
  if (!qword_10030C120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C120);
  }
  return result;
}

unint64_t sub_10006F948()
{
  unint64_t result = qword_10030C128;
  if (!qword_10030C128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C128);
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for _ByteBufferSlice(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _ByteBufferSlice(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ByteBufferSlice(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 7) = v3;
  return result;
}

void type metadata accessor for _ByteBufferSlice()
{
}

uint64_t getEnumTagSinglePayload for ByteBufferAllocator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBufferAllocator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ByteBufferAllocator()
{
}

uint64_t destroy for ByteBuffer()
{
  return swift_release();
}

uint64_t _s25ASOctaneSupportXPCService10ByteBufferVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ByteBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  return a1;
}

uint64_t assignWithTake for ByteBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBuffer(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 23))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 23) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 23) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ByteBuffer()
{
}

void type metadata accessor for ByteBuffer.CopyBytesError()
{
}

unsigned char *_s25ASOctaneSupportXPCService10ByteBufferV14CopyBytesErrorV9BaseErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006FD1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer.CopyBytesError.BaseError()
{
  return &type metadata for ByteBuffer.CopyBytesError.BaseError;
}

unint64_t sub_10006FD58()
{
  unint64_t result = qword_10030C1E0;
  if (!qword_10030C1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C1E0);
  }
  return result;
}

uint64_t sub_10006FDA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_release();
  swift_release();
  swift_release();
  sub_10003B918(v2, v3);
  return a1;
}

uint64_t sub_10006FE10(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10006FE5C(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(a1), a1);
      int v5 = HIDWORD(a1) - a1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10006FEBCLL);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = a1 + 16;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(a2);
  }
}

unint64_t sub_10006FECC()
{
  unint64_t result = qword_10030C1F0;
  if (!qword_10030C1F0)
  {
    sub_10024DF50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C1F0);
  }
  return result;
}

uint64_t sub_10006FF20()
{
  return swift_beginAccess();
}

uint64_t sub_10006FF38()
{
  *(unsigned char *)(*(void *)(v1 + 24) + (v2 | (v3 << 8)) + v5 + v4) = v0;
  return sub_10024F0E0();
}

void sub_10006FF6C()
{
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(v0 + 16);
  *(_WORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 22) = 0;
}

void sub_10006FFD4()
{
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
}

void sub_10006FFF4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100070010()
{
  return *(void *)(v0 - 120);
}

uint64_t sub_10007002C()
{
  uint64_t v6 = *(void *)(v4 - 120);
  return Data._copyContents(initializing:)(v6, v0, v1, v3, v2);
}

void sub_100070054()
{
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(*(void *)v0 + 16);
  *(_WORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 22) = 0;
  *(void *)(v0 + 8) = 0;
}

uint64_t sub_100070070()
{
  return sub_10024DF50();
}

uint64_t sub_1000700AC()
{
  return *(_DWORD *)(v0 + 16) - (*(unsigned __int8 *)(v0 + 22) | (*(unsigned __int16 *)(v0 + 20) << 8));
}

__n128 sub_1000700C4()
{
  return v0[2];
}

uint64_t sub_100070104()
{
  return sub_10024F0E0();
}

uint64_t sub_100070128()
{
  *(void *)(v3 - 144) = v1;
  Swift::UInt32 v5 = *(_DWORD *)(v3 - 124);
  return sub_10006DF38(v2, v0, v5);
}

void sub_100070164()
{
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(v1 + 16);
  *(_WORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 22) = 0;
}

uint64_t sub_10007018C()
{
  return v0;
}

uint64_t sub_100070198()
{
  return 8236;
}

uint64_t sub_1000701D8()
{
  return swift_allocObject();
}

uint64_t sub_1000701F8()
{
  return swift_beginAccess();
}

void *sub_100070218()
{
  uint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    unint64_t v2 = sub_1000C2720(0xD00000000000001BLL, 0x800000010027BB30, 1819112552, 0xE400000000000000);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_100021534(v3);
  }
  sub_10002158C(v1);
  return v2;
}

uint64_t sub_1000702BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  uint64_t v8 = sub_100212134();
  uint64_t v9 = sub_100161540(0x6D614E726566666FLL, 0xE900000000000065, v8);
  if (v10)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v4 = sub_100161540(6580578, 0xE300000000000000, v8);
    uint64_t v3 = v13;
    swift_bridgeObjectRelease();
    if (v3)
    {
      Swift::UInt32 v5 = (ValueMetadata *)(v6 + 48);
      sub_10001C2A8((void *)(v6 + 48), *(void *)(v6 + 72));
      sub_10008A5FC(v4, (uint64_t)v3);
      uint64_t v2 = sub_1000FE198(v11, (uint64_t)v12);
      swift_release();
      if (v2)
      {
        swift_bridgeObjectRelease();
        sub_1000707E8();
        unint64_t v14 = swift_bridgeObjectRetain();
        uint64_t v15 = sub_1000F072C(v14);
        swift_release();
        swift_bridgeObjectRelease();
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 40);
          uint64_t v39 = *(void *)(v15 + 32);
          swift_bridgeObjectRetain();
          swift_release();
        }
        else
        {
          uint64_t v39 = sub_10020F734();
          uint64_t v16 = v19;
        }
        sub_10001C2A8((void *)(v6 + 48), *(void *)(v6 + 72));
        swift_bridgeObjectRetain();
        sub_10008A3E4(&v41);
        sub_1000707E8();
        uint64_t v38 = sub_10005148C();
        uint64_t v40 = v20;
        sub_10001DB0C((uint64_t)&v41);
        swift_release();
        swift_bridgeObjectRelease();
        LODWORD(v8) = v6;
        Swift::String v21 = sub_100070218();
        if (v21)
        {
          uint64_t v23 = (uint64_t)v21;
          Swift::Int v37 = v22;
          type metadata accessor for AppIconRoute();
          unint64_t v24 = sub_10006ACC8(v4, v3);
          uint64_t v36 = v16;
          uint64_t v26 = v25;
          sub_10001C2A8((void *)(v6 + 48), *(void *)(v6 + 72));
          uint64_t v27 = sub_10008A4B8(v4, (uint64_t)v3);
          uint64_t v29 = v28;
          swift_bridgeObjectRelease();
          unsigned __int16 v44 = &type metadata for ConfirmPurchaseEngagementUIRoute.ViewProperties;
          unint64_t v30 = (void *)swift_allocObject();
          v43[0] = v30;
          void v30[2] = v24;
          v30[3] = v26;
          v30[4] = v27;
          v30[5] = v29;
          void v30[6] = v39;
          v30[7] = v36;
          v30[8] = v38;
          void v30[9] = v40;
          uint64_t v31 = sub_1000C2DBC((uint64_t)v43, v23, v37);
          unint64_t v33 = v32;
          swift_bridgeObjectRelease();
          sub_10001C2EC((uint64_t)v43);
          sub_1000CB5C8(v31, v33, 1, (uint64_t)v43);
          uint64_t v3 = (void *)v43[0];
          uint64_t v6 = v43[1];
          uint64_t v4 = v43[2];
          Swift::UInt32 v5 = v44;
          uint64_t v8 = v45;
          uint64_t v34 = v46;
          uint64_t v35 = v47;
          swift_release();
          uint64_t v2 = v8 | (v34 << 32) | (v35 << 48);
          HTTPVersion.init(major:minor:)(1, 1);
          sub_10006711C();
          uint64_t result = sub_100022D50();
          uint64_t v18 = 3;
          goto LABEL_13;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        HTTPVersion.init(major:minor:)(1, 1);
        sub_10006711C();
        uint64_t result = sub_100022D50();
        uint64_t v3 = 0;
        uint64_t v6 = 0;
        uint64_t v4 = 0;
        Swift::UInt32 v5 = 0;
        uint64_t v2 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_10024F330(19);
        swift_bridgeObjectRelease();
        uint64_t v41 = 0xD000000000000011;
        unint64_t v42 = 0x800000010027BB10;
        uint64_t v8 = (uint64_t)&v41;
        v48._countAndFlagsBits = v11;
        v48._object = v12;
        sub_10024E800(v48);
        swift_bridgeObjectRelease();
        sub_1000CB5C8(v41, v42, 6, (uint64_t)&v41);
        sub_1000707B4();
        sub_10006711C();
        uint64_t result = sub_100022D50();
      }
      uint64_t v18 = 49;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  sub_1000CB5C8(0x7571657220646142, 0xEB00000000747365, 6, (uint64_t)&v41);
  sub_1000707B4();
  sub_10006711C();
  uint64_t result = sub_100022D50();
  uint64_t v18 = 21;
LABEL_13:
  *(void *)(result + 16) = 0;
  *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(result + 32) = v18;
  *(_DWORD *)(result + 40) = v8;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 62) = BYTE6(v2);
  *(_WORD *)(a1 + 60) = WORD2(v2);
  *(_DWORD *)(a1 + 56) = v2;
  return result;
}

unint64_t sub_1000706E4(Swift::String a1)
{
  return 0xD00000000000001BLL;
}

uint64_t type metadata accessor for ConfirmPurchaseEngagementUIRoute()
{
  return self;
}

uint64_t sub_100070754()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 80, 7);
}

ValueMetadata *type metadata accessor for ConfirmPurchaseEngagementUIRoute.ViewProperties()
{
  return &type metadata for ConfirmPurchaseEngagementUIRoute.ViewProperties;
}

ASOctaneSupportXPCService::HTTPVersion sub_1000707B4()
{
  return HTTPVersion.init(major:minor:)(1, 1);
}

uint64_t sub_1000707E8()
{
  sub_10001C2A8(v1, *(void *)(v0 + 72));
  return sub_10008A7F0();
}

uint64_t ChannelPipeline.syncOperations.getter()
{
  return swift_retain();
}

uint64_t NIOClientTCPBootstrapProtocol._applyChannelConvenienceOptions(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t NIOClientTCPBootstrap.channelConvenienceOptions(_:)@<X0>(int a1@<W0>, void *a2@<X8>)
{
  __int16 v20 = a1 & 0x101;
  char v21 = BYTE2(a1) & 1;
  sub_10007095C((uint64_t)v2, (uint64_t)v15);
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  sub_10001C2A8(v2, v4);
  uint64_t v6 = *(void (**)(__int16 *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  sub_1000709B8((uint64_t *)&v12);
  v6(&v20, v4, v5);
  sub_10002F754(&v12, (uint64_t)v10);
  uint64_t v8 = v16;
  uint64_t v7 = v17;
  swift_retain();
  sub_100070A1C((uint64_t)v15);
  *((void *)&v11 + 1) = v8;
  uint64_t v19 = v7;
  v18[0] = v10[0];
  v18[1] = v10[1];
  long long v18[2] = v11;
  sub_100070A70((uint64_t)v18, a2);
  return sub_100070A1C((uint64_t)v18);
}

uint64_t sub_10007095C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1000709B8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100070A1C(uint64_t a1)
{
  return a1;
}

double sub_100070A70@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10007095C(a1, (uint64_t)a2);
  int v6 = *v2;
  unsigned __int8 *v2 = 0;
  if (v6 == 1)
  {
    uint64_t v65 = 0x40000FFFFLL;
    HIDWORD(v62) = 1;
    uint64_t v7 = sub_10001C2A8(a2, a2[3]);
    sub_100071DB0((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v59, v62, 0x40000FFFFLL, v66, *((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68);
    sub_100071D38();
    sub_100071DD4();
    v3();
    uint64_t v15 = a2[6];
    uint64_t v69 = a2[5];
    uint64_t v70 = v15;
    swift_retain();
    uint64_t v16 = sub_100070A1C((uint64_t)a2);
    *(void *)&double result = sub_100071D84(v16, v17, v18, v19, v20, v21, v22, v23, v60, v63, v65, v66, v67, v24, v68).n128_u64[0];
  }
  int v25 = v2[2];
  v2[2] = 0;
  if (v25 == 1)
  {
    LOBYTE(v65) = 1;
    uint64_t v26 = sub_10001C2A8(a2, a2[3]);
    sub_100071DB0((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v59, v62, v65, v66, *((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68);
    sub_100071CEC();
    sub_100071DD4();
    v3();
    uint64_t v34 = a2[6];
    uint64_t v69 = a2[5];
    uint64_t v70 = v34;
    swift_retain();
    uint64_t v35 = sub_100070A1C((uint64_t)a2);
    *(void *)&double result = sub_100071D84(v35, v36, v37, v38, v39, v40, v41, v42, v61, v64, v65, v66, v67, v43, v68).n128_u64[0];
  }
  int v44 = v2[1];
  v2[1] = 0;
  if (v44 == 1)
  {
    LOBYTE(v65) = 0;
    uint64_t v45 = a2[3];
    uint64_t v46 = a2[4];
    sub_10001C2A8(a2, v45);
    unsigned __int8 v47 = *(void (**)(unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v46 + 24);
    *((void *)&v67 + 1) = v45;
    uint64_t v68 = v46;
    sub_1000709B8((uint64_t *)&v66);
    unint64_t v48 = sub_100071CA0();
    v47(v48, &v65, &type metadata for ChannelOptions.Types.AutoReadOption, v48, v45, v46);
    uint64_t v49 = a2[6];
    uint64_t v69 = a2[5];
    uint64_t v70 = v49;
    swift_retain();
    uint64_t v50 = sub_100070A1C((uint64_t)a2);
    *(void *)&double result = sub_100071D84(v50, v51, v52, v53, v54, v55, v56, v57, v59, v62, v65, v66, v67, v58, v68).n128_u64[0];
  }
  return result;
}

BOOL ChannelOptions.Types.ConvenienceOptionValue<A>.isSet.getter(char a1)
{
  return (a1 & 1) == 0;
}

void *ChannelOptions.TCPConvenienceOption.allowLocalEndpointReuse.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.allowLocalEndpointReuse;
}

void *ChannelOptions.TCPConvenienceOption.disableAutoRead.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.disableAutoRead;
}

void *ChannelOptions.TCPConvenienceOption.allowRemoteHalfClosure.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.allowRemoteHalfClosure;
}

uint64_t ChannelOptions.TCPConvenienceOptions.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    char v4 = 0;
    char v5 = 0;
    do
    {
      while (*(unsigned char *)(a1 + 32 + v2) == 1)
      {
        ++v2;
        char v4 = 1;
        if (v1 == v2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      if (*(unsigned char *)(a1 + 32 + v2)) {
        int v3 = 0x10000;
      }
      else {
        char v5 = 1;
      }
    }
    while (v1 - 1 != v2++);
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    int v7 = 256;
  }
  else
  {
    swift_bridgeObjectRelease();
    int v3 = 0;
    char v5 = 0;
LABEL_14:
    int v7 = 0;
  }
  return v7 | v3 | v5 & 1u;
}

uint64_t ChannelOptions.TCPConvenienceOptions.add(_:)(uint64_t result)
{
  if ((_BYTE)result)
  {
    if (result == 1) {
      ++v1;
    }
    else {
      v1 += 2;
    }
  }
  *uint64_t v1 = 1;
  return result;
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeAllowLocalEndpointReuse()()
{
  char v1 = *v0;
  *uint64_t v0 = 0;
  return sub_100071DA4(v1);
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeDisableAutoRead()()
{
  char v1 = *(unsigned char *)(v0 + 1);
  *(unsigned char *)(v0 + 1) = 0;
  return sub_100071DA4(v1);
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeAllowRemoteHalfClosure()()
{
  char v1 = *(unsigned char *)(v0 + 2);
  *(unsigned char *)(v0 + 2) = 0;
  return sub_100071DA4(v1);
}

void ChannelOptions.TCPConvenienceOptions.hash(into:)(uint64_t a1, int a2)
{
}

BOOL static ChannelOptions.TCPConvenienceOptions.__derived_struct_equals(_:_:)(int a1, unsigned int a2)
{
  return sub_100071DA4(a1 ^ a2 | ((unsigned __int16)(a1 ^ a2) >> 8) | ((a1 ^ a2) >> 16));
}

Swift::Int ChannelOptions.TCPConvenienceOptions.hashValue.getter(int a1)
{
  sub_10024FC00();
  ChannelOptions.TCPConvenienceOptions.hash(into:)((uint64_t)v3, a1 & 0x10101);
  return sub_10024FC70();
}

uint64_t sub_100070DF0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = ChannelOptions.TCPConvenienceOptions.init(arrayLiteral:)(a1);
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  a2[2] = (result & 0xFFFF0000) != 0;
  return result;
}

Swift::Int sub_100070E30()
{
  if (v0[2]) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  if (v0[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return ChannelOptions.TCPConvenienceOptions.hashValue.getter(v2 | *v0 | v1);
}

void sub_100070E60(uint64_t a1)
{
  if (v1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  ChannelOptions.TCPConvenienceOptions.hash(into:)(a1, v3 | *v1 | v2);
}

Swift::Int sub_100070E90()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  sub_10024FC00();
  if (v3) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (v2) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  ChannelOptions.TCPConvenienceOptions.hash(into:)((uint64_t)v7, v5 | v1 | v4);
  return sub_10024FC70();
}

unint64_t sub_100070F04()
{
  unint64_t result = qword_10030C2F8;
  if (!qword_10030C2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C2F8);
  }
  return result;
}

unint64_t sub_100070F54()
{
  unint64_t result = qword_10030C300[0];
  if (!qword_10030C300[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10030C300);
  }
  return result;
}

BOOL sub_100070FA0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (a1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  int v4 = v3 | *a1 | v2;
  if (a2[2]) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (a2[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return static ChannelOptions.TCPConvenienceOptions.__derived_struct_equals(_:_:)(v4, v6 | *a2 | v5);
}

uint64_t sub_100070FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_100070FFC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_100071078(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if (sub_10001FA0C((uint64_t)a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    sub_1000195B4((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_100071194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_10001FA0C(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_100071210(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001FA0C((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    sub_1000195B4((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1000712D4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001FA0C((uint64_t)a1, 1, v5);
  int v7 = sub_10001FA0C((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      sub_1000195B4((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

void *sub_1000713FC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001FA0C((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    sub_1000195B4((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1000714C0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001FA0C((uint64_t)a1, 1, v5);
  int v7 = sub_10001FA0C((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      sub_1000195B4((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

uint64_t sub_1000715E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 > 3) {
            LODWORD(v7) = 4;
          }
          switch((int)v7)
          {
            case 2:
              LODWORD(v7) = *a1;
              break;
            case 3:
              LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v7) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v7) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v7 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v14 = sub_10001FA0C((uint64_t)a1, v5, v4);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void sub_10007176C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v9) {
    size_t v11 = *(void *)(v8 + 64);
  }
  else {
    size_t v11 = *(void *)(v8 + 64) + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        int v6 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v6 = 2;
      }
      else
      {
        int v6 = v15 > 1;
      }
    }
    else
    {
      int v6 = 1;
    }
  }
  if (v10 < a2)
  {
    unsigned int v16 = ~v10 + a2;
    if (v11 < 4)
    {
      int v17 = (v16 >> v12) + 1;
      if (v11)
      {
        int v18 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x10007198CLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v9 >= 2)
        {
          uint64_t v19 = a2 + 1;
          sub_1000195B4((uint64_t)a1, v19, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_1000719B4(uint64_t a1, uint64_t a2)
{
  return sub_10001FA0C(a1, 1, *(void *)(a2 + 16));
}

uint64_t sub_1000719C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000195B4(a1, a2, 1, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for ChannelOptions.Types.ConvenienceOptionValue()
{
  return sub_10002F7A4();
}

ValueMetadata *type metadata accessor for ChannelOptions.TCPConvenienceOption()
{
  return &type metadata for ChannelOptions.TCPConvenienceOption;
}

uint64_t _s21TCPConvenienceOptionsVwCP(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t _s21TCPConvenienceOptionsVwet(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        goto LABEL_5;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
      {
LABEL_5:
        int v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
        return (v3 + 1);
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v3 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t _s21TCPConvenienceOptionsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)uint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelOptions.TCPConvenienceOptions()
{
  return &type metadata for ChannelOptions.TCPConvenienceOptions;
}

unsigned char *_s20TCPConvenienceOptionV17ConvenienceOptionOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100071BECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s20TCPConvenienceOptionV17ConvenienceOptionOMa()
{
  return &_s20TCPConvenienceOptionV17ConvenienceOptionON;
}

unint64_t sub_100071C28()
{
  unint64_t result = qword_10030C388;
  if (!qword_10030C388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C388);
  }
  return result;
}

uint64_t sub_100071C74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ChannelPipeline.syncOperations.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100071CA0()
{
  unint64_t result = qword_10030C390;
  if (!qword_10030C390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C390);
  }
  return result;
}

unint64_t sub_100071CEC()
{
  unint64_t result = qword_10030C398;
  if (!qword_10030C398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C398);
  }
  return result;
}

unint64_t sub_100071D38()
{
  unint64_t result = qword_10030C3A0;
  if (!qword_10030C3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C3A0);
  }
  return result;
}

__n128 sub_100071D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, long long a13, __n128 a14, uint64_t a15)
{
  *(_OWORD *)uint64_t v15 = a12;
  *(_OWORD *)(v15 + 16) = a13;
  __n128 result = a14;
  *(__n128 *)(v15 + 32) = a14;
  *(void *)(v15 + 48) = a15;
  return result;
}

BOOL sub_100071DA4@<W0>(char a1@<W8>)
{
  return (a1 & 1) == 0;
}

uint64_t *sub_100071DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a15 = v16;
  a16 = v17;
  return sub_1000709B8(&a12);
}

void sub_100071DE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IAPTransaction();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047280(a1 + 56, (uint64_t)v76);
  sub_100047280((uint64_t)v76, (uint64_t)&v103);
  if (!*(void *)v104)
  {
    unsigned int v12 = HTTPVersion.init(major:minor:)(1, 1);
    Swift::UInt16 v13 = v12;
    unsigned int v14 = HIWORD(v12);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v19 = 0uLL;
    *(_OWORD *)(v15 + 16) = 0u;
    *(void *)(v15 + 32) = 21;
    *(_WORD *)(v15 + 40) = v13;
    *(_WORD *)(v15 + 42) = v14;
LABEL_29:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
    *(unsigned char *)(a2 + 16) = 2;
    *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
    *(void *)(a2 + 40) = v16;
    *(void *)(a2 + 48) = v17;
    *(unsigned char *)(a2 + 62) = BYTE6(v18);
    *(_WORD *)(a2 + 60) = WORD2(v18);
    *(_DWORD *)(a2 + 56) = v18;
    return;
  }
  long long v101 = v103;
  *(_OWORD *)uint64_t v102 = *(_OWORD *)v104;
  *(void *)&v102[15] = *(void *)&v104[15];
  uint64_t v9 = sub_1000CB7C4();
  unint64_t v11 = v10;
  sub_10024DC80();
  swift_allocObject();
  sub_10024DC70();
  sub_100072458();
  sub_10024DC60();
  unint64_t v57 = v11;
  swift_release();
  uint64_t v20 = v77;
  uint64_t v61 = v78;
  uint64_t v58 = v80;
  unint64_t v54 = v82;
  uint64_t v55 = v84;
  uint64_t v51 = v85;
  uint64_t v52 = v79;
  uint64_t v53 = v86;
  uint64_t v21 = v63;
  uint64_t v22 = sub_10001C2A8((void *)(v63 + 88), *(void *)(v63 + 112));
  uint64_t v23 = *v22;
  __n128 v24 = *(os_unfair_lock_s **)(*(void *)(*v22 + 128) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  *(unsigned char *)(v23 + 112) = 0;
  os_unfair_lock_unlock(v24);
  swift_release();
  uint64_t v25 = *(void *)(v21 + 112);
  uint64_t v62 = v21 + 88;
  sub_10001C2A8((void *)(v21 + 88), v25);
  uint64_t v59 = v20;
  unint64_t v26 = (unint64_t)sub_1000A0F20();
  unint64_t v27 = v26;
  uint64_t v56 = v9;
  if (v26 >> 62)
  {
    uint64_t v28 = sub_10024F6F0();
    if (!v28) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v28) {
      goto LABEL_12;
    }
  }
  if (v28 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v29 = 0;
  do
  {
    if ((v27 & 0xC000000000000001) != 0) {
      id v30 = (id)sub_10024F380();
    }
    else {
      id v30 = *(id *)(v27 + 8 * v29 + 32);
    }
    uint64_t v31 = v30;
    ++v29;
    sub_1000724A4();
    uint64_t v32 = (void *)sub_10009E82C(v31, 1);
  }
  while (v28 != v29);
LABEL_12:
  swift_bridgeObjectRelease();
  char v66 = 1;
  char v69 = 0;
  sub_1000724A4();
  unint64_t v33 = sub_1000A01A0();
  unint64_t v34 = v33;
  if (v33 >> 62) {
    uint64_t v35 = sub_10024F6F0();
  }
  else {
    uint64_t v35 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v60 = v35;
  if (!v35)
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_25:
    char v66 = 0;
    if (v53)
    {
      sub_1000724A4();
      swift_bridgeObjectRetain();
      sub_1000A021C();
      uint64_t v42 = v41;
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = 0;
      unint64_t v44 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    long long v79 = _swiftEmptyArrayStorage;
    LOBYTE(v80) = v69;
    BYTE1(v80) = 3;
    *(_DWORD *)((char *)&v80 + 2) = v67;
    HIWORD(v80) = v68;
    uint64_t v81 = 0x3233363232333731;
    unint64_t v82 = 0xEB00000000373231;
    uint64_t v83 = v60;
    LOBYTE(v84) = v66;
    HIDWORD(v84) = *(_DWORD *)&v65[3];
    *(_DWORD *)((char *)&v84 + 1) = *(_DWORD *)v65;
    uint64_t v85 = v38;
    uint64_t v86 = v42;
    unint64_t v87 = v44;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 1;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    char v95 = 22;
    *(_DWORD *)uint64_t v96 = *(_DWORD *)v64;
    *(_DWORD *)&v96[3] = *(_DWORD *)&v64[3];
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v97 = 0;
    char v100 = 2;
    sub_1000636BC(&v77);
    sub_1001E67C4(&v77);
    long long v63 = v70;
    uint64_t v16 = v71;
    uint64_t v17 = v72;
    uint64_t v45 = v73;
    uint64_t v46 = v74;
    uint64_t v47 = v75;
    sub_10003F808(v56, v57);
    uint64_t v18 = v45 | (v46 << 32) | (v47 << 48);
    unsigned int v48 = HTTPVersion.init(major:minor:)(1, 1);
    LOWORD(v45) = v48;
    LODWORD(v47) = HIWORD(v48);
    sub_10006382C(&v77);
    type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v15 = swift_allocObject();
    long long v19 = v63;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(v15 + 32) = 3;
    *(_WORD *)(v15 + 40) = v45;
    *(_WORD *)(v15 + 42) = v47;
    goto LABEL_29;
  }
  uint64_t v50 = a2;
  uint64_t v77 = _swiftEmptyArrayStorage;
  sub_100038EA8();
  uint64_t v36 = v60;
  if ((v60 & 0x8000000000000000) == 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v77;
    do
    {
      if ((v34 & 0xC000000000000001) != 0) {
        id v39 = (id)sub_10024F380();
      }
      else {
        id v39 = *(id *)(v34 + 8 * v37 + 32);
      }
      sub_1001F99F0(v39, 0, (uint64_t)v8);
      uint64_t v77 = v38;
      unint64_t v40 = v38[2];
      if (v40 >= v38[3] >> 1)
      {
        sub_100038EA8();
        uint64_t v36 = v60;
        uint64_t v38 = v77;
      }
      ++v37;
      v38[2] = v40 + 1;
      sub_100047334((uint64_t)v8, (uint64_t)v38+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v40);
    }
    while (v36 != v37);
    swift_bridgeObjectRelease();
    a2 = v50;
    goto LABEL_25;
  }
LABEL_34:
  __break(1u);
}

uint64_t type metadata accessor for InAppRegrantPurchaseHistoryRoute()
{
  return self;
}

unint64_t sub_100072458()
{
  unint64_t result = qword_10030C480;
  if (!qword_10030C480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C480);
  }
  return result;
}

void *sub_1000724A4()
{
  return sub_10001C2A8(*(void **)(v0 + 104), *(void *)(*(void *)(v0 + 112) + 112));
}

void sub_1000724C4()
{
  Swift::Int v2 = sub_100055EC8();
  if (!v1)
  {
    Swift::Int v3 = *(void *)(v0 + 32);
    if (v3 < v2) {
      __break(1u);
    }
    else {
      sub_1000729DC(v2, v3);
    }
  }
}

uint64_t ByteBufferView._buffer.getter()
{
  return swift_retain();
}

uint64_t SocketAddressError.FailedToParseIPByteBuffer.address.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v4 = a3;
  int v5 = a2;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIDWORD(a3);
  unint64_t v9 = HIWORD(a3);
  uint64_t result = swift_release();
  *(void *)uint64_t v3 = a1;
  *(_DWORD *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 12) = v7;
  *(_DWORD *)(v3 + 16) = v4;
  *(_WORD *)(v3 + 20) = v8;
  *(unsigned char *)(v3 + 22) = v9;
  return result;
}

uint64_t ByteBufferView._range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView._range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t ByteBufferView.init(buffer:range:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v6 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v7 = a3 >= v6;
  uint64_t v8 = a3 - v6;
  if (v7)
  {
    if ((a4 & 0x8000000000000000) == 0 && v8 >= a5)
    {
      *(void *)a6 = result;
      *(void *)(a6 + 8) = a2;
      *(_DWORD *)(a6 + 16) = a3;
      *(_WORD *)(a6 + 20) = WORD2(a3);
      *(unsigned char *)(a6 + 22) = BYTE6(a3);
      *(void *)(a6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
      *(void *)(a6 + 32) = a5;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ByteBufferView.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unsigned int v4 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v5 = a3 >= v4;
  unsigned int v6 = a3 - v4;
  if (!v5) {
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= v6) {
    return sub_100075710(result, a2, a3, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

void ByteBufferView.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  _OWORD v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  ByteBuffer.withVeryUnsafeBytes<A>(_:)((void (*)(void, void))sub_100074EEC, (uint64_t)v6, v5);
}

uint64_t sub_1000726A8(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v5 = *(void *)(a5 + 24);
    uint64_t v6 = *(void *)(a5 + 32);
    BOOL v7 = __OFSUB__(v6, v5);
    uint64_t v8 = v6 - v5;
    if (!v7) {
      return a3(result + v5, result + v5 + v8);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ByteBufferView.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

Swift::Int __swiftcall Heap.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t ByteBufferView.subscript.getter(uint64_t result)
{
  if (*(void *)(v1 + 24) > result || *(void *)(v1 + 32) <= result)
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_1000756A8();
  Swift::Int result = sub_10007274C(v3, 0, v4, v5, v6);
  if ((result & 0x100) != 0) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t sub_10007274C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = result - a4;
  if (__OFSUB__(result, a4))
  {
    __break(1u);
  }
  else
  {
    if ((v5 & 0x8000000000000000) != 0) {
      goto LABEL_6;
    }
    if (HIDWORD(a4) >= a4)
    {
      if (v5 < (HIDWORD(a4) - a4))
      {
        uint64_t v8 = a4;
        sub_10004F1B0();
        int v9 = 0;
        int v10 = *(unsigned __int8 *)(*(void *)(a3 + 24) + ((a5 >> 24) & 0xFFFF00 | BYTE6(a5)) + v8 + v5);
        return v10 | (v9 << 8);
      }
LABEL_6:
      int v10 = 0;
      int v9 = 1;
      return v10 | (v9 << 8);
    }
  }
  __break(1u);
  return result;
}

uint64_t ByteBufferView.subscript.setter(char a1, uint64_t a2)
{
  if (*(void *)(v2 + 24) > a2)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (*(void *)(v2 + 32) <= a2) {
    goto LABEL_5;
  }
  char v4 = a1;
  return ByteBuffer._setBytes(_:at:)((uint64_t)&v4, (uint64_t)&v5, a2);
}

uint64_t ByteBufferView.subscript.modify(uint64_t result, uint64_t a2)
{
  *(void *)Swift::Int result = a2;
  *(void *)(result + 8) = v2;
  if (*(void *)(v2 + 24) > a2 || *(void *)(v2 + 32) <= a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    sub_10007568C();
    Swift::Int result = sub_10007274C(v5, 0, v6, v7, v8);
    if ((result & 0x100) == 0)
    {
      *(unsigned char *)(v4 + 16) = result;
      return (uint64_t)sub_1000728D4;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000728D4(uint64_t a1)
{
  return ByteBufferView.subscript.setter(*(unsigned char *)(a1 + 16), *(void *)a1);
}

uint64_t ByteBufferView.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = *(_DWORD *)(v3 + 16);
  int v6 = *(unsigned __int16 *)(v3 + 20);
  int v7 = *(unsigned __int8 *)(v3 + 22);
  unsigned int v8 = v7 | (v6 << 8);
  BOOL v9 = v5 >= v8;
  uint64_t v10 = v5 - v8;
  if (v9)
  {
    uint64_t v11 = result;
    if ((result & 0x8000000000000000) == 0 && v10 >= a2)
    {
      uint64_t v13 = *(void *)v3;
      uint64_t v14 = *(void *)(v3 + 8);
      Swift::Int result = sub_10001B078(v3);
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v5;
      *(_WORD *)(a3 + 20) = v6;
      *(unsigned char *)(a3 + 22) = v7;
      *(void *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
      *(void *)(a3 + 32) = a2;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ByteBufferView.subscript.setter(uint64_t *a1, uint64_t a2, Swift::Int at)
{
  sub_100072D1C(a2, at, a1);
  return sub_100074F0C((uint64_t)a1);
}

void sub_1000729DC(Swift::Int to, Swift::Int at)
{
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 > to)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)(v2 + 32);
  if (v5 < at)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = at - to;
  if (__OFSUB__(at, to))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7)
  {
    if (v7 <= 0)
    {
      uint64_t v11 = *(unsigned int *)(v2 + 12);
      if (!__OFSUB__(v11, at))
      {
        ByteBuffer.copyBytes(at:to:length:)(at, to, v11 - at);
        if (v12)
        {
LABEL_26:
          swift_unexpectedError();
          __break(1u);
          return;
        }
        sub_10006D4D0(to);
        if (!__OFSUB__(0, v7))
        {
          ByteBuffer.moveWriterIndex(forwardBy:)(-v7);
          uint64_t v13 = v5 - v7;
          if (!__OFADD__(v5, -v7))
          {
            if (v13 >= v3)
            {
              *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
              *(void *)(v2 + 32) = v13;
              return;
            }
            goto LABEL_25;
          }
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    sub_10006D4D0(to);
    uint64_t v8 = *(unsigned int *)(v2 + 12);
    if (!__OFSUB__(v8, at))
    {
      ByteBuffer.copyBytes(at:to:length:)(at, to, v8 - at);
      if (!v9)
      {
        ByteBuffer.moveWriterIndex(to:)(*(unsigned int *)(v2 + 12) - v7);
        *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100074004(v7, v3, v5);
        *(void *)(v2 + 32) = v10;
        return;
      }
      goto LABEL_26;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10006D4D0(to);
}

void sub_100072B64(uint64_t a1, Swift::Int at, char a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 > a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(v3 + 32);
  if (v6 < at)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = at - a1;
  if (__OFSUB__(at, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 != 1)
  {
    if (v8 <= 1)
    {
      if (!__OFADD__(a1, 1))
      {
        uint64_t v13 = *(unsigned int *)(v3 + 12);
        if (!__OFSUB__(v13, at))
        {
          ByteBuffer.copyBytes(at:to:length:)(at, a1 + 1, v13 - at);
          if (v14)
          {
LABEL_30:
            swift_unexpectedError();
            __break(1u);
            return;
          }
          sub_10006D8E0(a3, a1);
          uint64_t v15 = 1 - v8;
          if (!__OFSUB__(1, v8))
          {
            ByteBuffer.moveWriterIndex(forwardBy:)(1 - v8);
            uint64_t v16 = v6 + v15;
            if (!__OFADD__(v6, v15))
            {
              if (v16 >= v4)
              {
                *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
                *(void *)(v3 + 32) = v16;
                return;
              }
              goto LABEL_29;
            }
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    sub_10006D8E0(a3, a1);
    if (!__OFADD__(a1, 1))
    {
      uint64_t v10 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v10, at))
      {
        ByteBuffer.copyBytes(at:to:length:)(at, a1 + 1, v10 - at);
        if (!v11)
        {
          ByteBuffer.moveWriterIndex(to:)(*(unsigned int *)(v3 + 12) - (v8 - 1));
          *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100074004(v8 - 1, v4, v6);
          *(void *)(v3 + 32) = v12;
          return;
        }
        goto LABEL_30;
      }
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_10006D8E0(a3, a1);
}

void sub_100072D1C(uint64_t a1, Swift::Int at, uint64_t *a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 > a1)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(v3 + 32);
  if (v6 < at)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v10 = v8 - v9;
  if (v8 < v9)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFSUB__(v8, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  Swift::Int v12 = at - a1;
  if (__OFSUB__(at, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v10 == v12)
  {
    uint64_t v13 = *a3;
    uint64_t v14 = *((unsigned __int16 *)a3 + 10);
    uint64_t v15 = *((unsigned __int8 *)a3 + 22);
    swift_beginAccess();
    uint64_t v16 = *(void *)(v13 + 24) + (v15 | (v14 << 8)) + v9;
    ByteBuffer._setBytes(_:at:)(v16, v16 + v10, a1);
    return;
  }
  if (v10 >= v12)
  {
    if (!__OFADD__(a1, v10))
    {
      uint64_t v25 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v25, at))
      {
        ByteBuffer.copyBytes(at:to:length:)(at, a1 + v10, v25 - at);
        if (!v26)
        {
          uint64_t v27 = *a3;
          uint64_t v28 = *((unsigned __int16 *)a3 + 10);
          uint64_t v29 = *((unsigned __int8 *)a3 + 22);
          swift_beginAccess();
          uint64_t v30 = *(void *)(v27 + 24) + (v29 | (v28 << 8)) + v9;
          ByteBuffer._setBytes(_:at:)(v30, v30 + v10, a1);
          Swift::Int v31 = v10 - v12;
          if (!__OFSUB__(v10, v12))
          {
            ByteBuffer.moveWriterIndex(forwardBy:)(v10 - v12);
            uint64_t v32 = v6 + v31;
            if (!__OFADD__(v6, v31))
            {
              if (v32 >= v4)
              {
                *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
                *(void *)(v3 + 32) = v32;
                return;
              }
              goto LABEL_35;
            }
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          goto LABEL_32;
        }
        goto LABEL_36;
      }
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  uint64_t v17 = *a3;
  uint64_t v33 = *((unsigned __int16 *)a3 + 10);
  uint64_t v18 = *((unsigned __int8 *)a3 + 22);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24) + (v18 | (v33 << 8)) + v9;
  ByteBuffer._setBytes(_:at:)(v19, v19 + v10, a1);
  if (__OFADD__(a1, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v20 = *(unsigned int *)(v3 + 12);
  if (__OFSUB__(v20, at))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  ByteBuffer.copyBytes(at:to:length:)(at, a1 + v10, v20 - at);
  if (!v21)
  {
    Swift::Int v22 = v12 - v10;
    if (!__OFSUB__(v12, v10))
    {
      uint64_t v23 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v23, v22))
      {
        ByteBuffer.moveWriterIndex(to:)(v23 - v22);
        *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100074004(v12 - v10, v4, v6);
        *(void *)(v3 + 32) = v24;
        return;
      }
      goto LABEL_33;
    }
    goto LABEL_31;
  }
LABEL_36:
  swift_unexpectedError();
  __break(1u);
}

void ByteBufferView.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5 > a1)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(v4 + 32);
  if (v7 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = sub_10024EC90();
  uint64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v11 != v12)
  {
    if (sub_100075624() >= v12)
    {
      uint64_t v20 = sub_100075624();
      if (!__OFADD__(a1, v20))
      {
        uint64_t v21 = *(unsigned int *)(v4 + 12);
        if (!__OFSUB__(v21, a2))
        {
          ByteBuffer.copyBytes(at:to:length:)(a2, a1 + v20, v21 - a2);
          if (!v22)
          {
            sub_1000756C4();
            uint64_t v23 = sub_100075624();
            uint64_t v24 = v23 - v12;
            if (!__OFSUB__(v23, v12))
            {
              ByteBuffer.moveWriterIndex(forwardBy:)(v23 - v12);
              uint64_t v25 = v7 + v24;
              if (!__OFADD__(v7, v24))
              {
                if (v25 >= v5)
                {
                  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
                  *(void *)(v4 + 32) = v25;
                  return;
                }
                goto LABEL_33;
              }
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_36;
            }
            goto LABEL_30;
          }
          sub_100075734();
          goto LABEL_36;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      goto LABEL_26;
    }
    sub_1000756C4();
    uint64_t v13 = sub_100075624();
    if (!__OFADD__(a1, v13))
    {
      uint64_t v14 = *(unsigned int *)(v4 + 12);
      if (!__OFSUB__(v14, a2))
      {
        ByteBuffer.copyBytes(at:to:length:)(a2, a1 + v13, v14 - a2);
        if (!v15)
        {
          uint64_t v16 = sub_100075624();
          uint64_t v17 = v12 - v16;
          if (!__OFSUB__(v12, v16))
          {
            uint64_t v18 = *(unsigned int *)(v4 + 12);
            if (!__OFSUB__(v18, v17))
            {
              ByteBuffer.moveWriterIndex(to:)(v18 - v17);
              *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100074004(v17, v5, v7);
              *(void *)(v4 + 32) = v19;
              return;
            }
            goto LABEL_31;
          }
          goto LABEL_29;
        }
LABEL_36:
        swift_unexpectedError();
        __break(1u);
        return;
      }
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  ByteBuffer.setBytes<A>(_:at:)(a3, a1, a4);
}

void (*ByteBufferView.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0xB8uLL);
  *a1 = v7;
  v7[21] = a3;
  v7[22] = v3;
  v7[20] = a2;
  long long v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v8;
  void v7[4] = *(void *)(v3 + 32);
  ByteBufferView.subscript.getter(a2, a3, (uint64_t)(v7 + 15));
  return sub_100073210;
}

void sub_100073210(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 120;
  Swift::Int v5 = *(void *)(*a1 + 168);
  uint64_t v6 = *(void *)(*a1 + 160);
  if (a2)
  {
    sub_100075664();
    sub_100072D1C(v6, v5, v2);
    sub_100074F0C((uint64_t)v2);
    swift_release();
  }
  else
  {
    long long v7 = *(_OWORD *)(*a1 + 136);
    *(_OWORD *)(v3 + 80) = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 96) = v7;
    *(void *)(v3 + 112) = *(void *)(v4 + 32);
    sub_100072D1C(v6, v5, (uint64_t *)(v3 + 80));
    sub_100074F0C(v3 + 80);
  }
  free((void *)v3);
}

void ByteBufferView.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v7[2] = a3;
  v7[3] = a1;
  void v7[4] = a2;
  ByteBufferView.withUnsafeBytes<A>(_:)((uint64_t)sub_100074F38, (uint64_t)v7, a3);
  if (!v4) {
    sub_1000195B4(a4, 0, 1, a3);
  }
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int16 *)v1 + 10);
  uint64_t v5 = *((unsigned __int8 *)v1 + 22);
  Swift::Int v6 = sub_10004F1B0();
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  BOOL v10 = __OFSUB__(v9, v8);
  uint64_t v11 = v9 - v8;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else if (v11)
  {
    uint64_t v12 = 0;
    while (*(unsigned __int8 *)(*(void *)(v3 + 24) + (v5 | (v4 << 8)) + v8 + v12) != a1)
    {
      if ((v11 & ~(v11 >> 63)) == v12)
      {
        __break(1u);
        goto LABEL_11;
      }
      if (v11 == ++v12) {
        goto LABEL_7;
      }
    }
    Swift::Int v6 = v12 + v8;
    if (__OFADD__(v12, v8)) {
      goto LABEL_12;
    }
    Swift::Bool v7 = 0;
  }
  else
  {
LABEL_7:
    Swift::Int v6 = 0;
    Swift::Bool v7 = 1;
  }
  result.value.value = v6;
  result.value.is_nil = v7;
  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customLastIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  Swift::Int v3 = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 24);
  if (__OFSUB__(*(void *)(v1 + 32), v5))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  Swift::UInt8 v10 = a1;
  __chkstk_darwin(v3, v4);
  v9[2] = &v10;
  Swift::Int v3 = sub_100074F6C((uint64_t)sub_100075030, (uint64_t)v9, v6, v7);
  if (!v4)
  {
    BOOL v8 = __OFADD__(v3, v5);
    v3 += v5;
    if (v8) {
      goto LABEL_6;
    }
  }
  LOBYTE(v4) = v4;
LABEL_7:
  result.value.is_nil = v4;
  result.value.value = v3;
  return result;
}

uint64_t sub_1000734D4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 < a2 || v3 > a2 || v3 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }
  BOOL v8 = __OFSUB__(a2, result);
  Swift::Int_optional_optional result = a2 - result;
  if (v8) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t sub_100073500@<X0>(uint64_t *a1@<X8>)
{
  sub_10007560C();
  uint64_t result = sub_100073538(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100073538(uint64_t a1)
{
  BOOL v2 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result < *(void *)(v1 + 24) || result >= *(void *)(v1 + 32)) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_10007355C(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(v1 + 32) && v2 >= *(void *)(v1 + 24))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073588@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1001D56F0(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000735D0(uint64_t *a1, uint64_t *a2)
{
  return sub_1000734D4(*a1, *a2);
}

uint64_t sub_100073614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ByteBufferView.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007363C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ByteBufferView.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*sub_100073664(unsigned char *a1, uint64_t *a2))(void)
{
  *a1 = ByteBufferView.subscript.getter(*a2);
  return debugOnly(_:);
}

double sub_1000736AC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  long long v6 = v2[1];
  long long v11 = *v2;
  long long v12 = v6;
  uint64_t v13 = *((void *)v2 + 4);
  ByteBufferView.subscript.getter(v5, v4, (uint64_t)v9);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_10007370C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100073750();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100073750()
{
  uint64_t result = *(void *)(v0 + 24);
  if (*(void *)(v0 + 32) < result) {
    __break(1u);
  }
  return result;
}

BOOL sub_100073764()
{
  return sub_10007A9CC();
}

uint64_t sub_100073794()
{
  return sub_10006C95C();
}

uint64_t sub_1000737C0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000737F0(a1, (uint64_t (*)(void))ByteBufferView._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_1000737D8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000737F0(a1, (uint64_t (*)(void))ByteBufferView._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t sub_1000737F0@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_10007382C@<X0>(uint64_t a1@<X8>)
{
  sub_10007560C();
  uint64_t result = sub_1001D5714(v2, v3, v4);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t sub_100073870()
{
  sub_100075640();
  return sub_10007AB18(v0, v1, v2);
}

uint64_t sub_10007389C()
{
  sub_100075640();
  return sub_1000738C8(v0, v1, v2);
}

uint64_t sub_1000738C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000738DC(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (!result)
  {
LABEL_7:
    if (!a3) {
      return result;
    }
LABEL_11:
    __break(1u);
    return result;
  }
  if (!a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result < a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 && a3 < result)
  {
    __break(1u);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100073910(uint64_t *a1, uint64_t *a2)
{
  return sub_10007AB90(*a1, a1[1], *a2, a2[1]);
}

Swift::Int sub_10007395C@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result = Heap.index(after:)(*a1);
  *a2 = result;
  return result;
}

void *sub_100073988(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_1000739A0@<Q0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  __int16 v3 = *(_WORD *)(v1 + 20);
  char v4 = *(unsigned char *)(v1 + 22);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 20) = v3;
  *(unsigned char *)(a1 + 22) = v4;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  *(void *)(a1 + 40) = result.n128_u64[0];
  return result;
}

uint64_t sub_1000739D8()
{
  return sub_10006C95C();
}

void *sub_100073A14()
{
  return sub_10007AC68();
}

void sub_100073A50()
{
}

void sub_100073A7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_100073AB8(char *a1, uint64_t *a2)
{
  return ByteBufferView.subscript.setter(*a1, *a2);
}

void (*sub_100073AC4(void *a1, uint64_t *a2))(uint64_t a1)
{
  char v5 = malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  v5[5] = v2;
  v5[6] = v6;
  long long v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)char v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v7;
  void v5[4] = *(void *)(v2 + 32);
  *((unsigned char *)v5 + 56) = ByteBufferView.subscript.getter(v6);
  return sub_100073B40;
}

void sub_100073B40(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ByteBufferView.subscript.setter(*(unsigned char *)(*(void *)a1 + 56), *(void *)(*(void *)a1 + 48));
  free(v1);
}

uint64_t sub_100073B80(uint64_t a1, uint64_t *a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  return ByteBufferView.subscript.setter((uint64_t *)v4, *a2, a2[1]);
}

void (*sub_100073BBC(void *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v5 = malloc(0xB8uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[20] = v2;
  v5[21] = v6;
  v5[22] = v7;
  long long v8 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v8;
  void v5[4] = *(void *)(v2 + 32);
  ByteBufferView.subscript.getter(v6, v7, (uint64_t)(v5 + 15));
  return sub_100073C40;
}

void sub_100073C40(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 120;
  uint64_t v6 = *(void *)(*a1 + 168);
  Swift::Int v5 = *(void *)(*a1 + 176);
  if (a2)
  {
    sub_100075664();
    ByteBufferView.subscript.setter(v2, v6, v5);
    swift_release();
  }
  else
  {
    long long v7 = *(_OWORD *)(*a1 + 136);
    *(_OWORD *)(v3 + 80) = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 96) = v7;
    *(void *)(v3 + 112) = *(void *)(v4 + 32);
    ByteBufferView.subscript.setter((uint64_t *)(v3 + 80), v6, v5);
  }
  free((void *)v3);
}

void sub_100073CD4(uint64_t (*a1)(char *)@<X0>, void *a2@<X8>)
{
  sub_100073D00(a1);
  if (!v2) {
    *a2 = v4;
  }
}

void sub_100073D00(uint64_t (*a1)(char *))
{
  uint64_t v4 = v1[3];
  uint64_t v3 = v1[4];
  if (v4 < v3)
  {
    uint64_t v5 = v1[4];
    uint64_t v22 = v1[3];
    uint64_t v23 = v5;
    uint64_t v20 = v1;
    while (1)
    {
      if (v4 >= v3)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      uint64_t v6 = *((unsigned int *)v1 + 2);
      unint64_t v7 = v4 - v6;
      if (__OFSUB__(v4, v6)) {
        goto LABEL_37;
      }
      if ((v7 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      unsigned int v8 = *((_DWORD *)v1 + 3);
      unint64_t v9 = v8 - v6;
      if (v8 < v6) {
        goto LABEL_39;
      }
      if (v7 >= v9) {
        goto LABEL_40;
      }
      uint64_t v10 = *v1;
      uint64_t v21 = *((unsigned __int16 *)v1 + 10);
      uint64_t v11 = *((unsigned __int8 *)v1 + 22);
      long long v12 = (void *)(v10 + 24);
      swift_beginAccess();
      uint64_t v13 = *(void *)(v10 + 24);
      uint64_t v14 = v11 | (v21 << 8);
      char v25 = *(unsigned char *)(v13 + v14 + v4);
      char v15 = a1(&v25);
      if (v2) {
        return;
      }
      if (v15) {
        break;
      }
      uint64_t v1 = v20;
LABEL_29:
      uint64_t v3 = v23;
      if (++v4 >= v5) {
        return;
      }
    }
    if (v5 <= v22 || v5 > v23) {
      goto LABEL_41;
    }
    --v5;
    while (v4 < v5)
    {
      unint64_t v17 = v5 - v6;
      if (__OFSUB__(v5, v6))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (v17 >= v9) {
        goto LABEL_32;
      }
      if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_33;
      }
      char v25 = *(unsigned char *)(*v12 + v14 + v5);
      if ((a1(&v25) & 1) == 0)
      {
        uint64_t v1 = v20;
        sub_100055888();
        goto LABEL_29;
      }
      if (__OFSUB__(v5--, 1)) {
        goto LABEL_34;
      }
      if (v5 < v22 || v5 >= v23) {
        goto LABEL_35;
      }
    }
  }
}

void sub_100073EF4()
{
}

uint64_t sub_100073F00()
{
  return sub_10024E640();
}

uint64_t sub_100073F24()
{
  return sub_10024E630();
}

uint64_t ByteBufferView.init()@<X0>(uint64_t a1@<X8>)
{
  if (qword_100308D08 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_10034C038;
  uint64_t v3 = HIDWORD(qword_10034C038);
  if (HIDWORD(qword_10034C038) < qword_10034C038)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int v4 = dword_10034C040;
  __int16 v5 = word_10034C044;
  char v6 = byte_10034C046;
  unsigned int v7 = byte_10034C046 | ((unsigned __int16)word_10034C044 << 8);
  BOOL v8 = dword_10034C040 >= v7;
  unsigned int v9 = dword_10034C040 - v7;
  if (!v8) {
    goto LABEL_11;
  }
  if (v9 < HIDWORD(qword_10034C038))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(void *)a1 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 22) = v6;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *(void *)(a1 + 32) = v3;
  return swift_retain();
}

uint64_t sub_100074004(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v3 = a2 - a3;
  if (__OFSUB__(a2, a3))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = -result;
  if (v3 <= 0 && v3 > v4) {
    return a2;
  }
  uint64_t v6 = a3 - result;
  if (__OFADD__(a3, v4)) {
    goto LABEL_17;
  }
  if (v6 >= a2 && v6 <= a3) {
    return a2;
  }
LABEL_18:
  __break(1u);
  return result;
}

double sub_100074054@<D0>(uint64_t a1@<X8>)
{
  ByteBufferView.init()((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_100074098(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  ByteBufferView.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a2, a3);
}

uint64_t sub_100074118@<X0>(char *a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X8>)
{
  return sub_100074120(*a1, a2, a3);
}

uint64_t sub_100074120@<X0>(char a1@<W0>, uint64_t a2@<X1>, Swift::Int a3@<X8>)
{
  if (qword_100308D08 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    ByteBufferView.init(_:)(static ByteBufferAllocator.zeroCapacityWithDefaultAllocator, qword_10034C038, dword_10034C040 | ((unint64_t)(unsigned __int16)word_10034C044 << 32) | ((unint64_t)byte_10034C046 << 48), (uint64_t)&v21);
    Swift::Int v5 = v23;
    Swift::Int v6 = v24;
    unsigned int v8 = HIDWORD(v21);
    int v7 = v22;
    __int16 v9 = WORD2(v22);
    char v10 = BYTE6(v22);
    long long v19 = v21;
    uint64_t v20 = v22;
    if (!a2) {
      break;
    }
    if (a2 < 0)
    {
      __break(1u);
LABEL_27:
      uint64_t result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    Swift::Int v17 = a3;
    swift_retain();
    Swift::Int v11 = v6;
    while (v6 >= v5)
    {
      if (v11 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_19;
      }
      if (__OFSUB__(v8, v11)) {
        goto LABEL_20;
      }
      a3 = v11 + 1;
      ByteBuffer.copyBytes(at:to:length:)(v11, v11 + 1, v8 - v11);
      if (v12) {
        goto LABEL_27;
      }
      uint64_t result = sub_10006D8E0(a1, v11);
      unsigned int v8 = HIDWORD(v19) + 1;
      if (HIDWORD(v19) == -1) {
        goto LABEL_21;
      }
      int v7 = v20;
      __int16 v9 = WORD2(v20);
      char v10 = BYTE6(v20);
      unsigned int v14 = BYTE6(v20) | (WORD2(v20) << 8);
      BOOL v15 = v20 >= v14;
      unsigned int v16 = v20 - v14;
      if (!v15) {
        goto LABEL_22;
      }
      if (v16 < v8) {
        goto LABEL_23;
      }
      ++HIDWORD(v19);
      if (a3 < v5) {
        goto LABEL_24;
      }
      ++v11;
      if (!--a2)
      {
        Swift::Int v6 = a3;
        a3 = v17;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
  }
  uint64_t result = swift_retain();
LABEL_17:
  *(void *)a3 = v19;
  *(_DWORD *)(a3 + 8) = DWORD2(v19);
  *(_DWORD *)(a3 + 12) = v8;
  *(_DWORD *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 20) = v9;
  *(unsigned char *)(a3 + 22) = v10;
  *(void *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  *(void *)(a3 + 32) = v6;
  return result;
}

uint64_t sub_100074310()
{
  return sub_10024EDA0();
}

void sub_100074328(char *a1)
{
}

void sub_100074330(char a1)
{
  sub_100072B64(*(void *)(v1 + 32), *(void *)(v1 + 32), a1);
}

uint64_t sub_100074340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return RangeReplaceableCollection.append<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

void sub_100074358(char *a1, uint64_t *a2)
{
}

void sub_100074364(char a1, uint64_t a2)
{
}

uint64_t sub_100074370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_100074388@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000743B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000743B4(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v2 == v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  Swift::Int v4 = result;
  if (v2 > result || v3 <= result) {
    goto LABEL_9;
  }
  uint64_t result = sub_10007274C(result, 0, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 22) << 48) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32));
  if ((result & 0x100) == 0)
  {
    uint64_t v6 = result;
    sub_1000729DC(v4, v4 + 1);
    return v6;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10007443C(Swift::Int *a1)
{
  return sub_100074448(*a1, a1[1]);
}

uint64_t sub_10007444C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10007447C();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10007447C()
{
  uint64_t v1 = v0;
  long long v2 = v0[1];
  long long v10 = *v0;
  long long v11 = v2;
  uint64_t v12 = *((void *)v0 + 4);
  uint64_t result = sub_1000D8594();
  if ((result & 0x100) == 0)
  {
    uint64_t v4 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (v4 >= *((uint64_t *)&v11 + 1) && v12 - 1 < v12)
    {
      unsigned __int8 v6 = result;
      ByteBufferView.init(buffer:range:)(v10, *((uint64_t *)&v10 + 1), v11 | ((unint64_t)WORD2(v11) << 32) | ((unint64_t)BYTE6(v11) << 48), *((uint64_t *)&v11 + 1), v4, (uint64_t)v8);
      long long v7 = v8[1];
      *uint64_t v1 = v8[0];
      v1[1] = v7;
      *((void *)v1 + 4) = v9;
      return v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100074528(uint64_t result)
{
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v2 = v1[3];
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  int v5 = *((_DWORD *)v1 + 3);
  unsigned int v6 = *((_DWORD *)v1 + 4);
  int v7 = *((unsigned __int16 *)v1 + 10);
  int v8 = *((unsigned __int8 *)v1 + 22);
  uint64_t result = sub_1001D5714(v1[4], -result, v2);
  if ((v9 & 1) == 0)
  {
    if (result >= v2)
    {
      if ((v2 & 0x8000000000000000) == 0)
      {
        unsigned int v10 = v8 | (v7 << 8);
        BOOL v11 = v6 >= v10;
        unsigned int v12 = v6 - v10;
        if (v11)
        {
          if (result <= v12)
          {
            *uint64_t v1 = v3;
            *((_DWORD *)v1 + 2) = v4;
            *((_DWORD *)v1 + 3) = v5;
            *((_DWORD *)v1 + 4) = v6;
            *((_WORD *)v1 + 10) = v7;
            *((unsigned char *)v1 + 22) = v8;
            v1[3] = v2;
            v1[4] = result;
            return 1;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

void sub_10007460C(unsigned char *a1@<X8>)
{
  sub_100074634();
  *a1 = v2;
}

void sub_100074634()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  if (v2 == v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = *v0;
  int v4 = *((_DWORD *)v0 + 2);
  int v5 = *((_DWORD *)v0 + 3);
  unsigned int v6 = *((_DWORD *)v0 + 4);
  int v7 = *((unsigned __int16 *)v0 + 10);
  int v8 = *((unsigned __int8 *)v0 + 22);
  sub_10009A29C();
  if ((v9 & 0x100) == 0)
  {
    uint64_t v10 = v2 + 1;
    if (!__OFADD__(v2, 1))
    {
      if (v1 >= v10)
      {
        if ((v10 & 0x8000000000000000) == 0)
        {
          unsigned int v11 = v8 | (v7 << 8);
          BOOL v12 = v6 >= v11;
          unsigned int v13 = v6 - v11;
          if (v12)
          {
            if (v1 <= v13)
            {
              *uint64_t v0 = v3;
              *((_DWORD *)v0 + 2) = v4;
              *((_DWORD *)v0 + 3) = v5;
              *((_DWORD *)v0 + 4) = v6;
              *((_WORD *)v0 + 10) = v7;
              *((unsigned char *)v0 + 22) = v8;
              v0[3] = v10;
              v0[4] = v1;
              return;
            }
            goto LABEL_15;
          }
LABEL_14:
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_100074720(uint64_t result)
{
  if (!result) {
    return result;
  }
  if (result < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  int v5 = *((_DWORD *)v1 + 3);
  unsigned int v6 = *((_DWORD *)v1 + 4);
  int v7 = *((unsigned __int16 *)v1 + 10);
  int v8 = *((unsigned __int8 *)v1 + 22);
  uint64_t result = sub_1001D5714(v1[3], result, v2);
  if (v9)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v2 < result) {
    goto LABEL_12;
  }
  if (result < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unsigned int v10 = v8 | (v7 << 8);
  BOOL v11 = v6 >= v10;
  unsigned int v12 = v6 - v10;
  if (!v11) {
    goto LABEL_14;
  }
  if (v2 > v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *uint64_t v1 = v3;
  *((_DWORD *)v1 + 2) = v4;
  *((_DWORD *)v1 + 3) = v5;
  *((_DWORD *)v1 + 4) = v6;
  *((_WORD *)v1 + 10) = v7;
  *((unsigned char *)v1 + 22) = v8;
  v1[3] = result;
  v1[4] = v2;
  return result;
}

void sub_100074808(char a1)
{
  if (a1)
  {
    Swift::Int v2 = *(void *)(v1 + 24);
    Swift::Int v3 = *(void *)(v1 + 32);
    if (v3 >= v2)
    {
      sub_1000729DC(v2, v3);
      return;
    }
    __break(1u);
    goto LABEL_11;
  }
  swift_release();
  if (qword_100308D08 != -1) {
LABEL_11:
  }
    swift_once();
  ByteBufferView.init(_:)(static ByteBufferAllocator.zeroCapacityWithDefaultAllocator, qword_10034C038, dword_10034C040 | ((unint64_t)(unsigned __int16)word_10034C044 << 32) | ((unint64_t)byte_10034C046 << 48), (uint64_t)v5);
  long long v4 = v5[1];
  *(_OWORD *)uint64_t v1 = v5[0];
  *(_OWORD *)(v1 + 16) = v4;
  *(void *)(v1 + 32) = v6;
  swift_retain();
}

void sub_1000748EC()
{
}

uint64_t ByteBuffer.readableBytesView.getter@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unsigned int v4 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v5 = a3 >= v4;
  unsigned int v6 = a3 - v4;
  if (!v5) {
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= v6)
  {
    sub_100075710(result, a2, a3, a4);
    return swift_retain();
  }
LABEL_8:
  __break(1u);
  return result;
}

void ByteBuffer.viewBytes(at:length:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  if (a2 < 0)
  {
    sub_1000756E8();
    goto LABEL_12;
  }
  sub_1000756E8();
  if (v16 > v15)
  {
LABEL_12:
    *a4 = v12;
    a4[1] = v13;
    a4[2] = v5;
    a4[3] = v14;
    a4[4] = v4;
    return;
  }
  if ((uint64_t)(HIDWORD(a3) - v9) < a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v5 = 0;
    uint64_t v14 = 0;
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = a1 + v9;
  if (__OFADD__(a1, v9))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < a1)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v17 = (v11 >> 24) & 0xFFFF00 | BYTE6(v11);
  BOOL v18 = v11 >= v17;
  unsigned int v19 = v11 - v17;
  if (!v18) {
    goto LABEL_15;
  }
  if (v4 <= v19)
  {
    uint64_t v20 = v10;
    uint64_t v5 = v11 & 0xFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v12 = v20;
    unint64_t v13 = a3;
    uint64_t v14 = a1;
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
}

uint64_t ByteBuffer.init(_:)(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 < result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFSUB__(v3, result))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = ByteBuffer.getSlice(at:length:)(result, v3 - result, *(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48));
  if (result)
  {
    uint64_t v4 = result;
    sub_100074F0C(a1);
    return v4;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static ByteBufferView.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 - result;
  if (__OFSUB__(v4, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  BOOL v8 = __OFSUB__(v6, v7);
  uint64_t v9 = v6 - v7;
  if (v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v5 != v9) {
    return 0;
  }
  sub_1000756FC();
  uint64_t result = ByteBuffer.getSlice(at:length:)(v12, v5, v13, v14, v11 | (v10 << 48));
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    sub_1000756A8();
    uint64_t result = ByteBuffer.getSlice(at:length:)(v7, v5, v20, v21, v22);
    if (result)
    {
      char v25 = static ByteBuffer.== infix(_:_:)(v17, v18, v19 & 0xFFFFFFFFFFFFFFLL, result, v23, v24 & 0xFFFFFFFFFFFFFFLL);
      swift_release();
      swift_release();
      return v25 & 1;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t ByteBufferView.hash(into:)()
{
  uint64_t result = *(void *)(v0 + 24);
  if (__OFSUB__(*(void *)(v0 + 32), result))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_10007568C();
  uint64_t result = ByteBuffer.getSlice(at:length:)(v2, v3, v4, v5, v6);
  if (result)
  {
    unsigned int v8 = v7;
    unint64_t v9 = HIDWORD(v7);
    uint64_t result = sub_10004F1B0();
    if (v9 >= v8)
    {
      sub_10024FC10();
      return swift_release();
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Int ByteBufferView.hashValue.getter()
{
  return sub_10024FC70();
}

Swift::Int sub_100074C90()
{
  return sub_10024FC70();
}

uint64_t ByteBufferView.init(arrayLiteral:)@<X0>(Swift::Int a1@<X0>, char *a2@<X8>)
{
  if (qword_100308D08 != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t v4 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  sub_1000756FC();
  ByteBufferView.init(_:)(v4, v7, v6 | (v5 << 48), (uint64_t)&v27);
  unsigned int v9 = HIDWORD(v27);
  int v8 = v28;
  __int16 v10 = WORD2(v28);
  char v11 = BYTE6(v28);
  Swift::Int v13 = v29;
  Swift::Int v12 = v30;
  long long v25 = v27;
  uint64_t v26 = v28;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v23 = a2;
    a2 = (char *)(a1 + 32);
    swift_retain();
    Swift::Int v24 = v12;
    while (1)
    {
      if (v24 < v13)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_18;
      }
      Swift::Int v15 = v9 - v12;
      if (__OFSUB__(v9, v12)) {
        goto LABEL_19;
      }
      char v17 = *a2++;
      char v16 = v17;
      a1 = v12 + 1;
      ByteBuffer.copyBytes(at:to:length:)(v12, v12 + 1, v15);
      if (v18) {
        break;
      }
      sub_10006D8E0(v16, v12);
      unsigned int v9 = HIDWORD(v25) + 1;
      if (HIDWORD(v25) == -1) {
        goto LABEL_20;
      }
      int v8 = v26;
      __int16 v10 = WORD2(v26);
      char v11 = BYTE6(v26);
      unsigned int v19 = BYTE6(v26) | (WORD2(v26) << 8);
      BOOL v20 = v26 >= v19;
      unsigned int v21 = v26 - v19;
      if (!v20) {
        goto LABEL_21;
      }
      if (v21 < v9) {
        goto LABEL_22;
      }
      ++HIDWORD(v25);
      if (a1 < v13) {
        goto LABEL_23;
      }
      ++v12;
      if (!--v14)
      {
        Swift::Int v12 = a1;
        a2 = v23;
        goto LABEL_16;
      }
    }
    sub_100075734();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_retain();
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v25;
    *((_DWORD *)a2 + 2) = DWORD2(v25);
    *((_DWORD *)a2 + 3) = v9;
    *((_DWORD *)a2 + 4) = v8;
    *((_WORD *)a2 + 10) = v10;
    a2[22] = v11;
    *((void *)a2 + 3) = v13;
    *((void *)a2 + 4) = v12;
  }
  return result;
}

double sub_100074EA8@<D0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  ByteBufferView.init(arrayLiteral:)(a1, (char *)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_100074EEC(uint64_t a1, uint64_t a2)
{
  return sub_1000726A8(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100074F0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100074F38(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(a1, v3);
}

uint64_t sub_100074F6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = a4 - a3;
  if (a4 == a3)
  {
    return 0;
  }
  else
  {
    unint64_t v7 = (uint64_t (*)(char *))result;
    uint64_t v8 = a4 - a3;
    while (!__OFSUB__(v8--, 1))
    {
      if (v8 < 0 || v8 >= v6) {
        goto LABEL_15;
      }
      char v10 = *(unsigned char *)(a3 + v8);
      double result = v7(&v10);
      if (v4 || (result & 1) != 0 || !v8) {
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

BOOL sub_10007500C(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

BOOL sub_100075030(char *a1)
{
  return sub_10007500C(a1, *(char **)(v1 + 16));
}

unint64_t sub_100075054()
{
  unint64_t result = qword_10030C488;
  if (!qword_10030C488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C488);
  }
  return result;
}

uint64_t sub_1000750A0()
{
  return sub_100075284(&qword_10030C490);
}

unint64_t sub_1000750D4()
{
  unint64_t result = qword_10030C4A0;
  if (!qword_10030C4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4A0);
  }
  return result;
}

unint64_t sub_100075124()
{
  unint64_t result = qword_10030C4A8;
  if (!qword_10030C4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4A8);
  }
  return result;
}

unint64_t sub_100075174()
{
  unint64_t result = qword_10030C4B0;
  if (!qword_10030C4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4B0);
  }
  return result;
}

uint64_t sub_1000751C0()
{
  return sub_100075284(&qword_10030C4B8);
}

unint64_t sub_1000751F8()
{
  unint64_t result = qword_10030C4C0;
  if (!qword_10030C4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4C0);
  }
  return result;
}

void *sub_100075244()
{
  return &protocol witness table for Int;
}

uint64_t sub_100075250()
{
  return sub_100075284(&qword_10030C4C8);
}

uint64_t sub_100075284(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B028(&qword_10030C498);
    sub_1000750D4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000752F8()
{
  unint64_t result = qword_10030C4D0;
  if (!qword_10030C4D0)
  {
    sub_10001B028(&qword_10030C4D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4D0);
  }
  return result;
}

unint64_t sub_100075350()
{
  unint64_t result = qword_10030C4E0;
  if (!qword_10030C4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4E0);
  }
  return result;
}

unint64_t sub_1000753A0()
{
  unint64_t result = qword_10030C4E8;
  if (!qword_10030C4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4E8);
  }
  return result;
}

unint64_t sub_1000753F0()
{
  unint64_t result = qword_10030C4F0;
  if (!qword_10030C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C4F0);
  }
  return result;
}

uint64_t initializeWithCopy for ByteBufferView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ByteBufferView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ByteBufferView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBufferView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBufferView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBufferView()
{
  return &type metadata for ByteBufferView;
}

__n128 sub_10007560C()
{
  return *(__n128 *)v0;
}

uint64_t sub_100075624()
{
  return sub_10024EC90();
}

__n128 sub_100075640()
{
  return *(__n128 *)v0;
}

uint64_t sub_100075664()
{
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 56) = v3;
  *(void *)(v0 + 72) = *(void *)(v1 + 32);
  return sub_10001B078(v0 + 40);
}

uint64_t sub_1000756C4()
{
  return ByteBuffer.setBytes<A>(_:at:)(v1, v2, v0);
}

uint64_t sub_100075710@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(_DWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 12) = v4;
  *(_DWORD *)(a4 + 16) = a3;
  *(_WORD *)(a4 + 20) = v5;
  *(unsigned char *)(a4 + 22) = BYTE6(a3);
  *(void *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(a4 + 32) = v4;
  return result;
}

uint64_t sub_100075734()
{
  return v0;
}

uint64_t sub_100075748(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100019524(&qword_10030C5B8);
  if (swift_dynamicCast())
  {
    sub_10002F754(v35, (uint64_t)&v38);
    sub_10001C2A8(&v38, v40);
    sub_10024DC30();
    swift_bridgeObjectRelease();
    v35[0] = v37;
    sub_10001C2EC((uint64_t)&v38);
    return *(void *)&v35[0];
  }
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_100076938((uint64_t)v35);
  uint64_t v2 = v34;
  if ((v34 & 0x1000000000000000) != 0)
  {
LABEL_61:
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v34 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v33;
      uint64_t v39 = v34 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((v33 & 0x1000000000000000) == 0)
    {
      sub_10024F3E0();
    }
    uint64_t v3 = sub_10024DEE0();
    unint64_t v5 = v4;
    if (v4 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = v3;
      *((void *)&v35[0] + 1) = v5;
      return *(void *)&v35[0];
    }
    if ((v34 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  sub_10024E850();
LABEL_10:
  *(void *)&v35[0] = sub_10024DEB0();
  *((void *)&v35[0] + 1) = v6;
  __chkstk_darwin(*(void *)&v35[0], v6);
  v28[2] = &v33;
  unint64_t v7 = (unint64_t)sub_100076338((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1000769D0, (uint64_t)v28);
  uint64_t v10 = *((void *)&v35[0] + 1) >> 62;
  uint64_t v11 = v7;
  unint64_t v13 = v12;
  unint64_t v14 = v8;
  uint64_t v2 = BYTE14(v35[0]);
  switch(*((void *)&v35[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v35[0]) - LODWORD(v35[0]);
      if (__OFSUB__(DWORD1(v35[0]), v35[0])) {
        goto LABEL_65;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v9 != v15)
      {
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v2 = *(uint64_t *)&v35[0] >> 32;
          }
          else {
            uint64_t v2 = *(void *)(*(void *)&v35[0] + 24);
          }
        }
LABEL_53:
        if (v2 < v9)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        sub_10024DE90();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
LABEL_22:
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v37 + 7) = 0;
      *(void *)&long long v37 = 0;
      if (4 * v19 == v8 >> 14) {
        goto LABEL_51;
      }
      unint64_t v29 = v5;
      LOBYTE(v20) = 0;
      uint64_t v21 = (v7 >> 59) & 1;
      if ((v13 & 0x1000000000000000) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4 << v21;
      uint64_t v32 = v13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = v3;
      uint64_t v31 = (v13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v17 = *(void *)(*(void *)&v35[0] + 16);
      uint64_t v16 = *(void *)(*(void *)&v35[0] + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_66;
    case 3:
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v2 = 0;
      goto LABEL_53;
    default:
      uint64_t v15 = BYTE14(v35[0]);
      goto LABEL_16;
  }
  do
  {
    unint64_t v23 = v14;
    if ((v14 & 0xC) == v22) {
      unint64_t v23 = sub_1000F44B4(v14, v11, v13);
    }
    unint64_t v24 = v23 >> 16;
    if (v23 >> 16 >= v19)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      char v26 = sub_10024E890();
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v32;
      char v26 = *((unsigned char *)&v38 + v24);
    }
    else
    {
      uint64_t v25 = v31;
      if ((v11 & 0x1000000000000000) == 0) {
        uint64_t v25 = sub_10024F3E0();
      }
      char v26 = *(unsigned char *)(v25 + v24);
    }
    if ((v14 & 0xC) == v22)
    {
      unint64_t v14 = sub_1000F44B4(v14, v11, v13);
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_40:
        unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_45;
      }
    }
    else if ((v13 & 0x1000000000000000) == 0)
    {
      goto LABEL_40;
    }
    if (v19 <= v14 >> 16) {
      goto LABEL_60;
    }
    unint64_t v14 = sub_10024E860();
LABEL_45:
    *((unsigned char *)&v37 + v20) = v26;
    unsigned int v20 = v20 + 1;
    if ((v20 >> 8)) {
      goto LABEL_59;
    }
    BYTE14(v37) = v20;
    if (v20 == 14)
    {
      sub_100076AA4();
      sub_10024DEC0();
      LOBYTE(v20) = 0;
      BYTE14(v37) = 0;
    }
  }
  while (4 * v19 != v14 >> 14);
  uint64_t v3 = v30;
  unint64_t v5 = v29;
  if ((_BYTE)v20)
  {
    sub_100076AA4();
    sub_10024DEC0();
    sub_10003F7F4(v3, v5);
    goto LABEL_55;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  sub_10003F7F4(v3, v5);
LABEL_56:
  swift_bridgeObjectRelease();
  return *(void *)&v35[0];
}

uint64_t sub_100075C34(uint64_t a1)
{
  uint64_t v2 = sub_10024E3D0();
  uint64_t v8 = v2;
  uint64_t v9 = sub_1000768F0(&qword_10030C5B0, (void (*)(uint64_t))&type metadata accessor for SHA384Digest);
  uint64_t v3 = sub_1000709B8(v7);
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v3, a1, v2);
  sub_10001C2A8(v7, v8);
  sub_10024DC30();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
  sub_10001C2EC((uint64_t)v7);
  return v6;
}

uint64_t sub_100075D78(uint64_t a1)
{
  uint64_t v9 = sub_100019524(&qword_10030C5C8);
  unint64_t v10 = sub_100076A50();
  v8[0] = a1;
  uint64_t v2 = sub_10001C2A8(v8, v9);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_1000765E4(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_10001C2EC((uint64_t)v8);
  return v5;
}

uint64_t ECDSASignatureVerifier.__allocating_init(publicKey:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  ECDSASignatureVerifier.init(publicKey:)(a1);
  return v2;
}

uint64_t ECDSASignatureVerifier.init(publicKey:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  CFStringRef v2 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  return v1;
}

BOOL ECDSASignatureVerifier.verify(data:signature:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_10024EB00();
  *(void *)(v6 + 16) = 32;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  uint64_t v23 = v6;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_1000473AC(a1, a2);
      sub_1000767FC((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, (uint64_t)&v23);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_1000473AC(a1, a2);
      swift_retain();
      swift_retain();
      sub_1000767FC(v10, v11, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, (uint64_t)&v23);
      if (v3)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x100076130);
      }
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      goto LABEL_6;
    default:
      uint64_t v7 = BYTE6(a2);
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
      uint64_t v9 = a1;
LABEL_6:
      sub_1000761E8(v9, v8, v7, a1, a2, (uint64_t)&v23);
      break;
  }
  uint64_t v12 = sub_100075D78(v23);
  unint64_t v14 = v13;
  uint64_t v23 = 0;
  uint64_t v16 = *(__SecKey **)(v2 + 16);
  CFStringRef v15 = *(const __CFString **)(v2 + 24);
  CFDataRef isa = sub_10024DEF0().super.isa;
  CFDataRef v18 = sub_10024DEF0().super.isa;
  int v19 = SecKeyVerifySignature(v16, v15, isa, v18, (CFErrorRef *)&v23);

  uint64_t v20 = v23;
  if (v23)
  {
    type metadata accessor for CFError(0);
    sub_1000768F0(&qword_10030C4F8, type metadata accessor for CFError);
    swift_allocError();
    uint64_t *v21 = v20;
    swift_willThrow();
  }
  sub_10003F808(v12, v14);
  return v19 != 0;
}

uint64_t ECDSASignatureVerifier.deinit()
{
  return v0;
}

uint64_t ECDSASignatureVerifier.__deallocating_deinit()
{
  ECDSASignatureVerifier.deinit();
  return _swift_deallocClassInstance(v0, 32, 7);
}

void *sub_10007619C(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1000761E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  sub_10017E454(&v9, (uint64_t)&v9 + a3, a4, a5, a6);
  return sub_10003F808(a4, a5);
}

void *sub_1000762E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  _OWORD v5[2] = v6;
  return sub_1000766E0((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100076A30, (uint64_t)v5, a1, a2);
}

void *sub_100076338(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_10025A770;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (sub_10024DB80() && __OFSUB__((int)v4, sub_10024DBA0())) {
        goto LABEL_17;
      }
      sub_10024DBB0();
      swift_allocObject();
      uint64_t v13 = sub_10024DB60();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      unint64_t result = sub_100076748((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *uint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10024DDE0();
      unint64_t result = sub_100076748(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      uint64_t *v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_10007619C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      unint64_t result = sub_10007619C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      uint64_t *v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_1000765E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = sub_10024DDD0();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = sub_10024DDF0();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = sub_10024DE20();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10007665C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    unint64_t result = sub_10024F340();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000766E0(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_100076748(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  unint64_t result = (char *)sub_10024DB80();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  unint64_t result = (char *)sub_10024DBA0();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_10024DB90();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  unint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1000767FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result = sub_10024DB80();
  uint64_t v12 = (char *)result;
  if (result)
  {
    uint64_t result = sub_10024DBA0();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  BOOL v13 = __OFSUB__(a2, a1);
  uint64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v15 = sub_10024DB90();
  if (v15 >= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t v17 = &v12[v16];
  if (v12) {
    uint64_t v18 = (uint64_t)v17;
  }
  else {
    uint64_t v18 = 0;
  }
  sub_10017E454(v12, v18, a4, a5, a6);
  return sub_10003F808(a4, a5);
}

uint64_t type metadata accessor for ECDSASignatureVerifier()
{
  return self;
}

uint64_t sub_1000768F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100076938(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030C5C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100076998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_1000762E0(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_1000769D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100076998(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000769EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10007665C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100076A30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000769EC(a1, a2);
}

unint64_t sub_100076A50()
{
  unint64_t result = qword_10030C5D0;
  if (!qword_10030C5D0)
  {
    sub_10001B028(&qword_10030C5C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C5D0);
  }
  return result;
}

double sub_100076AA4()
{
  __int16 v1 = *(_WORD *)(v0 - 148);
  double result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 1++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  return result;
}

void sub_100076AC0(char a1)
{
  if (a1)
  {
    sub_100034020();
  }
  else
  {
    swift_release();
    *__int16 v1 = _swiftEmptyArrayStorage;
    sub_100038C98();
    uint64_t v2 = *v1;
    unint64_t v3 = *(void *)(*v1 + 16);
    if (v3 >= *(void *)(*v1 + 24) >> 1)
    {
      sub_100038C98();
      uint64_t v2 = *v1;
    }
    *(void *)(v2 + 16) = v3 + 1;
    uint64_t v4 = (void *)(v2 + 24 * v3);
    void v4[4] = 0;
    v4[5] = 0;
    *(void *)((char *)v4 + 47) = 0;
    *__int16 v1 = v2;
  }
  v1[1] = 0;
  v1[2] = 0;
}

uint64_t sub_100076B7C()
{
  return DecodingState.hashValue.getter(*v0);
}

BOOL ByteToMessageDecoder.shouldReclaimBytes(buffer:)(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFuLL) {
    return 1;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  return v2 >= 0x401 && v2 - a2 < a2;
}

_OWORD *ByteToMessageDecoder.wrapInboundOut(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  sub_10007A8E8();
  double v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v12 - v8, a1, AssociatedTypeWitness, v7);
  return NIOAny.init<A>(_:)((uint64_t)v9, AssociatedTypeWitness, a2);
}

uint64_t ByteToMessageDecoder.decodeLast(context:buffer:seenEOF:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16);
  do
    char v11 = v10(a1, a2, a4, a5);
  while (!v5 && (v11 & 1) == 0);
  return 1;
}

Swift::Int sub_100076CE0()
{
  return NIOHTTPObjectAggregatorEvent.hashValue.getter(*v0);
}

uint64_t sub_100076CFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v7 = a3 - a2;
  if (a3 < a2) {
    v7 += *(void *)(result + 16);
  }
  if (v7 >= 1)
  {
    if ((a2 & 0x8000000000000000) == 0 && !HIDWORD(a2) && (a3 & 0x8000000000000000) == 0 && !HIDWORD(a3))
    {
      uint64_t v8 = a2;
      uint64_t v9 = a3;
      Swift::Int v10 = *(unsigned int *)(v3 + 12);
      uint64_t v11 = v6 + 32;
      BOOL v12 = 1;
      unint64_t v13 = a2;
      do
      {
        if ((((a3 >= a2) ^ v12) & 1) == 0 && v13 == a3) {
          goto LABEL_18;
        }
        unint64_t v14 = *(void *)(v6 + 16);
        if (v14 <= v13)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        uint64_t v15 = (void *)(v11 + 24 * v13);
        if (!*v15) {
          goto LABEL_38;
        }
        uint64_t v16 = (v14 + 0x1FFFFFFFFLL) & (v13 + 1);
        if (HIDWORD(v16)) {
          goto LABEL_40;
        }
        uint64_t v17 = v15[1];
        unsigned int v18 = HIDWORD(v17) - v17;
        if (HIDWORD(v17) < v17) {
          goto LABEL_34;
        }
        unint64_t v13 = v16;
        BOOL v12 = v16 >= a2;
        BOOL v19 = __OFADD__(v10, v18);
        v10 += v18;
      }
      while (!v19);
      __break(1u);
LABEL_18:
      ByteBuffer.reserveCapacity(_:)(v10);
      swift_retain();
      uint64_t v37 = a3;
      if (v8 == v9 && a3 >= v5) {
        return swift_release();
      }
      LODWORD(v21) = v5;
      uint64_t v39 = a3;
      uint64_t v40 = v6;
      uint64_t v38 = v6 + 32;
      while (1)
      {
        unint64_t v22 = *(void *)(v6 + 16);
        if (v22 <= v21) {
          break;
        }
        uint64_t v23 = v11 + 24 * v21;
        if (!*(void *)v23) {
          goto LABEL_39;
        }
        uint64_t v21 = (v22 - 1) & (v21 + 1);
        if (HIDWORD(v21)) {
          goto LABEL_40;
        }
        uint64_t v24 = v5;
        uint64_t v25 = *(void *)(v23 + 8);
        int v26 = *(unsigned __int8 *)(v23 + 22);
        int v27 = *(unsigned __int16 *)(v23 + 20);
        uint64_t v28 = *(unsigned int *)(v23 + 16);
        Swift::UInt32 v29 = *(_DWORD *)(v3 + 12);
        uint64_t v30 = (void *)(*(void *)v23 + 24);
        swift_beginAccess();
        if (HIDWORD(v25) < v25) {
          goto LABEL_36;
        }
        unint64_t v31 = v28 | ((unint64_t)(v27 | (v26 << 16)) << 32);
        uint64_t v32 = *v30 + ((v31 >> 24) & 0xFFFF00 | BYTE6(v31)) + v25;
        int v33 = ByteBuffer._setBytes(_:at:)(v32, v32 + (HIDWORD(v25) - v25), v29);
        int v34 = *(_DWORD *)(v3 + 12);
        BOOL v35 = __CFADD__(v34, v33);
        int v36 = v34 + v33;
        if (v35) {
          goto LABEL_37;
        }
        uint64_t v5 = v24;
        uint64_t v6 = v40;
        *(_DWORD *)(v3 + 12) = v36;
        uint64_t v11 = v38;
        if (v39 >= v24 == v21 >= v24 && v21 == v37) {
          return swift_release();
        }
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
    while (1)
    {
LABEL_40:
      sub_10024F660();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100076FB8(uint64_t result)
{
  *(unsigned char *)uint64_t v1 = 1;
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 < v2)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  if (v3 == v2)
  {
    if (*(void *)(v1 + 16) == *(void *)(v1 + 24)) {
      return result;
    }
    ByteBuffer.discardReadBytes()();
    uint64_t v13 = *(void *)(v1 + 8);
    sub_100076CFC(v13, *(void *)(v1 + 16), *(void *)(v1 + 24));
    sub_100076AC0(*(void *)(v13 + 16) < 0x10uLL);
    uint64_t v14 = *(void *)(v4 + 8);
    unint64_t v15 = *(unsigned int *)(v4 + 16) | ((unint64_t)*(unsigned __int16 *)(v4 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 22) << 48);
    uint64_t v16 = swift_retain();
    sub_100030E00(v16, v14, v15, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    uint64_t v5 = v2 | (v3 << 32);
    unint64_t v6 = *(unsigned int *)(result + 16) | ((unint64_t)*(unsigned __int16 *)(result + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(result + 22) << 48);
    uint64_t v7 = swift_retain();
    sub_1000770C8(v7, v5, v6, v8, v9, v10, v11, v12, v22, v23);
  }
  return swift_release();
}

void sub_1000770C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = *v10;
  uint64_t v15 = v10[1] - 1;
  unint64_t v16 = (*(void *)(*v10 + 16) - 1) & v15;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011FCEC();
    uint64_t v14 = v17;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v16 >= *(void *)(v14 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v18 = v14 + 24 * v16;
  uint64_t v19 = swift_release();
  *(void *)(v18 + 32) = a1;
  *(void *)(v18 + 40) = a2;
  *(unsigned char *)(v18 + 54) = BYTE6(a3);
  *(_WORD *)(v18 + 52) = WORD2(a3);
  *(_DWORD *)(v18 + 48) = a3;
  void *v10 = v14;
  uint64_t v27 = (*(void *)(v14 + 16) - 1) & v15;
  v10[1] = v27;
  if (v27 == v10[2])
  {
    sub_100121864(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
  }
}

BOOL sub_1000771C0(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000771D4()
{
  return CloseMode.hashValue.getter(*v0);
}

void sub_1000771E0(uint64_t a1)
{
  CloseMode.hash(into:)(a1, *v1);
}

Swift::Int sub_1000771EC()
{
  sub_10024FC00();
  CloseMode.hash(into:)((uint64_t)v2, *v0);
  return sub_10024FC70();
}

unint64_t sub_100077234(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  unint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + v2) = a1;
  return sub_100079944(v3);
}

uint64_t ByteToMessageHandler.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  sub_10002F9C8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  uint64_t v9 = ByteToMessageHandler.__allocating_init(_:maximumBufferSize:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  return v9;
}

uint64_t ByteToMessageHandler.__allocating_init(_:maximumBufferSize:)()
{
  uint64_t v0 = swift_allocObject();
  ByteToMessageHandler.init(_:maximumBufferSize:)();
  return v0;
}

void ByteToMessageHandler.init(_:maximumBufferSize:)()
{
  sub_10003C984();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 80);
  uint64_t v9 = sub_10024F030();
  sub_10002F9C8();
  uint64_t v11 = v10;
  sub_10007A8E8();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = (uint64_t)v0 + *(void *)(v7 + 96);
  sub_1000195B4(v16, 1, 1, v8);
  sub_10002FC68();
  uint64_t v18 = (uint64_t *)((char *)v0 + *(void *)(v17 + 112));
  sub_100030788(1uLL);
  void *v18 = v19;
  v18[1] = v20;
  long long v18[2] = v21;
  sub_10002FC68();
  *(uint64_t *)((char *)v0 + *(void *)(v22 + 120)) = 0;
  sub_10002FC68();
  *((unsigned char *)v0 + *(void *)(v23 + 128)) = 0;
  sub_10002FC68();
  uint64_t v25 = (uint64_t)v0 + *(void *)(v24 + 136);
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(void *)(v25 + 47) = 0;
  sub_10002FC68();
  *((unsigned char *)v0 + *(void *)(v26 + 144)) = 0;
  sub_10002FC68();
  uint64_t v28 = (uint64_t)v0 + *(void *)(v27 + 152);
  *(void *)(v28 + 32) = 0;
  *(_OWORD *)uint64_t v28 = v29;
  *(_OWORD *)(v28 + 16) = v29;
  sub_10007A8C4();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v15, v6, v8);
  sub_1000195B4((uint64_t)v15, 0, 1, v8);
  sub_1000578C0();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v16, v15, v9);
  swift_endAccess();
  sub_10002FC68();
  uint64_t v32 = (uint64_t)v0 + *(void *)(v31 + 104);
  *(void *)uint64_t v32 = v4;
  *(unsigned char *)(v32 + 8) = v2 & 1;
  sub_10003C8C8();
}

uint64_t ByteToMessageHandler.deinit()
{
  sub_10007A8B8();
  sub_10007A8B8();
  uint64_t v2 = v0 + *(void *)(v1 + 96);
  sub_10024F030();
  sub_10007A8C4();
  (*(void (**)(uint64_t))(v3 + 8))(v2);
  swift_release();
  sub_10002FC68();
  sub_100079944(*(void *)(v0 + *(void *)(v4 + 120)));
  sub_10002FC68();
  sub_100079954(*(void *)(v0 + *(void *)(v5 + 136)), *(void *)(v0 + *(void *)(v5 + 136) + 8));
  sub_10002FC68();
  sub_100079998(v0 + *(void *)(v6 + 152));
  return v0;
}

uint64_t ByteToMessageHandler.__deallocating_deinit()
{
  return sub_100079384((void (*)(void))ByteToMessageHandler.deinit);
}

uint64_t sub_1000776A4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = (uint64_t *)((char *)v1 + *(void *)(v3 + 112));
  uint64_t v10 = *(void *)(v3 + 96);
  uint64_t v26 = v1;
  uint64_t v11 = (uint64_t)v1 + v10;
  uint64_t result = swift_beginAccess();
  uint64_t v24 = a1 + 24;
  for (i = (uint64_t (**)(char *, uint64_t))(v5 + 8); ; uint64_t result = (*i)(v8, AssociatedTypeWitness))
  {
    uint64_t v14 = v9[1];
    uint64_t v15 = v9[2];
    BOOL v16 = __OFSUB__(v15, v14);
    uint64_t v17 = v15 - v14;
    if (v17 < 0 != v16) {
      v17 += *(void *)(*v9 + 16);
    }
    if (v17 < 1) {
      break;
    }
    swift_beginAccess();
    unint64_t v18 = v9[1];
    uint64_t v19 = v9[2];
    if (v19 == v18)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      uint64_t result = sub_10024F660();
      __break(1u);
      return result;
    }
    if ((v18 & 0x8000000000000000) != 0 || HIDWORD(v18)) {
      goto LABEL_26;
    }
    uint64_t v20 = *v9;
    if (v18 >= *(void *)(*v9 + 16)) {
      goto LABEL_21;
    }
    sub_10007A6EC(v20 + (v18 << 6) + 32, (uint64_t)&v28, &qword_10030A508);
    if (v30[24] == 255) {
      goto LABEL_24;
    }
    v31[0] = v28;
    v31[1] = v29;
    v32[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)&v30[9];
    uint64_t v21 = v19 - v18;
    if (v19 < (uint64_t)v18) {
      v21 += *(void *)(v20 + 16);
    }
    if (v21 < 1) {
      goto LABEL_22;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10011FD0C();
      uint64_t v20 = v23;
    }
    memset(v30, 0, 24);
    long long v29 = 0u;
    long long v28 = 0u;
    v30[24] = -1;
    *uint64_t v9 = v20;
    if (v18 >= *(void *)(v20 + 16)) {
      goto LABEL_23;
    }
    sub_10007A640((uint64_t)&v28, v20 + (v18 << 6) + 32, &qword_10030A508);
    v9[1] = (*(void *)(*v9 + 16) - 1) & (v18 + 1);
    swift_endAccess();
    uint64_t v27 = a1;
    swift_getWitnessTable();
    ChannelOutboundHandler.unwrapOutboundIn(_:)((uint64_t)v8);
    sub_10003908C((uint64_t)v31);
    swift_beginAccess();
    if (sub_10001FA0C(v11, 1, v4) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(a1 + 24))(v8, v4, a1);
    swift_endAccess();
  }
  return result;
}

uint64_t sub_100077AD4(uint64_t a1, uint64_t a2)
{
  return sub_1000776A4(*(void *)(a2 - 8));
}

uint64_t sub_100077AFC(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a2;
  uint64_t v9 = (uint64_t)a2 + *(void *)(*a2 + 96);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v7 + 80);
  sub_10024F030();
  sub_10024FB50();
  uint64_t result = swift_endAccess();
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  uint64_t v13 = *(unsigned int *)(a3 + 12);
  if (v13 < v12)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v13 == v12 || *a4 != 1)
  {
LABEL_7:
    uint64_t v18 = (uint64_t)a2 + *(void *)(*a2 + 136);
    uint64_t result = swift_beginAccess();
    if (*(void *)(v18 + 8))
    {
      sub_100076FB8(a3);
      return swift_endAccess();
    }
    goto LABEL_10;
  }
  uint64_t v21 = *(unsigned int *)(a3 + 16);
  uint64_t v20 = *(unsigned __int16 *)(a3 + 20);
  uint64_t v19 = *(unsigned __int8 *)(a3 + 22);
  swift_beginAccess();
  uint64_t result = sub_10001FA0C(v9, 1, v10);
  if (result != 1)
  {
    uint64_t v14 = *(void *)(v8 + 88);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48);
    uint64_t v16 = swift_retain();
    char v17 = v15(v16, v12 | (v13 << 32), v21 | (v20 << 32) | (v19 << 48), v10, v14);
    swift_endAccess();
    swift_release();
    if (v17) {
      ByteBuffer.discardReadBytes()();
    }
    goto LABEL_7;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100077CFC(unint64_t result)
{
  if (!*(void *)(v1 + *(void *)(*(void *)v1 + 120)))
  {
    if (sub_100077DD8(result, 1) == 2) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = 2;
    }
    return sub_100077234(v2);
  }
  return result;
}

uint64_t sub_100077DD8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v61 = a1;
  int v4 = a2 & 1;
  uint64_t v5 = (void *)*v2;
  uint64_t v64 = v5[10];
  uint64_t v68 = sub_10024F030();
  uint64_t v6 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v7);
  uint64_t v63 = (uint64_t)&v59 - v8;
  int v80 = v4;
  char v82 = v4;
  uint64_t v69 = v5[15];
  uint64_t v59 = v5[16];
  uint64_t v9 = (char *)v3 + v5[17];
  uint64_t v62 = (char *)v3 + v5[12];
  int v67 = (uint64_t *)((char *)v3 + v5[14]);
  swift_beginAccess();
  unsigned int v73 = v9 + 8;
  uint64_t v65 = v9 + 16;
  uint64_t v60 = (uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  char v66 = v3;
  while (1)
  {
    if (*(uint64_t *)((char *)v3 + v69))
    {
      if (!v80) {
        return 0;
      }
    }
    else if (*((unsigned char *)v3 + v59) != 1 && v80 == 0)
    {
      return 0;
    }
    char v11 = v82;
    swift_beginAccess();
    uint64_t v12 = *((void *)v9 + 1);
    if (!v12) {
      break;
    }
    if (*v9 != 1)
    {
      swift_endAccess();
      return 2;
    }
    unint64_t v14 = *((void *)v9 + 2);
    uint64_t v13 = *((void *)v9 + 3);
    uint64_t v15 = v13 - v14;
    if (v13 < (uint64_t)v14) {
      v15 += *(void *)(v12 + 16);
    }
    if (v15 < 1)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_43;
      }
      *uint64_t v9 = 0;
      uint64_t v36 = *((void *)v9 + 4);
      unsigned int v37 = *((_DWORD *)v9 + 10);
      unsigned int v38 = *((_DWORD *)v9 + 11);
      int v39 = *((_DWORD *)v9 + 12);
      __int16 v40 = *((_WORD *)v9 + 26);
      char v41 = v9[54];
      swift_retain();
    }
    else
    {
      if (v13 == v14)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        break;
      }
      if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14)) {
        goto LABEL_61;
      }
      unint64_t v16 = *(void *)(v12 + 16);
      if (v14 >= v16) {
        goto LABEL_54;
      }
      uint64_t v17 = v12 + 24 * v14;
      uint64_t v20 = *(void *)(v17 + 32);
      uint64_t v18 = v17 + 32;
      uint64_t v19 = v20;
      if (!v20) {
        goto LABEL_59;
      }
      BOOL v21 = v13 < (uint64_t)v14;
      uint64_t v22 = v13 - v14;
      if (!v21) {
        unint64_t v16 = 0;
      }
      if ((uint64_t)(v22 + v16) < 1) {
        goto LABEL_55;
      }
      int v23 = *(unsigned __int8 *)(v18 + 22);
      int v24 = *(unsigned __int16 *)(v18 + 20);
      int v25 = *(_DWORD *)(v18 + 16);
      unsigned int v26 = *(_DWORD *)(v18 + 8);
      unsigned int v71 = *(_DWORD *)(v18 + 12);
      int v72 = v25;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v28 = v73;
      *unsigned int v73 = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10011FCEC();
        long long v28 = v73;
        uint64_t v12 = v29;
      }
      *long long v28 = v12;
      if (v14 >= *(void *)(v12 + 16)) {
        goto LABEL_56;
      }
      int v30 = v24 | (v23 << 16);
      uint64_t v31 = (void *)(v12 + 24 * v14);
      swift_release();
      *(void *)((char *)v31 + 47) = 0;
      v31[4] = 0;
      v31[5] = 0;
      uint64_t v32 = *((void *)v9 + 1);
      unint64_t v33 = v14 + 1;
      unint64_t v34 = *(void *)(v32 + 16);
      uint64_t v35 = (v34 - 1) & v33;
      *((void *)v9 + 2) = v35;
      uint64_t v74 = v19;
      unsigned int v75 = v26;
      unsigned int v76 = v71;
      int v77 = v72;
      __int16 v78 = v30;
      char v79 = BYTE2(v30);
      sub_100076CFC(v32, v35, *((void *)v9 + 3));
      if (v34 > 0xF)
      {
        uint64_t v42 = v73;
        swift_release();
        *uint64_t v42 = _swiftEmptyArrayStorage;
        sub_100038C98();
        uint64_t v43 = *v42;
        unint64_t v44 = *(void *)(*v42 + 16);
        uint64_t v3 = v66;
        if (v44 >= *(void *)(*v42 + 24) >> 1)
        {
          unint64_t v57 = v73;
          sub_100038C98();
          uint64_t v43 = *v57;
        }
        *(void *)(v43 + 16) = v44 + 1;
        uint64_t v45 = (void *)(v43 + 24 * v44);
        v45[4] = 0;
        v45[5] = 0;
        *(void *)((char *)v45 + 47) = 0;
      }
      else
      {
        uint64_t v3 = v66;
        sub_100034020();
      }
      uint64_t v46 = v65;
      *uint64_t v65 = 0;
      v46[1] = 0;
      unsigned int v37 = v75;
      unsigned int v38 = v76;
      if (v76 < v75) {
        goto LABEL_57;
      }
      if (v76 == v75) {
        char v47 = v11;
      }
      else {
        char v47 = 1;
      }
      if ((v47 & 1) == 0)
      {
        swift_release();
LABEL_43:
        swift_endAccess();
LABEL_44:
        uint64_t v53 = v67[1];
        uint64_t v54 = v67[2];
        BOOL v55 = __OFSUB__(v54, v53);
        uint64_t v56 = v54 - v53;
        if (v56 < 0 != v55) {
          v56 += *(void *)(*v67 + 16);
        }
        if (v56 < 1) {
          return 1;
        }
        goto LABEL_48;
      }
      *uint64_t v9 = 0;
      uint64_t v36 = v74;
      int v39 = v77;
      __int16 v40 = v78;
      char v41 = v79;
    }
    swift_endAccess();
    uint64_t v74 = v36;
    unsigned int v75 = v37;
    unsigned int v76 = v38;
    int v77 = v39;
    __int16 v78 = v40;
    char v79 = v41;
    char v81 = 0;
    uint64_t v49 = v63;
    uint64_t v48 = v64;
    sub_1000195B4(v63, 1, 1, v64);
    swift_beginAccess();
    sub_10024FB50();
    swift_endAccess();
    if (sub_10001FA0C(v49, 1, v48) == 1) {
      goto LABEL_60;
    }
    uint64_t v50 = v70;
    char v51 = sub_100078534(v49, (uint64_t)&v74, v80, v3, v61, &v82);
    uint64_t v70 = v50;
    if (v50)
    {
      sub_100077AFC(v49, v3, (uint64_t)&v74, &v81);
      swift_release();
      return (*v60)(v49, v68);
    }
    char v52 = v51;
    char v81 = v51 & 1;
    sub_100077AFC(v49, v3, (uint64_t)&v74, &v81);
    swift_release();
    (*v60)(v49, v68);
    if (v52) {
      goto LABEL_44;
    }
LABEL_48:
    sub_100078438();
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = sub_10024F660();
  __break(1u);
  return result;
}

uint64_t sub_100078438()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 112));
  uint64_t result = swift_beginAccess();
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  BOOL v5 = __OFSUB__(v4, v3);
  uint64_t v6 = v4 - v3;
  if (v6 < 0 != v5) {
    v6 += *(void *)(*v1 + 16);
  }
  if (v6 >= 1)
  {
    uint64_t v7 = v0 + *(void *)(*(void *)v0 + 152);
    swift_beginAccess();
    uint64_t result = sub_10007A6EC(v7, (uint64_t)v10, &qword_10030C5D8);
    uint64_t v8 = v11;
    if (v11)
    {
      uint64_t v9 = v12;
      sub_10001C2A8(v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
      return sub_10001C2EC((uint64_t)v10);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100078534(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*a4 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (a3)
  {
    *a6 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 24))(a5, a2, *((unsigned __int8 *)a4 + *(void *)(*a4 + 144)), v11);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(a5, a2, v11, v12);
  }
  if (!v6)
  {
    if ((result & 1) == 0) {
      return 0;
    }
    uint64_t v14 = (uint64_t)a4 + *(void *)(*a4 + 104);
    if (*(unsigned char *)(v14 + 8)) {
      return 1;
    }
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    unsigned int v16 = *(_DWORD *)(a2 + 12);
    BOOL v17 = v16 >= v15;
    unsigned int v18 = v16 - v15;
    if (!v17)
    {
      __break(1u);
      return result;
    }
    if (*(void *)v14 >= (uint64_t)v18)
    {
      return 1;
    }
    else
    {
      sub_10007A6A0();
      swift_allocError();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t ByteToMessageHandler.handlerAdded(context:)()
{
  sub_10007A8B8();
  sub_10007A8B8();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = v0;
    uint64_t v29 = v4;
    uint64_t v27 = *(void *)(v5 + 88);
    uint64_t v28 = v2;
    *(unsigned char *)(v0 + v3) = 1;
    sub_1000AE91C();
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);
    swift_unknownObjectRelease();
    if (qword_100308D08 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v10 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v11 = qword_10034C038;
  int v12 = dword_10034C040;
  __int16 v13 = word_10034C044;
  char v14 = byte_10034C046;
  swift_retain();
  sub_10003095C(4uLL);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  *(void *)uint64_t v21 = 1;
  *(void *)(v21 + 8) = v16;
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
  *(void *)(v21 + 32) = v10;
  *(void *)(v21 + 40) = v11;
  *(_DWORD *)(v21 + 48) = v12;
  *(unsigned char *)(v21 + 54) = v14;
  *(_WORD *)(v21 + 52) = v13;
  sub_100079954(v22, v23);
  uint64_t v32 = v1;
  swift_retain();
  sub_100019524(&qword_10030C5E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
  }
  uint64_t v24 = v1 + *(void *)(*(void *)v1 + 152);
  sub_1000578C0();
  sub_10007A640((uint64_t)v30, v24, &qword_10030C5D8);
  swift_endAccess();
  uint64_t v25 = v1 + *(void *)(*(void *)v1 + 96);
  sub_1000578C0();
  uint64_t result = sub_10001FA0C(v25, 1, v29);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 40))(v28, v29);
    return swift_endAccess();
  }
  return result;
}

uint64_t ByteToMessageHandler.handlerRemoved(context:)(uint64_t a1)
{
  *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 128)) = 4;
  sub_10007A8B8();
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  if (*(void *)(v1 + *(void *)(v3 + 120)) <= 1uLL) {
    sub_100077234(2);
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_10007A8B8();
  uint64_t v8 = v1 + *(void *)(v7 + 152);
  sub_1000578C0();
  sub_10007A640((uint64_t)v12, v8, &qword_10030C5D8);
  swift_endAccess();
  sub_10002FC68();
  uint64_t v10 = v1 + *(void *)(v9 + 96);
  sub_1000578C0();
  uint64_t result = sub_10001FA0C(v10, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, v5, v6);
    return swift_endAccess();
  }
  return result;
}

uint64_t ByteToMessageHandler.channelRead(context:data:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getWitnessTable();
  ChannelInboundHandler.unwrapInboundIn(_:)((uint64_t)&v24);
  uint64_t v3 = v24;
  uint64_t v5 = v25;
  uint64_t v4 = v26;
  uint64_t v6 = v27;
  uint64_t v7 = v28;
  unsigned __int8 v8 = v29;
  uint64_t v9 = *(void *)(*(void *)v1 + 120);
  unint64_t v10 = *(void *)(v1 + v9);
  if (v10 >= 3)
  {
    sub_1000799F8();
    swift_allocError();
    *(void *)uint64_t v21 = v10;
    *(void *)(v21 + 8) = v3;
    *(void *)(v21 + 16) = v5 | (v4 << 32);
    *(unsigned char *)(v21 + 30) = v8;
    *(_WORD *)(v21 + 28) = v7;
    *(_DWORD *)(v21 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
    sub_100079A44(v10);
    sub_100079A44(v10);
    swift_retain();
    ChannelHandlerContext.fireErrorCaught(_:)();
    swift_errorRelease();
    sub_100079944(v10);
    return swift_release();
  }
  uint64_t v11 = v29;
  uint64_t v12 = a1;
  uint64_t v13 = v1 + *(void *)(*(void *)v1 + 136);
  uint64_t result = sub_1000578C0();
  if (!*(void *)(v13 + 8)) {
    goto LABEL_14;
  }
  if (v4 < v5)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 != v5) {
    sub_100030E00(v3, v5 | (v4 << 32), v6 | (v7 << 32) | (v11 << 48), v15, v16, v17, v18, v19, v22, a1);
  }
  swift_endAccess();
  char v20 = sub_100077DD8(v12, 0);
  if (v20 == 2 || *(void *)(v2 + v9) != 1) {
    return swift_release();
  }
  uint64_t result = sub_100077DD8(v12, 1);
  if (result != 2)
  {
    sub_100077234(2);
    return swift_release();
  }
LABEL_15:
  __break(1u);
  return result;
}

void ByteToMessageHandler.channelInactive(context:)()
{
  sub_10002FC68();
  *(unsigned char *)(v0 + *(void *)(v1 + 144)) = 1;
  sub_100077CFC(v2);
  ChannelHandlerContext.fireChannelInactive()();
}

uint64_t ByteToMessageHandler.userInboundEventTriggered(context:event:)(unint64_t a1, uint64_t a2)
{
  sub_1000318C8(a2, (uint64_t)v7);
  if (swift_dynamicCast() && (v6 & 1) == 0)
  {
    sub_10002FC68();
    *(unsigned char *)(v2 + *(void *)(v4 + 144)) = 1;
    sub_100077CFC(a1);
  }
  return ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
}

void ByteToMessageHandler<>.write(context:data:promise:)()
{
  sub_10003C984();
  uint64_t v2 = v1;
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v6 = v5;
  uint64_t v26 = *v0;
  uint64_t v7 = v26;
  uint64_t v8 = *(void *)(v26 + 80);
  swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  uint64_t v24 = v10;
  uint64_t v25 = v9;
  sub_10007A8E8();
  __chkstk_darwin(v11, v12);
  char v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_10024F030();
  sub_10002F9C8();
  uint64_t v17 = v16;
  sub_10007A8E8();
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v24 - v20;
  uint64_t v22 = (uint64_t)v0 + *(void *)(v7 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v22, v15);
  int v23 = sub_10001FA0C((uint64_t)v21, 1, v8);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v15);
  if (v23 == 1)
  {
    sub_10002FC68();
    sub_1000578C0();
    sub_1000310B4(v6);
    swift_endAccess();
LABEL_5:
    ChannelHandlerContext.write(_:promise:)(v6, v28);
    sub_10003C8C8();
    return;
  }
  uint64_t v29 = v2;
  swift_getWitnessTable();
  ChannelOutboundHandler.unwrapOutboundIn(_:)((uint64_t)v14);
  sub_1000578C0();
  if (sub_10001FA0C(v22, 1, v8) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 24))(v14, v8, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_100079094()
{
}

void ByteToMessageHandler.removeHandler(context:removalToken:)()
{
  sub_10003C984();
  sub_10002FC68();
  uint64_t v4 = *(void *)(v3 + 128);
  if (*(unsigned char *)(v0 + v4) == 1)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    *(unsigned char *)(v0 + v4) = 2;
    uint64_t v7 = *(void *)(*(void *)(v1 + 32) + 56);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = v0;
    _OWORD v9[3] = v6;
    void v9[4] = v5;
    uint64_t v10 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v10(sub_100079A9C, v9, ObjectType, v7);
    swift_unknownObjectRelease();
    sub_10003C8C8();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000791A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100077CFC(a2);
  uint64_t v5 = *(void *)(*(void *)a1 + 128);
  if (*(unsigned char *)(a1 + v5) == 2) {
    *(unsigned char *)(a1 + v5) = 3;
  }
  return ChannelHandlerContext.leavePipeline(removalToken:)(a3);
}

uint64_t MessageToByteHandler.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  MessageToByteHandler.init(_:)();
  return v0;
}

uint64_t MessageToByteHandler.init(_:)()
{
  *(void *)(v0 + 16) = 0;
  sub_10007A8B8();
  uint64_t v2 = (void *)(v0 + *(void *)(v1 + 112));
  void *v2 = 0;
  v2[1] = 0;
  *(void *)((char *)v2 + 15) = 0;
  sub_10002FC68();
  sub_10007A8B8();
  sub_10007A8C4();
  (*(void (**)(void))(v3 + 32))();
  return v0;
}

uint64_t MessageToByteHandler.deinit()
{
  sub_100079944(*(void *)(v0 + 16));
  sub_10002FC68();
  sub_10007A8C4();
  (*(void (**)(void))(v1 + 8))();
  swift_release();
  return v0;
}

uint64_t MessageToByteHandler.__deallocating_deinit()
{
  return sub_100079384((void (*)(void))MessageToByteHandler.deinit);
}

uint64_t sub_100079384(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);
  return _swift_deallocClassInstance(v1, v2, v3);
}

void MessageToByteHandler.write(context:data:promise:)()
{
  sub_10003C984();
  uint64_t v38 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = *v0;
  uint64_t v5 = *(void *)(*v0 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v2, v7);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v11 = *(void *)(v10 + 88);
  swift_getAssociatedTypeWitness();
  sub_10002F9C8();
  sub_10007A8E8();
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = v0[2];
  switch(v18)
  {
    case 1:
      BOOL v35 = v14;
      uint64_t v36 = v15;
      uint64_t v37 = v3;
      swift_getWitnessTable();
      ChannelOutboundHandler.unwrapOutboundIn(_:)((uint64_t)v17);
      uint64_t v25 = (char *)v0 + *(void *)(*v0 + 112);
      sub_1000578C0();
      if (!*(void *)v25)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        return;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *(void *)uint64_t v25 = sub_10006C75C(*(_DWORD *)(*(void *)v25 + 16));
        swift_release();
      }
      uint64_t v34 = v4;
      *((_DWORD *)v25 + 4) = *(_DWORD *)(*(void *)v25 + 16);
      *((_WORD *)v25 + 10) = 0;
      v25[22] = 0;
      *((void *)v25 + 1) = 0;
      swift_endAccess();
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, (char *)v0 + *(void *)(*v0 + 104), v5);
      sub_1000578C0();
      if (!*(void *)v25) {
        goto LABEL_20;
      }
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v11 + 16))(v17, v25, v5, v11);
      swift_endAccess();
      uint64_t v28 = sub_10007A8D0();
      v29(v28);
      if (!*(void *)v25) {
        goto LABEL_21;
      }
      char v30 = v25[22];
      __int16 v31 = *((_WORD *)v25 + 10);
      int v32 = *((_DWORD *)v25 + 4);
      uint64_t v33 = *((void *)v25 + 1);
      uint64_t v39 = *(void *)v25;
      uint64_t v40 = v33;
      LODWORD(v41) = v32;
      WORD2(v41) = v31;
      BYTE6(v41) = v30;
      _EmittingChannelHandler.wrapOutboundOut(_:)(&v43);
      ChannelHandlerContext.write(_:promise:)((uint64_t)&v43, v38);
      sub_10003908C((uint64_t)&v43);
      (*(void (**)(char *, BOOL))(v36 + 8))(v17, v35);
LABEL_17:
      sub_10003C8C8();
      return;
    case 2:
      goto LABEL_17;
    case 0:
      __break(1u);
      goto LABEL_19;
  }
  uint64_t v19 = v38;
  if (v38)
  {
    swift_errorRetain();
    sub_1000B44D0(v18, 1, v19, v20, v21, v22, v23, v24, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1),
      v44,
      v45,
      v46);
  }
  else
  {
    swift_errorRetain();
  }
  ChannelHandlerContext.fireErrorCaught(_:)();
  sub_10003C8C8();
  sub_100079944(v26);
}

uint64_t MessageToByteHandler.handlerAdded(context:)()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 16) = 1;
    sub_100079944(0);
    sub_1000AE91C();
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_unknownObjectRelease();
    type metadata accessor for ByteBuffer._Storage();
    uint64_t v12 = static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v5, v7, v9, v11);
    LODWORD(v5) = *(_DWORD *)(v12 + 16);
    uint64_t v13 = v1 + *(void *)(*(void *)v1 + 112);
    sub_10007A918();
    *(void *)uint64_t v13 = v12;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 22) = 0;
    *(_WORD *)(v13 + 20) = 0;
    *(_DWORD *)(v13 + 16) = v5;
    return swift_release();
  }
  return result;
}

uint64_t MessageToByteHandler.handlerRemoved(context:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 2;
  sub_100079944(v1);
  sub_10002FC68();
  uint64_t v3 = (void *)(v0 + *(void *)(v2 + 112));
  sub_10007A918();
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(void *)((char *)v3 + 15) = 0;
  return swift_release();
}

unint64_t sub_100079944(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100079954(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100079998(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030C5D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000799F8()
{
  unint64_t result = qword_10030C5E8;
  if (!qword_10030C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C5E8);
  }
  return result;
}

unint64_t sub_100079A44(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_100079A54()
{
  swift_release();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100079A9C()
{
  return sub_1000791A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_100079AAC()
{
  unint64_t result = qword_10030C5F0;
  if (!qword_10030C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C5F0);
  }
  return result;
}

uint64_t sub_100079AF8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for DecodingState()
{
}

uint64_t sub_100079B58(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0) {
    swift_errorRetain();
  }
  return swift_retain();
}

uint64_t destroy for ByteToMessageDecoderError(uint64_t *a1)
{
  return sub_100079BC0(*a1);
}

uint64_t sub_100079BC0(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0) {
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a2 + 24;
  char v8 = *(unsigned char *)(v6 + 6);
  __int16 v9 = *(_WORD *)(v6 + 4);
  sub_100079B58(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 30) = v8;
  *(_WORD *)(a1 + 28) = v9;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  return a1;
}

uint64_t assignWithCopy for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a2 + 24;
  char v8 = *(unsigned char *)(v6 + 6);
  __int16 v9 = *(_WORD *)(v6 + 4);
  sub_100079B58(v3);
  uint64_t v10 = *(void *)a1;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  *(unsigned char *)(a1 + 30) = v8;
  *(_WORD *)(a1 + 28) = v9;
  sub_100079BC0(v10);
  return a1;
}

__n128 initializeWithTake for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ByteToMessageDecoderError(uint64_t a1, long long *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  long long v4 = *a2;
  int v7 = *((_DWORD *)a2 + 6);
  uint64_t v5 = (uint64_t)a2 + 24;
  int v6 = v7;
  LOWORD(v7) = *(_WORD *)(v5 + 4);
  char v8 = *(unsigned char *)(v5 + 6);
  uint64_t v9 = *(void *)a1;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *(_WORD *)(a1 + 28) = v7;
  *(unsigned char *)(a1 + 30) = v8;
  sub_100079BC0(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteToMessageDecoderError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7F && *(unsigned char *)(a1 + 31))
    {
      unsigned int v2 = *(_DWORD *)a1 + 126;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7E) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteToMessageDecoderError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 30) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 31) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 31) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 23) = 0;
    }
  }
  return result;
}

void type metadata accessor for ByteToMessageDecoderError()
{
}

void type metadata accessor for ByteToMessageDecoderError.PayloadTooLargeError()
{
}

uint64_t sub_100079E78()
{
  uint64_t result = sub_10024F030();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler()
{
  return sub_10002F7A4();
}

uint64_t sub_100079F68()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MessageToByteHandler()
{
  return sub_10002F7A4();
}

uint64_t sub_10007A028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void *initializeWithTake for SocketAddress(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t type metadata accessor for MessageToByteHandler.State()
{
  return sub_10002F7A4();
}

uint64_t destroy for B2MDBuffer()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  return a1;
}

__n128 initializeWithTake for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 47) = *(void *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  return a1;
}

uint64_t getEnumTagSinglePayload for B2MDBuffer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 55))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for B2MDBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 54) = 0;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 55) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 55) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for B2MDBuffer()
{
  return &type metadata for B2MDBuffer;
}

unsigned char *sub_10007A2E4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007A3B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler.RemovalState()
{
  return sub_10002F7A4();
}

void *sub_10007A3F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t sub_10007A430(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

void *sub_10007A448(uint64_t a1)
{
  sub_10007A8F4(a1);
  if (v4)
  {
    sub_10007A90C();
    if (v4)
    {
      swift_errorRetain();
      *unint64_t v1 = v2;
      swift_errorRelease();
    }
    else
    {
      uint64_t v5 = v3;
      swift_errorRelease();
      *unint64_t v1 = *v5;
    }
  }
  else
  {
    sub_10007A90C();
    if (v4) {
      swift_errorRetain();
    }
    *unint64_t v1 = v2;
  }
  return v1;
}

void *sub_10007A4C0(uint64_t a1)
{
  sub_10007A8F4(a1);
  if (!v3)
  {
    sub_10007A90C();
LABEL_6:
    *unint64_t v1 = v2;
    return v1;
  }
  sub_10007A90C();
  if (!v3)
  {
    swift_errorRelease();
    goto LABEL_6;
  }
  *unint64_t v1 = v2;
  swift_errorRelease();
  return v1;
}

uint64_t sub_10007A50C(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007A568(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10007A5B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10007A5D0(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler.State()
{
  return sub_10002F7A4();
}

uint64_t sub_10007A608()
{
  return swift_getWitnessTable();
}

BOOL sub_10007A624(uint64_t a1, unsigned int a2)
{
  return ByteToMessageDecoder.shouldReclaimBytes(buffer:)(a1, a2);
}

uint64_t sub_10007A640(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100019524(a3);
  sub_10007A8C4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

unint64_t sub_10007A6A0()
{
  unint64_t result = qword_10030C930;
  if (!qword_10030C930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C930);
  }
  return result;
}

uint64_t sub_10007A6EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100019524(a3);
  sub_10007A8C4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unsigned char *_s25ASOctaneSupportXPCService13DecodingStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007A818);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for B2MDBuffer.State()
{
  return &type metadata for B2MDBuffer.State;
}

unint64_t sub_10007A854()
{
  unint64_t result = qword_10030C938;
  if (!qword_10030C938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C938);
  }
  return result;
}

uint64_t sub_10007A8D0()
{
  return v0;
}

uint64_t sub_10007A8F4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10007A918()
{
  return swift_beginAccess();
}

uint64_t sub_10007A938(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10007A958(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  return result;
}

void type metadata accessor for UnsafeControlMessageStorage()
{
}

uint64_t sub_10007A990()
{
  return sub_10001B0A4(&qword_10030C940, &qword_10030C948);
}

BOOL sub_10007A9CC()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

BOOL sub_10007A9DC()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  return sub_10000CF7C((uint64_t)v3) == 0;
}

uint64_t sub_10007AA44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (result)
  {
    if (result != -1 || v3 != 0x8000000000000000) {
      return v3 / result == 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_10007AA7C(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

unint64_t sub_10007AAA0(uint64_t a1)
{
  unint64_t result = sub_10000D03C(4);
  if ((result - 0x2000000000000000) >> 62 == 3)
  {
    uint64_t v3 = 4 * result;
    if ((unsigned __int128)((uint64_t)(4 * result) * (__int128)a1) >> 64 == (uint64_t)(4 * result * a1) >> 63)
    {
      swift_slowAlloc();
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10007AB18(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2)
  {
    BOOL v4 = __OFSUB__(result, a3);
    BOOL v3 = result - a3 < 0;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v3 = 0;
  }
  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10007AB2C(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (!result) {
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (result < a2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a3 && result >= a3) {
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_10007AB5C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result)
  {
    if (!a3)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    if (result < a3)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
  }
  if (!a4) {
    return result;
  }
  if (!a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (a4 < a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10007AB90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007ABA4()
{
  long long v1 = v0[1];
  long long v8 = *v0;
  long long v9 = v1;
  long long v10 = v0[2];
  uint64_t v2 = sub_10000CF7C((uint64_t)&v8);
  if (!v2) {
    return 0;
  }
  BOOL v3 = (unsigned int *)v2;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      __break(1u);
    }
    long long v6 = v0[1];
    long long v8 = *v0;
    long long v9 = v6;
    long long v10 = v0[2];
    BOOL v3 = (unsigned int *)sub_10000CFB0((uint64_t)&v8, v3);
    ++v4;
  }
  while (v3);
  return v5;
}

void *sub_10007AC5C()
{
  return sub_100018EF8(v0);
}

void *sub_10007AC68()
{
  long long v1 = sub_1000190DC(v0);
  sub_100074F0C((uint64_t)v0);
  return v1;
}

void *sub_10007AC9C(uint64_t a1)
{
  long long v1 = sub_1000191B4(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10007ACD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 != (v4 * a2) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 * a2 < v3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v5 = a3 + v3;
  if (a3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007AD28(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (result)
  {
    if (result != -1 || v3 != 0x8000000000000000) {
      return v3 / result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10007AD58(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10007AD60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10007AD28(*v1, v1[1], v1[2]);
  *a1 = result;
  return result;
}

void (*sub_10007AD90(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v5 = malloc(0x38uLL);
  *a1 = v5;
  long long v6 = sub_10007AE48((uint64_t)v5, *a2, *v2);
  void v5[4] = v7;
  v5 += 4;
  v5[1] = v8;
  _OWORD v5[2] = v6;
  return sub_10007AE00;
}

void sub_10007AE00(void *a1)
{
  long long v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 48))(*a1);
  free(v1);
}

uint64_t (*sub_10007AE48(uint64_t a1, uint64_t a2, uint64_t a3))(void)
{
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 != (a2 * a3) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((unsigned __int128)(v3 * (__int128)a3) >> 64 != (v3 * a3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 * a3 >= a2 * a3) {
    return debugOnly(_:);
  }
LABEL_9:
  __break(1u);
  return result;
}

double sub_10007AEB8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10007AFB4(*a1, a1[1], *v2, v2[1], v2[2], v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

unint64_t sub_10007AF0C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = v3[1];
  v10[0] = *v3;
  v10[1] = v7;
  _OWORD v10[2] = v3[2];
  unint64_t result = sub_10000CF7C((uint64_t)v10);
  if (!a1) {
    goto LABEL_4;
  }
  if (result)
  {
    if (result > a1) {
      __break(1u);
    }
LABEL_4:
    long long v9 = v3[1];
    *(_OWORD *)(a3 + 16) = *v3;
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)(a3 + 48) = v3[2];
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007AFB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a5 - a4;
  if (!a4) {
    uint64_t v6 = 0;
  }
  if (!a3)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a3 == -1 && v6 == 0x8000000000000000) {
    goto LABEL_16;
  }
  uint64_t v8 = v6 / a3;
  if (v8 < 0) {
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    if (v8 >= a2)
    {
      *a6 = result;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      return result;
    }
    goto LABEL_15;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10007B00C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0 || *(void *)(a3 + 16) < a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    swift_bridgeObjectRetain();
    return v3;
  }
  return result;
}

double sub_10007B06C@<D0>(uint64_t a1@<X8>)
{
  sub_10007B138(*v1, v1[1], v1[2], (uint64_t *)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_10007B0B8@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = *v1;
  long long v4 = v1[1];
  *(_OWORD *)(a1 + 32) = v1[2];
  v7[0] = v5;
  v7[1] = v4;
  _OWORD v7[2] = v1[2];
  uint64_t result = sub_10000CF7C((uint64_t)v7);
  *(void *)(a1 + 48) = result;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_10007B138@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3 - a2;
  if (!a2) {
    uint64_t v4 = 0;
  }
  if (result)
  {
    if (result != -1 || v4 != 0x8000000000000000)
    {
      *a4 = result;
      a4[1] = a2;
      a4[2] = a3;
      a4[3] = 0;
      a4[4] = v4 / result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10007B174()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007B1A8()
{
  return sub_10007AA44(*v0, v0[1], v0[2]);
}

uint64_t sub_10007B1B4()
{
  return sub_10006C924(*v0, v0[1], v0[2]);
}

void sub_10007B1C0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_10007B1D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10007B204(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007B204(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

unsigned int *sub_10007B234(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3)
  {
    while (1)
    {
      long long v5 = v2[1];
      v7[0] = *v2;
      v7[1] = v5;
      _OWORD v7[2] = v2[2];
      if (!a1) {
        break;
      }
      a1 = (unsigned int *)sub_10000CFB0((uint64_t)v7, a1);
      if (!--v3) {
        return a1;
      }
    }
LABEL_7:
    __break(1u);
  }
  return a1;
}

uint64_t sub_10007B2C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_10007B3D4(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

unsigned int *sub_10007B308(unsigned int *a1, uint64_t a2, unsigned int *a3)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  for (uint64_t i = a2; i; --i)
  {
    if (a1)
    {
      if (a3 && a1 == a3) {
        return 0;
      }
    }
    else if (!a3)
    {
      return 0;
    }
    long long v7 = v3[1];
    v9[0] = *v3;
    v9[1] = v7;
    _OWORD v9[2] = v3[2];
    if (!a1) {
      goto LABEL_14;
    }
    a1 = (unsigned int *)sub_10000CFB0((uint64_t)v9, a1);
  }
  return a1;
}

uint64_t sub_10007B3D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
  {
    while (1)
    {
      if (a3 == result) {
        return 0;
      }
      if (result == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10007B420(uint64_t *a1, uint64_t *a2)
{
  return sub_10007B548(*a1, *a2);
}

unsigned int *sub_10007B434(unsigned int *result, char *a2)
{
  uint64_t v4 = result;
  if (!a2) {
    goto LABEL_15;
  }
  if (result)
  {
    if (a2 < (char *)result)
    {
      __break(1u);
LABEL_19:
      __break(1u);
    }
    if (result != (unsigned int *)a2)
    {
      do
      {
        uint64_t v5 = v2[5];
        uint64_t v6 = v2[4];
        int v7 = *((_DWORD *)v2 + 6);
        uint64_t v8 = v2[2];
        int v9 = *((_DWORD *)v2 + 2);
        uint64_t v10 = 1;
        unint64_t v2 = (uint64_t *)*v2;
        do
        {
          uint64_t v13 = v2;
          int v14 = v9;
          uint64_t v15 = v8;
          int v16 = v7;
          uint64_t v17 = v6;
          uint64_t v18 = v5;
          if (!v4) {
            goto LABEL_19;
          }
          uint64_t v11 = sub_10000CFB0((uint64_t)&v13, v4);
          uint64_t v4 = (unsigned int *)v11;
          if (v11)
          {
            if (a2 && v11 == a2) {
              return (unsigned int *)v10;
            }
          }
          else if (!a2)
          {
            return (unsigned int *)v10;
          }
        }
        while (!__OFADD__(v10++, 1));
        __break(1u);
LABEL_15:
        ;
      }
      while (v4);
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B548(uint64_t result, uint64_t a2)
{
  if (a2 < result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 == result) {
    return static NIODeadline.distantPast.getter();
  }
  uint64_t v2 = result;
  uint64_t v3 = a2 - result;
  if (a2 > result)
  {
    uint64_t result = 0;
    unint64_t v4 = ~v2 + a2;
    while (v4 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == ++result) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007B598(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10007B5C8(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_10007AB18);
}

uint64_t sub_10007B5B0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10007B5C8(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1000738C8);
}

uint64_t sub_10007B5C8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, *a2, a2[1], *v5, v5[1], v5[2]);
}

uint64_t sub_10007B5E8(uint64_t *a1, uint64_t *a2)
{
  return sub_10007AB90(*a1, a1[1], *a2, a2[1]);
}

__n128 sub_10007B604@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t sub_10007B618()
{
  return sub_10007AC64(*v0, v0[1], v0[2]);
}

uint64_t sub_10007B624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AA90(a1, a2, a3, *v3, v3[1], v3[2]);
}

unint64_t sub_10007B634()
{
  unint64_t result = qword_10030C950;
  if (!qword_10030C950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C950);
  }
  return result;
}

uint64_t sub_10007B680()
{
  return sub_10001B0A4(&qword_10030C958, &qword_10030C960);
}

uint64_t sub_10007B6BC()
{
  return sub_10001B0A4(&qword_10030C968, &qword_10030C970);
}

uint64_t sub_10007B6F8()
{
  return sub_10001B0A4(&qword_10030C978, &qword_10030C980);
}

BOOL sub_10007B734(unint64_t a1, unint64_t a2)
{
  if (a2) {
    BOOL v2 = a1 < a2;
  }
  else {
    BOOL v2 = 1;
  }
  return a1 && v2;
}

uint64_t sub_10007B754(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2) {
      return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10007B778(uint64_t *a1, uint64_t *a2)
{
  return sub_10007B754(*a1, *a2);
}

BOOL sub_10007B784(unint64_t *a1, unint64_t *a2)
{
  return sub_10007B734(*a1, *a2);
}

uint64_t sub_10007B790(unint64_t *a1, unint64_t *a2)
{
  return sub_1001FADD8(*a1, *a2);
}

uint64_t sub_10007B79C(unint64_t *a1, unint64_t *a2)
{
  return sub_10007E8BC(*a1, *a2);
}

BOOL sub_10007B7A8(unint64_t *a1, unint64_t *a2)
{
  return sub_10007B7B4(*a1, *a2);
}

BOOL sub_10007B7B4(unint64_t a1, unint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 < a1;
  }
  else {
    BOOL v2 = 1;
  }
  return a2 && v2;
}

uint64_t sub_10007B7D4()
{
  sub_10007C5C0();
  return sub_1001FC77C(v0, v1) & 1;
}

uint64_t sub_10007B808()
{
  sub_10007C5C0();
  return static ScheduledTask.< infix(_:_:)(v0, v1) & 1;
}

BOOL sub_10007B83C(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_10007B848()
{
  sub_10007C5F0(__stack_chk_guard);
  return sub_10000CF7C((uint64_t)&v1);
}

char *sub_10007B898()
{
  sub_10007C5F0(__stack_chk_guard);
  if (!v0) {
    __break(1u);
  }
  return sub_10000CFB0((uint64_t)&v2, v0);
}

uint64_t sub_10007B8F4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 4);
    sub_100152934((unsigned int *)result);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B940@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10007B848();
  *a1 = result;
  return result;
}

uint64_t (*sub_10007B968(uint64_t a1, uint64_t *a2))(void)
{
  *(void *)a1 = sub_10007B8F4(*a2);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5 & 1;
  return debugOnly(_:);
}

unint64_t sub_10007B9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007AF0C(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t sub_10007BA04@<X0>(uint64_t a1@<X8>)
{
  return sub_10007B0B8(a1);
}

BOOL sub_10007BA40()
{
  return sub_10007A9DC();
}

uint64_t sub_10007BA80()
{
  return sub_10006C88C();
}

unsigned int *sub_10007BAAC@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t result = sub_10007B234(*a1, a2);
  *a3 = result;
  return result;
}

unsigned int *sub_10007BAF4@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_10007B308(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

unsigned int *sub_10007BB48()
{
  sub_10007C5D8();
  return sub_10007B434(v0, v1);
}

unint64_t sub_10007BB7C(unint64_t *a1, unint64_t *a2)
{
  return sub_10007AB2C(*a1, *a2, a2[1]);
}

unint64_t sub_10007BBC4(unint64_t *a1, unint64_t *a2)
{
  return sub_1000738DC(*a1, *a2, a2[1]);
}

unint64_t sub_10007BC0C(unint64_t *a1, unint64_t *a2)
{
  return sub_10007AB5C(*a1, a1[1], *a2, a2[1]);
}

char *sub_10007BC58@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_10007B898();
  *a1 = result;
  return result;
}

char *sub_10007BC84(unsigned int **a1)
{
  int v2 = *((_DWORD *)v1 + 2);
  uint64_t v3 = v1[2];
  int v4 = *((_DWORD *)v1 + 6);
  uint64_t v5 = v1[4];
  char v6 = *a1;
  uint64_t v9 = *v1;
  int v10 = v2;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v1[5];
  if (!v6) {
    __break(1u);
  }
  uint64_t result = sub_10000CFB0((uint64_t)&v9, v6);
  *a1 = (unsigned int *)result;
  return result;
}

uint64_t sub_10007BD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  uint64_t v5 = v1[2];
  int v6 = *((_DWORD *)v1 + 6);
  uint64_t v7 = v1[4];
  int v9 = *((_DWORD *)v1 + 10);
  int v8 = *((_DWORD *)v1 + 11);
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  int v14 = v6;
  uint64_t v15 = v7;
  int v16 = v9;
  int v17 = v8;
  uint64_t result = sub_10000CF7C((uint64_t)&v11);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 44) = v8;
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10007BDE0()
{
  return sub_10007ABA4();
}

void *sub_10007BE1C()
{
  return sub_10007AC5C();
}

uint64_t sub_10007BE58()
{
  sub_10007C5D8();
  return sub_10007AA8C(v0, v1, v2);
}

unint64_t sub_10007BE88()
{
  unint64_t result = qword_10030C988;
  if (!qword_10030C988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C988);
  }
  return result;
}

unint64_t sub_10007BED8()
{
  unint64_t result = qword_10030C990;
  if (!qword_10030C990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C990);
  }
  return result;
}

uint64_t sub_10007BF24()
{
  return sub_10001B0A4(&qword_10030C998, &qword_10030C9A0);
}

uint64_t sub_10007BF60()
{
  return sub_10001B0A4(&qword_10030C9A8, &qword_10030C9B0);
}

unint64_t sub_10007BFA0()
{
  unint64_t result = qword_10030C9B8;
  if (!qword_10030C9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030C9B8);
  }
  return result;
}

uint64_t sub_10007BFEC(long long *a1)
{
  long long v1 = a1[1];
  long long v25 = *a1;
  long long v26 = v1;
  long long v27 = a1[2];
  long long __dst = v25;
  long long v23 = v1;
  long long v24 = v27;
  uint64_t v2 = sub_10000CF7C((uint64_t)&__dst);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)v2;
  uint64_t v4 = 0;
  unint64_t v21 = 0xF000000000000007;
  while (1)
  {
    unsigned int v5 = v3[1];
    unsigned int v6 = v3[2];
    uint64_t v7 = (_DWORD *)sub_10000CFFC((uint64_t)v3);
    uint64_t v8 = *v3;
    uint64_t v9 = sub_10000D034(0);
    BOOL v10 = __OFSUB__(v8, v9);
    int64_t v11 = v8 - v9;
    if (v10)
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
    long long __dst = v25;
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v3 = (unsigned int *)sub_10000CFB0((uint64_t)&__dst, v3);
    if (v5) {
      break;
    }
    if (v6 == 27)
    {
      if (!v7 || v11 < 1) {
        goto LABEL_45;
      }
      int v15 = *(unsigned __int8 *)v7;
      goto LABEL_25;
    }
    if (qword_100308DC0 != -1) {
      swift_once();
    }
    if (v6 == dword_10034C0D0)
    {
      if (!v7) {
        goto LABEL_48;
      }
      int v18 = v7[2];
      sub_100019524(&qword_10030B048);
      uint64_t v19 = swift_allocObject();
      *(_DWORD *)(v19 + 16) = 512;
      *(_DWORD *)(v19 + 20) = v18;
      *(void *)(v19 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v19 + 32) = 0;
      *(void *)(v19 + 40) = 0xE000000000000000;
      sub_10002F2A0(v21);
      unint64_t v21 = v19;
    }
LABEL_16:
    if (!v3) {
      return v4;
    }
  }
  if (v5 != 41) {
    goto LABEL_16;
  }
  if (v6 == 36)
  {
    if (!v7 || v11 < 4) {
      goto LABEL_46;
    }
    LODWORD(__dst) = 0;
    if ((unint64_t)v11 >= 5) {
      goto LABEL_49;
    }
    memcpy(&__dst, v7, v11);
    int v15 = __dst;
LABEL_25:
    if (qword_100308D98 != -1) {
      swift_once();
    }
    int v16 = dword_10034C0BC;
    if (qword_100308DA8 != -1) {
      swift_once();
    }
    int v17 = v16 & v15;
    if (dword_10034C0C4 == (v16 & v15))
    {
      uint64_t v4 = 2;
    }
    else
    {
      if (qword_100308DA0 != -1) {
        swift_once();
      }
      if (dword_10034C0C0 == v17)
      {
        uint64_t v4 = 1;
      }
      else
      {
        if (qword_100308DB0 != -1) {
          swift_once();
        }
        if (dword_10034C0C8 == v17) {
          uint64_t v4 = 3;
        }
        else {
          uint64_t v4 = 0;
        }
      }
    }
    goto LABEL_16;
  }
  if (qword_100308DD0 != -1) {
    swift_once();
  }
  if (v6 != dword_10034C0D8) {
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v12 = *(void *)v7;
    uint64_t v13 = *((void *)v7 + 1);
    sub_100019524(&qword_10030B040);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
    *(void *)(v14 + 32) = v13;
    *(void *)(v14 + 16) = 7680;
    *(_DWORD *)(v14 + 40) = 0;
    *(void *)(v14 + 48) = 0;
    *(void *)(v14 + 56) = 0xE000000000000000;
    sub_10002F2A0(v21);
    unint64_t v21 = v14 | 0x4000000000000000;
    goto LABEL_16;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = sub_10024F730();
  __break(1u);
  return result;
}

uint64_t sub_10007C3E8(char a1)
{
  switch(a1)
  {
    case 1:
      if (qword_100308DA0 != -1) {
        swift_once();
      }
      long long v1 = &dword_10034C0C0;
      break;
    case 2:
      if (qword_100308DA8 != -1) {
        swift_once();
      }
      long long v1 = &dword_10034C0C4;
      break;
    case 3:
      if (qword_100308DB0 != -1) {
        swift_once();
      }
      long long v1 = &dword_10034C0C8;
      break;
    default:
      if (qword_100308D90 != -1) {
        swift_once();
      }
      long long v1 = &dword_10034C0B8;
      break;
  }
  return *v1;
}

void sub_10007C520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a3 < 0) {
      __break(1u);
    }
  }
  else
  {
    _s25ASOctaneSupportXPCService17EventLoopIteratorVyACSayAA0dE0_pGcfC_0();
  }
}

void type metadata accessor for UnsafeControlMessageCollection.Index()
{
}

uint64_t sub_10007C550(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10007C570(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

void type metadata accessor for UnsafeControlMessage()
{
}

void type metadata accessor for UnsafeControlMessageCollection()
{
}

__n128 sub_10007C5D8()
{
  return v0[2];
}

__n128 sub_10007C5F0@<Q0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 8) = a1;
  return v1[2];
}

void *sub_10007C608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10007E7A8();
    sub_100038BA8();
    char v3 = v13;
    uint64_t v4 = (id *)(v1 + 48);
    do
    {
      id v5 = *v4;
      swift_bridgeObjectRetain_n();
      id v6 = v5;
      sub_100019524(&qword_10030A4E8);
      sub_100019524(&qword_10030CA08);
      swift_dynamicCast();

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007E818();
        sub_100038BA8();
        char v3 = v13;
      }
      unint64_t v7 = v3[2];
      if (v7 >= v3[3] >> 1)
      {
        sub_10007E8B0();
        sub_100038BA8();
        char v3 = v13;
      }
      v4 += 3;
      v3[2] = v7 + 1;
      uint64_t v8 = &v3[3 * v7];
      void v8[4] = v10;
      v8[5] = v11;
      void v8[6] = v12;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_10007C75C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100038DA8();
    uint64_t v3 = a1 + 32;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_100019524(&qword_10030A390);
      sub_100019524(&qword_10030CA00);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007E818();
        sub_100038DA8();
      }
      unint64_t v4 = _swiftEmptyArrayStorage[2];
      if (v4 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_10007E8B0();
        sub_100038DA8();
      }
      _swiftEmptyArrayStorage[2] = v4 + 1;
      _swiftEmptyArrayStorage[v4 + 4] = v6;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10007C898(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100039158();
    uint64_t v3 = a1 + 32;
    do
    {
      swift_unknownObjectRetain_n();
      sub_100019524(&qword_10030A5E8);
      sub_100019524(&qword_10030CA10);
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100039158();
      }
      unint64_t v4 = _swiftEmptyArrayStorage[2];
      if (v4 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100039158();
      }
      _swiftEmptyArrayStorage[2] = v4 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v4 + 4] = v6;
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_10007C9E8(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10001B56C();
    uint64_t v2 = sub_10024F6F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    uint64_t v8 = &_swiftEmptyArrayStorage;
    sub_1000391C8();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          sub_10024F380();
        }
        else {
          id v4 = *(id *)(a1 + 8 * i + 32);
        }
        sub_10007E688();
        swift_dynamicCast();
        id v5 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10007E860();
          sub_1000391C8();
          id v5 = v8;
        }
        unint64_t v6 = v5[2];
        if (v6 >= v5[3] >> 1)
        {
          sub_1000391C8();
          id v5 = v8;
        }
        _OWORD v5[2] = v6 + 1;
        sub_10003B908(&v7, &v5[4 * v6 + 4]);
      }
    }
  }
}

void *sub_10007CB4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    sub_10007E7A8();
    sub_100039218();
    uint64_t v2 = v7;
    do
    {
      swift_bridgeObjectRetain();
      sub_100019524(&qword_10030AA30);
      sub_100019524((uint64_t *)&unk_100319510);
      sub_10007E7F4();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007E878();
        uint64_t v2 = v7;
      }
      sub_10007E7C4();
      if (v3)
      {
        sub_100039218();
        uint64_t v2 = v7;
      }
      sub_10007E848();
      sub_10007E6C8(v4, v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_10007CC30(uint64_t a1)
{
  return sub_10007CD6C(a1, &qword_10030C9E8);
}

void *sub_10007CC3C(uint64_t a1)
{
  return sub_10007CD6C(a1, &qword_10030C9D8);
}

void *sub_10007CC48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_100039218();
    uint64_t v5 = a1 + 32;
    char v3 = _swiftEmptyArrayStorage;
    do
    {
      ++v5;
      uint64_t v6 = sub_100019524(&qword_10030C9E0);
      sub_100019524((uint64_t *)&unk_100319510);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007E860();
        sub_100039218();
        char v3 = v10;
      }
      sub_10007E7C4();
      if (v7)
      {
        sub_100039218();
        char v3 = v10;
      }
      v3[2] = v6;
      sub_10007E6C8((uint64_t)v9, (uint64_t)&v3[4 * v1 + 4]);
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_10007CD60(uint64_t a1)
{
  return sub_10007CD6C(a1, &qword_10030C9F0);
}

void *sub_10007CD6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    sub_100039218();
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v7 = a1 + 40;
    do
    {
      uint64_t v8 = sub_100019524(a2);
      sub_100019524((uint64_t *)&unk_100319510);
      sub_10007E7F4();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007E878();
        uint64_t v4 = v12;
      }
      sub_10007E7C4();
      if (v9)
      {
        sub_100039218();
        uint64_t v4 = v12;
      }
      _OWORD v4[2] = v8;
      sub_10007E6C8((uint64_t)v11, (uint64_t)&v4[4 * v2 + 4]);
      v7 += 16;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void *sub_10007CE74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    sub_10007E7A8();
    sub_1000391C8();
    uint64_t v2 = v7;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000391C8();
        uint64_t v2 = v7;
      }
      sub_10007E7C4();
      if (v3)
      {
        sub_10007E8B0();
        sub_1000391C8();
        uint64_t v2 = v7;
      }
      sub_10007E848();
      sub_10003B908(v4, v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_10007CF6C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000392C4(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      ++v3;
      sub_100019524(&qword_10030C9F8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v4 = (char *)sub_10007E818();
        sub_1000392C4(v4, v5, v6);
      }
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      if (v7 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_10007E8B0();
        sub_1000392C4(v8, v9, v10);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v7) = v12;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_10007D084(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10001B56C();
    uint64_t v2 = sub_10024F6F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    sub_100039384();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v4 = sub_10024F380();
        }
        else
        {
          uint64_t v4 = *(void *)(a1 + 8 * v3 + 32);
          swift_retain();
        }
        unint64_t v5 = _swiftEmptyArrayStorage[2];
        if (v5 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100039384();
        }
        ++v3;
        _swiftEmptyArrayStorage[2] = v5 + 1;
        char v6 = &_swiftEmptyArrayStorage[2 * v5];
        v6[4] = v4;
        void v6[5] = &protocol witness table for SelectableEventLoop;
      }
      while (v2 != v3);
    }
  }
}

void *sub_10007D1B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  sub_10024FAE0();
  swift_unknownObjectRetain_n();
  char v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    char v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    sub_1000195DC(a1, a2, a3, a4);
    int64_t v9 = v8;
    goto LABEL_9;
  }
  int64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    int64_t v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_10007D29C(uint64_t a1)
{
  return sub_10007D2E4(a1, (uint64_t (*)(void))sub_1000390E8);
}

uint64_t sub_10007D2B4(uint64_t a1)
{
  return sub_10007D2E4(a1, (uint64_t (*)(void))sub_1000391C8);
}

uint64_t sub_10007D2CC(uint64_t a1)
{
  return sub_10007D2E4(a1, (uint64_t (*)(void))sub_100039218);
}

uint64_t sub_10007D2E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if (!result || a1 > *(void *)(v4 + 24) >> 1)
  {
    return a2();
  }
  return result;
}

uint64_t sub_10007D374(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + 16) = 0;
  sub_100030788(1uLL);
  *(void *)(v3 + 40) = v7;
  *(void *)(v3 + 48) = v8;
  *(void *)(v3 + 56) = v9;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  swift_beginAccess();
  *(void *)(v3 + 16) = a1;
  swift_release();
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(unsigned char *)(v3 + 32) = a3 & 1;
  return v3;
}

uint64_t ChannelPipeline.addHTTPClientHandlers(position:leftOverBytesStrategy:)()
{
  return ChannelPipeline.addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)();
}

uint64_t ChannelPipeline.addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)()
{
  sub_10007E7D4();
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7))
  {
    swift_retain();
    sub_10007E770();
    sub_10007D670(v0, v5, v4, v6, v3, v2, v1);
    sub_10007E89C();
    EventLoop.makeCompletedFuture<A>(_:)((uint64_t)v22, ObjectType, (uint64_t)&type metadata for () + 8, v7, v9, v10, v11, v12, v19, v20, v22[0], v22[1], v22[2], v22[3], v22[4], v22[5], v22[6], v22[7], v22[8],
      v22[9]);
    uint64_t v14 = v13;
    sub_10003C3F0(v1, v2);
  }
  else
  {
    uint64_t v15 = swift_allocObject();
    char v16 = v6;
    uint64_t v17 = v15;
    *(void *)(v15 + 16) = v0;
    *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
    *(void *)(v15 + 32) = v4;
    *(unsigned char *)(v15 + 40) = v16;
    *(void *)(v15 + 48) = v3;
    *(void *)(v15 + 56) = v2;
    *(void *)(v15 + 64) = v1;
    unint64_t v21 = *(uint64_t (**)(uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v7 + 32);
    swift_retain();
    sub_10007E770();
    uint64_t v14 = v21(sub_10007D960, v17, (char *)&type metadata for () + 8, ObjectType, v7);
    swift_release();
  }
  return v14;
}

uint64_t ChannelPipeline.SynchronousOperations.addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a4) {
    return sub_10007E1FC(a1, a2, a3, a7);
  }
  sub_10007E448(a4);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10007DF58(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  swift_release();
  return sub_10007E730(a4);
}

uint64_t sub_10007D670(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    sub_10007E448(a5);
    sub_10007E448(a5);
    swift_retain();
    sub_10007DF58(a2, a3, a4, a5, a6, a7, a1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_10007E730(a5);
    swift_release();
  }
  else
  {
    sub_10007E1FC(a2, a3, a4, a1);
  }
  swift_release();
  sub_10007D954(a2, a3);
  sub_10007E730(a5);
  return 0;
}

uint64_t sub_10007D7A0(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return 0;
}

uint64_t sub_10007D850(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    sub_10007E448(a5);
    sub_10007E448(a5);
    swift_retain();
    sub_10007DF58(a2, a3, a4, a5, a6, a7, a1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_10007E730(a5);
  }
  else
  {
    swift_retain();
    sub_10007E1FC(a2, a3, a4, a1);
  }
  return swift_release();
}

uint64_t sub_10007D94C()
{
  return sub_10007E3B8(72);
}

uint64_t sub_10007D954(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10007D960()
{
  return sub_10007D850(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10007D98C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t ChannelPipeline.configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  LODWORD(v26) = a7;
  sub_10007E7D4();
  uint64_t v14 = *(void *)(v7 + 56);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14))
  {
    swift_retain();
    sub_10007E770();
    sub_10007D7A0(v7, v12, v11, v13 & 1, v10, v9, v8, v26 & 1);
    sub_10007E89C();
    EventLoop.makeCompletedFuture<A>(_:)((uint64_t)v28, ObjectType, (uint64_t)&type metadata for ()[8], v14, v16, v17, v18, v19, v24, v26, v28[0], v28[1], v28[2], v28[3], v28[4], v28[5], v28[6], v28[7], v28[8],
      v28[9]);
    uint64_t v21 = v20;
    sub_10003C3F0(v8, v9);
  }
  else
  {
    uint64_t v25 = ObjectType;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v7;
    *(void *)(v22 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
    *(void *)(v22 + 32) = v11;
    *(unsigned char *)(v22 + 40) = v13 & 1;
    *(void *)(v22 + 48) = v10;
    *(void *)(v22 + 56) = v9;
    *(void *)(v22 + 64) = v8;
    *(unsigned char *)(v22 + 72) = v26 & 1;
    long long v27 = *(uint64_t (**)(uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v14 + 32);
    swift_retain();
    sub_10007E770();
    uint64_t v21 = v27(sub_10007E418, v22, &type metadata for ()[8], v25, v14);
    swift_release();
  }
  return v21;
}

uint64_t ChannelPipeline.SynchronousOperations.configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  BOOL v11 = a4 == 0;
  uint64_t v12 = *(void *)(a8 + 56);
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift", 119, 2, 215, ObjectType, v12);
  type metadata accessor for HTTPResponseEncoder();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = 0;
  sub_100019524(&qword_10030C9C0);
  swift_allocObject();
  sub_10007E488(2 * v11, 0);
  sub_100019524(&qword_100309150);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100256170;
  *(void *)(v15 + 32) = v14;
  *(void *)(v15 + 40) = &protocol witness table for HTTPResponseEncoder;
  sub_100019524(&qword_10030C9C8);
  swift_allocObject();
  swift_retain();
  uint64_t v16 = swift_retain();
  *(void *)(v15 + 48) = sub_10007D374(v16, 0, 1);
  *(void *)(v15 + 56) = &protocol witness table for ByteToMessageHandler<A>;
  if (a3)
  {
    type metadata accessor for HTTPServerPipelineHandler();
    swift_allocObject();
    uint64_t v17 = HTTPServerPipelineHandler.init()();
    unint64_t v18 = *(void *)(v15 + 16);
    if (v18 >= *(void *)(v15 + 24) >> 1)
    {
      sub_100035AD8();
      uint64_t v15 = v39;
    }
    *(void *)(v15 + 16) = v18 + 1;
    uint64_t v19 = v15 + 16 * v18;
    *(void *)(v19 + 32) = v17;
    *(void *)(v19 + 40) = &protocol witness table for HTTPServerPipelineHandler;
    if ((a7 & 1) == 0)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  else if ((a7 & 1) == 0)
  {
    goto LABEL_3;
  }
  type metadata accessor for HTTPServerProtocolErrorHandler();
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = 0;
  unint64_t v21 = *(void *)(v15 + 16);
  if (v21 >= *(void *)(v15 + 24) >> 1)
  {
    sub_10007E824();
    uint64_t v15 = v40;
  }
  *(void *)(v15 + 16) = v21 + 1;
  uint64_t v22 = v15 + 16 * v21;
  *(void *)(v22 + 32) = v20;
  *(void *)(v22 + 40) = &protocol witness table for HTTPServerProtocolErrorHandler;
  if (a4)
  {
LABEL_11:
    uint64_t v23 = sub_10006BFC0(1, v15);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    unint64_t v29 = v28;
    swift_retain();
    sub_10007E448(a4);
    swift_bridgeObjectRetain();
    char v30 = sub_10007D1B4(v23, v25, v27, v29);
    type metadata accessor for HTTPServerUpgradeHandler();
    swift_allocObject();
    swift_retain();
    uint64_t v31 = HTTPServerUpgradeHandler.init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)(a4, v14, (uint64_t)v30, a5, a6);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10007E818();
      sub_100035AD8();
      uint64_t v15 = v37;
    }
    unint64_t v32 = *(void *)(v15 + 16);
    if (v32 >= *(void *)(v15 + 24) >> 1)
    {
      sub_10007E824();
      uint64_t v15 = v38;
    }
    *(void *)(v15 + 16) = v32 + 1;
    uint64_t v33 = v15 + 16 * v32;
    *(void *)(v33 + 32) = v31;
    *(void *)(v33 + 40) = &protocol witness table for HTTPServerUpgradeHandler;
    swift_release();
    swift_release();
  }
LABEL_16:
  uint64_t v34 = sub_10007C898(v15);
  swift_bridgeObjectRelease();
  sub_1000B1B9C((uint64_t)v34, a1, a2);
  if (v35)
  {
    sub_100019524(&qword_100309768);
    swift_willThrowTypedImpl();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_10007DECC(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return swift_release();
}

uint64_t sub_10007DF58(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a7 + 56);
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift", 119, 2, 172, ObjectType, v8);
  type metadata accessor for HTTPRequestEncoder();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 0;
  sub_100019524(&qword_10030CA18);
  swift_allocObject();
  sub_10007E488(a3, 1);
  sub_100019524(&qword_100309150);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100256170;
  *(void *)(v11 + 32) = v10;
  *(void *)(v11 + 40) = &protocol witness table for HTTPRequestEncoder;
  sub_100019524(&qword_10030CA20);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = swift_retain();
  *(void *)(v11 + 48) = sub_10007D374(v12, 0, 1);
  *(void *)(v11 + 56) = &protocol witness table for ByteToMessageHandler<A>;
  type metadata accessor for NIOHTTPClientUpgradeHandler();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  NIOHTTPClientUpgradeHandler.init(upgraders:httpHandlers:upgradeCompletionHandler:)();
  uint64_t v14 = v13;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100035AD8();
    uint64_t v11 = v20;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  if (v15 >= *(void *)(v11 + 24) >> 1)
  {
    sub_100035AD8();
    uint64_t v11 = v21;
  }
  *(void *)(v11 + 16) = v15 + 1;
  uint64_t v16 = v11 + 16 * v15;
  *(void *)(v16 + 32) = v14;
  *(void *)(v16 + 40) = &protocol witness table for NIOHTTPClientUpgradeHandler;
  uint64_t v17 = sub_10007C898(v11);
  swift_bridgeObjectRelease();
  sub_1000B1B9C((uint64_t)v17, a1, a2);
  if (v18)
  {
    sub_100019524(&qword_100309768);
    swift_willThrowTypedImpl();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_10007E1FC(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 56);
  uint64_t ObjectType = swift_getObjectType();
  EventLoop.assertInEventLoop(file:line:)("/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift", 119, 2, 162, ObjectType, v7);
  type metadata accessor for HTTPRequestEncoder();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = 0;
  sub_100019524(&qword_10030CA18);
  swift_allocObject();
  sub_10007E488(a3, 1);
  sub_100019524(&qword_10030A5F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100256170;
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = &protocol witness table for HTTPRequestEncoder;
  sub_100019524(&qword_10030CA20);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = swift_retain();
  *(void *)(inited + 48) = sub_10007D374(v11, 0, 1);
  *(void *)(inited + 56) = &protocol witness table for ByteToMessageHandler<A>;
  sub_1000B1B9C(inited, a1, a2);
  if (v12)
  {
    sub_100019524(&qword_100309768);
    swift_willThrowTypedImpl();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10007E3B0()
{
  return sub_10007E3B8(73);
}

uint64_t sub_10007E3B8(uint64_t a1)
{
  swift_release();
  sub_10007D954(v1[3], v1[4]);
  if (v1[6])
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10007E418()
{
  return sub_10007DECC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
}

uint64_t sub_10007E448(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10007E488(char a1, char a2)
{
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 114) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 87) = 0;
  swift_beginAccess();
  sub_1001D58A8(16);
  swift_endAccess();
  *(unsigned char *)(v2 + 113) = a2;
  type metadata accessor for BetterHTTPParser();
  swift_allocObject();
  *(void *)(v2 + 104) = sub_1001E2AFC(a2);
  *(unsigned char *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_10007E548()
{
  return sub_10007E578((uint64_t (*)(uint64_t))sub_1000391C8);
}

uint64_t sub_10007E560()
{
  return sub_10007E578((uint64_t (*)(uint64_t))sub_100039218);
}

uint64_t sub_10007E578(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = sub_10007E818();
    return a1(v4);
  }
  return result;
}

uint64_t sub_10007E5E8(uint64_t a1)
{
  return sub_10007E618(a1, (uint64_t (*)(BOOL))sub_1000391C8);
}

uint64_t sub_10007E600(uint64_t a1)
{
  return sub_10007E618(a1, (uint64_t (*)(BOOL))sub_100039218);
}

uint64_t sub_10007E618(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1)) {
    return a2(v3 > 1);
  }
  return result;
}

_OWORD *sub_10007E648(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return sub_10003B908(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t sub_10007E668(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return sub_10007E6C8(a2, v3 + 32 * a1 + 32);
}

unint64_t sub_10007E688()
{
  unint64_t result = qword_10030C9D0;
  if (!qword_10030C9D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10030C9D0);
  }
  return result;
}

uint64_t sub_10007E6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019524((uint64_t *)&unk_100319510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E730(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10007E770()
{
  sub_10007D98C(v2, v1);
  return sub_10007E448(v0);
}

uint64_t sub_10007E7A8()
{
  return 0;
}

uint64_t sub_10007E7F4()
{
  return swift_dynamicCast();
}

uint64_t sub_10007E818()
{
  return 0;
}

void sub_10007E824()
{
  sub_100035AD8();
}

void sub_10007E848()
{
  *(void *)(v0 + 16) = v1;
}

uint64_t sub_10007E860()
{
  return 0;
}

void sub_10007E878()
{
  sub_100039218();
}

uint64_t sub_10007E8BC(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 >= a2;
  if (!a2) {
    BOOL v2 = 0;
  }
  return !a1 || v2;
}

BOOL sub_10007E8DC()
{
  return !sub_100218F0C();
}

BOOL sub_10007E904()
{
  sub_1000805C8();
  return (sub_1001FC77C(v0, v1) & 1) == 0;
}

BOOL sub_10007E934()
{
  sub_1000805C8();
  return (static ScheduledTask.< infix(_:_:)(v0, v1) & 1) == 0;
}

BOOL sub_10007E968(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

uint64_t sub_10007E974(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0) {
    return a1 >= a2;
  }
  uint64_t result = sub_10024F660();
  __break(1u);
  return result;
}

uint64_t static AcceptBackoffHandler.defaultBackoffProvider(error:)()
{
  return 1000000000;
}

uint64_t AcceptBackoffHandler.__allocating_init(backoffProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = a2;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *(void *)(result + 48) = 0;
  return result;
}

uint64_t AcceptBackoffHandler.init(backoffProvider:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *(void *)(v2 + 48) = 0;
  return HTTPServerProtocolErrorHandler.deinit();
}

void AcceptBackoffHandler.read(context:)(uint64_t a1)
{
  if (!*(void *)(v1 + 48))
  {
    if (*(unsigned char *)(v1 + 24))
    {
      ChannelHandlerContext.read()();
    }
    else
    {
      unint64_t v3 = *(void *)(v1 + 16);
      unint64_t v4 = static NIODeadline.now()();
      if (sub_10007E974(v4, v3))
      {
        sub_10007EB00();
      }
      else
      {
        sub_10007EB40(v3, a1);
      }
    }
  }
}

void sub_10007EB00()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *(void *)(v0 + 48) = 0;
  swift_release();
  ChannelHandlerContext.read()();
}

uint64_t sub_10007EB40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 56);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  uint64_t v9 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, char *, uint64_t, uint64_t))(v6 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = v9(a1, sub_100080540, v8, &type metadata for ()[8], ObjectType, v6);
  swift_release();
  swift_unknownObjectRelease();
  *(void *)(v3 + 48) = v10;
  return swift_release();
}

#error "10007ED2C: call analysis failed (funcsize=78)"

#error "10007EDDC: call analysis failed (funcsize=39)"

#error "10007EE80: call analysis failed (funcsize=39)"

uint64_t AcceptBackoffHandler.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t AcceptBackoffHandler.__deallocating_deinit()
{
  AcceptBackoffHandler.deinit();
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t BackPressureHandler.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 256;
  return result;
}

uint64_t BackPressureHandler.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 256;
  return result;
}

void BackPressureHandler.read(context:)()
{
  if (*(unsigned char *)(v0 + 17) == 1) {
    ChannelHandlerContext.read()();
  }
  else {
    *(unsigned char *)(v0 + 16) = 1;
  }
}

void BackPressureHandler.channelWritabilityChanged(context:)()
{
  sub_1000AE91C();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(ObjectType, v2);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 17) = v2 & 1;
  if (v2) {
    _s25ASOctaneSupportXPCService19BackPressureHandlerC14handlerRemoved7contextyAA07ChannelF7ContextC_tF_0();
  }
  else {
    ChannelHandlerContext.flush()();
  }
  ChannelHandlerContext.fireChannelWritabilityChanged()();
}

void _s25ASOctaneSupportXPCService19BackPressureHandlerC14handlerRemoved7contextyAA07ChannelF7ContextC_tF_0()
{
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    *(unsigned char *)(v0 + 16) = 0;
    ChannelHandlerContext.read()();
  }
}

uint64_t BackPressureHandler.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 18, 7);
}

uint64_t IdleStateHandler.readTimeout.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t IdleStateHandler.writeTimeout.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t IdleStateHandler.allTimeout.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t IdleStateHandler.__allocating_init(readTimeout:writeTimeout:allTimeout:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  char v9 = a2 & 1;
  char v10 = a4 & 1;
  char v11 = a6 & 1;
  uint64_t v12 = swift_allocObject();
  IdleStateHandler.init(readTimeout:writeTimeout:allTimeout:)(a1, v9, a3, v10, a5, v11);
  return v12;
}

uint64_t IdleStateHandler.init(readTimeout:writeTimeout:allTimeout:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 57) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 & 1;
  *(void *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 40) = a4 & 1;
  *(void *)(v6 + 48) = a5;
  *(unsigned char *)(v6 + 56) = a6 & 1;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 80) = 0;
  return HTTPServerProtocolErrorHandler.deinit();
}

uint64_t IdleStateHandler.handlerAdded(context:)(uint64_t a1)
{
  sub_1000AE91C();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(ObjectType, v3);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    return sub_10007F204(a1);
  }
  return result;
}

uint64_t sub_10007F204(uint64_t a1)
{
  uint64_t v3 = static NIODeadline.now()();
  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + 72) = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  swift_retain();
  *(void *)(v1 + 80) = sub_1000800D0(a1, v4, v5, v1, v1, (uint64_t)&unk_1002DFAA8, (uint64_t)&unk_1002DFAD0, (uint64_t)sub_10008049C, (uint64_t)sub_100080598);
  swift_release();
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  swift_retain();
  *(void *)(v1 + 88) = sub_1000800D0(a1, v6, v7, v1, v1, (uint64_t)&unk_1002DF9B8, (uint64_t)&unk_1002DF9E0, (uint64_t)sub_100080484, (uint64_t)sub_100080598);
  swift_release();
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  swift_retain();
  *(void *)(v1 + 96) = sub_1000800D0(a1, v8, v9, v1, v1, (uint64_t)&unk_1002DF878, (uint64_t)&unk_1002DF8A0, (uint64_t)sub_10008044C, (uint64_t)sub_100080458);
  return swift_release();
}

#error "10007F3FC: call analysis failed (funcsize=96)"

void IdleStateHandler.channelActive(context:)(uint64_t a1)
{
}

uint64_t IdleStateHandler.channelRead(context:data:)()
{
  if (v0[24] != 1 || (v0[56] & 1) == 0) {
    v0[57] = 1;
  }
  return ChannelHandlerContext.fireChannelRead(_:)();
}

void IdleStateHandler.channelReadComplete(context:)()
{
  if ((*(unsigned char *)(v0 + 24) != 1 || (*(unsigned char *)(v0 + 56) & 1) == 0) && *(unsigned char *)(v0 + 57) == 1)
  {
    *(void *)(v0 + 64) = static NIODeadline.now()();
    *(unsigned char *)(v0 + 57) = 0;
  }
  ChannelHandlerContext.fireChannelReadComplete()();
}

uint64_t IdleStateHandler.write(context:data:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 40) == 1 && *(unsigned char *)(v3 + 56) == 1) {
    return ChannelHandlerContext.write(_:promise:)(a2, a3);
  }
  if (a3)
  {
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 56);
    uint64_t ObjectType = swift_getObjectType();
    EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for ()[8]);
    uint64_t v6 = EventLoop.makePromise<A>(of:file:line:)((uint64_t)&type metadata for ()[8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelHandlers.swift", 117, 2, 228, ObjectType, (uint64_t)&type metadata for ()[8], v7);
  }
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  sub_10012DE30();
  swift_release();
  swift_release_n();
  swift_retain();
  ChannelHandlerContext.write(_:promise:)(a2, v6);
  return swift_release_n();
}

uint64_t sub_10007F740()
{
  sub_1000AE91C();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t sub_10007F798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10007F740();
  if (result)
  {
    if (*(unsigned char *)(a1 + 57) == 1)
    {
      uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 56);
      uint64_t ObjectType = swift_getObjectType();
      char v9 = (void *)swift_allocObject();
      _OWORD v9[2] = a1;
      _OWORD v9[3] = a2;
      void v9[4] = a3;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_1000805B8;
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
      char v11 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v7 + 48);
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v12 = v11(a3, sub_100080598, v10, &type metadata for ()[8], ObjectType, v7);
    }
    else
    {
      uint64_t v13 = static NIODeadline.now()();
      uint64_t v14 = *(void *)(a1 + 64);
      uint64_t v15 = static NIODeadline.- infix(_:_:)(v13, v14);
      uint64_t v16 = *(void *)(*(void *)(a2 + 32) + 56);
      uint64_t v17 = swift_getObjectType();
      if (v15 >= a3)
      {
        uint64_t v22 = (void *)swift_allocObject();
        void v22[2] = a1;
        v22[3] = a2;
        v22[4] = a3;
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = sub_1000805B8;
        *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
        uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v16 + 48);
        swift_retain();
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t v25 = v24(a3, sub_100080598, v23, &type metadata for ()[8], v17, v16);
        swift_release();
        swift_unknownObjectRelease();
        *(void *)(a1 + 80) = v25;
        swift_release();
        uint64_t v27 = &type metadata for IdleStateHandler.IdleStateEvent;
        v26[0] = 1;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        return sub_10001C2EC((uint64_t)v26);
      }
      uint64_t v18 = static NIODeadline.+ infix(_:_:)(v14, a3);
      uint64_t v19 = (void *)swift_allocObject();
      void v19[2] = a1;
      void v19[3] = a2;
      void v19[4] = a3;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_1000805B8;
      *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v16 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v12 = v21(v18, sub_100080598, v20, &type metadata for ()[8], v17, v16);
    }
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(a1 + 80) = v12;
    return swift_release();
  }
  return result;
}

uint64_t sub_10007FAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10007F740();
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v8 = static NIODeadline.now()();
    uint64_t v9 = static NIODeadline.- infix(_:_:)(v8, v7);
    uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 56);
    uint64_t ObjectType = swift_getObjectType();
    if (v9 >= a3)
    {
      uint64_t v17 = (void *)swift_allocObject();
      void v17[2] = a1;
      v17[3] = a2;
      v17[4] = a3;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = sub_1000805B4;
      *(void *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v10 + 48);
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v20 = v19(a3, sub_100080598, v18, &type metadata for ()[8], ObjectType, v10);
      swift_release();
      swift_unknownObjectRelease();
      *(void *)(a1 + 88) = v20;
      swift_release();
      uint64_t v22 = &type metadata for IdleStateHandler.IdleStateEvent;
      v21[0] = 0;
      ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
      return sub_10001C2EC((uint64_t)v21);
    }
    else
    {
      uint64_t v12 = static NIODeadline.+ infix(_:_:)(*(void *)(a1 + 72), a3);
      uint64_t v13 = (void *)swift_allocObject();
      v13[2] = a1;
      v13[3] = a2;
      void v13[4] = a3;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = sub_1000805B4;
      *(void *)(v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v10 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v16 = v15(v12, sub_100080598, v14, &type metadata for ()[8], ObjectType, v10);
      swift_release();
      swift_unknownObjectRelease();
      *(void *)(a1 + 88) = v16;
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10007FD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10007F740();
  if (result)
  {
    if (*(unsigned char *)(a1 + 57) == 1)
    {
      uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 56);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = (void *)swift_allocObject();
      _OWORD v9[2] = a1;
      _OWORD v9[3] = a2;
      void v9[4] = a3;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_1000805B0;
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
      char v11 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v7 + 48);
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v12 = v11(a3, sub_100080598, v10, &type metadata for ()[8], ObjectType, v7);
    }
    else
    {
      unint64_t v13 = sub_1001FAF14(*(void *)(a1 + 64), *(void *)(a1 + 72));
      uint64_t v14 = static NIODeadline.now()();
      uint64_t v15 = static NIODeadline.- infix(_:_:)(v14, v13);
      uint64_t v16 = *(void *)(*(void *)(a2 + 32) + 56);
      uint64_t v17 = swift_getObjectType();
      if (v15 >= a3)
      {
        uint64_t v22 = (void *)swift_allocObject();
        void v22[2] = a1;
        v22[3] = a2;
        v22[4] = a3;
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = sub_1000805B0;
        *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
        uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v16 + 48);
        swift_retain();
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t v25 = v24(a3, sub_100080598, v23, &type metadata for ()[8], v17, v16);
        swift_release();
        swift_unknownObjectRelease();
        *(void *)(a1 + 80) = v25;
        swift_release();
        uint64_t v27 = &type metadata for IdleStateHandler.IdleStateEvent;
        v26[0] = 2;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)();
        return sub_10001C2EC((uint64_t)v26);
      }
      uint64_t v18 = static NIODeadline.+ infix(_:_:)(v13, a3);
      uint64_t v19 = (void *)swift_allocObject();
      void v19[2] = a1;
      void v19[3] = a2;
      void v19[4] = a3;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_1000805B0;
      *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v16 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v12 = v21(v18, sub_100080598, v20, &type metadata for ()[8], v17, v16);
    }
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(a1 + 80) = v12;
    return swift_release();
  }
  return result;
}

uint64_t sub_1000800D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3)
  {
    swift_release();
    return 0;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 56);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = (void *)swift_allocObject();
    long long v15[2] = a5;
    v15[3] = a1;
    _OWORD v15[4] = a2;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a8;
    *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v13 + 48);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v18 = v17(a2, a9, v16, &type metadata for ()[8], ObjectType, v13);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  return v18;
}

uint64_t IdleStateHandler.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t IdleStateHandler.__deallocating_deinit()
{
  IdleStateHandler.deinit();
  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_10008026C()
{
  uint64_t result = static NIODeadline.now()();
  *(void *)(v0 + 72) = result;
  return result;
}

unint64_t sub_10008028C()
{
  unint64_t result = qword_10030CB18;
  if (!qword_10030CB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030CB18);
  }
  return result;
}

uint64_t type metadata accessor for AcceptBackoffHandler()
{
  return self;
}

uint64_t type metadata accessor for BackPressureHandler()
{
  return self;
}

uint64_t type metadata accessor for IdleStateHandler()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for IdleStateHandler.IdleStateEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100080410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdleStateHandler.IdleStateEvent()
{
  return &type metadata for IdleStateHandler.IdleStateEvent;
}

uint64_t sub_10008044C()
{
  return sub_10007FD70(v0[2], v0[3], v0[4]);
}

uint64_t sub_100080458()
{
  return sub_1001FAF68(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100080484()
{
  return sub_10007FAF0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10008049C()
{
  return sub_10007F798(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000804B4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000804EC()
{
  return sub_1000804F4(32);
}

uint64_t sub_1000804F4(uint64_t a1)
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v1, a1, 7);
}

void sub_100080540()
{
}

uint64_t sub_100080598()
{
  return sub_100080458();
}

uint64_t sub_1000805C0()
{
  return sub_1000804F4(40);
}

uint64_t sub_1000805DC(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_retain();
}

uint64_t sub_1000805FC(uint64_t a1, void *a2)
{
  id v3 = [self interfaceWithProtocol:&OBJC_PROTOCOL___ASOctaneSupportXPCServiceProtocol];
  [a2 setExportedInterface:v3];
  id v4 = [objc_allocWithZone((Class)type metadata accessor for OctaneXPCService()) init];
  [a2 setExportedObject:v4];

  [a2 setRemoteObjectInterface:v3];
  [a2 resume];

  return 1;
}

id sub_100080724()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctaneXPCServiceDelegate();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10008077C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctaneXPCServiceDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for OctaneXPCServiceDelegate()
{
  return self;
}

uint64_t sub_1000807D4(uint64_t a1)
{
  type metadata accessor for InAppPendingTransactionsResponse();
  swift_allocObject();
  uint64_t v2 = sub_1000CC340();
  *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2;
  *(void *)(v2 + 32) = *(void *)(a1 + 16);
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t type metadata accessor for InAppPendingTransactionsResponse()
{
  return self;
}

uint64_t *sub_100080858(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10024DDC0();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100080940(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10024DDC0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_1000809B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10024DDC0();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100080A50(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10024DDC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_100080AEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10024DDC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100080B68(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10024DDC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100080BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100080C08);
}

uint64_t sub_100080C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10024DDC0();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10001FA0C(v9, a2, v8);
  }
}

uint64_t sub_100080C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100080CA4);
}

uint64_t sub_100080CA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10024DDC0();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_1000195B4(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for OctaneAsset()
{
  uint64_t result = qword_10030D0B0;
  if (!qword_10030D0B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100080D6C()
{
  uint64_t result = sub_10024DDC0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100080E04()
{
  type metadata accessor for OctaneAsset();
  uint64_t v0 = sub_10024DD40();
  unint64_t v2 = v1;
  v15[0] = 46;
  v15[1] = 0xE100000000000000;
  void v14[2] = v15;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1001DCA88(1, 1u, sub_1000818D4, (uint64_t)v14, v0, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    v15[0] = _swiftEmptyArrayStorage;
    sub_1000389BC();
    uint64_t v5 = (void *)v15[0];
    uint64_t v6 = v3 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_10024E740();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      v15[0] = v5;
      unint64_t v10 = v5[2];
      if (v10 >= v5[3] >> 1)
      {
        sub_1000389BC();
        uint64_t v5 = (void *)v15[0];
      }
      _OWORD v5[2] = v10 + 1;
      uint64_t v11 = &v5[2 * v10];
      uint64_t v11[4] = v7;
      v11[5] = v9;
      v6 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  if (v5[2] == 2)
  {
    uint64_t v12 = v5[6];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v12 = 0;
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100080FC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_10024DD40();
  unint64_t v6 = v5;
  v27[0] = 46;
  v27[1] = 0xE100000000000000;
  uint64_t v26 = v27;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1001DCA88(1, 1u, sub_100081864, (uint64_t)v25, v4, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v28 = a1;
    v27[0] = _swiftEmptyArrayStorage;
    sub_1000389BC();
    uint64_t v9 = (void *)v27[0];
    uint64_t v10 = v7 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_10024E740();
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v27[0] = v9;
      unint64_t v14 = v9[2];
      if (v14 >= v9[3] >> 1)
      {
        sub_1000389BC();
        uint64_t v9 = (void *)v27[0];
      }
      _OWORD v9[2] = v14 + 1;
      uint64_t v15 = &v9[2 * v14];
      _OWORD v15[4] = v11;
      v15[5] = v13;
      v10 += 32;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    a1 = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  if (v9[2])
  {
    uint64_t v16 = v9[4];
    uint64_t v17 = v9[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v16;
    a2[1] = v17;
    uint64_t v18 = (char *)a2 + *(int *)(type metadata accessor for OctaneAsset() + 20);
    uint64_t v19 = sub_10024DDC0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a1, v19);
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for OctaneError();
    sub_100081884();
    swift_allocError();
    uint64_t v22 = v21;
    uint64_t v23 = sub_10024DDC0();
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, a1, v23);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
  }
}

void *sub_10008128C(void *a1)
{
  uint64_t v3 = sub_10024DDC0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_1000589AC();
  uint64_t v43 = v6;
  uint64_t v7 = type metadata accessor for OctaneAsset();
  uint64_t v42 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  sub_1000589AC();
  uint64_t v44 = v9;
  uint64_t v10 = sub_100019524(&qword_100309778);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = self;
  id v15 = [v14 defaultManager];
  int v16 = NSFileManager.fileExists(at:)();

  if ((~v16 & 0x101) != 0) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v17 = [v14 defaultManager];
  sub_10024DD80(0);
  NSString v18 = sub_10024E6A0();
  swift_bridgeObjectRelease();
  id v45 = 0;
  id v19 = [v17 contentsOfDirectoryAtPath:v18 error:&v45];

  id v20 = v45;
  if (v19)
  {
    uint64_t v21 = sub_10024EAA0();
    id v22 = v20;

    __chkstk_darwin(v23, v24);
    *(&v38 - 2) = a1;
    uint64_t v25 = sub_1001AD494((void (*)(void *))sub_100081844, (uint64_t)(&v38 - 4), v21);
    swift_bridgeObjectRelease();
    uint64_t v26 = v25[2];
    uint64_t v38 = v25;
    if (v26)
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      uint64_t v27 = v4 + 16;
      unint64_t v29 = (char *)v25 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
      uint64_t v39 = *(void *)(v27 + 56);
      uint64_t v40 = v28;
      uint64_t v41 = v27;
      char v30 = (void (**)(uint64_t, char *, uint64_t))(v27 + 16);
      uint64_t v17 = _swiftEmptyArrayStorage;
      while (1)
      {
        v40(v13, v29, v3);
        sub_1000195B4((uint64_t)v13, 0, 1, v3);
        if (sub_10001FA0C((uint64_t)v13, 1, v3) == 1) {
          break;
        }
        uint64_t v31 = v43;
        (*v30)(v43, v13, v3);
        sub_100080FC0(v31, v44);
        if (v1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v17;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100034DAC(0, v17[2] + 1, 1, (uint64_t)v17);
          uint64_t v17 = v34;
        }
        unint64_t v33 = v17[2];
        unint64_t v32 = v17[3];
        if (v33 >= v32 >> 1)
        {
          sub_100034DAC(v32 > 1, v33 + 1, 1, (uint64_t)v17);
          uint64_t v17 = v35;
        }
        void v17[2] = v33 + 1;
        sub_1000659DC((uint64_t)v44, (uint64_t)v17+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v33);
        v29 += v39;
        if (!--v26) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_16:
      sub_1000195B4((uint64_t)v13, 1, 1, v3);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v36 = v45;
    sub_10024DCE0();

    swift_willThrow();
  }
  return v17;
}

uint64_t sub_100081714(void *a1)
{
  uint64_t v2 = sub_10024DCF0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
  sub_10001DAC0();
  sub_10024DDB0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100081844(void *a1)
{
  return sub_100081714(a1);
}

uint64_t sub_100081864(uint64_t *a1)
{
  return sub_1001DF37C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_100081884()
{
  unint64_t result = qword_10030D0E8;
  if (!qword_10030D0E8)
  {
    type metadata accessor for OctaneError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D0E8);
  }
  return result;
}

uint64_t sub_1000818D4(uint64_t *a1)
{
  return sub_100081864(a1) & 1;
}

void sub_1000818F0(void (*a1)(uint64_t *__return_ptr))
{
  Lock.lock()();
  a1(&v2);
  Lock.unlock()();
}

void sub_10008196C(void (*a1)(uint64_t *__return_ptr))
{
  Lock.lock()();
  a1(&v2);
  Lock.unlock()();
}

uint64_t sub_1000819EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    v11[0] = a1;
    v11[1] = a2;
    uint64_t v5 = *(void *)(a4 + 72);
    if (v5 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v5 <= 0x7FFFFFFF)
      {
        int v6 = *(_DWORD *)(a4 + 56);
        uint64_t v7 = *(kevent **)(a4 + 64);
        uint64_t v8 = (const timespec *)v11;
        goto LABEL_8;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v5 = *(void *)(a4 + 72);
  if (v5 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_12;
  }
  if (v5 > 0x7FFFFFFF) {
    goto LABEL_14;
  }
  int v6 = *(_DWORD *)(a4 + 56);
  uint64_t v7 = *(kevent **)(a4 + 64);
  uint64_t v8 = 0;
LABEL_8:
  int v9 = sub_1001B741C(v6, 0, 0, v7, v5, v8);
  uint64_t result = swift_release();
  if (!v4) {
    return v9;
  }
  return result;
}

unsigned char *sub_100081AE8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100081AF4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static _UInt24.min.getter();
  *a1 = result;
  return result;
}

BOOL sub_100081B1C(unsigned __int8 *a1)
{
  return sub_10002F9BC(*a1, *v1);
}

uint64_t sub_100081B28@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002C868(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100081B58@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000FBF8C(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100081B88@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000D5CCC(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100081BB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000FBFBC(a1, *a2);
}

uint64_t sub_100081BC0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000D5CD0(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100081BF4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000D5D20(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100081C28(unsigned __int8 *a1)
{
  return sub_1000FBF78(*a1);
}

uint64_t sub_100081C30(unsigned __int8 *a1)
{
  return sub_1000FBFFC(*a1);
}

uint64_t sub_100081C38(unsigned __int8 *a1)
{
  return sub_1000D5D6C(*a1);
}

uint64_t sub_100081C40@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000D46D0(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100081C70(char *a1)
{
  return sub_10002F210(*a1, *v1);
}

BOOL sub_100081C7C(unsigned __int8 *a1)
{
  return sub_1000D5D7C(*a1, *v1);
}

BOOL sub_100081C88(unsigned __int8 *a1)
{
  return sub_10002F22C(*a1, *v1);
}

BOOL sub_100081C94()
{
  return sub_1000D5DA4(*v0);
}

uint64_t sub_100081C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100081CB4(unsigned __int8 *a1)
{
  return sub_1000D46E0(*a1);
}

unsigned __int8 *sub_100081CBC@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100081CCC(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100081CD8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000D4624();
  *a1 = result;
  return result;
}

uint64_t static SelectorRegistrationID.initialRegistrationID.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_100081D08(uint64_t a1)
{
  debugOnly(_:)(a1);
  type metadata accessor for Selector();
  sub_100081D90();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

void sub_100081D90()
{
  type metadata accessor for kevent(0);
  sub_10024F010();
  UnsafeMutablePointer.deallocate()();
}

uint64_t sub_100081DF0(uint64_t a1)
{
  sub_100081D08(a1);
  return _swift_deallocClassInstance(v1, 80, 7);
}

ASOctaneSupportXPCService::SelectorRegistrationID __swiftcall SelectorRegistrationID.nextRegistrationID()()
{
  return (ASOctaneSupportXPCService::SelectorRegistrationID)(*v0)++;
}

void sub_100081E34()
{
  uint64_t v1 = pthread_self();
  if (pthread_equal(v1, *(pthread_t *)(*(void *)(v0 + 40) + 32)))
  {
    sub_100081EC4();
  }
  else
  {
    sub_1000818F0((void (*)(uint64_t *__return_ptr))sub_10008249C);
  }
}

unint64_t sub_100081EC4()
{
  sub_10024F330(28);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = sub_10024F9E0();
  sub_10024E800(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32032;
  v2._object = (void *)0xE200000000000000;
  sub_10024E800(v2);
  return 0xD000000000000018;
}

void sub_100081F6C()
{
}

uint64_t sub_100081F90()
{
  swift_errorRetain();
  sub_100019524(&qword_100309768);
  if ((swift_dynamicCast() & 1) == 0 || ((result = sub_100044A90(v2, v3), v3 == 3) ? (BOOL v1 = v2 == 3) : (BOOL v1 = 0), !v1))
  {
    swift_willThrow();
    return swift_errorRetain();
  }
  return result;
}

BOOL static SelectorRegistrationID.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

void SelectorRegistrationID.hash(into:)(uint64_t a1, Swift::UInt32 a2)
{
}

Swift::Int SelectorRegistrationID.hashValue.getter(Swift::UInt32 a1)
{
  return sub_10024FC70();
}

Swift::Int sub_1000820AC()
{
  return SelectorRegistrationID.hashValue.getter(*v0);
}

void sub_1000820B4(uint64_t a1)
{
  SelectorRegistrationID.hash(into:)(a1, *v1);
}

Swift::Int sub_1000820BC()
{
  Swift::UInt32 v1 = *v0;
  sub_10024FC00();
  sub_10024FC50(v1);
  return sub_10024FC70();
}

unint64_t sub_100082104()
{
  unint64_t result = qword_10030D0F0[0];
  if (!qword_10030D0F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10030D0F0);
  }
  return result;
}

uint64_t sub_100082150()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Selector()
{
  return sub_10002F7A4();
}

void type metadata accessor for SelectorRegistrationID()
{
}

unsigned char *sub_100082200(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000822CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for SelectorLifecycleState()
{
}

void type metadata accessor for SelectorEventSet()
{
}

unint64_t sub_100082310()
{
  unint64_t result = qword_10030D178;
  if (!qword_10030D178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D178);
  }
  return result;
}

unint64_t sub_100082360()
{
  unint64_t result = qword_10030D180;
  if (!qword_10030D180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D180);
  }
  return result;
}

unint64_t sub_1000823B0()
{
  unint64_t result = qword_10030D188;
  if (!qword_10030D188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D188);
  }
  return result;
}

unint64_t sub_100082400()
{
  unint64_t result = qword_10030D190;
  if (!qword_10030D190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D190);
  }
  return result;
}

unint64_t sub_100082450()
{
  unint64_t result = qword_10030D198[0];
  if (!qword_10030D198[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10030D198);
  }
  return result;
}

unint64_t sub_10008249C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100081EC4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000824D0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100082510(a1);
  return v2;
}

uint64_t sub_100082510(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1);
  return v1;
}

uint64_t sub_100082584()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t sub_1000825F4()
{
  sub_100082584();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t static System.coreCount.getter()
{
  return sysconf(58);
}

void **static System.enumerateInterfaces()()
{
  unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100082A04();
  uint64_t v1 = (void **)&v5;
  sub_10024EAC0();
  unsigned int v6 = 0;
  sub_100028FE4(&v6);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = v6;
    if (v6)
    {
      type metadata accessor for NIONetworkInterface();
      unint64_t v3 = v2;
      do
      {
        sub_100082AB8();
        if (sub_10017B978((uint64_t)v7))
        {
          swift_retain();
          sub_10024EA70();
          if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_100082AEC();
          }
          sub_10024EB10();
          sub_10024EAC0();
          swift_release();
        }
        unint64_t v3 = v3->ifa_next;
      }
      while (v3);
    }
    uint64_t v1 = (void **)v5;
    freeifaddrs(v2);
  }
  return v1;
}

uint64_t *static System.enumerateDevices()()
{
  uint64_t v5 = sub_10024F390();
  uint64_t v1 = &v5;
  sub_10024EAC0();
  unsigned int v6 = 0;
  sub_100028FE4(&v6);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = v6;
    if (v6)
    {
      type metadata accessor for NIONetworkDevice.Backing();
      unint64_t v3 = v2;
      do
      {
        sub_100082AB8();
        if (sub_10017C8A8((uint64_t)v7))
        {
          swift_retain();
          sub_10024EA70();
          if (*(void *)(v5 + 16) >= *(void *)(v5 + 24) >> 1) {
            sub_100082AEC();
          }
          sub_10024EB10();
          sub_10024EAC0();
          swift_release();
        }
        unint64_t v3 = v3->ifa_next;
      }
      while (v3);
    }
    uint64_t v1 = (uint64_t *)v5;
    freeifaddrs(v2);
  }
  return v1;
}

void sub_1000828E8()
{
  sub_100082B10();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v0;
  if (!isUniquelyReferenced_nonNull_native || v2 > *(void *)(v0 + 24) >> 1)
  {
    sub_100035494();
    *uint64_t v1 = v4;
  }
}

uint64_t sub_100082948()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Box()
{
  return sub_10002F7A4();
}

ValueMetadata *type metadata accessor for System()
{
  return &type metadata for System;
}

uint64_t sub_100082A04()
{
  sub_100082B10();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v0;
  if ((result & 1) == 0
    || (v0 & 0x8000000000000000) != 0
    || (v0 & 0x4000000000000000) != 0
    || v2 > *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v0 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_10024F6F0();
      swift_bridgeObjectRelease();
    }
    uint64_t result = sub_10024F390();
    *unint64_t v1 = result;
  }
  return result;
}

uint64_t sub_100082AB8()
{
  return swift_allocObject();
}

uint64_t sub_100082AEC()
{
  return sub_10024EAD0();
}

uint64_t sub_100082B10()
{
  return *(void *)v0;
}

uint64_t ByteBuffer.readData(length:)(int a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  uint64_t v5 = *(unsigned int *)(v1 + 12);
  sub_100084350();
  swift_retain();
  uint64_t v6 = sub_10008436C();
  ByteBuffer.getData(at:length:byteTransferStrategy:)(v6, v7, 2, v3, v4 | (v5 << 32));
  unint64_t v9 = v8;
  uint64_t result = swift_release();
  if (v9 >> 60 == 15) {
    return sub_100084360();
  }
  unsigned int v11 = v4 + a1;
  if (__CFADD__(v4, a1))
  {
    __break(1u);
  }
  else if (v5 >= v11)
  {
    *(_DWORD *)(v1 + 8) = v11;
    return sub_100084360();
  }
  __break(1u);
  return result;
}

uint64_t ByteBuffer.readData(length:byteTransferStrategy:)(int a1, char a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *(unsigned int *)(v2 + 8);
  uint64_t v7 = *(unsigned int *)(v2 + 12);
  sub_100084350();
  swift_retain();
  uint64_t v8 = sub_10008436C();
  ByteBuffer.getData(at:length:byteTransferStrategy:)(v8, v9, a2, v5, v6 | (v7 << 32));
  unint64_t v11 = v10;
  uint64_t result = swift_release();
  if (v11 >> 60 == 15) {
    return sub_100084360();
  }
  unsigned int v13 = v6 + a1;
  if (__CFADD__(v6, a1))
  {
    __break(1u);
  }
  else if (v7 >= v13)
  {
    *(_DWORD *)(v2 + 8) = v13;
    return sub_100084360();
  }
  __break(1u);
  return result;
}

uint64_t ByteBuffer.getData(at:length:byteTransferStrategy:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10024DE10();
  sub_10001B550();
  uint64_t v12 = v11;
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v17 = (uint64_t (**)())((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v18 = __OFSUB__(a1, a5);
  int64_t v19 = a1 - a5;
  if (v18)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v19 < 0 || (a2 & 0x8000000000000000) != 0) {
    return result;
  }
  if (HIDWORD(a5) < a5)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if ((uint64_t)((HIDWORD(a5) - a5) - a2) < v19) {
    return 0;
  }
  if (a3) {
    BOOL v20 = a3 != 1 && a2 <= 0x40000;
  }
  else {
    BOOL v20 = 1;
  }
  swift_beginAccess();
  if (v20) {
    return sub_10024DF20();
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a4;
  *uint64_t v17 = sub_100083DEC;
  v17[1] = (uint64_t (*)())v21;
  uint64_t v22 = enum case for Data.Deallocator.custom(_:);
  uint64_t v23 = *(void (**)(uint64_t (**)(), uint64_t, uint64_t))(v12 + 104);
  swift_unknownObjectRetain();
  v23(v17, v22, v10);
  return sub_10024DE30();
}

uint64_t ByteBuffer.getData(at:length:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return ByteBuffer.getData(at:length:byteTransferStrategy:)(a1, a2, 2, a3, a4);
}

uint64_t ByteBuffer.getString(at:length:encoding:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10024E6F0();
  sub_10001B550();
  __chkstk_darwin(v9, v10);
  ByteBuffer.getData(at:length:byteTransferStrategy:)(a1, a2, 2, a4, a5);
  uint64_t v11 = 0;
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = sub_10008436C();
    v14(v13);
    sub_100084360();
    uint64_t v11 = sub_10024E6D0();
    uint64_t v15 = sub_100084360();
    sub_10003F7F4(v15, v16);
  }
  return v11;
}

uint64_t ByteBuffer.readString(length:encoding:)(uint64_t result)
{
  unsigned int v2 = *(_DWORD *)(v1 + 8);
  unsigned int v3 = *(_DWORD *)(v1 + 12);
  if (v3 < v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  int v4 = result;
  if (v3 - v2 < result) {
    return 0;
  }
  sub_100084350();
  uint64_t v5 = sub_10008436C();
  uint64_t result = ByteBuffer.getString(at:length:encoding:)(v5, v6, v7, v8, v9);
  if (v10)
  {
    unsigned int v11 = v2 + v4;
    if (!__CFADD__(v2, v4))
    {
      if (v3 >= v11)
      {
        *(_DWORD *)(v1 + 8) = v11;
        return result;
      }
LABEL_11:
      __break(1u);
      return result;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t ByteBuffer.writeString(_:encoding:)()
{
  uint64_t result = ByteBuffer.setString(_:encoding:at:)();
  if (!v1)
  {
    int v3 = *(_DWORD *)(v0 + 12);
    BOOL v4 = __CFADD__(v3, result);
    unsigned int v5 = v3 + result;
    if (v4)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
    unsigned int v6 = *(_DWORD *)(v0 + 16);
    unsigned int v7 = *(unsigned __int8 *)(v0 + 22) | (*(unsigned __int16 *)(v0 + 20) << 8);
    BOOL v4 = v6 >= v7;
    unsigned int v8 = v6 - v7;
    if (!v4) {
      goto LABEL_9;
    }
    if (v8 < v5)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    *(_DWORD *)(v0 + 12) = v5;
  }
  return result;
}

uint64_t ByteBuffer.setString(_:encoding:at:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10024E6C0();
  if (v3 >> 60 == 15)
  {
    sub_100083DF4();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v5 = v2;
  unint64_t v6 = v3;
  __chkstk_darwin(v2, v3);
  switch(v7 >> 62)
  {
    case 1uLL:
      v18[1] = v18;
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_17:
        swift_release();
        swift_release();
        __break(1u);
LABEL_18:
        sub_10003F7F4(v5, v6);
        __break(1u);
        JUMPOUT(0x1000832E4);
      }
      sub_100047398(v5, v6);
      uint64_t v17 = sub_100083E60((int)v5, v5 >> 32, v6 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_100083E40);
      if (v0) {
        goto LABEL_18;
      }
      unint64_t v14 = (unint64_t)v17;
      sub_10003F7F4(v5, v6);
      if ((v14 & 0x100000000) != 0)
      {
LABEL_10:
        sub_10006D660();
        LODWORD(v14) = v16;
      }
LABEL_11:
      sub_10003F7F4(v5, v6);
      return v14;
    case 2uLL:
      uint64_t v11 = *(void *)(v5 + 16);
      uint64_t v12 = *(void *)(v5 + 24);
      swift_retain();
      swift_retain();
      uint64_t v13 = sub_100083E60(v11, v12, v6 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_100083E40);
      if (v1) {
        goto LABEL_17;
      }
      unint64_t v14 = (unint64_t)v13;
      swift_release();
      swift_release();
      if ((v14 & 0x100000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    case 3uLL:
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      goto LABEL_9;
    default:
      uint64_t v8 = BYTE6(v6);
      uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
      uint64_t v10 = v5;
LABEL_9:
      unint64_t v15 = (unint64_t)sub_100083CF4(v10, v9, v8, (void *(*)(unsigned int *__return_ptr, uint64_t *, uint64_t))sub_100083E40);
      LODWORD(v14) = v15;
      if ((v15 & 0x100000000) != 0) {
        goto LABEL_10;
      }
      goto LABEL_11;
  }
}

uint64_t ByteBuffer.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = ByteBufferAllocator.buffer(data:)(a1, a2, (uint64_t (*)(void))j_j__malloc, (uint64_t)j_j__realloc, (uint64_t)j_j__free, (uint64_t)sub_10006C3B4);
  sub_10003F808(a1, a2);
  return v4;
}

uint64_t ByteBufferAllocator.buffer(data:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10024DF30();
  if (v12 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int v13 = v12;
  if (!v12)
  {
    if (qword_100308D08 == -1)
    {
LABEL_5:
      int v16 = HIDWORD(qword_10034C038);
      uint64_t v14 = swift_retain();
      goto LABEL_6;
    }
LABEL_20:
    swift_once();
    goto LABEL_5;
  }
  type metadata accessor for ByteBuffer._Storage();
  uint64_t v14 = static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v13, a3, a4, a5, a6);
  int v16 = 0;
LABEL_6:
  uint64_t v22 = v14;
  __chkstk_darwin(v14, v15);
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        sub_10003F808(a1, a2);
        __break(1u);
        JUMPOUT(0x10008367CLL);
      }
      sub_1000473AC(a1, a2);
      unint64_t v20 = (unint64_t)sub_100083E60((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_100084338);
      sub_10003F808(a1, a2);
      goto LABEL_16;
    case 2uLL:
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      unint64_t v20 = (unint64_t)sub_100083E60(v18, v19, a2 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_100084338);
      swift_release();
      swift_release();
LABEL_16:
      LODWORD(v17) = v20;
      if ((v20 & 0x100000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    case 3uLL:
      unint64_t v17 = (unint64_t)sub_100083CF4(0, 0, 0, (void *(*)(unsigned int *__return_ptr, uint64_t *, uint64_t))sub_100084338);
      goto LABEL_10;
    default:
      unint64_t v17 = (unint64_t)sub_100083CF4(a1, a2 & 0xFFFFFFFFFFFFLL, BYTE6(a2), (void *(*)(unsigned int *__return_ptr, uint64_t *, uint64_t))sub_100084338);
LABEL_10:
      if ((v17 & 0x100000000) != 0) {
LABEL_11:
      }
        sub_10006D660();
LABEL_12:
      if (__CFADD__(v16, v17)) {
        goto LABEL_19;
      }
      return v22;
  }
}

Swift::Int ByteBuffer.writeContiguousBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008372C(a1, a2, a3, (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))ByteBuffer.setContiguousBytes<A>(_:at:));
}

uint64_t ByteBuffer.setContiguousBytes<A>(_:at:)()
{
  sub_10024DC30();
  return v1;
}

Swift::Int ByteBuffer.writeData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008372C(a1, a2, a3, ByteBuffer.setData<A>(_:at:));
}

Swift::Int sub_10008372C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t))
{
  Swift::Int v5 = a4(a1, *(unsigned int *)(v4 + 12), a2, a3);
  ByteBuffer.moveWriterIndex(forwardBy:)(v5);
  return v5;
}

uint64_t ByteBuffer.setData<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  swift_getAssociatedTypeWitness();
  _OWORD v32[2] = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10001B550();
  uint64_t v33 = v6;
  sub_10007A8E8();
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v32 - v9;
  sub_10024F030();
  sub_10007A8E8();
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v32 - v13;
  v32[1] = swift_checkMetadataState();
  sub_10007A8E8();
  __chkstk_darwin(v15, v16);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  sub_10001B550();
  v32[0] = v18;
  sub_10007A8E8();
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)v32 - v21;
  Swift::Int v23 = sub_10024EC90();
  ByteBuffer.reserveCapacity(minimumWritableBytes:)(v23);
  uint64_t v34 = a4;
  sub_10024DA60();
  uint64_t v24 = v22;
  sub_10024E930();
  uint64_t v25 = v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = 0;
  uint64_t v27 = (uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
  uint64_t v28 = (void (**)(char *, uint64_t))(v33 + 8);
  while (1)
  {
    sub_10024F0E0();
    if (sub_10001FA0C((uint64_t)v14, 1, AssociatedTypeWitness) == 1) {
      goto LABEL_7;
    }
    uint64_t result = (*v27)(v10, v14, AssociatedTypeWitness);
    if (__OFADD__(v35, v26)) {
      break;
    }
    swift_getAssociatedConformanceWitness();
    uint64_t v30 = ByteBuffer.setContiguousBytes<A>(_:at:)();
    (*v28)(v10, AssociatedTypeWitness);
    BOOL v31 = __OFADD__(v26, v30);
    v26 += v30;
    if (v31)
    {
      __break(1u);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v32[0] + 8))(v24, v25);
      return v26;
    }
  }
  __break(1u);
  return result;
}

void sub_100083AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t ByteBufferView.regions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  int v5 = *(_DWORD *)(v2 + 16);
  __int16 v6 = *(_WORD *)(v2 + 20);
  char v7 = *(unsigned char *)(v2 + 22);
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + 32);
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t result = sub_10001B078(v2);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 20) = v6;
  *(unsigned char *)(a1 + 22) = v7;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  *(void *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_100083B74@<X0>(uint64_t a1@<X8>)
{
  return ByteBufferView.regions.getter(a1);
}

uint64_t sub_100083BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.firstRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_100083BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.lastRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_100083BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, a5, a4);
}

uint64_t sub_100083C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, a6, a4, a7, a5);
}

uint64_t sub_100083C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t sub_100083C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MutableDataProtocol.resetBytes<A>(in:)(a1, a4, a2, a5, a3);
}

uint64_t Data.init(buffer:byteTransferStrategy:)(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  int v4 = a2;
  unint64_t v5 = HIDWORD(a2);
  int v6 = HIDWORD(a2) - a2;
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = ByteBuffer.getData(at:length:byteTransferStrategy:)(a2, (HIDWORD(a2) - a2), a4, result, a2);
  if (v7 >> 60 != 15)
  {
    uint64_t result = swift_release();
    if (!__CFADD__(v4, v6))
    {
      if (v5 >= (v4 + v6)) {
        return sub_100084360();
      }
      goto LABEL_8;
    }
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100083CF4(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(unsigned int *__return_ptr, uint64_t *, uint64_t))
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  uint64_t result = a4(&v6, &v7, a3);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100083DDC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100083DEC()
{
  return swift_unknownObjectRelease();
}

unint64_t sub_100083DF4()
{
  unint64_t result = qword_10030D220;
  if (!qword_10030D220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D220);
  }
  return result;
}

uint64_t sub_100083E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_10006E0E0(a1, a2, *(_DWORD *)(v3 + 24), a3);
}

void *sub_100083E60(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t))
{
  unint64_t result = (void *)sub_10024DB80();
  char v9 = result;
  if (result)
  {
    unint64_t result = (void *)sub_10024DBA0();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    char v9 = (void *)((char *)v9 + a1 - (void)result);
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = sub_10024DB90();
  if (!v9)
  {
    unint64_t result = a4(&v17, 0, 0);
    if (v4) {
      return result;
    }
    unsigned int v14 = v17;
    goto LABEL_14;
  }
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  unint64_t result = a4(&v15, v9, v13);
  if (!v4)
  {
    unsigned int v14 = v15;
LABEL_14:
    char v16 = 0;
    return (void *)v14;
  }
  return result;
}

void *sub_100083F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_1001423CC(a1, a2, a3);
  if (!v4)
  {
    *(_DWORD *)a4 = result;
    *(unsigned char *)(a4 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_100083F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = ByteBuffer._setBytes(_:at:)(a1, a2, *(_DWORD *)(v3 + 24));
  *a3 = result;
  return result;
}

unint64_t sub_100083FCC()
{
  unint64_t result = qword_10030D228;
  if (!qword_10030D228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D228);
  }
  return result;
}

unint64_t sub_10008401C()
{
  unint64_t result = qword_10030D230;
  if (!qword_10030D230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D230);
  }
  return result;
}

unint64_t sub_10008406C()
{
  unint64_t result = qword_10030D238;
  if (!qword_10030D238)
  {
    sub_10001B028(&qword_10030D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D238);
  }
  return result;
}

unint64_t sub_1000840C4()
{
  unint64_t result = qword_10030D248;
  if (!qword_10030D248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D248);
  }
  return result;
}

unint64_t sub_100084114()
{
  unint64_t result = qword_10030D250;
  if (!qword_10030D250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D250);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ByteBufferFoundationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000841FCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBufferFoundationError()
{
  return &type metadata for ByteBufferFoundationError;
}

unsigned char *_s20ByteTransferStrategyOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100084300);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer.ByteTransferStrategy()
{
  return &type metadata for ByteBuffer.ByteTransferStrategy;
}

uint64_t sub_100084338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100083E40(a1, a2, a3);
}

uint64_t sub_100084360()
{
  return v0;
}

uint64_t sub_10008436C()
{
  return v0;
}

uint64_t destroy for LegacyCreateAppReceiptResponse(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 60 != 15) {
    return sub_10003F808(*(void *)(result + 16), v1);
  }
  return result;
}

uint64_t initializeWithCopy for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v3 = (uint64_t *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v3;
  }
  else
  {
    uint64_t v5 = *v3;
    sub_1000473AC(*v3, *(void *)(a2 + 24));
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v3 = (_OWORD *)(a1 + 16);
  unint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1000473AC(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
      sub_10003F808(v8, v9);
      return a1;
    }
    sub_1000567A4(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *int v3 = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_1000473AC(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  return a1;
}

uint64_t assignWithTake for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = (_OWORD *)(a1 + 16);
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
      sub_10003F808(v8, v6);
      return a1;
    }
    sub_1000567A4(a1 + 16);
  }
  _OWORD *v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyCreateAppReceiptResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyCreateAppReceiptResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyCreateAppReceiptResponse()
{
  return &type metadata for LegacyCreateAppReceiptResponse;
}

void *sub_1000845EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 24);
    unint64_t v6 = (void *)(a1 + v5);
    unint64_t v7 = (uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)sub_100019524(&qword_10030D258);
    if (sub_10001FA0C((uint64_t)v7, 1, (uint64_t)v8))
    {
      uint64_t v9 = sub_100019524(&qword_10030D260);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = v7[1];
      void *v6 = *v7;
      v6[1] = v11;
      uint64_t v12 = v7[3];
      _OWORD v6[2] = v7[2];
      v6[3] = v12;
      uint64_t v13 = v7[5];
      v6[4] = v7[4];
      void v6[5] = v13;
      uint64_t v14 = v7[7];
      v6[6] = v7[6];
      v6[7] = v14;
      v6[8] = v7[8];
      uint64_t v15 = v8[9];
      char v16 = (char *)v6 + v15;
      uint64_t v17 = (char *)v7 + v15;
      uint64_t v18 = *(void *)((char *)v7 + v15 + 8);
      *(void *)char v16 = *(void *)((char *)v7 + v15);
      *((void *)v16 + 1) = v18;
      uint64_t v19 = *(void *)((char *)v7 + v15 + 24);
      *((void *)v16 + 2) = *(void *)((char *)v7 + v15 + 16);
      *((void *)v16 + 3) = v19;
      uint64_t v20 = *(void *)((char *)v7 + v15 + 40);
      *((void *)v16 + 4) = *(void *)((char *)v7 + v15 + 32);
      *((void *)v16 + 5) = v20;
      uint64_t v21 = *(void *)((char *)v7 + v15 + 56);
      *((void *)v16 + 6) = *(void *)((char *)v7 + v15 + 48);
      *((void *)v16 + 7) = v21;
      uint64_t v22 = (int *)type metadata accessor for AppTransaction();
      uint64_t v23 = v22[8];
      uint64_t v42 = &v17[v23];
      uint64_t v43 = &v16[v23];
      uint64_t v24 = sub_10024E030();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v43, v42, v24);
      v25(&v16[v22[9]], &v17[v22[9]], v24);
      v25(&v16[v22[10]], &v17[v22[10]], v24);
      uint64_t v26 = v22[11];
      uint64_t v27 = &v16[v26];
      uint64_t v28 = &v17[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v22[12];
      BOOL v31 = &v16[v30];
      unint64_t v32 = &v17[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)BOOL v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      uint64_t v34 = v8[10];
      uint64_t v44 = (char *)v6 + v34;
      uint64_t v35 = (char *)v7 + v34;
      uint64_t v36 = sub_10024E450();
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v44, v35, v36);
      uint64_t v38 = v8[11];
      uint64_t v39 = (char *)v6 + v38;
      uint64_t v40 = (char *)v7 + v38;
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      *((unsigned char *)v6 + v8[12]) = *((unsigned char *)v7 + v8[12]);
      sub_1000195B4((uint64_t)v6, 0, 1, (uint64_t)v8);
    }
  }
  return v3;
}

uint64_t sub_100084908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_100019524(&qword_10030D258);
  uint64_t result = sub_10001FA0C(v2, 1, v3);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v2 + *(int *)(v3 + 36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v6 = (int *)type metadata accessor for AppTransaction();
    uint64_t v7 = v5 + v6[8];
    uint64_t v8 = sub_10024E030();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v5 + v6[9], v8);
    v9(v5 + v6[10], v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v2 + *(int *)(v3 + 40);
    uint64_t v11 = sub_10024E450();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    return v12(v10, v11);
  }
  return result;
}

uint64_t sub_100084ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_100019524(&qword_10030D258);
  if (sub_10001FA0C((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = sub_100019524(&qword_10030D260);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
    uint64_t v10 = v6[3];
    _OWORD v5[2] = v6[2];
    void v5[3] = v10;
    uint64_t v11 = v6[5];
    void v5[4] = v6[4];
    v5[5] = v11;
    uint64_t v12 = v6[7];
    v5[6] = v6[6];
    uint64_t v5[7] = v12;
    v5[8] = v6[8];
    uint64_t v13 = v7[9];
    uint64_t v14 = (char *)v5 + v13;
    uint64_t v15 = (char *)v6 + v13;
    uint64_t v16 = *(void *)((char *)v6 + v13 + 8);
    *(void *)uint64_t v14 = *(void *)((char *)v6 + v13);
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void *)((char *)v6 + v13 + 24);
    *((void *)v14 + 2) = *(void *)((char *)v6 + v13 + 16);
    *((void *)v14 + 3) = v17;
    uint64_t v18 = *(void *)((char *)v6 + v13 + 40);
    *((void *)v14 + 4) = *(void *)((char *)v6 + v13 + 32);
    *((void *)v14 + 5) = v18;
    uint64_t v19 = *(void *)((char *)v6 + v13 + 56);
    *((void *)v14 + 6) = *(void *)((char *)v6 + v13 + 48);
    *((void *)v14 + 7) = v19;
    uint64_t v20 = (int *)type metadata accessor for AppTransaction();
    uint64_t v21 = v20[8];
    uint64_t v40 = &v15[v21];
    uint64_t v41 = &v14[v21];
    uint64_t v22 = sub_10024E030();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v41, v40, v22);
    v23(&v14[v20[9]], &v15[v20[9]], v22);
    v23(&v14[v20[10]], &v15[v20[10]], v22);
    uint64_t v24 = v20[11];
    uint64_t v25 = &v14[v24];
    uint64_t v26 = &v15[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v20[12];
    uint64_t v29 = &v14[v28];
    uint64_t v30 = &v15[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v7[10];
    uint64_t v42 = (char *)v5 + v32;
    uint64_t v33 = (char *)v6 + v32;
    uint64_t v34 = sub_10024E450();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v42, v33, v34);
    uint64_t v36 = v7[11];
    uint64_t v37 = (char *)v5 + v36;
    uint64_t v38 = (char *)v6 + v36;
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
    sub_1000195B4((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

uint64_t sub_100084D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_100019524(&qword_10030D258);
  int v8 = sub_10001FA0C((uint64_t)v5, 1, (uint64_t)v7);
  int v9 = sub_10001FA0C((uint64_t)v6, 1, (uint64_t)v7);
  if (!v8)
  {
    if (!v9)
    {
      *uint64_t v5 = *v6;
      v5[1] = v6[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      _OWORD v5[2] = v6[2];
      void v5[3] = v6[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v5[4] = v6[4];
      v5[5] = v6[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5[6] = v6[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v5[7] = v6[7];
      v5[8] = v6[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v33 = v7[9];
      uint64_t v34 = (char *)v5 + v33;
      uint64_t v35 = (char *)v6 + v33;
      *(void *)uint64_t v34 = *(void *)((char *)v6 + v33);
      *((void *)v34 + 1) = *(void *)((char *)v6 + v33 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v34 + 2) = *((void *)v35 + 2);
      *((void *)v34 + 3) = *((void *)v35 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v34 + 4) = *((void *)v35 + 4);
      *((void *)v34 + 5) = *((void *)v35 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v34 + 6) = *((void *)v35 + 6);
      *((void *)v34 + 7) = *((void *)v35 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v36 = (int *)type metadata accessor for AppTransaction();
      uint64_t v37 = v36[8];
      uint64_t v56 = &v35[v37];
      uint64_t v58 = &v34[v37];
      uint64_t v38 = sub_10024E030();
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 24);
      v39(v58, v56, v38);
      v39(&v34[v36[9]], &v35[v36[9]], v38);
      v39(&v34[v36[10]], &v35[v36[10]], v38);
      uint64_t v40 = v36[11];
      uint64_t v41 = &v34[v40];
      uint64_t v42 = &v35[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = v36[12];
      uint64_t v44 = &v34[v43];
      id v45 = &v35[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      *((void *)v44 + 1) = *((void *)v45 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v46 = v7[10];
      char v47 = (char *)v5 + v46;
      uint64_t v48 = (char *)v6 + v46;
      uint64_t v49 = sub_10024E450();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 24))(v47, v48, v49);
      uint64_t v50 = v7[11];
      char v51 = (char *)v5 + v50;
      char v52 = (char *)v6 + v50;
      uint64_t v53 = *(void *)v52;
      v51[8] = v52[8];
      *(void *)char v51 = v53;
      *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
      return a1;
    }
    sub_100085354((uint64_t)v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v31 = sub_100019524(&qword_10030D260);
    memcpy(v5, v6, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  _OWORD v5[2] = v6[2];
  void v5[3] = v6[3];
  void v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  uint64_t v5[7] = v6[7];
  v5[8] = v6[8];
  uint64_t v10 = v7[9];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)v6 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)v6 + v10);
  *((void *)v11 + 1) = *(void *)((char *)v6 + v10 + 8);
  *((void *)v11 + 2) = *(void *)((char *)v6 + v10 + 16);
  *((void *)v11 + 3) = *(void *)((char *)v6 + v10 + 24);
  *((void *)v11 + 4) = *(void *)((char *)v6 + v10 + 32);
  *((void *)v11 + 5) = *(void *)((char *)v6 + v10 + 40);
  *((void *)v11 + 6) = *(void *)((char *)v6 + v10 + 48);
  *((void *)v11 + 7) = *(void *)((char *)v6 + v10 + 56);
  uint64_t v13 = (int *)type metadata accessor for AppTransaction();
  uint64_t v14 = v13[8];
  uint64_t v54 = &v12[v14];
  BOOL v55 = &v11[v14];
  uint64_t v15 = sub_10024E030();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v55, v54, v15);
  v16(&v11[v13[9]], &v12[v13[9]], v15);
  v16(&v11[v13[10]], &v12[v13[10]], v15);
  uint64_t v17 = v13[11];
  uint64_t v18 = &v11[v17];
  uint64_t v19 = &v12[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  uint64_t v20 = v13[12];
  uint64_t v21 = &v11[v20];
  uint64_t v22 = &v12[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  uint64_t v23 = v7[10];
  unint64_t v57 = (char *)v5 + v23;
  uint64_t v24 = (char *)v6 + v23;
  uint64_t v25 = sub_10024E450();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v57, v24, v25);
  uint64_t v27 = v7[11];
  uint64_t v28 = (char *)v5 + v27;
  uint64_t v29 = (char *)v6 + v27;
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
  sub_1000195B4((uint64_t)v5, 0, 1, (uint64_t)v7);
  return a1;
}

uint64_t sub_100085354(uint64_t a1)
{
  uint64_t v2 = sub_100019524(&qword_10030D258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000853B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)(a1 + v4);
  unint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = (int *)sub_100019524(&qword_10030D258);
  if (sub_10001FA0C((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = sub_100019524(&qword_10030D260);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    memcpy(v5, v6, 0x48uLL);
    uint64_t v9 = v7[9];
    uint64_t v10 = &v5[v9];
    uint64_t v11 = &v6[v9];
    long long v12 = *(_OWORD *)&v6[v9 + 16];
    *(_OWORD *)uint64_t v10 = *(_OWORD *)&v6[v9];
    *((_OWORD *)v10 + 1) = v12;
    long long v13 = *(_OWORD *)&v6[v9 + 48];
    *((_OWORD *)v10 + 2) = *(_OWORD *)&v6[v9 + 32];
    *((_OWORD *)v10 + 3) = v13;
    uint64_t v14 = (int *)type metadata accessor for AppTransaction();
    uint64_t v15 = v14[8];
    uint64_t v26 = &v11[v15];
    uint64_t v27 = &v10[v15];
    uint64_t v16 = sub_10024E030();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
    v17(v27, v26, v16);
    v17(&v10[v14[9]], &v11[v14[9]], v16);
    v17(&v10[v14[10]], &v11[v14[10]], v16);
    *(_OWORD *)&v10[v14[11]] = *(_OWORD *)&v11[v14[11]];
    *(_OWORD *)&v10[v14[12]] = *(_OWORD *)&v11[v14[12]];
    uint64_t v18 = v7[10];
    uint64_t v19 = &v5[v18];
    uint64_t v20 = &v6[v18];
    uint64_t v21 = sub_10024E450();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    uint64_t v22 = v7[11];
    uint64_t v23 = &v5[v22];
    uint64_t v24 = &v6[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    v5[v7[12]] = v6[v7[12]];
    sub_1000195B4((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

uint64_t sub_1000855C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_100019524(&qword_10030D258);
  int v8 = sub_10001FA0C((uint64_t)v5, 1, (uint64_t)v7);
  int v9 = sub_10001FA0C((uint64_t)v6, 1, (uint64_t)v7);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v28 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = v6[3];
      _OWORD v5[2] = v6[2];
      void v5[3] = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = v6[5];
      void v5[4] = v6[4];
      v5[5] = v30;
      swift_bridgeObjectRelease();
      v5[6] = v6[6];
      swift_bridgeObjectRelease();
      uint64_t v31 = v6[8];
      uint64_t v5[7] = v6[7];
      v5[8] = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = v7[9];
      uint64_t v33 = (char *)v5 + v32;
      uint64_t v34 = (char *)v6 + v32;
      uint64_t v35 = *(void *)((char *)v6 + v32 + 8);
      *(void *)uint64_t v33 = *(void *)((char *)v6 + v32);
      *((void *)v33 + 1) = v35;
      swift_bridgeObjectRelease();
      uint64_t v36 = *((void *)v34 + 3);
      *((void *)v33 + 2) = *((void *)v34 + 2);
      *((void *)v33 + 3) = v36;
      swift_bridgeObjectRelease();
      uint64_t v37 = *((void *)v34 + 5);
      *((void *)v33 + 4) = *((void *)v34 + 4);
      *((void *)v33 + 5) = v37;
      swift_bridgeObjectRelease();
      uint64_t v38 = *((void *)v34 + 7);
      *((void *)v33 + 6) = *((void *)v34 + 6);
      *((void *)v33 + 7) = v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = (int *)type metadata accessor for AppTransaction();
      uint64_t v40 = v39[8];
      uint64_t v61 = &v34[v40];
      uint64_t v63 = &v33[v40];
      uint64_t v41 = sub_10024E030();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 40);
      v42(v63, v61, v41);
      v42(&v33[v39[9]], &v34[v39[9]], v41);
      v42(&v33[v39[10]], &v34[v39[10]], v41);
      uint64_t v43 = v39[11];
      uint64_t v44 = &v33[v43];
      id v45 = (uint64_t *)&v34[v43];
      uint64_t v47 = *v45;
      uint64_t v46 = v45[1];
      *(void *)uint64_t v44 = v47;
      *((void *)v44 + 1) = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = v39[12];
      uint64_t v49 = &v33[v48];
      uint64_t v50 = (uint64_t *)&v34[v48];
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      *(void *)uint64_t v49 = v52;
      *((void *)v49 + 1) = v51;
      swift_bridgeObjectRelease();
      uint64_t v53 = v7[10];
      uint64_t v54 = (char *)v5 + v53;
      BOOL v55 = (char *)v6 + v53;
      uint64_t v56 = sub_10024E450();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
      uint64_t v57 = v7[11];
      uint64_t v58 = (char *)v5 + v57;
      uint64_t v59 = (char *)v6 + v57;
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
      return a1;
    }
    sub_100085354((uint64_t)v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v26 = sub_100019524(&qword_10030D260);
    memcpy(v5, v6, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  memcpy(v5, v6, 0x48uLL);
  uint64_t v10 = v7[9];
  uint64_t v11 = (char *)v5 + v10;
  long long v12 = (char *)v6 + v10;
  long long v13 = *(_OWORD *)((char *)v6 + v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)((char *)v6 + v10);
  *((_OWORD *)v11 + 1) = v13;
  long long v14 = *(_OWORD *)((char *)v6 + v10 + 48);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)v6 + v10 + 32);
  *((_OWORD *)v11 + 3) = v14;
  uint64_t v15 = (int *)type metadata accessor for AppTransaction();
  uint64_t v16 = v15[8];
  uint64_t v60 = &v12[v16];
  uint64_t v62 = &v11[v16];
  uint64_t v17 = sub_10024E030();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v62, v60, v17);
  v18(&v11[v15[9]], &v12[v15[9]], v17);
  v18(&v11[v15[10]], &v12[v15[10]], v17);
  *(_OWORD *)&v11[v15[11]] = *(_OWORD *)&v12[v15[11]];
  *(_OWORD *)&v11[v15[12]] = *(_OWORD *)&v12[v15[12]];
  uint64_t v19 = v7[10];
  uint64_t v20 = (char *)v5 + v19;
  uint64_t v21 = (char *)v6 + v19;
  uint64_t v22 = sub_10024E450();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  uint64_t v23 = v7[11];
  uint64_t v24 = (char *)v5 + v23;
  uint64_t v25 = (char *)v6 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
  sub_1000195B4((uint64_t)v5, 0, 1, (uint64_t)v7);
  return a1;
}

uint64_t sub_1000859D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000859EC);
}

uint64_t sub_1000859EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_100019524(&qword_10030D260);
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return sub_10001FA0C(v11, a2, v10);
  }
}

uint64_t sub_100085A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085A8C);
}

uint64_t sub_100085A8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_100019524(&qword_10030D260);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return sub_1000195B4(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CreateAppReceiptResponse()
{
  uint64_t result = qword_10030D2C0;
  if (!qword_10030D2C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100085B54()
{
  sub_100085BF8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100085BF8()
{
  if (!qword_10030D2D0)
  {
    sub_10001B028(&qword_10030D258);
    unint64_t v0 = sub_10024F030();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10030D2D0);
    }
  }
}

uint64_t sub_100085C54(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x64656B6F766572 && a2 == 0xE700000000000000;
    if (v6 || (sub_10024FA60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x655264656E676973 && a2 == 0xED00007470696563)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_10024FA60();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_100085DC0(char a1)
{
  if (!a1) {
    return 0x737574617473;
  }
  if (a1 == 1) {
    return 0x64656B6F766572;
  }
  return 0x655264656E676973;
}

uint64_t sub_100085E20(void *a1)
{
  uint64_t v4 = sub_100019524(&qword_10030D318);
  sub_10001B550();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  sub_1000869F4();
  sub_10001C2A8(a1, a1[3]);
  sub_10008664C();
  sub_10024FD40();
  sub_10024F960();
  if (!v1)
  {
    sub_10024F950();
    type metadata accessor for CreateAppReceiptResponse();
    sub_100019524(&qword_10030D258);
    sub_100086698();
    sub_10024F910();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_100085F9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (sub_10024FA60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x64656B6F766572 && a2 == 0xE700000000000000;
    if (v6 || (sub_10024FA60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x74706965636572 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_10024FA60();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1000860EC(char a1)
{
  if (!a1) {
    return 0x737574617473;
  }
  if (a1 == 1) {
    return 0x64656B6F766572;
  }
  return 0x74706965636572;
}

uint64_t sub_100086140(void *a1)
{
  uint64_t v4 = sub_100019524(&qword_10030D308);
  sub_10001B550();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  sub_1000869F4();
  sub_10001C2A8(a1, a1[3]);
  sub_100086600();
  sub_10024FD40();
  sub_1000869E4();
  sub_10024F960();
  if (!v1)
  {
    sub_1000869E4();
    sub_10024F950();
    sub_100056E3C();
    sub_1000869E4();
    sub_10024F910();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_1000862AC(void *a1)
{
  sub_100019524(&qword_10030D330);
  sub_10001B550();
  __chkstk_darwin(v2, v3);
  sub_10001C2A8(a1, a1[3]);
  sub_100086600();
  sub_10024FD20();
  sub_100086A0C();
  uint64_t v4 = sub_10024F850();
  sub_100086A0C();
  sub_10024F840();
  sub_100056E88();
  sub_10024F800();
  uint64_t v6 = sub_1000206BC();
  v7(v6);
  sub_10001C2EC((uint64_t)a1);
  return v4;
}

uint64_t sub_10008643C()
{
  return sub_100085DC0(*v0);
}

uint64_t sub_100086444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100085C54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008646C(uint64_t a1)
{
  unint64_t v2 = sub_10008664C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000864A8(uint64_t a1)
{
  unint64_t v2 = sub_10008664C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000864E4(void *a1)
{
  return sub_100085E20(a1);
}

uint64_t sub_1000864FC()
{
  return sub_1000860EC(*v0);
}

uint64_t sub_100086504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100085F9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008652C(uint64_t a1)
{
  unint64_t v2 = sub_100086600();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086568(uint64_t a1)
{
  unint64_t v2 = sub_100086600();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000865A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000862AC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  }
  return result;
}

uint64_t sub_1000865DC(void *a1)
{
  return sub_100086140(a1);
}

unint64_t sub_100086600()
{
  unint64_t result = qword_10030D310;
  if (!qword_10030D310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D310);
  }
  return result;
}

unint64_t sub_10008664C()
{
  unint64_t result = qword_10030D320;
  if (!qword_10030D320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D320);
  }
  return result;
}

unint64_t sub_100086698()
{
  unint64_t result = qword_10030D328;
  if (!qword_10030D328)
  {
    sub_10001B028(&qword_10030D258);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10030D328);
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptResponse.CodingKeys()
{
  return &type metadata for CreateAppReceiptResponse.CodingKeys;
}

unsigned char *_s25ASOctaneSupportXPCService24CreateAppReceiptResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000867CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}