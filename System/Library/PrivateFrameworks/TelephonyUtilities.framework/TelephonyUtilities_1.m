uint64_t sub_100213FD4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t result;
  id v21;
  id v22;
  id v23;
  unsigned char *v24;
  unsigned char *v25;
  unsigned __int8 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  unsigned __int8 v37;
  const char *v38;
  id v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void v52[3];
  void *v53;
  void *v54;

  v3 = v2;
  v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v50 = *(void *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v49 = (char *)&v49 - v13;
  v14 = type metadata accessor for DispatchPredicate();
  v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char **)((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v54 = &_swiftEmptyDictionarySingleton;
  result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = &type metadata for Int;
  v52[0] = 2;
  sub_1002C2414((uint64_t)v52);
  result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = &type metadata for Int;
  v52[0] = 1;
  sub_1002C2414((uint64_t)v52);
  v21 = objc_allocWithZone((Class)type metadata accessor for RTCCSDCallInfo());
  v22 = a2;
  v23 = a1;
  sub_1002BDE9C(v23, a2);
  v25 = v24;
  v26 = [*(id *)(v3 + OBJC_IVAR___CSDRTCReporter_appleIDUtilities) isSignedIntoiCloud];
  v25[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud] = v26;
  v27 = [v23 callUUID];
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = (void *)(v3 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
  swift_beginAccess();
  v32 = sub_100223128(v28, v30, *v31);
  swift_endAccess();
  swift_bridgeObjectRelease();
  *(void *)&v25[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = v32;
  swift_bridgeObjectRelease();
  v33 = v25;
  v34 = sub_10021D850((unint64_t *)&unk_100585560, (void (*)(uint64_t))type metadata accessor for RTCCSDCallInfo);

  if (!v34)
  {
LABEL_21:

    return (uint64_t)v54;
  }
  v35 = 0xD000000000000021;
  v51 = v34;
  v36 = [v23 provider];
  v37 = [v36 isTelephonyProvider];

  if (v37)
  {
    v38 = "com.apple.telephonyutilites.phone";
LABEL_11:
    v41 = (unint64_t)(v38 - 32) | 0x8000000000000000;
    goto LABEL_18;
  }
  if (![v23 isConversation])
  {
    v35 = 0xD000000000000024;
    v38 = "com.apple.telephonyutilites.facetime";
    goto LABEL_11;
  }
  v39 = [v23 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v40 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID);
  swift_beginAccess();
  sub_10022312C((uint64_t)v12, *v40);
  if (sub_1001F758C((uint64_t)v8, 1, v9) == 1)
  {
    v35 = 0x6E6F6973736573;
    sub_10021E23C((uint64_t)v8, (uint64_t *)&unk_100585580);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v9);
  }
  else
  {
    v43 = v49;
    v42 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v8, v9);
    swift_endAccess();
    v44 = *(void (**)(char *, uint64_t))(v42 + 8);
    v44(v12, v9);
    v45 = (void *)(v3 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
    swift_beginAccess();
    v46 = sub_100223124(v43, *v45);
    if (v46)
    {
      v47 = (void *)v46;
      swift_endAccess();
      if (*((unsigned char *)v47 + OBJC_IVAR____TtC13callservicesd22RTCCSDConversationInfo_uPlusOneModeAtStart))
      {

        v44(v43, v9);
        v41 = 0xE600000000000000;
        v35 = 0x7961776F7774;
        goto LABEL_18;
      }
      v35 = 0x6E6F6973736573;
      v44(v43, v9);
    }
    else
    {
      v35 = 0x6E6F6973736573;
      swift_endAccess();
      v44(v43, v9);
    }
  }
  v41 = 0xE700000000000000;
LABEL_18:
  result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = &type metadata for String;
  v52[0] = v35;
  v52[1] = v41;
  sub_1002C2414((uint64_t)v52);
  result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v48 = v51;
    v53 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v52[0] = v48;
    sub_1002C2414((uint64_t)v52);
    goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

id sub_100214680(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (id *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0) {
    __break(1u);
  }
  id v11 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
  *(void *)(v12 + 56) = sub_1001F6204(0, (unint64_t *)&unk_100588560);
  *(void *)(v12 + 64) = sub_10021DF70();
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 96) = sub_1001F081C((uint64_t *)&unk_100586DF0);
  *(void *)(v12 + 104) = sub_1001FCB74((unint64_t *)&qword_100584BB0, (uint64_t *)&unk_100586DF0);
  *(void *)(v12 + 72) = a2;
  id v13 = a1;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_100393B1C();
  id v26 = 0;
  unsigned __int8 v15 = sub_10021DFD0(v14, (uint64_t)&v26, v13);
  id v16 = v26;
  if (v15)
  {
    return v16;
  }
  else
  {
    id v25 = v26;
    id v18 = v26;
    v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v20 = sub_1001B1AC8();
    static os_log_type_t.error.getter();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_10048F550;
    id v26 = v19;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v22 = String.init<A>(reflecting:)();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1001F3B08();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_1002149F4(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  v108 = a2;
  v106 = a1;
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v99 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (void (*)(uint64_t, uint64_t))((char *)&v91 - v7);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  v100 = (void (*)(uint64_t, uint64_t))((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  v98 = (char *)&v91 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v95 = (char *)&v91 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v104 = (char *)&v91 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v102 = (char *)&v91 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (void (*)(uint64_t, uint64_t))((char *)&v91 - v21);
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v26 = (uint64_t *)((char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  *id v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if (v29)
  {
    uint64_t v97 = v10;
    uint64_t v31 = v10 + 16;
    v32 = *(void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))(v10 + 16);
    v33 = v108;
    v32(v22, (uint64_t)v108, v9);
    v34 = v106;
    id v35 = [v106 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1001F0530((uint64_t)v8, 0, 1, v9);
    swift_beginAccess();
    sub_1002C25B8((uint64_t)v8, (uint64_t)v22);
    swift_endAccess();
    v32(v22, (uint64_t)v33, v9);
    id v36 = [v34 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1001F0530((uint64_t)v8, 0, 1, v9);
    swift_beginAccess();
    sub_1002C25B8((uint64_t)v8, (uint64_t)v22);
    swift_endAccess();
    id v37 = [v34 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v32(v8, (uint64_t)v33, v9);
    sub_1001F0530((uint64_t)v8, 0, 1, v9);
    v38 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID);
    swift_beginAccess();
    v96 = v38;
    sub_1002C25B8((uint64_t)v8, (uint64_t)v22);
    swift_endAccess();
    id v39 = [v34 UUID];
    uint64_t v40 = (uint64_t)v102;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v41 = [v34 report];
    uint64_t v103 = v3;
    swift_beginAccess();
    uint64_t v107 = v31;
    v42 = (void (**)(uint64_t, uint64_t))(v31 - 8);
    v105 = v22;
    v43 = (void (*)(char *, void (*)(uint64_t, uint64_t), uint64_t))v32;
    if (v41)
    {
      sub_10027F718((uint64_t)v41, v40);
      v44 = *v42;
      uint64_t v45 = (unint64_t)v42 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      (*v42)(v40, v9);
    }
    else
    {
      v46 = (void *)sub_1002CE050(v40);
      v44 = *v42;
      uint64_t v45 = (unint64_t)v42 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      (*v42)(v40, v9);
    }
    swift_endAccess();
    id v47 = sub_1001B1AC8();
    v102 = (char *)sub_1001F081C(&qword_100584B20);
    uint64_t v48 = swift_allocObject();
    long long v101 = xmmword_10048F550;
    *(_OWORD *)(v48 + 16) = xmmword_10048F550;
    id v49 = [v34 UUID];
    v50 = v105;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v43(v104, v50, v9);
    uint64_t v51 = String.init<A>(reflecting:)();
    uint64_t v53 = v52;
    v44((uint64_t)v50, v9);
    *(void *)(v48 + 56) = &type metadata for String;
    unint64_t v54 = sub_1001F3B08();
    *(void *)(v48 + 64) = v54;
    *(void *)(v48 + 32) = v51;
    *(void *)(v48 + 40) = v53;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    v55 = (void *)(v103 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess();
    v56 = v108;
    v57 = (void *)sub_100223124(v108, *v55);
    swift_endAccess();

    if (v57)
    {
      id v58 = sub_1001B1AC8();
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = v101;
      v43((char *)v50, v56, v9);
      uint64_t v60 = String.init<A>(reflecting:)();
      *(void *)(v59 + 56) = &type metadata for String;
      *(void *)(v59 + 64) = v54;
      *(void *)(v59 + 32) = v60;
      *(void *)(v59 + 40) = v61;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v62 = sub_100223124(v56, *v55);
      swift_endAccess();
    }
    else
    {
      v63 = v106;
      id v94 = [v106 reportingHierarchySubToken];
      if (!v94)
      {
        id v92 = sub_1001B1AC8();
        uint64_t v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = v101;
        v43((char *)v105, v56, v9);
        uint64_t v65 = String.init<A>(reflecting:)();
        *(void *)(v64 + 56) = &type metadata for String;
        *(void *)(v64 + 64) = v54;
        *(void *)(v64 + 32) = v65;
        *(void *)(v64 + 40) = v66;
        static os_log_type_t.default.getter();
        v67 = v92;
        os_log(_:dso:log:type:_:)();

        v63 = v106;
        swift_bridgeObjectRelease();
      }
      v68 = (void (*)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))v43;
      id v69 = [v63 groupUUID];
      uint64_t v70 = (uint64_t)v98;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v71 = v96;
      swift_beginAccess();
      uint64_t v72 = *v71;
      uint64_t v73 = (uint64_t)v99;
      sub_10022312C(v70, v72);
      if (sub_1001F758C(v73, 1, v9) == 1)
      {
        sub_10021E23C(v73, (uint64_t *)&unk_100585580);
        swift_endAccess();
      }
      else
      {
        v74 = v44;
        uint64_t v75 = (uint64_t)v95;
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v95, v73, v9);
        swift_endAccess();
        v74(v70, v9);
        swift_beginAccess();
        v76 = (void *)sub_1002CE034(v75);
        swift_endAccess();

        uint64_t v70 = v75;
        v44 = v74;
      }
      v77 = v105;
      uint64_t v93 = v45;
      v44(v70, v9);
      v102 = (char *)sub_1001B1AC8();
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_10048FB00;
      v68(v77, (uint64_t)v56, v9);
      uint64_t v79 = String.init<A>(reflecting:)();
      *(void *)(v78 + 56) = &type metadata for String;
      *(void *)(v78 + 64) = v54;
      *(void *)(v78 + 32) = v79;
      *(void *)(v78 + 40) = v80;
      id v81 = [v106 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v68((void (*)(uint64_t, uint64_t))v104, (uint64_t)v77, v9);
      uint64_t v82 = String.init<A>(reflecting:)();
      uint64_t v84 = v83;
      v105 = v44;
      v44((uint64_t)v77, v9);
      *(void *)(v78 + 96) = &type metadata for String;
      *(void *)(v78 + 104) = v54;
      *(void *)(v78 + 72) = v82;
      *(void *)(v78 + 80) = v84;
      v85 = v108;
      static os_log_type_t.default.getter();
      v86 = v102;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      uint64_t v87 = (uint64_t)v100;
      v68(v100, (uint64_t)v85, v9);
      v88 = v94;
      uint64_t v89 = sub_10021CAB0(v106, v94);
      swift_beginAccess();
      if (v89)
      {
        sub_10027F6F8(v89, v87);
        v105(v87, v9);
      }
      else
      {
        v90 = (void *)sub_1002CE034(v87);
        v105(v87, v9);
      }
      swift_endAccess();
      swift_beginAccess();
      uint64_t v62 = sub_100223124(v85, *v55);
      swift_endAccess();
    }
    return v62;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100215558(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  v30 = a1;
  id v12 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = v1;
  uint64_t v13 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions);
  swift_beginAccess();
  uint64_t v14 = (void *)sub_100223124(v11, *v13);
  swift_endAccess();

  id v15 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10048F550;
  uint64_t v33 = v4;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v17(v9, v11, v3);
  uint64_t v34 = v3;
  uint64_t v18 = String.init<A>(reflecting:)();
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1001F3B08();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  static os_log_type_t.default.getter();
  if (v14)
  {
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v21 = sub_100223124(v11, *v13);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  }
  else
  {
    uint64_t v22 = v33;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v23 = (uint64_t)v32;
    uint64_t v24 = v34;
    v17(v32, v11, v34);
    uint64_t v25 = sub_10021C850(v30);
    swift_beginAccess();
    uint64_t v26 = v24;
    if (v25)
    {
      sub_10027F6F8(v25, v23);
      v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v23, v26);
    }
    else
    {
      id v28 = (void *)sub_1002CE034(v23);
      v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v23, v26);
    }
    swift_endAccess();
    swift_beginAccess();
    uint64_t v21 = sub_100223124(v11, *v13);
    swift_endAccess();
    v27((uint64_t)v11, v26);
  }
  return v21;
}

void sub_10021596C()
{
  sub_1001FCC38();
  sub_10021EB90(v3, v4, v5, v6, v7, v8);
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1002024D0();
  uint64_t v11 = (void *)sub_10021EB10(OBJC_IVAR___CSDRTCReporter_queue);
  v11[2] = v2;
  v11[3] = v0;
  v11[4] = v1;
  sub_10021ECE4((uint64_t)v11);
  v21[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v21[2] = sub_1002C2C88;
  v21[3] = v20;
  id v12 = _Block_copy(v21);
  id v13 = v2;
  id v14 = v0;
  id v15 = v1;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EA44();
  sub_10021EC6C();
  _Block_release(v12);
  uint64_t v16 = sub_10021EA78();
  v17(v16);
  uint64_t v18 = sub_10021EC90();
  v19(v18);
  swift_release();
  sub_1001FCC08();
}

id sub_100215B28(void *a1, uint64_t a2, void *a3)
{
  id result = [a1 supportsRelay];
  if (result)
  {
    id v7 = [a3 callUUID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
    swift_beginAccess();
    uint64_t v12 = sub_100223128(v8, v10, *v11);
    swift_bridgeObjectRelease();
    if (v12)
    {
      swift_endAccess();
      id v13 = objc_allocWithZone((Class)type metadata accessor for RTCCSDRelayDeviceRoute());
      id v14 = sub_1002F0154(a1);
      id v15 = v14;
      if (*((unsigned char *)v14 + OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type) != 6)
      {
        id v16 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }

      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      return (id)swift_endAccess();
    }
  }
  return result;
}

void sub_100215D50(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 state] == (id)3)
  {
    id v8 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
    swift_beginAccess();
    uint64_t v10 = sub_100223124(v7, *v9);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_10038FC18(a1);
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
}

void sub_100215FFC(uint64_t a1, void *a2, void (*a3)(void *))
{
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v6);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess();
  uint64_t v11 = sub_100223124(v8, *v10);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    swift_endAccess();
    uint64_t v13 = sub_10021ECF0();
    v14(v13);
    a3(a2);
  }
  else
  {
    swift_endAccess();
    uint64_t v15 = sub_10021ECF0();
    v16(v15);
  }
}

uint64_t sub_1002161C8(uint64_t a1, void *a2)
{
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v42 - 8);
  uint64_t v5 = __chkstk_darwin(v42);
  id v41 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v40 = (void (*)(uint64_t, uint64_t))((char *)v34 - v7);
  v43 = a2;
  uint64_t v44 = a1;
  sub_1002111B0(a2);
  unint64_t v50 = (unint64_t)_swiftEmptyArrayStorage;
  id v46 = self;
  id v8 = [v46 sharedInstance];
  id v9 = [v8 queue];

  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &v50;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10021E774;
  *(void *)(v11 + 24) = v10;
  v34[1] = v10;
  aBlock[4] = sub_10021E788;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10032062C;
  aBlock[3] = &unk_10050D708;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);

  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    unint64_t v47 = v50;
    if (!(v50 >> 62))
    {
      uint64_t v13 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13) {
        goto LABEL_4;
      }
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v13 = result;
  if (!result) {
    goto LABEL_12;
  }
LABEL_4:
  if (v13 >= 1)
  {
    unint64_t v45 = v47 & 0xC000000000000001;
    v38 = (uint64_t *)(v44 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess();
    uint64_t v15 = 0;
    id v36 = (void (**)(char *, void (*)(uint64_t, uint64_t), uint64_t))(v4 + 16);
    id v37 = (void (**)(void, uint64_t))(v4 + 8);
    long long v35 = xmmword_10048FB00;
    uint64_t v39 = v13;
    id v16 = v40;
    do
    {
      if (v45) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v47 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      id v19 = [v46 sharedInstance];
      id v20 = [v19 activeConversationForCall:v18 backedByGroupSession:1];

      if (v20)
      {
        id v21 = [v18 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = *v37;
        uint64_t v23 = v42;
        (*v37)(v16, v42);
        id v24 = sub_1001B1AC8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = v35;
        id v26 = [v18 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*v36)(v41, v16, v23);
        uint64_t v27 = String.init<A>(reflecting:)();
        uint64_t v29 = v28;
        uint64_t v30 = v23;
        uint64_t v13 = v39;
        v22(v16, v30);
        *(void *)(v25 + 56) = &type metadata for String;
        unint64_t v31 = sub_1001F3B08();
        *(void *)(v25 + 64) = v31;
        *(void *)(v25 + 32) = v27;
        *(void *)(v25 + 40) = v29;
        uint64_t v48 = *v38;
        swift_bridgeObjectRetain();
        sub_1001F081C(&qword_1005855A8);
        uint64_t v32 = String.init<A>(reflecting:)();
        *(void *)(v25 + 96) = &type metadata for String;
        *(void *)(v25 + 104) = v31;
        *(void *)(v25 + 72) = v32;
        *(void *)(v25 + 80) = v33;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
      }
      ++v15;
    }
    while (v13 != v15);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100216704(uint64_t *a1)
{
  id v2 = [self sharedInstance];
  id v3 = [v2 _allCalls];

  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v4;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100216848(void *a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  id v13 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048F550;
  id v15 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  uint64_t v16 = String.init<A>(reflecting:)();
  uint64_t v18 = v17;
  id v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1001F3B08();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v20 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1001F0530((uint64_t)v5, 1, 1, v6);
  swift_beginAccess();
  sub_1002C25B8((uint64_t)v5, (uint64_t)v12);
  swift_endAccess();
  id v21 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v22 = (void *)sub_1002CE034((uint64_t)v12);
  swift_endAccess();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v12, v6);
  if (v22)
  {
    uint64_t v24 = sub_100216B80(a1);
    sub_100214680(v22, v24);

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100216B80(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v26 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = &type metadata for Int;
  v24[0] = 0;
  sub_1002C2414((uint64_t)v24);
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = &type metadata for Int;
  v24[0] = 1;
  sub_1002C2414((uint64_t)v24);
  id v15 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v16 = (void *)sub_1002CE014((uint64_t)v7);
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v16) {
    return (uint64_t)v26;
  }
  sub_100390134(a1);
  id v17 = v16;
  uint64_t v18 = sub_10021D850(&qword_1005855A0, (void (*)(uint64_t))type metadata accessor for RTCCSDConversationInfo);

  if (!v18)
  {
LABEL_13:

    return (uint64_t)v26;
  }
  uint64_t v23 = v18;
  uint64_t result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName) {
    goto LABEL_18;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v19 = [a1 isOneToOneModeEnabled];
  uint64_t v20 = 0x6E6F6973736573;
  if (v19) {
    uint64_t v20 = 0x7961776F7774;
  }
  unint64_t v21 = 0xE700000000000000;
  uint64_t v25 = &type metadata for String;
  if (v19) {
    unint64_t v21 = 0xE600000000000000;
  }
  v24[0] = v20;
  v24[1] = v21;
  sub_1002C2414((uint64_t)v24);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v23;
    uint64_t v25 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v24[0] = v22;
    sub_1002C2414((uint64_t)v24);
    goto LABEL_13;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_100217250(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess();
  uint64_t v12 = sub_100223124(v9, *v11);
  if (v12)
  {
    id v13 = (void *)v12;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (a3) {
      sub_100390068();
    }
    else {
      sub_100390074();
    }
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

void sub_1002174B8()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v1;
  id v12 = v3;
  sub_100217610();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_1001FCC08();
}

void sub_100217610()
{
  sub_1001FCC38();
  uint64_t v28 = v2;
  v25[1] = v3;
  uint64_t v26 = v4;
  uint64_t v6 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v30 = v7;
  __chkstk_darwin(v8);
  uint64_t v29 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v12 = sub_10021EB68();
  sub_1001F6398();
  uint64_t v14 = v13;
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v17);
  uint64_t v18 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)&v0[OBJC_IVAR___CSDRTCReporter_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v18, v6, v12);
  unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, v18, v12);
  v32[4] = v26;
  v32[5] = v20;
  v32[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v32[2] = sub_1002C2C88;
  v32[3] = v28;
  unint64_t v21 = _Block_copy(v32);
  uint64_t v22 = v0;
  static DispatchQoS.unspecified.getter();
  unint64_t v31 = _swiftEmptyArrayStorage;
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EAB4();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  uint64_t v23 = sub_10021EAE0();
  v24(v23);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v29);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_1002178A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo;
  swift_beginAccess();
  if (!*(void *)(*(void *)v5 + 16)) {
    return swift_endAccess();
  }
  sub_1002337A4(a2);
  if ((v6 & 1) == 0) {
    return swift_endAccess();
  }
  uint64_t v7 = swift_endAccess();
  return a3(v7);
}

uint64_t sub_10021795C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v29 - v17;
  id v19 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID);
  swift_beginAccess();
  sub_10022312C((uint64_t)v16, *v20);
  if (sub_1001F758C((uint64_t)v11, 1, v12) == 1)
  {
    sub_10021E23C((uint64_t)v11, (uint64_t *)&unk_100585580);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    swift_endAccess();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
    v22(v16, v12);
    uint64_t v23 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess();
    uint64_t v24 = sub_100223124(v18, *v23);
    if (v24)
    {
      uint64_t v25 = (void *)v24;
      swift_endAccess();
      id v26 = [a2 report];
      id v27 = [v26 conversationID];

      if (v27)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v28 = 1;
      }
      sub_1001F0530((uint64_t)v9, v28, 1, v12);
      sub_100217C78(a3, v25, (uint64_t)v9);

      sub_10021E23C((uint64_t)v9, (uint64_t *)&unk_100585580);
    }
    else
    {
      swift_endAccess();
    }
    return ((uint64_t (*)(char *, uint64_t))v22)(v18, v12);
  }
}

uint64_t sub_100217C78(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  id v27 = *(void (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18)
    {
      id v19 = (void (**)(char *, char *, uint64_t))(v27 + 4);
      ++v27;
      uint64_t v28 = v19;
      swift_bridgeObjectRetain();
      uint64_t v20 = 0;
      uint64_t v21 = a1;
      do
      {
        uint64_t v22 = *(void *)(a1 + 8 * v20 + 32);
        sub_10021E3D8(v30, (uint64_t)v7, (uint64_t *)&unk_100585580);
        if (sub_1001F758C((uint64_t)v7, 1, v8) == 1)
        {
          swift_bridgeObjectRetain();
          sub_10021E23C((uint64_t)v7, (uint64_t *)&unk_100585580);
        }
        else
        {
          (*v28)(v10, v7, v8);
          swift_bridgeObjectRetain();
          uint64_t v23 = UUID.uuidString.getter();
          uint64_t v34 = &type metadata for String;
          *(void *)&long long v33 = v23;
          *((void *)&v33 + 1) = v24;
          sub_1001F75B4(&v33, &v32);
          swift_isUniquelyReferenced_nonNull_native();
          uint64_t v31 = v22;
          sub_100280CF0();
          uint64_t v22 = v31;
          swift_bridgeObjectRelease();
          (*v27)(v10, v8);
        }
        ++v20;
        uint64_t v25 = sub_10021D5F8(v22);
        swift_bridgeObjectRelease();
        sub_100214680(v29, v25);
        swift_bridgeObjectRelease();
        a1 = v21;
      }
      while (v18 != v20);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100217FF0()
{
  sub_1001FCC38();
  sub_10021ECC0();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1002024D0();
  uint64_t v5 = sub_10021EBD0(OBJC_IVAR___CSDRTCReporter_queue);
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v0;
  sub_10021ECE4(v5);
  v12[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v12[2] = sub_1002C2C88;
  uint64_t v13 = v2;
  uint64_t v6 = _Block_copy(v12);
  id v7 = v1;
  id v8 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10021EA90();
  _Block_release(v6);
  sub_10021EC0C();
  v9();
  uint64_t v10 = sub_10021EBF4();
  v11(v10);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_1002181AC(void *a1, void *a2)
{
  id v46 = a2;
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  id v49 = (char *)&v45 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [a1 dateConnected];
  if (!v23)
  {
    sub_1001F0530((uint64_t)v22, 1, 1, v16);
    goto LABEL_6;
  }
  uint64_t v24 = v23;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v19, v16);
  sub_1001F0530((uint64_t)v22, 0, 1, v16);
  if (sub_1001F758C((uint64_t)v22, 1, v16) == 1)
  {
LABEL_6:
    uint64_t v26 = &qword_100584B40;
    uint64_t v27 = (uint64_t)v22;
    return sub_10021E23C(v27, v26);
  }
  sub_10021E23C((uint64_t)v22, &qword_100584B40);
  id v25 = [a1 sessionUUID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v8, 1, v9) != 1)
  {
    uint64_t v29 = v48;
    uint64_t v30 = v49;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v49, v8, v9);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v31(v14, v30, v9);
    id v32 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1001F0530((uint64_t)v6, 0, 1, v9);
    swift_beginAccess();
    sub_1002C25B8((uint64_t)v6, (uint64_t)v14);
    swift_endAccess();
    id v46 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_10048FB00;
    v31(v14, v30, v9);
    uint64_t v34 = v31;
    uint64_t v35 = String.init<A>(reflecting:)();
    uint64_t v37 = v36;
    *(void *)(v33 + 56) = &type metadata for String;
    unint64_t v38 = sub_1001F3B08();
    *(void *)(v33 + 64) = v38;
    *(void *)(v33 + 32) = v35;
    *(void *)(v33 + 40) = v37;
    id v39 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v34(v47, v14, v9);
    uint64_t v40 = String.init<A>(reflecting:)();
    uint64_t v42 = v41;
    v43 = *(void (**)(char *, uint64_t))(v29 + 8);
    v43(v14, v9);
    *(void *)(v33 + 96) = &type metadata for String;
    *(void *)(v33 + 104) = v38;
    *(void *)(v33 + 72) = v40;
    *(void *)(v33 + 80) = v42;
    static os_log_type_t.default.getter();
    uint64_t v44 = v46;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v43)(v49, v9);
  }
  uint64_t v26 = (uint64_t *)&unk_100585580;
  uint64_t v27 = (uint64_t)v8;
  return sub_10021E23C(v27, v26);
}

void sub_10021879C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  v22[0] = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  v22[4] = v4;
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  v22[2] = v7;
  v22[3] = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = sub_10021EB68();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  v22[1] = *(void *)&v0[OBJC_IVAR___CSDRTCReporter_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v8);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v15 + ((v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v22[0];
  v23[4] = sub_10021E348;
  v23[5] = v15;
  v23[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v23[2] = sub_1002C2C88;
  v23[3] = &unk_10050D1E0;
  uint64_t v16 = _Block_copy(v23);
  uint64_t v17 = v0;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v22[5] = _swiftEmptyArrayStorage;
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EA44();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  uint64_t v18 = sub_10021EAE0();
  v19(v18);
  uint64_t v20 = sub_10021EC30();
  v21(v20);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100218A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  swift_beginAccess();
  sub_1002CE06C(a2);
  swift_endAccess();
  if (sub_1001F758C((uint64_t)v11, 1, v12) == 1) {
    return sub_10021E23C((uint64_t)v11, (uint64_t *)&unk_100585580);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  swift_beginAccess();
  uint64_t v20 = (void *)sub_1002CE034((uint64_t)v18);
  swift_endAccess();
  if (v20)
  {
    id v37 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v21 = swift_allocObject();
    uint64_t v36 = v9;
    uint64_t v22 = (void *)v21;
    *(_OWORD *)(v21 + 16) = xmmword_10048FB00;
    uint64_t v38 = a1;
    id v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v23(v16, a2, v12);
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v35 = a3;
    uint64_t v26 = v25;
    v22[7] = &type metadata for String;
    unint64_t v27 = sub_1001F3B08();
    uint64_t v34 = v20;
    unint64_t v28 = v27;
    v22[8] = v27;
    v22[4] = v24;
    v22[5] = v26;
    v23(v16, (uint64_t)v18, v12);
    uint64_t v29 = String.init<A>(reflecting:)();
    v22[12] = &type metadata for String;
    v22[13] = v28;
    v22[9] = v29;
    v22[10] = v30;
    static os_log_type_t.default.getter();
    uint64_t v31 = v37;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v36;
    sub_1001F0530((uint64_t)v36, 1, 1, v12);
    uint64_t v33 = v34;
    sub_100217C78(v35, v34, v32);

    sub_10021E23C(v32, (uint64_t *)&unk_100585580);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

void sub_100218EDC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v42 - v14;
  id v16 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess();
  uint64_t v18 = (void *)sub_100223124(v15, *v17);
  if (v18)
  {
    v43 = v18;
    swift_endAccess();
    uint64_t v19 = a3;
    uint64_t v44 = a1;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v15, v6);
    id v21 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10048FB00;
    id v23 = [a2 UUID];
    id v42 = a2;
    id v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v25 = String.init<A>(reflecting:)();
    uint64_t v27 = v26;
    v20(v13, v6);
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v28 = sub_1001F3B08();
    *(void *)(v22 + 64) = v28;
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v27;
    uint64_t v45 = v19;
    swift_bridgeObjectRetain();
    sub_1001F081C((uint64_t *)&unk_100586DF0);
    uint64_t v29 = String.init<A>(reflecting:)();
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v28;
    *(void *)(v22 + 72) = v29;
    *(void *)(v22 + 80) = v30;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    id v31 = [v42 report];
    uint64_t v32 = sub_100219320(v19, v31);

    if (*(void *)(v32 + 16))
    {
      uint64_t v33 = v43;
      sub_100214680(v43, v32);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
    uint64_t v34 = v10;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v7 + 8);
    v35(v15, v6);
    id v36 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_10048F550;
    id v38 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v13, v6);
    uint64_t v39 = String.init<A>(reflecting:)();
    uint64_t v41 = v40;
    v35(v13, v6);
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1001F3B08();
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100219320(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v5 - 8);
  uint64_t v95 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for UUID();
  uint64_t v94 = *(void *)(v96 - 8);
  uint64_t v7 = __chkstk_darwin(v96);
  uint64_t v93 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v92 = (char *)&v92 - v9;
  uint64_t v10 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v10 - 8);
  v102 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  v104 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v92 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v92 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v24 = (char **)((char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *id v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) == 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v112 = &_swiftEmptyDictionarySingleton;
  v113 = &_swiftEmptyDictionarySingleton;
  id v27 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_10048F550;
  id v29 = [a2 timebase];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v20, v12);
  uint64_t v30 = String.init<A>(reflecting:)();
  uint64_t v32 = v31;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v33 = v13 + 8;
  long long v101 = v20;
  uint64_t v103 = v34;
  v34(v20, v12);
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = sub_1001F3B08();
  *(void *)(v28 + 32) = v30;
  *(void *)(v28 + 40) = v32;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v35 = a1 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(a1 + 64);
  int64_t v106 = (unint64_t)(v36 + 63) >> 6;
  v100 = (void (**)(char *, uint64_t, uint64_t))(v33 + 24);
  swift_bridgeObjectRetain();
  int64_t v39 = 0;
  v105 = (char *)&type metadata for Any + 8;
  uint64_t v40 = (uint64_t)v102;
  v98 = a2;
  uint64_t v99 = v33;
  uint64_t v97 = a1 + 64;
  while (1)
  {
    if (v38)
    {
      unint64_t v41 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int64_t v107 = v39;
      unint64_t v42 = v41 | (v39 << 6);
      goto LABEL_25;
    }
    int64_t v43 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v43 >= v106) {
      goto LABEL_42;
    }
    unint64_t v44 = *(void *)(v35 + 8 * v43);
    int64_t v45 = v39 + 1;
    if (!v44)
    {
      int64_t v45 = v39 + 2;
      if (v39 + 2 >= v106) {
        goto LABEL_42;
      }
      unint64_t v44 = *(void *)(v35 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v39 + 3;
        if (v39 + 3 >= v106) {
          goto LABEL_42;
        }
        unint64_t v44 = *(void *)(v35 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v39 + 4;
          if (v39 + 4 >= v106) {
            goto LABEL_42;
          }
          unint64_t v44 = *(void *)(v35 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v39 + 5;
            if (v39 + 5 >= v106) {
              goto LABEL_42;
            }
            unint64_t v44 = *(void *)(v35 + 8 * v45);
            if (!v44) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v38 = (v44 - 1) & v44;
    int64_t v107 = v45;
    unint64_t v42 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_25:
    unint64_t v47 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v42);
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    uint64_t v50 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v50 && (unint64_t v51 = sub_100233664(), (v52 & 1) != 0))
    {
      sub_100201880(*(void *)(a1 + 56) + 32 * v51, (uint64_t)&v110);
      int v53 = swift_dynamicCast();
      sub_1001F0530(v40, v53 ^ 1u, 1, v12);
      if (sub_1001F758C(v40, 1, v12) == 1) {
        goto LABEL_38;
      }
      (*v100)(v104, v40, v12);
      id v54 = [a2 timebase];
      v55 = v101;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      Date.timeIntervalSince(_:)();
      double v57 = v56;
      v103(v55, v12);
      double v58 = v57 * 1000.0;
      if ((~COERCE__INT64(v57 * 1000.0) & 0x7FF0000000000000) == 0) {
        goto LABEL_55;
      }
      if (v58 <= -9.22337204e18) {
        goto LABEL_56;
      }
      if (v58 >= 9.22337204e18) {
        goto LABEL_57;
      }
      uint64_t v59 = a1;
      uint64_t v60 = v12;
      v111 = &type metadata for Int;
      *(void *)&long long v110 = (uint64_t)v58;
      sub_1001F75B4(&v110, v109);
      uint64_t v61 = v112;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v108 = v61;
      unint64_t v63 = sub_100233664();
      uint64_t v65 = v61[2];
      BOOL v66 = (v64 & 1) == 0;
      Swift::Int v67 = v65 + v66;
      if (__OFADD__(v65, v66)) {
        goto LABEL_58;
      }
      unint64_t v68 = v63;
      char v69 = v64;
      sub_1001F081C((uint64_t *)&unk_1005885B0);
      Swift::Bool v70 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v67);
      uint64_t v12 = v60;
      a1 = v59;
      if (v70)
      {
        unint64_t v71 = sub_100233664();
        if ((v69 & 1) != (v72 & 1)) {
          goto LABEL_65;
        }
        unint64_t v68 = v71;
      }
      uint64_t v73 = v108;
      if (v69)
      {
        v74 = (_OWORD *)(v108[7] + 32 * v68);
        sub_1002018DC((uint64_t)v74);
        sub_1001F75B4(v109, v74);
      }
      else
      {
        v108[(v68 >> 6) + 8] |= 1 << v68;
        uint64_t v75 = (void *)(v73[6] + 16 * v68);
        *uint64_t v75 = v49;
        v75[1] = v48;
        sub_1001F75B4(v109, (_OWORD *)(v73[7] + 32 * v68));
        uint64_t v76 = v73[2];
        BOOL v77 = __OFADD__(v76, 1);
        uint64_t v78 = v76 + 1;
        if (v77) {
          goto LABEL_59;
        }
        v73[2] = v78;
        swift_bridgeObjectRetain();
      }
      v112 = v73;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103(v104, v12);
      a2 = v98;
      uint64_t v40 = (uint64_t)v102;
      uint64_t v35 = v97;
      int64_t v39 = v107;
    }
    else
    {
      sub_1001F0530(v40, 1, 1, v12);
LABEL_38:
      swift_bridgeObjectRelease();
      sub_10021E23C(v40, &qword_100584B40);
      int64_t v39 = v107;
    }
  }
  uint64_t v46 = v39 + 6;
  if (v39 + 6 < v106)
  {
    unint64_t v44 = *(void *)(v35 + 8 * v46);
    if (!v44)
    {
      while (1)
      {
        int64_t v45 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_61;
        }
        if (v45 >= v106) {
          goto LABEL_42;
        }
        unint64_t v44 = *(void *)(v35 + 8 * v45);
        ++v46;
        if (v44) {
          goto LABEL_24;
        }
      }
    }
    int64_t v45 = v39 + 6;
    goto LABEL_24;
  }
LABEL_42:
  swift_release();
  if (!v112[2])
  {
    swift_bridgeObjectRelease();
    id v89 = sub_1001B1AC8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return (uint64_t)v113;
  }
  id v79 = [a2 conversationID];
  if (v79)
  {
    uint64_t v80 = v79;
    id v81 = v93;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = v94;
    uint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v94 + 32);
    uint64_t v84 = v95;
    v85 = v81;
    uint64_t v86 = v96;
    v83(v95, v85, v96);
    sub_1001F0530(v84, 0, 1, v86);
    if (sub_1001F758C(v84, 1, v86) != 1)
    {
      uint64_t v87 = v92;
      v83((uint64_t)v92, (char *)v84, v86);
      v111 = (void *)v86;
      v88 = sub_1002044D8((uint64_t *)&v110);
      (*(void (**)(uint64_t *, char *, uint64_t))(v82 + 16))(v88, v87, v86);
      sub_1002C2414((uint64_t)&v110);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v87, v86);
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v84 = v95;
    sub_1001F0530(v95, 1, 1, v96);
  }
  sub_10021E23C(v84, (uint64_t *)&unk_100585580);
LABEL_49:
  if (!kRTCReportingMessageParametersCategory) {
    goto LABEL_62;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v111 = &type metadata for Int;
  *(void *)&long long v110 = 7;
  sub_1002C2414((uint64_t)&v110);
  if (kRTCReportingMessageParametersType)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v111 = &type metadata for Int;
    *(void *)&long long v110 = 1;
    sub_1002C2414((uint64_t)&v110);
    if (!kRTCReportingMessageParametersPayload) {
      goto LABEL_64;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v90 = v112;
    v111 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    *(void *)&long long v110 = v90;
    sub_1002C2414((uint64_t)&v110);
    return (uint64_t)v113;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100219F44()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v8);
  sub_1002024D0();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v0;
  v9[3] = v2;
  v9[4] = v6;
  v9[5] = v4;
  v19[4] = sub_10021E220;
  v19[5] = v9;
  v19[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v19[2] = sub_1002C2C88;
  v19[3] = &unk_10050D140;
  uint64_t v10 = _Block_copy(v19);
  id v11 = v0;
  id v12 = v2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EAB4();
  sub_10021EC48();
  _Block_release(v10);
  uint64_t v13 = sub_10021ECA8();
  v14(v13);
  sub_10021EC0C();
  v18(v15, v16, v17);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10021A150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v32 - v16;
  id v18 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess();
  uint64_t v20 = sub_100223124(v17, *v19);
  if (v20)
  {
    id v21 = (id)v20;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    id v22 = [a2 report];
    uint64_t v23 = sub_10021A438(a3, a4, v22);

    sub_100214680(v21, v23);
  }
  else
  {
    swift_endAccess();
    id v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v17, v8);
    uint64_t v25 = v24;
    id v21 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_10048F550;
    id v27 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v15, v8);
    uint64_t v28 = String.init<A>(reflecting:)();
    uint64_t v30 = v29;
    v25(v15, v8);
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_1001F3B08();
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10021A438(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v29 = a2;
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  *id v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v32 = a1;
  uint64_t v33 = &_swiftEmptyDictionarySingleton;
  if (!a3)
  {
    sub_1001F0530((uint64_t)v11, 1, 1, v12);
    swift_bridgeObjectRetain();
LABEL_8:
    sub_10021E23C((uint64_t)v11, (uint64_t *)&unk_100585580);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id v22 = [a3 conversationID];
  if (v22)
  {
    uint64_t v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 1;
  }
  sub_1001F0530((uint64_t)v9, v24, 1, v12);
  sub_10021E124((uint64_t)v9, (uint64_t)v11);
  if (sub_1001F758C((uint64_t)v11, 1, v12) == 1) {
    goto LABEL_8;
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v14, v11, v12);
  uint64_t v31 = (void *)v12;
  uint64_t v26 = sub_1002044D8(v30);
  (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 16))(v26, v14, v12);
  sub_1002C2414((uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
LABEL_10:
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = &type metadata for Int;
  v30[0] = 6;
  sub_1002C2414((uint64_t)v30);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = &type metadata for Int;
  v30[0] = v29;
  sub_1002C2414((uint64_t)v30);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v32;
    uint64_t v31 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v30[0] = v27;
    sub_1002C2414((uint64_t)v30);
    return (uint64_t)v33;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_10021A904()
{
  sub_1001FCC38();
  sub_10021EB90(v3, v4, v5, v6, v7, v8);
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1002024D0();
  uint64_t v11 = (void *)sub_10021EB10(OBJC_IVAR___CSDRTCReporter_queue);
  v11[2] = v0;
  v11[3] = v1;
  v11[4] = v2;
  sub_10021ECE4((uint64_t)v11);
  v20[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v20[2] = sub_1002C2C88;
  v20[3] = v19;
  uint64_t v12 = _Block_copy(v20);
  id v13 = v0;
  id v14 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EA44();
  sub_10021EC6C();
  _Block_release(v12);
  uint64_t v15 = sub_10021EA78();
  v16(v15);
  uint64_t v17 = sub_10021EC90();
  v18(v17);
  swift_release();
  sub_1001FCC08();
}

void sub_10021AAC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  id v16 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess();
  uint64_t v18 = sub_100223124(v15, *v17);
  if (!v18)
  {
    swift_endAccess();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v15, v6);
    id v26 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_10048F550;
    id v28 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v31 = v30;
    v25(v13, v6);
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_1001F3B08();
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v31;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

LABEL_7:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v19 = (void *)v18;
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  uint64_t v20 = *(void *)(a3 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(a3 + 8 * v21++ + 32);
      swift_bridgeObjectRetain();
      id v23 = [a2 report];
      uint64_t v24 = sub_10021ADEC(v22, v23);

      swift_bridgeObjectRelease();
      sub_100214680(v19, v24);
      swift_bridgeObjectRelease();
    }
    while (v20 != v21);

    goto LABEL_7;
  }
}

uint64_t sub_10021ADEC(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v31 = a1;
  uint64_t v32 = &_swiftEmptyDictionarySingleton;
  if (!a2)
  {
    sub_1001F0530((uint64_t)v10, 1, 1, v11);
    swift_bridgeObjectRetain();
LABEL_8:
    sub_10021E23C((uint64_t)v10, (uint64_t *)&unk_100585580);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id v21 = [a2 conversationID];
  if (v21)
  {
    uint64_t v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  sub_1001F0530((uint64_t)v8, v23, 1, v11);
  sub_10021E124((uint64_t)v8, (uint64_t)v10);
  if (sub_1001F758C((uint64_t)v10, 1, v11) == 1) {
    goto LABEL_8;
  }
  uint64_t v24 = v28;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v13, v10, v11);
  uint64_t v30 = (void *)v11;
  uint64_t v25 = sub_1002044D8(v29);
  (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(v25, v13, v11);
  sub_1002C2414((uint64_t)v29);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
LABEL_10:
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = &type metadata for Int;
  v29[0] = 5;
  sub_1002C2414((uint64_t)v29);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = &type metadata for Int;
  v29[0] = 7;
  sub_1002C2414((uint64_t)v29);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v31;
    uint64_t v30 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v29[0] = v26;
    sub_1002C2414((uint64_t)v29);
    return (uint64_t)v32;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10021B228(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_1001F081C((uint64_t *)&unk_100586DF0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a5;
  id v10 = a1;
  sub_10021A904();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10021B2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10021B30C(3u, a2, a3);
}

uint64_t sub_10021B30C(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 56;
  uint64_t v20 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
    __break(1u);
    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v19 = &type metadata for Int;
  v18[0] = 4;
  sub_1002C2414((uint64_t)v18);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v19 = &type metadata for Int;
  v18[0] = a1;
  sub_1002C2414((uint64_t)v18);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (!kRTCReportingMessageParametersPayload)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1001F081C((uint64_t *)&unk_100585570);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000010047CF50;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  swift_bridgeObjectRetain();
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  id v19 = (void *)sub_1001F081C((uint64_t *)&unk_100586440);
  v18[0] = v12;
  sub_1002C2414((uint64_t)v18);
  UUID.init()();
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = (void *)sub_10021CDF8(v13, v15, 0, 0xD000000000000012, 0x800000010047CF70, 0xD000000000000021, 0x800000010047CF20, 0);
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100214680(v16, (uint64_t)v20);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10021B5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10021B30C(4u, a2, a3);
}

uint64_t sub_10021B63C(void *a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = a3;
  id v6 = a1;
  sub_10021B728();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10021B6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10021B30C(5u, a2, a3);
}

void sub_10021B728()
{
  sub_1001FCC38();
  uint64_t v17 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v8);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_1002024D0();
  id v10 = (void *)sub_10021EB10(OBJC_IVAR___CSDRTCReporter_queue);
  v10[2] = v0;
  v10[3] = v7;
  v10[4] = v5;
  v18[4] = v3;
  v18[5] = v10;
  v18[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v18[2] = sub_1002C2C88;
  void v18[3] = v17;
  uint64_t v11 = _Block_copy(v18);
  id v12 = v0;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EA44();
  sub_10021EA90();
  _Block_release(v11);
  uint64_t v13 = sub_10021EA78();
  v14(v13);
  uint64_t v15 = sub_10021EC18();
  v16(v15);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10021B900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10021B30C(6u, a2, a3);
}

void sub_10021B950()
{
  sub_1001FCC38();
  sub_10021ECC0();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1002024D0();
  uint64_t v5 = sub_10021EBD0(OBJC_IVAR___CSDRTCReporter_queue);
  *(void *)(v5 + 16) = v0;
  *(void *)(v5 + 24) = v1;
  sub_10021ECE4(v5);
  v12[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v12[2] = sub_1002C2C88;
  uint64_t v13 = v2;
  uint64_t v6 = _Block_copy(v12);
  id v7 = v0;
  id v8 = v1;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10021EA90();
  _Block_release(v6);
  sub_10021EC0C();
  v9();
  uint64_t v10 = sub_10021EBF4();
  v11(v10);
  swift_release();
  sub_1001FCC08();
}

void sub_10021BB0C(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1001F2514();
  uint64_t v12 = v11 - v10;
  id v13 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess();
  uint64_t v15 = sub_100223124(v12, *v14);
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    swift_endAccess();
    sub_10021EC0C();
    uint64_t v18 = v17();
    a3(v18);
  }
  else
  {
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
  }
}

void sub_10021BCD8()
{
  sub_1001FCC38();
  uint64_t v18 = v1;
  uint64_t v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v8);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_1002024D0();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  *(void *)(v10 + 24) = v7;
  *(unsigned char *)(v10 + 32) = v5;
  v19[4] = v3;
  v19[5] = v10;
  v19[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v19[2] = sub_1002C2C88;
  v19[3] = v18;
  uint64_t v11 = _Block_copy(v19);
  id v12 = v0;
  id v13 = v7;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EA44();
  sub_10021EA90();
  _Block_release(v11);
  uint64_t v14 = sub_10021EA78();
  v15(v14);
  uint64_t v16 = sub_10021EC18();
  v17(v16);
  swift_release();
  sub_1001FCC08();
}

void sub_10021BEC0(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess();
  uint64_t v12 = sub_100223124(v9, *v11);
  if (v12)
  {
    id v13 = (void *)v12;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_1003900F0(a3 & 1);
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

void sub_10021C0D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs);
  swift_beginAccess();
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = (char *)sub_1002231D8(a2, a3, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (v9 == (char *)1)
  {
    id v14 = sub_1001B1AC8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)&v9[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_userScore] = a4;
      if (v11)
      {
        id v15 = v11;
        uint64_t v16 = v9;
        uint64_t v17 = sub_10021C304(v16, a2, a3);
        sub_100214680(v15, v17);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v18 = (void *)sub_1002CE1AC(a2, a3);
        uint64_t v20 = v19;
        swift_endAccess();

        sub_10021DF2C(v18, v20);
        return;
      }
    }
    else
    {
      if (v11)
      {
        id v12 = v11;
        id v13 = sub_1001B1AC8();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        return;
      }
      uint64_t v9 = 0;
    }
    id v14 = sub_1001B1AC8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

uint64_t sub_10021C304(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)(v4 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v25 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = &type metadata for Int;
  v23[0] = 2;
  sub_1002C2414((uint64_t)v23);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = &type metadata for Int;
  v23[0] = 1;
  sub_1002C2414((uint64_t)v23);
  unsigned __int8 v15 = [*(id *)(v4 + OBJC_IVAR___CSDRTCReporter_appleIDUtilities) isSignedIntoiCloud];
  a1[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud] = v15;
  uint64_t v16 = (uint64_t *)(v4 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100223128(a2, a3, v17);
  swift_endAccess();
  swift_bridgeObjectRelease();
  *(void *)&a1[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = v18;
  swift_bridgeObjectRelease();
  id v19 = a1;
  uint64_t v20 = sub_10021D850((unint64_t *)&unk_100585560, (void (*)(uint64_t))type metadata accessor for RTCCSDCallInfo);

  if (!v20) {
    return (uint64_t)v25;
  }
  uint64_t v22 = v20;
  uint64_t result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName) {
    goto LABEL_12;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = &type metadata for String;
  v23[0] = 0xD000000000000021;
  v23[1] = 0x800000010047CF20;
  sub_1002C2414((uint64_t)v23);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v22;
    uint64_t v24 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v23[0] = v21;
    sub_1002C2414((uint64_t)v23);
    return (uint64_t)v25;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_10021C6CC(void *a1)
{
  uint64_t v1 = 0x6E69706F7264;
  id v2 = [a1 provider];
  id v3 = [v2 identifier];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 == 0xD00000000000002CLL && v6 == 0x800000010047D3A0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 0xD000000000000012;
    }
  }
  return v1;
}

uint64_t sub_10021C7D4(void *a1)
{
  id v1 = [a1 provider];
  unsigned int v2 = [v1 isTinCanProvider];

  if (v2) {
    return 0x6E61636E6974;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_10021C850(void *a1)
{
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 isVideo];
  id v5 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  nw_activity_create();
  nw_activity_activate();
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_10027F68C();
  swift_endAccess();
  nw_activity_create();
  nw_activity_activate();
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_10027F68C();
  swift_endAccess();
  id v6 = [self newHierarchyTokenFromParentToken:0];
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  uint64_t v10 = sub_10021C7D4(a1);
  uint64_t v12 = sub_10021CDF8(v7, v9, v6, v10, v11, 0xD000000000000024, 0x800000010047D530, 0);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
  return v12;
}

uint64_t sub_10021CAB0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v31 - v10;
  id v12 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivity);
  swift_beginAccess();
  uint64_t v14 = sub_1002230E0((uint64_t)v11, *v13);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (!v14)
  {
    nw_activity_create();
    nw_activity_activate();
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_10027F68C();
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  unsigned __int8 v15 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting);
  swift_beginAccess();
  uint64_t v16 = sub_1002230E0((uint64_t)v11, *v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (!v16)
  {
    nw_activity_create();
    nw_activity_activate();
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_10027F68C();
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  id v17 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  uint64_t v32 = v11;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  unint64_t v22 = sub_10021C6CC(a1);
  uint64_t v24 = v23;
  unsigned int v25 = [a1 isOneToOneModeEnabled];
  uint64_t v31 = v5;
  if (v25) {
    uint64_t v26 = 0x7961776F7774;
  }
  else {
    uint64_t v26 = 0x6E6F6973736573;
  }
  if (v25) {
    uint64_t v27 = 0xE600000000000000;
  }
  else {
    uint64_t v27 = 0xE700000000000000;
  }
  id v28 = objc_msgSend(a1, "report", v31);
  uint64_t v29 = sub_10021CDF8(v18, v20, v33, v22, v24, v26, v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v21(v32, v31);
  return v29;
}

uint64_t sub_10021CDF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v74 = a7;
  id v75 = a8;
  uint64_t v73 = a6;
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v78 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  id v79 = *(void (***)(void, char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  char v72 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (void *)((char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v8 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  sub_1001F081C(&qword_100584B90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048FAF0;
  uint64_t result = kRTCReportingSessionInfoClientType;
  if (!kRTCReportingSessionInfoClientType)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v25;
  id v26 = [objc_allocWithZone((Class)NSNumber) initWithChar:27];
  uint64_t v27 = sub_1001F6204(0, (unint64_t *)&qword_100585590);
  *(void *)(inited + 72) = v27;
  *(void *)(inited + 48) = v26;
  uint64_t result = kRTCReportingSessionInfoClientVersion;
  if (!kRTCReportingSessionInfoClientVersion)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v28;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = 3223088;
  *(void *)(inited + 104) = 0xE300000000000000;
  uint64_t result = kRTCReportingSessionInfoSessionID;
  if (!kRTCReportingSessionInfoSessionID)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v29;
  id v30 = [objc_allocWithZone((Class)NSNumber) initWithInteger:String.hashValue.getter()];
  *(void *)(inited + 168) = v27;
  *(void *)(inited + 144) = v30;
  uint64_t result = kRTCReportingSessionInfoBatchEvent;
  if (!kRTCReportingSessionInfoBatchEvent)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v31;
  id v32 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  *(void *)(inited + 216) = v27;
  *(void *)(inited + 192) = v32;
  uint64_t v82 = Dictionary.init(dictionaryLiteral:)();
  if (a3)
  {
    uint64_t result = kRTCReportingSessionInfoHierarchyToken;
    if (!kRTCReportingSessionInfoHierarchyToken)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v81 = (void *)sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
    v80[0] = a3;
    id v33 = a3;
    sub_1002C2414((uint64_t)v80);
  }
  sub_1001F081C((uint64_t *)&unk_100585570);
  uint64_t v34 = swift_initStackObject();
  long long v71 = xmmword_10048FB00;
  *(_OWORD *)(v34 + 16) = xmmword_10048FB00;
  uint64_t result = kRTCReportingUserInfoClientName;
  if (!kRTCReportingUserInfoClientName) {
    goto LABEL_29;
  }
  *(void *)(v34 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v34 + 40) = v35;
  uint64_t v36 = v77;
  *(void *)(v34 + 48) = v76;
  *(void *)(v34 + 56) = v36;
  uint64_t result = kRTCReportingUserInfoServiceName;
  uint64_t v37 = (uint64_t)v78;
  unint64_t v38 = v79;
  if (!kRTCReportingUserInfoServiceName)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *(void *)(v34 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v34 + 72) = v39;
  uint64_t v40 = v74;
  *(void *)(v34 + 80) = v73;
  *(void *)(v34 + 88) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = Dictionary.init(dictionaryLiteral:)();
  if (v75)
  {
    id v42 = [v75 conversationID];
    if (v42)
    {
      int64_t v43 = v42;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = 1;
    }
    int64_t v45 = v72;
    sub_1001F0530(v37, v44, 1, v15);
    sub_10021E124(v37, (uint64_t)v14);
    if (sub_1001F758C((uint64_t)v14, 1, v15) == 1) {
      goto LABEL_17;
    }
    ((void (**)(char *, char *, uint64_t))v38)[4](v45, v14, v15);
    uint64_t result = kRTCReportingSessionInfoSamplingUUIID;
    if (kRTCReportingSessionInfoSamplingUUIID)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = UUID.uuidString.getter();
      id v81 = &type metadata for String;
      v80[0] = v46;
      v80[1] = v47;
      sub_1002C2414((uint64_t)v80);
      ((void (*)(char *, uint64_t))v38[1])(v45, v15);
      goto LABEL_20;
    }
LABEL_32:
    __break(1u);
    return result;
  }
  sub_1001F0530((uint64_t)v14, 1, 1, v15);
LABEL_17:
  sub_10021E23C((uint64_t)v14, (uint64_t *)&unk_100585580);
LABEL_20:
  uint64_t v48 = v82;
  swift_bridgeObjectRetain();
  sub_100393B1C();
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  sub_100393DF0();
  uint64_t v52 = v51;
  id v53 = objc_allocWithZone((Class)RTCReporting);
  id v54 = sub_10021DE40(v50, v52, (uint64_t)_swiftEmptyArrayStorage);
  id v55 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v56 = swift_allocObject();
  if (v54)
  {
    *(_OWORD *)(v56 + 16) = xmmword_1004904F0;
    v80[0] = v54;
    sub_1001F6204(0, (unint64_t *)&unk_100588560);
    id v79 = (void (**)(void, char *, uint64_t))v54;
    uint64_t v57 = String.init<A>(reflecting:)();
    uint64_t v59 = v58;
    *(void *)(v56 + 56) = &type metadata for String;
    unint64_t v60 = sub_1001F3B08();
    *(void *)(v56 + 64) = v60;
    *(void *)(v56 + 32) = v57;
    *(void *)(v56 + 40) = v59;
    v80[0] = v48;
    sub_1001F081C((uint64_t *)&unk_100586DF0);
    uint64_t v61 = String.init<A>(reflecting:)();
    *(void *)(v56 + 96) = &type metadata for String;
    *(void *)(v56 + 104) = v60;
    *(void *)(v56 + 72) = v61;
    *(void *)(v56 + 80) = v62;
    v80[0] = v41;
    sub_1001F081C((uint64_t *)&unk_100586440);
    uint64_t v63 = String.init<A>(reflecting:)();
    *(void *)(v56 + 136) = &type metadata for String;
    *(void *)(v56 + 144) = v60;
    *(void *)(v56 + 112) = v63;
    *(void *)(v56 + 120) = v64;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    [v79 startConfigurationWithCompletionHandler:0];
  }
  else
  {
    *(_OWORD *)(v56 + 16) = v71;
    v80[0] = v48;
    sub_1001F081C((uint64_t *)&unk_100586DF0);
    uint64_t v65 = String.init<A>(reflecting:)();
    uint64_t v67 = v66;
    *(void *)(v56 + 56) = &type metadata for String;
    unint64_t v68 = sub_1001F3B08();
    *(void *)(v56 + 64) = v68;
    *(void *)(v56 + 32) = v65;
    *(void *)(v56 + 40) = v67;
    v80[0] = v41;
    sub_1001F081C((uint64_t *)&unk_100586440);
    uint64_t v69 = String.init<A>(reflecting:)();
    *(void *)(v56 + 96) = &type metadata for String;
    *(void *)(v56 + 104) = v68;
    *(void *)(v56 + 72) = v69;
    *(void *)(v56 + 80) = v70;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  return (uint64_t)v54;
}

uint64_t sub_10021D5F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)&v11[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v13 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = &type metadata for Int;
  v11[0] = 3;
  sub_1002C2414((uint64_t)v11);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = &type metadata for Int;
  v11[0] = 2;
  sub_1002C2414((uint64_t)v11);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = (void *)sub_1001F081C((uint64_t *)&unk_100586DF0);
    v11[0] = a1;
    swift_bridgeObjectRetain();
    sub_1002C2414((uint64_t)v11);
    return (uint64_t)v13;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_10021D7F0(void *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  id v3 = [a1 provider];
  unsigned __int8 v4 = [v3 isSystemProvider];

  *a2 = v4;
}

uint64_t sub_10021D850(unint64_t *a1, void (*a2)(uint64_t))
{
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for JSONEncoder.OutputFormatting();
  __chkstk_darwin(v4 - 8);
  sub_1001F2514();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  sub_10021E050(a1, a2);
  uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v7 = v6;
  id v8 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v20[0] = 0;
  id v10 = [v8 JSONObjectWithData:isa options:4 error:v20];

  id v11 = *(id *)&v20[0];
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v12 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    memset(v20, 0, sizeof(v20));
  }
  sub_10021E3D8((uint64_t)v20, (uint64_t)&v17, (uint64_t *)&unk_100584CA0);
  if (v18)
  {
    sub_1001F75B4(&v17, v16);
    sub_100201880((uint64_t)v16, (uint64_t)v15);
    sub_1001F081C((uint64_t *)&unk_100586DF0);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v19 = 0;
    }
    sub_1002018DC((uint64_t)v16);
    uint64_t v13 = v19;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v19 = 0;
  }
  sub_1001F7498(v5, v7);
  swift_release();
  sub_10021E23C((uint64_t)v20, (uint64_t *)&unk_100584CA0);
  return v13;
}

void sub_10021DAC4()
{
}

uint64_t type metadata accessor for RTCReporter()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for CallInfoPendingScore(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for CallInfoPendingScore(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for CallInfoPendingScore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  unint64_t v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for CallInfoPendingScore(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CallInfoPendingScore(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallInfoPendingScore(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallInfoPendingScore()
{
  return &type metadata for CallInfoPendingScore;
}

uint64_t sub_10021DE10()
{
  return sub_10021E1B0(44);
}

void sub_10021DE18()
{
  sub_10021C0D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_10021DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10021DE38()
{
  return swift_release();
}

id sub_10021DE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a3)
  {
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = [v3 initWithSessionInfo:v5.super.isa userInfo:v6.super.isa frameworksToCheck:v7.super.isa];

  return v8;
}

void sub_10021DF2C(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {
  }
}

unint64_t sub_10021DF70()
{
  unint64_t result = qword_100585550;
  if (!qword_100585550)
  {
    sub_1001F6204(255, (unint64_t *)&unk_100588560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585550);
  }
  return result;
}

id sub_10021DFD0(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [a3 sendMessageWithDictionary:isa error:a2];

  return v6;
}

uint64_t sub_10021E050(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10021E098()
{
  sub_10021BEC0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_10021E0A4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10021E0E4()
{
  sub_10021BB0C(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(uint64_t))sub_1003900C8);
}

uint64_t sub_10021E118()
{
  return sub_10021B900(v0[2], v0[3], v0[4]);
}

uint64_t sub_10021E124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021E190()
{
  return sub_10021B6D8(v0[2], v0[3], v0[4]);
}

uint64_t sub_10021E1A0()
{
  return sub_10021B5EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_10021E1B0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10021E1FC()
{
  return sub_10021B2E4(v0[2], v0[3], v0[4]);
}

void sub_10021E20C()
{
  sub_10021AAC4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10021E218()
{
  return sub_10021E448(48);
}

uint64_t sub_10021E220()
{
  return sub_10021A150(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_10021E230()
{
  sub_100218EDC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10021E23C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1001F081C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10021E298()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = (*(void *)(v4 + 64) + ((v5 + 24) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v8 = sub_10021EBB8();
  v9(v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7 + 8, v6);
}

uint64_t sub_10021E348()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100218A48(v3, v0 + v2, v4);
}

uint64_t sub_10021E3D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1001F081C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10021E43C()
{
  return sub_1002181AC(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10021E448(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10021E49C()
{
  return sub_10021795C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10021E4AC()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_1003900BC);
}

uint64_t sub_10021E4C8()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_1003900B0);
}

uint64_t sub_10021E4E0(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_1002178A4(*(void *)(v1 + 16), v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_10021E54C()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_1003900A4);
}

uint64_t sub_10021E568()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_100390098);
}

uint64_t sub_10021E584()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_10039008C);
}

uint64_t sub_10021E5A0()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;

  uint64_t v8 = sub_10021EBB8();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10021E634()
{
  return sub_10021E4E0((uint64_t (*)(uint64_t))sub_100390080);
}

uint64_t sub_10021E64C()
{
  return _swift_deallocObject(v0, 33, 7);
}

void sub_10021E68C()
{
  sub_100217250(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void sub_10021E698()
{
  sub_10021BB0C(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(uint64_t))sub_10039005C);
}

void sub_10021E6C8()
{
  sub_10021BB0C(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(uint64_t))sub_100390050);
}

void sub_10021E6F8()
{
  sub_10021BB0C(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(uint64_t))sub_100390044);
}

void sub_10021E728()
{
  sub_10021BB0C(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(uint64_t))sub_100390038);
}

uint64_t sub_10021E758()
{
  return sub_100216848(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10021E760()
{
  return sub_1002161C8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10021E768()
{
  return sub_10021EB60(v0, 24);
}

uint64_t sub_10021E774()
{
  return sub_100216704(*(uint64_t **)(v0 + 16));
}

uint64_t sub_10021E77C()
{
  return sub_10021EB60(v0, 32);
}

uint64_t sub_10021E788()
{
  return sub_100320604(*(uint64_t (**)(void))(v0 + 16));
}

void sub_10021E790()
{
  sub_100215FFC(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(void *))sub_10038FCEC);
}

void sub_10021E7C0()
{
  sub_100215FFC(*(void *)(v0 + 16), *(void **)(v0 + 24), (void (*)(void *))sub_10038FC18);
}

void sub_10021E7F0()
{
  sub_100215D50(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

id sub_10021E7FC()
{
  return sub_100215B28(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10021E80C()
{
  sub_100211B8C(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10021E818()
{
  sub_1002139B4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10021E824()
{
  sub_100213B58(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

void sub_10021E830(unsigned __int8 *a1@<X8>)
{
  sub_10021D7F0(*(void **)(v1 + 16), a1);
}

uint64_t sub_10021E850()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10021E898()
{
  sub_10021176C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10021E8A4()
{
  sub_1002111B0(*(void **)(v0 + 24));
}

uint64_t sub_10021EA1C()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10021EA44()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10021EA70()
{
  return sub_10021E1B0(40);
}

uint64_t sub_10021EA78()
{
  return v0;
}

uint64_t sub_10021EA90()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10021EAB4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10021EAE0()
{
  return v0;
}

void sub_10021EAFC(double a1)
{
  *(double *)(v1 - 120) = a1;
}

uint64_t sub_10021EB08()
{
  return sub_10021E448(40);
}

uint64_t sub_10021EB10@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 152) = *(void *)(v1 + a1);
  return swift_allocObject();
}

uint64_t sub_10021EB34()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10021EB60(uint64_t a1, uint64_t a2)
{
  return _swift_deallocObject(a1, a2, 7);
}

uint64_t sub_10021EB68()
{
  return type metadata accessor for UUID();
}

uint64_t sub_10021EB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 - 160) = a6;
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_10021EBB8()
{
  return v0 + v1;
}

uint64_t sub_10021EBD0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 152) = *(void *)(v1 + a1);
  return swift_allocObject();
}

uint64_t sub_10021EBF4()
{
  return v0;
}

uint64_t sub_10021EC18()
{
  return v0;
}

uint64_t sub_10021EC30()
{
  return v0;
}

uint64_t sub_10021EC48()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10021EC6C()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10021EC90()
{
  return v0;
}

uint64_t sub_10021ECA8()
{
  return v0;
}

uint64_t sub_10021ECC0()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_10021ECE4(uint64_t result)
{
  *(void *)(v2 - 96) = v1;
  *(void *)(v2 - 88) = result;
  return result;
}

uint64_t sub_10021ECF0()
{
  return v0;
}

id sub_10021ED04()
{
  uint64_t v1 = OBJC_IVAR___CSDProviderDisplayMonitor____lazy_storage___processObserver;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___CSDProviderDisplayMonitor____lazy_storage___processObserver);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___CSDProviderDisplayMonitor____lazy_storage___processObserver);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR___CSDProviderDisplayMonitor_queue);
    id v5 = objc_allocWithZone((Class)type metadata accessor for ProcessObserver());
    id v6 = v4;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v8 = [v5 initWithBundleIdentifiers:isa queue:v6];

    id v9 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id sub_10021EDC8(uint64_t a1, uint64_t a2, int a3)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for ProviderDisplayMonitor());
  id v7 = sub_10021EE74(a1, a2, a3);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v7;
}

id sub_10021EE74(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  sub_1001F2514();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  sub_1001F2514();
  uint64_t v17 = OBJC_IVAR___CSDProviderDisplayMonitor_queue;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  id v10 = v3;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_10021FD54();
  sub_1001F081C(&qword_100585100);
  sub_1001F0860();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v18);
  *(void *)(v16 + v17) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = OBJC_IVAR___CSDProviderDisplayMonitor_displayLayoutMonitor;
  id v12 = [self configurationForDefaultMainDisplayMonitor];
  id v13 = [self monitorWithConfiguration:v12];

  *(void *)&v10[v11] = v13;
  *(void *)&v10[OBJC_IVAR___CSDProviderDisplayMonitor____lazy_storage___processObserver] = 0;
  uint64_t v14 = &v10[OBJC_IVAR___CSDProviderDisplayMonitor_provider];
  *(void *)uint64_t v14 = a1;
  *((void *)v14 + 1) = a2;
  *((_DWORD *)v14 + 4) = a3;

  v22.receiver = v10;
  v22.super_class = (Class)type metadata accessor for ProviderDisplayMonitor();
  return objc_msgSendSuper2(&v22, "init");
}

id sub_10021F134()
{
  [*(id *)&v0[OBJC_IVAR___CSDProviderDisplayMonitor_displayLayoutMonitor] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProviderDisplayMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10021F24C()
{
  unsigned __int8 v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___CSDProviderDisplayMonitor_queue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10021FD24;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10021E788;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10032062C;
  aBlock[3] = &unk_10050DAD0;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_10021F3B0(unsigned char *a1)
{
  uint64_t result = sub_10021F3F4(4);
  *a1 = result & 1;
  if (result)
  {
    uint64_t result = sub_10021F7D8();
    *a1 = result & 1;
  }
  return result;
}

uint64_t sub_10021F3F4(uint64_t a1)
{
  id v2 = sub_10021ED04();
  uint64_t v48 = v1 + OBJC_IVAR___CSDProviderDisplayMonitor_provider;
  uint64_t v3 = sub_10025100C(*(void *)(v1 + OBJC_IVAR___CSDProviderDisplayMonitor_provider), *(void *)(v1 + OBJC_IVAR___CSDProviderDisplayMonitor_provider + 8), 1);

  uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
  sub_1002E4D1C(v52, v3);
  uint64_t v5 = v52[0];
  uint64_t v6 = v52[1];
  int64_t v7 = v52[3];
  unint64_t v8 = v52[4];
  int64_t v9 = (unint64_t)(v52[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v50 = v6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v7 << 6);
LABEL_22:
    unint64_t v16 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
    if (v16 <= 4)
    {
      int v17 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v11);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int v51 = v17;
      unint64_t v19 = sub_10023383C(v17);
      uint64_t v21 = *(void *)(v4 + 16);
      BOOL v22 = (v20 & 1) == 0;
      Swift::Int v23 = v21 + v22;
      if (__OFADD__(v21, v22)) {
        goto LABEL_62;
      }
      unint64_t v24 = v19;
      char v25 = v20;
      sub_1001F081C((uint64_t *)&unk_100585610);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v23))
      {
        unint64_t v26 = sub_10023383C(v51);
        if ((v25 & 1) != (v27 & 1)) {
          goto LABEL_64;
        }
        unint64_t v24 = v26;
      }
      if (v25)
      {
        *(void *)(*(void *)(v4 + 56) + 8 * v24) = v16;
      }
      else
      {
        *(void *)(v4 + 8 * (v24 >> 6) + 64) |= 1 << v24;
        *(_DWORD *)(*(void *)(v4 + 48) + 4 * v24) = v51;
        *(void *)(*(void *)(v4 + 56) + 8 * v24) = v16;
        uint64_t v28 = *(void *)(v4 + 16);
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_63;
        }
        *(void *)(v4 + 16) = v30;
      }
      swift_bridgeObjectRelease();
      uint64_t v6 = v50;
    }
  }
  int64_t v12 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v12 >= v9) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v6 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v6 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v6 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v6 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v7 + 6;
              if (v7 + 6 >= v9)
              {
LABEL_32:
                swift_release();
                swift_bridgeObjectRelease();
                int64_t v31 = 0;
                uint64_t v32 = v4 + 64;
                uint64_t v33 = 1 << *(unsigned char *)(v4 + 32);
                uint64_t v34 = -1;
                if (v33 < 64) {
                  uint64_t v34 = ~(-1 << v33);
                }
                unint64_t v35 = v34 & *(void *)(v4 + 64);
                int64_t v36 = (unint64_t)(v33 + 63) >> 6;
                while (1)
                {
                  if (v35)
                  {
                    unint64_t v37 = __clz(__rbit64(v35));
                    v35 &= v35 - 1;
                    unint64_t v38 = v37 | (v31 << 6);
                  }
                  else
                  {
                    int64_t v39 = v31 + 1;
                    if (__OFADD__(v31, 1)) {
                      goto LABEL_60;
                    }
                    if (v39 >= v36)
                    {
LABEL_57:
                      uint64_t v46 = 0;
                      goto LABEL_58;
                    }
                    unint64_t v40 = *(void *)(v32 + 8 * v39);
                    ++v31;
                    if (!v40)
                    {
                      int64_t v31 = v39 + 1;
                      if (v39 + 1 >= v36) {
                        goto LABEL_57;
                      }
                      unint64_t v40 = *(void *)(v32 + 8 * v31);
                      if (!v40)
                      {
                        int64_t v31 = v39 + 2;
                        if (v39 + 2 >= v36) {
                          goto LABEL_57;
                        }
                        unint64_t v40 = *(void *)(v32 + 8 * v31);
                        if (!v40)
                        {
                          int64_t v41 = v39 + 3;
                          if (v41 >= v36) {
                            goto LABEL_57;
                          }
                          unint64_t v40 = *(void *)(v32 + 8 * v41);
                          if (!v40)
                          {
                            while (1)
                            {
                              int64_t v31 = v41 + 1;
                              if (__OFADD__(v41, 1)) {
                                goto LABEL_61;
                              }
                              if (v31 >= v36) {
                                goto LABEL_57;
                              }
                              unint64_t v40 = *(void *)(v32 + 8 * v31);
                              ++v41;
                              if (v40) {
                                goto LABEL_50;
                              }
                            }
                          }
                          int64_t v31 = v41;
                        }
                      }
                    }
LABEL_50:
                    unint64_t v42 = __clz(__rbit64(v40));
                    unint64_t v35 = (v40 - 1) & v40;
                    unint64_t v38 = v42 + (v31 << 6);
                  }
                  int v43 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * v38);
                  uint64_t v44 = *(void *)(*(void *)(v4 + 56) + 8 * v38);
                  if (v43 == *(_DWORD *)(v48 + 16) && v44 == a1)
                  {
                    uint64_t v46 = 1;
LABEL_58:
                    swift_release();
                    return v46;
                  }
                }
              }
              unint64_t v13 = *(void *)(v6 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v7 + 7;
                do
                {
                  if (v15 >= v9) {
                    goto LABEL_32;
                  }
                  unint64_t v13 = *(void *)(v6 + 8 * v15++);
                }
                while (!v13);
                int64_t v14 = v15 - 1;
              }
            }
          }
        }
      }
    }
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
    goto LABEL_22;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10021F7D8()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR___CSDProviderDisplayMonitor_displayLayoutMonitor), "currentLayout"));
  if (v1)
  {
    id v2 = v1;
    id v3 = [v1 elements];
    sub_1001F6204(0, &qword_100585608);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62) {
      goto LABEL_32;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v5)
    {
      unint64_t v6 = 0;
      int64_t v7 = (void *)(v0 + OBJC_IVAR___CSDProviderDisplayMonitor_provider);
      char v20 = v2;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v6 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_31;
          }
          id v8 = *(id *)(v4 + 8 * v6 + 32);
        }
        int64_t v9 = v8;
        id v2 = (void *)(v6 + 1);
        if (__OFADD__(v6, 1)) {
          break;
        }
        id v10 = [v8 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v0 = v12;

        if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v13)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_28:
          swift_bridgeObjectRelease();

          goto LABEL_35;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15)
        {

          goto LABEL_28;
        }
        uint64_t v16 = sub_10021FC88(v9);
        if (v17)
        {
          if (v16 == *v7 && v17 == v7[1])
          {
            swift_bridgeObjectRelease();

            if (v2 == (void *)v5)
            {

              swift_bridgeObjectRelease();
              LOBYTE(v0) = 1;
              return v0 & 1;
            }
          }
          else
          {
            uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();

            if (v2 == (void *)v5)
            {

              swift_bridgeObjectRelease();
              return v0 & 1;
            }
          }
        }
        else
        {

          if (v2 == (void *)v5)
          {

            goto LABEL_34;
          }
        }
        ++v6;
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

LABEL_34:
    swift_bridgeObjectRelease();
  }
LABEL_35:
  LOBYTE(v0) = 0;
  return v0 & 1;
}

void sub_10021FAA4()
{
}

uint64_t type metadata accessor for ProviderDisplayMonitor()
{
  return self;
}

uint64_t destroy for ProviderDisplayMonitor.Provider()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13callservicesd22ProviderDisplayMonitorC8ProviderVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProviderDisplayMonitor.Provider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for ProviderDisplayMonitor.Provider(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ProviderDisplayMonitor.Provider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProviderDisplayMonitor.Provider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 20))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProviderDisplayMonitor.Provider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProviderDisplayMonitor.Provider()
{
  return &type metadata for ProviderDisplayMonitor.Provider;
}

uint64_t sub_10021FC88(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10021FCEC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10021FD24()
{
  return sub_10021F3B0(*(unsigned char **)(v0 + 16));
}

uint64_t sub_10021FD2C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10021FD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10021FD4C()
{
  return swift_release();
}

unint64_t sub_10021FD54()
{
  unint64_t result = qword_100583B00;
  if (!qword_100583B00)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100583B00);
  }
  return result;
}

ValueMetadata *type metadata accessor for HoldMusicDescriptor()
{
  return &type metadata for HoldMusicDescriptor;
}

unint64_t sub_10021FDB4()
{
  return 0xD000000000000015;
}

unint64_t sub_10021FDD0()
{
  return 0xD000000000000015;
}

uint64_t sub_10021FE24()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v2 = sub_10021FE6C(v0, v1, 0);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_10021FE6C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100202D2C((uint64_t)v9);
    NSString v7 = String._bridgeToObjectiveC()();
    a3 = [v3 BOOLForKey:v7];
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    sub_100202D2C((uint64_t)v9);
  }
  return a3 & 1;
}

uint64_t sub_10021FF70()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  unsigned __int8 v3 = TUSilenceUnknownFaceTimeCallersDefaultValue();
  LOBYTE(v0) = sub_10021FE6C(v0, v2, v3);
  swift_bridgeObjectRelease();
  return v0 & 1;
}

id sub_100220004()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = sub_10022004C(v0, v1, (id)1);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_10022004C(uint64_t a1, uint64_t a2, id a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100202D2C((uint64_t)v9);
    NSString v7 = String._bridgeToObjectiveC()();
    a3 = [v3 integerForKey:v7];
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    sub_100202D2C((uint64_t)v9);
  }
  return a3;
}

id sub_10022011C(uint64_t a1)
{
  id v2 = [self sharedInstance];
  id v3 = [v2 activeConversationForCall:a1];

  return v3;
}

uint64_t sub_100220218()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100220288()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t sub_1002202F4()
{
  return *(void *)(v0 + OBJC_IVAR___CSDCallCenterObserver_triggers);
}

uint64_t sub_100220358(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDCallCenterObserver_triggers) = a1;
  return sub_100220368();
}

uint64_t sub_100220368()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDCallCenterObserver_notificationCenter);
  [v1 removeObserver:v0];
  if (qword_100583708 != -1) {
LABEL_78:
  }
    swift_once();
  id v2 = off_100585620;
  id v3 = (char *)off_100585620 + 64;
  uint64_t v4 = 1 << *((unsigned char *)off_100585620 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *((void *)off_100585620 + 8);
  uint64_t v7 = OBJC_IVAR___CSDCallCenterObserver_triggers;
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_21:
    if ((*(void *)(v2[7] + 8 * v11) & ~*(void *)(v0 + v7)) == 0) {
      [v1 addObserver:v0 selector:"handleTrigger:" name:*(void *)(v2[6] + 8 * v11) object:0];
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v12 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v12];
  ++v9;
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v9];
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v9];
  if (v13)
  {
LABEL_20:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  int64_t v14 = v12 + 3;
  if (v14 < v8)
  {
    unint64_t v13 = *(void *)&v3[8 * v14];
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_75;
        }
        if (v9 >= v8) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)&v3[8 * v9];
        ++v14;
        if (v13) {
          goto LABEL_20;
        }
      }
    }
    int64_t v9 = v14;
    goto LABEL_20;
  }
LABEL_23:
  swift_release();
  if (qword_100583710 != -1) {
    swift_once();
  }
  char v15 = off_100585628;
  uint64_t v16 = (char *)off_100585628 + 64;
  uint64_t v17 = 1 << *((unsigned char *)off_100585628 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *((void *)off_100585628 + 8);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  while (2)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v21 << 6);
LABEL_44:
      if ((*(void *)(v15[7] + 8 * v23) & ~*(void *)(v0 + v7)) == 0) {
        [v1 addObserver:v0 selector:"handleChannelTrigger:" name:*(void *)(v15[6] + 8 * v23) object:0];
      }
      continue;
    }
    break;
  }
  int64_t v24 = v21 + 1;
  if (__OFADD__(v21, 1)) {
    goto LABEL_73;
  }
  if (v24 < v20)
  {
    unint64_t v25 = *(void *)&v16[8 * v24];
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_46;
      }
      unint64_t v25 = *(void *)&v16[8 * v21];
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_46;
        }
        unint64_t v25 = *(void *)&v16[8 * v21];
        if (!v25)
        {
          int64_t v26 = v24 + 3;
          if (v26 >= v20) {
            goto LABEL_46;
          }
          unint64_t v25 = *(void *)&v16[8 * v26];
          if (!v25)
          {
            while (1)
            {
              int64_t v21 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_76;
              }
              if (v21 >= v20) {
                goto LABEL_46;
              }
              unint64_t v25 = *(void *)&v16[8 * v21];
              ++v26;
              if (v25) {
                goto LABEL_43;
              }
            }
          }
          int64_t v21 = v26;
        }
      }
    }
LABEL_43:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
    goto LABEL_44;
  }
LABEL_46:
  swift_release();
  if (qword_100583718 != -1) {
    swift_once();
  }
  char v27 = off_100585630;
  uint64_t v28 = (char *)off_100585630 + 64;
  uint64_t v29 = 1 << *((unsigned char *)off_100585630 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & *((void *)off_100585630 + 8);
  int64_t v32 = (unint64_t)(v29 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v33 = 0;
  while (2)
  {
    if (v31)
    {
      unint64_t v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v35 = v34 | (v33 << 6);
LABEL_67:
      if ((*(void *)(v27[7] + 8 * v35) & ~*(void *)(v0 + v7)) == 0) {
        [v1 addObserver:v0 selector:"handleSharePlayTrigger:" name:*(void *)(v27[6] + 8 * v35) object:0];
      }
      continue;
    }
    break;
  }
  int64_t v36 = v33 + 1;
  if (__OFADD__(v33, 1)) {
    goto LABEL_74;
  }
  if (v36 < v32)
  {
    unint64_t v37 = *(void *)&v28[8 * v36];
    ++v33;
    if (!v37)
    {
      int64_t v33 = v36 + 1;
      if (v36 + 1 >= v32) {
        goto LABEL_69;
      }
      unint64_t v37 = *(void *)&v28[8 * v33];
      if (!v37)
      {
        int64_t v33 = v36 + 2;
        if (v36 + 2 >= v32) {
          goto LABEL_69;
        }
        unint64_t v37 = *(void *)&v28[8 * v33];
        if (!v37)
        {
          int64_t v38 = v36 + 3;
          if (v38 >= v32) {
            goto LABEL_69;
          }
          unint64_t v37 = *(void *)&v28[8 * v38];
          if (!v37)
          {
            while (1)
            {
              int64_t v33 = v38 + 1;
              if (__OFADD__(v38, 1)) {
                goto LABEL_77;
              }
              if (v33 >= v32) {
                goto LABEL_69;
              }
              unint64_t v37 = *(void *)&v28[8 * v33];
              ++v38;
              if (v37) {
                goto LABEL_66;
              }
            }
          }
          int64_t v33 = v38;
        }
      }
    }
LABEL_66:
    unint64_t v31 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v33 << 6);
    goto LABEL_67;
  }
LABEL_69:

  return swift_release();
}

uint64_t sub_1002208C8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  sub_1002084D8(v1);
  return v1;
}

uint64_t sub_1002209B0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  *id v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

uint64_t sub_100220A14()
{
  return (*(uint64_t (**)(void))(v0 + OBJC_IVAR___CSDCallCenterObserver_callContainerClosure))();
}

id sub_100220A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR___CSDCallCenterObserver_triggers] = 0;
  int64_t v8 = &v3[OBJC_IVAR___CSDCallCenterObserver_callChanged];
  *(void *)int64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  int64_t v9 = &v3[OBJC_IVAR___CSDCallCenterObserver_callContainerClosure];
  *(void *)int64_t v9 = a1;
  *((void *)v9 + 1) = a2;
  *(void *)&v3[OBJC_IVAR___CSDCallCenterObserver_notificationCenter] = a3;
  v11.receiver = v3;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_100220AF4()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v1 = [self defaultCenter];
  id v2 = objc_allocWithZone(ObjectType);
  id v3 = sub_100220A48((uint64_t)sub_100220B9C, 0, (uint64_t)v1);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

id sub_100220B9C()
{
  id v0 = [self sharedInstance];

  return v0;
}

void *sub_100220C00()
{
  unint64_t result = (void *)sub_100220C20();
  off_100585620 = result;
  return result;
}

uint64_t sub_100220C20()
{
  sub_1001F081C(&qword_100585698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1004905E0;
  id v53 = (void *)TUCallCenterCallStatusChangedNotification;
  *(void *)(inited + 32) = TUCallCenterCallStatusChangedNotification;
  *(void *)(inited + 40) = 1;
  uint64_t v52 = (void *)TUCallCenterVideoCallStatusChangedNotification;
  *(void *)(inited + 48) = TUCallCenterVideoCallStatusChangedNotification;
  *(void *)(inited + 56) = 1;
  int v51 = (void *)TUCallCenterCallStartedConnectingNotification;
  *(void *)(inited + 64) = TUCallCenterCallStartedConnectingNotification;
  *(void *)(inited + 72) = 2;
  uint64_t v50 = (void *)TUCallCenterCallConnectedNotification;
  *(void *)(inited + 80) = TUCallCenterCallConnectedNotification;
  *(void *)(inited + 88) = 4;
  uint64_t v49 = (void *)TUCallIsUsingBasebandChangedNotification;
  *(void *)(inited + 96) = TUCallIsUsingBasebandChangedNotification;
  *(void *)(inited + 104) = 8;
  uint64_t v48 = (void *)TUCallCenterCallInvitationSentNotification;
  *(void *)(inited + 112) = TUCallCenterCallInvitationSentNotification;
  *(void *)(inited + 120) = 16;
  uint64_t v47 = (void *)TUCallCenterVideoCallInvitationSentNotification;
  *(void *)(inited + 128) = TUCallCenterVideoCallInvitationSentNotification;
  *(void *)(inited + 136) = 16;
  uint64_t v46 = (void *)TUCallCenterCallContinuityStateChangedNotification;
  *(void *)(inited + 144) = TUCallCenterCallContinuityStateChangedNotification;
  *(void *)(inited + 152) = 32;
  *(void *)(inited + 160) = @"CSDCallHasStartedOutgoingChangedNotification";
  *(void *)(inited + 168) = 64;
  int64_t v45 = (void *)TUCallCenterCallWantsHoldMusicChangedNotification;
  *(void *)(inited + 176) = TUCallCenterCallWantsHoldMusicChangedNotification;
  *(void *)(inited + 184) = 128;
  uint64_t v44 = (void *)TUCallShouldSuppressRingingChangedNotification;
  *(void *)(inited + 192) = TUCallShouldSuppressRingingChangedNotification;
  *(void *)(inited + 200) = 256;
  int v43 = (void *)TUCallNeedsManualInCallSoundsChangedNotification;
  *(void *)(inited + 208) = TUCallNeedsManualInCallSoundsChangedNotification;
  *(void *)(inited + 216) = 512;
  unint64_t v42 = (void *)TUCallAudioPropertiesChangedNotification;
  *(void *)(inited + 224) = TUCallAudioPropertiesChangedNotification;
  *(void *)(inited + 232) = 1024;
  *(void *)(inited + 240) = @"CSDCallHasAudioInterruptionChangedNotification";
  *(void *)(inited + 248) = 2048;
  *(void *)(inited + 256) = @"CSDCallRemoteParticipantJoinedNotification";
  *(void *)(inited + 264) = 4096;
  *(void *)(inited + 272) = @"CSDCallRemoteParticipantLeftNotification";
  *(void *)(inited + 280) = 0x2000;
  int64_t v41 = (void *)TUCallMixesVoiceWithMediaChangedNotification;
  *(void *)(inited + 288) = TUCallMixesVoiceWithMediaChangedNotification;
  *(void *)(inited + 296) = 0x4000;
  unint64_t v40 = (void *)TUCallBluetoothAudioFormatChangedNotification;
  *(void *)(inited + 304) = TUCallBluetoothAudioFormatChangedNotification;
  *(void *)(inited + 312) = 0x8000;
  int64_t v39 = (void *)TUCallIsUplinkMutedChangedNotification;
  *(void *)(inited + 320) = TUCallIsUplinkMutedChangedNotification;
  *(void *)(inited + 328) = 0x10000;
  int64_t v38 = (void *)TUCallIsSharingScreenChangedNotification;
  *(void *)(inited + 336) = TUCallIsSharingScreenChangedNotification;
  *(void *)(inited + 344) = 0x40000;
  id v1 = (void *)TUCallScreenShareAttributesChangedNotification;
  *(void *)(inited + 352) = TUCallScreenShareAttributesChangedNotification;
  *(void *)(inited + 360) = 0x2000000;
  id v2 = (void *)TUCallCenterPendingMemberAddedNotification;
  *(void *)(inited + 368) = TUCallCenterPendingMemberAddedNotification;
  *(void *)(inited + 376) = 0x80000;
  id v3 = (void *)TUCallCenterHaveBeenLetInNotification;
  *(void *)(inited + 384) = TUCallCenterHaveBeenLetInNotification;
  *(void *)(inited + 392) = 0x100000;
  *(void *)(inited + 400) = @"CSDMediaPlaybackOnExternalDeviceChangedNotification";
  *(void *)(inited + 408) = 0x800000;
  *(void *)(inited + 416) = @"CSDCallTransmissionStateChangedNotification";
  *(void *)(inited + 424) = 0x1000000;
  uint64_t v4 = (void *)TUCallCenterIsScreeningChangedNotification;
  *(void *)(inited + 432) = TUCallCenterIsScreeningChangedNotification;
  *(void *)(inited + 440) = 0x4000000;
  uint64_t v5 = (void *)TUCallScreeningDidFinishAnnouncementNotification;
  *(void *)(inited + 448) = TUCallScreeningDidFinishAnnouncementNotification;
  *(void *)(inited + 456) = 0x8000000;
  *(void *)(inited + 464) = @"CSDCallPrefersToPlayDuringWombatChangedNotification";
  *(void *)(inited + 472) = 0x10000000;
  *(void *)(inited + 480) = @"CSDCallInjectingAudioChangedNotification";
  *(void *)(inited + 488) = 0xFFFFFFFF80000000;
  type metadata accessor for Name(0);
  type metadata accessor for Triggers(0);
  sub_1002225E0((unint64_t *)&unk_1005856A0, type metadata accessor for Name);
  id v6 = v53;
  id v7 = v52;
  id v8 = v51;
  id v9 = v50;
  id v10 = v49;
  id v11 = v48;
  id v12 = v47;
  id v13 = v46;
  int64_t v14 = @"CSDCallHasStartedOutgoingChangedNotification";
  id v15 = v45;
  id v16 = v44;
  id v17 = v43;
  id v18 = v42;
  unint64_t v19 = @"CSDCallHasAudioInterruptionChangedNotification";
  int64_t v20 = @"CSDCallRemoteParticipantJoinedNotification";
  int64_t v21 = @"CSDCallRemoteParticipantLeftNotification";
  id v22 = v41;
  id v23 = v40;
  id v24 = v39;
  id v25 = v38;
  id v26 = v1;
  id v27 = v2;
  id v28 = v3;
  uint64_t v29 = @"CSDMediaPlaybackOnExternalDeviceChangedNotification";
  uint64_t v30 = @"CSDCallTransmissionStateChangedNotification";
  id v31 = v4;
  id v32 = v5;
  int64_t v33 = @"CSDCallPrefersToPlayDuringWombatChangedNotification";
  unint64_t v34 = @"CSDCallInjectingAudioChangedNotification";
  uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
  id v36 = TUCallRecordingStateChangedNotification;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100281720();

  swift_bridgeObjectRelease();
  return v35;
}

void *sub_100221084(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v6 = result;
    if ([result respondsToSelector:"callCenterObserver:callChanged:"])
    {
      [v6 callCenterObserver:v2 callChanged:a1];
    }
    else if ([v6 respondsToSelector:"callsChangedForCallCenterObserver:"])
    {
      [v6 callsChangedForCallCenterObserver:v2];
    }
    unint64_t result = (void *)swift_unknownObjectRelease();
  }
  id v7 = *(void (**)(uint64_t, uint64_t))(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  if (v7)
  {
    swift_retain();
    v7(a1, a2);
    return (void *)sub_100208490((uint64_t)v7);
  }
  return result;
}

void *sub_1002211B0()
{
  sub_1001F081C(&qword_100585698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  id v1 = (void *)TUBargeCallStatusChangedNotification;
  *(void *)(inited + 32) = TUBargeCallStatusChangedNotification;
  *(void *)(inited + 40) = 1;
  type metadata accessor for Name(0);
  type metadata accessor for Triggers(0);
  sub_1002225E0((unint64_t *)&unk_1005856A0, type metadata accessor for Name);
  id v2 = v1;
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  off_100585628 = result;
  return result;
}

void sub_10022128C(uint64_t a1, void *a2, uint64_t *a3)
{
  type metadata accessor for Notification();
  sub_1001F6398();
  __chkstk_darwin(v5);
  Notification.object.getter();
  if (!v25)
  {
    sub_100202D2C((uint64_t)v24);
    goto LABEL_8;
  }
  sub_1001F6204(0, (unint64_t *)&qword_10058A480);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    id v11 = (__n128 *)swift_allocObject();
    uint64_t v12 = sub_1002226A8(v11, (__n128)xmmword_10048F550);
    v13(v12);
    uint64_t v14 = String.init<A>(reflecting:)();
    unint64_t v16 = v15;
    v11[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v11[4].n128_u64[0] = sub_1001F3B08();
    v11[2].n128_u64[0] = v14;
    v11[2].n128_u64[1] = v16;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_11;
  }
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v6 = *a3;
  id v7 = (void *)Notification.name.getter();
  uint64_t v8 = sub_100223230((uint64_t)v7, v6);
  char v10 = v9;

  if ((v10 & 1) == 0)
  {
    sub_100221084((uint64_t)v23, v8);

    return;
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  id v17 = (__n128 *)swift_allocObject();
  uint64_t v18 = sub_1002226A8(v17, (__n128)xmmword_10048F550);
  v19(v18);
  uint64_t v20 = String.init<A>(reflecting:)();
  unint64_t v22 = v21;
  v17[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v17[4].n128_u64[0] = sub_1001F3B08();
  v17[2].n128_u64[0] = v20;
  v17[2].n128_u64[1] = v22;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

LABEL_11:
  swift_bridgeObjectRelease();
}

uint64_t sub_100221594(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  id v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a1;
  sub_10022128C((uint64_t)v13, a4, a5);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v8);
}

void *sub_100221674()
{
  sub_1001F081C(&qword_100585698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048FB00;
  *(void *)(inited + 32) = @"CSDSharePlayMediaDidHandoffNotification";
  *(void *)(inited + 40) = 0x200000;
  *(void *)(inited + 48) = @"CSDSharePlayRemoteActivityDidChangeNotification";
  *(void *)(inited + 56) = 0x400000;
  type metadata accessor for Name(0);
  type metadata accessor for Triggers(0);
  sub_1002225E0((unint64_t *)&unk_1005856A0, type metadata accessor for Name);
  id v1 = @"CSDSharePlayMediaDidHandoffNotification";
  id v2 = @"CSDSharePlayRemoteActivityDidChangeNotification";
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  off_100585630 = result;
  return result;
}

uint64_t sub_100221768(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v41 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v41);
  uint64_t v12 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v14 = (char *)&v36 - v13;
  Notification.object.getter();
  if (v48)
  {
    sub_1001F6204(0, &qword_100585690);
    if (swift_dynamicCast())
    {
      id v39 = v51;
      id v15 = [v51 groupUUID];
      uint64_t v38 = v2;
      id v16 = v15;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v17 = [self sharedInstance];
      id v36 = [v17 queue];

      uint64_t v18 = *(void (**)(char *, char *))(v9 + 16);
      unint64_t v19 = v14;
      unint64_t v37 = v14;
      uint64_t v20 = v41;
      v18(v12, v19);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
      unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      unint64_t v22 = (v10 + *(unsigned __int8 *)(v6 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v23 = swift_allocObject();
      id v24 = v40;
      *(void *)(v23 + 16) = v40;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v23 + v21, v12, v20);
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, v8, v5);
      uint64_t v49 = sub_1002224F8;
      uint64_t v50 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1002C2C88;
      uint64_t v48 = &unk_10050DB40;
      uint64_t v25 = _Block_copy(aBlock);
      id v26 = v24;
      id v27 = v42;
      static DispatchQoS.unspecified.getter();
      int v51 = _swiftEmptyArrayStorage;
      sub_1002225E0((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      id v28 = v44;
      uint64_t v29 = v38;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v30 = v36;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v29);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v45);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v20);
      return swift_release();
    }
  }
  else
  {
    sub_100202D2C((uint64_t)aBlock);
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_10048F550;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  uint64_t v33 = String.init<A>(reflecting:)();
  uint64_t v35 = v34;
  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = sub_1001F3B08();
  *(void *)(v32 + 32) = v33;
  *(void *)(v32 + 40) = v35;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

void sub_100221D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Notification();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(a1 + OBJC_IVAR___CSDCallCenterObserver_callContainerClosure))(v10);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 callsWithGroupUUID:isa];

  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_17;
  }
LABEL_3:
  sub_1002DE19C(0, (v16 & 0xC000000000000001) == 0, v16);
  if ((v16 & 0xC000000000000001) != 0) {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v17 = *(id *)(v16 + 32);
  }
  id v38 = v17;
  swift_bridgeObjectRelease();
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  if (!v18)
  {

LABEL_18:
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_10048F550;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_1001F3B08();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_21;
  }
  uint64_t v19 = v18;
  if (qword_100583718 != -1) {
    swift_once();
  }
  uint64_t v20 = (uint64_t)off_100585630;
  uint64_t v21 = v37;
  unint64_t v22 = (void *)Notification.name.getter();
  uint64_t v23 = sub_100223230((uint64_t)v22, v20);
  LOBYTE(v20) = v24;

  if (v20)
  {
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_10048F550;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v12, v21, v9);
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v29 = v28;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_1001F3B08();
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v29;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

LABEL_21:
    swift_bridgeObjectRelease();
    return;
  }
  sub_100221084(v19, v23);
  id v25 = v38;
}

uint64_t type metadata accessor for CallCenterObserver()
{
  return self;
}

uint64_t sub_1002223F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v5 + v7 + v13) & ~v13;
  uint64_t v15 = v14 + *(void *)(v12 + 64);
  uint64_t v16 = v4 | v13 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v14, v8);

  return _swift_deallocObject(v0, v15, v16);
}

void sub_1002224F8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Notification() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_100221D9C(v5, v0 + v2, v6);
}

uint64_t sub_1002225C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002225D8()
{
  return swift_release();
}

uint64_t sub_1002225E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100222628()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100222660()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100222678(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002226A8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return v2;
}

void sub_1002226C8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v51;
    uint64_t v49 = v52;
    uint64_t v2 = v53;
    int64_t v3 = v54;
    unint64_t v4 = v55;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v49 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v48 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v47 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_52;
      }
      sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v11 = v56;
      swift_unknownObjectRelease();
      int64_t v10 = v3;
      uint64_t v8 = v4;
      if (!v56) {
        goto LABEL_52;
      }
      goto LABEL_31;
    }
    if (!v4) {
      break;
    }
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v10 = v3;
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_52;
    }
LABEL_31:
    unint64_t v50 = v8;
    id v15 = objc_msgSend(v11, "handles", v46);
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v17 = v16 & 0xC000000000000001;
    if ((v16 & 0xC000000000000001) != 0)
    {
      uint64_t v18 = v1;
      uint64_t v19 = __CocoaSet.startIndex.getter();
      uint64_t v21 = v20;
      uint64_t v22 = __CocoaSet.endIndex.getter();
      int64_t v23 = v10;
      uint64_t v25 = v24;
      char v26 = static __CocoaSet.Index.== infix(_:_:)();
      uint64_t v27 = v22;
      uint64_t v1 = v18;
      uint64_t v28 = v25;
      int64_t v10 = v23;
      sub_10023561C(v27, v28, 1);
      unint64_t v17 = v16 & 0xC000000000000001;
      if (v26) {
        goto LABEL_51;
      }
LABEL_38:
      int64_t v46 = v10;
      char v33 = v17 != 0;
      sub_100247358(v19, v21, v17 != 0, v16);
      uint64_t v35 = v34;
      sub_10023561C(v19, v21, v33);
      swift_bridgeObjectRelease();
      id v36 = [v35 value];

      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      unint64_t v40 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A47C8();
        unint64_t v40 = v44;
      }
      unint64_t v41 = v40[2];
      int64_t v3 = v46;
      if (v41 >= v40[3] >> 1)
      {
        sub_1003A47C8();
        unint64_t v40 = v45;
      }
      v40[2] = v41 + 1;
      uint64_t v47 = v40;
      unint64_t v42 = &v40[2 * v41];
      v42[4] = v37;
      v42[5] = v39;
      unint64_t v4 = v50;
    }
    else
    {
      char v29 = *(unsigned char *)(v16 + 32);
      uint64_t v19 = 1 << v29;
      unint64_t v30 = *(void *)(v16 + 56);
      if (v30)
      {
        uint64_t v31 = 0;
      }
      else
      {
        if ((v29 & 0x3Fu) < 7) {
          goto LABEL_50;
        }
        unint64_t v30 = *(void *)(v16 + 64);
        if (!v30)
        {
          uint64_t v43 = 9;
          while (v43 - 7 < (unint64_t)(v19 + 63) >> 6)
          {
            unint64_t v30 = *(void *)(v16 + 8 * v43++);
            if (v30)
            {
              uint64_t v31 = v43 - 8;
              goto LABEL_36;
            }
          }
LABEL_50:
          uint64_t v21 = *(unsigned int *)(v16 + 36);
          goto LABEL_51;
        }
        uint64_t v31 = 1;
      }
LABEL_36:
      unint64_t v32 = __clz(__rbit64(v30)) + (v31 << 6);
      uint64_t v21 = *(unsigned int *)(v16 + 36);
      if (v32 != v19)
      {
        uint64_t v19 = v32;
        goto LABEL_38;
      }
LABEL_51:
      sub_10023561C(v19, v21, v17 != 0);

      swift_bridgeObjectRelease();
      int64_t v3 = v10;
      unint64_t v4 = v50;
    }
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v48) {
      goto LABEL_52;
    }
    unint64_t v13 = *(void *)(v49 + 8 * v12);
    int64_t v10 = v3 + 1;
    if (!v13)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v48) {
        goto LABEL_52;
      }
      unint64_t v13 = *(void *)(v49 + 8 * v10);
      if (!v13)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v48) {
          goto LABEL_52;
        }
        unint64_t v13 = *(void *)(v49 + 8 * v10);
        if (!v13)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v48) {
            goto LABEL_52;
          }
          unint64_t v13 = *(void *)(v49 + 8 * v10);
          if (!v13)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v48) {
              goto LABEL_52;
            }
            unint64_t v13 = *(void *)(v49 + 8 * v10);
            if (!v13)
            {
              int64_t v14 = v3 + 6;
              while (v14 < v48)
              {
                unint64_t v13 = *(void *)(v49 + 8 * v14++);
                if (v13)
                {
                  int64_t v10 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_52:
              sub_100206FA0();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void sub_100222C2C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585908);
    sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v26 = v28;
    uint64_t v3 = v29;
    int64_t v2 = v30;
    unint64_t v4 = v31;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v2 = 0;
  }
  int64_t v25 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v2 << 6);
      int64_t v11 = v2;
      goto LABEL_29;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_36;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    int64_t v11 = v2 + 1;
    if (!v14)
    {
      int64_t v11 = v2 + 2;
      if (v2 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v11);
      if (!v14)
      {
        int64_t v11 = v2 + 3;
        if (v2 + 3 >= v25) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v11);
        if (!v14)
        {
          int64_t v11 = v2 + 4;
          if (v2 + 4 >= v25) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v26 + 8 * v11);
          if (!v14)
          {
            int64_t v11 = v2 + 5;
            if (v2 + 5 >= v25) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v26 + 8 * v11);
            if (!v14)
            {
              int64_t v15 = v2 + 6;
              while (v15 < v25)
              {
                unint64_t v14 = *(void *)(v26 + 8 * v15++);
                if (v14)
                {
                  int64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              sub_100206FA0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    while (1)
    {
      id v16 = [v12 handle];
      id v17 = [v16 value];

      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A47C8();
        uint64_t v8 = v23;
      }
      unint64_t v21 = v8[2];
      if (v21 >= v8[3] >> 1)
      {
        sub_1003A47C8();
        uint64_t v8 = v24;
      }
      v8[2] = v21 + 1;
      uint64_t v22 = &v8[2 * v21];
      v22[4] = v18;
      v22[5] = v20;
      int64_t v2 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1001F6204(0, &qword_100585908);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v32;
        swift_unknownObjectRelease();
        int64_t v11 = v2;
        uint64_t v9 = v4;
        if (v32) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  __break(1u);
}

unint64_t sub_100222FC4(Swift::UInt32 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = sub_10023359C(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t sub_100223020(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_100233714(a1), (v4 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 24 * v3);
  }
  else {
    return 0;
  }
}

uint64_t sub_10022307C(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (sub_100233758(), (v1 & 1) != 0))
  {
    sub_100235E04();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_100235C78();
  }
  return sub_100235AE0();
}

uint64_t sub_1002230E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1002337A4(a1), (v2 & 1) != 0)) {
    return swift_unknownObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10022312C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1002337A4(a1), (v2 & 1) != 0))
  {
    type metadata accessor for UUID();
    sub_10020233C();
    sub_100235D5C();
    v3();
    sub_100235C50();
  }
  else
  {
    type metadata accessor for UUID();
    uint64_t v4 = sub_1001F2548();
  }

  return sub_1001F0530(v4, v5, v6, v7);
}

uint64_t sub_1002231D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 1;
  }
  unint64_t v4 = sub_100233664();
  if ((v5 & 1) == 0) {
    return 1;
  }
  uint64_t v6 = *(void *)(a3 + 56) + 16 * v4;
  uint64_t v7 = *(void **)v6;
  id v8 = *(id *)(v6 + 8);
  id v9 = v7;
  return (uint64_t)v7;
}

uint64_t sub_100223230(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_10023387C(a1), (v4 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 8 * v3);
  }
  else {
    return 0;
  }
}

uint64_t sub_100223278(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_1002337A4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

double sub_1002232D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1002336D0(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_100201880(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void *sub_100223334(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = sub_100233910();
  if ((v3 & 1) == 0) {
    return 0;
  }
  char v4 = *(void **)(*(void *)(a1 + 56) + 8 * v2);
  id v5 = v4;
  return v4;
}

uint64_t sub_10022337C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v3 & 1) != 0)) {
    sub_100235DE4();
  }
  else {
    sub_100235C78();
  }
  return sub_100235AE0();
}

uint64_t sub_1002233BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10022377C(a1, a2, a3, (void (*)(void))&type metadata accessor for URL);
}

uint64_t sub_1002233D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v3 & 1) != 0))
  {
    type metadata accessor for PendingMembershipInfo();
    sub_10020233C();
    sub_1002355C4();
    uint64_t v4 = sub_100235B30();
  }
  else
  {
    type metadata accessor for PendingMembershipInfo();
    uint64_t v4 = sub_1001F2548();
  }

  return sub_1001F0530(v4, v5, v6, v7);
}

uint64_t sub_10022347C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1002337A4(a1), (v2 & 1) != 0))
  {
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_10020233C();
    sub_1002355C4();
    uint64_t v3 = sub_100235B30();
  }
  else
  {
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    uint64_t v3 = sub_1001F2548();
  }

  return sub_1001F0530(v3, v4, v5, v6);
}

uint64_t sub_100223520(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100233714(a1), (v3 & 1) != 0))
  {
    sub_100235E04();
    id v4 = v2;
  }
  else
  {
    sub_100235C78();
  }
  return sub_100235AE0();
}

uint64_t sub_10022358C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (sub_100233664(), (v3 & 1) != 0))
  {
    uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587050);
    sub_10020233C();
    sub_1002357B0();
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    uint64_t v8 = v4;
  }
  else
  {
    sub_1001F081C((uint64_t *)&unk_100587050);
    uint64_t v5 = sub_1001F2548();
  }

  return sub_1001F0530(v5, v6, v7, v8);
}

uint64_t sub_100223640(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100233974(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100223688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v3 & 1) != 0)) {
    return swift_unknownObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1002236D8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_1002337A4(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + 16 * v3);
  }
  else {
    return 2;
  }
}

uint64_t sub_100223724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_100233664(), (v5 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a3 + 56) + v4);
  }
  else {
    return 2;
  }
}

uint64_t sub_100223764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10022377C(a1, a2, a3, (void (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10022377C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v5 & 1) != 0))
  {
    a4(0);
    sub_10020233C();
    sub_100235D5C();
    v6();
    uint64_t v7 = sub_100235B30();
  }
  else
  {
    a4(0);
    uint64_t v7 = sub_1001F2548();
  }

  return sub_1001F0530(v7, v8, v9, v10);
}

uint64_t sub_100223830(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1002337A4(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100223874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void *sub_1002238B8(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v6 = sub_100233A08((uint64_t)a1);
      if (v7)
      {
        char v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  char v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_100223990(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100233A08(a1), (v2 & 1) != 0)) {
    sub_100235DE4();
  }
  else {
    sub_100235C78();
  }
  return sub_100235AE0();
}

void *sub_1002239D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_100233664();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

void *sub_100223A18(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_1002337A4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  char v5 = *(void **)(*(void *)(a2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

uint64_t sub_100223A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100233664(), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100223AA4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v21 = v5;
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v10 = v6;
      int64_t v11 = v8;
      id v12 = [v8 request];
      uint64_t v13 = a3;
      id v14 = [v12 identifier];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      a3 = v13;
      BOOL v18 = v15 == a2 && v17 == v13;
      if (v18)
      {
        swift_bridgeObjectRelease();

        char v19 = 1;
        goto LABEL_21;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        ++v7;
        uint64_t v6 = v10;
        BOOL v18 = v9 == v10;
        unint64_t v5 = v21;
        if (!v18) {
          continue;
        }
      }
      goto LABEL_21;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  char v19 = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

unint64_t sub_100223C60(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050AA38, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_100223CAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BadgeCountCategory.missedFaceTimeGroupCalls(_:);
  uint64_t v3 = type metadata accessor for BadgeCountCategory();
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
  sub_100235C50();

  return sub_1001F0530(v5, v6, v7, v8);
}

id sub_100223D30()
{
  sub_1001F6204(0, &qword_1005858C8);
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v1 = [v0 pairedDevice];

  if (!v1) {
    return 0;
  }
  id v2 = [v1 canReceiveRelayedGFTCalls];

  return v2;
}

uint64_t sub_100223DC4(void *a1)
{
  id v2 = [a1 displayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100235DC4();

  return v1;
}

uint64_t sub_100223E14()
{
  sub_10013770C();
  id v2 = [objc_allocWithZone((Class)TUContactsDataProviderFetchRequest) initWithHandle:v1];
  id v3 = [v0 executeFetchRequest:v2];

  id v4 = [v3 localizedName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_100223EB8(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10013770C();
  NSString v7 = [v6 value];
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  unsigned int v8 = [v7 destinationIdIsTemporary];

  if (v8)
  {
    id v9 = [a3 remoteMembers];
    sub_100235B44();
    sub_100235CEC((unint64_t *)&qword_1005858C0);
    uint64_t v10 = sub_100235CB8();

    sub_1002240C8(v10, v4);
    id v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v13 = sub_100235438(v12, (SEL *)&selRef_nickname);
      if (v14)
      {
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        sub_100235D18((uint64_t)"MAYBE_NICKNAME_%@");
        sub_100235D44();
        sub_1001F081C(&qword_100584B20);
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_10048F550;
        *(void *)(v17 + 56) = &type metadata for String;
        *(void *)(v17 + 64) = sub_1001F3B08();
        *(void *)(v17 + 32) = v15;
        *(void *)(v17 + 40) = v16;
        sub_100235AE0();
        uint64_t v18 = String.init(format:_:)();

        swift_bridgeObjectRelease();
        return v18;
      }
    }
  }
  id v20 = [objc_allocWithZone((Class)TUContactsDataProviderFetchRequest) initWithHandle:v4];
  id v21 = [v3 executeFetchRequest:v20];

  id v22 = [v21 localizedName];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v23;
}

void sub_1002240C8(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v23;
    uint64_t v21 = v24;
    uint64_t v3 = v25;
    int64_t v4 = v26;
    unint64_t v5 = v27;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  uint64_t v19 = v3;
  int64_t v20 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v20)
    {
      unint64_t v15 = *(void *)(v21 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          do
          {
            id v17 = objc_msgSend(v13, "handle", v19);
            unsigned int v18 = [v17 isEquivalentToHandle:a2];

            if (v18) {
              break;
            }

            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v13 = v28;
            swift_unknownObjectRelease();
            int64_t v12 = v4;
            uint64_t v10 = v5;
          }
          while (v28);
        }
        goto LABEL_33;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v20)
      {
        unint64_t v15 = *(void *)(v21 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v20)
          {
            unint64_t v15 = *(void *)(v21 + 8 * v16++);
            if (v15)
            {
              int64_t v12 = v16 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void sub_1002243F0(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v22;
    uint64_t v20 = v23;
    uint64_t v3 = v24;
    int64_t v4 = v25;
    unint64_t v5 = v26;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  int64_t v19 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v19)
    {
      unint64_t v15 = *(void *)(v20 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v19) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v19) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v19) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          do
          {
            id v17 = *(void **)&a2[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationServerBag];
            swift_unknownObjectRetain();
            BOOL v18 = sub_10022DE60(v13, v17);
            swift_unknownObjectRelease();
            if (v18) {
              break;
            }

            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v13 = v27;
            swift_unknownObjectRelease();
            int64_t v12 = v4;
            uint64_t v10 = v5;
          }
          while (v27);
        }
        goto LABEL_33;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v19)
      {
        unint64_t v15 = *(void *)(v20 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v19)
          {
            unint64_t v15 = *(void *)(v20 + 8 * v16++);
            if (v15)
            {
              int64_t v12 = v16 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void sub_100224714(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v20;
    uint64_t v18 = v21;
    uint64_t v3 = v22;
    int64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v9)
    {
      unint64_t v15 = *(void *)(v18 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_34;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v9) {
        goto LABEL_34;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v9) {
        goto LABEL_34;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          do
          {
            unint64_t v17 = (unint64_t)[v13 avcSessionToken];
            if ((v17 & 0x8000000000000000) == 0
              && v17 == *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_streamToken])
            {
              break;
            }

            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_1001F6204(0, &qword_100585860);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v13 = v25;
            swift_unknownObjectRelease();
            int64_t v12 = v4;
            uint64_t v10 = v5;
          }
          while (v25);
        }
        goto LABEL_34;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v9)
      {
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v9)
          {
            unint64_t v15 = *(void *)(v18 + 8 * v16++);
            if (v15)
            {
              int64_t v12 = v16 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_34;
        }
        goto LABEL_28;
      }
    }
LABEL_34:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void sub_100224A14(uint64_t a1, void *a2)
{
  id v55 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  int64_t v57 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1001F081C((uint64_t *)&unk_1005888C0);
  __chkstk_darwin(v53);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v52 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v59 = (uint64_t)v41 - v11;
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)v41 - v12;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    a1 = v61;
    uint64_t v50 = v62;
    uint64_t v13 = v63;
    int64_t v14 = v64;
    unint64_t v15 = v65;
  }
  else
  {
    uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v50 = a1 + 56;
    uint64_t v18 = ~v16;
    uint64_t v19 = -v16;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v15 = v20 & v17;
    swift_bridgeObjectRetain();
    uint64_t v13 = v18;
    int64_t v14 = 0;
  }
  uint64_t v47 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v41[1] = v13;
  int64_t v48 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v57 + 32);
  uint64_t v51 = (void (**)(char *, uint64_t))(v57 + 8);
  int64_t v46 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v54 = a1;
  uint64_t v43 = v6;
  if (a1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v15)
  {
    uint64_t v21 = (v15 - 1) & v15;
    unint64_t v22 = __clz(__rbit64(v15)) | (v14 << 6);
    int64_t v23 = v14;
LABEL_28:
    id v25 = *(id *)(*(void *)(a1 + 48) + 8 * v22);
    while (1)
    {
      uint64_t v29 = (uint64_t)v58;
      if (!v25) {
        goto LABEL_41;
      }
      unint64_t v56 = v21;
      id v30 = [v25 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = 1;
      sub_1001F0530(v29, 0, 1, v3);
      id v32 = [v55 groupUUID];
      int64_t v57 = v23;
      if (v32)
      {
        char v33 = v32;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = 0;
      }
      uint64_t v34 = (uint64_t)v58;
      sub_1001F0530(v59, v31, 1, v3);
      uint64_t v35 = (uint64_t)&v6[*(int *)(v53 + 48)];
      sub_1002357B0();
      sub_1002357B0();
      if (sub_1001F758C((uint64_t)v6, 1, v3) == 1) {
        break;
      }
      sub_1002357B0();
      if (sub_1001F758C(v35, 1, v3) == 1)
      {
        sub_100235804(v59, (uint64_t *)&unk_100585580);
        sub_100235804(v34, (uint64_t *)&unk_100585580);
        (*v51)(v52, v3);
LABEL_37:
        sub_100235804((uint64_t)v6, (uint64_t *)&unk_1005888C0);
        goto LABEL_39;
      }
      uint64_t v42 = v14;
      id v36 = v52;
      uint64_t v37 = v45;
      (*v44)(v45, v35, v3);
      sub_100235394((unint64_t *)&qword_1005858A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v38 = v34;
      uint64_t v39 = *v51;
      unint64_t v40 = v37;
      uint64_t v6 = v43;
      (*v51)(v40, v3);
      sub_100235804(v59, (uint64_t *)&unk_100585580);
      sub_100235804(v38, (uint64_t *)&unk_100585580);
      v39(v36, v3);
      sub_100235804((uint64_t)v6, (uint64_t *)&unk_100585580);
      if (v49) {
        goto LABEL_41;
      }
LABEL_39:

      unint64_t v15 = v56;
      int64_t v14 = v57;
      a1 = v54;
      if ((v54 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_10:
      uint64_t v24 = __CocoaSet.Iterator.next()();
      if (!v24) {
        goto LABEL_41;
      }
      uint64_t v60 = v24;
      sub_1001F6204(0, &qword_100585860);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v25 = v66;
      swift_unknownObjectRelease();
      int64_t v23 = v14;
      uint64_t v21 = v15;
    }
    sub_100235804(v59, (uint64_t *)&unk_100585580);
    sub_100235804(v34, (uint64_t *)&unk_100585580);
    if (sub_1001F758C(v35, 1, v3) == 1)
    {
      uint64_t v42 = v14;
      sub_100235804((uint64_t)v6, (uint64_t *)&unk_100585580);
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  int64_t v26 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v26 < v48)
    {
      unint64_t v27 = *(void *)(v50 + 8 * v26);
      int64_t v23 = v14 + 1;
      if (v27) {
        goto LABEL_27;
      }
      int64_t v23 = v14 + 2;
      if (v14 + 2 < v48)
      {
        unint64_t v27 = *(void *)(v50 + 8 * v23);
        if (v27) {
          goto LABEL_27;
        }
        int64_t v23 = v14 + 3;
        if (v14 + 3 < v48)
        {
          unint64_t v27 = *(void *)(v50 + 8 * v23);
          if (v27) {
            goto LABEL_27;
          }
          int64_t v23 = v14 + 4;
          if (v14 + 4 < v48)
          {
            unint64_t v27 = *(void *)(v50 + 8 * v23);
            if (!v27)
            {
              int64_t v23 = v14 + 5;
              if (v14 + 5 < v48)
              {
                unint64_t v27 = *(void *)(v50 + 8 * v23);
                if (!v27)
                {
                  int64_t v28 = v14 + 6;
                  do
                  {
                    if (v28 >= v48) {
                      goto LABEL_41;
                    }
                    unint64_t v27 = *(void *)(v50 + 8 * v28++);
                  }
                  while (!v27);
                  int64_t v23 = v28 - 1;
                }
                goto LABEL_27;
              }
              goto LABEL_41;
            }
LABEL_27:
            uint64_t v21 = (v27 - 1) & v27;
            unint64_t v22 = __clz(__rbit64(v27)) + (v23 << 6);
            goto LABEL_28;
          }
        }
      }
    }
LABEL_41:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void sub_10022513C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    int64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v17 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v18 + 8 * v13);
      int64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          while (1)
          {
            id v16 = objc_msgSend(v12, "handoffEligibility", v17);
            if (v16) {
              break;
            }

            int64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1001F6204(0, &qword_100585860);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v12 = v24;
              swift_unknownObjectRelease();
              int64_t v11 = v3;
              uint64_t v9 = v4;
              if (v24) {
                continue;
              }
            }
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
      int64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v18 + 8 * v11);
        if (!v14)
        {
          int64_t v15 = v3 + 6;
          while (v15 < v8)
          {
            unint64_t v14 = *(void *)(v18 + 8 * v15++);
            if (v14)
            {
              int64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_34;
        }
        goto LABEL_28;
      }
    }
LABEL_34:
    sub_100206FA0();
    return;
  }
  __break(1u);
}

void sub_100225424(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    int64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      int64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      int64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, "state", v16)) {
              break;
            }

            int64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_1001F6204(0, &qword_100585860);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            int64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      int64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          int64_t v15 = v3 + 6;
          while (v15 < v8)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              int64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_100206FA0();
    return;
  }
  __break(1u);
}

void sub_1002256FC(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
    goto LABEL_24;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 < v22)
    {
      unint64_t v18 = *(void *)(v23 + 8 * v16);
      if (v18)
      {
LABEL_23:
        uint64_t v14 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
LABEL_24:
        id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
        if (v17)
        {
          while (1)
          {
            id v29 = v17;
            char v20 = a1(&v29);
            if (v4) {
              break;
            }
            if (v20) {
              goto LABEL_36;
            }

            int64_t v8 = v16;
            unint64_t v9 = v14;
            if ((v5 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1001F6204(0, &qword_100585860);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v17 = v29;
              swift_unknownObjectRelease();
              int64_t v16 = v8;
              uint64_t v14 = v9;
              if (v17) {
                continue;
              }
            }
            goto LABEL_36;
          }
        }
        goto LABEL_36;
      }
      int64_t v19 = v8 + 2;
      if (v8 + 2 < v22)
      {
        unint64_t v18 = *(void *)(v23 + 8 * v19);
        if (v18) {
          goto LABEL_22;
        }
        int64_t v19 = v8 + 3;
        if (v8 + 3 >= v22) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v23 + 8 * v19);
        if (v18)
        {
LABEL_22:
          int64_t v16 = v19;
          goto LABEL_23;
        }
        int64_t v19 = v8 + 4;
        if (v8 + 4 < v22)
        {
          unint64_t v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v16 = v8 + 5;
          if (v8 + 5 < v22)
          {
            unint64_t v18 = *(void *)(v23 + 8 * v16);
            if (!v18)
            {
              int64_t v21 = v8 + 6;
              while (v21 < v22)
              {
                unint64_t v18 = *(void *)(v23 + 8 * v21++);
                if (v18)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_23;
                }
              }
              goto LABEL_36;
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_36:
    sub_100206FA0();
    return;
  }
  __break(1u);
}

void sub_100225A34(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585908);
    sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v26;
    uint64_t v24 = v27;
    uint64_t v3 = v28;
    int64_t v4 = v29;
    unint64_t v5 = v30;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  int64_t v23 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v23)
    {
      unint64_t v15 = *(void *)(v24 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v23) {
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v23) {
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v23) {
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          while (1)
          {
            id v17 = [v13 avcIdentifier];
            uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v20 = v19;

            if (v18 == *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_requesterID]
              && v20 == *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_requesterID + 8])
            {
              break;
            }
            char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v22) {
              goto LABEL_38;
            }

            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1001F6204(0, &qword_100585908);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v13 = v31;
              swift_unknownObjectRelease();
              int64_t v12 = v4;
              uint64_t v10 = v5;
              if (v31) {
                continue;
              }
            }
            goto LABEL_38;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_38;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v23)
      {
        unint64_t v15 = *(void *)(v24 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v23)
          {
            unint64_t v15 = *(void *)(v24 + 8 * v16++);
            if (v15)
            {
              int64_t v12 = v16 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_28;
      }
    }
LABEL_38:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void *sub_100225DA4(unint64_t a1, char *a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = OBJC_IVAR___CSDMomentsNotification_streamToken;
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      unint64_t v10 = (unint64_t)[v7 videoStreamToken];
      if ((v10 & 0x8000000000000000) == 0 && v10 == *(void *)&a2[v5])
      {

        swift_bridgeObjectRelease();
        return v8;
      }

      ++v6;
      if (v9 == v4) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:

  swift_bridgeObjectRelease();
  return 0;
}

void *sub_100225EE4(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10022600C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_100226014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a2) {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_facetimeIsShowingOnScreen) = a6;
  }
}

void sub_100226028(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_100226030(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6)
{
  id v12 = a1;
  id v13 = a3;
  id v14 = a5;
  sub_100226014((uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
}

void sub_1002260D4(NSURL *a1@<X8>)
{
  URL._bridgeToObjectiveC()(a1);
  id v2 = v1;
  TUOpenURL();
}

void sub_10022611C(NSURL *a1@<X8>)
{
  URL._bridgeToObjectiveC()(a1);
  id v2 = v1;
  TUUnlockAndOpenSensitiveURL();
}

void sub_100226164()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags;
  *(void *)&v1[v2] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_faceTimeNotificationCenter;
  sub_1001F6204(0, (unint64_t *)&unk_100585970);
  *(void *)&v1[v3] = sub_100359A90();
  uint64_t v4 = (id (**)())&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_shouldDelayInviteNotification];
  *uint64_t v4 = sub_100223D30;
  v4[1] = 0;
  v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_facetimeIsShowingOnScreen] = 0;
  uint64_t v5 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL];
  *uint64_t v6 = 0;
  v6[1] = 0;
  v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType] = 0;
  uint64_t v7 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_categories;
  *(void *)&v1[v7] = sub_100228C00();
  id v8 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add];
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v9 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace];
  void *v9 = 0;
  v9[1] = 0;
  uint64_t v10 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
  *uint64_t v10 = 0;
  v10[1] = 0;
  char v11 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_updateBadgeValue];
  *char v11 = 0;
  v11[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_100226314()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v2, v0);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100226510()
{
  id v0 = [self soundWithAlertType:1];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100256300(v1, v2, v0);
  qword_1005856B0 = (uint64_t)v0;
}

uint64_t sub_100226574(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 mergedRemoteMembers];
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = sub_10039E66C(v8);
  swift_bridgeObjectRelease();
  if (v9 <= 1)
  {
    id v10 = [a1 link];

    if (!v10) {
      goto LABEL_17;
    }
  }
  if (([a1 isLocallyCreated] & 1) != 0
    || [a1 state]
    || [a1 letMeInRequestState]
    || ([a1 hasJoined] & 1) != 0)
  {
    goto LABEL_17;
  }
  char v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_invitationResolver);
  id v12 = [a1 localMember];
  if (v12)
  {
    id v13 = v12;
    id v14 = [v12 handle];
  }
  else
  {
    id v14 = 0;
  }
  unsigned int v15 = [v11 shouldShowInvitationUserNotificationForConversation:a1 handle:v14];

  if (!v15) {
    goto LABEL_17;
  }
  id v16 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = (uint64_t *)(v1
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID);
  swift_beginAccess();
  sub_100223278((uint64_t)v6, *v17);
  uint64_t v19 = v18;
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  if (v19
    || ([a1 isOneToOneModeEnabled] & 1) != 0
    || ([a1 isFromStorage] & 1) != 0
    || ![self supportsConversations]
    || ![a1 hostedOnCurrentDevice])
  {
LABEL_17:
    char v23 = 0;
  }
  else
  {
    id v20 = [a1 activeRemoteParticipants];
    sub_1001F6204(0, &qword_100585908);
    sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
    uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100226910(v21);
    char v23 = v22;
    swift_bridgeObjectRelease();
  }
  return v23 & 1;
}

void sub_100226910(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585908);
    sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    int64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    int64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    sub_1001F6204(0, &qword_100585908);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v23;
    swift_unknownObjectRelease();
    if (!v23) {
      goto LABEL_32;
    }
LABEL_31:
    unsigned int v15 = [v11 isLocalAccountHandle];

    if (v15) {
      goto LABEL_32;
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v3 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v16) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v17 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v8 + 2;
      if (v8 + 2 >= v16) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v17 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v8 + 3;
        if (v8 + 3 >= v16) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v17 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v8 + 4;
          if (v8 + 4 >= v16) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v17 + 8 * v3);
          if (!v13)
          {
            int64_t v3 = v8 + 5;
            if (v8 + 5 >= v16) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v17 + 8 * v3);
            if (!v13)
            {
              int64_t v14 = v8 + 6;
              while (v14 < v16)
              {
                unint64_t v13 = *(void *)(v17 + 8 * v14++);
                if (v13)
                {
                  int64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_32:
              sub_100206FA0();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_100226C08(void *a1)
{
  int64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_invitationResolver);
  id v4 = [a1 localMember];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 handle];
  }
  else
  {
    id v6 = 0;
  }
  unsigned int v7 = [v3 shouldShowInvitationRingingUIForConversation:a1 handle:v6];

  if (v7) {
    return 6;
  }
  else {
    return 7;
  }
}

unint64_t sub_100226CA8(void *a1)
{
  id v1 = [a1 pseudonym];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = v3;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_100226D50(void *a1, char a2)
{
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100235BE8();
  if (a2) {
    uint64_t v5 = 0x2D79616C70726163;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = UUID.uuidString.getter();
  unint64_t v9 = v8;
  uint64_t v10 = sub_100235CD4();
  v11(v10);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v7;
  v12._object = v9;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100226E74(void *a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

id sub_100226EC0(uint64_t a1, char a2)
{
  id v3 = [objc_allocWithZone((Class)TUJoinConversationRequest) initWithConversation:a1 originatingUIType:24];
  [v3 setWantsStagingArea:1];
  [v3 setVideoEnabled:a2 & 1];
  return v3;
}

void *sub_100226F30(void *a1)
{
  id v2 = objc_allocWithZone((Class)TUJoinConversationRequest);
  id v3 = a1;
  sub_1002DDF30();
  uint64_t v5 = v4;
  [v4 setWantsStagingArea:1];
  [v5 setVideoEnabled:1];
  id v6 = [self standardInvitationPreferencesForLink];
  sub_1001F6204(0, (unint64_t *)&qword_100585948);
  sub_100210D5C((unint64_t *)&qword_100585950, (unint64_t *)&qword_100585948);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10023519C(v7, v5);
  return v5;
}

uint64_t sub_10022702C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v71 = *(void *)(v3 - 8);
  uint64_t v72 = v3;
  __chkstk_darwin(v3);
  uint64_t v69 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchQoS();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchTimeInterval();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v73 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v58 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unsigned int v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v58 - v16;
  uint64_t v18 = (void (*)(char *, uint64_t))type metadata accessor for DispatchPredicate();
  uint64_t v19 = *((void *)v18 - 1);
  __chkstk_darwin(v18);
  int64_t v21 = (uint64_t *)((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v22 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue];
  *int64_t v21 = v22;
  (*(void (**)(void *, void, void (*)(char *, uint64_t)))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v62 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = *(void (**)(void *, void *))(v19 + 8);
  p_attr = (char **)(v19 + 8);
  v24(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v1;
  uint64_t v26 = v1;
  p_attr = &stru_100562FF8.attr;
  id v27 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = (uint64_t *)&v26[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID];
  swift_beginAccess();
  uint64_t v29 = sub_100223A18((uint64_t)v17, *v28);
  swift_endAccess();
  if (v29)
  {

    uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
    v18(v17, v11);
    if (qword_100583A38 == -1)
    {
LABEL_4:
      uint64_t v30 = type metadata accessor for Logger();
      sub_1001F5F88(v30, (uint64_t)qword_100594CA0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        char v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Updating conversation for pending invite notification", v33, 2u);
        p_attr = &stru_100562FF8.attr;
        swift_slowDealloc();
      }

      id v34 = objc_msgSend(a1, p_attr[182]);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      sub_10027F808((uint64_t)a1, (uint64_t)v15);
      v18(v15, v11);
      swift_endAccess();
      return swift_release();
    }
LABEL_17:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v59 = *(void (**)(char *, uint64_t))(v12 + 8);
  v59(v17, v11);
  uint64_t v35 = *(uint64_t (**)(uint64_t))&v26[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_shouldDelayInviteNotification];
  uint64_t v36 = swift_retain();
  LOBYTE(v35) = v35(v36);
  swift_release();
  if ((v35 & 1) == 0)
  {
    sub_1002279D4(a1, (uint64_t)v26);
    return swift_release();
  }
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v58 = v25;
  uint64_t v37 = type metadata accessor for Logger();
  sub_1001F5F88(v37, (uint64_t)qword_100594CA0);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Delaying invite notification because a paired device is connected", v40, 2u);
    swift_slowDealloc();
  }

  id v41 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  id v42 = a1;
  sub_10027F808((uint64_t)v42, (uint64_t)v15);
  v59(v15, v11);
  swift_endAccess();
  uint64_t v43 = v73;
  static DispatchTime.now()();
  uint64_t result = (uint64_t)[*(id *)&v26[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationServerBag] watchInviteNotificationDelay];
  if ((result & 0x8000000000000000) == 0)
  {
    int64_t v46 = v60;
    uint64_t v45 = v61;
    *uint64_t v60 = result;
    uint64_t v47 = v63;
    (*(void (**)(uint64_t *, void, uint64_t))(v45 + 104))(v46, enum case for DispatchTimeInterval.seconds(_:), v63);
    int64_t v48 = v64;
    + infix(_:_:)();
    (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v46, v47);
    uint64_t v49 = v66;
    uint64_t v65 = *(void *)(v65 + 8);
    ((void (*)(char *, uint64_t))v65)(v43, v66);
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = v26;
    v50[3] = v42;
    uint64_t v51 = v58;
    v50[4] = sub_100235660;
    v50[5] = v51;
    aBlock[4] = sub_1002356B0;
    aBlock[5] = v50;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_10050DCF0;
    uint64_t v52 = _Block_copy(aBlock);
    uint64_t v53 = v26;
    id v54 = v42;
    swift_retain();
    id v55 = v67;
    static DispatchQoS.unspecified.getter();
    uint64_t v74 = _swiftEmptyArrayStorage;
    sub_100235394((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    unint64_t v56 = v69;
    uint64_t v57 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v52);
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v70);
    ((void (*)(char *, uint64_t))v65)(v48, v49);
    return swift_release();
  }
  __break(1u);
  return result;
}

void sub_1002279D4(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)type metadata accessor for URL();
  uint64_t v63 = (void (**)(void, void))*(v4 - 1);
  id v64 = v4;
  __chkstk_darwin(v4);
  id v62 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (void *)sub_100228064(a1);
  uint64_t v11 = sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
  uint64_t v12 = sub_100226D50(a1, 0);
  uint64_t v14 = v13;
  id v15 = v10;
  uint64_t v61 = v11;
  id v16 = sub_100362954(v12, v14, v15, 0);
  uint64_t v17 = sub_100226C08(a1);
  uint64_t v65 = v16;
  [v16 setDestinations:v17];
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1001F5F88(v18, (uint64_t)qword_100594CA0);
  id v19 = v15;
  id v20 = a1;
  id v21 = v19;
  id v22 = v20;
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  BOOL v26 = os_log_type_enabled(v23, v24);
  uint64_t v60 = v6;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v59 = a2;
    uint64_t v28 = v27;
    uint64_t v57 = (void *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v67[0] = v58;
    *(_DWORD *)uint64_t v28 = 136315394;
    id v29 = [v22 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    int v56 = v25;
    uint64_t v31 = v7;
    unint64_t v33 = v32;
    (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v9, v6);
    uint64_t v66 = sub_1002344D8(v30, v33, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2112;
    uint64_t v66 = (uint64_t)v21;
    id v34 = v21;
    uint64_t v7 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v57 = v21;

    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v56, "Posting notification request for conversation UUID %s with content %@", (uint8_t *)v28, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100228554(v65);
  id v35 = sub_100226EC0((uint64_t)v22, 0);
  id v36 = [v35 URL];

  uint64_t v37 = v62;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v38);
  unint64_t v40 = v39;
  ((void (**)(unsigned char *, id))v63)[1](v37, v64);
  [v21 setDefaultActionURL:v40];

  uint64_t v41 = sub_100226D50(v22, 1);
  uint64_t v43 = v42;
  id v64 = v21;
  id v44 = sub_100362954(v41, v43, v64, 0);
  uint64_t v63 = (void (**)(void, void))v44;
  [v44 setDestinations:8];
  sub_100228554(v44);
  id v45 = [v22 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = sub_100226D50(v22, 0);
  uint64_t v48 = v47;
  swift_beginAccess();
  sub_10027F7B4(v46, v48, v9);
  uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  uint64_t v50 = v60;
  v49(v9, v60);
  swift_endAccess();
  id v51 = [v22 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v52 = sub_100226D50(v22, 1);
  uint64_t v54 = v53;
  swift_beginAccess();
  sub_10027F7B4(v52, v54, v9);
  v49(v9, v50);
  swift_endAccess();
}

uint64_t sub_100228064(void *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100274858(0xD000000000000012, (void *)0x800000010047E190);
  uint64_t v42 = v1;
  id v6 = sub_10022C438(a1);
  swift_bridgeObjectRelease();
  id v41 = a1;
  id v7 = [a1 remoteMembers];
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10022CF6C(v8);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v11 = result;
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v45 = v3;
  uint64_t v46 = v6;
  uint64_t v44 = v4;
  uint64_t v40 = 0;
  if (!v11)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease_n();
    int v25 = v46;
    sub_10036EF54((uint64_t)v14, v46);
    uint64_t v26 = (uint64_t)v41;
    id v27 = [v41 activeRemoteParticipants];
    sub_1001F6204(0, &qword_100585908);
    sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
    uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100222C2C(v28);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    sub_1002352C4(v30, v25);
    strcpy((char *)v48, "joinRequestURL");
    HIBYTE(v48[1]) = -18;
    AnyHashable.init<A>(_:)();
    id v31 = sub_100226EC0(v26, 1);
    id v32 = [v31 URL];

    unint64_t v33 = v43;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = URL.absoluteString.getter();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v45);
    v48[3] = &type metadata for String;
    v48[0] = v34;
    v48[1] = v36;
    id v37 = [v25 userInfo];
    uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = v38;
    sub_1002C2704((uint64_t)v48, (uint64_t)v49);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v25 setUserInfo:isa];

    return (uint64_t)v25;
  }
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = _swiftEmptyArrayStorage;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(v10 + 8 * v13 + 32);
      }
      id v16 = v15;
      id v17 = objc_msgSend(v15, "value", v40);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A47C8();
        uint64_t v14 = v23;
      }
      unint64_t v21 = v14[2];
      if (v21 >= v14[3] >> 1)
      {
        sub_1003A47C8();
        uint64_t v14 = v24;
      }
      ++v13;
      v14[2] = v21 + 1;
      id v22 = &v14[2 * v21];
      v22[4] = v18;
      v22[5] = v20;
    }
    while (v11 != v13);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void sub_100228554(void *a1)
{
  if ([*(id *)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_ftNetworkSupport) validNetworkReachable])
  {
    uint64_t v3 = *(void (**)(void *))(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add);
    if (v3)
    {
      swift_retain();
      v3(a1);
      sub_100208490((uint64_t)v3);
    }
  }
  else
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1001F5F88(v4, (uint64_t)qword_100594CA0);
    id v10 = a1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)id v7 = 138412290;
      id v9 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v10;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ignoring adding notification request %@ since valid network is not reachable", v7, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10022879C(uint64_t a1, void *a2, void (*a3)(void *))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - v11;
  id v13 = [a2 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = (uint64_t *)(a1
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID);
  swift_beginAccess();
  id v15 = sub_100223A18((uint64_t)v12, *v14);
  if (v15)
  {
    id v16 = v15;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    a3(v16);
  }
  else
  {
    swift_endAccess();
    id v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v12, v6);
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1001F5F88(v18, (uint64_t)qword_100594CA0);
    id v19 = a2;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v29 = v17;
      char v23 = (uint8_t *)v22;
      uint64_t v31 = swift_slowAlloc();
      v33[0] = v31;
      *(_DWORD *)char v23 = 136315138;
      uint64_t v30 = v23 + 4;
      id v24 = [v19 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v27 = v26;
      v29(v10, v6);
      uint64_t v32 = sub_1002344D8(v25, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No conversation is waiting to post a notification for uuid %s so not posting invite notification", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_100228B30()
{
  swift_getObjectType();
  sub_1001F081C((uint64_t *)&unk_100585890);
  uint64_t v1 = String.init<A>(describing:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType)) {
    uint64_t v2 = 0x656E6F6850;
  }
  else {
    uint64_t v2 = 0x656D695465636146;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType)) {
    uint64_t v3 = (void *)0xE500000000000000;
  }
  else {
    uint64_t v3 = (void *)0xE800000000000000;
  }
  uint64_t v6 = v1;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100228BF0()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType);
}

void *sub_100228C00()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_1002DF54C((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v0 = &_swiftEmptySetSingleton;
  }
  uint64_t v1 = 536870914;
  v111 = v0;
  sub_1001F6204(0, &qword_1005858C8);
  id v2 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v3 = [v2 pairedDevice];

  if (v3)
  {
    unsigned int v4 = [v3 canReceiveRelayedGFTCalls];

    if (v4) {
      uint64_t v1 = 2;
    }
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005858D0);
  id v5 = sub_100274858(1313427274, (void *)0xE400000000000000);
  id v7 = sub_100235BD0(1852403562, 0xE400000000000000, (uint64_t)v5, v6);
  sub_1001F6204(0, (unint64_t *)&unk_1005887B0);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F560;
  *(void *)(v8 + 32) = v7;
  sub_100235AEC();
  id v9 = v110;
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10048F550;
  *(void *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v10 + 40) = v11;
  id v101 = v7;
  id v96 = sub_1002D1714(0xD000000000000015, 0x800000010047DFA0, v9, v10, v1);
  sub_1002DFCEC((uint64_t)&v110, (uint64_t)v96);

  sub_100274858(0x4C41435F57454956, (void *)0xE90000000000004CLL);
  unsigned int v12 = sub_100235E18();
  id v15 = sub_100235BD0(v12 | 0x6C6C614300000000, 0xE800000000000000, v13, v14);
  uint64_t v16 = sub_100235AAC();
  *(_OWORD *)(v16 + 16) = xmmword_10048F560;
  *(void *)(v16 + 32) = v15;
  sub_100235AEC();
  id v17 = v110;
  id v18 = v15;
  id v91 = sub_1002D1714(0xD00000000000001FLL, 0x800000010047DFC0, v17, (uint64_t)_swiftEmptyArrayStorage, 2);
  sub_1002DFCEC((uint64_t)&v110, (uint64_t)v91);

  id v19 = sub_100274858(0xD00000000000001BLL, (void *)0x800000010047DFE0);
  id v21 = sub_100235BD0(0xD000000000000012, 0x800000010047A170, (uint64_t)v19, v20);
  uint64_t v22 = sub_100235AAC();
  *(_OWORD *)(v22 + 16) = xmmword_10048F560;
  *(void *)(v22 + 32) = v21;
  sub_100235AEC();
  id v86 = v21;
  id v23 = sub_100235A50(0xD00000000000002ELL, (uint64_t)"group-facetime-participant-screenshare-request");
  uint64_t v31 = sub_100235CE0((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v77, v81, (uint64_t)v86, (uint64_t)v91, (uint64_t)v96, (uint64_t)v101, 1, 3, (char)v110);
  sub_1002DFCEC((uint64_t)v31, (uint64_t)v23);

  uint64_t v32 = sub_100235AAC();
  *(_OWORD *)(v32 + 16) = v106;
  *(void *)(v32 + 32) = v18;
  sub_100235AEC();
  id v33 = v18;
  id v34 = sub_100235A50(0xD00000000000001ELL, (uint64_t)"group-facetime-moments-request");
  uint64_t v42 = sub_100235CE0((uint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v78, v82, v87, v92, v97, v102, v106, *((uint64_t *)&v106 + 1), (char)v110);
  sub_1002DFCEC((uint64_t)v42, (uint64_t)v34);

  uint64_t v43 = sub_100235AAC();
  *(_OWORD *)(v43 + 16) = v107;
  *(void *)(v43 + 32) = v33;
  sub_100235AEC();
  id v83 = v33;
  id v44 = sub_100235A50(0xD000000000000021, (uint64_t)"group-facetime-let-me-in-approved");
  uint64_t v52 = sub_100235CE0((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v79, (uint64_t)v83, v88, v93, v98, v103, v107, *((uint64_t *)&v107 + 1), (char)v110);
  sub_1002DFCEC((uint64_t)v52, (uint64_t)v44);

  sub_100235D18((uint64_t)"VIEW_LINK_DETAILS");
  unsigned int v53 = sub_100235E18();
  id v56 = sub_100235BD0(v53 | 0x6B6E694C00000000, 0xEF736C6961746544, v54, v55);
  uint64_t v57 = sub_100235AAC();
  *(_OWORD *)(v57 + 16) = v108;
  *(void *)(v57 + 32) = v56;
  sub_100235AEC();
  id v58 = v56;
  id v59 = sub_100235A50(0xD000000000000031, (uint64_t)"group-facetime-let-me-in-request-pre-conversation");
  uint64_t v67 = sub_100235CE0((uint64_t)v59, v60, v61, v62, v63, v64, v65, v66, v80, v84, v89, v94, v99, v104, v108, *((uint64_t *)&v108 + 1), (char)v110);
  sub_1002DFCEC((uint64_t)v67, (uint64_t)v59);

  id v68 = sub_100274858(0x484354495753, (void *)0xE600000000000000);
  id v70 = sub_100235BD0(0x65756E69746E6F63, 0xEF66666F646E6148, (uint64_t)v68, v69);
  uint64_t v71 = sub_100235AAC();
  *(_OWORD *)(v71 + 16) = v109;
  *(void *)(v71 + 32) = v70;
  sub_100235AEC();
  uint64_t v72 = (uint64_t)v110;
  id v73 = v70;
  id v74 = sub_100274858(0x41454E5F4C4C4143, (void *)0xEB00000000594252);

  return v111;
}

id sub_100229174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [(id)swift_getObjCClassFromMetadata() actionWithIdentifier:v6 title:v7 options:a5];

  return v8;
}

id sub_100229210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_1005858D0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [(id)swift_getObjCClassFromMetadata() categoryWithIdentifier:v8 actions:isa intentIdentifiers:v10 hiddenPreviewsBodyPlaceholder:v11 options:a7];

  return v12;
}

uint64_t sub_10022931C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10022932C(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  id v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *id v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

void sub_10022934C()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1002024D0();
  sub_10020ED28(v3, (uint64_t)v14);
  uint64_t v9 = swift_allocObject();
  sub_100233560(v14, v9 + 16);
  *(void *)(v9 + 56) = v0;
  v13[4] = sub_100233578;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1002C2C88;
  v13[3] = &unk_10050DC78;
  Class v10 = _Block_copy(v13);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  sub_100235394((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  sub_100235E2C();
  sub_100235D50();
  v12();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  swift_release();
  sub_1001FCC08();
}

void sub_10022959C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Class v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100204074(a1, v11);
  v50._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  if (sub_100223C60(v50) != 6)
  {
    uint64_t v17 = a1[3];
    uint64_t v18 = a1[4];
    sub_100204074(a1, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    v19._countAndFlagsBits = 0x2D79616C70726163;
    v19._object = (void *)0xE800000000000000;
    Swift::Bool v20 = String.hasPrefix(_:)(v19);
    swift_bridgeObjectRelease();
    switch(v21)
    {
      case 1:
      case 2:
        uint64_t v22 = *(void (**)(char *))(a2
                                            + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL);
        if (!v22) {
          return;
        }
        id v23 = self;
        swift_retain();
        id v24 = [v23 faceTimeShowInCallUIURL];
        if (v24)
        {
          uint64_t v25 = v24;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v6, v10, v7);
          sub_1001F0530((uint64_t)v6, 0, 1, v7);
          if (sub_1001F758C((uint64_t)v6, 1, v7) != 1)
          {
            v22(v6);
            sub_100208490((uint64_t)v22);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
            return;
          }
        }
        else
        {
          sub_1001F0530((uint64_t)v6, 1, 1, v7);
        }
        __break(1u);
        JUMPOUT(0x100229C60);
      case 3:
        if (qword_100583A38 != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        sub_1001F5F88(v34, (uint64_t)qword_100594CA0);
        sub_10020ED28((uint64_t)a1, (uint64_t)v46);
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 136315138;
          uint64_t v38 = v47;
          uint64_t v39 = v48;
          sub_100204074(v46, v47);
          uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
          uint64_t v44 = sub_1002344D8(v40, v41, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002018DC((uint64_t)v46);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "continueActivity action for notification: %s", v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1002018DC((uint64_t)v46);
        }

        return;
      case 4:
        sub_100229D40(a1);
        return;
      case 5:
        sub_10022A49C(a1);
        return;
      default:
        id v26 = [*(id *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager) activeConversations];
        sub_1001F6204(0, &qword_100585860);
        sub_100210D5C(&qword_100585868, &qword_100585860);
        uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        __chkstk_darwin(v28);
        *(&v42 - 4) = a2;
        *((unsigned char *)&v42 - 24) = v20;
        *(&v42 - 2) = (uint64_t)a1;
        sub_1002256FC(sub_100234CEC, (uint64_t)(&v42 - 6), v27);
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        if (v30)
        {
          uint64_t v31 = *(void (**)(char *))(a2
                                              + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL);
          if (v31)
          {
            swift_retain();
            id v32 = sub_100226EC0((uint64_t)v30, !v20);
            id v33 = [v32 URL];

            static URL._unconditionallyBridgeFromObjectiveC(_:)();
            v31(v10);

            sub_100208490((uint64_t)v31);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
          }
          else
          {
          }
        }
        return;
    }
  }
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594CA0);
  os_log_t v43 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v14, "Unknown notification response received", v15, 2u);
    swift_slowDealloc();
  }
  os_log_t v16 = v43;
}

uint64_t sub_100229C78(void **a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v5 = sub_100226D50(*a1, a3);
  uint64_t v7 = v6;
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  sub_100204074(a4, v8);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) && v7 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

void sub_100229D40(void *a1)
{
  uint64_t v2 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  char v12 = (char *)&v42 - v11;
  __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)&v42 - v13;
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_100204074(a1, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
  uint64_t v48 = 0x796E6F6475657370;
  unint64_t v49 = 0xE90000000000006DLL;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v50, v17, &v46);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v50);
  if (!v47)
  {
    sub_100235804((uint64_t)&v46, (uint64_t *)&unk_100584CA0);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1001F5F88(v31, (uint64_t)qword_100594CA0);
    sub_10020ED28((uint64_t)a1, (uint64_t)v50);
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v33))
    {
      sub_1002018DC((uint64_t)v50);
LABEL_21:

      return;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    sub_10020ED28((uint64_t)v50, (uint64_t)&v46);
    sub_1001F081C((uint64_t *)&unk_100585880);
    uint64_t v35 = String.init<A>(reflecting:)();
    *(void *)&long long v46 = sub_1002344D8(v35, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v50);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Ignoring notification response %s because a pseudonym is missing/could not be typecasted in userInfo", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_20:
    swift_slowDealloc();
    goto LABEL_21;
  }
  uint64_t v18 = v48;
  uint64_t v19 = v49;
  Swift::Bool v20 = self;
  id v21 = sub_100235330(v18, v19, v20);
  if (!v21)
  {
    sub_1001F0530((uint64_t)v4, 1, 1, v5);
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v23(v4, v12, v5);
  sub_1001F0530((uint64_t)v4, 0, 1, v5);
  if (sub_1001F758C((uint64_t)v4, 1, v5) == 1)
  {
LABEL_16:
    sub_100235804((uint64_t)v4, &qword_1005878F0);
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_1001F5F88(v37, (uint64_t)qword_100594CA0);
    id v32 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v38)) {
      goto LABEL_21;
    }
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v38, "Failed to construct FaceTime app URL to view link details", v39, 2u);
    goto LABEL_20;
  }
  v23(v14, v4, v5);
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_1001F5F88(v24, (uint64_t)qword_100594CA0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v14, v5);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v50[0] = v44;
    os_log_t v43 = v27;
    *(_DWORD *)uint64_t v27 = 136315138;
    sub_100235394((unint64_t *)&qword_1005888D0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v46 = sub_1002344D8(v28, v29, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v9, v5);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Launching FaceTime for notification response via url %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v9, v5);
  }

  uint64_t v40 = (void (**)(char *))(v45
                                     + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL);
  swift_beginAccess();
  unint64_t v41 = *v40;
  if (*v40)
  {
    swift_endAccess();
    swift_retain();
    v41(v14);
    sub_100208490((uint64_t)v41);
    v30(v14, v5);
  }
  else
  {
    v30(v14, v5);
    swift_endAccess();
  }
}

void sub_10022A49C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100204074(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  v15[0] = 0xD000000000000018;
  v15[1] = 0x800000010047DF60;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v16, v4, &v13);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v16);
  if (v14)
  {
    if (swift_dynamicCast())
    {
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v6 = objc_msgSend(v5, "tu_handoffEligibility");

      if (v6)
      {
        uint64_t v7 = [self sharedInstance];
        [v7 continueHandoffForConversationWithEligibility:v6];

        goto LABEL_11;
      }
    }
  }
  else
  {
    sub_100235804((uint64_t)&v13, (uint64_t *)&unk_100584CA0);
  }
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594CA0);
  sub_10020ED28((uint64_t)a1, (uint64_t)v16);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_10020ED28((uint64_t)v16, (uint64_t)&v13);
    sub_1001F081C((uint64_t *)&unk_100585880);
    uint64_t v11 = String.init<A>(reflecting:)();
    *(void *)&long long v13 = sub_1002344D8(v11, v12, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Ignoring notification response %s because a handoff dynamic identifier is missing/could not be typecasted in userInfo", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002018DC((uint64_t)v16);
  }
LABEL_11:
}

void sub_10022A794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v82 - v9;
  Notification.object.getter();
  if (v87)
  {
    type metadata accessor for MomentsNotification();
    if (swift_dynamicCast())
    {
      uint64_t v85 = v4;
      uint64_t v11 = v93;
      uint64_t v93 = 0;
      unint64_t v94 = 0xE000000000000000;
      uint64_t v91 = 0;
      unint64_t v92 = 0xE000000000000000;
      id v12 = [*(id *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager) activeConversations];
      sub_1001F6204(0, &qword_100585860);
      sub_100210D5C(&qword_100585868, &qword_100585860);
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = v11;
      sub_100224714(v13, v14);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      if (v16)
      {
        id v17 = [v16 activeRemoteParticipants];
        uint64_t v84 = v14;
        sub_1001F6204(0, &qword_100585908);
        sub_100210D5C((unint64_t *)&unk_100585910, &qword_100585908);
        uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = v84;
        sub_100225A34(v18, v19);
        id v21 = v20;
        swift_bridgeObjectRelease();
        if (v21)
        {
          if (([*(id *)(a2+ OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags) conversationOneToOneModeEnabled] & 1) != 0&& objc_msgSend(v16, "isOneToOneModeEnabled"))
          {
            if (qword_100583A38 != -1) {
              swift_once();
            }
            uint64_t v22 = type metadata accessor for Logger();
            sub_1001F5F88(v22, (uint64_t)qword_100594CA0);
            uint64_t v23 = v5;
            uint64_t v24 = v85;
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v85);
            uint64_t v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v25, v26))
            {
              uint64_t v84 = v25;
              uint64_t v27 = (uint8_t *)swift_slowAlloc();
              uint64_t v83 = swift_slowAlloc();
              v90[0] = (id)v83;
              *(_DWORD *)uint64_t v27 = 136315138;
              uint64_t v82 = v27 + 4;
              Notification.object.getter();
              uint64_t v28 = sub_1001FCD60((uint64_t)aBlock);
              unint64_t v30 = v29;
              sub_100235804((uint64_t)aBlock, (uint64_t *)&unk_100584CA0);
              aBlock[0] = sub_1002344D8(v28, v30, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v85);
              uint64_t v25 = v84;
              _os_log_impl((void *)&_mh_execute_header, v84, v26, "Handle momentsStartedRemoteCapture in-app %s", v27, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v24);
            }

            goto LABEL_36;
          }
          goto LABEL_21;
        }
        if (qword_100583A38 != -1) {
          swift_once();
        }
        uint64_t v65 = type metadata accessor for Logger();
        sub_1001F5F88(v65, (uint64_t)qword_100594CA0);
        uint64_t v66 = v16;
        uint64_t v67 = v19;
        id v68 = v66;
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v69, v70))
        {

          goto LABEL_36;
        }
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = (void *)swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        aBlock[0] = v85;
        *(_DWORD *)uint64_t v71 = 138412546;
        v90[0] = v68;
        id v73 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v72 = v16;

        *(_WORD *)(v71 + 12) = 2080;
        uint64_t v74 = *(void *)&v67[OBJC_IVAR___CSDMomentsNotification_requesterID];
        unint64_t v75 = *(void *)&v67[OBJC_IVAR___CSDMomentsNotification_requesterID + 8];
        swift_bridgeObjectRetain();
        v90[0] = (id)sub_1002344D8(v74, v75, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "could not find participant for participant in conversation: %@ for requesterID: %s", (uint8_t *)v71, 0x16u);
        sub_1001F081C(&qword_100585900);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        if ([*(id *)(a2+ OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags) conversationOneToOneModeEnabled])
        {
          id v39 = [self sharedInstance];
          uint64_t v40 = [v39 queue];

          id v21 = (void *)swift_allocObject();
          v21[2] = v14;
          v21[3] = &v93;
          v21[4] = &v91;
          uint64_t v16 = (void *)swift_allocObject();
          unint64_t v41 = sub_1002359FC;
          _OWORD v16[2] = sub_1002359FC;
          v16[3] = v21;
          uint64_t v88 = sub_10021E788;
          uint64_t v89 = v16;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_10032062C;
          uint64_t v87 = &unk_10050DED0;
          uint64_t v42 = _Block_copy(aBlock);
          uint64_t v84 = v14;
          os_log_t v43 = v14;
          swift_retain();
          swift_release();
          dispatch_sync(v40, v42);

          _Block_release(v42);
          LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v40 & 1) == 0)
          {
LABEL_22:
            id v52 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
            sub_100274858(0xD000000000000025, (void *)0x800000010047E260);
            sub_1001F081C(&qword_100584B20);
            uint64_t v53 = swift_allocObject();
            *(_OWORD *)(v53 + 16) = xmmword_10048F550;
            uint64_t v55 = (uint64_t)v93;
            unint64_t v54 = v94;
            *(void *)(v53 + 56) = &type metadata for String;
            *(void *)(v53 + 64) = sub_1001F3B08();
            *(void *)(v53 + 32) = v55;
            *(void *)(v53 + 40) = v54;
            swift_bridgeObjectRetain();
            String.init(format:_:)();
            swift_bridgeObjectRelease();
            NSString v56 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v52 setBody:v56];

            NSString v57 = String._bridgeToObjectiveC()();
            [v52 setCategoryIdentifier:v57];

            sub_100274858(0xD000000000000021, (void *)0x800000010047E290);
            NSString v58 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v52 setTitle:v58];

            [v52 setShouldSuppressDefaultAction:1];
            [v52 setShouldIgnoreDoNotDisturb:1];
            uint64_t v59 = sub_100228B30();
            sub_10036EEF0(v59, v60, v52);
            sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
            uint64_t v61 = v91;
            uint64_t v62 = v92;
            swift_bridgeObjectRetain();
            id v63 = v52;
            id v64 = sub_100362954(v61, v62, v63, 0);
            [v64 setDestinations:3];
            sub_100228554(v64);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100208490((uint64_t)v41);
            return;
          }
          __break(1u);
LABEL_21:
          uint64_t v44 = *(uint64_t (**)(void))(a2
                                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation);
          swift_retain();
          id v45 = [v21 handle];
          uint64_t v46 = v44();
          unint64_t v48 = v47;

          swift_release();
          uint64_t v93 = (void *)v46;
          unint64_t v94 = v48;
          swift_bridgeObjectRelease();
          uint64_t v49 = sub_100226E74(v21);
          unint64_t v51 = v50;

          uint64_t v91 = v49;
          unint64_t v92 = v51;
          swift_bridgeObjectRelease();
          unint64_t v41 = 0;
          goto LABEL_22;
        }
        if (qword_100583A38 != -1) {
          swift_once();
        }
        uint64_t v76 = type metadata accessor for Logger();
        sub_1001F5F88(v76, (uint64_t)qword_100594CA0);
        uint64_t v77 = v14;
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v69, v78))
        {

          goto LABEL_36;
        }
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136315138;
        v90[0] = *(id *)&v77[OBJC_IVAR___CSDMomentsNotification_streamToken];
        uint64_t v80 = String.init<A>(reflecting:)();
        v90[0] = (id)sub_1002344D8(v80, v81, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v78, "could not find conversation for notification stream token: %s", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    sub_100235804((uint64_t)aBlock, (uint64_t *)&unk_100584CA0);
  }
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_1001F5F88(v31, (uint64_t)qword_100594CA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v4);
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v85 = v4;
    uint64_t v35 = (uint8_t *)v34;
    uint64_t v93 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    Notification.object.getter();
    uint64_t v36 = sub_1001FCD60((uint64_t)aBlock);
    unint64_t v38 = v37;
    sub_100235804((uint64_t)aBlock, (uint64_t *)&unk_100584CA0);
    aBlock[0] = sub_1002344D8(v36, v38, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v85);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "momentsStartedRemoteCapture received invalid notification object: %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

void sub_10022B5C4(void *a1, uint64_t *a2, uint64_t *a3)
{
  id v6 = [self sharedInstance];
  id v7 = [v6 currentVideoCalls];

  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = a1;
  uint64_t v10 = sub_100225DA4(v8, v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = sub_100235438(v10, (SEL *)&selRef_displayFirstName);
    if (v12)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v12;
    }
    else
    {
      id v21 = [v10 displayName];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    *a2 = v13;
    a2[1] = v14;
    swift_bridgeObjectRelease();
    id v23 = [v10 uniqueProxyIdentifier];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *a3 = v24;
    a3[1] = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1001F5F88(v15, (uint64_t)qword_100594CA0);
    uint64_t v27 = v9;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = String.init<A>(reflecting:)();
      sub_1002344D8(v19, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "could not find conversation or call for notification stream token: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10022B938()
{
  sub_1001FCC38();
  uint64_t v29 = v1;
  uint64_t v26 = v2;
  uint64_t v27 = v3;
  uint64_t v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v32 = v6;
  __chkstk_darwin(v7);
  sub_10021EA1C();
  sub_1001F6398();
  uint64_t v30 = v9;
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  sub_1002024D0();
  uint64_t v10 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15);
  uint64_t v16 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v5, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v16, v10);
  *(void *)(v19 + v18) = v0;
  v34[4] = v27;
  v34[5] = v19;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 1107296256;
  void v34[2] = sub_1002C2C88;
  v34[3] = v29;
  unint64_t v20 = _Block_copy(v34);
  id v21 = v0;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v33 = _swiftEmptyArrayStorage;
  sub_100235394((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_100235C40();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  sub_100235E2C();
  sub_1001F7664();
  v23(v22);
  sub_1001F7664();
  v25(v24);
  swift_release();
  sub_1001FCC08();
}

void sub_10022BBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_1001F5F88(v8, (uint64_t)qword_100594CA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v38[1] = v9;
    uint64_t v13 = (uint8_t *)v12;
    v42[0] = swift_slowAlloc();
    uint64_t v39 = a2;
    *(_DWORD *)uint64_t v13 = 136315138;
    v38[0] = a1;
    sub_100235394((unint64_t *)&unk_100585960, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v43 = sub_1002344D8(v14, v15, v42);
    a2 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling notification for pending message did receive invite: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v16 = Notification.userInfo.getter();
  if (!v16)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    goto LABEL_15;
  }
  uint64_t v17 = v16;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v18;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v42, v17, &v43);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v42);
  if (!*((void *)&v44 + 1))
  {
LABEL_15:
    sub_100235804((uint64_t)&v43, (uint64_t *)&unk_100584CA0);
    goto LABEL_16;
  }
  type metadata accessor for GroupIDSPendingChat(0);
  if (swift_dynamicCast())
  {
    uint64_t v19 = (char *)v42[0];
    id v20 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
    id v21 = *(void (**)(void))(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName);
    uint64_t v22 = OBJC_IVAR___CSDGroupIDSPendingChat_handle;
    id v23 = *(void **)&v19[OBJC_IVAR___CSDGroupIDSPendingChat_handle];
    swift_retain();
    id v24 = v23;
    v21();

    swift_release();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v20 setTitle:v25];

    sub_100274858(0xD000000000000012, (void *)0x800000010047E190);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v20 setBody:v26];

    NSString v27 = String._bridgeToObjectiveC()();
    [v20 setCategoryIdentifier:v27];

    if (qword_100583720 != -1) {
      swift_once();
    }
    [v20 setSound:qword_1005856B0];
    NSString v28 = [*(id *)&v19[v22] value];
    if (!v28)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v20 setThreadIdentifier:v28];

    uint64_t v29 = sub_100228B30();
    sub_10036EEF0(v29, v30, v20);
    sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
    uint64_t v31 = UUID.uuidString.getter();
    uint64_t v33 = v32;
    id v34 = v20;
    uint64_t v35 = sub_100362954(v31, v33, v34, 0);
    [v35 setDestinations:15];
    sub_100228554(v35);

    goto LABEL_18;
  }
LABEL_16:
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Did not find expected pending chat information", v37, 2u);
    swift_slowDealloc();
  }
LABEL_18:
}

uint64_t sub_10022C250(void *a1)
{
  type metadata accessor for Notification();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1001FCC70();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a1;
  sub_10022B938();

  sub_100235D38();
  return v4();
}

uint64_t type metadata accessor for GroupFaceTimeNotificationProvider()
{
  return self;
}

uint64_t sub_10022C34C@<X0>(uint64_t a1@<X8>)
{
  return sub_100223CAC(a1);
}

uint64_t sub_10022C364(uint64_t a1, uint64_t a2)
{
  return sub_10022932C(a1, a2, &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_10022C398(uint64_t a1, uint64_t a2)
{
  return sub_10022932C(a1, a2, &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_10022C3CC(uint64_t a1, uint64_t a2)
{
  return sub_10022932C(a1, a2, &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_10022C400(uint64_t a1, uint64_t a2)
{
  return sub_10022932C(a1, a2, &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_updateBadgeValue, (uint64_t (*)(uint64_t, uint64_t))sub_100208490);
}

id sub_10022C438(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setBody:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v10 setCategoryIdentifier:v12];

  if (qword_100583720 != -1) {
    swift_once();
  }
  [v10 setSound:qword_1005856B0];
  uint64_t v13 = *(void (**)(void))(v2
                         + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation);
  swift_retain();
  id v14 = [a1 initiator];
  v13();

  swift_release();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setTitle:v15];

  uint64_t v16 = sub_100228B30();
  sub_10036EEF0(v16, v17, v10);
  sub_100277324(a1);
  if (!v18)
  {
    id v19 = [a1 link];

    if (v19)
    {
      id v20 = [a1 link];
      if (!v20
        || (id v21 = v20, v22 = [v20 isLocallyCreated], v21, !v22)
        || (id v23 = [a1 link]) == 0
        || (sub_100235254(v23), !v24))
      {
        sub_100274858(0x454D495445434146, (void *)0xED00004B4E494C5FLL);
      }
    }
    else
    {
      id v36 = sub_100274858(0x49564E495F544647, (void *)0xEA00000000004554);
      v43[1] = v37;
      v43[2] = v36;
      sub_1001F081C(&qword_100584B20);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_10048F550;
      uint64_t v39 = *(uint64_t (**)(void *))(v2
                                             + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName);
      swift_retain();
      uint64_t v40 = v39(a1);
      uint64_t v42 = v41;
      swift_release();
      *(void *)(v38 + 56) = &type metadata for String;
      *(void *)(v38 + 64) = sub_1001F3B08();
      *(void *)(v38 + 32) = v40;
      *(void *)(v38 + 40) = v42;
      String.init(format:_:)();
      swift_bridgeObjectRelease();
    }
  }
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setSubtitle:v25];

  if (([a1 isVideoEnabled] & 1) != 0
    || (sub_1001F6204(0, (unint64_t *)&qword_1005861B0),
        id v26 = [a1 provider],
        id v27 = [self expanseProvider],
        char v28 = static NSObject.== infix(_:_:)(),
        v26,
        v27,
        (v28 & 1) == 0))
  {
    id v32 = sub_100226EC0((uint64_t)a1, 1);
    id v33 = [v32 URL];

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v6;
    uint64_t v29 = v44;
    goto LABEL_16;
  }
  sub_10022C98C(a1, (uint64_t)v9);
  uint64_t v29 = v44;
  if (sub_1001F758C((uint64_t)v9, 1, v44) != 1)
  {
LABEL_16:
    URL._bridgeToObjectiveC()(v30);
    uint64_t v31 = v34;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v29);
    goto LABEL_17;
  }
  uint64_t v31 = 0;
LABEL_17:
  [v10 setDefaultActionURL:v31];

  return v10;
}

uint64_t sub_10022C98C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v41 = type metadata accessor for URLComponents();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for URLQueryItem();
  uint64_t v5 = *(void *)(v38 - 8);
  uint64_t v6 = __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v10 - 8);
  NSString v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v36 - v18;
  id v36 = a1;
  id v20 = [a1 messagesGroupUUID];
  if (!v20)
  {
    sub_1001F0530((uint64_t)v12, 1, 1, v13);
    goto LABEL_7;
  }
  id v21 = v20;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unsigned int v22 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v22(v12, v17, v13);
  sub_1001F0530((uint64_t)v12, 0, 1, v13);
  if (sub_1001F758C((uint64_t)v12, 1, v13) == 1)
  {
LABEL_7:
    sub_100235804((uint64_t)v12, (uint64_t *)&unk_100585580);
    id v23 = _swiftEmptyArrayStorage;
    uint64_t v27 = v38;
    goto LABEL_8;
  }
  v22(v19, v12, v13);
  UUID.uuidString.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  id v23 = (void *)sub_1003A4958(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    id v23 = (void *)sub_1003A4958(v24 > 1, v25 + 1, 1, (uint64_t)v23);
  }
  v23[2] = v25 + 1;
  id v26 = v9;
  uint64_t v27 = v38;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v25, v26, v38);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
LABEL_8:
  id v28 = [v36 remoteMembers];
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002226C8(v29);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t v42 = v31;
  sub_1001F081C(&qword_10058B600);
  sub_1001FCB74((unint64_t *)&qword_100585930, &qword_10058B600);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  id v32 = v37;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v23 = (void *)sub_1003A4958(0, v23[2] + 1, 1, (uint64_t)v23);
  }
  unint64_t v34 = v23[2];
  unint64_t v33 = v23[3];
  if (v34 >= v33 >> 1) {
    id v23 = (void *)sub_1003A4958(v33 > 1, v34 + 1, 1, (uint64_t)v23);
  }
  v23[2] = v34 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v34, v32, v27);
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v4, v41);
}

void sub_10022CF6C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    int64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v17 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v8 = (v4 - 1) & v4;
      unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
      int64_t v10 = v3;
      goto LABEL_29;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v17) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v12);
    int64_t v10 = v3 + 1;
    if (!v13)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v10);
      if (!v13)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v10);
        if (!v13)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v18 + 8 * v10);
          if (!v13)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v18 + 8 * v10);
            if (!v13)
            {
              int64_t v14 = v3 + 6;
              while (v14 < v17)
              {
                unint64_t v13 = *(void *)(v18 + 8 * v14++);
                if (v13)
                {
                  int64_t v10 = v14 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_100206FA0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_32;
    }
    while (1)
    {
      id v15 = [v11 handles];
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
      uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002D1998(v16);
      int64_t v3 = v10;
      unint64_t v4 = v8;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v11 = v19;
        swift_unknownObjectRelease();
        int64_t v10 = v3;
        uint64_t v8 = v4;
        if (v19) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_10022D2D0(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v88 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Calendar.Component();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  int64_t v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Calendar();
  uint64_t v85 = *(void *)(v13 - 8);
  uint64_t v86 = v13;
  __chkstk_darwin(v13);
  id v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v83 = *(void *)(v19 - 8);
  uint64_t v84 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    id v90 = a3;
  }
  else if (!a2 || (id v90 = [a2 link]) == 0)
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_1001F5F88(v23, (uint64_t)qword_100594CA0);
    id v90 = a2;
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = 7104878;
      uint64_t v27 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      if (a2)
      {
        uint64_t v92 = (uint64_t)v90;
        sub_1001F6204(0, &qword_100585860);
        id v28 = v90;
        uint64_t v26 = String.init<A>(reflecting:)();
        unint64_t v30 = v29;
      }
      else
      {
        unint64_t v30 = 0xE300000000000000;
      }
      uint64_t v92 = sub_1002344D8(v26, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v92 = sub_1002344D8(7104878, 0xE300000000000000, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to determine conversation link for pending member notification with conversation %s and conversationLink %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_29;
  }
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v31 = *(void *)(a1 + 16);
    id v32 = a3;
    if (v31) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v79 = v90;

    return;
  }
  id v22 = a3;
  if (!__CocoaSet.count.getter()) {
    goto LABEL_29;
  }
LABEL_14:
  unint64_t v33 = v4;
  sub_1002243F0(a1, v33);
  uint64_t v35 = v34;

  if (!v35) {
    goto LABEL_29;
  }
  if (([self supportsConversations] & 1) == 0
    && ![*(id *)&v33[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags] greenTeaLinksEnabled])
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v75 = type metadata accessor for Logger();
    sub_1001F5F88(v75, (uint64_t)qword_100594CA0);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      os_log_type_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Not posting pending member notification becaue Group FaceTime is not supported (GreenTea device or doesn't support multiway)", v78, 2u);
      swift_slowDealloc();
    }

    goto LABEL_29;
  }
  id v36 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  NSString v37 = String._bridgeToObjectiveC()();
  [v36 setCategoryIdentifier:v37];

  sub_100274858(0xD000000000000017, (void *)0x800000010047E1E0);
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 setBody:v38];

  sub_1002B4A0C(v90);
  uint64_t v81 = v8;
  uint64_t v80 = v9;
  if (!v39) {
    sub_100274858(0x454D495445434146, (void *)0xED00004B4E494C5FLL);
  }
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 setTitle:v40];

  [v36 setInterruptionLevel:2];
  uint64_t v41 = sub_100228B30();
  sub_10036EEF0(v41, v42, v36);
  id v43 = [v90 pseudonym];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v82 = v33;

  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 setThreadIdentifier:v44];

  uint64_t v92 = 0x796E6F6475657370;
  unint64_t v93 = 0xE90000000000006DLL;
  AnyHashable.init<A>(_:)();
  id v45 = [v90 pseudonym];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v47;

  unint64_t v94 = &type metadata for String;
  uint64_t v92 = v46;
  unint64_t v93 = v48;
  id v49 = [v36 userInfo];
  uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  void aBlock[6] = v50;
  sub_1002C2704((uint64_t)&v92, (uint64_t)aBlock);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v36 setUserInfo:isa];

  id v52 = sub_100226F30(v90);
  id v53 = [v52 URL];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL._bridgeToObjectiveC()(v54);
  NSString v56 = v55;
  (*(void (**)(char *, uint64_t))(v83 + 8))(v21, v84);
  [v36 setDefaultActionURL:v56];

  static Calendar.current.getter();
  uint64_t v57 = v87;
  uint64_t v58 = v89;
  (*(void (**)(char *, void, uint64_t))(v87 + 104))(v12, enum case for Calendar.Component.hour(_:), v89);
  uint64_t v59 = v88;
  Date.init()();
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v60 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v61 = v59;
  uint64_t v62 = v81;
  v60(v61, v81);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v15, v86);
  if (sub_1001F758C((uint64_t)v18, 1, v62) == 1)
  {
    Class v63 = 0;
  }
  else
  {
    Class v63 = Date._bridgeToObjectiveC()().super.isa;
    v60(v18, v62);
  }
  objc_msgSend(v36, "setExpirationDate:", v63, v80, v81);

  id v64 = v82;
  unint64_t v65 = sub_100226CA8(v90);
  uint64_t v67 = v66;
  sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
  swift_bridgeObjectRetain();
  id v68 = v36;
  id v69 = sub_100362954(v65, v67, v68, 0);
  [v69 setDestinations:4];
  os_log_type_t v70 = *(void **)&v64[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_faceTimeNotificationCenter];
  uint64_t v71 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v72 = (void *)swift_allocObject();
  v72[2] = v71;
  v72[3] = v65;
  v72[4] = v67;
  v72[5] = v69;
  aBlock[4] = (uint64_t)sub_10023573C;
  aBlock[5] = (uint64_t)v72;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10022E5D8;
  uint64_t aBlock[3] = (uint64_t)&unk_10050DD68;
  id v73 = _Block_copy(aBlock);
  id v74 = v69;
  swift_release();
  [v70 getDeliveredNotificationsWithCompletionHandler:v73];
  _Block_release(v73);
}

BOOL sub_10022DE60(void *a1, void *a2)
{
  uint64_t v6 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v6 - 8);
  sub_1001FCC20();
  uint64_t v7 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100235A90();
  __chkstk_darwin(v11);
  id v12 = [a1 dateInitiatedLetMeIn];
  if (!v12)
  {
    sub_1001F0530(v2, 1, 1, v7);
    goto LABEL_8;
  }
  uint64_t v13 = v12;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(void))(v9 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v2, v3, v7);
  sub_100235C50();
  sub_1001F0530(v15, v16, v17, v18);
  if (sub_1001F758C(v2, 1, v7) == 1)
  {
LABEL_8:
    sub_100235804(v2, &qword_100584B40);
    return 1;
  }
  sub_100235C6C();
  v14();
  id v19 = [a1 dateReceivedLetMeIn];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSince(_:)();
  double v21 = v20;
  id v22 = *(void (**)(void))(v9 + 8);
  sub_100235D50();
  v22();
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_1001F5F88(v23, (uint64_t)qword_100594CA0);
  id v24 = a1;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    os_log_type_t v37 = v26;
    uint64_t v27 = sub_100235B88();
    id v36 = v25;
    id v28 = (void *)sub_100235BB8();
    uint64_t v38 = sub_100202470();
    *(_DWORD *)uint64_t v27 = 138412546;
    uint64_t v35 = a2;
    id v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v28 = v24;

    a2 = v35;
    *(_WORD *)(v27 + 12) = 2080;
    sub_1001F081C(&qword_100584B20);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_10048F550;
    *(void *)(v30 + 56) = &type metadata for Double;
    *(void *)(v30 + 64) = &protocol witness table for Double;
    *(double *)(v30 + 32) = v21;
    uint64_t v31 = String.init(format:_:)();
    sub_1002344D8(v31, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Time since LMI initiated for member %@ is %s seconds", (uint8_t *)v27, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  double v34 = (double)(unint64_t)[a2 letMeInRequestNotificationTimeout];
  sub_100235CD4();
  sub_100235D50();
  v22();
  return v21 < v34;
}

uint64_t sub_10022E288(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v17 = (void *)result;
    uint64_t v23 = v10;
    swift_bridgeObjectRetain();
    if ((sub_100223AA4(a1, a3, a4) & 1) == 0) {
      objc_msgSend(a5, "setDestinations:", (unint64_t)objc_msgSend(a5, "destinations") | 3);
    }
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = a5;
    aBlock[4] = sub_100235788;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050DDB8;
    id v19 = _Block_copy(aBlock);
    id v20 = v17;
    id v21 = a5;
    static DispatchQoS.unspecified.getter();
    os_log_type_t v25 = _swiftEmptyArrayStorage;
    sub_100235394((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);

    return swift_release();
  }
  return result;
}

uint64_t sub_10022E5D8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1001F6204(0, &qword_100585940);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_10022E65C(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100274858(0xD000000000000015, (void *)0x800000010047E240);
  id v9 = sub_10022C438(a1);
  swift_bridgeObjectRelease();
  id v10 = [self faceTimeShowInCallUIURL];
  if (v10)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    sub_1001F0530((uint64_t)v8, 0, 1, v2);
    if (sub_1001F758C((uint64_t)v8, 1, v2) == 1)
    {
      id v10 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v11);
      id v10 = v12;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  else
  {
    sub_1001F0530((uint64_t)v8, 1, 1, v2);
  }
  [v9 setDefaultActionURL:v10];

  return v9;
}

void sub_10022E898()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  id v4 = v3;
  uint64_t v103 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235A90();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v91 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (uint8_t *)v91 - v12;
  uint64_t v14 = (char **)type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_1001FCC20();
  uint64_t v18 = *(void **)((char *)v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  void *v0 = v18;
  sub_100235D68();
  v19();
  id v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, char **))(v16 + 8))(v0, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v14 = &selRef_setSupportsGrouping_;
  if (sub_100226574(v4))
  {
    id v101 = (void (*)(void))v6;
    if (qword_100583A38 == -1)
    {
LABEL_4:
      uint64_t v21 = type metadata accessor for Logger();
      sub_1001F5F88(v21, (uint64_t)qword_100594CA0);
      id v22 = v4;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)sub_100235B18();
        uint64_t v26 = sub_100202470();
        id v100 = v0;
        uint64_t v105 = v26;
        id v102 = v4;
        *(_DWORD *)os_log_type_t v25 = 136315138;
        uint64_t v99 = v25 + 4;
        id v27 = [v22 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of CustomStringConvertible.description.getter();
        sub_100235DC4();
        sub_1001F7664();
        v28();
        uint64_t v29 = sub_100235C9C();
        sub_100235DD0(v29);
        uint64_t v14 = &selRef_setSupportsGrouping_;
        id v4 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Conversation UUID %s had a state change, and we determined that we should post an invite notification", v25, 0xCu);
        swift_arrayDestroy();
        uint64_t v2 = v100;
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
      }
      sub_10022702C(v22);
      goto LABEL_36;
    }
LABEL_41:
    swift_once();
    goto LABEL_4;
  }
  if ([v4 state] == (id)3)
  {
    uint64_t v30 = v6;
    uint64_t v99 = v13;
    id v102 = v4;
    id v31 = [v4 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v32 = (void *)((char *)v2
                   + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID);
    sub_100235AC8();
    uint64_t v33 = sub_100223278((uint64_t)v11, *v32);
    id v100 = v2;
    uint64_t v97 = v1;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)v33;
      unint64_t v36 = v34;
      swift_endAccess();
      os_log_type_t v37 = *(void (**)(void))(v30 + 8);
      id v101 = (void (*)(void))(v30 + 8);
      ((void (*)(char *, uint64_t))v37)(v11, v103);
      if (qword_100583A38 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_1001F5F88(v38, (uint64_t)qword_100594CA0);
      id v39 = v102;
      swift_bridgeObjectRetain_n();
      id v40 = v39;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      int v43 = v42;
      BOOL v44 = os_log_type_enabled(v41, v42);
      uint64_t v98 = (uint64_t)v32;
      id v95 = v35;
      id v96 = v40;
      if (v44)
      {
        uint64_t v45 = sub_100235B88();
        uint64_t v94 = swift_slowAlloc();
        uint64_t v105 = v94;
        *(_DWORD *)uint64_t v45 = 136315394;
        v91[1] = v45 + 4;
        id v46 = [v40 UUID];
        os_log_t v93 = v41;
        id v47 = v46;
        unint64_t v48 = v99;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
        int v92 = v43;
        uint64_t v49 = (uint64_t)v35;
        uint64_t v50 = v37;
        uint64_t v51 = v103;
        dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v52 = v51;
        os_log_type_t v37 = v50;
        unint64_t v53 = (unint64_t)v101;
        ((void (*)(uint8_t *, uint64_t))v37)(v48, v52);
        uint64_t v104 = sub_100235C9C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v104 = sub_1002344D8(v49, v36, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v54 = v93;
        _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v92, "Removing invite notification for conversation UUID %s with notification identifier %s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        sub_1001F63CC();
        uint64_t v2 = v100;
        sub_1001F63CC();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        unint64_t v53 = (unint64_t)v101;
      }
      uint64_t v55 = v53 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v59 = *(void (**)(uint8_t *, unint64_t))((char *)v2
                                                               + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
      if (v59)
      {
        sub_100235BA0();
        v59(v95, v36);
        sub_100235C84();
      }
      swift_bridgeObjectRelease();
      id v60 = [v96 UUID];
      uint64_t v58 = (uint64_t)v99;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002024E8();
      sub_1002CE344(v58);
      uint64_t v57 = v103;
      sub_100235C60();
      v37();
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      os_log_type_t v37 = *(void (**)(void))(v6 + 8);
      uint64_t v55 = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      NSString v56 = v11;
      uint64_t v57 = v103;
      ((void (*)(char *, uint64_t))v37)(v56, v103);
      uint64_t v58 = (uint64_t)v99;
    }
    id v4 = v102;
    id v61 = [v102 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v62 = (void *)((char *)v2
                   + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID);
    sub_100235AC8();
    Class v63 = sub_100223A18(v58, *v62);
    swift_endAccess();
    ((void (*)(uint64_t, uint64_t))v37)(v58, v57);

    id v101 = v37;
    uint64_t v98 = v55;
    if (v63)
    {
      if (qword_100583A38 != -1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      sub_1001F5F88(v64, (uint64_t)qword_100594CA0);
      id v65 = v4;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        id v68 = (uint8_t *)sub_100235B18();
        id v96 = (id)sub_100202470();
        uint64_t v105 = (uint64_t)v96;
        *(_DWORD *)id v68 = 136315138;
        uint64_t v94 = (uint64_t)(v68 + 4);
        id v95 = v68;
        id v69 = [v65 UUID];
        uint64_t v70 = (uint64_t)v99;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v57 = v103;
        dispatch thunk of CustomStringConvertible.description.getter();
        ((void (*)(uint64_t, uint64_t))v101)(v70, v57);
        uint64_t v71 = sub_100235C9C();
        sub_100235DD0(v71);
        os_log_type_t v37 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Removing pending notification for conversation with uuid %s since we are joined into the conversation", v95, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {

        uint64_t v57 = v103;
        uint64_t v70 = (uint64_t)v99;
      }
      uint64_t v2 = v100;
      id v72 = [v65 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002024E8();
      id v73 = (void *)sub_1002CE440(v70);
      ((void (*)(uint64_t, uint64_t))v37)(v70, v57);
      swift_endAccess();

      id v4 = v102;
    }
    id v74 = [v4 link];
    uint64_t v75 = v97;
    if (v74)
    {
      uint64_t v76 = v74;
      sub_100226CA8(v74);
      os_log_type_t v77 = *(void (**)(uint64_t))((char *)v2
                                           + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
      if (v77)
      {
        swift_retain();
        uint64_t v78 = sub_100235D8C();
        v77(v78);
        sub_100208490((uint64_t)v77);
      }
      swift_bridgeObjectRelease();

      os_log_type_t v37 = v101;
    }
    id v79 = [v4 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v80 = (void *)((char *)v2
                   + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID);
    sub_100235AC8();
    uint64_t v81 = sub_100223278(v75, *v80);
    if (v82)
    {
      uint64_t v83 = v81;
      uint64_t v84 = v82;
      swift_endAccess();
      ((void (*)(uint64_t, uint64_t))v37)(v75, v57);
      uint64_t v85 = *(void (**)(uint64_t, uint64_t))((char *)v2
                                                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
      if (v85)
      {
        swift_retain();
        v85(v83, v84);
        uint64_t v86 = sub_100235CD4();
        sub_100208490(v86);
      }
      swift_bridgeObjectRelease();
      id v87 = [v4 UUID];
      uint64_t v88 = v99;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002024E8();
      sub_1002CE344(v88);
      ((void (*)(uint8_t *, uint64_t))v101)(v88, v57);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      ((void (*)(uint64_t, uint64_t))v37)(v75, v57);
    }
    uint64_t v14 = &selRef_setSupportsGrouping_;
  }
LABEL_36:
  if ([v4 v14[323]])
  {
    uint64_t v89 = *(void (**)(unint64_t))((char *)v2
                                                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v89)
    {
      sub_100235BA0();
      unint64_t v90 = sub_100235A78();
      v89(v90);
      sub_100235C84();
    }
  }
  sub_1001FCC08();
}

void sub_10022F4DC(int a1, id a2)
{
  uint64_t v3 = v2;
  if ([a2 state] == (id)1 && objc_msgSend(a2, "letMeInRequestState") == (id)3)
  {
    id v5 = [a2 link];

    if (v5)
    {
      if (*(unsigned char *)(v3 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_facetimeIsShowingOnScreen))
      {
        if (qword_100583A38 != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        sub_1001F5F88(v6, (uint64_t)qword_100594CA0);
        oslog = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(oslog, v7))
        {
          uint64_t v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Not posting LMI approval notification because the conversation is currently showing on screen", v8, 2u);
          sub_1001F63CC();
        }
      }
      else
      {
        id v9 = sub_10022E65C(a2);
        sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
        uint64_t v10 = sub_100226D50(a2, 0);
        uint64_t v12 = v11;
        id v13 = v9;
        oslog = sub_100362954(v10, v12, v13, 0);
        [oslog setDestinations:7];
        sub_100228554(oslog);
      }
    }
  }
}

void sub_10022F74C()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v74 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001FCCD0();
  uint64_t v73 = v7;
  uint64_t v8 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = &v63[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v63[-v16];
  uint64_t v18 = __chkstk_darwin(v15);
  id v20 = &v63[-v19];
  __chkstk_darwin(v18);
  id v22 = &v63[-v21];
  if (([v3 hasJoined] & 1) == 0)
  {
    uint64_t v72 = v5;
    id v23 = [v3 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v24 = (uint64_t *)(v1
                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID);
    sub_100235AC8();
    uint64_t v25 = sub_100223278((uint64_t)v22, *v24);
    if (v26)
    {
      unint64_t v27 = v26;
      uint64_t v71 = v25;
      swift_endAccess();
      uint64_t v30 = *(void (**)(void))(v10 + 8);
      uint64_t v28 = v10 + 8;
      uint64_t v29 = v30;
      sub_100235B60();
      v30();
      id v31 = (void *)sub_100228064(v3);
      if (qword_100583A38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_1001F5F88(v32, (uint64_t)qword_100594CA0);
      swift_bridgeObjectRetain_n();
      id v33 = v31;
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      int v36 = v35;
      BOOL v37 = os_log_type_enabled(v34, v35);
      uint64_t v70 = v28;
      if (v37)
      {
        uint64_t v38 = sub_100235B88();
        uint64_t v69 = v8;
        uint64_t v39 = v38;
        uint64_t v66 = (void *)sub_100235BB8();
        uint64_t v67 = sub_100202470();
        uint64_t v76 = v67;
        *(_DWORD *)uint64_t v39 = 136315394;
        os_log_t v65 = v34;
        swift_bridgeObjectRetain();
        uint64_t v75 = sub_1002344D8(v71, v27, &v76);
        int v64 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v39 + 12) = 2112;
        uint64_t v75 = (uint64_t)v33;
        id v40 = v33;
        uint64_t v68 = v1;
        id v41 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v66 = v33;

        uint64_t v1 = v68;
        os_log_t v42 = v65;
        _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "Replacing notification id %s with content %@", (uint8_t *)v39, 0x16u);
        sub_1001F081C(&qword_100585900);
        swift_arrayDestroy();
        sub_1001F63CC();
        swift_arrayDestroy();
        sub_1001F63CC();
        uint64_t v8 = v69;
        sub_1001F63CC();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v48 = (void (**)(uint64_t, uint64_t, id))(v1
                                                       + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace);
      uint64_t v49 = *(void (**)(uint64_t, unint64_t, id))(v1
                                                                 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace);
      if (v49)
      {
        swift_retain();
        v49(v71, v27, v33);
        sub_100208490((uint64_t)v49);
      }
      swift_bridgeObjectRelease();
      id v50 = [v3 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = (uint64_t *)(v1
                      + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID);
      sub_100235AC8();
      uint64_t v52 = sub_100223278((uint64_t)v20, *v51);
      if (v53)
      {
        uint64_t v54 = v52;
        uint64_t v55 = v53;
        swift_endAccess();
        sub_100235C60();
        v29();
        id v56 = sub_100226EC0((uint64_t)v3, 0);
        id v57 = [v56 URL];

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        URL._bridgeToObjectiveC()(v58);
        id v60 = v59;
        sub_1001F7664();
        v61();
        [v33 setDefaultActionURL:v60];

        uint64_t v62 = *v48;
        if (*v48)
        {
          swift_retain();
          v62(v54, v55, v33);
          sub_100235C84();
        }

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_endAccess();

        ((void (*)(unsigned char *, uint64_t))v29)(v20, v8);
      }
    }
    else
    {
      swift_endAccess();
      int v43 = *(void (**)(void))(v10 + 8);
      sub_100235B60();
      v43();
      id v44 = [v3 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v45 = (uint64_t *)(v1
                      + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID);
      sub_100235AC8();
      id v46 = sub_100223A18((uint64_t)v17, *v45);
      swift_endAccess();
      sub_100235B60();
      v43();
      if (v46)
      {
        id v47 = [v3 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1002024E8();
        sub_10027F808((uint64_t)v3, (uint64_t)v14);
        sub_100235B60();
        v43();
        swift_endAccess();
      }
    }
  }
  sub_1001FCC08();
}

void sub_10022FE0C(int a1, id a2)
{
  id v4 = [a2 link];
  if (v4)
  {
    id v10 = v4;
    if (([a2 hasJoined] & 1) == 0
      && [a2 isAnyOtherAccountDeviceActive])
    {
      unint64_t v5 = sub_100226CA8(v10);
      uint64_t v7 = v6;
      uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v2
                                                            + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
      if (v8)
      {
        unint64_t v9 = v5;
        sub_100235BA0();
        v8(v9, v7);
        sub_100208490((uint64_t)v8);
      }
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10022FF6C()
{
  sub_1001FCC38();
  id v4 = v3;
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235BE8();
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *uint64_t v1 = v8;
  sub_100235D68();
  v9();
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = (char **)(v6 + 8);
  uint64_t v12 = sub_100235CD4();
  v13(v12);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v11 = &selRef_generatorDescriptor;
  uint64_t v2 = &selRef_generatorDescriptor;
  if (([v4 hasJoined] & 1) == 0
    && [v4 state] != (id)1
    && ([v4 ignoreLMIRequests] & 1) == 0)
  {
    id v21 = [v4 pendingMembers];
    sub_100235B44();
    sub_100235CEC((unint64_t *)&qword_1005858C0);
    sub_100235CB8();

    uint64_t v16 = [v4 link];
    uint64_t v22 = sub_100235E2C();
    sub_10022D2D0(v22, v23, v16);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (qword_100583A38 != -1) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v14 = type metadata accessor for Logger();
  sub_1001F5F88(v14, (uint64_t)qword_100594CA0);
  uint64_t v15 = v4;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = (void *)sub_100235BB8();
    *(_DWORD *)uint64_t v18 = 67109634;
    [v15 v11[246]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 8) = 1024;
    [v15 v2[335]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 14) = 2112;
    id v20 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skip posting pending member notification because hasJoined: %{BOOL}d, ignoreLMIRequests: %{BOOL}d for conversation: %@", (uint8_t *)v18, 0x18u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    uint64_t v16 = v15;
  }
LABEL_10:

  sub_1001FCC08();
}

void sub_10023030C()
{
  sub_1001FCC38();
  id v4 = v3;
  id v40 = v5;
  id v41 = v6;
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCC70();
  uint64_t v11 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v11 - 8);
  sub_1001FCC88();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v15 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *(void *)(v14 - v13) = v15;
  sub_100235D68();
  v16();
  id v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  sub_100235C00();
  v18();
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_11:
    uint64_t v29 = type metadata accessor for Logger();
    sub_1001F5F88(v29, (uint64_t)qword_100594CA0);
    id v30 = v4;
    id v31 = v41;
    id v32 = v30;
    id v33 = v31;
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = sub_100235B88();
      BOOL v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138412546;
      id v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v37 = v32;

      *(_WORD *)(v36 + 12) = 2112;
      id v39 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v37[1] = v33;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Tracked pending member changed, but not a locally owned link -- ignoring %@ %@", (uint8_t *)v36, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    goto LABEL_9;
  }
  id v19 = [v4 groupUUID];
  if (!v19)
  {
    sub_1001F0530(v1, 1, 1, v7);
    goto LABEL_8;
  }
  id v20 = v19;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v7);
  sub_1001F0530(v1, 0, 1, v7);
  if (sub_1001F758C(v1, 1, v7) == 1)
  {
LABEL_8:
    sub_100235804(v1, (uint64_t *)&unk_100585580);
    goto LABEL_9;
  }
  sub_100235804(v1, (uint64_t *)&unk_100585580);
  if (![v4 isLocallyCreated])
  {
    if (qword_100583A38 == -1) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  id v21 = [v40 incomingPendingConversations];
  sub_100235B44();
  sub_100235CEC(&qword_100585868);
  sub_100235CB8();

  id v22 = v4;
  uint64_t v23 = sub_100235E2C();
  sub_100224A14(v23, v24);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26)
  {
    id v27 = [v26 pendingMembers];
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10022D2D0(v28, 0, v22);
    swift_bridgeObjectRelease();
  }
LABEL_9:
  sub_1001FCC08();
}

void sub_10023084C()
{
  sub_1001FCC38();
  id v80 = v3;
  uint64_t v5 = v4;
  uint64_t v79 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v77 = v6;
  __chkstk_darwin(v7);
  sub_100235A90();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v72 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v72 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_1002024D0();
  uint64_t v78 = v0;
  id v17 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *uint64_t v1 = v17;
  sub_100235D68();
  v18();
  id v19 = v17;
  char v20 = _dispatchPreconditionTest(_:)();
  id v22 = *(void (**)(void *, uint64_t))(v15 + 8);
  id v21 = (id)(v15 + 8);
  v22(v1, v13);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_19:
    uint64_t v62 = type metadata accessor for Logger();
    sub_1001F5F88(v62, (uint64_t)qword_100594CA0);
    id v63 = v21;
    int v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)sub_100235B18();
      uint64_t v82 = sub_100202470();
      *(_DWORD *)uint64_t v66 = 136315138;
      id v80 = v66 + 4;
      id v67 = [v63 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v70 = v69;
      sub_100235D8C();
      sub_100235C60();
      v71();
      uint64_t v81 = sub_1002344D8(v68, v70, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No notification for conversation UUID %s", v66, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    goto LABEL_22;
  }
  id v23 = [v5 activeConversations];
  sub_1001F6204(0, &qword_100585860);
  sub_100210D5C(&qword_100585868, &qword_100585860);
  uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10022513C(v24);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();

  uint64_t v28 = v78;
  uint64_t v27 = v79;
  if (!v26)
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_1001F5F88(v29, (uint64_t)qword_100594CA0);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Removing handoff notification as there are no handoff-eligible conversations left", v32, 2u);
      sub_1001F63CC();
    }

    id v33 = *(void (**)(unint64_t))(v28
                                                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v33)
    {
      sub_100235BA0();
      unint64_t v34 = sub_100235A78();
      v33(v34);
      sub_100208490((uint64_t)v33);
    }
  }
  uint64_t v76 = v2;
  id v35 = v80;
  id v36 = [v80 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  BOOL v37 = (uint64_t *)(v28
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID);
  sub_100235AC8();
  uint64_t v38 = sub_100223278((uint64_t)v12, *v37);
  if (!v39)
  {
    swift_endAccess();
    uint64_t v75 = *(void (**)(void))(v77 + 8);
    sub_100235C60();
    v61();
    goto LABEL_18;
  }
  uint64_t v40 = v39;
  uint64_t v73 = v38;
  swift_endAccess();
  id v41 = *(void (**)(void))(v77 + 8);
  ((void (*)(char *, uint64_t))v41)(v12, v27);
  id v42 = [v35 UUID];
  uint64_t v43 = (uint64_t)v74;
  id v44 = v42;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = (uint64_t *)(v28
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID);
  sub_100235AC8();
  uint64_t v46 = sub_100223278(v43, *v45);
  uint64_t v75 = v41;
  if (!v47)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_100235C00();
    v41();
LABEL_18:
    id v21 = v80;
    if (qword_100583A38 == -1) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  uint64_t v48 = v28;
  uint64_t v49 = v47;
  uint64_t v50 = v46;
  swift_endAccess();
  sub_100235C00();
  v41();
  uint64_t v51 = (void (**)(uint64_t, uint64_t))(v48
                                               + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v48
                                                + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
  if (v52)
  {
    swift_retain();
    v52(v73, v40);
    sub_100208490((uint64_t)v52);
  }
  swift_bridgeObjectRelease();
  uint64_t v53 = *v51;
  if (*v51)
  {
    swift_retain();
    v53(v50, v49);
    sub_100208490((uint64_t)v53);
  }
  swift_bridgeObjectRelease();
  id v54 = v80;
  id v55 = [v80 UUID];
  uint64_t v56 = v76;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002024E8();
  sub_1002CE344(v56);
  id v57 = v75;
  sub_100235D38();
  v57();
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v58 = [v54 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002024E8();
  sub_1002CE344(v56);
  sub_100235D38();
  v57();
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v59 = [v54 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002024E8();
  id v60 = (void *)sub_1002CE440(v56);
  sub_100235D38();
  v57();
  swift_endAccess();

LABEL_22:
  sub_1001FCC08();
}

void sub_10023108C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v6 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setCategoryIdentifier:v7];

  sub_100274858(0xD000000000000027, (void *)0x800000010047E1B0);
  sub_1001F081C(&qword_100584B20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F550;
  uint64_t v9 = *(uint64_t (**)(void))(v4 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName);
  swift_retain();
  id v10 = [a3 handle];
  uint64_t v11 = v9();
  uint64_t v13 = v12;

  swift_release();
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1001F3B08();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  String.init(format:_:)();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 setBody:v14];

  uint64_t v15 = *(void (**)(uint64_t))(v4
                                       + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName);
  swift_retain();
  v15(a2);
  swift_release();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 setTitle:v16];

  uint64_t v17 = sub_100228B30();
  sub_10036EEF0(v17, v18, v6);
  sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
  sub_100226E74(a3);
  sub_100235DC4();
  id v19 = v6;
  id v21 = sub_100362954(v4, (uint64_t)a3, v19, 0);
  [v21 setDestinations:3];
  sub_100228554(v21);
}

uint64_t sub_1002313C8()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager];
  id v2 = [v1 activeConversations];
  sub_100235B44();
  sub_100235CEC(&qword_100585868);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = v0;
  sub_100231830(v3, v4);
  swift_bridgeObjectRelease();
  id v5 = [v1 activeConversations];
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = sub_10039E66C(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v7) {
    v4[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_facetimeIsShowingOnScreen] = 0;
  }
  return result;
}

id sub_1002314DC(void **a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  if (sub_100226574(*a1))
  {
    uint64_t v27 = v6;
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1001F5F88(v10, (uint64_t)qword_100594CA0);
    id v11 = v9;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      int v25 = v14;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v29 = v24;
      uint64_t v26 = v2;
      *(_DWORD *)uint64_t v15 = 136315138;
      v22[1] = v15 + 4;
      id v23 = v15;
      id v16 = [v11 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v19 = v18;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v5);
      uint64_t v28 = sub_1002344D8(v17, v19, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v25, "In response to conversations changed, we determined that we should post an invite notification for conversation UUID %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10022702C(v11);
  }
  id result = [v9 state];
  if (result)
  {
    id v21 = *(void (**)(unint64_t, unint64_t))(a2
                                                                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v21)
    {
      swift_retain();
      v21(0xD00000000000001BLL, 0x800000010047E110);
      return (id)sub_100208490((uint64_t)v21);
    }
  }
  return result;
}

void sub_100231830(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100585860);
    sub_100210D5C(&qword_100585868, &qword_100585860);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v6 = v24;
    int64_t v7 = v25;
    unint64_t v8 = v26;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    int64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    int64_t v15 = v7;
    goto LABEL_24;
  }
  int64_t v15 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v15 < v20)
    {
      unint64_t v17 = *(void *)(v21 + 8 * v15);
      if (v17)
      {
LABEL_23:
        uint64_t v13 = (v17 - 1) & v17;
        unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
LABEL_24:
        for (i = *(id *)(*(void *)(v5 + 48) + 8 * v14); i; uint64_t v13 = v8)
        {
          uint64_t v27 = i;
          sub_1002314DC(&v27, (uint64_t)a2);

          if (v3) {
            break;
          }
          int64_t v7 = v15;
          unint64_t v8 = v13;
          if ((v5 & 0x8000000000000000) == 0) {
            goto LABEL_8;
          }
LABEL_10:
          if (!__CocoaSet.Iterator.next()()) {
            break;
          }
          sub_1001F6204(0, &qword_100585860);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id i = v27;
          swift_unknownObjectRelease();
          int64_t v15 = v7;
        }
        goto LABEL_34;
      }
      int64_t v18 = v7 + 2;
      if (v7 + 2 < v20)
      {
        unint64_t v17 = *(void *)(v21 + 8 * v18);
        if (v17) {
          goto LABEL_22;
        }
        int64_t v18 = v7 + 3;
        if (v7 + 3 >= v20) {
          goto LABEL_34;
        }
        unint64_t v17 = *(void *)(v21 + 8 * v18);
        if (v17)
        {
LABEL_22:
          int64_t v15 = v18;
          goto LABEL_23;
        }
        int64_t v18 = v7 + 4;
        if (v7 + 4 < v20)
        {
          unint64_t v17 = *(void *)(v21 + 8 * v18);
          if (v17) {
            goto LABEL_22;
          }
          int64_t v15 = v7 + 5;
          if (v7 + 5 < v20)
          {
            unint64_t v17 = *(void *)(v21 + 8 * v15);
            if (!v17)
            {
              int64_t v19 = v7 + 6;
              while (v19 < v20)
              {
                unint64_t v17 = *(void *)(v21 + 8 * v19++);
                if (v17)
                {
                  int64_t v15 = v19 - 1;
                  goto LABEL_23;
                }
              }
              goto LABEL_34;
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_34:
    sub_100206FA0();

    return;
  }
  __break(1u);
}

void sub_100231BA4()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  type metadata accessor for URL();
  sub_1001F6398();
  __chkstk_darwin(v11);
  sub_1001F2514();
  id v158 = [v3 handoffEligibility];
  if (!v158)
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1001F5F88(v31, (uint64_t)qword_100594CA0);
    id v159 = v3;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v22, v32))
    {

      goto LABEL_15;
    }
    id v33 = (uint8_t *)sub_100235B18();
    v164[0] = sub_100202470();
    *(_DWORD *)id v33 = 136315138;
    id v34 = [v159 UUID];
    uint64_t v35 = v10;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v35, v4);
    uint64_t v39 = sub_1002344D8(v36, v38, v164);
    sub_100235D04(v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v32, "Not posting handoff nearby notification for conversation %s because it did not have handoff eligibility", v33, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
LABEL_10:

    goto LABEL_75;
  }
  id v12 = [*(id *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager) activeConversations];
  sub_100235C6C();
  sub_1001F6204(v13, v14);
  sub_100235C6C();
  sub_100210D5C(v15, v16);
  uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100225424(v17);
  int64_t v19 = v18;
  swift_bridgeObjectRelease();

  if (v19)
  {
    if (qword_100583A38 != -1) {
      goto LABEL_77;
    }
    goto LABEL_4;
  }
  if ([v3 avMode] == (id)2)
  {
    uint64_t v40 = 0xD000000000000010;
    id v41 = "FACETIME_SERVICE";
  }
  else
  {
    uint64_t v40 = 0xD000000000000016;
    id v41 = "FACETIME_AUDIO_SERVICE";
  }
  id v44 = sub_100274858(v40, (void *)((unint64_t)(v41 - 32) | 0x8000000000000000));
  uint64_t v46 = v45;
  id v47 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  NSString v48 = String._bridgeToObjectiveC()();
  sub_100235D74((uint64_t)v48, "setCategoryIdentifier:");

  uint64_t v49 = *(void (**)(void *))(v1
                                      + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName);
  swift_retain();
  v49(v3);
  swift_release();
  NSString v50 = String._bridgeToObjectiveC()();
  uint64_t v51 = swift_bridgeObjectRelease();
  v156 = v47;
  sub_100235D74(v51, "setTitle:");

  uint64_t v52 = sub_100235438(v158, (SEL *)&selRef_localizedDeviceCategory);
  if (v53)
  {
    uint64_t v54 = v52;
    id v55 = v53;
    v164[0] = (uint64_t)v44;
    v164[1] = v46;
    v56._countAndFlagsBits = 2108704;
    v56._object = (void *)0xE300000000000000;
    String.append(_:)(v56);
    v57._countAndFlagsBits = v54;
    v57._object = v55;
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
  }
  NSString v58 = String._bridgeToObjectiveC()();
  uint64_t v59 = swift_bridgeObjectRelease();
  sub_100235D74(v59, "setSubtitle:");

  NSString v60 = String._bridgeToObjectiveC()();
  id v61 = (id)TUStringKeyForProduct();

  if (!v61) {
    goto LABEL_80;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v62 = sub_100235D8C();
  sub_100274858(v62, v63);
  sub_100235D44();
  swift_bridgeObjectRelease();
  sub_100235AE0();
  NSString v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v47 setBody:v64];

  uint64_t v65 = sub_100228B30();
  sub_10036EEF0(v65, v66, v47);
  AnyHashable.init<A>(_:)();
  id v67 = objc_msgSend(self, "tu_conversationHandoffDynamicIdentifierForEligibility:", v158);
  uint64_t v68 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v69;

  v163 = &type metadata for String;
  id v160 = v68;
  uint64_t v161 = v70;
  id v71 = [v47 userInfo];
  sub_100235C40();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002C2704((uint64_t)&v160, (uint64_t)v164);
  sub_100235C40();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v73 = swift_bridgeObjectRelease();
  sub_100235D74(v73, "setUserInfo:");

  [v47 setInterruptionLevel:0];
  v155 = v3;
  id v74 = [v3 remoteMembers];
  uint64_t v3 = (void *)sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  uint64_t v75 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v75 & 0xC000000000000001) == 0)
  {
    uint64_t v76 = sub_100234D68(v75);
    goto LABEL_45;
  }
  uint64_t v76 = (uint64_t)&_swiftEmptySetSingleton;
  v164[0] = (uint64_t)&_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_43:
    swift_release();
LABEL_45:
    uint64_t v99 = sub_10039E66C(v76);
    if (!v99)
    {
      swift_release();
LABEL_67:
      sub_10036EF54((uint64_t)_swiftEmptyArrayStorage, v156);
      id v131 = [self sharedInstance];
      id v132 = [v131 conversationManager];

      id v133 = [v132 joinRequestForApplicableConversationWithHandoffEligibility:v158];
      if (v133)
      {
        id v134 = [v133 URL];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        URL._bridgeToObjectiveC()(v135);
        v137 = v136;
        sub_1001F7664();
        v138();
        [v156 setDefaultActionURL:v137];
      }
      sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
      id v139 = v156;
      id v140 = sub_100362954(0xD00000000000001BLL, 0x800000010047E110, v139, 0);
      if (qword_100583A38 != -1) {
        swift_once();
      }
      uint64_t v141 = type metadata accessor for Logger();
      sub_1001F5F88(v141, (uint64_t)qword_100594CA0);
      id v142 = v140;
      id v143 = v155;
      id v144 = v142;
      id v145 = v143;
      v146 = Logger.logObject.getter();
      os_log_type_t v147 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v146, v147))
      {
        uint64_t v148 = sub_100235B88();
        v157 = (void *)sub_100235BB8();
        v164[0] = sub_100202470();
        *(_DWORD *)uint64_t v148 = 138412546;
        id v160 = v144;
        id v149 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v157 = v144;

        *(_WORD *)(v148 + 12) = 2080;
        id v150 = [v145 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v153 = v152;
        sub_1001F7664();
        v154();
        id v160 = (id)sub_1002344D8(v151, v153, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Posting notification request %@ for handoff eligible conversation UUID %s nearby", (uint8_t *)v148, 0x16u);
        sub_1001F081C(&qword_100585900);
        sub_100235DAC();
        sub_1001F63CC();
        sub_100235DAC();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
      }
      [v144 setDestinations:6];
      sub_100228554(v144);

LABEL_75:
      sub_1001FCC08();
      return;
    }
    uint64_t v100 = v99;
    sub_1002E3EC4();
    if ((v76 & 0xC000000000000001) != 0)
    {
      id v101 = (void *)__CocoaSet.startIndex.getter();
      char v103 = 1;
    }
    else
    {
      id v101 = (void *)sub_100261A1C(v76);
      char v103 = v104 & 1;
    }
    id v160 = v101;
    uint64_t v161 = v102;
    char v162 = v103;
    if ((v100 & 0x8000000000000000) == 0)
    {
      uint64_t v105 = &selRef_generatorDescriptor;
      do
      {
        uint64_t v106 = (uint64_t)v160;
        uint64_t v107 = v161;
        char v108 = v162;
        uint64_t v109 = sub_100235D98();
        sub_10024736C(v109, v110, v111, v112);
        v114 = v113;
        uint64_t v115 = sub_1003577F4([v113 v105[46]]);
        if (v116)
        {
          uint64_t v117 = v115;
          uint64_t v118 = v116;
        }
        else
        {
          id v119 = [v114 v105[46]];
          id v120 = [v119 value];

          uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v118 = v121;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002E3EC4();
        }
        unint64_t v122 = _swiftEmptyArrayStorage[2];
        if (v122 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_1002E3EC4();
        }
        _swiftEmptyArrayStorage[2] = v122 + 1;
        v123 = &_swiftEmptyArrayStorage[2 * v122];
        v123[4] = v117;
        v123[5] = v118;
        if ((v76 & 0xC000000000000001) != 0)
        {
          uint64_t v105 = &selRef_generatorDescriptor;
          if ((v108 & 1) == 0) {
            goto LABEL_79;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_1001F081C(&qword_1005858F0);
          v130 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v130(v164, 0);
        }
        else
        {
          uint64_t v124 = sub_100235D98();
          v125 = (void *)sub_100261934(v124);
          uint64_t v127 = v126;
          char v129 = v128;
          sub_10023561C(v106, v107, v108);
          id v160 = v125;
          uint64_t v161 = v127;
          char v162 = v129 & 1;
          uint64_t v105 = &selRef_generatorDescriptor;
        }
        --v100;
      }
      while (v100);
      sub_10023561C((uint64_t)v160, v161, v162);
      swift_release();
      goto LABEL_67;
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    return;
  }
  while (1)
  {
    swift_dynamicCast();
    id v77 = v160;
    id v78 = [v160 handle];
    id v79 = [v78 value];

    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v82 = v81;

    swift_bridgeObjectRelease();
    uint64_t v83 = HIBYTE(v82) & 0xF;
    if ((v82 & 0x2000000000000000) == 0) {
      uint64_t v83 = v80 & 0xFFFFFFFFFFFFLL;
    }
    if (v83)
    {
      id v84 = [v77 handle];
      id v85 = [v84 value];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v86 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      LOBYTE(v85) = [v86 destinationIdIsTemporary];

      if ((v85 & 1) == 0) {
        break;
      }
    }

LABEL_41:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v76 = v164[0];
      goto LABEL_43;
    }
  }
  id v87 = v160;
  uint64_t v88 = v164[0];
  if (*(void *)(v164[0] + 24) <= *(void *)(v164[0] + 16))
  {
    sub_1002E0CB4();
    uint64_t v88 = v164[0];
  }
  Swift::Int v89 = NSObject._rawHashValue(seed:)(*(void *)(v88 + 40));
  uint64_t v90 = v88 + 56;
  uint64_t v91 = -1 << *(unsigned char *)(v88 + 32);
  unint64_t v92 = v89 & ~v91;
  unint64_t v93 = v92 >> 6;
  if (((-1 << v92) & ~*(void *)(v88 + 56 + 8 * (v92 >> 6))) != 0)
  {
    unint64_t v94 = __clz(__rbit64((-1 << v92) & ~*(void *)(v88 + 56 + 8 * (v92 >> 6)))) | v92 & 0x7FFFFFFFFFFFFFC0;
LABEL_40:
    *(void *)(v90 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v94;
    *(void *)(*(void *)(v88 + 48) + 8 * v94) = v87;
    ++*(void *)(v88 + 16);
    goto LABEL_41;
  }
  char v95 = 0;
  unint64_t v96 = (unint64_t)(63 - v91) >> 6;
  while (++v93 != v96 || (v95 & 1) == 0)
  {
    BOOL v97 = v93 == v96;
    if (v93 == v96) {
      unint64_t v93 = 0;
    }
    v95 |= v97;
    uint64_t v98 = *(void *)(v90 + 8 * v93);
    if (v98 != -1)
    {
      unint64_t v94 = __clz(__rbit64(~v98)) + (v93 << 6);
      goto LABEL_40;
    }
  }
  __break(1u);
  __break(1u);
LABEL_77:
  swift_once();
LABEL_4:
  uint64_t v20 = type metadata accessor for Logger();
  sub_1001F5F88(v20, (uint64_t)qword_100594CA0);
  id v21 = v3;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)sub_100235B18();
    v164[0] = sub_100202470();
    *(_DWORD *)uint64_t v24 = 136315138;
    id v25 = [v21 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v28 = v27;
    sub_100235D50();
    v29();
    uint64_t v30 = sub_1002344D8(v26, v28, v164);
    sub_100235D04(v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Not posting user notification for handoff eligible conversation %s because there's already a local non-waiting conversation", v24, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    goto LABEL_10;
  }

LABEL_15:
  sub_1001FCC08();
}

void sub_100232D1C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1001FCCD0();
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594CA0);
  id v5 = v2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)sub_100235B18();
    uint64_t v22 = (void *)sub_100235BB8();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v23 = (uint64_t)v5;
    id v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Handoff eligibility changed for %@", v8, 0xCu);
    sub_1001F081C(&qword_100585900);
    sub_100235DAC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  id v10 = objc_msgSend(v5, "handoffEligibility", v22);

  if (v10)
  {
    sub_100231BA4();
  }
  else
  {
    id v11 = v5;
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)sub_100235B18();
      uint64_t v23 = sub_100202470();
      *(_DWORD *)unint64_t v14 = 136315138;
      id v15 = [v11 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v18 = v17;
      sub_100235D8C();
      sub_1001F7664();
      v19();
      sub_1002344D8(v16, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing handoff eligible nearby notification for conversation UUID %s", v14, 0xCu);
      sub_100235DAC();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    uint64_t v20 = *(void (**)(unint64_t))(v0
                                                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v20)
    {
      sub_100235BA0();
      unint64_t v21 = sub_100235A78();
      v20(v21);
      sub_100235C84();
    }
  }
  sub_1001FCC08();
}

void sub_100233138()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCC88();
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594CA0);
  id v12 = v4;
  id v13 = v6;
  id v14 = v12;
  id v15 = v13;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v32 = v2;
    uint64_t v18 = sub_100235B88();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v31 = v16;
    id v19 = [v14 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100235394((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t v30 = v17;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    uint64_t v23 = *(void (**)(void))(v9 + 8);
    ((void (*)(uint64_t, uint64_t))v23)(v1, v7);
    sub_1002344D8(v20, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    id v24 = [v15 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100235D44();
    sub_100235C60();
    v23();
    uint64_t v25 = sub_100235AE0();
    sub_1002344D8(v25, v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v30, "Replacing handoff eligible nearby notification from old conversation UUID %s to new conversation UUID %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    uint64_t v2 = v32;
    sub_1001F63CC();
  }
  else
  {
  }
  unint64_t v28 = *(void (**)(unint64_t))(v2
                                                + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
  if (v28)
  {
    sub_100235BA0();
    unint64_t v29 = sub_100235A78();
    v28(v29);
    sub_100235C84();
  }
  sub_100231BA4();
  sub_1001FCC08();
}

uint64_t sub_100233520()
{
  sub_1002018DC(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100233560(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100233578()
{
  sub_10022959C((void *)(v0 + 16), *(void *)(v0 + 56));
}

uint64_t sub_100233584(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100233594()
{
  return swift_release();
}

unint64_t sub_10023359C(Swift::UInt32 a1)
{
  sub_100235B70();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100233B04(a1, v2);
}

unint64_t sub_100233600(Swift::UInt a1)
{
  sub_100235B70();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100233BA0(a1, v2);
}

unint64_t sub_100233664()
{
  sub_100235B70();
  String.hash(into:)();
  Hasher._finalize()();
  uint64_t v0 = sub_100235CD4();

  return sub_100233C3C(v0, v1, v2);
}

unint64_t sub_1002336D0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100233D20(a1, v4);
}

unint64_t sub_100233714(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100233BA0(a1, v2);
}

uint64_t sub_100233758()
{
  sub_100235B70();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return sub_100234120(v0);
}

unint64_t sub_1002337A4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100235394((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100233DE8(a1, v2);
}

unint64_t sub_10023383C(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();
  return sub_100233B04(a1, v2);
}

unint64_t sub_10023387C(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100233FA8(a1, v2);
}

uint64_t sub_100233910()
{
  sub_100235B70();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  return sub_100234120(v0);
}

uint64_t sub_100233974(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10023428C(a1, v4);
}

unint64_t sub_1002339C4(char a1)
{
  char v1 = a1 & 1;
  Swift::Int v2 = sub_1002EFD70();

  return sub_10023414C(v1, v2);
}

uint64_t sub_100233A08(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10023428C(a1, v4);
}

unint64_t sub_100233A58(uint64_t a1)
{
  sub_100235B70();
  type metadata accessor for CFString(0);
  sub_100235394((unint64_t *)&unk_1005858B0, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10023437C(a1, v2);
}

unint64_t sub_100233B04(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100233BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100233C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100233D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1002353DC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100234D14((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100233DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    id v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100235394((unint64_t *)&qword_1005858A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100233FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100234120(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

unint64_t sub_10023414C(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x656E6F6850;
    }
    else {
      uint64_t v6 = 0x656D695465636146;
    }
    if (a1) {
      unint64_t v7 = 0xE500000000000000;
    }
    else {
      unint64_t v7 = 0xE800000000000000;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x656E6F6850 : 0x656D695465636146;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE800000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t sub_10023428C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  sub_100235B04();
  if (v6)
  {
    sub_1001F6204(0, v5);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * v4);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v3;
      uint64_t v4 = (v4 + 1) & v9;
      sub_100235B04();
      if (v10)
      {
        do
        {
          id v11 = *(id *)(*(void *)(v2 + 48) + 8 * v4);
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            break;
          }
          uint64_t v4 = (v4 + 1) & v9;
          sub_100235B04();
        }
        while ((v13 & 1) != 0);
      }
    }
  }
  return v4;
}

unint64_t sub_10023437C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    char v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100235394((unint64_t *)&unk_1005858B0, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1002344D8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1002345AC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100201880((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100201880((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1002018DC((uint64_t)v12);
  return v7;
}

uint64_t sub_1002345AC(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100234704((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_1002347DC(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_100234704(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_1002347DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100234874(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100234AAC(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100234AAC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100234874(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_1002349E8(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1002349E8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1001F081C((uint64_t *)&unk_100585870);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100234A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_100235C10(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_100235C10(v3);
    return v4 | 8;
  }
}

char *sub_100234AAC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C((uint64_t *)&unk_100585870);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  char v12 = v10 + 32;
  char v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100234C5C(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100234B84(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100234B84(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100234C5C(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100234CEC(void **a1)
{
  return sub_100229C78(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_100234D14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100234D68(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    char v5 = (uint64_t *)((char *)&v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1002DF3E4(0, v4, v5);
    sub_100234ED8((uint64_t)v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v8 = (void *)swift_slowAlloc();
    sub_1002DF3E4(0, v4, v8);
    sub_100234ED8((uint64_t)v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void sub_100234ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  int64_t v3 = 0;
  uint64_t v24 = a3 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v7 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v8 = v7 | (v3 << 6);
LABEL_17:
    id v12 = *(id *)(*(void *)(a3 + 48) + 8 * v8);
    id v13 = [v12 handle];
    id v14 = [v13 value];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      id v19 = [v12 handle];
      NSString v20 = [v19 value];

      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      unsigned __int8 v21 = [v20 destinationIdIsTemporary];

      if ((v21 & 1) == 0)
      {
        *(void *)(a1 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        BOOL v9 = __OFADD__(v23++, 1);
        if (v9) {
          goto LABEL_34;
        }
      }
    }
    else
    {
    }
  }
  BOOL v9 = __OFADD__(v3++, 1);
  if (v9)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v3 >= v25) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v24 + 8 * v3);
  if (v10)
  {
LABEL_16:
    unint64_t v6 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v3 << 6);
    goto LABEL_17;
  }
  int64_t v11 = v3 + 1;
  if (v3 + 1 >= v25) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v24 + 8 * v11);
  if (v10) {
    goto LABEL_15;
  }
  int64_t v11 = v3 + 2;
  if (v3 + 2 >= v25) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v24 + 8 * v11);
  if (v10) {
    goto LABEL_15;
  }
  int64_t v11 = v3 + 3;
  if (v3 + 3 >= v25)
  {
LABEL_31:
    swift_retain();
    sub_1002E54A8();
    return;
  }
  unint64_t v10 = *(void *)(v24 + 8 * v11);
  if (v10)
  {
LABEL_15:
    int64_t v3 = v11;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v3 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v3 >= v25) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v24 + 8 * v3);
    ++v11;
    if (v10) {
      goto LABEL_16;
    }
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

void sub_10023519C(uint64_t a1, void *a2)
{
  sub_1001F6204(0, (unint64_t *)&qword_100585948);
  sub_100210D5C((unint64_t *)&qword_100585950, (unint64_t *)&qword_100585948);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setInvitationPreferences:isa];
}

uint64_t sub_100235254(void *a1)
{
  id v2 = [a1 linkName];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1002352C4(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setActiveParticipantHandles:isa];
}

id sub_100235330(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 faceTimeAppViewLinkDetailsURLForPseudonym:v4];

  return v5;
}

uint64_t sub_100235394(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002353DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100235438(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100235D44();
  }
  else
  {
    sub_100235C78();
  }
  return sub_100235AE0();
}

Swift::Int sub_10023548C(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002354D0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100235DC4();
  Hasher.init(_seed:)();
  sub_100235C6C();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10023553C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1002355C4()
{
  sub_10013770C();
  v1(0);
  sub_10020233C();
  sub_100235D5C();
  v2();
  return v0;
}

uint64_t sub_10023561C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100235628()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100235660(void *a1)
{
  sub_1002279D4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100235668()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002356B0()
{
  sub_10022879C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void *))(v0 + 32));
}

uint64_t sub_1002356BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002356F4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10023573C(unint64_t a1)
{
  return sub_10022E288(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100235748()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100235788()
{
  sub_100228554(*(void **)(v0 + 24));
}

uint64_t sub_1002357B0()
{
  sub_10013770C();
  sub_1001F081C(v1);
  sub_10020233C();
  sub_100235D5C();
  v2();
  return v0;
}

uint64_t sub_100235804(uint64_t a1, uint64_t *a2)
{
  sub_1001F081C(a2);
  sub_10020233C();
  sub_1001F7664();
  v3();
  return a1;
}

uint64_t sub_100235858()
{
  return sub_100235924((uint64_t (*)(unint64_t, uint64_t))sub_10022BBFC);
}

uint64_t sub_100235874()
{
  type metadata accessor for Notification();
  sub_10020233C();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v5();

  return _swift_deallocObject(v0, v4 + 8, v3);
}

uint64_t sub_10023590C()
{
  return sub_100235924((uint64_t (*)(unint64_t, uint64_t))sub_10022A794);
}

uint64_t sub_100235924(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for Notification() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v4);
}

uint64_t sub_1002359C4()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002359FC()
{
  sub_10022B5C4(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_100235A08()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100235A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002D1714(a1, (a2 - 32) | 0x8000000000000000, v2, v3, 0);
}

unint64_t sub_100235A78()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100235AAC()
{
  return swift_allocObject();
}

uint64_t sub_100235AC8()
{
  return swift_beginAccess();
}

uint64_t sub_100235AE0()
{
  return v0;
}

uint64_t sub_100235AEC()
{
  return specialized Array._endMutation()();
}

uint64_t sub_100235B18()
{
  return swift_slowAlloc();
}

uint64_t sub_100235B30()
{
  return v0;
}

uint64_t sub_100235B44()
{
  return sub_1001F6204(0, v0);
}

uint64_t sub_100235B70()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_100235B88()
{
  return swift_slowAlloc();
}

uint64_t sub_100235BA0()
{
  return swift_retain();
}

uint64_t sub_100235BB8()
{
  return swift_slowAlloc();
}

id sub_100235BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100229174(a1, a2, a3, a4, 0);
}

unint64_t sub_100235C10(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_100235C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + a1);
  return sub_100208490(v3);
}

uint64_t sub_100235C84()
{
  return sub_100208490(v0);
}

uint64_t sub_100235C9C()
{
  return sub_1002344D8(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_100235CB8()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100235CD4()
{
  return v0;
}

char *sub_100235CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t sub_100235CEC(unint64_t *a1)
{
  return sub_100210D5C(a1, v1);
}

uint64_t sub_100235D04(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

id sub_100235D18@<X0>(uint64_t a1@<X8>)
{
  return sub_100274858(0xD000000000000011, (void *)((a1 - 32) | 0x8000000000000000));
}

id sub_100235D74(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100235D8C()
{
  return v0;
}

uint64_t sub_100235D98()
{
  return v0;
}

uint64_t sub_100235DAC()
{
  return swift_arrayDestroy();
}

uint64_t sub_100235DD0(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100235DE4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100235E18()
{
  return 2003134838;
}

uint64_t sub_100235E2C()
{
  return v0;
}

BOOL sub_100235E38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050AAE8, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t sub_100235E80()
{
  return 0x6A2D656D2D74656CLL;
}

BOOL sub_100235EB0@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100235E38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100235EE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100235E80();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100235F0C(void *a1)
{
  if (![a1 isConversation]) {
    return 1;
  }
  uint64_t result = (uint64_t)[*(id *)(v1 + 16) activeConversationForCall:a1];
  if (result)
  {
    uint64_t v4 = (void *)result;
    if ([(id)result isOneToOneModeEnabled])
    {
      id v5 = [v4 mergedRemoteMembers];
      sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      sub_1002392FC();
      uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v7 = sub_10039E66C(v6);
      swift_bridgeObjectRelease();

      return v7 == 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t sub_100236000@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_1001F081C(&qword_100585A38);
  __chkstk_darwin(v7 - 8);
  BOOL v9 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for SoundDescriptorAction();
  sub_10020233C();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v119 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v118 = (uint64_t)&v113 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v113 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  NSString v20 = (char *)&v113 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v113 - v21;
  if (([a1 isEndpointOnCurrentDevice] & 1) != 0 || (a2 & 0x20) != 0)
  {
    uint64_t v117 = a3;
    id v25 = [a1 provider];
    unsigned int v26 = [v25 supportsCurrentPlatform];

    if (!v26)
    {
      uint64_t v23 = sub_1001F081C(&qword_100585A40);
      uint64_t v24 = v117;
      goto LABEL_17;
    }
    uint64_t v27 = swift_allocBox();
    uint64_t v29 = v28;
    uint64_t v30 = sub_1001F081C(&qword_100585A40);
    uint64_t v120 = v29;
    uint64_t v121 = v30;
    sub_1001F0530(v29, 1, 2, v30);
    if ((a2 & 0x20) != 0 && ([a1 isEndpointOnCurrentDevice] & 1) == 0)
    {
      sub_1002393F4();
      sub_100239120((uint64_t)v22, (void (*)(void))type metadata accessor for SoundDescriptorAction);
    }
    if ((a2 & 0x200) != 0 && ([a1 needsManualInCallSounds] & 1) == 0)
    {
      sub_1002393F4();
      sub_100239120((uint64_t)v22, (void (*)(void))type metadata accessor for SoundDescriptorAction);
    }
    if (a2)
    {
      sub_1002393F4();
      sub_100239120((uint64_t)v22, (void (*)(void))type metadata accessor for SoundDescriptorAction);
    }
    uint64_t v116 = v27;
    id v31 = sub_100236D8C();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a1;
    uint64_t v33 = sub_1002393DC();
    *(void *)(v33 + 16) = sub_100239060;
    *(void *)(v33 + 24) = v32;
    uint64_t v115 = v32;
    aBlock[4] = sub_100239094;
    aBlock[5] = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10039E628;
    uint64_t aBlock[3] = &unk_10050DFD8;
    id v34 = _Block_copy(aBlock);
    id v122 = a1;
    swift_retain();
    swift_release();
    uint64_t v35 = (uint64_t)[v31 anyCallPassesTest:v34];
    swift_unknownObjectRelease();
    _Block_release(v34);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v35)
      {
        uint64_t isEscapingClosureAtFileLocation = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_22;
      }
      uint64_t v35 = sub_1002393DC();
      *(void *)(v35 + 16) = sub_1002390B4;
      *(void *)(v35 + 24) = v3;
      swift_retain();
      sub_1003A4878();
      unint64_t v41 = *(void *)(v38 + 16);
      uint64_t v42 = v38;
      uint64_t isEscapingClosureAtFileLocation = v41 + 1;
      if (v41 < *(void *)(v38 + 24) >> 1)
      {
LABEL_21:
        sub_100239430(v38, v39, v40, v42);
        *(void *)(v43 + 32) = sub_1002390F0;
        *(void *)(v43 + 40) = v35;
LABEL_22:
        id v44 = v122;
        id v114 = [*(id *)(v3 + 16) activeConversationForCall:v122];
        if (sub_100235F0C(v44))
        {
          uint64_t v45 = sub_1002393DC();
          *(void *)(v45 + 16) = sub_1002391F4;
          *(void *)(v45 + 24) = v3;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100239384();
            uint64_t isEscapingClosureAtFileLocation = v102;
          }
          unint64_t v46 = *(void *)(isEscapingClosureAtFileLocation + 16);
          uint64_t v47 = isEscapingClosureAtFileLocation;
          if (v46 >= *(void *)(isEscapingClosureAtFileLocation + 24) >> 1)
          {
            sub_100239440();
            uint64_t v47 = v103;
          }
          *(void *)(v47 + 16) = v46 + 1;
          uint64_t v48 = v47 + 16 * v46;
          *(void *)(v48 + 32) = sub_100239380;
          *(void *)(v48 + 40) = v45;
          uint64_t v49 = sub_1002393DC();
          *(void *)(v49 + 16) = sub_1002391F8;
          *(void *)(v49 + 24) = v3;
          unint64_t v50 = *(void *)(v47 + 16);
          unint64_t v51 = *(void *)(v47 + 24);
          swift_retain();
          if (v50 >= v51 >> 1)
          {
            sub_100239440();
            uint64_t v47 = v104;
          }
          *(void *)(v47 + 16) = v50 + 1;
          uint64_t isEscapingClosureAtFileLocation = v47;
          uint64_t v52 = v47 + 16 * v50;
          *(void *)(v52 + 32) = sub_100239380;
          *(void *)(v52 + 40) = v49;
          if (([v122 isVideo] & 1) == 0)
          {
            uint64_t v53 = sub_1002393DC();
            *(void *)(v53 + 16) = sub_1002391FC;
            *(void *)(v53 + 24) = v3;
            unint64_t v54 = *(void *)(v47 + 16);
            unint64_t v55 = *(void *)(v47 + 24);
            swift_retain();
            if (v54 >= v55 >> 1)
            {
              sub_100239440();
              uint64_t v47 = v112;
            }
            *(void *)(v47 + 16) = v54 + 1;
            uint64_t isEscapingClosureAtFileLocation = v47;
            uint64_t v56 = v47 + 16 * v54;
            *(void *)(v56 + 32) = sub_100239380;
            *(void *)(v56 + 40) = v53;
          }
        }
        if ((a2 & 0x10000) != 0)
        {
          uint64_t v59 = sub_1002393DC();
          *(void *)(v59 + 16) = sub_1002391F0;
          *(void *)(v59 + 24) = v3;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100239384();
            uint64_t isEscapingClosureAtFileLocation = v105;
          }
          sub_1002393C8();
          if (v64)
          {
            sub_1002393A8();
            uint64_t v63 = v60;
          }
          sub_100239430(v60, v61, v62, v63);
          *(void *)(v65 + 32) = sub_100239380;
          *(void *)(v65 + 40) = v59;
          if ((a2 & 0x40000) == 0)
          {
LABEL_35:
            if ((a2 & 0x80000) == 0) {
              goto LABEL_36;
            }
            goto LABEL_51;
          }
        }
        else if ((a2 & 0x40000) == 0)
        {
          goto LABEL_35;
        }
        uint64_t v66 = sub_1002393DC();
        *(void *)(v66 + 16) = sub_1002391EC;
        *(void *)(v66 + 24) = v3;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100239384();
          uint64_t isEscapingClosureAtFileLocation = v106;
        }
        sub_1002393C8();
        if (v64)
        {
          sub_1002393A8();
          uint64_t v70 = v67;
        }
        sub_100239430(v67, v68, v69, v70);
        *(void *)(v71 + 32) = sub_100239380;
        *(void *)(v71 + 40) = v66;
        if ((a2 & 0x80000) == 0)
        {
LABEL_36:
          if ((a2 & 0x100000) == 0) {
            goto LABEL_37;
          }
          goto LABEL_56;
        }
LABEL_51:
        uint64_t v72 = sub_1002393DC();
        *(void *)(v72 + 16) = sub_1002391E8;
        *(void *)(v72 + 24) = v3;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100239384();
          uint64_t isEscapingClosureAtFileLocation = v107;
        }
        sub_1002393C8();
        if (v64)
        {
          sub_1002393A8();
          uint64_t v76 = v73;
        }
        sub_100239430(v73, v74, v75, v76);
        *(void *)(v77 + 32) = sub_100239380;
        *(void *)(v77 + 40) = v72;
        if ((a2 & 0x100000) == 0)
        {
LABEL_37:
          if ((a2 & 0x200000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_61;
        }
LABEL_56:
        uint64_t v78 = sub_1002393DC();
        *(void *)(v78 + 16) = sub_1002391E4;
        *(void *)(v78 + 24) = v3;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100239384();
          uint64_t isEscapingClosureAtFileLocation = v108;
        }
        sub_1002393C8();
        if (v64)
        {
          sub_1002393A8();
          uint64_t v82 = v79;
        }
        sub_100239430(v79, v80, v81, v82);
        *(void *)(v83 + 32) = sub_100239380;
        *(void *)(v83 + 40) = v78;
        if ((a2 & 0x200000) == 0)
        {
LABEL_38:
          if ((a2 & 0x400000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_66;
        }
LABEL_61:
        uint64_t v84 = sub_1002393DC();
        *(void *)(v84 + 16) = sub_1002391E0;
        *(void *)(v84 + 24) = v3;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100239384();
          uint64_t isEscapingClosureAtFileLocation = v109;
        }
        sub_1002393C8();
        if (v64)
        {
          sub_1002393A8();
          uint64_t v88 = v85;
        }
        sub_100239430(v85, v86, v87, v88);
        *(void *)(v89 + 32) = sub_100239380;
        *(void *)(v89 + 40) = v84;
        if ((a2 & 0x400000) == 0)
        {
LABEL_39:
          uint64_t v57 = isEscapingClosureAtFileLocation;
          unint64_t v58 = *(void *)(isEscapingClosureAtFileLocation + 16);
          if (!v58)
          {
LABEL_88:
            swift_bridgeObjectRelease();

            swift_beginAccess();
            sub_100239254();
            swift_release();
            return swift_release();
          }
LABEL_71:
          swift_beginAccess();
          uint64_t v94 = v57 + 40;
          do
          {
            char v95 = *(void (**)(id *, uint64_t *))(v94 - 8);
            v124[0] = v122;
            uint64_t v125 = a2;
            swift_retain();
            v95(v124, &v125);
            swift_release();
            if (sub_1001F758C((uint64_t)v9, 1, v123) == 1)
            {
              sub_1002392A8((uint64_t)v9, &qword_100585A38);
            }
            else
            {
              sub_100239200();
              sub_100239254();
              uint64_t v96 = v118;
              sub_100239254();
              int v97 = sub_1001F758C(v96, 2, v121);
              if (v97)
              {
                if (v97 == 1) {
                  unint64_t v98 = 1;
                }
                else {
                  unint64_t v98 = 2;
                }
              }
              else
              {
                sub_100239120(v118, (void (*)(void))type metadata accessor for SoundDescriptor);
                unint64_t v98 = 3;
              }
              uint64_t v99 = v119;
              sub_100239254();
              int v100 = sub_1001F758C(v99, 2, v121);
              if (v100)
              {
                if (v100 == 1) {
                  unint64_t v101 = 1;
                }
                else {
                  unint64_t v101 = 2;
                }
              }
              else
              {
                sub_100239120(v119, (void (*)(void))type metadata accessor for SoundDescriptor);
                unint64_t v101 = 3;
              }
              sub_100239120((uint64_t)v17, (void (*)(void))type metadata accessor for SoundDescriptorAction);
              if (v98 < v101) {
                sub_100239178((uint64_t)v20, v120);
              }
              sub_100239120((uint64_t)v20, (void (*)(void))type metadata accessor for SoundDescriptorAction);
            }
            v94 += 16;
            --v58;
          }
          while (v58);
          goto LABEL_88;
        }
LABEL_66:
        uint64_t v90 = sub_1002393DC();
        *(void *)(v90 + 16) = sub_1002391DC;
        *(void *)(v90 + 24) = v3;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100239384();
          uint64_t isEscapingClosureAtFileLocation = v110;
        }
        unint64_t v92 = *(void *)(isEscapingClosureAtFileLocation + 16);
        unint64_t v91 = *(void *)(isEscapingClosureAtFileLocation + 24);
        uint64_t v57 = isEscapingClosureAtFileLocation;
        unint64_t v58 = v92 + 1;
        if (v92 >= v91 >> 1)
        {
          sub_1003A4878();
          uint64_t v57 = v111;
        }
        *(void *)(v57 + 16) = v58;
        uint64_t v93 = v57 + 16 * v92;
        *(void *)(v93 + 32) = sub_100239380;
        *(void *)(v93 + 40) = v90;
        goto LABEL_71;
      }
    }
    sub_1002393A8();
    uint64_t v42 = v38;
    goto LABEL_21;
  }
  uint64_t v23 = sub_1001F081C(&qword_100585A40);
  uint64_t v24 = a3;
LABEL_17:

  return sub_1001F0530(v24, 1, 2, v23);
}

uint64_t sub_100236B70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SoundDescriptorAction();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = &v18[-v7];
  __chkstk_darwin(v6);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  sub_100239254();
  sub_100239254();
  uint64_t v12 = sub_1001F081C(&qword_100585A40);
  int v13 = sub_1001F758C((uint64_t)v8, 2, v12);
  if (v13)
  {
    if (v13 == 1) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = 2;
    }
  }
  else
  {
    sub_100239120((uint64_t)v8, (void (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v14 = 3;
  }
  sub_100239254();
  int v15 = sub_1001F758C((uint64_t)v5, 2, v12);
  if (v15)
  {
    if (v15 == 1) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = 2;
    }
  }
  else
  {
    sub_100239120((uint64_t)v5, (void (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v16 = 3;
  }
  uint64_t result = sub_100239120((uint64_t)v10, (void (*)(void))type metadata accessor for SoundDescriptorAction);
  if (v14 < v16)
  {
    swift_beginAccess();
    return sub_100239178(a1, v11);
  }
  return result;
}

id sub_100236D8C()
{
  id v1 = [*(id *)(v0 + 16) callContainer];

  return v1;
}

uint64_t sub_100236DC4@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ([a1 status] != 6 || (a2 & 1) == 0) {
    goto LABEL_15;
  }
  unsigned __int8 v8 = [sub_100236D8C() hasCurrentAudioCalls];
  swift_unknownObjectRelease();
  if (v8) {
    goto LABEL_15;
  }
  if (![a1 isEndpointOnCurrentDevice]) {
    goto LABEL_15;
  }
  [a1 callDuration];
  if (v9 <= 0.0
    && ([a1 isOutgoing] & 1) == 0
    && [a1 disconnectedReason] != 14)
  {
    goto LABEL_15;
  }
  if (![a1 needsManualInCallSounds]) {
    goto LABEL_15;
  }
  unsigned int v10 = [a1 disconnectedReason] - 5;
  if (v10 < 0x14 && ((0xE7603u >> v10) & 1) != 0)
  {
    uint64_t v11 = qword_100490778[v10];
    goto LABEL_20;
  }
  if ((*(unsigned char *)(v3 + 24) & 1) == 0)
  {
LABEL_15:
    uint64_t v12 = 1;
    goto LABEL_16;
  }
  uint64_t v11 = 6;
LABEL_20:
  sub_1002E9630(a1, v11, 0, a3);
  uint64_t v15 = sub_1001F081C(&qword_100585A40);
  sub_1001F0530(a3, 0, 2, v15);
  uint64_t v12 = 0;
LABEL_16:
  uint64_t v13 = type metadata accessor for SoundDescriptorAction();

  return sub_1001F0530(a3, v12, 1, v13);
}

uint64_t sub_100236F58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  __chkstk_darwin(v4);
  uint64_t v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v7);
  double v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ([a1 status] != 3
    || ![a1 needsManualInCallSounds]
    || (id v10 = [a1 provider],
        unsigned int v11 = [v10 supportsRinging],
        v10,
        !v11))
  {
    uint64_t v23 = a2;
    uint64_t v24 = 1;
    goto LABEL_13;
  }
  id v12 = [a1 provider];
  unsigned int v13 = [v12 isFaceTimeProvider];

  id v14 = a1;
  id v32 = [v14 provider];
  unsigned int v31 = [v14 isVideo];
  id v15 = [v14 soundRegion];

  uint64_t v16 = *(int *)(v7 + 32);
  uint64_t v17 = type metadata accessor for UUID();
  if (!v13)
  {
    sub_1001F0530(a2 + v16, 1, 1, v17);
    id v26 = v32;
    *(void *)a2 = 1;
    *(void *)(a2 + 8) = v26;
    *(unsigned char *)(a2 + 16) = v31;
    *(void *)(a2 + 24) = v15;
    *(unsigned char *)(a2 + *(int *)(v7 + 36)) = 0;
    uint64_t v27 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a2, 0, 2, v27);
    uint64_t v23 = a2;
    uint64_t v24 = 0;
LABEL_13:
    return sub_1001F0530(v23, v24, 1, v4);
  }
  sub_1001F0530((uint64_t)&v9[v16], 1, 1, v17);
  id v18 = v32;
  *(void *)double v9 = 1;
  *((void *)v9 + 1) = v18;
  v9[16] = v31;
  *((void *)v9 + 3) = v15;
  v9[*(int *)(v7 + 36)] = 1;
  sub_100239254();
  uint64_t v19 = sub_1001F081C(&qword_100585A40);
  sub_1001F0530((uint64_t)v6, 0, 2, v19);
  if ([v14 hasSentInvitation])
  {
    if ([v14 isVideo])
    {
      unsigned __int8 v20 = [sub_100236D8C() hasCurrentAudioCalls];
      swift_unknownObjectRelease();
      if ((v20 & 1) == 0)
      {
        sub_100239120((uint64_t)v9, (void (*)(void))type metadata accessor for SoundDescriptor);
LABEL_22:
        sub_100239200();
        uint64_t v23 = a2;
        uint64_t v24 = 0;
        return sub_1001F0530(v23, v24, 1, v4);
      }
    }
    if (([v14 isVideo] & 1) != 0
      || (id v21 = [sub_100236D8C() currentCallCount], swift_unknownObjectRelease(), v21 != (id)1))
    {
      sub_100239120((uint64_t)v9, (void (*)(void))type metadata accessor for SoundDescriptor);
    }
    else
    {
      unsigned __int8 v22 = [sub_100236D8C() hasCurrentVideoCalls];
      swift_unknownObjectRelease();
      sub_100239120((uint64_t)v9, (void (*)(void))type metadata accessor for SoundDescriptor);
      if ((v22 & 1) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v28 = type metadata accessor for SoundDescriptorAction;
    uint64_t v29 = (uint64_t)v6;
  }
  else
  {
    sub_100239120((uint64_t)v6, (void (*)(void))type metadata accessor for SoundDescriptorAction);
    uint64_t v28 = type metadata accessor for SoundDescriptor;
    uint64_t v29 = (uint64_t)v9;
  }
  sub_100239120(v29, (void (*)(void))v28);
  uint64_t v23 = a2;
  uint64_t v24 = 1;
  return sub_1001F0530(v23, v24, 1, v4);
}

uint64_t sub_1002373C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v70 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v70);
  uint64_t v3 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [sub_100236D8C() incomingCall];
  swift_unknownObjectRelease();
  if (v4)
  {
    self;
    uint64_t v5 = (void *)swift_dynamicCastObjCClass();
    if (!v5) {
  }
    }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = [sub_100236D8C() incomingVideoCall];
  swift_unknownObjectRelease();
  if (v6)
  {
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (!v7) {
  }
    }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = [sub_100236D8C() displayedCalls];
  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v9 >> 62))
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    id v12 = 0;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_16;
  }
LABEL_11:
  sub_1002DE19C(0, (v9 & 0xC000000000000001) == 0, v9);
  if ((v9 & 0xC000000000000001) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v10 = *(id *)(v9 + 32);
  }
  unsigned int v11 = v10;
  swift_bridgeObjectRelease();
  self;
  id v12 = (void *)swift_dynamicCastObjCClass();
  if (!v12) {

  }
LABEL_17:
  id v14 = [sub_100236D8C() activeVideoCall];
  swift_unknownObjectRelease();
  if (v14)
  {
    self;
    id v15 = (void *)swift_dynamicCastObjCClass();
    if (!v15) {
  }
    }
  else
  {
    id v15 = 0;
  }
  id v16 = v12;
  id v17 = [sub_100236D8C() frontmostBargeCall];
  swift_unknownObjectRelease();
  id v18 = v12;
  if (!v17)
  {
LABEL_25:
    if (v5) {
      goto LABEL_26;
    }
LABEL_29:
    if (!v7)
    {

      id v32 = v18;
      uint64_t v7 = v15;
      goto LABEL_42;
    }
    uint64_t v69 = v3;
    uint64_t v74 = a1;
    id v20 = v7;
    if (v15) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  self;
  uint64_t v19 = (void *)swift_dynamicCastObjCClass();
  if (v19)
  {
    id v18 = v19;
    if ([v19 status] == 1)
    {

      goto LABEL_25;
    }
  }

  id v18 = v12;
  if (!v5) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v69 = v3;
  uint64_t v74 = a1;
  id v20 = v5;
  if (v15)
  {
LABEL_27:
    id v73 = v16;
    id v21 = v15;
    goto LABEL_33;
  }
LABEL_31:
  if (!v18)
  {

    id v32 = v20;
    goto LABEL_41;
  }
  id v73 = v16;
  id v21 = v18;
  id v15 = 0;
LABEL_33:
  id v72 = v5;
  id v71 = v15;
  id v22 = [v21 uniqueProxyIdentifier];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  id v26 = [v20 uniqueProxyIdentifier];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  if (v23 == v27 && v25 == v29)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
    unint64_t v37 = &selRef_performBlock_;
    if ((![v21 needsManualInCallSounds]
       || ([v21 isEndpointOnCurrentDevice] & 1) == 0)
      && (![v20 needsManualInCallSounds]
       || ([v20 isEndpointOnCurrentDevice] & 1) == 0))
    {
      id v38 = [v21 provider];
      id v39 = [v38 identifier];

      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      id v42 = [v20 provider];
      id v43 = [v42 identifier];

      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;

      if (v68 == v44 && v41 == v46)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v37 = &selRef_performBlock_;
      if (v48)
      {

LABEL_63:
        uint64_t v34 = type metadata accessor for SoundDescriptorAction();
        uint64_t v35 = v74;
        goto LABEL_43;
      }
    }
    if (v7 && v12)
    {
      id v49 = v73;
      id v50 = v7;
      if ([v50 isVideoUpgradeFromCall:v49])
      {
        id v73 = [v50 v37[235]];
        unsigned __int8 v51 = [v50 isVideo];
        id v52 = [v50 soundRegion];

        unint64_t v54 = v69;
        uint64_t v53 = v70;
        uint64_t v55 = (uint64_t)&v69[*(int *)(v70 + 32)];
        uint64_t v56 = type metadata accessor for UUID();
        sub_1001F0530(v55, 1, 1, v56);

        *(void *)unint64_t v54 = 5;
        *((void *)v54 + 1) = v73;
        v54[16] = v51;
        *((void *)v54 + 3) = v52;
        v54[*(int *)(v53 + 36)] = 0;

LABEL_66:
        uint64_t v64 = v74;
        sub_100239200();
        uint64_t v65 = sub_1001F081C(&qword_100585A40);
        sub_1001F0530(v64, 0, 2, v65);
        uint64_t v66 = type metadata accessor for SoundDescriptorAction();
        return sub_1001F0530(v64, 0, 1, v66);
      }
    }
    id v57 = [v20 v37[235]];
    unsigned __int8 v58 = [v20 isVideo];
    id v59 = [v20 soundRegion];

    uint64_t v60 = v69;
    uint64_t v61 = v70;
    uint64_t v62 = (uint64_t)&v69[*(int *)(v70 + 32)];
    uint64_t v63 = type metadata accessor for UUID();
    sub_1001F0530(v62, 1, 1, v63);

    *(void *)uint64_t v60 = 4;
    *((void *)v60 + 1) = v57;
    v60[16] = v58;
    *((void *)v60 + 3) = v59;
    v60[*(int *)(v61 + 36)] = 0;
    goto LABEL_66;
  }

LABEL_40:
  id v33 = v71;
  id v32 = v72;

LABEL_41:
  a1 = v74;
LABEL_42:

  uint64_t v34 = type metadata accessor for SoundDescriptorAction();
  uint64_t v35 = a1;
LABEL_43:

  return sub_1001F0530(v35, 1, 1, v34);
}

uint64_t sub_100237BC4@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 4) != 0
    && [a1 isConnected]
    && [a1 needsManualInCallSounds])
  {
    sub_1002E9630(a1, 2, 0, a3);
    uint64_t v5 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v5);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = type metadata accessor for SoundDescriptorAction();

  return sub_1001F0530(a3, v6, 1, v7);
}

uint64_t sub_100237C7C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v9);
  unsigned int v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (([a1 isPTT] & 1) != 0
    || ([a1 status] != 6 ? (BOOL v12 = (*(void *)&a2 & 0x10000) == 0) : (BOOL v12 = 1), v12))
  {
    uint64_t v13 = type metadata accessor for SoundDescriptorAction();
    return sub_1001F0530(a3, 1, 1, v13);
  }
  else
  {
    unsigned int v15 = [a1 isUplinkMuted];
    id v16 = a1;
    id v17 = [v16 provider];
    unsigned __int8 v18 = [v16 isVideo];
    id v19 = [v16 soundRegion];

    uint64_t v20 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v21 = type metadata accessor for UUID();
    sub_1001F0530(v20, 1, 1, v21);
    uint64_t v22 = 10;
    if (!v15) {
      uint64_t v22 = 11;
    }
    *(void *)unsigned int v11 = v22;
    *((void *)v11 + 1) = v17;
    v11[16] = v18;
    *((void *)v11 + 3) = v19;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()();
    type metadata accessor for UUID();
    sub_1001F0530((uint64_t)v8, 0, 1, v21);
    sub_100202264((uint64_t)v8, (uint64_t)&v11[*(int *)(v9 + 32)]);
    sub_100239254();
    uint64_t v23 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v23);
    uint64_t v24 = type metadata accessor for SoundDescriptorAction();
    sub_1001F0530(a3, 0, 1, v24);
    return sub_100239120((uint64_t)v11, (void (*)(void))type metadata accessor for SoundDescriptor);
  }
}

uint64_t sub_100237F2C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v9);
  unsigned int v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x40000) != 0)
  {
    id v14 = a1;
    id v15 = [v14 provider];
    unsigned __int8 v16 = [v14 isVideo];
    id v17 = [v14 soundRegion];

    uint64_t v18 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v19 = type metadata accessor for UUID();
    sub_1001F0530(v18, 1, 1, v19);
    *(void *)unsigned int v11 = 13;
    *((void *)v11 + 1) = v15;
    v11[16] = v16;
    *((void *)v11 + 3) = v17;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()();
    sub_1001F0530((uint64_t)v8, 0, 1, v19);
    sub_100202264((uint64_t)v8, v18);
    sub_100239254();
    uint64_t v20 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction();
    sub_1001F0530(a3, 0, 1, v21);
    return sub_100239120((uint64_t)v11, (void (*)(void))type metadata accessor for SoundDescriptor);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction();
    return sub_1001F0530(a3, 1, 1, v12);
  }
}

uint64_t sub_100238184@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  if ((a1 & 0x80000) != 0) {
    sub_1002388DC();
  }
  uint64_t v3 = type metadata accessor for SoundDescriptorAction();

  return sub_1001F0530(a2, 1, 1, v3);
}

uint64_t sub_1002381D4@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v9);
  unsigned int v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100000) != 0)
  {
    id v14 = a1;
    id v15 = [v14 provider];
    unsigned __int8 v16 = [v14 isVideo];
    id v17 = [v14 soundRegion];

    uint64_t v18 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v19 = type metadata accessor for UUID();
    sub_1001F0530(v18, 1, 1, v19);
    *(void *)unsigned int v11 = 15;
    *((void *)v11 + 1) = v15;
    v11[16] = v16;
    *((void *)v11 + 3) = v17;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()();
    sub_1001F0530((uint64_t)v8, 0, 1, v19);
    sub_100202264((uint64_t)v8, v18);
    sub_100239254();
    uint64_t v20 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction();
    sub_1001F0530(a3, 0, 1, v21);
    return sub_100239120((uint64_t)v11, (void (*)(void))type metadata accessor for SoundDescriptor);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction();
    return sub_1001F0530(a3, 1, 1, v12);
  }
}

uint64_t sub_10023842C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v9);
  unsigned int v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x200000) != 0)
  {
    id v14 = a1;
    id v15 = [v14 provider];
    unsigned __int8 v16 = [v14 isVideo];
    id v17 = [v14 soundRegion];

    uint64_t v18 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v19 = type metadata accessor for UUID();
    sub_1001F0530(v18, 1, 1, v19);
    *(void *)unsigned int v11 = 16;
    *((void *)v11 + 1) = v15;
    v11[16] = v16;
    *((void *)v11 + 3) = v17;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()();
    sub_1001F0530((uint64_t)v8, 0, 1, v19);
    sub_100202264((uint64_t)v8, v18);
    sub_100239254();
    uint64_t v20 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction();
    sub_1001F0530(a3, 0, 1, v21);
    return sub_100239120((uint64_t)v11, (void (*)(void))type metadata accessor for SoundDescriptor);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction();
    return sub_1001F0530(a3, 1, 1, v12);
  }
}

uint64_t sub_100238684@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundDescriptor();
  __chkstk_darwin(v9);
  unsigned int v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x400000) != 0)
  {
    id v14 = a1;
    id v15 = [v14 provider];
    unsigned __int8 v16 = [v14 isVideo];
    id v17 = [v14 soundRegion];

    uint64_t v18 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v19 = type metadata accessor for UUID();
    sub_1001F0530(v18, 1, 1, v19);
    *(void *)unsigned int v11 = 17;
    *((void *)v11 + 1) = v15;
    v11[16] = v16;
    *((void *)v11 + 3) = v17;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()();
    sub_1001F0530((uint64_t)v8, 0, 1, v19);
    sub_100202264((uint64_t)v8, v18);
    sub_100239254();
    uint64_t v20 = sub_1001F081C(&qword_100585A40);
    sub_1001F0530(a3, 0, 2, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction();
    sub_1001F0530(a3, 0, 1, v21);
    return sub_100239120((uint64_t)v11, (void (*)(void))type metadata accessor for SoundDescriptor);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction();
    return sub_1001F0530(a3, 1, 1, v12);
  }
}

void sub_1002388DC()
{
  uint64_t v1 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v43[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v6);
  unsigned int v11 = &v43[-v10];
  __chkstk_darwin(v9);
  uint64_t v13 = &v43[-v12];
  id v14 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  id v15 = sub_100223334(*(void *)(v0 + 32));
  swift_endAccess();

  if (v15) {
    goto LABEL_14;
  }
  id v16 = (id)TUBundle();
  if (!v16)
  {
    __break(1u);
    return;
  }
  id v17 = v16;
  id v18 = sub_1002EB964(0x6A2D656D2D74656CLL, 0xEB000000006E696FLL, 6709603, 0xE300000000000000, v16);

  if (!v18)
  {
    sub_1001F0530((uint64_t)v3, 1, 1, v4);
    goto LABEL_9;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32);
  v19(v3, v11, v4);
  sub_1001F0530((uint64_t)v3, 0, 1, v4);
  if (sub_1001F758C((uint64_t)v3, 1, v4) == 1)
  {
LABEL_9:
    sub_1002392A8((uint64_t)v3, &qword_1005878F0);
    goto LABEL_14;
  }
  v19(v13, v3, v4);
  uint64_t v20 = self;
  id v21 = [v20 sharedInstance];
  v44[0] = 0;
  unsigned int v22 = [v21 setCategory:AVAudioSessionCategoryPlayback mode:AVAudioSessionModeDefault options:2 error:v44];

  if (v22)
  {
    id v23 = v44[0];
    id v24 = [v20 sharedInstance];
    v44[0] = 0;
    unsigned int v25 = [v24 setActive:1 error:v44];

    id v26 = v44[0];
    if (v25)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v8, v13, v4);
      objc_allocWithZone((Class)AVAudioPlayer);
      id v27 = v26;
      id v38 = sub_1002EB818((uint64_t)v8);
      uint64_t v39 = swift_beginAccess();
      if (v38) {
        sub_10027F828((uint64_t)v38);
      }
      else {

      }
      swift_endAccess();
      swift_beginAccess();
      uint64_t v40 = sub_100223334(*v14);
      if (v40)
      {
        uint64_t v41 = v40;
        swift_endAccess();
        LODWORD(v42) = 1.0;
        [v41 setVolume:v42];
      }
      else
      {
        swift_endAccess();
      }
      goto LABEL_13;
    }
    id v30 = v44[0];
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();
  }
  else
  {
    id v28 = v44[0];
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();
  }
  swift_willThrow();
  id v31 = sub_1001B1BF8();
  static os_log_type_t.error.getter();
  sub_1001F081C(&qword_100584B20);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_10048FB00;
  *(void *)(v32 + 56) = &type metadata for String;
  unint64_t v33 = sub_1001F3B08();
  *(void *)(v32 + 64) = v33;
  *(void *)(v32 + 32) = 0x6A2D656D2D74656CLL;
  *(void *)(v32 + 40) = 0xEB000000006E696FLL;
  v44[0] = v29;
  swift_errorRetain();
  sub_1001F081C((uint64_t *)&unk_100585FE0);
  uint64_t v34 = String.init<A>(reflecting:)();
  *(void *)(v32 + 96) = &type metadata for String;
  *(void *)(v32 + 104) = v33;
  *(void *)(v32 + 72) = v34;
  *(void *)(v32 + 80) = v35;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  swift_errorRelease();
LABEL_13:
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_14:
  swift_beginAccess();
  uint64_t v36 = sub_100223334(*v14);
  if (v36)
  {
    unint64_t v37 = v36;
    swift_endAccess();
    [v37 play];
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t sub_100238E84()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100238EAC()
{
  sub_100238E84();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SoundDescriptorActionResolver()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SoundDescriptorActionResolver.Sound(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100238FA0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundDescriptorActionResolver.Sound()
{
  return &type metadata for SoundDescriptorActionResolver.Sound;
}

unint64_t sub_100238FDC()
{
  unint64_t result = qword_100585A30;
  if (!qword_100585A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585A30);
  }
  return result;
}

uint64_t sub_100239028()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100239060(void *a1)
{
  return [a1 isVideoUpgradeFromCall:*(void *)(v1 + 16)];
}

uint64_t sub_100239084()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100239094(uint64_t a1)
{
  return sub_10039E5FC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10023909C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002390AC()
{
  return swift_release();
}

uint64_t sub_1002390B8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002390F0(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100239120(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10020233C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100239178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100239200()
{
  uint64_t v2 = sub_100239460();
  v3(v2);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t sub_100239254()
{
  uint64_t v2 = sub_100239460();
  v3(v2);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t sub_1002392A8(uint64_t a1, uint64_t *a2)
{
  sub_1001F081C(a2);
  sub_10020233C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_1002392FC()
{
  unint64_t result = qword_1005858C0;
  if (!qword_1005858C0)
  {
    sub_1001F6204(255, (unint64_t *)&unk_1005888A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005858C0);
  }
  return result;
}

void sub_100239384()
{
  sub_1003A4878();
}

void sub_1002393A8()
{
  sub_1003A4878();
}

uint64_t sub_1002393DC()
{
  return swift_allocObject();
}

uint64_t sub_1002393F4()
{
  sub_1001F0530(v0, 2, 2, *(void *)(v1 - 192));
  return sub_100236B70(v0);
}

void sub_100239430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = v4;
}

void sub_100239440()
{
  sub_1003A4878();
}

uint64_t sub_100239460()
{
  return 0;
}

id sub_100239474()
{
  type metadata accessor for FaceTimeLivePhotosIDSService();
  id result = sub_1002EA2A0();
  qword_100585A48 = (uint64_t)result;
  return result;
}

id sub_1002394E4()
{
  if (qword_100583728 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100585A48;

  return v0;
}

id sub_100239540(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FaceTimeLivePhotosIDSService();
  id v8 = objc_msgSendSuper2(&v10, "initWithName:service:queryController:", v7, a3, a4);

  return v8;
}

id sub_100239634()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeLivePhotosIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeLivePhotosIDSService()
{
  return self;
}

uint64_t sub_100239690(char a1)
{
  if (a1) {
    return 0x656E6F6850;
  }
  else {
    return 0x656D695465636146;
  }
}

uint64_t sub_1002396C8()
{
  return 0;
}

uint64_t sub_1002396D4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050AB20, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100239728(char *a1, char *a2)
{
  return sub_1001FD6B0(*a1, *a2);
}

Swift::Int sub_100239734()
{
  return sub_1002EFB7C();
}

uint64_t sub_10023973C()
{
  return sub_10020E394();
}

Swift::Int sub_100239744()
{
  return sub_1002EFD70();
}

uint64_t sub_10023974C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002396D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10023977C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100239690(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Class sub_1002397F8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  id v6 = a1;
  uint64_t v7 = a4(a3);

  if (v7)
  {
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }

  return v8.super.isa;
}

uint64_t sub_10023987C(uint64_t a1)
{
  id v3 = [v1 userInfo];
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v8 = 0xD000000000000018;
  *((void *)&v8 + 1) = a1;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v7, v4, &v8);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v7);
  if (v9)
  {
    sub_1001F081C(&qword_10058B600);
    if (swift_dynamicCast()) {
      return v6;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100202D2C((uint64_t)&v8);
    return 0;
  }
}

uint64_t sub_10023999C()
{
  id v1 = [v0 userInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v6 = 0xD00000000000001ELL;
  *((void *)&v6 + 1) = 0x800000010047E4A0;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v5, v2, &v6);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v5);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100202D2C((uint64_t)&v6);
    return 0;
  }
}

uint64_t sub_100239B04(SEL *a1)
{
  v5.super_class = (Class)UNMutableNotificationContent;
  id v1 = objc_msgSendSuper2(&v5, *a1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100239B84(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = a1;
  sub_100239C08(v4);
}

void sub_100239C08(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyHashable.init<A>(_:)();
  if (a1) {
    sub_1001F081C(&qword_10058B600);
  }
  id v4 = [v2 userInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10023A7FC(v5, v6);
  Class isa = sub_10023A7D8().super.isa;
  swift_bridgeObjectRelease();
  [v2 setUserInfo:isa];
}

id sub_100239D24(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }

  return v7;
}

uint64_t sub_100239DA4()
{
  v4.super_class = (Class)UNMutableNotificationContent;
  id v0 = objc_msgSendSuper2(&v4, "notificationProviderIdentifier");
  if (!v0) {
    return 0;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_100239EA0()
{
  id v1 = v0;
  AnyHashable.init<A>(_:)();
  id v2 = [v0 userInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10023A7FC(v3, v4);
  Class isa = sub_10023A7D8().super.isa;
  swift_bridgeObjectRelease();
  [v1 setUserInfo:isa];
}

id sub_100239FB0(void *a1)
{
  id v3 = [v1 content];
  [v3 mutableCopy];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1001F6204(0, &qword_100585A80);
  if (!swift_dynamicCast()) {
    goto LABEL_11;
  }
  uint64_t v4 = sub_10023A6FC([v1 content], (SEL *)&selRef_remoteParticipantHandles);
  if (!v4)
  {

LABEL_11:
    id v11 = v1;
    return v1;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = sub_10023A6FC([v1 content], (SEL *)&selRef_activeParticipantHandles);
  if (v6) {
    NSString v7 = (void *)v6;
  }
  else {
    NSString v7 = _swiftEmptyArrayStorage;
  }
  if (!v7[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 filterStatusForAddresses:isa withBundleIdentifier:v9];

  if (v10 == (id)3)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    [v25 setShouldIgnoreDowntime:v10 == 0];
    if (v5[2] != 1) {
      goto LABEL_19;
    }
    uint64_t v14 = v5[4];
    unint64_t v13 = v5[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      NSString v16 = String._bridgeToObjectiveC()();
      NSString v17 = String._bridgeToObjectiveC()();
      unsigned __int8 v18 = sub_10023A75C((uint64_t)v16, v14, v13, (uint64_t)v17, a1);

      if (v18)
      {
        NSString v19 = String._bridgeToObjectiveC()();
        [v25 setThreadIdentifier:v19];
      }
    }
    else
    {
LABEL_19:
      swift_bridgeObjectRelease();
    }
    sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
    id v20 = [v1 identifier];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = v25;
    id v1 = sub_10023A2FC(v21, v23, v24, [v1 trigger], (uint64_t)objc_msgSend(v1, "destinations"));
  }
  return v1;
}

id sub_10023A2FC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() requestWithIdentifier:v8 content:a3 trigger:a4 destinations:a5];

  return v9;
}

uint64_t sub_10023A388()
{
  id v1 = [v0 notification];
  id v2 = [v1 request];

  id v3 = [v2 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10023A420()
{
  id v1 = [v0 notification];
  id v2 = [v1 request];

  id v3 = [v2 content];
  id v4 = [v3 userInfo];

  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  return v5;
}

uint64_t sub_10023A4E4()
{
  return sub_10023A508();
}

uint64_t sub_10023A508()
{
  id v1 = [v0 actionIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_10023A560()
{
  return sub_10023A388();
}

uint64_t sub_10023A584()
{
  return sub_10023A420();
}

unsigned char *storeEnumTagSinglePayload for NotificationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023A674);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationType()
{
  return &type metadata for NotificationType;
}

unint64_t sub_10023A6B0()
{
  unint64_t result = qword_100585A78;
  if (!qword_100585A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585A78);
  }
  return result;
}

uint64_t sub_10023A6FC(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

id sub_10023A75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [a5 isUnknownAddress:a1 normalizedAddress:v8 forBundleIdentifier:a4];

  return v9;
}

NSDictionary sub_10023A7D8()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10023A7FC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  return sub_1002C2704((uint64_t)va, (uint64_t)va1);
}

id sub_10023A81C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  String.utf8CString.getter();
  id v1 = (void **)CUTWeakLinkSymbol();

  id result = (id)swift_release();
  if (v1)
  {
    id v3 = *v1;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10023A8A0()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_100594890 = v1;
  *(void *)algn_100594898 = v3;
}

void sub_10023A920()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948A0 = v1;
  *(void *)algn_1005948A8 = v3;
}

void sub_10023A9A0()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948B0 = v1;
  *(void *)algn_1005948B8 = v3;
}

void sub_10023AA20()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948C0 = v1;
  *(void *)algn_1005948C8 = v3;
}

void sub_10023AAA0()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948D0 = v1;
  *(void *)algn_1005948D8 = v3;
}

void sub_10023AB20()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948E0 = v1;
  *(void *)algn_1005948E8 = v3;
}

void sub_10023ABA0()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_1005948F0 = v1;
  *(void *)algn_1005948F8 = v3;
}

void sub_10023AC20()
{
  id v0 = sub_10023A81C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_100594900 = v1;
  *(void *)algn_100594908 = v3;
}

void sub_10023ACA0()
{
  id v0 = sub_10023C600();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_100594910 = v1;
  *(void *)algn_100594918 = v3;
}

void sub_10023ACFC()
{
  id v0 = sub_10023C600();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_100594920 = v1;
  *(void *)algn_100594928 = v3;
}

void *sub_10023AD58(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v46 = &_swiftEmptyDictionarySingleton;
  sub_10023C59C(a1 + 148, (uint64_t)v51, &qword_100585B48);
  sub_10023C59C((uint64_t)v51, (uint64_t)&v52, &qword_100585B48);
  if (v53) {
    goto LABEL_7;
  }
  int v4 = v52;
  id v5 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10048FB00;
  *(void *)&long long v60 = *v2;
  sub_1001F081C(&qword_100585B78);
  uint64_t v7 = (void *)String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1001F3B08();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  *(void *)(v6 + 96) = &type metadata for Int32;
  *(void *)(v6 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v6 + 72) = v4;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if ((v4 - 1) < 2)
  {
    *((void *)&v61 + 1) = &type metadata for Bool;
    LOBYTE(v60) = 0;
    goto LABEL_6;
  }
  if ((v4 - 3) < 2)
  {
    *((void *)&v61 + 1) = &type metadata for Bool;
    LOBYTE(v60) = 1;
LABEL_6:
    sub_1002C2414((uint64_t)&v60);
    goto LABEL_7;
  }
  if (!v4)
  {
LABEL_7:
    uint64_t v10 = sub_10023B69C(a1);
    uint64_t v7 = &type metadata for Int;
    *((void *)&v61 + 1) = &type metadata for Int;
    *(void *)&long long v60 = v10;
    sub_1002C2414((uint64_t)&v60);
    char v11 = *(unsigned char *)(a1 + 52);
    *((void *)&v61 + 1) = &type metadata for Bool;
    LOBYTE(v60) = v11;
    sub_1002C2414((uint64_t)&v60);
    uint64_t v45 = &_swiftEmptyDictionarySingleton;
    if (qword_100583738 == -1) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
  type metadata accessor for TUTelephonyCallSubType(0);
  LODWORD(v60) = v4;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
LABEL_40:
  swift_once();
LABEL_8:
  sub_10023C59C(a1 + 16, (uint64_t)&v50, &qword_100585B50);
  sub_10023C59C((uint64_t)&v50, (uint64_t)&v54, &qword_100585B50);
  uint64_t v12 = v54;
  if (v54)
  {
    type metadata accessor for Mode(0);
    *((void *)&v61 + 1) = v13;
    *(void *)&long long v60 = v12;
  }
  else
  {
    long long v60 = 0u;
    long long v61 = 0u;
  }
  swift_bridgeObjectRetain();
  sub_10023C570(&v50);
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583730 != -1) {
    swift_once();
  }
  id v49 = *(id *)(a1 + 8);
  type metadata accessor for Category(0);
  *((void *)&v61 + 1) = v14;
  *(void *)&long long v60 = v49;
  swift_bridgeObjectRetain();
  sub_10023C570(&v49);
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583740 != -1) {
    swift_once();
  }
  uint64_t v15 = 10;
  if (!*(unsigned char *)(a1 + 49)) {
    uint64_t v15 = 0;
  }
  *((void *)&v61 + 1) = v7;
  *(void *)&long long v60 = v15;
  swift_bridgeObjectRetain();
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583748 != -1) {
    swift_once();
  }
  sub_10023C59C(a1 + 24, (uint64_t)v48, &qword_100585B58);
  sub_10023C59C((uint64_t)v48, (uint64_t)v55, &qword_100585B58);
  uint64_t v16 = v58;
  if (v58 == 1)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v17 = v57;
    char v18 = v59;
    unint64_t v19 = v55[0] | ((unint64_t)v56 << 32);
    swift_bridgeObjectRetain();
    id v20 = sub_10027EA84(v19, v17, v16, v18);
    *((void *)&v61 + 1) = sub_1001F081C((uint64_t *)&unk_100586DF0);
    *(void *)&long long v60 = v20;
  }
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583750 != -1) {
    swift_once();
  }
  char v21 = *(unsigned char *)(a1 + 51);
  *((void *)&v61 + 1) = &type metadata for Bool;
  LOBYTE(v60) = v21;
  swift_bridgeObjectRetain();
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583770 != -1) {
    swift_once();
  }
  id v22 = objc_allocWithZone((Class)NSNumber);
  swift_bridgeObjectRetain();
  id v23 = [v22 initWithBool:1];
  uint64_t v24 = sub_1001F6204(0, (unint64_t *)&qword_100585590);
  *((void *)&v61 + 1) = v24;
  *(void *)&long long v60 = v23;
  sub_1002C2414((uint64_t)&v60);
  if (qword_100583778 != -1) {
    swift_once();
  }
  id v25 = objc_allocWithZone((Class)NSNumber);
  swift_bridgeObjectRetain();
  id v26 = [v25 initWithBool:1];
  *((void *)&v61 + 1) = v24;
  *(void *)&long long v60 = v26;
  sub_1002C2414((uint64_t)&v60);
  id v27 = sub_10023A81C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v28 = [objc_allocWithZone((Class)NSNumber) initWithBool:*(unsigned __int8 *)(a1 + 55)];
  *((void *)&v61 + 1) = v24;
  *(void *)&long long v60 = v28;
  sub_1002C2414((uint64_t)&v60);
  sub_10023C59C(a1 + 88, (uint64_t)v47, &qword_100585B60);
  sub_10023C59C((uint64_t)v47, (uint64_t)&v60, &qword_100585B60);
  if ((v62 & 1) == 0)
  {
    uint64_t v29 = *(void *)(a1 + 136);
    if (v29)
    {
      long long v41 = v61;
      long long v42 = v60;
      uint64_t v30 = *(void *)(a1 + 128);
      uint64_t v31 = qword_100583768;
      swift_bridgeObjectRetain();
      if (v31 != -1) {
        swift_once();
      }
      sub_1001F081C(&qword_100585B68);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_10048F550;
      sub_1001F081C(&qword_100584B90);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10048FB00;
      uint64_t v34 = qword_100583758;
      swift_bridgeObjectRetain();
      if (v34 != -1) {
        swift_once();
      }
      uint64_t v35 = *(void *)algn_1005948E8;
      *(void *)(inited + 32) = qword_1005948E0;
      *(void *)(inited + 40) = v35;
      uint64_t v36 = self;
      swift_bridgeObjectRetain();
      long long v43 = v42;
      long long v44 = v41;
      id v37 = objc_msgSend(v36, "tu_dataForAuditToken:", &v43);
      *(void *)(inited + 72) = sub_1001F6204(0, &qword_100585B70);
      *(void *)(inited + 48) = v37;
      if (qword_100583760 != -1) {
        swift_once();
      }
      uint64_t v38 = *(void *)algn_1005948F8;
      *(void *)(inited + 80) = qword_1005948F0;
      *(void *)(inited + 88) = v38;
      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 96) = v30;
      *(void *)(inited + 104) = v29;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 32) = Dictionary.init(dictionaryLiteral:)();
      *((void *)&v44 + 1) = sub_1001F081C((uint64_t *)&unk_10058AA10);
      *(void *)&long long v43 = v32;
      sub_1002C2414((uint64_t)&v43);
    }
  }
  uint64_t v39 = v45;
  *((void *)&v44 + 1) = sub_1001F081C((uint64_t *)&unk_100586DF0);
  *(void *)&long long v43 = v39;
  sub_1002C2414((uint64_t)&v43);
  return v46;
}

uint64_t sub_10023B69C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 < 5) {
    return qword_1004909E8[v1];
  }
  type metadata accessor for CSDAudioInterruptionOperationMode(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_10023B700(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v35 = v1;
  uint64_t v3 = sub_10023AD58((uint64_t)__src);
  id v4 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = sub_1001FCCB8();
  *(_OWORD *)(v5 + 16) = xmmword_10048F550;
  *(void *)(v5 + 56) = sub_1001F081C((uint64_t *)&unk_100586DF0);
  *(void *)(v5 + 64) = sub_10023C270();
  *(void *)(v5 + 32) = v3;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v6 = self;
  sub_100393B1C();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_10023C2C4(v8, v6);
  id v9 = sub_1001B1BF8();
  uint64_t v10 = sub_1001FCCB8();
  *(_OWORD *)(v10 + 16) = xmmword_10048F550;
  LOBYTE(aBlock[0]) = *((unsigned char *)__src + 53);
  uint64_t v11 = LOBYTE(aBlock[0]);
  uint64_t v12 = String.init<A>(reflecting:)();
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1001F3B08();
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v34 = v6;
  uint64_t v16 = v6;
  uint64_t v17 = __src;
  [v16 setMixingVoiceWithMediaEnabled:v11];
  id v18 = sub_1001B1BF8();
  uint64_t v19 = sub_1001FCCB8();
  *(_OWORD *)(v19 + 16) = xmmword_10048F550;
  LOBYTE(aBlock[0]) = *((unsigned char *)__src + 56);
  uint64_t v20 = String.init<A>(reflecting:)();
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = v15;
  unint64_t v21 = v15;
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v23 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  char v24 = v17[54];
  if (v24) {
    dispatch_semaphore_t v25 = 0;
  }
  else {
    dispatch_semaphore_t v25 = dispatch_semaphore_create(0);
  }
  id v26 = (void *)swift_allocObject();
  memcpy(v26 + 2, v17, 0x99uLL);
  v26[22] = v35;
  v26[23] = v25;
  aBlock[4] = sub_10023C3B4;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100317DEC;
  uint64_t aBlock[3] = &unk_10050E2A8;
  id v27 = _Block_copy(aBlock);
  swift_retain();
  sub_10023C3D8((uint64_t)v17);
  id v28 = v25;
  swift_release();
  [v34 startAudioSessionWithCompletionHandler:v27];
  _Block_release(v27);
  if (v25)
  {
    uint64_t v29 = v28;
    OS_dispatch_semaphore.wait()();
  }
  if (v24)
  {
    id v30 = sub_1001B1BF8();
    uint64_t v31 = sub_1001FCCB8();
    *(_OWORD *)(v31 + 16) = xmmword_10048F550;
    memcpy(aBlock, v17, 0x99uLL);
    sub_10023C3D8((uint64_t)v17);
    uint64_t v32 = String.init<A>(reflecting:)();
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = v21;
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v33;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    memcpy(v36, __dst, 0x99uLL);
    ScreenSharingActivityManager.carPlayDidDisconnect()();
    sub_10023C59C(v35 + 16, (uint64_t)aBlock, (uint64_t *)&unk_10058A140);
    sub_10023C59C((uint64_t)v36, v35 + 16, (uint64_t *)&unk_10058A140);
    sub_10023C46C((uint64_t)aBlock, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
    sub_10023C3D8((uint64_t)v17);
  }
  else
  {
  }
}

uint64_t sub_10023BBB8(char a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5)
{
  memcpy(__dst, __src, sizeof(__dst));
  if (!a2)
  {
    if ((a1 & 1) == 0)
    {
LABEL_14:
      swift_bridgeObjectRelease();
LABEL_15:
      id v24 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      sub_1001F081C(&qword_100584B20);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_10048F550;
      if (a2)
      {
        v31[0] = a2;
        swift_errorRetain();
        sub_1001F081C((uint64_t *)&unk_100585FE0);
        uint64_t v26 = String.init<A>(reflecting:)();
        unint64_t v28 = v27;
      }
      else
      {
        unint64_t v28 = 0xE300000000000000;
        uint64_t v26 = 7104878;
      }
      *(void *)(v25 + 56) = &type metadata for String;
      *(void *)(v25 + 64) = sub_1001F3B08();
      *(void *)(v25 + 32) = v26;
      *(void *)(v25 + 40) = v28;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      sub_10023C1C4(v31);
      goto LABEL_19;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v10 = (void *)_convertErrorToNSError(_:)();
  id v11 = [v10 code];

  uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  id v13 = [v12 domain];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (a1) {
    goto LABEL_12;
  }
  if (v11 != (id)32025) {
    goto LABEL_14;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v16) {
    goto LABEL_14;
  }
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      goto LABEL_15;
    }
  }
LABEL_13:
  id v21 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  memcpy(v31, __dst, 0x99uLL);
  ScreenSharingActivityManager.carPlayDidDisconnect()();
  uint64_t v22 = self;
  sub_10023C3D8((uint64_t)__src);
  id v23 = [v22 defaultCenter];
  [v23 postNotificationName:TUCallAudioStackReadyNotification object:0];

LABEL_19:
  sub_10023C59C((uint64_t)v31, (uint64_t)v32, (uint64_t *)&unk_10058A140);
  uint64_t v29 = a4 + 16;
  sub_10023C59C(v29, (uint64_t)v31, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v32, v29, (uint64_t *)&unk_10058A140);
  sub_10023C46C((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C4E0);
  sub_10023C46C((uint64_t)v31, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
  if (a5) {
    OS_dispatch_semaphore.signal()();
  }
  return sub_10023C46C((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
}

uint64_t sub_10023BF38()
{
  id v1 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v2 = self;
  [v2 setMixingVoiceWithMediaEnabled:0];
  id v3 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  [v2 stopAudioSession];
  [v2 resetAudioSessionOutputPortOverride];
  sub_10023C1C4(v5);
  sub_10023C59C(v0 + 16, (uint64_t)v6, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v5, v0 + 16, (uint64_t *)&unk_10058A140);
  return sub_10023C46C((uint64_t)v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
}

uint64_t sub_10023C084()
{
  id v1 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  sub_10023C1C4(v3);
  sub_10023C59C(v0 + 16, (uint64_t)v4, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v3, v0 + 16, (uint64_t *)&unk_10058A140);
  return sub_10023C46C((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
}

uint64_t sub_10023C144()
{
  sub_10023C59C(v0 + 16, (uint64_t)v2, (uint64_t *)&unk_10058A140);
  sub_10023C46C((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AVAudioClientInterruptionProvider()
{
  return self;
}

void sub_10023C1C4(void *a1)
{
}

uint64_t sub_10023C1CC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {

    sub_10023C25C(a4, a5, a6);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10023C25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10023C270()
{
  unint64_t result = qword_100584BB0;
  if (!qword_100584BB0)
  {
    sub_1001F08B4((uint64_t *)&unk_100586DF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584BB0);
  }
  return result;
}

void sub_10023C2C4(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setAudioSessionProperties:isa];
}

uint64_t sub_10023C344()
{
  if (*(void *)(v0 + 56) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t sub_10023C3B4(char a1, uint64_t a2)
{
  return sub_10023BBB8(a1, a2, v2 + 2, v2[22], v2[23]);
}

uint64_t sub_10023C3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10023C3D0()
{
  return swift_release();
}

uint64_t sub_10023C3D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 16);
  id v7 = v2;
  sub_10023C458(v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_10023C458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10023C46C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 152);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    v4);
  return a1;
}

uint64_t sub_10023C4E0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    id v10 = a3;
    id v11 = a2;
    sub_10023C458(a4, a5, a6);
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

id *sub_10023C570(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_10023C59C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1001F081C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_10023C600()
{
  return sub_10023A81C();
}

id sub_10023C634()
{
  type metadata accessor for FaceTimeMultiwayIDSService();
  id result = sub_1002EA2A0();
  qword_100585B80 = (uint64_t)result;
  return result;
}

id sub_10023C6A4()
{
  if (qword_100583780 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100585B80;

  return v0;
}

id sub_10023C700(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FaceTimeMultiwayIDSService();
  id v8 = objc_msgSendSuper2(&v10, "initWithName:service:queryController:", v7, a3, a4);

  return v8;
}

id sub_10023C7F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeMultiwayIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeMultiwayIDSService()
{
  return self;
}

uint64_t sub_10023C850()
{
  uint64_t v0 = sub_1001F081C(&qword_100586A10);
  __chkstk_darwin(v0 - 8);
  objc_super v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  sub_1001F0530((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  if (sub_1001F758C((uint64_t)v2, 1, v3) == 1)
  {
    sub_10023CF20((uint64_t)v2);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
    if (*(void *)(v4 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v7;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &unk_100585BE0;
  *(void *)(v8 + 24) = v4;
  sub_1001F081C(&qword_100585BF8);
  if (v6 | v5)
  {
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = v5;
    v10[3] = v6;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10023CA48(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10023CA68, 0, 0);
}

uint64_t sub_10023CA68()
{
  type metadata accessor for TipEventProxy();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  v0[3] = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v0[4] = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[5] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10023CB60;
  return static TipEventProxy.donate(eventIdentifier:for:with:)(v1, v3, v4, v6, 0);
}

uint64_t sub_10023CB60()
{
  sub_1001F63B4();
  uint64_t v2 = *v1;
  sub_10023D230();
  *uint64_t v3 = v2;
  *(void *)(v4 + 48) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v5 = sub_10023D22C;
  }
  else
  {
    uint64_t v5 = sub_10023CC90;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10023CC90()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 48) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id CSDTipsHelper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDTipsHelper();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for CSDTipsHelper()
{
  return self;
}

id CSDTipsHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDTipsHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10023CD80()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10023CDB8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023CE58;
  uint64_t v2 = sub_10023D240();
  return sub_10023CA48(v2);
}

uint64_t sub_10023CE58()
{
  sub_1001F63B4();
  uint64_t v1 = *v0;
  sub_10023D230();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10023CF20(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100586A10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10023CF80(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10023D060;
  return v5(v2 + 32);
}

uint64_t sub_10023D060()
{
  sub_1001F63B4();
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  uint64_t v5 = *v0;
  sub_10023D230();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = *(unsigned char *)(v2 + 32);
  uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

uint64_t sub_10023D148()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10023D180()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023CE58;
  uint64_t v2 = sub_10023D240();
  return v3(v2);
}

uint64_t sub_10023D240()
{
  return v0;
}

void *sub_10023D254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = a5;
  return v5;
}

void sub_10023D268()
{
  sub_1001FCC38();
  uint64_t v0 = type metadata accessor for Locale();
  sub_1001F6398();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10024672C();
  uint64_t v61 = v4 - v5;
  __chkstk_darwin(v6);
  char v62 = (char *)&v54 - v7;
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  uint64_t v9 = sub_100202384(v8);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1002464D8();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10024672C();
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = sub_100246774();
  sub_1001F0530(v16, v17, v18, v0);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  id v19 = (id)TUBundle();
  if (v19)
  {
    char v20 = v19;
    sub_100246A14();
    v21._countAndFlagsBits = sub_100246590(31);
    Swift::String_optional v23 = LanguageManager.localizedString(forKey:table:bundle:languageCode:)(v21, v22, (NSBundle)v20, (Swift::String_optional)0);

    uint64_t v60 = v2;
    if (v23.value._object)
    {
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_1001F5F88(v24, (uint64_t)qword_100594C58);
      sub_10024640C();
      v25();
      swift_bridgeObjectRetain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      int v28 = v27;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v58 = v10;
        uint64_t v30 = v29;
        uint64_t v57 = swift_slowAlloc();
        v63[1] = (uint64_t)v23.value._object;
        uint64_t v64 = v57;
        *(_DWORD *)uint64_t v30 = 136315394;
        countAndFlagsBits = (uint8_t *)v23.value._countAndFlagsBits;
        v63[0] = v23.value._countAndFlagsBits;
        swift_bridgeObjectRetain();
        int v56 = v28;
        uint64_t v31 = String.init<A>(reflecting:)();
        object = v23.value._object;
        v63[0] = sub_1002344D8(v31, v32, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2080;
        uint64_t v54 = (uint8_t *)(v30 + 14);
        LanguageManager.locale.getter();
        sub_10024640C();
        v33();
        uint64_t v34 = String.init<A>(reflecting:)();
        unint64_t v36 = v35;
        sub_1001F7664();
        v37();
        v63[0] = sub_1002344D8(v34, v36, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v38 = *(void (**)(void))(v12 + 8);
        sub_1002466D4();
        v38();
        _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v56, "startDisclosureUtterance:%s locale: %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        sub_1002466D4();
        v38();
      }
      else
      {

        char v53 = *(void (**)(void))(v12 + 8);
        sub_1002466D4();
        v53();
        swift_bridgeObjectRelease_n();
        sub_1002466D4();
        v53();
      }
    }
    else
    {
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_1001F5F88(v39, (uint64_t)qword_100594C58);
      sub_10024640C();
      v40();
      long long v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      int v43 = v42;
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = sub_100235B18();
        uint64_t v58 = v10;
        int v56 = v43;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v57 = sub_100202470();
        v63[0] = v57;
        countAndFlagsBits = v45;
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v54 = v45 + 4;
        uint64_t v46 = v62;
        LanguageManager.locale.getter();
        uint64_t v47 = v60;
        sub_10024640C();
        v48();
        uint64_t v49 = String.init<A>(reflecting:)();
        object = 0;
        unint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v0);
        uint64_t v64 = sub_1002344D8(v49, v51, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        int v52 = *(void (**)(void))(v12 + 8);
        sub_1002466D4();
        v52();
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v56, "Unable to localize start disclosure for locale %s. Not creating an outgoing message", countAndFlagsBits, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        sub_1002468DC();
      }
      else
      {

        int v52 = *(void (**)(void))(v12 + 8);
        sub_1002466D4();
        v52();
      }
      sub_1002466D4();
      v52();
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_10023D8D0()
{
  sub_1001FCC38();
  uint64_t v0 = type metadata accessor for Locale();
  sub_1001F6398();
  uint64_t v43 = v1;
  __chkstk_darwin(v2);
  sub_10024672C();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v38 - v4;
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = sub_1002464D8();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10024672C();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v16 = sub_100246774();
  sub_1001F0530(v16, v17, v18, v0);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  id v19 = (id)TUBundle();
  if (v19)
  {
    char v20 = v19;
    sub_100246A14();
    v21._countAndFlagsBits = sub_100246590(29);
    object = LanguageManager.localizedString(forKey:table:bundle:languageCode:)(v21, v22, (NSBundle)v20, (Swift::String_optional)0).value._object;

    if (object)
    {
      sub_10024636C();
      v24();
    }
    else
    {
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_1001F5F88(v25, (uint64_t)qword_100594C58);
      sub_10024640C();
      v26();
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      int v29 = v28;
      if (os_log_type_enabled(v27, v28))
      {
        os_log_t v42 = v27;
        uint64_t v30 = (uint8_t *)sub_100235B18();
        uint64_t v41 = sub_100202470();
        uint64_t v45 = v41;
        int v40 = v29;
        uint64_t v31 = v43;
        *(_DWORD *)uint64_t v30 = 136315138;
        void v38[2] = v30 + 12;
        uint64_t v39 = v30;
        v38[1] = v30 + 4;
        LanguageManager.locale.getter();
        sub_10024640C();
        v32();
        uint64_t v33 = String.init<A>(reflecting:)();
        unint64_t v35 = v34;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v0);
        uint64_t v44 = sub_1002344D8(v33, v35, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v36 = *(void (**)(void))(v10 + 8);
        sub_10024636C();
        v36();
        os_log_t v37 = v42;
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v40, "Unable to localize start disclosure for locale %s. Not creating an outgoing message", v39, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {

        unint64_t v36 = *(void (**)(void))(v10 + 8);
        ((void (*)(uint64_t, uint64_t))v36)(v14, v8);
      }
      sub_10024636C();
      v36();
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_10023DC78()
{
  sub_1001FCC38();
  id v28 = v1;
  id v29 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10023D268();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = self;
  id v11 = objc_msgSend(v10, "tu_defaults");
  sub_1001F081C(&qword_100585D58);
  uint64_t v12 = (void *)sub_100246A38();
  v12[4] = v7;
  v12[5] = v9;
  v12[2] = 0xD000000000000021;
  void v12[3] = 0x800000010047EBB0;
  v12[6] = v11;
  sub_10023D8D0();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v10, "tu_defaults");
  uint64_t v18 = (void *)sub_100246A38();
  v18[4] = v14;
  v18[5] = v16;
  v18[2] = 0xD00000000000001FLL;
  void v18[3] = 0x800000010047EBE0;
  void v18[6] = v17;
  sub_100246A14();
  URL.init(fileURLWithPath:)();
  id v19 = objc_msgSend(v10, "tu_defaults");
  uint64_t v20 = type metadata accessor for FileChecksum();
  sub_100246A38();
  sub_100246A14();
  Swift::String v22 = sub_1001F6D38(0xD00000000000001ALL, v21, (uint64_t)v5, v19);
  if (v22)
  {
    *((void *)&v31 + 1) = v20;
    unint64_t v32 = &off_10050C1A0;
    *(void *)&long long v30 = v22;
  }
  else
  {
    unint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  id v23 = sub_10023DF04();
  type metadata accessor for DisclosureDataSource();
  uint64_t v24 = (void *)swift_allocObject();
  id v25 = v28;
  id v26 = v29;
  id v27 = *(id *)((char *)sub_1002452F0((uint64_t)v23, (uint64_t)&off_10050BF40, v26, v25, (uint64_t)v12, (uint64_t)v18, (uint64_t)&v30, v24)+ OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_speechAssetManager);
  sub_10027834C();
  swift_release();
  swift_release();
  swift_release();

  sub_1001FCC08();
}

id sub_10023DF04()
{
  uint64_t v1 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  uint64_t v2 = sub_100202384(v1);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_1002464D8();
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for Locale();
  sub_1001F0530(v0, 1, 1, v8);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  id v9 = [objc_allocWithZone((Class)type metadata accessor for DaemonSession()) init];
  id result = [self sharedInstance];
  if (result)
  {
    id v11 = result;
    type metadata accessor for SiriSpeechService();
    uint64_t v12 = swift_allocObject();
    return (id)sub_10038ED40(v7, v9, (uint64_t)sub_1001F255C, 0, v11, 0, 0, v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10023E064()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10023E0C8();
    sub_10023F924();
    return swift_release();
  }
  return result;
}

void sub_10023E0C8()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  LODWORD(v65) = v2;
  uint64_t v3 = type metadata accessor for Locale();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1002467AC();
  __chkstk_darwin(v7);
  id v9 = (char *)&v59 - v8;
  uint64_t v10 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v14 = sub_1002467C8();
  sub_10023D268();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v63 = v14;
    uint64_t v64 = v15;
    sub_10020ED28(v1 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureUtteranceChecksum, (uint64_t)v71);
    sub_100204074(v71, v71[3]);
    uint64_t v18 = sub_100246688();
    if ((v19(v18) & 1) == 0)
    {
      sub_10024551C(v1 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureBeepChecksum, (uint64_t)&v69);
      if (v70)
      {
        sub_100204074(&v69, v70);
        sub_10024675C();
        char v21 = v20();
        sub_1002018DC((uint64_t)&v69);
        if (v21 & 1) == 0 && (v65 & 1) == 0 && (sub_10023FF5C((void (*)(uint64_t))sub_10024143C))
        {
          swift_bridgeObjectRelease();
          if (qword_100583A20 != -1) {
            swift_once();
          }
          uint64_t v22 = type metadata accessor for Logger();
          id v23 = sub_1002466F4(v22, (uint64_t)qword_100594C58);
          os_log_type_t v24 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v23, v24))
          {
            id v25 = (_WORD *)sub_100246544();
            sub_100246668(v25);
            sub_100246944((void *)&_mh_execute_header, v26, v27, "Not regenerating start recording disclosure");
            sub_1001F63CC();
          }

LABEL_27:
          sub_1002018DC((uint64_t)v71);
          goto LABEL_28;
        }
      }
      else
      {
        sub_100210614((uint64_t)&v69, &qword_100585D60);
      }
    }
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v62 = v12;
    uint64_t v39 = type metadata accessor for Logger();
    sub_1001F5F88(v39, (uint64_t)qword_100594C58);
    sub_10020ED28((uint64_t)v71, (uint64_t)&v69);
    swift_retain_n();
    int v40 = Logger.logObject.getter();
    int v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      uint64_t v61 = v10;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v68 = v59;
      *(_DWORD *)uint64_t v42 = 136315906;
      sub_100204074(&v69, v70);
      sub_100246854();
      sub_10024675C();
      LOBYTE(v66[0]) = v43() & 1;
      uint64_t v44 = String.init<A>(reflecting:)();
      v66[0] = sub_1002344D8(v44, v45, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)&v69);
      *(_WORD *)(v42 + 12) = 2080;
      sub_10024551C(v1 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureBeepChecksum, (uint64_t)v66);
      int v60 = v41;
      if (v67)
      {
        sub_100204074(v66, v67);
        sub_100246854();
        sub_10024675C();
        char v47 = v46();
        sub_1002018DC((uint64_t)v66);
        LOBYTE(v66[0]) = v47 & 1;
        uint64_t v48 = String.init<A>(reflecting:)();
        unint64_t v50 = v49;
      }
      else
      {
        sub_100210614((uint64_t)v66, &qword_100585D60);
        unint64_t v50 = 0xE300000000000000;
        uint64_t v48 = 7104878;
      }
      v66[0] = sub_1002344D8(v48, v50, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100246650();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2080;
      LOBYTE(v66[0]) = sub_10023FF5C((void (*)(uint64_t))sub_10024143C) & 1;
      uint64_t v51 = String.init<A>(reflecting:)();
      v66[0] = sub_1002344D8(v51, v52, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100246650();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 32) = 2080;
      LOBYTE(v66[0]) = v65 & 1;
      uint64_t v53 = String.init<A>(reflecting:)();
      v66[0] = sub_1002344D8(v53, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v60, "regenerating start disclosure because startDisclosureUtterance:%s beep: %s fileExists:%s force: %s", (uint8_t *)v42, 0x2Au);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
      sub_1002018DC((uint64_t)&v69);
      swift_release_n();

      swift_release();
    }
    sub_100240064((void (*)(void))sub_100240888);
    sub_10020ED28((uint64_t)v71, (uint64_t)&v69);
    uint64_t v55 = (void *)swift_allocObject();
    int v56 = v64;
    v55[2] = v1;
    v55[3] = v56;
    unsigned char v55[4] = v17;
    sub_100233560(&v69, (uint64_t)(v55 + 5));
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100246910();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v57 = sub_1002468FC();
    v58(v57);
    goto LABEL_27;
  }
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_1001F5F88(v28, (uint64_t)qword_100594C58);
  swift_retain_n();
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    long long v31 = (_DWORD *)sub_100235B18();
    uint64_t v32 = sub_100202470();
    uint64_t v65 = v32;
    *long long v31 = 136315138;
    v71[0] = v32;
    uint64_t v64 = v31 + 1;
    LanguageManager.locale.getter();
    sub_10024640C();
    v33();
    uint64_t v34 = String.init<A>(reflecting:)();
    unint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
    *(void *)&long long v69 = sub_1002344D8(v34, v36, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100246650();
    swift_bridgeObjectRelease();
    sub_1002469DC((void *)&_mh_execute_header, v37, v38, "Unable to localize start disclosure for locale %s. Not creating start recording disclosure");
    sub_100235DAC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    sub_100246650();
  }
LABEL_28:
  sub_1001FCC08();
}

uint64_t sub_10023E8A8()
{
  return sub_10023FF5C((void (*)(uint64_t))sub_10024143C);
}

uint64_t sub_10023E8C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DisclosureDataSource();
  sub_100240064((void (*)(void))sub_100240888);
  sub_10020ED28(a5, (uint64_t)v16);
  uint64_t v13 = swift_allocObject();
  sub_100233560(v16, v13 + 16);
  *(void *)(v13 + 56) = a2;
  swift_retain();
  sub_10023EB3C(a3, a4, v12, 0xD00000000000001BLL, 0x800000010047ECD0, 1, (uint64_t)sub_100245C04, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10023EA74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  sub_100204074(a2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  sub_10024551C(a3 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureBeepChecksum, (uint64_t)v9);
  uint64_t v6 = v10;
  if (!v10) {
    return sub_100210614((uint64_t)v9, &qword_100585D60);
  }
  uint64_t v7 = v11;
  sub_100204074(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  return sub_1002018DC((uint64_t)v9);
}

uint64_t sub_10023EB3C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v137 = a7;
  uint64_t v138 = a8;
  uint64_t v140 = a4;
  uint64_t v141 = a5;
  uint64_t v123 = a1;
  uint64_t v124 = type metadata accessor for DispatchWorkItemFlags();
  char v129 = *(void (***)(unsigned char *, uint64_t))(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v126 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v128 = (void *)type metadata accessor for DispatchQoS();
  uint64_t v127 = *(v128 - 1);
  __chkstk_darwin(v128);
  uint64_t v125 = &v112[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_1001F081C(&qword_100586A10);
  __chkstk_darwin(v13 - 8);
  uint64_t v120 = &v112[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v15 - 8);
  uint64_t v116 = &v112[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v118 = &v112[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v117 = &v112[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v119 = &v112[-v24];
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = &v112[-v26];
  uint64_t v28 = __chkstk_darwin(v25);
  id v139 = &v112[-v29];
  uint64_t v133 = v30;
  __chkstk_darwin(v28);
  uint64_t v32 = &v112[-v31];
  if (qword_100583A20 != -1) {
    swift_once();
  }
  LODWORD(v135) = a6;
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = sub_1001F5F88(v33, (uint64_t)qword_100594C58);
  unint64_t v35 = (void (*)(unsigned char *, void *, uint64_t))v18[2];
  v35(v32, a3, v17);
  swift_bridgeObjectRetain_n();
  uint64_t v122 = v34;
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  BOOL v39 = os_log_type_enabled(v36, v37);
  unint64_t v115 = a2;
  id v131 = (void (*)(unsigned char *, unsigned char *, uint64_t))v35;
  id v132 = v18 + 2;
  v130 = v18;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v134 = (uint64_t)a3;
    uint64_t v41 = v40;
    id v114 = (void **)swift_slowAlloc();
    aBlock = v114;
    *(_DWORD *)uint64_t v41 = 136315650;
    int v113 = v38;
    swift_bridgeObjectRetain();
    id v142 = (void *)sub_1002344D8(v123, a2, (uint64_t *)&aBlock);
    uint64_t v121 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v42 = v139;
    v35(v139, v32, v17);
    uint64_t v43 = String.init<A>(reflecting:)();
    id v142 = (void *)sub_1002344D8(v43, v44, (uint64_t *)&aBlock);
    uint64_t v27 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v45 = (void (*)(unsigned char *, uint64_t))v18[1];
    uint64_t v46 = (unint64_t)(v18 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v45(v32, v17);
    *(_WORD *)(v41 + 22) = 1024;
    char v47 = (char)v135;
    LODWORD(v142) = v135 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v113, "addEndTone: for: %s from: %s force: %{BOOL}d", (uint8_t *)v41, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = (void *)v134;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    unint64_t v45 = (void (*)(unsigned char *, uint64_t))v18[1];
    uint64_t v46 = (unint64_t)(v18 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v45(v32, v17);

    uint64_t v42 = v139;
    char v47 = (char)v135;
  }
  uint64_t v48 = a3;
  URL.deletingLastPathComponent()();
  URL.appendingPathComponent(_:)();
  uint64_t v134 = v46;
  v135 = v45;
  v45(v42, v17);
  if (v47)
  {
    id v49 = [self defaultManager];
    URL._bridgeToObjectiveC()(v50);
    unint64_t v52 = v51;
    aBlock = 0;
    unsigned int v53 = [v49 removeItemAtURL:v51 error:&aBlock];

    if (v53)
    {
      unint64_t v54 = aBlock;
    }
    else
    {
      uint64_t v55 = aBlock;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
  }
  id v56 = [self defaultManager];
  URL.path.getter();
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v58 = [v56 fileExistsAtPath:v57];

  if (v58)
  {
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    BOOL v61 = os_log_type_enabled(v59, v60);
    uint64_t v63 = v130;
    uint64_t v62 = v131;
    if (v61)
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "addEndTone: greeting with tone existed, returning it", v64, 2u);
      swift_slowDealloc();
    }

    uint64_t v65 = *(void **)(v136 + 16);
    v62(v42, v27, v17);
    unint64_t v66 = (*((unsigned __int8 *)v63 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v63 + 80);
    uint64_t v67 = swift_allocObject();
    uint64_t v69 = v137;
    uint64_t v68 = v138;
    *(void *)(v67 + 16) = v137;
    *(void *)(v67 + 24) = v68;
    ((void (*)(unint64_t, unsigned char *, uint64_t))v63[4])(v67 + v66, v42, v17);
    os_log_type_t v147 = sub_100245C14;
    uint64_t v148 = v67;
    aBlock = _NSConcreteStackBlock;
    uint64_t v144 = 1107296256;
    uint64_t v70 = &unk_10050E538;
LABEL_18:
    id v145 = sub_1002C2C88;
    v146 = v70;
    uint64_t v81 = _Block_copy(&aBlock);
    sub_1002084D8(v69);
    id v82 = v65;
    uint64_t v83 = v125;
    static DispatchQoS.unspecified.getter();
    id v142 = _swiftEmptyArrayStorage;
    sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    uint64_t v84 = v126;
    uint64_t v85 = v124;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v81);

    v129[1](v84, v85);
    (*(void (**)(unsigned char *, void *))(v127 + 8))(v83, v128);
    v135(v27, v17);
    return swift_release();
  }
  id v71 = v116;
  sub_10025AAB4(v48, (uint64_t)v116);
  int v72 = sub_1001F758C((uint64_t)v71, 1, v17);
  uint64_t v74 = v130;
  id v73 = (void (*)(unsigned char *, void *, uint64_t))v131;
  if (v72 == 1)
  {
    sub_100210614((uint64_t)v71, &qword_1005878F0);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "addEndTone: creating temporary message file failed, will use message without end tone", v77, 2u);
      swift_slowDealloc();
    }

    uint64_t v65 = *(void **)(v136 + 16);
    v73(v42, v48, v17);
    unint64_t v78 = (*((unsigned __int8 *)v74 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v74 + 80);
    uint64_t v79 = swift_allocObject();
    uint64_t v69 = v137;
    uint64_t v80 = v138;
    *(void *)(v79 + 16) = v137;
    *(void *)(v79 + 24) = v80;
    ((void (*)(unint64_t, unsigned char *, uint64_t))v74[4])(v79 + v78, v42, v17);
    os_log_type_t v147 = sub_100245C14;
    uint64_t v148 = v79;
    aBlock = _NSConcreteStackBlock;
    uint64_t v144 = 1107296256;
    uint64_t v70 = &unk_10050E4C0;
    goto LABEL_18;
  }
  uint64_t v87 = (char *)(v130 + 4);
  char v128 = (void *)v130[4];
  uint64_t v88 = v119;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v128)(v119, v71, v17);
  sub_100245C18();
  URL.init(fileURLWithPath:)();
  char v129 = (void (**)(unsigned char *, uint64_t))sub_10037DC08();
  v73(v42, v88, v17);
  v130 = sub_10037DC08();
  uint64_t v89 = type metadata accessor for TaskPriority();
  sub_1001F0530((uint64_t)v120, 1, 1, v89);
  v73(v42, v88, v17);
  uint64_t v121 = v27;
  v73(v117, v27, v17);
  v73(v118, v48, v17);
  uint64_t v90 = v87[48];
  uint64_t v91 = (v90 + 48) & ~v90;
  unint64_t v92 = (v133 + 7 + v91) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v93 = (v90 + 16 + v92) & ~v90;
  unint64_t v94 = (v133 + 7 + v93) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v96 = (v95 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v97 = (v90 + 16 + v96) & ~v90;
  unint64_t v98 = (char *)swift_allocObject();
  *((void *)v98 + 2) = 0;
  *((void *)v98 + 3) = 0;
  uint64_t v99 = v130;
  *((void *)v98 + 4) = v129;
  *((void *)v98 + 5) = v99;
  int v100 = &v98[v91];
  unint64_t v101 = (void (*)(char *, unsigned char *, uint64_t))v128;
  ((void (*)(char *, unsigned char *, uint64_t))v128)(v100, v139, v17);
  uint64_t v102 = &v98[v92];
  uint64_t v103 = v141;
  *(void *)uint64_t v102 = v140;
  *((void *)v102 + 1) = v103;
  v101(&v98[v93], v117, v17);
  uint64_t v104 = v137;
  *(void *)&v98[v94] = v136;
  uint64_t v105 = &v98[v95];
  unint64_t v106 = v115;
  *(void *)uint64_t v105 = v123;
  *((void *)v105 + 1) = v106;
  uint64_t v107 = (uint64_t *)&v98[v96];
  uint64_t v108 = v138;
  *uint64_t v107 = v104;
  v107[1] = v108;
  v101(&v98[v97], v118, v17);
  swift_bridgeObjectRetain();
  uint64_t v109 = v129;
  uint64_t v110 = v130;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1002084D8(v104);
  sub_1002C8468((uint64_t)v120, (uint64_t)&unk_100585D80, (uint64_t)v98);

  swift_release();
  uint64_t v111 = (uint64_t (*)(unsigned char *, uint64_t))v135;
  v135(v119, v17);
  return v111(v121, v17);
}

void sub_10023F924()
{
  sub_1001FCC38();
  char v40 = v1;
  type metadata accessor for Locale();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1002467AC();
  __chkstk_darwin(v3);
  type metadata accessor for URL();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1002467C8();
  sub_10023D8D0();
  if (v5)
  {
    sub_10020ED28(v0 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_endDisclosureUtteranceChecksum, (uint64_t)v45);
    sub_100204074(v45, v45[3]);
    uint64_t v6 = sub_100246688();
    if ((v7(v6) & 1) != 0 || (v40 & 1) != 0 || (sub_10023FF5C((void (*)(uint64_t))sub_100240038) & 1) == 0)
    {
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_1001F5F88(v14, (uint64_t)qword_100594C58);
      sub_10020ED28((uint64_t)v45, (uint64_t)&v43);
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = sub_100202470();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315650;
        sub_100204074(&v43, v44);
        sub_100246854();
        sub_10024675C();
        v18();
        uint64_t v19 = String.init<A>(reflecting:)();
        sub_1002344D8(v19, v20, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1002018DC((uint64_t)&v43);
        *(_WORD *)(v17 + 12) = 2080;
        sub_10023FF5C((void (*)(uint64_t))sub_100240038);
        uint64_t v21 = String.init<A>(reflecting:)();
        sub_1002344D8(v21, v22, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100246650();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 22) = 2080;
        uint64_t v23 = String.init<A>(reflecting:)();
        sub_1002344D8(v23, v24, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "regenerating stop recording disclosure because endDisclosureUtteranceChanged:%s fileExists:%s force:%s", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
        sub_1002018DC((uint64_t)&v43);

        sub_100246650();
      }
      sub_100240038();
      sub_10020ED28((uint64_t)v45, (uint64_t)&v43);
      uint64_t v37 = sub_100246A38();
      sub_100233560(&v43, v37 + 16);
      sub_100246910();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v38 = sub_1002468FC();
      v39(v38);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      uint64_t v9 = sub_1002466F4(v8, (uint64_t)qword_100594C58);
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (_WORD *)sub_100246544();
        sub_100246668(v11);
        sub_100246944((void *)&_mh_execute_header, v12, v13, "Not regenerating stop recording disclosure");
        sub_1001F63CC();
      }
    }
    sub_1002018DC((uint64_t)v45);
  }
  else
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_1001F5F88(v25, (uint64_t)qword_100594C58);
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (_DWORD *)sub_100235B18();
      uint64_t v41 = sub_100202470();
      *uint64_t v28 = 136315138;
      v45[0] = v41;
      LanguageManager.locale.getter();
      sub_10024640C();
      v29();
      uint64_t v30 = String.init<A>(reflecting:)();
      unint64_t v32 = v31;
      uint64_t v33 = sub_100246864();
      v34(v33);
      *(void *)&long long v43 = sub_1002344D8(v30, v32, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100246650();
      swift_bridgeObjectRelease();
      sub_1002469DC((void *)&_mh_execute_header, v35, v36, "Unable to localize end recording disclosure for locale %s. Not creating end recording disclosure");
      sub_100235DAC();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      sub_100246650();
    }
  }
  sub_1001FCC08();
}

uint64_t sub_10023FF44()
{
  return sub_10023FF5C((void (*)(uint64_t))sub_100240038);
}

uint64_t sub_10023FF5C(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DisclosureDataSource();
  uint64_t v8 = swift_unknownObjectRetain();
  a1(v8);
  LOBYTE(a1) = sub_1001F3434();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  return a1 & 1;
}

uint64_t sub_100240038()
{
  return sub_1002467F0((void (*)(void))sub_100240888);
}

uint64_t sub_100240064(void (*a1)(void))
{
  type metadata accessor for URL();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1001F2514();
  a1();
  URL.appendingPathComponent(_:)();
  uint64_t v3 = sub_100246864();
  return v4(v3);
}

uint64_t sub_10024011C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  sub_100204074(a2, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
}

void sub_100240170()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  uint64_t v5 = v4;
  uint64_t v32 = v6;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v38 = v7;
  __chkstk_darwin(v8);
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v36 = v10;
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  sub_1001F2514();
  uint64_t v11 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v16);
  uint64_t v17 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v31 = *(id *)(v1 + 16);
  sub_10024640C();
  v18();
  unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = v32;
  *((void *)v21 + 2) = v1;
  *((void *)v21 + 3) = v22;
  *((void *)v21 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v21[v19], v17, v11);
  uint64_t v23 = &v21[v20];
  uint64_t v24 = v34;
  *(void *)uint64_t v23 = v33;
  *((void *)v23 + 1) = v24;
  v40[4] = sub_100245680;
  v40[5] = v21;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 1107296256;
  v40[2] = sub_1002C2C88;
  v40[3] = &unk_10050E380;
  uint64_t v25 = _Block_copy(v40);
  id v26 = v31;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_1002468DC();
  sub_1002084D8(v27);
  static DispatchQoS.unspecified.getter();
  BOOL v39 = _swiftEmptyArrayStorage;
  sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);

  sub_1001F7664();
  v28();
  sub_1001F7664();
  v29();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100240488(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v41 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v48 = a1;
  uint64_t v6 = sub_1001F081C(&qword_100586A10);
  __chkstk_darwin(v6 - 8);
  uint64_t v47 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v36 - v19;
  static URL.temporaryDirectory.getter();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v18, v12);
  BOOL v39 = (uint64_t (*)(char *, uint64_t))v21;
  uint64_t v40 = v13 + 8;
  uint64_t v37 = v20;
  sub_10025A688(v20);
  type metadata accessor for DisclosureDataSource();
  sub_100240888();
  sub_10025A688(v18);
  v21(v18, v12);
  uint64_t v22 = type metadata accessor for TaskPriority();
  long long v46 = *(_OWORD *)(v48 + 24);
  sub_1001F0530(v47, 1, 1, v22);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v23(v18, v20, v12);
  uint64_t v24 = v38;
  v23(v38, v41, v12);
  uint64_t v25 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v26 = (v25 + 64) & ~v25;
  uint64_t v27 = (v14 + v25 + v26) & ~v25;
  unint64_t v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  *(void *)(v29 + 24) = 0;
  *(_OWORD *)(v29 + 32) = v46;
  uint64_t v30 = v43;
  *(void *)(v29 + 48) = v42;
  *(void *)(v29 + 56) = v30;
  id v31 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v31(v29 + v26, v18, v12);
  v31(v29 + v27, v24, v12);
  *(void *)(v29 + v28) = v48;
  uint64_t v32 = (uint64_t *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v34 = v44;
  uint64_t v33 = v45;
  uint64_t *v32 = v44;
  v32[1] = v33;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1002084D8(v34);
  sub_10037DAC8(v47, (uint64_t)&unk_100585D70, v29);
  swift_unknownObjectRelease();
  swift_release();
  return v39(v37, v12);
}

uint64_t sub_100240888()
{
  return sub_100240064((void (*)(void))sub_1002414D8);
}

uint64_t sub_1002408B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v22;
  *(_OWORD *)(v8 + 152) = v21;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = v20;
  *(void *)(v8 + 128) = a6;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v8 + 176) = v12;
  *(void *)(v8 + 184) = *(void *)(v12 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DispatchQoS();
  *(void *)(v8 + 200) = v13;
  *(void *)(v8 + 208) = *(void *)(v13 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for URL();
  *(void *)(v8 + 224) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 232) = v15;
  *(void *)(v8 + 240) = *(void *)(v15 + 64);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10058BB20
                                                                                     + dword_10058BB20);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 264) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_100240ADC;
  return v18(a6, a7, a8, v20, 1, 1);
}

uint64_t sub_100240ADC()
{
  sub_1001F63B4();
  *(void *)(v2 + 80) = v0;
  *(unsigned char *)(v2 + 72) = v3;
  *(void *)(v2 + 64) = v1;
  uint64_t v4 = *v1;
  sub_10023D230();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1001F643C();
    return v6();
  }
  else
  {
    sub_1001F6430();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_100240C18()
{
  uint64_t v35 = v0;
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594C58);
  uint64_t v4 = *(void (**)(void))(v2 + 16);
  sub_1002468D0();
  v4();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100246484(v6))
  {
    uint64_t v33 = v4;
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)(v0 + 88) = v7;
    *(void *)(v0 + 96) = v8;
    swift_bridgeObjectRetain();
    uint64_t v10 = String.init<A>(reflecting:)();
    *(void *)(v0 + 112) = sub_1002344D8(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    sub_1002468D0();
    v12();
    uint64_t v13 = String.init<A>(reflecting:)();
    *(void *)(v0 + 120) = sub_1002344D8(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F7664();
    v15();
    _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v1, "File for disclosure \"%s\"file is at %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    uint64_t v16 = v33;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10024636C();
    v17();

    uint64_t v16 = v4;
  }
  char v18 = *(unsigned char *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 224);
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v32 = *(void **)(*(void *)(v0 + 152) + 16);
  ((void (*)(uint64_t, void, uint64_t))v16)(v19, *(void *)(v0 + 144), v21);
  unint64_t v24 = (*(unsigned __int8 *)(v20 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = v18;
  *(void *)(v25 + 24) = v23;
  *(void *)(v25 + 32) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))(v25 + v24, v19, v21);
  *(void *)(v0 + 48) = sub_100245AB4;
  *(void *)(v0 + 56) = v25;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_1002C2C88;
  *(void *)(v0 + 40) = &unk_10050E3F8;
  uint64_t v26 = _Block_copy((const void *)(v0 + 16));
  id v27 = v32;
  sub_1002084D8(v23);
  static DispatchQoS.unspecified.getter();
  *(void *)(v0 + 104) = _swiftEmptyArrayStorage;
  sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  sub_1001F7664();
  v28();
  sub_1001F7664();
  v29();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1001F643C();
  return v30();
}

uint64_t sub_100241118()
{
  swift_unknownObjectRelease();
  type metadata accessor for LanguageManager();
  sub_1001F75FC();
  sub_1001F7664();
  v1();

  sub_1002018DC(v0 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureUtteranceChecksum);
  sub_100210614(v0 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureBeepChecksum, &qword_100585D60);
  sub_1002018DC(v0 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_endDisclosureUtteranceChecksum);
  return v0;
}

uint64_t sub_1002411C4()
{
  sub_100241118();

  return swift_deallocClassInstance();
}

uint64_t sub_10024121C()
{
  return type metadata accessor for DisclosureDataSource();
}

uint64_t type metadata accessor for DisclosureDataSource()
{
  uint64_t result = qword_100585C38;
  if (!qword_100585C38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10024126C()
{
  uint64_t result = type metadata accessor for LanguageManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10024132C()
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  unint64_t v1 = (void *)sub_1002466F4(v0, (uint64_t)qword_100594C58);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_100246418(v2))
  {
    uint64_t v3 = (uint8_t *)sub_100246544();
    *(_WORD *)uint64_t v3 = 0;
    sub_100235C6C();
    _os_log_impl(v4, v5, v6, v7, v3, 2u);
    sub_1001F63CC();
  }

  sub_10023E0C8();

  sub_10023F924();
}

uint64_t sub_10024143C()
{
  return sub_1002467F0((void (*)(void))sub_100240888);
}

uint64_t sub_100241468()
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E6974656572472FLL;
  v0._object = (void *)0xEA00000000007367;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1002414D8()
{
  uint64_t v0 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self defaultManager];
  id v4 = [v3 URLsForDirectory:5 inDomains:1];

  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100246A68(v6, (uint64_t)v2);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1001F758C((uint64_t)v2, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_100241468();
    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  }
  return result;
}

uint64_t sub_10024163C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 840) = v18;
  *(_OWORD *)(v8 + 824) = v17;
  *(_OWORD *)(v8 + 808) = v16;
  *(_OWORD *)(v8 + 792) = v15;
  *(void *)(v8 + 784) = a8;
  *(void *)(v8 + 776) = a7;
  *(void *)(v8 + 768) = a6;
  *(void *)(v8 + 760) = a5;
  *(void *)(v8 + 752) = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v8 + 848) = v9;
  *(void *)(v8 + 856) = *(void *)(v9 - 8);
  *(void *)(v8 + 864) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  *(void *)(v8 + 872) = v10;
  *(void *)(v8 + 880) = *(void *)(v10 - 8);
  *(void *)(v8 + 888) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v8 + 896) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 904) = v12;
  *(void *)(v8 + 912) = *(void *)(v12 + 64);
  *(void *)(v8 + 920) = swift_task_alloc();
  *(void *)(v8 + 928) = swift_task_alloc();
  *(void *)(v8 + 936) = swift_task_alloc();
  return _swift_task_switch(sub_100241840, 0, 0);
}

uint64_t sub_100241840()
{
  sub_1002468E8();
  sub_100246768();
  uint64_t v1 = (void *)v0[94];
  v0[118] = AVMediaTypeAudio;
  v0[10] = v0;
  v0[15] = v0 + 86;
  v0[11] = sub_10024197C;
  v0[66] = swift_continuation_init();
  v0[62] = _NSConcreteStackBlock;
  v0[63] = 0x40000000;
  v0[64] = sub_10037DC9C;
  v0[65] = &unk_10050E560;
  [v1 loadTracksWithMediaType:AVMediaTypeAudio completionHandler:v0 + 62];
  sub_1002469C8();
  return _swift_continuation_await(v2);
}

uint64_t sub_10024197C()
{
  sub_1001F640C();
  sub_1001F63B4();
  *(void *)(v1 + 952) = *(void *)(v0 + 112);
  sub_1001F6430();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_100241A8C()
{
  unint64_t v1 = v0[86];
  if (v1 >> 62)
  {
    sub_100246970();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_1002DE19C(0, (v1 & 0xC000000000000001) == 0, v1);
    if ((v1 & 0xC000000000000001) != 0) {
      id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v2 = *(id *)(v1 + 32);
    }
    v0[120] = v2;
    uint64_t v3 = v0[118];
    uint64_t v4 = (void *)v0[95];
    swift_bridgeObjectRelease();
    v0[18] = v0;
    v0[23] = v0 + 92;
    v0[19] = sub_100241D34;
    v0[71] = swift_continuation_init();
    v0[67] = _NSConcreteStackBlock;
    v0[68] = 0x40000000;
    v0[69] = sub_10037DC9C;
    v0[70] = &unk_10050E578;
    [v4 loadTracksWithMediaType:v3 completionHandler:v0 + 67];
    return _swift_continuation_await(v0 + 18);
  }
  swift_bridgeObjectRelease();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = (void *)sub_1002466F4(v6, (uint64_t)qword_100594C58);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (sub_100246484(v8))
  {
    uint64_t v9 = (_WORD *)sub_100246544();
    sub_100246668(v9);
    sub_1002463AC((void *)&_mh_execute_header, v10, v11, "addEndTone: cannot create tracks for tone or messge, will use message without end tone");
    sub_1001F63CC();
  }

  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100246844();
  return v12();
}

uint64_t sub_100241D34()
{
  sub_1001F640C();
  sub_1001F63B4();
  *(void *)(v1 + 968) = *(void *)(v0 + 176);
  sub_1001F6430();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_100241E44()
{
  uint64_t v105 = v0;
  unint64_t v1 = v0[92];
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v84 = (void *)v0[120];
    swift_bridgeObjectRelease();

    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    uint64_t v86 = (void *)sub_1002466F4(v85, (uint64_t)qword_100594C58);
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (sub_100246484(v87))
    {
      uint64_t v88 = (_WORD *)sub_100246544();
      sub_100246668(v88);
      sub_1002463AC((void *)&_mh_execute_header, v89, v90, "addEndTone: cannot create tracks for tone or messge, will use message without end tone");
      sub_1001F63CC();
    }

LABEL_35:
    sub_1002462F4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100246834();
    sub_1002464A0();
    __asm { BRAA            X1, X16 }
  }
  sub_100246970();
  uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v83) {
    goto LABEL_30;
  }
LABEL_3:
  sub_1002DE19C(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v2 = *(id *)(v1 + 32);
  }
  v0[122] = v2;
  uint64_t v3 = v0[118];
  swift_bridgeObjectRelease();
  id v4 = [objc_allocWithZone((Class)AVMutableComposition) init];
  v0[123] = v4;
  id v5 = [v4 addMutableTrackWithMediaType:v3 preferredTrackID:0x7FFFFFFFLL];
  v0[124] = v5;
  if (v5)
  {
    uint64_t v6 = v5;
    sub_1001F081C(&qword_100585D88);
    id v7 = v6;
    v0[125] = static AVPartialAsyncProperty<A>.timeRange.getter();
    os_log_type_t v8 = (void *)swift_task_alloc();
    v0[126] = v8;
    void *v8 = v0;
    v8[1] = sub_1002428F4;
    sub_1002464A0();
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v9, v10);
  }
  uint64_t v12 = (void *)v0[123];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = objc_allocWithZone((Class)AVAssetExportSession);
  id v14 = sub_10038E1CC(v12);
  v0[139] = v14;
  if (!v14)
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = (void *)sub_1002466F4(v28, (uint64_t)qword_100594C58);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (sub_100246484(v30))
    {
      id v31 = (_WORD *)sub_100246544();
      sub_100246668(v31);
      sub_1002463AC((void *)&_mh_execute_header, v32, v33, "addEndTone: failed to create exportSession");
      sub_1001F63CC();
    }

    sub_100246674();
    id v34 = [self defaultManager];
    URL.path.getter();
    String._bridgeToObjectiveC()();
    uint64_t v35 = sub_1002469FC();
    uint64_t v36 = (char *)sub_100246990(v35, "fileExistsAtPath:");

    sub_1002463CC();
    sub_1002468B8();
    if (v36)
    {
      uint64_t v37 = sub_100246334();
      v38(v37);
      sub_1002465B8();
      uint64_t v39 = swift_allocObject();
      uint64_t v40 = sub_100246318(v39);
      uint64_t v42 = v41(v40);
      sub_100246790(v42, v43, v44, v45, v46, v47, v48, v49, v94, v95, v96, v97);
      v0[36] = sub_1002461F8;
      v0[37] = v39;
      v0[32] = _NSConcreteStackBlock;
      v0[33] = 1107296256;
      v0[34] = sub_1002C2C88;
      v0[35] = &unk_10050E608;
      unint64_t v50 = _Block_copy(v36);
      id v51 = v98;
      swift_bridgeObjectRetain();
      sub_1002084D8((uint64_t)v12);
      static DispatchQoS.unspecified.getter();
      v0[89] = _swiftEmptyArrayStorage;
      sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      sub_100246620();
      sub_100246894();

      _Block_release(v50);
    }
    else
    {
      uint64_t v73 = v0[104];
      uint64_t v74 = v0[103];
      uint64_t v75 = sub_100246398();
      v76(v75);
      sub_10024673C();
      uint64_t v77 = swift_allocObject();
      uint64_t v78 = sub_100246318(v77);
      v79(v78);
      uint64_t v80 = (uint64_t *)&v36[v77];
      *uint64_t v80 = v74;
      v80[1] = v73;
      v0[48] = sub_1002460E8;
      v0[49] = v77;
      v0[44] = _NSConcreteStackBlock;
      v0[45] = 1107296256;
      v0[46] = sub_1002C2C88;
      v0[47] = &unk_10050E5B8;
      uint64_t v81 = _Block_copy(v0 + 44);
      sub_1002084D8(v74);
      id v82 = v98;
      static DispatchQoS.unspecified.getter();
      v0[90] = _swiftEmptyArrayStorage;
      sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      sub_10024655C();
      sub_1002465E0();

      _Block_release(v81);
    }

    sub_1001F7664();
    v52();
    sub_1001F7664();
    v53();
    swift_release();
    goto LABEL_35;
  }
  long long v15 = v14;
  uint64_t v16 = v0[116];
  uint64_t v17 = v0[113];
  uint64_t v18 = v0[112];
  URL.deletingLastPathComponent()();
  URL.appendingPathComponent(_:)();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v0[140] = v19;
  v0[141] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v19(v16, v18);
  uint64_t v20 = self;
  v0[142] = v20;
  id v21 = [v20 defaultManager];
  URL._bridgeToObjectiveC()(v22);
  unint64_t v24 = v23;
  v0[88] = 0;
  unsigned __int8 v25 = [v21 removeItemAtURL:v23 error:v0 + 88];

  uint64_t v26 = (void *)v0[88];
  if (v25)
  {
    id v27 = v26;
  }
  else
  {
    id v54 = v26;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v55 = v0[113];
  uint64_t v56 = type metadata accessor for Logger();
  v0[143] = sub_1001F5F88(v56, (uint64_t)qword_100594C58);
  NSString v57 = *(void (**)(void))(v55 + 16);
  sub_1002468DC();
  sub_1002468D0();
  v57();
  unsigned __int8 v58 = (void *)Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (sub_100246418(v59))
  {
    uint64_t v103 = v19;
    uint64_t v60 = v0[115];
    uint64_t v61 = v0[112];
    uint64_t v62 = (uint8_t *)sub_100235B18();
    uint64_t v104 = sub_100202470();
    *(_DWORD *)uint64_t v62 = 136315138;
    sub_1002468D0();
    v57();
    uint64_t v63 = String.init<A>(reflecting:)();
    v0[83] = sub_1002344D8(v63, v64, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v103(v60, v61);
    sub_100235C6C();
    _os_log_impl(v65, v66, v67, v68, v62, 0xCu);
    sub_100235DAC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
    v19(v0[115], v0[112]);
  }

  URL._bridgeToObjectiveC()(v69);
  id v71 = v70;
  [v15 setOutputURL:v70];

  [v15 setOutputFileType:AVFileTypeAppleM4A];
  v0[2] = v0;
  v0[3] = sub_100243C20;
  v0[76] = swift_continuation_init();
  v0[72] = _NSConcreteStackBlock;
  v0[73] = 0x40000000;
  v0[74] = sub_10037DDB4;
  v0[75] = &unk_10050E630;
  [v15 exportAsynchronouslyWithCompletionHandler:v0 + 72];
  sub_1002464A0();
  return _swift_continuation_await();
}

uint64_t sub_1002428F4()
{
  sub_1002468E8();
  sub_100246768();
  sub_10024637C();
  uint64_t v3 = v2;
  sub_10023D230();
  *id v4 = v3;
  *id v4 = *v1;
  *(void *)(v3 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v5 = *(void **)(v3 + 992);
    swift_release();
  }
  else
  {
    swift_release();
  }
  sub_1001F6430();
  sub_1002469C8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100242A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100246604();
  sub_100246964();
  *(void *)(v18 + 208) = *(void *)(v18 + 304);
  uint64_t v19 = *(void **)(v18 + 992);
  uint64_t v20 = *(void *)(v18 + 976);
  uint64_t v21 = *(void *)(v18 + 344);
  CMTimeEpoch epoch = kCMTimeZero.epoch;
  *(void *)(v18 + 728) = 0;
  *(void *)(v18 + 216) = *(void *)(v18 + 312);
  *(_OWORD *)(v18 + 224) = *(_OWORD *)(v18 + 320);
  *(void *)(v18 + 240) = *(void *)(v18 + 336);
  *(void *)(v18 + 248) = v21;
  *(void *)(v18 + 640) = kCMTimeZero.value;
  *(void *)(v18 + 648) = *(void *)&kCMTimeZero.timescale;
  *(void *)(v18 + 656) = epoch;
  unsigned int v23 = [v19 insertTimeRange:v18 + 208 ofTrack:v20 atTime:v18 + 640 error:v18 + 728];

  id v24 = *(id *)(v18 + 728);
  if (v23)
  {
    unsigned __int8 v25 = *(void **)(v18 + 992);
    *(void *)(v18 + 1024) = sub_1001F081C(&qword_100585D88);
    id v26 = v25;
    *(void *)(v18 + 1032) = static AVPartialAsyncProperty<A>.timeRange.getter();
    id v27 = (void *)swift_task_alloc();
    *(void *)(v18 + 1040) = v27;
    void *v27 = v18;
    v27[1] = sub_100242D98;
    sub_1002464BC();
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v28, v29);
  }
  else
  {
    id v31 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100246808(v32, (uint64_t)qword_100594C58);
    swift_errorRetain();
    uint64_t v33 = (void *)Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = sub_100246418(v34);
    uint64_t v36 = *(void **)(v18 + 992);
    uint64_t v37 = *(void **)(v18 + 984);
    uint64_t v38 = *(void **)(v18 + 976);
    uint64_t v39 = *(void **)(v18 + 960);
    if (v35)
    {
      a12 = *(void **)(v18 + 984);
      a9 = v18 + 680;
      sub_100235B18();
      sub_100202470();
      sub_1002466A8();
      a10 = v38;
      sub_100246434(4.8149e-34);
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v40 = sub_100246A20();
      *(void *)(v18 + 680) = sub_100246A50(v40, v41, v42, v43, v44, v45, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100246500((void *)&_mh_execute_header, v47, v48, "addEndTone: cannot combine tracks, will use message without end tone: %s");
      sub_1002466B8();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_1002462F4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10024671C();
    sub_1002464BC();
    return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_100242D98()
{
  sub_1002468E8();
  sub_100246768();
  sub_10024637C();
  uint64_t v3 = v2;
  sub_10023D230();
  *id v4 = v3;
  *id v4 = *v1;
  *(void *)(v3 + 1048) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v5 = *(void **)(v3 + 992);
    swift_release();
  }
  else
  {
    swift_release();
  }
  sub_1001F6430();
  sub_1002469C8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100242ECC()
{
  *(void *)(v0 + 1056) = *(void *)(v0 + 400);
  *(void *)&long long v1 = *(void *)(v0 + 408);
  *(_OWORD *)(v0 + 1064) = *(_OWORD *)(v0 + 416);
  *((void *)&v1 + 1) = *(void *)(v0 + 432);
  *(_OWORD *)(v0 + 1200) = v1;
  *(void *)(v0 + 1080) = *(void *)(v0 + 440);
  uint64_t v2 = static AVPartialAsyncProperty<A>.timeRange.getter();
  *(void *)(v0 + 1088) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 1096) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100242FDC;
  return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 1152, v2);
}

uint64_t sub_100242FDC()
{
  sub_1002468E8();
  sub_100246768();
  sub_10024637C();
  uint64_t v3 = v2;
  sub_10023D230();
  *id v4 = v3;
  *id v4 = *v1;
  *(void *)(v3 + 1104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v5 = *(void **)(v3 + 992);
    swift_release();
  }
  else
  {
    swift_release();
  }
  sub_1001F6430();
  sub_1002469C8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100243110()
{
  uint64_t v116 = v0;
  uint64_t v1 = *(void *)(v0 + 1080);
  uint64_t v2 = *(void *)(v0 + 1056);
  uint64_t v3 = *(void **)(v0 + 992);
  uint64_t v4 = *(void *)(v0 + 960);
  uint64_t v5 = *(void *)(v0 + 1176);
  uint64_t v6 = *(void *)(v0 + 1192);
  *(void *)(v0 + 696) = 0;
  *(void *)(v0 + 448) = v2;
  *(void *)(v0 + 456) = *(void *)(v0 + 1200);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 1064);
  *(void *)(v0 + 480) = *(void *)(v0 + 1208);
  *(void *)(v0 + 488) = v1;
  *(void *)(v0 + 616) = v5;
  *(void *)(v0 + 624) = *(void *)(v0 + 1184);
  *(void *)(v0 + 632) = v6;
  unsigned int v7 = [v3 insertTimeRange:v0 + 448 ofTrack:v4 atTime:v0 + 616 error:v0 + 696];

  id v8 = *(id *)(v0 + 696);
  if (!v7)
  {
    id v26 = v8;
    uint64_t v27 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_1001F5F88(v28, (uint64_t)qword_100594C58);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = (void *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = sub_100246418(v30);
    uint64_t v32 = *(void **)(v0 + 992);
    uint64_t v33 = *(void **)(v0 + 984);
    os_log_type_t v34 = *(void **)(v0 + 976);
    BOOL v35 = *(void **)(v0 + 960);
    if (v31)
    {
      id v114 = *(void **)(v0 + 992);
      uint64_t v36 = (uint8_t *)sub_100235B18();
      v115[0] = sub_100202470();
      *(_DWORD *)uint64_t v36 = 136315138;
      *(void *)(v0 + 672) = v27;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v37 = String.init<A>(reflecting:)();
      *(void *)(v0 + 680) = sub_1002344D8(v37, v38, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100235C6C();
      _os_log_impl(v39, v40, v41, v42, v36, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_27:
    sub_1002462F4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100246834();
    sub_1002464A0();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v9 = *(void **)(v0 + 984);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  id v12 = objc_allocWithZone((Class)AVAssetExportSession);
  id v13 = sub_10038E1CC(v9);
  *(void *)(v0 + 1112) = v13;
  if (!v13)
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = (void *)sub_1002466F4(v43, (uint64_t)qword_100594C58);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (sub_100246484(v45))
    {
      uint64_t v46 = (_WORD *)sub_100246544();
      sub_100246668(v46);
      sub_1002463AC((void *)&_mh_execute_header, v47, v48, "addEndTone: failed to create exportSession");
      sub_1001F63CC();
    }

    sub_100246674();
    id v49 = [self defaultManager];
    URL.path.getter();
    String._bridgeToObjectiveC()();
    uint64_t v50 = sub_1002469FC();
    uint64_t v51 = (char *)sub_100246990(v50, "fileExistsAtPath:");

    sub_1002463CC();
    sub_1002468B8();
    if (v51)
    {
      uint64_t v52 = sub_100246334();
      v53(v52);
      sub_1002465B8();
      uint64_t v54 = swift_allocObject();
      uint64_t v55 = sub_100246318(v54);
      uint64_t v57 = v56(v55);
      sub_100246790(v57, v58, v59, v60, v61, v62, v63, v64, v103, v104, v105, v106);
      *(void *)(v0 + 288) = sub_1002461F8;
      *(void *)(v0 + 296) = v54;
      *(void *)(v0 + 256) = _NSConcreteStackBlock;
      *(void *)(v0 + 264) = 1107296256;
      *(void *)(v0 + 272) = sub_1002C2C88;
      *(void *)(v0 + 280) = &unk_10050E608;
      uint64_t v65 = _Block_copy(v51);
      id v66 = v107;
      swift_bridgeObjectRetain();
      sub_1002084D8((uint64_t)v12);
      static DispatchQoS.unspecified.getter();
      *(void *)(v0 + 712) = _swiftEmptyArrayStorage;
      sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      sub_100246620();
      sub_100246894();

      _Block_release(v65);
    }
    else
    {
      uint64_t v90 = *(void *)(v0 + 832);
      uint64_t v91 = *(void *)(v0 + 824);
      uint64_t v92 = sub_100246398();
      v93(v92);
      sub_10024673C();
      uint64_t v94 = swift_allocObject();
      uint64_t v95 = sub_100246318(v94);
      v96(v95);
      uint64_t v97 = (uint64_t *)&v51[v94];
      *uint64_t v97 = v91;
      v97[1] = v90;
      *(void *)(v0 + 384) = sub_1002460E8;
      *(void *)(v0 + 392) = v94;
      *(void *)(v0 + 352) = _NSConcreteStackBlock;
      *(void *)(v0 + 360) = 1107296256;
      *(void *)(v0 + 368) = sub_1002C2C88;
      *(void *)(v0 + 376) = &unk_10050E5B8;
      unint64_t v98 = _Block_copy((const void *)(v0 + 352));
      sub_1002084D8(v91);
      id v99 = v107;
      static DispatchQoS.unspecified.getter();
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      sub_10024655C();
      sub_1002465E0();

      _Block_release(v98);
    }

    sub_1001F7664();
    v67();
    sub_1001F7664();
    v68();
    swift_release();
    goto LABEL_27;
  }
  int v113 = v13;
  uint64_t v14 = *(void *)(v0 + 928);
  uint64_t v15 = *(void *)(v0 + 904);
  uint64_t v16 = *(void *)(v0 + 896);
  URL.deletingLastPathComponent()();
  URL.appendingPathComponent(_:)();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  *(void *)(v0 + 1120) = v17;
  *(void *)(v0 + 1128) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v14, v16);
  uint64_t v18 = self;
  *(void *)(v0 + 1136) = v18;
  id v19 = [v18 defaultManager];
  URL._bridgeToObjectiveC()(v20);
  uint64_t v22 = v21;
  *(void *)(v0 + 704) = 0;
  unsigned __int8 v23 = [v19 removeItemAtURL:v21 error:v0 + 704];

  id v24 = *(void **)(v0 + 704);
  if (v23)
  {
    id v25 = v24;
  }
  else
  {
    id v69 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v70 = *(void *)(v0 + 904);
  uint64_t v71 = type metadata accessor for Logger();
  *(void *)(v0 + 1144) = sub_1001F5F88(v71, (uint64_t)qword_100594C58);
  uint64_t v72 = *(void (**)(uint64_t))(v70 + 16);
  uint64_t v73 = sub_1002468DC();
  v72(v73);
  uint64_t v74 = (void *)Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (sub_100246418(v75))
  {
    uint64_t v76 = *(void *)(v0 + 928);
    uint64_t v77 = *(void *)(v0 + 920);
    uint64_t v112 = v17;
    uint64_t v78 = *(void *)(v0 + 896);
    uint64_t v79 = (uint8_t *)sub_100235B18();
    v115[0] = sub_100202470();
    *(_DWORD *)uint64_t v79 = 136315138;
    ((void (*)(uint64_t, uint64_t, uint64_t))v72)(v76, v77, v78);
    uint64_t v80 = String.init<A>(reflecting:)();
    *(void *)(v0 + 664) = sub_1002344D8(v80, v81, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v112(v77, v78);
    sub_100235C6C();
    _os_log_impl(v82, v83, v84, v85, v79, 0xCu);
    sub_100235DAC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
    v17(*(void *)(v0 + 920), *(void *)(v0 + 896));
  }

  URL._bridgeToObjectiveC()(v86);
  uint64_t v88 = v87;
  [v113 setOutputURL:v87];

  [v113 setOutputFileType:AVFileTypeAppleM4A];
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100243C20;
  *(void *)(v0 + 608) = swift_continuation_init();
  *(void *)(v0 + 576) = _NSConcreteStackBlock;
  *(void *)(v0 + 584) = 0x40000000;
  *(void *)(v0 + 592) = sub_10037DDB4;
  *(void *)(v0 + 600) = &unk_10050E630;
  [v113 exportAsynchronouslyWithCompletionHandler:v0 + 576];
  sub_1002464A0();
  return _swift_continuation_await();
}

uint64_t sub_100243C20()
{
  sub_1001F640C();
  uint64_t v1 = *v0;
  sub_10023D230();
  *uint64_t v2 = v1;
  sub_1001F6430();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100243D1C()
{
  id v3 = [*(id *)(v1 + 1136) defaultManager];
  URL.path.getter();
  String._bridgeToObjectiveC()();
  uint64_t v4 = sub_1002469FC();
  unsigned __int8 v5 = sub_100246990(v4, "fileExistsAtPath:");

  if (v5)
  {
    uint64_t v6 = *(void **)(v1 + 1112);
    sub_10025B194(*(void *)(v1 + 936), *(void *)(v1 + 792));
  }
  else
  {
    id v7 = *(id *)(v1 + 1112);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    uint64_t v0 = (void *)v9;
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v6 = *(void **)(v1 + 1112);
    if (v10)
    {
      uint64_t v11 = (uint8_t *)sub_100235B18();
      *(_DWORD *)uint64_t v11 = 134217984;
      uint64_t v2 = v11 + 12;
      *(void *)(v1 + 744) = [v6 status];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v0, "addEndTone: export of new greeting did not complete successfully: %ld", v11, 0xCu);
      sub_1001F63CC();
    }
    else
    {
    }
  }

  (*(void (**)(void, void))(v1 + 1120))(*(void *)(v1 + 936), *(void *)(v1 + 896));
  sub_100246674();
  id v12 = [self defaultManager];
  URL.path.getter();
  String._bridgeToObjectiveC()();
  uint64_t v13 = sub_1002469FC();
  id v14 = sub_100246990(v13, "fileExistsAtPath:");

  uint64_t v64 = (void *)*((void *)v2 + 2);
  uint64_t v68 = *(void **)(v1 + 992);
  os_log_type_t v67 = *(void **)(v1 + 984);
  uint64_t v65 = *(void **)(v1 + 960);
  id v66 = *(void **)(v1 + 976);
  if (v14)
  {
    uint64_t v15 = sub_100246334();
    v16(v15);
    sub_10024687C();
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((v17 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = sub_100246318(v20);
    v22(v21);
    unsigned __int8 v23 = (void *)(v20 + v18);
    *unsigned __int8 v23 = &selRef_conversationsByUUID;
    v23[1] = v60;
    id v24 = (uint64_t *)(v20 + v19);
    *id v24 = v61;
    v24[1] = v62;
    *(void *)(v1 + 288) = sub_1002461F8;
    *(void *)(v1 + 296) = v20;
    *(void *)(v1 + 256) = _NSConcreteStackBlock;
    *(void *)(v1 + 264) = 1107296256;
    *(void *)(v1 + 272) = sub_1002C2C88;
    *(void *)(v1 + 280) = &unk_10050E608;
    id v25 = _Block_copy(v14);
    id v26 = v64;
    swift_bridgeObjectRetain();
    sub_1002084D8(v61);
    static DispatchQoS.unspecified.getter();
    *(void *)(v1 + 712) = _swiftEmptyArrayStorage;
    sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    unint64_t v27 = sub_1001F6030();
    sub_100246930(v27, v28, v29, v30, v31, v32, v33, v34, v59, v60, v61, v62, v63);
    sub_1002469A8();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v25);
    id v35 = v66;
  }
  else
  {
    uint64_t v36 = *(void *)(v1 + 832);
    uint64_t v37 = *(void *)(v1 + 824);
    uint64_t v38 = sub_100246398();
    v39(v38);
    sub_10024687C();
    unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = sub_100246318(v42);
    v44(v43);
    os_log_type_t v45 = (uint64_t *)(v42 + v41);
    *os_log_type_t v45 = v37;
    v45[1] = v36;
    *(void *)(v1 + 384) = sub_1002460E8;
    *(void *)(v1 + 392) = v42;
    *(void *)(v1 + 352) = _NSConcreteStackBlock;
    *(void *)(v1 + 360) = 1107296256;
    *(void *)(v1 + 368) = sub_1002C2C88;
    *(void *)(v1 + 376) = &unk_10050E5B8;
    uint64_t v46 = _Block_copy((const void *)(v1 + 352));
    sub_1002084D8(v37);
    id v35 = v64;
    static DispatchQoS.unspecified.getter();
    *(void *)(v1 + 720) = _swiftEmptyArrayStorage;
    sub_10024626C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    unint64_t v47 = sub_1001F6030();
    sub_100246930(v47, v48, v49, v50, v51, v52, v53, v54, v59, v60, v61, v1 + 392, v1 + 720);
    sub_1002469A8();
    sub_1002465E0();

    _Block_release(v46);
  }

  sub_1001F7664();
  v55();
  sub_1001F7664();
  v56();
  swift_release();
  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100246834();
  return v57();
}

uint64_t sub_1002442DC()
{
  sub_1002468E8();
  sub_100246768();
  swift_willThrow();
  swift_errorRelease();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)sub_1002466F4(v0, (uint64_t)qword_100594C58);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_100246484(v2))
  {
    id v3 = (_WORD *)sub_100246544();
    sub_100246668(v3);
    sub_1002463AC((void *)&_mh_execute_header, v4, v5, "addEndTone: cannot create tracks for tone or messge, will use message without end tone");
    sub_1001F63CC();
  }

  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100246844();
  sub_1002469C8();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100244410()
{
  sub_1002468E8();
  sub_100246768();
  uint64_t v1 = *(void **)(v0 + 960);
  swift_willThrow();

  swift_errorRelease();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  id v3 = (void *)sub_1002466F4(v2, (uint64_t)qword_100594C58);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_100246484(v4))
  {
    uint64_t v5 = (_WORD *)sub_100246544();
    sub_100246668(v5);
    sub_1002463AC((void *)&_mh_execute_header, v6, v7, "addEndTone: cannot create tracks for tone or messge, will use message without end tone");
    sub_1001F63CC();
  }

  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100246844();
  sub_1002469C8();
  return v9(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_10024454C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100246604();
  sub_100246964();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100246808(v22, (uint64_t)qword_100594C58);
  swift_errorRetain();
  unsigned __int8 v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  sub_100246418(v24);
  sub_1002466E0();
  if (v25)
  {
    a13 = v18;
    sub_100246458();
    sub_100202470();
    sub_1002466A8();
    sub_100246434(4.8149e-34);
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v26 = sub_100246A20();
    uint64_t v33 = sub_100246A50(v26, v27, v28, v29, v30, v31, v32);
    sub_100246520(v33);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100246500((void *)&_mh_execute_header, v34, v35, "addEndTone: cannot combine tracks, will use message without end tone: %s");
    sub_1002466B8();
    sub_1001F63CC();
    sub_1001F63CC();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10024671C();
  sub_1002464BC();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100244730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100246604();
  sub_100246964();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100246808(v22, (uint64_t)qword_100594C58);
  swift_errorRetain();
  unsigned __int8 v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  sub_100246418(v24);
  sub_1002466E0();
  if (v25)
  {
    a13 = v18;
    sub_100246458();
    sub_100202470();
    sub_1002466A8();
    sub_100246434(4.8149e-34);
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v26 = sub_100246A20();
    uint64_t v33 = sub_100246A50(v26, v27, v28, v29, v30, v31, v32);
    sub_100246520(v33);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100246500((void *)&_mh_execute_header, v34, v35, "addEndTone: cannot combine tracks, will use message without end tone: %s");
    sub_1002466B8();
    sub_1001F63CC();
    sub_1001F63CC();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10024671C();
  sub_1002464BC();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100244914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100246604();
  sub_100246964();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100246808(v22, (uint64_t)qword_100594C58);
  swift_errorRetain();
  unsigned __int8 v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  sub_100246418(v24);
  sub_1002466E0();
  if (v25)
  {
    a13 = v18;
    sub_100246458();
    sub_100202470();
    sub_1002466A8();
    sub_100246434(4.8149e-34);
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v26 = sub_100246A20();
    uint64_t v33 = sub_100246A50(v26, v27, v28, v29, v30, v31, v32);
    sub_100246520(v33);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100246500((void *)&_mh_execute_header, v34, v35, "addEndTone: cannot combine tracks, will use message without end tone: %s");
    sub_1002466B8();
    sub_1001F63CC();
    sub_1001F63CC();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1002462F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10024671C();
  sub_1002464BC();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_100244AF8(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v31 = a2;
  uint64_t v9 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_1001F5F88(v16, (uint64_t)qword_100594C58);
  uint64_t v32 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v33 = a1;
  v32(v15, a1, v12);
  swift_bridgeObjectRetain_n();
  unint64_t v17 = a3;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v30 = a4;
    uint64_t v22 = v21;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v35 = v27;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v28 = v11;
    sub_10024626C((unint64_t *)&qword_1005888D0, (void (*)(uint64_t))&type metadata accessor for URL);
    int v26 = v20;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = sub_1002344D8(v23, v24, &v35);
    uint64_t v29 = a5;
    uint64_t v11 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_1002344D8(v31, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v26, "addEndTone: updating to greetingURL=%s for %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v30;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);

    swift_bridgeObjectRelease_n();
  }
  if (a4)
  {
    v32(v11, v33, v12);
    sub_1001F0530((uint64_t)v11, 0, 1, v12);
    a4(v11);
    sub_100210614((uint64_t)v11, &qword_1005878F0);
  }
}

void sub_100244EB8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C58);
  int v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v26 = a1;
  v25(v12, a1, v9);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    unint64_t v24 = a2;
    unint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v28 = v18;
    uint64_t v22 = v8;
    *(_DWORD *)unint64_t v17 = 136315138;
    uint64_t v21 = v17 + 4;
    sub_10024626C((unint64_t *)&qword_1005888D0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = sub_1002344D8(v19, v20, &v28);
    uint64_t v8 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "addEndTone: the tone file didn't exist, returning %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v24;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  if (a2)
  {
    v25(v8, v26, v9);
    sub_1001F0530((uint64_t)v8, 0, 1, v9);
    a2(v8);
    sub_100210614((uint64_t)v8, &qword_1005878F0);
  }
}

void sub_100245204(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1001F081C(&qword_1005878F0);
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  if (a1)
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a3, v10);
    sub_1001F0530(v9, 0, 1, v10);
    a1(v9);
    sub_100210614(v9, &qword_1005878F0);
  }
}

void *sub_1002452F0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1001F081C(&qword_100585D58);
  uint64_t v28 = &off_10050C1A0;
  unsigned char v25[4] = &off_10050C1A0;
  v26[0] = a5;
  v25[3] = v27;
  v25[0] = a6;
  uint64_t v19 = type metadata accessor for Locale();
  sub_1001F0530((uint64_t)v18, 1, 1, v19);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  a8[2] = a4;
  a8[3] = a1;
  a8[4] = a2;
  *(void *)((char *)a8 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_speechAssetManager) = a3;
  sub_10024551C(a7, (uint64_t)a8 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureBeepChecksum);
  sub_10020ED28((uint64_t)v26, (uint64_t)a8 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_startDisclosureUtteranceChecksum);
  sub_10020ED28((uint64_t)v25, (uint64_t)a8 + OBJC_IVAR____TtC13callservicesd20DisclosureDataSource_endDisclosureUtteranceChecksum);
  uint64_t v20 = a8[3];
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  *(void *)(v20 + 120) = sub_1002455BC;
  *(void *)(v20 + 128) = v21;
  id v22 = a4;
  swift_unknownObjectRetain();
  uint64_t v23 = a3;
  swift_release();
  [*(id *)&v23[OBJC_IVAR___CSDSpeechAssetManager_delegates] addObject:a8];
  sub_10023E0C8();
  sub_10023F924();
  swift_unknownObjectRelease();

  sub_100210614(a7, &qword_100585D60);
  sub_1002018DC((uint64_t)v25);
  sub_1002018DC((uint64_t)v26);
  return a8;
}

uint64_t sub_10024551C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100585D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100245584()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002455BC()
{
  return sub_10023E064();
}

uint64_t sub_1002455C4()
{
  type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  unint64_t v4 = (*(void *)(v3 + 64) + ((v2 + 40) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  sub_10024636C();
  v5();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_100245680()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_1002462DC(v1);
  sub_1002467F8();
  uint64_t v3 = *((void *)v0 + 2);
  uint64_t v4 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v7 = *(void *)&v0[v6];
  uint64_t v8 = *(void *)&v0[v6 + 8];

  return sub_100240488(v3, v4, v5, &v0[v2], v7, v8);
}

uint64_t sub_1002456EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002456FC()
{
  return swift_release();
}

uint64_t sub_100245704()
{
  type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = (((*(void *)(v4 + 64) + ((*(void *)(v4 + 64) + v3 + ((v3 + 64) & ~v3)) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void))(v2 + 8);
  sub_10024636C();
  v6();
  sub_10024636C();
  v6();
  swift_release();
  if (*(void *)(v0 + v5)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_1002457F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  sub_1002462DC(v3);
  uint64_t v5 = v1[4];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100245950;
  return sub_1002408B4(a1, v13, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_100245950()
{
  sub_1001F640C();
  sub_1001F63B4();
  uint64_t v1 = *v0;
  sub_10023D230();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1001F643C();
  return v3();
}

uint64_t sub_100245A10()
{
  type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  sub_10024636C();
  v5();

  return _swift_deallocObject(v0, ((v2 + 40) & ~v2) + v4, v2 | 7);
}

uint64_t sub_100245AB4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t result = v1 - 8;
  uint64_t v3 = v4;
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v0 + 24);
  if (*(unsigned char *)(v0 + 16) == 1 && v5 != 0) {
    return v5(v0 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  }
  return result;
}

uint64_t sub_100245B2C()
{
  sub_1002018DC(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100245B64(uint64_t a1)
{
  return sub_10024011C(a1, (void *)(v1 + 16));
}

uint64_t sub_100245B6C()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_1002018DC(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100245BB4(uint64_t a1)
{
  return sub_10023E8C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t sub_100245BC4()
{
  sub_1002018DC(v0 + 16);
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100245C04(uint64_t a1)
{
  return sub_10023EA74(a1, (void *)(v1 + 16), *(void *)(v1 + 56));
}

unint64_t sub_100245C18()
{
  unint64_t result = qword_10058BB30;
  if (!qword_10058BB30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_10058BB30);
  }
  return result;
}

uint64_t sub_100245C58()
{
  type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = *(void *)(v4 + 64);
  unint64_t v5 = (((((v8 + 7 + ((v3 + 16 + ((v8 + 7 + ((v3 + 48) & ~v3)) & 0xFFFFFFFFFFFFFFF8)) & ~v3)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  uint64_t v6 = *(void (**)(void))(v2 + 8);
  sub_10024636C();
  v6();
  swift_bridgeObjectRelease();
  sub_10024636C();
  v6();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  sub_10024636C();
  v6();

  return _swift_deallocObject(v0, ((v3 + 16 + v5) & ~v3) + v8, v3 | 7);
}

uint64_t sub_100245DBC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  sub_1002462DC(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (v5 + *(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = v1[2];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  uint64_t v14 = (uint64_t)v1 + v5;
  uint64_t v15 = v1[3];
  uint64_t v8 = *(void *)((char *)v1 + v7);
  uint64_t v9 = *(void *)((char *)v1 + v7 + 8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100245950;
  return sub_10024163C(a1, v16, v15, v12, v13, v14, v8, v9);
}

uint64_t sub_100245F54()
{
  type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  sub_10024636C();
  v5();

  return _swift_deallocObject(v0, ((v2 + 32) & ~v2) + v4, v2 | 7);
}

void sub_100245FF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  sub_100245204(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100246050()
{
  type metadata accessor for URL();
  sub_1001F75FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  unint64_t v3 = (*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v4();
  if (*(void *)(v0 + v3)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + 16, v2 | 7);
}

void sub_1002460E8()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_1002462DC(v1);
  sub_1002467F8();
  uint64_t v4 = *(void (**)(void))(v0 + v3);
  uint64_t v5 = *(void *)(v0 + v3 + 8);

  sub_100244EB8(v0 + v2, v4, v5);
}

uint64_t sub_10024614C()
{
  type metadata accessor for URL();
  sub_1001F75FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  unint64_t v3 = (((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v4();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + 16, v2 | 7);
}

void sub_1002461F8()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_1002462DC(v1);
  sub_1002467F8();
  uint64_t v3 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v4);
  unint64_t v6 = *(void *)(v0 + v4 + 8);
  uint64_t v7 = v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void (**)(void))v7;
  uint64_t v9 = *(void *)(v7 + 8);

  sub_100244AF8(v3, v5, v6, v8, v9);
}

uint64_t sub_10024626C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002462DC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1002462F4()
{
  return swift_task_dealloc();
}

uint64_t sub_100246318(uint64_t a1)
{
  return a1 + v1;
}

uint64_t sub_100246334()
{
  return v0;
}

uint64_t sub_100246398()
{
  return v0;
}

void sub_1002463AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

BOOL sub_100246418(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100246434(float a1)
{
  *uint64_t v3 = a1;
  *(void *)(v2 + 672) = v1;
  return swift_errorRetain();
}

uint64_t sub_100246458()
{
  return swift_slowAlloc();
}

BOOL sub_100246484(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1002464D8()
{
  return type metadata accessor for LanguageManager();
}

void sub_100246500(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100246520(uint64_t a1)
{
  *(void *)(v1 + 680) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100246544()
{
  return swift_slowAlloc();
}

uint64_t sub_10024655C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

unint64_t sub_100246590(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_1002465E0()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_100246620()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100246650()
{
  return swift_release_n();
}

_WORD *sub_100246668(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100246688()
{
  return v0;
}

uint64_t sub_1002466B8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1002466F4(uint64_t a1, uint64_t a2)
{
  sub_1001F5F88(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_10024671C()
{
  return v0 + 8;
}

uint64_t sub_100246774()
{
  return v0;
}

void sub_100246790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = (void *)(v12 + v15);
  *uint64_t v16 = v14;
  v16[1] = a10;
  uint64_t v17 = (void *)(v12 + v13);
  *uint64_t v17 = a11;
  v17[1] = a12;
}

uint64_t sub_1002467C8()
{
  return type metadata accessor for DisclosureDataSource();
}

uint64_t sub_1002467F0(void (*a1)(void))
{
  return sub_100240064(a1);
}

uint64_t sub_100246808(uint64_t a1, uint64_t a2)
{
  sub_1001F5F88(a1, a2);
  return swift_errorRetain();
}

uint64_t sub_100246834()
{
  return v0 + 8;
}

uint64_t sub_100246844()
{
  return v0 + 8;
}

uint64_t sub_100246864()
{
  return v0;
}

uint64_t sub_100246894()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_1002468DC()
{
  return v0;
}

uint64_t sub_1002468FC()
{
  return v0;
}

void sub_100246910()
{
  sub_100240170();
}

uint64_t sub_100246930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

void sub_100246944(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100246970()
{
  return swift_bridgeObjectRetain();
}

id sub_100246990(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1002469A8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_1002469DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1002469FC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100246A20()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_100246A38()
{
  return swift_allocObject();
}

uint64_t sub_100246A50(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_1002344D8(a1, a2, (uint64_t *)va);
}

uint64_t sub_100246A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return sub_1001F0530(a2, v7, 1, v6);
}

uint64_t sub_100246B10(uint64_t a1)
{
  return sub_100246C5C(a1, sub_100261A1C, &unk_100586E00);
}

uint64_t sub_100246B38(uint64_t a1)
{
  return sub_100246DE0(a1, (uint64_t (*)(void))sub_100206F1C, (uint64_t (*)(void))sub_1002477C8);
}

uint64_t sub_100246B64(uint64_t a1)
{
  uint64_t result = sub_100206F1C(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return sub_100247844(result, v3, 0, a1);
  }
}

uint64_t sub_100246BE0(uint64_t a1)
{
  return sub_100246DE0(a1, (uint64_t (*)(void))sub_100261A1C, (uint64_t (*)(void))sub_1002475B8);
}

uint64_t sub_100246C0C(uint64_t a1)
{
  return sub_100246C5C(a1, sub_100261A1C, &qword_100585860);
}

uint64_t sub_100246C34(uint64_t a1)
{
  return sub_100246C5C(a1, sub_100261A1C, &unk_1005858E0);
}

uint64_t sub_100246C5C(uint64_t a1, uint64_t (*a2)(uint64_t), void *a3)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    uint64_t v7 = v6;
    char v8 = 1;
  }
  else
  {
    uint64_t v5 = a2(a1);
    uint64_t v7 = v9;
    char v8 = v10 & 1;
  }
  uint64_t v11 = sub_100247304(a1);
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  char v16 = sub_100247670(v5, v7, v8, v11, v12, v14 & 1);
  sub_10023561C(v11, v13, v15);
  if (v16)
  {
    sub_10023561C(v5, v7, v8);
    return 0;
  }
  else
  {
    sub_100247380(v5, v7, v8, a1, a3);
    uint64_t v17 = v18;
    sub_10023561C(v5, v7, v8);
  }
  return v17;
}

double sub_100246D78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_10020ED28(a1 + 32, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100246DB4(uint64_t a1)
{
  return sub_100246DE0(a1, (uint64_t (*)(void))sub_100247720, (uint64_t (*)(void))sub_1002476A4);
}

uint64_t sub_100246DE0(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t result = a2();
  if (v7) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v6)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return a3();
  }
}

unint64_t SpamModelable.messageKey.getter()
{
  return 0xD000000000000019;
}

uint64_t CSDCall.spamModel(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_100247094();
  uint64_t v24 = v11;
  unint64_t v25 = v10;
  uint64_t v12 = (uint64_t)sub_1002471A8();
  if (!v12)
  {
    id v13 = [v3 remoteParticipantHandles];
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100247240();
    uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = sub_100246C5C(v14, (uint64_t (*)(uint64_t))sub_100261A1C, &unk_100586E00);
    swift_bridgeObjectRelease();
  }
  id v15 = [v3 callUUID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  [v3 callDuration];
  Date.init(timeIntervalSinceNow:)();
  Date.timeIntervalSince1970.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v22 = v24;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v22;
  *(void *)(a3 + 16) = v26;
  *(void *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v18;
  *(void *)(a3 + 56) = v20;
  *(unsigned char *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0xD000000000000019;
  *(void *)(a3 + 80) = 0x800000010047ED30;
  return result;
}

unint64_t sub_100247094()
{
  id v1 = [v0 remoteParticipantHandles];
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100247240();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_10039E66C(v2);
  swift_bridgeObjectRelease();
  id v4 = [v0 provider];
  unsigned int v5 = [v4 isFaceTimeProvider];

  unint64_t v6 = 0xD000000000000013;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v7 = 0x656D697465636166;
  if (!v5) {
    uint64_t v7 = 0;
  }
  if (v3 == 1) {
    return v6;
  }
  else {
    return v7;
  }
}

id sub_1002471A8()
{
  id v1 = [self sharedInstance];
  id v2 = [v1 activeConversationForCall:v0];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 initiator];

  return v3;
}

unint64_t sub_100247240()
{
  unint64_t result = qword_100585920;
  if (!qword_100585920)
  {
    sub_1001F6204(255, (unint64_t *)&unk_100586E00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585920);
  }
  return result;
}

unint64_t sub_1002472A0()
{
  return 0xD000000000000019;
}

void *sub_1002472C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CSDCall.spamModel(with:)(a1, a2, (uint64_t)__src);
  return memcpy(a3, __src, 0x58uLL);
}

uint64_t sub_100247304(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.endIndex.getter();
  }
  else {
    return 1 << *(unsigned char *)(a1 + 32);
  }
}

void sub_100247358(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_10024736C(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_100247380(uint64_t a1, int a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_1002478AC();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_1002478AC();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v19;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = v8 & ~v9;
  sub_100247898();
  if ((v10 & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v11 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ~v9;
    do
    {
      uint64_t v7 = (v7 + 1) & v13;
      sub_100247898();
      if ((v14 & 1) == 0) {
        goto LABEL_23;
      }
      id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }

LABEL_17:
  uint64_t v17 = *(void **)(*(void *)(a4 + 48) + 8 * v7);

  id v18 = v17;
}

uint64_t sub_1002475B8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_100247634(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_100247648(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_10024765C(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

uint64_t sub_100247670(uint64_t result, int a2, char a3, uint64_t a4, int a5, char a6)
{
  if (a3)
  {
    if (a6) {
      return static __CocoaSet.Index.== infix(_:_:)();
    }
  }
  else if ((a6 & 1) == 0)
  {
    if (a2 == a5) {
      return result == a4;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002476A4(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100247720(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 192;
  for (uint64_t i = 12; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1002477C8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 56) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100247844(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1002478AC()
{
  return sub_1001F6204(0, v0);
}

uint64_t sub_1002478CC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1001F081C(&qword_100585F18);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  Swift::Int v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  v6 &= v6 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v15 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)&v8[8 * (v16 >> 6)]) == 0)
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v20 || (v19 & 1) == 0)
      {
        BOOL v21 = v17 == v20;
        if (v17 == v20) {
          unint64_t v17 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v8[8 * v17];
        if (v22 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)&v8[8 * (v16 >> 6)])) | v16 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v8[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    uint64_t v23 = v2[6] + 40 * v18;
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(v23 + 32) = v26;
    ++v2[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v7) {
      goto LABEL_36;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v11);
    int64_t v13 = v10 + 1;
    if (!v12)
    {
      int64_t v13 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_36;
      }
      uint64_t v12 = *(void *)(v3 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_36;
        }
        uint64_t v12 = *(void *)(v3 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_36;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v12 - 1) & v12;
    int64_t v10 = v13;
  }
  int64_t v14 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_36:
    swift_release();
    sub_100206FA0();
    return (uint64_t)v2;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v10 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v7) {
      goto LABEL_36;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100247BCC()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) devices];
  sub_1002495B0();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100247C40(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  return v4;
}

void sub_100247C40(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
    {
LABEL_14:
      sub_10024DF84((uint64_t)_swiftEmptyArrayStorage);
      return;
    }
    sub_1002E3EC4();
    if (v2 < 0) {
      break;
    }
    uint64_t v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      uint64_t v6 = IDSCopyIDForDevice();
      if (!v6) {
        goto LABEL_20;
      }
      int64_t v7 = (void *)v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1002E3EC4();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v8;
      v12[5] = v10;
      if (v2 == v3) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

id sub_100247DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(v3 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) service];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1002478CC(a3);
  Class v7 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001F081C(&qword_100585F08);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19[1] = v9;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  Dictionary.init(dictionaryLiteral:)();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = 0;
  v19[0] = 0;
  unsigned int v11 = [v5 sendData:isa toDestinations:v7 priority:300 options:v10 identifier:v19 error:&v18];
  swift_unknownObjectRelease();

  id v12 = v18;
  id v13 = (id)v19[0];
  if (v11)
  {
    if (v19[0])
    {
      id v13 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v12;
    }
    else
    {
      sub_100249564();
      swift_allocError();
      id v16 = v12;
      swift_willThrow();
    }
  }
  else
  {
    id v15 = v18;
    id v13 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_willThrow();
  }
  return v13;
}

uint64_t sub_100248018(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_knownDestinations) = a1;
  return swift_bridgeObjectRelease();
}

void sub_100248030(void *a1, uint64_t a2)
{
  if (!a2 || (id v4 = sub_100370DC8(a2)) == 0)
  {
LABEL_20:
    sub_1002497E0();
    return;
  }
  sub_100247C40((unint64_t)v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100252010(v7, v6);
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRelease();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1001F5F88(v10, (uint64_t)qword_100594C10);
    id v21 = a1;
    unsigned int v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)sub_100235B18();
      id v14 = (void *)swift_slowAlloc();
      *(_DWORD *)id v13 = 138412290;
      if (a1) {
        id v15 = v21;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v14 = a1;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "ConversationLinkSync: Ignoring devicesChanged signal from IDSService because destinations are the same {service:%@}", v13, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      goto LABEL_20;
    }

    sub_1002497E0();
  }
  else
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_100248018(v16);
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_100341A10(v2, v6);
      swift_bridgeObjectRelease();
      sub_1002497E0();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1002497E0();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1002483C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (a2)
    {
      sub_10033C7C0(*(void *)(a2 + 16) != 0);
      return swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_1002484C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint8_t *a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (uint8_t *)v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v98 - v16;
  if (!a6)
  {
LABEL_9:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v12 + 16))(v15, v28, v11);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      sub_100235B18();
      uint64_t v104 = sub_100249814();
      *(_DWORD *)id v15 = 136315138;
      if (!a6)
      {
        __break(1u);
LABEL_81:
        __break(1u);
        return;
      }
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_1002497F8();
      sub_100249764(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "ConversationLinkSync: Incoming sync message, invalid fromID -- dropping {fromID: %s}", v15, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint8_t *, uint64_t))(v12 + 8))(v15, v11);
    return;
  }
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = (void *)IDSCopyAddressDestinationForDestination();

  uint64_t v20 = (void *)IDSCopyRawAddressForDestination();
  if (!v20)
  {
LABEL_17:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v32 = (_DWORD *)sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34))
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    sub_100235B18();
    uint64_t v104 = sub_100249814();
    _DWORD *v32 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1002497F8();
    sub_100249764(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100249830((void *)&_mh_execute_header, v36, v37, "ConversationLinkSync: Incoming sync message, invalid destinationID -- dropping {fromID: %s}");
    swift_arrayDestroy();
    goto LABEL_26;
  }
  uint64_t v102 = v6;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v100 = a4;
  uint64_t v101 = a3;
  long long v24 = *(Class *)((char *)&v102->isa + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service);
  id v25 = [v24 allAliases];
  uint64_t v26 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v25) = sub_10039E4D0(v21, v23, v26);
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v38 = (_DWORD *)sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    uint64_t v102 = v102;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v39))
    {

      goto LABEL_34;
    }
    sub_100235B18();
    uint64_t v104 = sub_100249814();
    _DWORD *v38 = 136315138;
    id v40 = [v24 allAliases];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v41 = Array.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_1002344D8(v41, v43, (uint64_t *)&v104);
    sub_100249764(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    sub_100249830((void *)&_mh_execute_header, v45, v46, "ConversationLinkSync: Incoming sync message, unknown destinationID -- dropping {destinationID: fromID, self.service.allAliases: %s}");
    swift_arrayDestroy();
LABEL_26:
    sub_1001F63CC();
    sub_1001F63CC();

    return;
  }
  unint64_t v27 = v100;
  if (v100 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_38:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v59 = sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v59, v11);
    uint64_t v60 = v101;
    sub_100249550(v101, v27);
    sub_100249550(v60, v27);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62))
    {
      sub_1001FCB18(v60, v27);
      sub_1001FCB18(v60, v27);
      goto LABEL_44;
    }
    uint64_t v63 = (uint8_t *)sub_100235B18();
    uint64_t v102 = swift_slowAlloc();
    uint64_t v104 = v102;
    *(_DWORD *)uint64_t v63 = 136315138;
    if (v27 >> 60 != 15)
    {
      id v99 = v63 + 4;
      uint64_t v64 = v101;
      sub_1001F7440(v101, v27);
      uint64_t v65 = Data.description.getter();
      unint64_t v67 = v66;
      sub_1001FCB18(v64, v27);
      uint64_t v68 = sub_1002344D8(v65, v67, (uint64_t *)&v104);
      sub_100249764(v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001FCB18(v64, v27);
      sub_1001FCB18(v64, v27);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "ConversationLinkSync: Incoming sync message, invalid data -- dropping {data: %s}", v63, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
LABEL_44:

      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return;
    }
    goto LABEL_81;
  }
  uint64_t v47 = v101;
  sub_1001F7440(v101, v100);
  if (Data.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001FCB18(v47, v27);
    goto LABEL_38;
  }
  id v99 = (uint8_t *)v21;
  id v48 = objc_allocWithZone((Class)CSDMessagingLinkSyncMessage);
  sub_1001F7440(v47, v27);
  id v49 = sub_1001FC93C(v47, v27);
  if (v49)
  {
    uint64_t v50 = v49;
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain_n();
    id v52 = v50;
    swift_bridgeObjectRetain();
    v98[1] = v51;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    uint64_t v55 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      v98[0] = swift_slowAlloc();
      uint64_t v104 = v98[0];
      *(_DWORD *)uint64_t v56 = 67109634;
      unsigned int v57 = objc_msgSend(v52, "type", v98[0]);

      LODWORD(v103) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v56 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v103 = sub_1002497F8();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 18) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v103 = sub_1002344D8((uint64_t)v99, v23, (uint64_t *)&v104);
      unint64_t v27 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "ConversationLinkSync: Incoming sync message type: %d, processing {fromID: %s, destinationID: %s}", (uint8_t *)v56, 0x1Cu);
      swift_arrayDestroy();
      sub_1001F63CC();
      uint64_t v55 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
      sub_1001F63CC();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    unsigned int v72 = [v52 v55[55]];
    switch(v72)
    {
      case 1u:
        id v78 = [v52 updateMessage];
        if (v78)
        {
          uint64_t v79 = v78;
          if (!swift_unknownObjectWeakLoadStrong())
          {
            sub_100249778();

            goto LABEL_79;
          }
          sub_10033E8E0(v79);
          sub_100249778();

          goto LABEL_66;
        }
        swift_bridgeObjectRelease();
        id v92 = v52;
        uint64_t v85 = sub_100249864();
        os_log_type_t v93 = static os_log_type_t.error.getter();
        if (sub_1002497A8(v93))
        {
          sub_100235B18();
          uint64_t v94 = (void *)sub_1002497C4();
          sub_100249714(5.7779e-34);
          sub_100249740();
          *uint64_t v94 = v50;

          uint64_t v88 = "ConversationLinkSync: Incoming sync message, type was update but message was missing updateMessage {syncMessage: %@}";
          goto LABEL_76;
        }
        break;
      case 3u:
        id v80 = [v52 recoverMessage];
        if (v80)
        {
          uint64_t v74 = v80;
          if (swift_unknownObjectWeakLoadStrong())
          {
            unint64_t v81 = (void *)sub_100249850();
            sub_10033FD40(v81, v82, v83);
            goto LABEL_65;
          }
LABEL_69:
          sub_100249778();

          goto LABEL_79;
        }
        swift_bridgeObjectRelease();
        id v95 = v52;
        uint64_t v85 = sub_100249864();
        os_log_type_t v96 = static os_log_type_t.error.getter();
        if (sub_1002497A8(v96))
        {
          sub_100235B18();
          uint64_t v97 = (void *)sub_1002497C4();
          sub_100249714(5.7779e-34);
          sub_100249740();
          *uint64_t v97 = v50;

          uint64_t v88 = "ConversationLinkSync: Incoming sync message, type was recover but message was missing recoverMessage {syncMessage: %@}";
          goto LABEL_76;
        }
        break;
      case 2u:
        id v73 = [v52 checkInMessage];
        if (v73)
        {
          uint64_t v74 = v73;
          if (swift_unknownObjectWeakLoadStrong())
          {
            os_log_type_t v75 = (void *)sub_100249850();
            sub_10033BDFC(v75, v76, v77);
LABEL_65:
            sub_100249778();

LABEL_66:
            swift_unknownObjectRelease();
LABEL_79:

            return;
          }
          goto LABEL_69;
        }
        swift_bridgeObjectRelease();
        id v89 = v52;
        uint64_t v85 = sub_100249864();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (sub_1002497A8(v90))
        {
          sub_100235B18();
          uint64_t v91 = (void *)sub_1002497C4();
          sub_100249714(5.7779e-34);
          sub_100249740();
          *uint64_t v91 = v50;

          uint64_t v88 = "ConversationLinkSync: Incoming sync message, type was checkIn but message was missing checkInMessage {syncMessage: %@}";
          goto LABEL_76;
        }
        break;
      default:
        swift_bridgeObjectRelease();
        id v84 = v52;
        uint64_t v85 = sub_100249864();
        os_log_type_t v86 = static os_log_type_t.default.getter();
        if (sub_1002497A8(v86))
        {
          sub_100235B18();
          os_log_type_t v87 = (void *)sub_1002497C4();
          sub_100249714(5.7779e-34);
          sub_100249740();
          *os_log_type_t v87 = v50;

          uint64_t v88 = "ConversationLinkSync: Incoming sync message, type was unknown {syncMessage: %@}";
LABEL_76:
          _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v55, v88, a6, 0xCu);
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          sub_1001FCB18(v101, v23);
          return;
        }
        break;
    }
    sub_1001FCB18(v101, v27);

    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  sub_1001F5F88(v11, (uint64_t)qword_100594C10);
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v102, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v102, v69, "ConversationLinkSync: Incoming sync message, data no protobuf -- dropping", v70, 2u);
    sub_1001F63CC();

    uint64_t v71 = v101;
    sub_1001FCB18(v71, v27);
    return;
  }
  sub_1001FCB18(v101, v27);
LABEL_34:
  uint64_t v58 = v102;
}

void sub_10024945C()
{
}

id sub_10024949C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLinkSyncIDSInteractor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLinkSyncIDSInteractor()
{
  return self;
}

uint64_t sub_100249550(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001F7440(a1, a2);
  }
  return a1;
}

unint64_t sub_100249564()
{
  unint64_t result = qword_100585F10;
  if (!qword_100585F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585F10);
  }
  return result;
}

unint64_t sub_1002495B0()
{
  unint64_t result = qword_100585F20;
  if (!qword_100585F20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100585F20);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConversationLinkSyncIDSInteractor.IDSInteractorError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10024968CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkSyncIDSInteractor.IDSInteractorError()
{
  return &type metadata for ConversationLinkSyncIDSInteractor.IDSInteractorError;
}

unint64_t sub_1002496C8()
{
  unint64_t result = qword_100585F28;
  if (!qword_100585F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585F28);
  }
  return result;
}

id sub_100249714(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v3 - 88) = v2;
  return v2;
}

uint64_t sub_100249740()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100249764(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_100249778()
{
  sub_1001FCB18(*(void *)(v1 - 112), v0);
  return swift_bridgeObjectRelease();
}

BOOL sub_1002497A8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1002497C4()
{
  return swift_slowAlloc();
}

uint64_t sub_1002497F8()
{
  return sub_1002344D8(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_100249814()
{
  return swift_slowAlloc();
}

void sub_100249830(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100249850()
{
  return v0;
}

uint64_t sub_100249864()
{
  return Logger.logObject.getter();
}

void sub_10024987C()
{
  sub_1001FCC38();
  int v22 = v1;
  int v23 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR___CSDSimulatedAVCSession_participants] = _swiftEmptyDictionarySingleton;
  swift_unknownObjectWeakInit();
  uint64_t v11 = (uint64_t *)&v0[OBJC_IVAR___CSDSimulatedAVCSession_sessionIdentifier];
  uint64_t v12 = v0;
  UUID.init()();
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  *uint64_t v11 = v13;
  v11[1] = v15;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isVideo] = 1;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady] = 1;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted] = 0;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled] = 1;
  uint64_t v16 = OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled] = 1;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused] = 0;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused] = 0;
  uint64_t v17 = OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled] = 0;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isRelaying] = 0;
  v12[OBJC_IVAR___CSDSimulatedAVCSession_isScreening] = 0;
  *(_DWORD *)&v12[OBJC_IVAR___CSDSimulatedAVCSession_presentationState] = 0;
  NSString v18 = &v12[OBJC_IVAR___CSDSimulatedAVCSession_presentationRect];
  *(_OWORD *)NSString v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  swift_unknownObjectWeakAssign();
  *(void *)&v12[OBJC_IVAR___CSDSimulatedAVCSession_queue] = v4;
  v12[v16] = v22;
  v12[v17] = v23;
  id v19 = v4;

  uint64_t v20 = (objc_class *)type metadata accessor for SimulatedAVCSession();
  v24.receiver = v12;
  v24.super_class = v20;
  objc_msgSendSuper2(&v24, "init");
  swift_unknownObjectRelease();

  sub_1001FCC08();
}

uint64_t sub_100249B88()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_sessionIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100249BD4()
{
  return 100;
}

uint64_t sub_100249C04()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isVideo);
}

uint64_t sub_100249C38(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideo);
}

uint64_t sub_100249C6C()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady);
}

uint64_t sub_100249CA0(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady);
}

uint64_t sub_100249CD4()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted);
}

uint64_t sub_100249D08(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted);
}

uint64_t sub_100249D3C()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled);
}

uint64_t sub_100249D70(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled);
}

uint64_t sub_100249DA4()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled);
}

uint64_t sub_100249DD8(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled);
}

uint64_t sub_100249E14()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused);
}

uint64_t sub_100249E48(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused);
}

uint64_t sub_100249E7C()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused);
}

uint64_t sub_100249EB0(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused);
}

uint64_t sub_100249EE4()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled);
}

uint64_t sub_100249F18(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled);
}

uint64_t sub_100249F4C()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isRelaying);
}

uint64_t sub_100249F80(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isRelaying);
}

uint64_t sub_100249FB4()
{
  return sub_10024B3C4(OBJC_IVAR___CSDSimulatedAVCSession_isScreening);
}

uint64_t sub_100249FE8(uint64_t a1)
{
  return sub_10024B3BC(a1, OBJC_IVAR___CSDSimulatedAVCSession_isScreening);
}

uint64_t sub_10024A020()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_presentationState);
}

uint64_t sub_10024A058(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___CSDSimulatedAVCSession_presentationState) = result;
  return result;
}

double sub_10024A08C()
{
  return *(double *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_presentationRect);
}

void sub_10024A0C8(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = (double *)(v4 + OBJC_IVAR___CSDSimulatedAVCSession_presentationRect);
  *uint64_t v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
}

uint64_t sub_10024A12C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CSDSimulatedAVCSession_participants;
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16)) {
    sub_100233714(a1);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

void sub_10024A1C8()
{
  sub_1001FCC38();
  uint64_t v3 = v0;
  char v5 = v4;
  char v7 = v6;
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v27 = v13;
  __chkstk_darwin(v14);
  sub_10021EA1C();
  sub_1001F6398();
  uint64_t v25 = v16;
  uint64_t v26 = v15;
  __chkstk_darwin(v15);
  id v17 = sub_10024B398();
  sub_1001F081C(&qword_100584B20);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10048FAF0;
  *(void *)(v18 + 56) = sub_10024B29C();
  *(void *)(v18 + 64) = sub_10024B2DC((unint64_t *)&unk_100585FF0, (void (*)(uint64_t))sub_10024B29C);
  *(void *)(v18 + 32) = v11;
  *(void *)(v18 + 96) = &type metadata for Bool;
  *(void *)(v18 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v18 + 72) = v9;
  *(void *)(v18 + 136) = &type metadata for Bool;
  *(void *)(v18 + 144) = &protocol witness table for Bool;
  *(unsigned char *)(v18 + 112) = v7;
  *(void *)(v18 + 176) = &type metadata for Bool;
  *(void *)(v18 + 184) = &protocol witness table for Bool;
  *(unsigned char *)(v18 + 152) = v5;
  id v19 = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  [v19 identifier];
  swift_beginAccess();
  id v20 = v19;
  sub_10027F898();
  swift_endAccess();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  *(void *)(v21 + 24) = v20;
  v28[4] = sub_10024B36C;
  v28[5] = v21;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256;
  v28[2] = sub_1002C2C88;
  v28[3] = &unk_10050E808;
  int v22 = _Block_copy(v28);
  id v23 = v20;
  id v24 = v3;
  static DispatchQoS.unspecified.getter();
  sub_10024B2DC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10024B3CC();
  sub_10024B3F8();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v26);
  swift_release();
  sub_1001FCC08();
}

void *sub_10024A500(uint64_t a1, void *a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    objc_msgSend(result, "addedRemoteParticipantWithIdentifier:updatedAudioEnabled:updatedVideoEnabled:streamToken:screenToken:captionsToken:", objc_msgSend(a2, "identifier"), 1, 1, 0, 0, 0);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_10024A618()
{
  sub_1001FCC38();
  uint64_t v3 = v0;
  char v5 = v4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v22 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  id v13 = sub_10024B398();
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048F550;
  *(void *)(v14 + 56) = sub_10024B29C();
  *(void *)(v14 + 64) = sub_10024B2DC((unint64_t *)&unk_100585FF0, (void (*)(uint64_t))sub_10024B29C);
  *(void *)(v14 + 32) = v5;
  id v15 = v5;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v16 = [v15 identifier];
  swift_beginAccess();
  id v17 = (void *)sub_1002CE658(v16);
  swift_endAccess();

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v3;
  *(void *)(v18 + 24) = v15;
  v23[4] = sub_10024B364;
  v23[5] = v18;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_1002C2C88;
  void v23[3] = &unk_10050E7B8;
  id v19 = _Block_copy(v23);
  id v20 = v15;
  id v21 = v3;
  static DispatchQoS.unspecified.getter();
  sub_10024B2DC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10024B3CC();
  sub_10024B3F8();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v22);
  swift_release();
  sub_1001FCC08();
}

void *sub_10024A91C(uint64_t a1, void *a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    objc_msgSend(result, "removedRemoteParticipantWithIdentifier:didSucceed:", objc_msgSend(a2, "identifier"), 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_10024AA34()
{
  sub_1001FCC38();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  id v11 = sub_10024B398();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  v15[4] = sub_10024B294;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  uint64_t v15[2] = sub_1002C2C88;
  v15[3] = &unk_10050E768;
  id v13 = _Block_copy(v15);
  id v14 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10024B2DC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10024B3F8();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
  swift_release();
  sub_1001FCC08();
}

void *sub_10024AC78(uint64_t a1)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result session:a1 didStart:1 error:0];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_10024AD30()
{
}

void sub_10024AD80()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  id v13 = sub_10024B398();
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048F550;
  if (v3)
  {
    v22[0] = v3;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v15 = String.init<A>(reflecting:)();
    unint64_t v17 = v16;
  }
  else
  {
    unint64_t v17 = 0xE300000000000000;
    uint64_t v15 = 7104878;
  }
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1001F3B08();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v0;
  v22[4] = sub_10024B274;
  v22[5] = v18;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  void v22[2] = sub_1002C2C88;
  v22[3] = &unk_10050E718;
  id v19 = _Block_copy(v22);
  id v20 = v0;
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_10024B2DC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  (*(void (**)(uint64_t, void))(v11 + 8))(v1, v21[0]);
  swift_release();
  sub_1001FCC08();
}

void *sub_10024B070(uint64_t a1)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result session:a1 didStopWithError:0];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_10024B134()
{
}

id sub_10024B174()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedAVCSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SimulatedAVCSession()
{
  return self;
}

uint64_t sub_10024B23C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10024B274()
{
  return sub_10024B070(*(void *)(v0 + 16));
}

uint64_t sub_10024B27C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10024B28C()
{
  return swift_release();
}

void *sub_10024B294()
{
  return sub_10024AC78(*(void *)(v0 + 16));
}

unint64_t sub_10024B29C()
{
  unint64_t result = qword_100588540;
  if (!qword_100588540)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100588540);
  }
  return result;
}

uint64_t sub_10024B2DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024B324()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10024B364()
{
  return sub_10024A91C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_10024B36C()
{
  return sub_10024A500(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_10024B398()
{
  return sub_1001B1C90();
}

uint64_t sub_10024B3BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(v2 + a2) = result;
  return result;
}

uint64_t sub_10024B3C4@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(v1 + a1);
}

uint64_t sub_10024B3CC()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10024B3F8()
{
  return 0;
}

uint64_t sub_10024B408()
{
  return 0;
}

uint64_t sub_10024B414(uint64_t a1, char a2)
{
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 1;
  *(unsigned char *)(v2 + 56) = 0;
  sub_10023C1C4(v6);
  sub_10023C59C((uint64_t)v6, v2 + 64, (uint64_t *)&unk_10058A140);
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_10024B484()
{
  sub_10024DF2C();
  uint64_t v15 = _typeName(_:qualified:)();
  uint64_t v16 = v1;
  v2._countAndFlagsBits = 40;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v14, "audioSession=");
  HIWORD(v14._object) = -4864;
  id v13 = *(void **)(v0 + 16);
  sub_1001F6204(0, &qword_1005860D8);
  id v3 = v13;
  v4._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x3D6C61636F6CLL;
  v14._object = (void *)0xE600000000000000;
  char v5 = *(unsigned char *)(v0 + 24);
  if (v5) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 24)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    [v3 opaqueSessionID];
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    sub_10024DF40();
    v10._countAndFlagsBits = 0x7365536F69647561;
    v10._object = (void *)0xEF3D44496E6F6973;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v15;
}

unint64_t sub_10024B6A0(unint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = result;
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v9 = *(void *)(v4 + 40);
  uint64_t v11 = *(void *)(v4 + 48);
  unint64_t v12 = HIDWORD(result);
  if (v11 == 1)
  {
    if (a3 == 1) {
      return result;
    }
    sub_10023C458(result, a2, a3);
    sub_10023C458(v10, v9, 1);
    sub_10023C25C(v10, v9, 1);
    sub_10023C25C(v8, v7, a3);
    char v13 = v8 & 1;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    sub_10023C458(result, a2, 1);
    sub_10023C458(v10, v9, v11);
    sub_10023C25C(v10, v9, v11);
LABEL_12:
    sub_10023C25C(v8, v7, a3);
    id v16 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_10048FB00;
    char v47 = a4;
    uint64_t v46 = v7;
    int v45 = v12;
    if (a3 == 1)
    {
      unint64_t v18 = 0xE300000000000000;
      uint64_t v19 = 7104878;
    }
    else
    {
      LOBYTE(v48) = v8 & 1;
      HIDWORD(v48) = v12;
      uint64_t v49 = v7;
      uint64_t v50 = a3;
      char v51 = a4 & 1;
      swift_bridgeObjectRetain();
      uint64_t v19 = String.init<A>(reflecting:)();
      unint64_t v18 = v20;
    }
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v21 = sub_1001F3B08();
    *(void *)(v17 + 64) = v21;
    *(void *)(v17 + 32) = v19;
    *(void *)(v17 + 40) = v18;
    id v48 = (id)v4;
    swift_retain();
    uint64_t v22 = String.init<A>(reflecting:)();
    *(void *)(v17 + 96) = &type metadata for String;
    *(void *)(v17 + 104) = v21;
    *(void *)(v17 + 72) = v22;
    *(void *)(v17 + 80) = v23;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    id v24 = *(void **)(v4 + 16);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v48 = 0;
    unsigned int v26 = [v24 setActivationContext:isa error:&v48];

    if (v26)
    {
      id v27 = v48;
      id v28 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      uint64_t v29 = *(void *)(v4 + 32);
      uint64_t v30 = *(void *)(v4 + 40);
      uint64_t v31 = *(void *)(v4 + 48);
      *(void *)(v4 + 32) = v8;
      *(void *)(v4 + 40) = v46;
      *(void *)(v4 + 48) = a3;
      *(unsigned char *)(v4 + 56) = v47;
      return sub_10023C25C(v29, v30, v31);
    }
    else
    {
      id v32 = v48;
      uint64_t v33 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      id v34 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1004904F0;
      if (a3 == 1)
      {
        unint64_t v36 = 0xE300000000000000;
        uint64_t v37 = 7104878;
      }
      else
      {
        LOBYTE(v48) = v8 & 1;
        HIDWORD(v48) = v45;
        uint64_t v49 = v46;
        uint64_t v50 = a3;
        char v51 = v47 & 1;
        uint64_t v37 = String.init<A>(reflecting:)();
      }
      *(void *)(v35 + 56) = &type metadata for String;
      *(void *)(v35 + 64) = v21;
      *(void *)(v35 + 32) = v37;
      *(void *)(v35 + 40) = v36;
      id v48 = (id)v4;
      swift_retain();
      uint64_t v38 = String.init<A>(reflecting:)();
      *(void *)(v35 + 96) = &type metadata for String;
      *(void *)(v35 + 104) = v21;
      *(void *)(v35 + 72) = v38;
      *(void *)(v35 + 80) = v39;
      id v48 = v33;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v40 = String.init<A>(reflecting:)();
      *(void *)(v35 + 136) = &type metadata for String;
      *(void *)(v35 + 144) = v21;
      *(void *)(v35 + 112) = v40;
      *(void *)(v35 + 120) = v41;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
  }
  if ((result & 1) == ((*(void *)(v4 + 32) & 1) == 0) || HIDWORD(v10) != HIDWORD(result)) {
    goto LABEL_10;
  }
  if (v11)
  {
    if (!a3)
    {
LABEL_10:
      char v13 = result;
LABEL_11:
      uint64_t v15 = v13 & 1 | (v12 << 32);
      swift_bridgeObjectRetain();
      sub_10027EA84(v15, v7, a3, a4 & 1);
      goto LABEL_12;
    }
    if (v9 != a2 || v11 != a3)
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v13 = v8;
      if ((v43 & 1) == 0) {
        goto LABEL_11;
      }
    }
    uint64_t result = v8;
    a2 = v7;
    uint64_t v44 = a3;
  }
  else
  {
    char v13 = result;
    if (a3) {
      goto LABEL_11;
    }
    uint64_t v44 = 0;
  }

  return sub_10023C25C(result, a2, v44);
}

uint64_t sub_10024BC40(uint64_t a1, char a2)
{
  sub_10023C59C(a1, (uint64_t)v110, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v110, (uint64_t)v119, (uint64_t *)&unk_10058A140);
  int v105 = sub_10024DF14((uint64_t)v119);
  sub_10023C59C(a1, (uint64_t)v116, (uint64_t *)&unk_10058A140);
  uint64_t v4 = &selRef_setActiveRequestsByTransactionID_;
  uint64_t v104 = v2;
  if (sub_10024DF14((uint64_t)v116) == 1) {
    goto LABEL_21;
  }
  uint64_t v5 = v118;
  if (v118)
  {
    uint64_t v6 = v117;
    swift_bridgeObjectRetain();
    sub_1003A47C8();
    uint64_t v8 = v7;
    unint64_t v9 = v7[2];
    if (v9 >= v7[3] >> 1)
    {
      sub_1003A47C8();
      uint64_t v8 = v101;
    }
    v8[2] = v9 + 1;
    uint64_t v10 = &v8[2 * v9];
    void v10[4] = v6;
    v10[5] = v5;
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  id v11 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048F550;
  v112[0] = v8;
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_10058B600);
  uint64_t v13 = String.init<A>(reflecting:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1001F3B08();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v16 = *(void **)(v2 + 16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v112[0] = 0;
  LODWORD(v13) = [v16 setHostProcessAttribution:isa error:v112];

  id v18 = v112[0];
  if (!v13) {
    goto LABEL_29;
  }
  sub_10023C59C((uint64_t)v119, (uint64_t)v112, (uint64_t *)&unk_10058A140);
  if (v115)
  {
    id v19 = v18;
    uint64_t v4 = &selRef_setActiveRequestsByTransactionID_;
    goto LABEL_21;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    id v29 = v18;
    sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C4E0);
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v26 = v18;
  sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C4E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = 0;
  if ((v25 & 1) == 0)
  {
    if (v114 == 1)
    {
      id v28 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      uint64_t v27 = 1;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v27 = 0;
  }
LABEL_19:
  id v30 = sub_10023A81C();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v32 = [objc_allocWithZone((Class)NSNumber) initWithBool:v27];
  v111[0] = 0;
  uint64_t v4 = &selRef_setActiveRequestsByTransactionID_;
  unsigned int v33 = [v16 setMXSessionProperty:v31 value:v32 error:v111];

  id v34 = v111[0];
  if (!v33) {
    goto LABEL_48;
  }
  id v35 = v111[0];
  sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
LABEL_21:
  unint64_t v36 = *(void **)(v2 + 16);
  if (qword_100583770 != -1) {
    swift_once();
  }
  NSString v37 = String._bridgeToObjectiveC()();
  id v38 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  v112[0] = 0;
  uint64_t v39 = v4;
  unsigned int v40 = objc_msgSend(v36, v4[256], v37, v38, v112);

  if (!v40)
  {
    id v47 = v112[0];
    goto LABEL_31;
  }
  uint64_t v41 = qword_100583778;
  id v42 = v112[0];
  if (v41 != -1) {
    swift_once();
  }
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  v112[0] = 0;
  unsigned int v45 = objc_msgSend(v36, v39[256], v43, v44, v112);

  id v18 = v112[0];
  if (!v45)
  {
LABEL_29:
    id v47 = v18;
LABEL_31:
    id v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_32;
  }
  sub_10023C59C(a1, (uint64_t)v112, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v112) == 1)
  {
    id v46 = v18;
    goto LABEL_46;
  }
  uint64_t v72 = v113 & 1;
  v111[0] = 0;
  sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C4E0);
  id v73 = v18;
  unsigned int v74 = [v36 setEligibleForBTSmartRoutingConsideration:v72 error:v111];
  id v34 = v111[0];
  if (!v74)
  {
LABEL_48:
    id v87 = v34;
    id v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
    goto LABEL_32;
  }
  id v75 = v111[0];
  sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
LABEL_46:
  uint64_t v76 = a2 & 1;
  id v103 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_10048FF70;
  uint64_t v78 = String.init<A>(reflecting:)();
  uint64_t v80 = v79;
  *(void *)(v77 + 56) = &type metadata for String;
  unint64_t v81 = sub_1001F3B08();
  *(void *)(v77 + 32) = v78;
  *(void *)(v77 + 40) = v80;
  *(void *)(v77 + 96) = &type metadata for UInt;
  *(void *)(v77 + 104) = &protocol witness table for UInt;
  *(void *)(v77 + 64) = v81;
  *(void *)(v77 + 72) = v76;
  v108[0] = (id)v2;
  swift_retain();
  uint64_t v82 = String.init<A>(reflecting:)();
  *(void *)(v77 + 136) = &type metadata for String;
  *(void *)(v77 + 144) = v81;
  *(void *)(v77 + 112) = v82;
  *(void *)(v77 + 120) = v83;
  uint64_t v84 = v2 + 64;
  sub_10023C59C(v2 + 64, (uint64_t)v109, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v109, (uint64_t)v111, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v111) == 1)
  {
    unint64_t v85 = 0xE300000000000000;
    uint64_t v86 = 7104878;
  }
  else
  {
    v108[0] = *(id *)(v2 + 72);
    type metadata accessor for Category(0);
    id v88 = v108[0];
    uint64_t v86 = String.init<A>(reflecting:)();
  }
  *(void *)(v77 + 176) = &type metadata for String;
  *(void *)(v77 + 184) = v81;
  *(void *)(v77 + 152) = v86;
  *(void *)(v77 + 160) = v85;
  sub_10023C59C(v2 + 64, (uint64_t)v107, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v107, (uint64_t)v108, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v108) == 1)
  {
    unint64_t v89 = 0xE300000000000000;
    uint64_t v90 = 7104878;
  }
  else
  {
    uint64_t v91 = *(void **)(v2 + 80);
    uint64_t v90 = 7104878;
    if (v91)
    {
      v106[0] = *(id *)(v2 + 80);
      type metadata accessor for Mode(0);
      id v92 = v91;
      uint64_t v90 = String.init<A>(reflecting:)();
    }
    else
    {
      unint64_t v89 = 0xE300000000000000;
    }
  }
  *(void *)(v77 + 216) = &type metadata for String;
  *(void *)(v77 + 224) = v81;
  *(void *)(v77 + 192) = v90;
  *(void *)(v77 + 200) = v89;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  v106[0] = 0;
  unsigned int v93 = [v36 setActive:v105 == 0 withOptions:v76 error:v106];
  id v94 = v106[0];
  if (!v93)
  {
    id v100 = v106[0];
    id v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_32:
    v108[0] = v48;
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    sub_1001F6204(0, &qword_100589C50);
    swift_dynamicCast();
    uint64_t v49 = (void *)v107[0];
    sub_10023C59C(a1, (uint64_t)v111, (uint64_t *)&unk_10058A140);
    if (sub_10024DF14((uint64_t)v111) == 1)
    {
      id v50 = [v49 domain];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v56 & 1) == 0) {
          goto LABEL_42;
        }
      }
      if ([v49 code] == (id)560030580)
      {
        id v57 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_10048F550;
        id v59 = [v49 code];
        *(void *)(v58 + 56) = &type metadata for Int;
        *(void *)(v58 + 64) = &protocol witness table for Int;
        *(void *)(v58 + 32) = v59;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        sub_10023C59C(v104 + 64, (uint64_t)v109, (uint64_t *)&unk_10058A140);
        sub_10023C59C(a1, v104 + 64, (uint64_t *)&unk_10058A140);
        sub_10023C46C((uint64_t)v109, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
        return swift_errorRelease();
      }
    }
LABEL_42:
    id v60 = sub_1001B1BF8();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_1004904F0;
    LOBYTE(v109[0]) = v105 == 0;
    uint64_t v62 = String.init<A>(reflecting:)();
    uint64_t v64 = v63;
    *(void *)(v61 + 56) = &type metadata for String;
    unint64_t v65 = sub_1001F3B08();
    *(void *)(v61 + 64) = v65;
    *(void *)(v61 + 32) = v62;
    *(void *)(v61 + 40) = v64;
    v109[0] = v104;
    swift_retain();
    uint64_t v66 = String.init<A>(reflecting:)();
    *(void *)(v61 + 96) = &type metadata for String;
    *(void *)(v61 + 104) = v65;
    *(void *)(v61 + 72) = v66;
    *(void *)(v61 + 80) = v67;
    v109[0] = v49;
    id v68 = v49;
    uint64_t v69 = String.init<A>(reflecting:)();
    *(void *)(v61 + 136) = &type metadata for String;
    *(void *)(v61 + 144) = v65;
    *(void *)(v61 + 112) = v69;
    *(void *)(v61 + 120) = v70;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  sub_10023C59C(v84, (uint64_t)v106, (uint64_t *)&unk_10058A140);
  sub_10023C59C(a1, v84, (uint64_t *)&unk_10058A140);
  sub_10023C46C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C4E0);
  id v95 = v94;
  sub_10023C46C((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
  id v96 = sub_1001B1BF8();
  uint64_t v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_10048FB00;
  uint64_t v98 = String.init<A>(reflecting:)();
  *(void *)(v97 + 56) = &type metadata for String;
  *(void *)(v97 + 64) = v81;
  *(void *)(v97 + 32) = v98;
  *(void *)(v97 + 40) = v99;
  *(void *)(v97 + 96) = &type metadata for UInt;
  *(void *)(v97 + 104) = &protocol witness table for UInt;
  *(void *)(v97 + 72) = v76;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10024C994(unsigned __int8 *__src)
{
  uint64_t v2 = v1;
  memcpy(__dst, __src, sizeof(__dst));
  sub_10023C59C((uint64_t)(v1 + 8), (uint64_t)v37, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v37, (uint64_t)v38, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v38) != 1)
  {
    int v4 = v38[49];
    sub_10023C59C((uint64_t)v37, (uint64_t)v32, (uint64_t *)&unk_10058A140);
    sub_10023C3D8((uint64_t)v32);
    if (((v4 ^ ([(id)v2[2] interruptionPriority] != (id)10)) & 1) == 0) {
      sub_10024CD9C(v4);
    }
    sub_10023C46C((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
  }
  uint64_t v5 = sub_10024DF5C();
  sub_10023C458(v5, v6, v7);
  unint64_t v8 = sub_10024DF5C();
  sub_10024B6A0(v8, v9, v10, v11);
  id v30 = _swiftEmptyDictionarySingleton;
  sub_10023C59C((uint64_t)(__src + 148), (uint64_t)v31, &qword_100585B48);
  sub_10023C59C((uint64_t)v31, (uint64_t)&v34, &qword_100585B48);
  if (v35) {
    goto LABEL_12;
  }
  int v12 = v34;
  id v13 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048FB00;
  uint64_t v15 = *v2;
  v32[0] = *v2;
  sub_1001F081C((uint64_t *)&unk_1005860E0);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1001F3B08();
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for Int32;
  *(void *)(v14 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v14 + 72) = v12;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if ((v12 - 1) < 2)
  {
    unsigned int v33 = &type metadata for Bool;
    LOBYTE(v32[0]) = 0;
    goto LABEL_10;
  }
  if ((v12 - 3) < 2)
  {
    unsigned int v33 = &type metadata for Bool;
    LOBYTE(v32[0]) = 1;
LABEL_10:
    sub_1002C2414((uint64_t)v32);
LABEL_11:
    uint64_t v20 = self;
    uint64_t v21 = v30;
    swift_bridgeObjectRetain();
    sub_100393B1C();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    sub_10023C2C4(v23, v20);
    id v24 = sub_1001B1BF8();
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10048FB00;
    v32[0] = v15;
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = v19;
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v27;
    *(void *)(v25 + 96) = sub_1001F081C((uint64_t *)&unk_100586DF0);
    *(void *)(v25 + 104) = sub_10023C270();
    *(void *)(v25 + 72) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
LABEL_12:
    sub_10024D390(*((void **)__src + 1), *((NSString **)__src + 2));
    sub_10024CD9C(__src[49]);
    memcpy(v29, __dst, 0x99uLL);
    ScreenSharingActivityManager.carPlayDidDisconnect()();
    sub_10023C59C((uint64_t)v29, (uint64_t)v32, (uint64_t *)&unk_10058A140);
    return sub_10024BC40((uint64_t)v32, 0);
  }
  if (!v12) {
    goto LABEL_11;
  }
  type metadata accessor for TUTelephonyCallSubType(0);
  LODWORD(v32[0]) = v12;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_10024CD9C(int a1)
{
  sub_10024DF2C();
  if (((a1 ^ ([*(id *)(v1 + 16) interruptionPriority] != (id)10)) & 1) == 0)
  {
    if (a1) {
      uint64_t v3 = 10;
    }
    else {
      uint64_t v3 = 0;
    }
    if (*(unsigned char *)(v1 + 24) == 1)
    {
      uint64_t v4 = 7104878;
      id v5 = sub_1001B1BF8();
      sub_1001F081C(&qword_100584B20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10048FAF0;
      *(void *)(v6 + 56) = &type metadata for Int;
      *(void *)(v6 + 64) = &protocol witness table for Int;
      *(void *)(v6 + 32) = v3;
      v45[0] = (id)v1;
      swift_retain();
      uint64_t v7 = String.init<A>(reflecting:)();
      uint64_t v9 = v8;
      *(void *)(v6 + 96) = &type metadata for String;
      unint64_t v10 = sub_1001F3B08();
      *(void *)(v6 + 104) = v10;
      *(void *)(v6 + 72) = v7;
      *(void *)(v6 + 80) = v9;
      sub_10023C59C(v1 + 64, (uint64_t)v46, (uint64_t *)&unk_10058A140);
      sub_10023C59C((uint64_t)v46, (uint64_t)v47, (uint64_t *)&unk_10058A140);
      if (sub_10024DF14((uint64_t)v47) == 1)
      {
        unint64_t v11 = 0xE300000000000000;
        uint64_t v12 = 7104878;
      }
      else
      {
        v45[0] = *(id *)(v1 + 72);
        type metadata accessor for Category(0);
        id v22 = v45[0];
        uint64_t v4 = 7104878;
        uint64_t v12 = String.init<A>(reflecting:)();
      }
      *(void *)(v6 + 136) = &type metadata for String;
      *(void *)(v6 + 144) = v10;
      *(void *)(v6 + 112) = v12;
      *(void *)(v6 + 120) = v11;
      sub_10023C59C(v1 + 64, (uint64_t)v44, (uint64_t *)&unk_10058A140);
      sub_10023C59C((uint64_t)v44, (uint64_t)v45, (uint64_t *)&unk_10058A140);
      if (sub_10024DF14((uint64_t)v45) == 1 || (uint64_t v23 = *(void **)(v1 + 80)) == 0)
      {
        unint64_t v25 = 0xE300000000000000;
      }
      else
      {
        v43[0] = *(id *)(v1 + 80);
        type metadata accessor for Mode(0);
        id v24 = v23;
        uint64_t v4 = String.init<A>(reflecting:)();
      }
      *(void *)(v6 + 176) = &type metadata for String;
      *(void *)(v6 + 184) = v10;
      *(void *)(v6 + 152) = v4;
      *(void *)(v6 + 160) = v25;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      uint64_t v26 = *(void **)(v1 + 16);
      v43[0] = 0;
      if ([v26 setInterruptionPriority:v3 error:v43])
      {
        id v27 = v43[0];
        id v21 = sub_1001B1BF8();
        static os_log_type_t.default.getter();
        goto LABEL_17;
      }
      id v36 = v43[0];
      NSString v37 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      id v30 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1004904F0;
      *(void *)(v38 + 56) = &type metadata for Int;
      *(void *)(v38 + 64) = &protocol witness table for Int;
      *(void *)(v38 + 32) = v3;
      v43[0] = (id)v1;
      swift_retain();
      uint64_t v39 = String.init<A>(reflecting:)();
      *(void *)(v38 + 96) = &type metadata for String;
      *(void *)(v38 + 104) = v10;
      *(void *)(v38 + 72) = v39;
      *(void *)(v38 + 80) = v40;
      v43[0] = v37;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v41 = String.init<A>(reflecting:)();
      *(void *)(v38 + 136) = &type metadata for String;
      *(void *)(v38 + 144) = v10;
      *(void *)(v38 + 112) = v41;
      *(void *)(v38 + 120) = v42;
    }
    else
    {
      id v13 = sub_1001B1BF8();
      sub_1001F081C(&qword_100584B20);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_10048FB00;
      *(void *)(v14 + 56) = &type metadata for Int;
      *(void *)(v14 + 64) = &protocol witness table for Int;
      *(void *)(v14 + 32) = v3;
      v47[0] = (id)v1;
      swift_retain();
      uint64_t v15 = String.init<A>(reflecting:)();
      uint64_t v17 = v16;
      *(void *)(v14 + 96) = &type metadata for String;
      unint64_t v18 = sub_1001F3B08();
      *(void *)(v14 + 104) = v18;
      *(void *)(v14 + 72) = v15;
      *(void *)(v14 + 80) = v17;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      unint64_t v19 = *(void **)(v1 + 16);
      v47[0] = 0;
      if ([v19 deactivateAndSetInterruptionPriority:v3 error:v47])
      {
        id v20 = v47[0];
        id v21 = sub_1001B1BF8();
        static os_log_type_t.default.getter();
LABEL_17:
        os_log(_:dso:log:type:_:)();

        return;
      }
      id v28 = v47[0];
      id v29 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      id v30 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1004904F0;
      *(void *)(v31 + 56) = &type metadata for Int;
      *(void *)(v31 + 64) = &protocol witness table for Int;
      *(void *)(v31 + 32) = v3;
      v47[0] = (id)v1;
      swift_retain();
      uint64_t v32 = String.init<A>(reflecting:)();
      *(void *)(v31 + 96) = &type metadata for String;
      *(void *)(v31 + 104) = v18;
      *(void *)(v31 + 72) = v32;
      *(void *)(v31 + 80) = v33;
      v47[0] = v29;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v34 = String.init<A>(reflecting:)();
      *(void *)(v31 + 136) = &type metadata for String;
      *(void *)(v31 + 144) = v18;
      *(void *)(v31 + 112) = v34;
      *(void *)(v31 + 120) = v35;
    }
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

void sub_10024D390(void *a1, NSString *a2)
{
  if (*(unsigned char *)(v2 + 24) == 1)
  {
    if (a2) {
      uint64_t v49 = a2;
    }
    else {
      uint64_t v49 = AVAudioSessionModeDefault;
    }
    id v5 = *(void **)(v2 + 16);
    uint64_t v6 = a2;
    id v7 = [v5 category];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
LABEL_20:
        id v21 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_1004904F0;
        type metadata accessor for Category(0);
        uint64_t v23 = a1;
        uint64_t v24 = String.init<A>(reflecting:)();
        uint64_t v26 = v25;
        *(void *)(v22 + 56) = &type metadata for String;
        unint64_t v27 = sub_1001F3B08();
        *(void *)(v22 + 64) = v27;
        *(void *)(v22 + 32) = v24;
        *(void *)(v22 + 40) = v26;
        type metadata accessor for Mode(0);
        id v28 = v49;
        uint64_t v29 = String.init<A>(reflecting:)();
        *(void *)(v22 + 96) = &type metadata for String;
        *(void *)(v22 + 104) = v27;
        *(void *)(v22 + 72) = v29;
        *(void *)(v22 + 80) = v30;
        swift_retain();
        uint64_t v31 = String.init<A>(reflecting:)();
        *(void *)(v22 + 136) = &type metadata for String;
        *(void *)(v22 + 144) = v27;
        *(void *)(v22 + 112) = v31;
        *(void *)(v22 + 120) = v32;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        id v50 = 0;
        if ([v5 setCategory:v23 mode:v28 options:0 error:&v50])
        {
          uint64_t v33 = v50;
          id v34 = sub_1001B1BF8();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
        }
        else
        {
          uint64_t v35 = v50;
          id v36 = (NSString *)_convertNSErrorToError(_:)();

          swift_willThrow();
          id v37 = sub_1001B1BF8();
          static os_log_type_t.error.getter();
          uint64_t v38 = swift_allocObject();
          *(_OWORD *)(v38 + 16) = xmmword_10048FAF0;
          id v50 = v23;
          uint64_t v39 = v23;
          uint64_t v40 = String.init<A>(reflecting:)();
          *(void *)(v38 + 56) = &type metadata for String;
          *(void *)(v38 + 64) = v27;
          *(void *)(v38 + 32) = v40;
          *(void *)(v38 + 40) = v41;
          id v50 = v28;
          uint64_t v42 = v28;
          uint64_t v43 = String.init<A>(reflecting:)();
          *(void *)(v38 + 96) = &type metadata for String;
          *(void *)(v38 + 104) = v27;
          *(void *)(v38 + 72) = v43;
          *(void *)(v38 + 80) = v44;
          id v50 = (NSString *)v2;
          swift_retain();
          uint64_t v45 = String.init<A>(reflecting:)();
          *(void *)(v38 + 136) = &type metadata for String;
          *(void *)(v38 + 144) = v27;
          *(void *)(v38 + 112) = v45;
          *(void *)(v38 + 120) = v46;
          id v50 = v36;
          swift_errorRetain();
          sub_1001F081C((uint64_t *)&unk_100585FE0);
          uint64_t v47 = String.init<A>(reflecting:)();
          *(void *)(v38 + 176) = &type metadata for String;
          *(void *)(v38 + 184) = v27;
          *(void *)(v38 + 152) = v47;
          *(void *)(v38 + 160) = v48;
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          swift_errorRelease();
        }
        return;
      }
    }
    id v14 = [v5 mode];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      goto LABEL_20;
    }
  }
}

id sub_10024D880(char a1)
{
  uint64_t v2 = v1;
  sub_10023C1C4(v35);
  sub_10023C59C((uint64_t)v35, (uint64_t)v34, (uint64_t *)&unk_10058A140);
  sub_10024BC40((uint64_t)v34, a1);
  if (qword_100583A18 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594C40);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting kMXSessionProperty_PrefersNoInterruptionsDuringRemoteDeviceControl=false", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = *(void **)(v2 + 16);
  if (qword_100583778 != -1) {
    swift_once();
  }
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithBool:0];
  id v33 = 0;
  unsigned int v11 = [v8 setMXSessionProperty:v9 value:v10 error:&v33];

  if (v11)
  {
    id v12 = v33;
  }
  else
  {
    id v13 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      id v33 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v17 = String.init<A>(reflecting:)();
      sub_1002344D8(v17, v18, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error setting kMXSessionProperty_PrefersNoInterruptionsDuringRemoteDeviceControl=false %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  if ((*(unsigned char *)(v2 + 24) & 1) == 0) {
    sub_10024CD9C(0);
  }
  unint64_t v19 = sub_10024DF70();
  sub_10024B6A0(v19, v20, v21, v22);
  id v33 = 0;
  unsigned int v23 = [v8 overrideOutputAudioPort:0 error:&v33];
  id v24 = v33;
  if (v23)
  {
    return v24;
  }
  else
  {
    id v26 = v33;
    unint64_t v27 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v28 = sub_1001B1BF8();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_10048F550;
    id v33 = v27;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v30 = String.init<A>(reflecting:)();
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1001F3B08();
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v32;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_10024DD68()
{
  id v1 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  unint64_t v2 = sub_10024DF70();
  sub_10024B6A0(v2, v3, v4, v5);
  sub_10023C1C4(v7);
  sub_10023C59C(v0 + 64, (uint64_t)v8, (uint64_t *)&unk_10058A140);
  sub_10023C59C((uint64_t)v7, v0 + 64, (uint64_t *)&unk_10058A140);
  return sub_10023C46C((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
}

uint64_t sub_10024DE30()
{
  sub_10023C25C(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10023C59C(v0 + 64, (uint64_t)v2, (uint64_t *)&unk_10058A140);
  sub_10023C46C((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10023C1CC);
  return v0;
}

uint64_t sub_10024DE98()
{
  sub_10024DE30();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AVAudioSessionInterruptionProvider()
{
  return self;
}

uint64_t sub_10024DEF0()
{
  return sub_10024B484();
}

uint64_t sub_10024DF14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void sub_10024DF40()
{
  uint64_t v1 = 32;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_10024DF5C()
{
  return v0;
}

uint64_t sub_10024DF70()
{
  return 0;
}

uint64_t sub_10024DF84(uint64_t a1)
{
  uint64_t v9 = Set.init(minimumCapacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1002DFB58(&v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    sub_1002544EC();
  }
  return v1;
}

uint64_t sub_10024E030(unint64_t a1)
{
  return sub_10024E2D8(a1, (unint64_t *)&unk_100586190, (uint64_t)CXHandle_ptr, (unint64_t *)&unk_100585430, (void (*)(id *, id))sub_1002DFCD0);
}

void *sub_10024E060(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = sub_1002E4D1C(v19, a1);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    id v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_1002DFB58(&v17, v15, v16);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v18;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10024E1E0(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v9 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 4 * i + 32);
      sub_1002DFD08(&v8, v5);
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v6 = v2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10024E278(unint64_t a1)
{
  return sub_10024E2D8(a1, (unint64_t *)&unk_1005888A0, (uint64_t)TUConversationMember_ptr, (unint64_t *)&qword_1005858C0, (void (*)(id *, id))sub_1002E00A8);
}

uint64_t sub_10024E2A8(unint64_t a1)
{
  return sub_10024E2D8(a1, (unint64_t *)&unk_100586E00, (uint64_t)TUHandle_ptr, (unint64_t *)&qword_100585920, (void (*)(id *, id))sub_1002E00C4);
}

uint64_t sub_10024E2D8(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_1001F6204(0, a2);
  sub_100210D5C(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  uint64_t v16 = result;
  if (!v9)
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_13;
  }
LABEL_5:
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * i + 32);
      }
      a5(&v15, v14);
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  __break(1u);
  return result;
}

void *sub_10024E44C(uint64_t a1)
{
  uint64_t v11 = Set.init(minimumCapacity:)();
  uint64_t result = sub_1002E4D1C(v12, a1);
  uint64_t v3 = v12[1];
  int64_t v4 = v12[3];
  uint64_t v5 = v13;
  int64_t v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    uint64_t result = (void *)sub_1002E00E0();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v8 - 1) & v8;
    int64_t v4 = v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10024E5A8(uint64_t a1, uint64_t a2)
{
  return sub_10025100C(a1, a2, 1);
}

unint64_t ProcessState.init(rawValue:)(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

uint64_t sub_10024E5C0(uint64_t a1, void *a2)
{
  sub_1002E4D1C(v32, a1);
  uint64_t v30 = v32[0];
  int64_t v31 = v32[3];
  unint64_t v3 = v32[4];
  uint64_t v28 = v32[1];
  int64_t v29 = (unint64_t)(v32[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v4 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v5 = v4 | (v31 << 6);
  while (1)
  {
    int v10 = *(_DWORD *)(*(void *)(v30 + 48) + 4 * v5);
    uint64_t v11 = *(void *)(*(void *)(v30 + 56) + 8 * v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v33 = (void *)*a2;
    uint64_t v13 = v33;
    *a2 = 0x8000000000000000;
    unint64_t v14 = sub_10023383C(v10);
    uint64_t v16 = v13[2];
    BOOL v17 = (v15 & 1) == 0;
    Swift::Int v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    unint64_t v19 = v14;
    char v20 = v15;
    sub_1001F081C(&qword_100586158);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18))
    {
      unint64_t v21 = sub_10023383C(v10);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_33;
      }
      unint64_t v19 = v21;
    }
    unsigned int v23 = v33;
    if (v20)
    {
      *(void *)(v33[7] + 8 * v19) = v11;
    }
    else
    {
      v33[(v19 >> 6) + 8] |= 1 << v19;
      *(_DWORD *)(v23[6] + 4 * v19) = v10;
      *(void *)(v23[7] + 8 * v19) = v11;
      uint64_t v24 = v23[2];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_31;
      }
      v23[2] = v26;
    }
    *a2 = v23;
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_32;
    }
    if (v6 >= v29) {
      return swift_release();
    }
    unint64_t v7 = *(void *)(v28 + 8 * v6);
    int64_t v8 = v31 + 1;
    if (!v7)
    {
      int64_t v8 = v31 + 2;
      if (v31 + 2 >= v29) {
        return swift_release();
      }
      unint64_t v7 = *(void *)(v28 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v31 + 3;
        if (v31 + 3 >= v29) {
          return swift_release();
        }
        unint64_t v7 = *(void *)(v28 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v31 + 4;
          if (v31 + 4 >= v29) {
            return swift_release();
          }
          unint64_t v7 = *(void *)(v28 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v31 + 5;
            if (v31 + 5 >= v29) {
              return swift_release();
            }
            unint64_t v7 = *(void *)(v28 + 8 * v8);
            if (!v7)
            {
              int64_t v9 = v31 + 6;
              while (v9 < v29)
              {
                unint64_t v7 = *(void *)(v28 + 8 * v9++);
                if (v7)
                {
                  int64_t v8 = v9 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v7 - 1) & v7;
    unint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
    int64_t v31 = v8;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10024E858(uint64_t a1, uint64_t (*a2)(void, void))
{
  sub_1002E4D1C(v15, a1);
  uint64_t v3 = v15[0];
  uint64_t v4 = v15[1];
  int64_t v5 = v15[3];
  unint64_t v6 = v15[4];
  int64_t v7 = (unint64_t)(v15[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    uint64_t result = a2(*(unsigned int *)(*(void *)(v3 + 48) + 4 * v10), *(void *)(*(void *)(v3 + 56) + 8 * v10));
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10024E9B8(uint64_t a1, char *a2)
{
  sub_1002E4D1C(v28, a1);
  uint64_t v25 = v28[1];
  int64_t v3 = v28[3];
  unint64_t v4 = v28[4];
  int64_t v5 = &a2[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier];
  int64_t v26 = (unint64_t)(v28[2] + 64) >> 6;
  uint64_t v27 = v28[0];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_15;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v3 + 3;
      if (v3 + 3 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v3 + 4;
      if (v3 + 4 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10)
      {
LABEL_13:
        int64_t v9 = v11;
      }
      else
      {
        int64_t v9 = v3 + 5;
        if (v3 + 5 >= v26) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v25 + 8 * v9);
        if (!v10)
        {
          int64_t v24 = v3 + 6;
          while (v24 < v26)
          {
            unint64_t v10 = *(void *)(v25 + 8 * v24++);
            if (v10)
            {
              int64_t v9 = v24 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:

          return swift_release();
        }
      }
    }
LABEL_14:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    int64_t v3 = v9;
LABEL_15:
    unint64_t v12 = (uint64_t *)(*(void *)(v27 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    swift_beginAccess();
    uint64_t v15 = *(void *)v5;
    uint64_t v16 = *(void **)(*(void *)v5 + 16);
    swift_bridgeObjectRetain_n();
    if (v16)
    {
      unint64_t v17 = sub_100233664();
      if (v18)
      {
        uint64_t v16 = *(void **)(*(void *)(v15 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    unint64_t v19 = (void *)sub_100250908(v14, v13);
    if (v16 && (sub_1002ED1F0(v16, v19), (v20 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v21 = swift_bridgeObjectRetain();
      sub_10027F8E4(v21, v14, v13);
      swift_endAccess();
      uint64_t v22 = swift_bridgeObjectRelease();
      __chkstk_darwin(v22);
      uint64_t v23 = v29;
      sub_10024E858((uint64_t)v19, sub_10025350C);
      uint64_t v29 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10024ECB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v32 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  int64_t v35 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * i);
    uint64_t v15 = sub_100250CC4(v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v17 = (void *)*a2;
    id v36 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v18 = sub_10023383C(v14);
    uint64_t v20 = v17[2];
    BOOL v21 = (v19 & 1) == 0;
    Swift::Int v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    unint64_t v23 = v18;
    char v24 = v19;
    sub_1001F081C((uint64_t *)&unk_100585610);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
    {
      unint64_t v25 = sub_10023383C(v14);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_36;
      }
      unint64_t v23 = v25;
    }
    if (v24)
    {
      *(void *)(v36[7] + 8 * v23) = v15;
    }
    else
    {
      v36[(v23 >> 6) + 8] |= 1 << v23;
      *(_DWORD *)(v36[6] + 4 * v23) = v14;
      *(void *)(v36[7] + 8 * v23) = v15;
      uint64_t v27 = v36[2];
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_33;
      }
      v36[2] = v29;
    }
    *a2 = v36;
    swift_bridgeObjectRelease();
    int64_t v7 = v35;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_34;
    }
    if (v10 >= v32) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v32) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v32) {
          goto LABEL_31;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v7 + 4;
          if (v7 + 4 >= v32) {
            goto LABEL_31;
          }
          unint64_t v11 = *(void *)(v31 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v35 = v12;
  }
  uint64_t v13 = v7 + 5;
  if (v7 + 5 >= v32)
  {
LABEL_31:

    return swift_release();
  }
  unint64_t v11 = *(void *)(v31 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v7 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL ProcessState.isRunning.getter(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

unint64_t ProcessState.debugDescription.getter(uint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x616E696D7265742ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x10024F060);
  }
  return result;
}

unint64_t sub_10024F074@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ProcessState.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

unint64_t sub_10024F0A8()
{
  return ProcessState.debugDescription.getter(*v0);
}

id sub_10024F0B0(void *a1)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v4 = [v1 initWithBundleIdentifiers:isa queue:a1];

  return v4;
}

char *sub_10024F140()
{
  sub_1002545EC();
  id v3 = objc_allocWithZone(v1);
  return sub_10024F180(v2, v0);
}

char *sub_10024F180(uint64_t a1, void *a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F75C4();
  uint64_t v29 = v8;
  __chkstk_darwin(v9);
  uint64_t v28 = sub_10021EA1C();
  sub_1001F75C4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1002024D0();
  *(void *)&v2[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier] = _swiftEmptyDictionarySingleton;
  uint64_t v13 = &v2[OBJC_IVAR___CSDProcessObserver_processStateChanged];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  unsigned int v14 = &v2[OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID];
  *(void *)unsigned int v14 = 0;
  *((void *)v14 + 1) = 0;
  objc_allocWithZone((Class)BKSApplicationStateMonitor);
  uint64_t v15 = v2;
  unint64_t result = (char *)sub_100252868((uint64_t)_swiftEmptyArrayStorage, 0);
  if (result)
  {
    *(void *)&v15[OBJC_IVAR___CSDProcessObserver_applicationMonitor] = result;
    *(void *)&v15[OBJC_IVAR___CSDProcessObserver_queue] = a2;
    id v26 = a2;

    v36.receiver = v15;
    v36.super_class = ObjectType;
    unint64_t v17 = (char *)objc_msgSendSuper2(&v36, "init");
    unint64_t v18 = *(void **)&v17[OBJC_IVAR___CSDProcessObserver_applicationMonitor];
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v34 = sub_100253470;
    uint64_t v35 = v19;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    int64_t v32 = sub_10024F900;
    id v33 = &unk_10050E928;
    uint64_t v20 = _Block_copy(&aBlock);
    BOOL v21 = v17;
    id v22 = v18;
    swift_release();
    [v22 setHandler:v20];
    _Block_release(v20);

    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v21;
    *(void *)(v23 + 24) = a1;
    id v34 = sub_1002534B0;
    uint64_t v35 = v23;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    int64_t v32 = sub_1002C2C88;
    id v33 = &unk_10050E978;
    char v24 = _Block_copy(&aBlock);
    unint64_t v25 = v21;
    static DispatchQoS.unspecified.getter();
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    sub_100254630();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v24);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v3, v7);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v28);
    swift_release();
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024F504()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v9 = (void *)result;
    v13[1] = *(void *)(result + OBJC_IVAR___CSDProcessObserver_queue);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    aBlock[4] = sub_1002534E8;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050E9C8;
    uint64_t v11 = _Block_copy(aBlock);
    id v12 = v9;
    static DispatchQoS.unspecified.getter();
    v13[2] = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v11);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    return swift_release();
  }
  return result;
}

uint64_t sub_10024F7A4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR___CSDProcessObserver_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    swift_beginAccess();
    uint64_t v8 = v0;
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_10024E9B8(v9, v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024F900(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10024F990(uint64_t a1, uint64_t a2)
{
  sub_10024F9CC(a2, 0);

  return swift_bridgeObjectRelease();
}

void *sub_10024F9CC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v85 = a2;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_queue);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0) {
    goto LABEL_50;
  }
  if (!*(void *)(a1 + 16)) {
    return &_swiftEmptyDictionarySingleton;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  id v12 = (void *)(v3 + OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier);
  swift_beginAccess();
  id v88 = v12;
  uint64_t v13 = swift_bridgeObjectRetain();
  unsigned int v14 = sub_10024E060(v13);
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_1002500C0(v15, (uint64_t)v14);
  sub_100252010((uint64_t)v14, v16);
  char v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_applicationMonitor);
    swift_bridgeObjectRetain();
    sub_100252B78();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    sub_1002501DC(v22);
    swift_release();
    v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v24) {
      uint64_t v25 = BKSApplicationStateAll;
    }
    else {
      uint64_t v25 = 0;
    }
    [v20 updateInterestedBundleIDs:v23.super.isa states:v25];
  }
  swift_bridgeObjectRetain();
  v84[1] = a1;
  id v26 = (uint64_t *)(a1 + 40);
  uint64_t v19 = &_swiftEmptyDictionarySingleton;
  uint64_t v27 = v11;
  uint64_t v86 = v3;
  while (1)
  {
    uint64_t v28 = *(v26 - 1);
    uint64_t v29 = *v26;
    uint64_t v30 = v88;
    swift_beginAccess();
    uint64_t v31 = *v30;
    uint64_t v32 = *(void *)(*v30 + 16);
    swift_bridgeObjectRetain();
    uint64_t v89 = v28;
    if (!v32) {
      goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_100233664();
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      id v87 = v26;
      uint64_t v36 = v27;
      swift_endAccess();
      goto LABEL_17;
    }
    uint64_t v35 = *(void *)(*(void *)(v31 + 56) + 8 * v33);
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRelease();
    if ((v85 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v91 = v19;
      unint64_t v71 = sub_100233664();
      uint64_t v73 = v19[2];
      BOOL v74 = (v72 & 1) == 0;
      Swift::Int v75 = v73 + v74;
      if (__OFADD__(v73, v74)) {
        goto LABEL_48;
      }
      unint64_t v76 = v71;
      char v77 = v72;
      sub_1001F081C((uint64_t *)&unk_100586160);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v75))
      {
        unint64_t v78 = sub_100233664();
        if ((v77 & 1) != (v79 & 1)) {
          goto LABEL_51;
        }
        unint64_t v76 = v78;
      }
      uint64_t v19 = v91;
      if (v77)
      {
        uint64_t v80 = v91[7];
        swift_bridgeObjectRelease();
        *(void *)(v80 + 8 * v76) = v35;
        goto LABEL_33;
      }
      v91[(v76 >> 6) + 8] |= 1 << v76;
      unint64_t v81 = (uint64_t *)(v19[6] + 16 * v76);
      *unint64_t v81 = v89;
      v81[1] = v29;
      *(void *)(v19[7] + 8 * v76) = v35;
      uint64_t v82 = v19[2];
      BOOL v55 = __OFADD__(v82, 1);
      uint64_t v69 = v82 + 1;
      if (v55) {
        goto LABEL_49;
      }
      goto LABEL_32;
    }
    id v87 = v26;
    uint64_t v36 = v27;
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v37 = sub_100250908(v28, v29);
    uint64_t v38 = v88;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v90 = (void *)*v38;
    uint64_t v40 = v90;
    void *v38 = 0x8000000000000000;
    unint64_t v41 = sub_100233664();
    uint64_t v43 = v40[2];
    BOOL v44 = (v42 & 1) == 0;
    Swift::Int v45 = v43 + v44;
    if (__OFADD__(v43, v44)) {
      break;
    }
    unint64_t v46 = v41;
    char v47 = v42;
    sub_1001F081C((uint64_t *)&unk_100586160);
    Swift::Bool v48 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v39, v45);
    uint64_t v27 = v36;
    id v26 = v87;
    if (v48)
    {
      unint64_t v49 = sub_100233664();
      if ((v47 & 1) != (v50 & 1)) {
        goto LABEL_51;
      }
      unint64_t v46 = v49;
    }
    uint64_t v51 = v90;
    if (v47)
    {
      uint64_t v52 = v90[7];
      swift_bridgeObjectRelease();
      *(void *)(v52 + 8 * v46) = v37;
    }
    else
    {
      v90[(v46 >> 6) + 8] |= 1 << v46;
      uint64_t v53 = (uint64_t *)(v51[6] + 16 * v46);
      *uint64_t v53 = v89;
      v53[1] = v29;
      *(void *)(v51[7] + 8 * v46) = v37;
      uint64_t v54 = v51[2];
      BOOL v55 = __OFADD__(v54, 1);
      uint64_t v56 = v54 + 1;
      if (v55) {
        goto LABEL_46;
      }
      v51[2] = v56;
      swift_bridgeObjectRetain();
    }
    void *v88 = v51;
    swift_bridgeObjectRelease();
    swift_endAccess();
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v91 = v19;
    unint64_t v58 = sub_100233664();
    char v60 = v59;
    uint64_t v61 = v19[2];
    BOOL v62 = (v59 & 1) == 0;
    if (__OFADD__(v61, v62)) {
      goto LABEL_45;
    }
    unint64_t v63 = v58;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v57, v61 + v62))
    {
      unint64_t v64 = sub_100233664();
      if ((v60 & 1) != (v65 & 1)) {
        goto LABEL_51;
      }
      unint64_t v63 = v64;
    }
    uint64_t v19 = v91;
    if ((v60 & 1) == 0)
    {
      v91[(v63 >> 6) + 8] |= 1 << v63;
      uint64_t v67 = (uint64_t *)(v19[6] + 16 * v63);
      uint64_t *v67 = v89;
      v67[1] = v29;
      *(void *)(v19[7] + 8 * v63) = v37;
      uint64_t v68 = v19[2];
      BOOL v55 = __OFADD__(v68, 1);
      uint64_t v69 = v68 + 1;
      if (v55) {
        goto LABEL_47;
      }
LABEL_32:
      void v19[2] = v69;
      swift_bridgeObjectRetain();
      goto LABEL_33;
    }
    uint64_t v66 = v91[7];
    swift_bridgeObjectRelease();
    *(void *)(v66 + 8 * v63) = v37;
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v26 += 2;
    if (!--v27)
    {
      swift_bridgeObjectRelease();
      return v19;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002500C0(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      sub_1002DFB58(&v8, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v6 = a2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10025015C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
      sub_1002E00E0();
    swift_bridgeObjectRelease();
    return a2;
  }
  else
  {
    uint64_t v4 = a2;
    swift_bridgeObjectRelease();
  }
  return v4;
}

void *sub_1002501DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    sub_1002E3F34();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002E3F34();
        uint64_t v2 = v8;
      }
      unint64_t v5 = v2[2];
      if (v5 >= v2[3] >> 1)
      {
        sub_1002E3F34();
        uint64_t v2 = v8;
      }
      v4 += 16;
      v2[2] = v5 + 1;
      sub_1001F75B4(&v7, &v2[4 * v5 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_100250304()
{
  sub_1001FCC38();
  sub_100254694();
  if (v4)
  {
    sub_100254354();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100254618();
  }
  else
  {
    sub_10025460C();
  }
  if (!v1)
  {
LABEL_13:
    sub_1001FCC08();
    return;
  }
  char v5 = sub_1002543F8();
  sub_1002E4014(v5, v6, v7);
  if ((v1 & 0x8000000000000000) == 0)
  {
    sub_10025451C();
    do
    {
      if (v3) {
        sub_100254668();
      }
      else {
        id v8 = *(id *)(v0 + 8 * v2 + 32);
      }
      uint64_t v9 = sub_1001F6204(0, &qword_100585038);
      sub_1002543E0(v9);
      if (v11)
      {
        char v22 = sub_100254398(v10);
        sub_1002E4014(v22, v23, v24);
      }
      sub_1002544A0();
      sub_1001F75C4();
      __chkstk_darwin(v12);
      unsigned int v14 = sub_1002542C4(v13, v25);
      v15(v14);
      uint64_t v16 = sub_1002543B0();
      sub_1002541EC(v16, v17, v18, v19, v20);
      sub_1002018DC((uint64_t)&v25);
      sub_1002544CC();
    }
    while (!v21);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_10025043C()
{
  sub_1001FCC38();
  sub_100254694();
  if (v4)
  {
    sub_100254354();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100254618();
  }
  else
  {
    sub_10025460C();
  }
  if (!v1)
  {
LABEL_13:
    sub_1001FCC08();
    return;
  }
  char v5 = sub_1002543F8();
  sub_1002E4044(v5, v6, v7);
  if ((v1 & 0x8000000000000000) == 0)
  {
    sub_10025451C();
    do
    {
      if (v3) {
        sub_100254668();
      }
      else {
        id v8 = *(id *)(v0 + 8 * v2 + 32);
      }
      uint64_t v9 = sub_1001F6204(0, (unint64_t *)&qword_1005861D0);
      sub_1002543E0(v9);
      if (v11)
      {
        char v22 = sub_100254398(v10);
        sub_1002E4044(v22, v23, v24);
      }
      sub_1002544A0();
      sub_1001F75C4();
      __chkstk_darwin(v12);
      unsigned int v14 = sub_1002542C4(v13, v25);
      v15(v14);
      uint64_t v16 = sub_1002543B0();
      sub_1002541EC(v16, v17, v18, v19, v20);
      sub_1002018DC((uint64_t)&v25);
      sub_1002544CC();
    }
    while (!v21);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_100250574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10025431C();
  a24 = v27;
  a25 = v28;
  sub_100254694();
  if (v29)
  {
    sub_100254354();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100254618();
  }
  else
  {
    sub_10025460C();
  }
  if (!v26)
  {
LABEL_14:
    sub_100254338();
    return;
  }
  a13 = _swiftEmptyArrayStorage;
  sub_1002E3F34();
  if ((v26 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v26; ++i)
    {
      if ((v25 & 0xC000000000000001) != 0) {
        sub_100254668();
      }
      else {
        swift_unknownObjectRetain();
      }
      sub_1001F081C(&qword_100587330);
      swift_dynamicCast();
      uint64_t v31 = a13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100254470();
        sub_1002E3F34();
        uint64_t v31 = a13;
      }
      unint64_t v32 = v31[2];
      if (v32 >= v31[3] >> 1)
      {
        sub_1002E3F34();
        uint64_t v31 = a13;
      }
      v31[2] = v32 + 1;
      sub_1001F75B4(&a10, &v31[4 * v32 + 4]);
    }
    goto LABEL_14;
  }
  __break(1u);
}

void sub_1002506B8()
{
  sub_1001FCC38();
  sub_100254694();
  if (v4)
  {
    sub_100254354();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100254618();
  }
  else
  {
    sub_10025460C();
  }
  if (!v1)
  {
LABEL_13:
    sub_1001FCC08();
    return;
  }
  char v5 = sub_1002543F8();
  sub_1002E40C4(v5, v6, v7);
  if ((v1 & 0x8000000000000000) == 0)
  {
    sub_10025451C();
    do
    {
      if (v3) {
        sub_100254668();
      }
      else {
        id v8 = *(id *)(v0 + 8 * v2 + 32);
      }
      uint64_t v9 = sub_1001F6204(0, &qword_1005861C8);
      sub_1002543E0(v9);
      if (v11)
      {
        char v22 = sub_100254398(v10);
        sub_1002E40C4(v22, v23, v24);
      }
      sub_1002544A0();
      sub_1001F75C4();
      __chkstk_darwin(v12);
      unsigned int v14 = sub_1002542C4(v13, v25);
      v15(v14);
      uint64_t v16 = sub_1002543B0();
      sub_1002541EC(v16, v17, v18, v19, v20);
      sub_1002018DC((uint64_t)&v25);
      sub_1002544CC();
    }
    while (!v21);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1002507F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10025431C();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13;
    sub_1002E4114();
    uint64_t v16 = v15 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_1001F081C((uint64_t *)&unk_100586180);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100254470();
        sub_1002E4114();
      }
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      if (v17 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1002E4114();
      }
      v16 += 16;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      char v18 = &_swiftEmptyArrayStorage[2 * v17];
      v18[4] = a12;
      v18[5] = a13;
      --v14;
    }
    while (v14);
  }
  sub_100254338();
}

uint64_t sub_100250908(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)&v2[OBJC_IVAR___CSDProcessObserver_queue];
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
    sub_100250A6C(a1, a2);
    sub_10024ECB8(v12, &v14, v2);
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100250A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___CSDProcessObserver_queue);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    return;
  }
  uint64_t v11 = sub_10025304C(a1, a2, *(void **)(v2 + OBJC_IVAR___CSDProcessObserver_applicationMonitor));
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v13;
    AnyHashable.init<A>(_:)();
    sub_1002232D0((uint64_t)v19, v12, &v20);
    swift_bridgeObjectRelease();
    sub_100234D14((uint64_t)v19);
    if (v21)
    {
      sub_1001F6204(0, (unint64_t *)&qword_100585590);
      if (swift_dynamicCast())
      {
        uint64_t v14 = (void *)v17;
        sub_1001F081C((uint64_t *)&unk_100586170);
        uint64_t v15 = (_UNKNOWN **)swift_allocObject();
        *((_OWORD *)v15 + 1) = xmmword_10048F550;
        *((_DWORD *)v15 + 8) = [v14 intValue];

        goto LABEL_8;
      }
    }
    else
    {
      sub_100202D2C((uint64_t)&v20);
    }
  }
  uint64_t v15 = &off_10050A9B8;
LABEL_8:
  if (v15[2])
  {
    sub_10024E1E0((uint64_t)v15);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1002DF70C();
  }
}

uint64_t sub_100250CC4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDProcessObserver_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (a1 == -1) {
      return 0;
    }
    else {
      return static ProcessState.processState(applicationState:)((int)[*(id *)(v1+ OBJC_IVAR___CSDProcessObserver_applicationMonitor) mostElevatedApplicationStateForPID:a1]);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ProcessState.processState(applicationState:)(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      uint64_t result = 1;
      break;
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return result;
    case 3:
      uint64_t result = 3;
      break;
    case 7:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_100250E98()
{
  unint64_t result = qword_1005860F0;
  if (!qword_1005860F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005860F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessState()
{
  return &type metadata for ProcessState;
}

uint64_t sub_100250EF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = result;
  if (!a3
    || !*(void *)(a3 + 16)
    || (unint64_t result = sub_10023383C(result), (v12 & 1) == 0)
    || *(void *)(*(void *)(a3 + 56) + 8 * result) != a2)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4
                                                                    + OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID);
    if (v13)
    {
      swift_retain();
      v13(a5, a6, v10, a2);
      unint64_t result = sub_100208490((uint64_t)v13);
    }
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(a4 + OBJC_IVAR___CSDProcessObserver_processStateChanged);
    if (v14)
    {
      swift_retain();
      v14(v10, a2);
      return sub_100208490((uint64_t)v14);
    }
  }
  return result;
}

uint64_t sub_10025100C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  sub_1001F75C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  char v12 = (unint64_t *)((char *)v21.n128_u64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_queue);
  *char v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v7);
  if (v13)
  {
    uint64_t v16 = &_swiftEmptyDictionarySingleton;
    char v22 = &_swiftEmptyDictionarySingleton;
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t inited = swift_initStackObject();
    __n128 v21 = (__n128)xmmword_10048F550;
    *(_OWORD *)(inited + 16) = xmmword_10048F550;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_10024F9CC(inited, a3 & 1);
    swift_setDeallocating();
    sub_100252A30();
    swift_bridgeObjectRetain();
    sub_100223128(a1, a2, v18);
    sub_1002544EC();
    swift_bridgeObjectRelease();
    if (inited)
    {
      sub_10024E5C0(inited, &v22);
      swift_bridgeObjectRelease();
      uint64_t v16 = v22;
    }
    if (!v16[2])
    {
      sub_1001F081C((uint64_t *)&unk_100586148);
      uint64_t v19 = (__n128 *)swift_initStackObject();
      sub_100254578(v19, v21);
      uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
      swift_bridgeObjectRelease();
      return v20;
    }
    return (uint64_t)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002512E8()
{
  return sub_1002545A0(OBJC_IVAR___CSDProcessObserver_processStateChanged);
}

uint64_t sub_10025147C()
{
  return sub_1002545A0(OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID);
}

uint64_t sub_1002514A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_retain();
  v6(v7, v9, a3, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1002515F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id, uint64_t, uint64_t))(a5 + 16))(a5, v8, a3, a4);
}

uint64_t sub_100251660(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

_UNKNOWN **sub_100251680()
{
  sub_1002545EC();
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  sub_1001F75C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1002024D0();
  id v8 = *(void **)(v1 + OBJC_IVAR___CSDProcessObserver_queue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (_UNKNOWN **)(*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v3, v4);
  if (v8)
  {
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10048F550;
    *(void *)(inited + 32) = v2;
    *(void *)(inited + 40) = v0;
    swift_bridgeObjectRetain();
    char v12 = sub_10024F9CC(inited, 0);
    swift_setDeallocating();
    sub_100252A30();
    swift_bridgeObjectRetain();
    sub_100223128(v2, v0, v12);
    sub_1002544EC();
    swift_bridgeObjectRelease();
    if (!inited) {
      return &off_10050AB70;
    }
    uint64_t v13 = sub_100252D1C(inited);
    swift_bridgeObjectRelease();
    return (_UNKNOWN **)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100251898(uint64_t a1, uint64_t a2)
{
  return sub_10025100C(a1, a2, 0);
}

void sub_1002518B8()
{
}

void sub_1002519BC(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

id sub_100251A44(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  swift_bridgeObjectRelease();
  Dictionary._bridgeToObjectiveC()();
  sub_1002544EC();

  return v9;
}

void sub_100251AE0()
{
  sub_1001FCC38();
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v22 = v11;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F75C4();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v25 = sub_10021EA1C();
  sub_1001F75C4();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_1002024D0();
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = v8;
  v19[3] = v6;
  void v19[4] = v0;
  v19[5] = v22;
  void v19[6] = v10;
  v26[4] = v23;
  v26[5] = v19;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_1002C2C88;
  void v26[3] = v24;
  uint64_t v20 = _Block_copy(v26);
  swift_retain();
  id v21 = v0;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_100254630();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v25);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100251CE0()
{
  sub_1002545EC();
  sub_10025100C(v1, v2, v3);
  v0();

  return swift_bridgeObjectRelease();
}

void sub_100251E1C()
{
}

uint64_t type metadata accessor for ProcessObserver()
{
  return self;
}

uint64_t sub_100251F04(void *a1)
{
  uint64_t v2 = sub_10021FC88(a1);
  if (v3)
  {
    sub_10025100C(v2, v3, 0);
    sub_1002544EC();
    return v1;
  }
  else
  {
    sub_1001F081C((uint64_t *)&unk_100586148);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_100254578(inited, (__n128)xmmword_10048F550);
    return Dictionary.init(dictionaryLiteral:)();
  }
}

void sub_100252010(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1002545F8();
    if (v35)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(v3 + 56);
      uint64_t v41 = v3 + 56;
      uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
      if (v6 < 64) {
        uint64_t v7 = ~(-1 << v6);
      }
      else {
        uint64_t v7 = -1;
      }
      unint64_t v8 = v7 & v5;
      int64_t v42 = (unint64_t)(v6 + 63) >> 6;
      uint64_t v9 = v2 + 56;
      if ((v7 & v5) == 0) {
        goto LABEL_9;
      }
LABEL_8:
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v43 = v4;
      for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = v25 + (v24 << 6))
      {
        uint64_t v26 = v3;
        uint64_t v27 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v30 = Hasher._finalize()();
        uint64_t v31 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v32 = v30 & ~v31;
        if (((*(void *)(v9 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v33 = *(void *)(v2 + 48);
        char v34 = (void *)(v33 + 16 * v32);
        BOOL v35 = *v34 == v29 && v34[1] == v28;
        if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v36 = ~v31;
          for (unint64_t j = v32 + 1; ; unint64_t j = v38 + 1)
          {
            uint64_t v38 = j & v36;
            if (((*(void *)(v9 + (((j & v36) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v36)) & 1) == 0) {
              break;
            }
            char v39 = (void *)(v33 + 16 * v38);
            BOOL v40 = *v39 == v29 && v39[1] == v28;
            if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_34;
            }
          }
LABEL_45:
          swift_bridgeObjectRelease();
          return;
        }
LABEL_34:
        swift_bridgeObjectRelease();
        uint64_t v3 = v26;
        uint64_t v4 = v43;
        if (v8) {
          goto LABEL_8;
        }
LABEL_9:
        int64_t v12 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        if (v12 >= v42) {
          return;
        }
        if (!*(void *)(v41 + 8 * v12))
        {
          sub_100254650();
          if (v13 == v14) {
            return;
          }
          sub_100254644();
          if (!v15)
          {
            sub_100254650();
            if (v13 == v14) {
              return;
            }
            sub_100254644();
            if (!v16)
            {
              sub_100254650();
              if (v13 == v14) {
                return;
              }
              sub_100254644();
              if (!v18)
              {
                int64_t v19 = v17 + 4;
                if (v19 >= v42) {
                  return;
                }
                if (!*(void *)(v41 + 8 * v19)) {
                  break;
                }
              }
            }
          }
        }
LABEL_27:
        sub_1002544BC();
        unint64_t v8 = v23 & v22;
        uint64_t v43 = v24;
      }
      while (!__OFADD__(v19, 1))
      {
        sub_100254650();
        if (v13 == v14) {
          return;
        }
        sub_100254644();
        int64_t v19 = v20 + 1;
        if (v21) {
          goto LABEL_27;
        }
      }
LABEL_47:
      __break(1u);
    }
  }
}

void sub_100252284(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1002545F8();
    if (v33)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v3 + 56;
      uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
      if (v6 < 64) {
        uint64_t v7 = ~(-1 << v6);
      }
      else {
        uint64_t v7 = -1;
      }
      unint64_t v8 = v7 & *(void *)(v3 + 56);
      int64_t v9 = (unint64_t)(v6 + 63) >> 6;
      uint64_t v43 = v2 + 56;
      uint64_t v38 = v3 + 56;
      uint64_t v39 = v3;
      int64_t v37 = v9;
      if (!v8) {
        goto LABEL_9;
      }
LABEL_8:
      uint64_t v40 = (v8 - 1) & v8;
      uint64_t v41 = v4;
      for (unint64_t i = __clz(__rbit64(v8)) | (v4 << 6); ; unint64_t i = v17 + (v16 << 6))
      {
        uint64_t v18 = *(void *)(v3 + 48) + 56 * i;
        long long v20 = *(_OWORD *)(v18 + 16);
        long long v19 = *(_OWORD *)(v18 + 32);
        long long v21 = *(_OWORD *)v18;
        uint64_t v47 = *(void *)(v18 + 48);
        long long v45 = v20;
        long long v46 = v19;
        long long v44 = v21;
        Hasher.init(_seed:)();
        sub_100253A20((uint64_t)&v44);
        sub_10020E4AC();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v24 = v22 & ~v23;
        if (((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        {
LABEL_44:
          sub_100253A68((uint64_t)&v44);
          return;
        }
        uint64_t v42 = ~v23;
        long long v25 = v44;
        while (1)
        {
          uint64_t v26 = v2;
          uint64_t v27 = *(void *)(v2 + 48) + 56 * v24;
          uint64_t v28 = *(void *)(v27 + 16);
          uint64_t v29 = *(void *)(v27 + 24);
          uint64_t v30 = *(void *)(v27 + 32);
          int v31 = *(unsigned __int8 *)(v27 + 40);
          unint64_t v32 = *(void **)(v27 + 48);
          BOOL v33 = *(void *)v27 == (void)v25 && *(void *)(v27 + 8) == *((void *)&v25 + 1);
          if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            BOOL v34 = v28 == (void)v45 && v29 == *((void *)&v45 + 1);
            if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && v30 == (void)v46
              && ((v31 ^ BYTE8(v46)) & 1) == 0)
            {
              sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v35 = v32;
              char v36 = static NSObject.== infix(_:_:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v36) {
                break;
              }
            }
          }
          unint64_t v24 = (v24 + 1) & v42;
          uint64_t v2 = v26;
          if (((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            goto LABEL_44;
          }
        }
        sub_100253A68((uint64_t)&v44);
        uint64_t v2 = v26;
        uint64_t v5 = v38;
        uint64_t v3 = v39;
        int64_t v9 = v37;
        unint64_t v8 = v40;
        uint64_t v4 = v41;
        if (v40) {
          goto LABEL_8;
        }
LABEL_9:
        int64_t v11 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        if (v11 >= v9) {
          return;
        }
        if (!*(void *)(v5 + 8 * v11))
        {
          if (v4 + 2 >= v9) {
            return;
          }
          if (!*(void *)(v5 + 8 * (v4 + 2)))
          {
            if (v4 + 3 >= v9) {
              return;
            }
            if (!*(void *)(v5 + 8 * (v4 + 3)))
            {
              if (v4 + 4 >= v9) {
                return;
              }
              if (!*(void *)(v5 + 8 * (v4 + 4)))
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  return;
                }
                if (!*(void *)(v5 + 8 * v12)) {
                  break;
                }
              }
            }
          }
        }
LABEL_23:
        sub_1002544BC();
        uint64_t v40 = v15 & v14;
        uint64_t v41 = v16;
      }
      while (1)
      {
        int64_t v13 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (v13 >= v9) {
          return;
        }
        ++v12;
        if (*(void *)(v5 + 8 * v13)) {
          goto LABEL_23;
        }
      }
LABEL_46:
      __break(1u);
    }
  }
}

void sub_1002525A4()
{
  sub_1002545EC();
  unint64_t v3 = v2 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    if (v3)
    {
      sub_100254544();
      goto _$ss10__CocoaSetV7isEqual2toSbAB_tF;
    }
    goto LABEL_7;
  }
  if (v3)
  {
LABEL_7:
    sub_100254544();
    sub_1002528E0(v6, v7);
    return;
  }
  if (v1 == v0 || *(void *)(v1 + 16) != *(void *)(v0 + 16))
  {
LABEL_46:
    sub_100254544();
    return;
  }
  uint64_t v42 = v1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v1 + 56);
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  int64_t v12 = 0;
  int64_t v43 = (unint64_t)(v9 + 63) >> 6;
  if (!v11) {
    goto LABEL_17;
  }
LABEL_16:
  sub_1002545D8();
  for (uint64_t i = v13 | (v12 << 6); ; uint64_t i = v29 + (v12 << 6))
  {
    Swift::Int v30 = *(void *)(v0 + 40);
    id v31 = *(id *)(*(void *)(v1 + 48) + 8 * i);
    Swift::Int v32 = NSObject._rawHashValue(seed:)(v30);
    uint64_t v33 = -1 << *(unsigned char *)(v0 + 32);
    uint64_t v34 = v32 & ~v33;
    sub_10025458C();
    if ((v35 & 1) == 0) {
      goto LABEL_45;
    }
    int64_t v44 = v12;
    id v36 = *(id *)(*(void *)(v0 + 48) + 8 * v34);
    char v37 = static NSObject.== infix(_:_:)();

    if ((v37 & 1) == 0)
    {
      uint64_t v38 = ~v33;
      while (1)
      {
        uint64_t v34 = (v34 + 1) & v38;
        sub_10025458C();
        if ((v39 & 1) == 0) {
          break;
        }
        id v40 = *(id *)(*(void *)(v0 + 48) + 8 * v34);
        char v41 = static NSObject.== infix(_:_:)();

        if (v41) {
          goto LABEL_42;
        }
      }
LABEL_45:

      goto LABEL_46;
    }
LABEL_42:

    int64_t v12 = v44;
    if (v11) {
      goto LABEL_16;
    }
LABEL_17:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v15 >= v43) {
      goto LABEL_46;
    }
    ++v12;
    if (!*(void *)(v42 + 8 * v15))
    {
      int64_t v12 = v15 + 1;
      sub_1002545CC();
      if (v16 == v17) {
        goto LABEL_46;
      }
      sub_10025465C();
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        sub_1002545CC();
        if (v16 == v17) {
          goto LABEL_46;
        }
        sub_10025465C();
        if (!v21)
        {
          int64_t v12 = v20 + 3;
          sub_1002545CC();
          if (v16 == v17) {
            goto LABEL_46;
          }
          sub_10025465C();
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_36:
    sub_1002544BC();
    uint64_t v11 = v28 & v27;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v43) {
    goto LABEL_46;
  }
  if (*(void *)(v42 + 8 * v24))
  {
    int64_t v12 = v24;
    goto LABEL_36;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    sub_1002545CC();
    if (v16 == v17) {
      goto LABEL_46;
    }
    sub_10025465C();
    int64_t v24 = v25 + 1;
    if (v26) {
      goto LABEL_36;
    }
  }
LABEL_48:
  __break(1u);
_$ss10__CocoaSetV7isEqual2toSbAB_tF:
  __CocoaSet.isEqual(to:)();
}

id sub_100252868(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  id v5 = [v2 initWithBundleIDs:v4.super.isa states:a2];

  return v5;
}

void sub_1002528E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter()) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_19:
    id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v11);
    char v16 = __CocoaSet.contains(_:)();

    if ((v16 & 1) == 0) {
      return;
    }
  }
  int64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_18;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_19;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100252A30()
{
  swift_arrayDestroy();
  sub_1002544DC();

  return swift_deallocClassInstance();
}

uint64_t sub_100252A6C()
{
  return sub_100252A84((uint64_t *)&unk_1005861A0);
}

uint64_t sub_100252A78()
{
  return sub_100252A84((uint64_t *)&unk_100586180);
}

uint64_t sub_100252A84(uint64_t *a1)
{
  sub_1001F081C(a1);
  swift_arrayDestroy();
  sub_1002544DC();

  return swift_deallocClassInstance();
}

void *sub_100252AD8(unint64_t a1)
{
  return sub_100252F60(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002E59B8);
}

void sub_100252AF0()
{
  sub_10025431C();
  if (*(void *)(v0 + 16))
  {
    sub_1001F081C(&qword_1005861C0);
    uint64_t v1 = (const void *)sub_100254560();
    size_t v2 = j__malloc_size(v1);
    sub_1002543C8(2 * ((uint64_t)(v2 - 32) / 32));
    sub_1002530D4(v3, v4, v5, v6);
    sub_100254374();
    sub_1002542F0();
    if (!v7) {
      __break(1u);
    }
  }
  sub_100254338();
}

void sub_100252B78()
{
  sub_10025431C();
  if (*(void *)(v0 + 16))
  {
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t v1 = (const void *)sub_100254560();
    j__malloc_size(v1);
    sub_100254680();
    sub_1002543C8(v2);
    sub_100253284(v3, v4, v5, v6);
    sub_100254374();
    sub_1002542F0();
    if (!v7) {
      __break(1u);
    }
  }
  sub_100254338();
}

void sub_100252BF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      unint64_t v8 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1001F081C((uint64_t *)&unk_100585280);
      unint64_t v8 = (void *)sub_100254560();
      j__malloc_size(v8);
      sub_100254680();
      v8[2] = v5;
      v8[3] = v9;
    }
    if (v4 != a3)
    {
      sub_1002DE78C(a2 + 16 * a3, v5, (unint64_t)(v8 + 4));
      return;
    }
    goto LABEL_10;
  }
}

void sub_100252CA0()
{
  sub_10025431C();
  if (*(void *)(v0 + 16))
  {
    sub_1001F081C((uint64_t *)&unk_100584DD0);
    uint64_t v1 = (const void *)sub_100254560();
    j__malloc_size(v1);
    sub_100254504();
    sub_1002543C8(v2);
    sub_100253824(v3, v4, v5, v6);
    sub_100254374();
    sub_1002542F0();
    if (!v7) {
      __break(1u);
    }
  }
  sub_100254338();
}

void *sub_100252D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001F081C((uint64_t *)&unk_100586170);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 4);
  uint64_t v5 = sub_100253AB4(&v7, (_DWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100206FA0();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void *sub_100252E00(unint64_t a1)
{
  return sub_100252F60(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002E5CD8);
}

void sub_100252E18()
{
  sub_10025431C();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    goto LABEL_9;
  }
  sub_1001F081C(&qword_1005861B8);
  uint64_t v2 = type metadata accessor for PendingMembershipInfo();
  sub_1002462DC(v2);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)swift_allocObject();
  size_t v8 = j__malloc_size(v7);
  if (v4)
  {
    BOOL v9 = v8 - v6 == 0x8000000000000000 && v4 == -1;
    if (!v9)
    {
      v7[2] = v1;
      v7[3] = 2 * ((uint64_t)(v8 - v6) / v4);
      sub_100253C48();
      swift_bridgeObjectRetain();
      sub_1002542F0();
      if (!v9) {
        __break(1u);
      }
LABEL_9:
      sub_100254338();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void *sub_100252F18(unint64_t a1)
{
  return sub_100252F60(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002E5FF4);
}

void *sub_100252F30(unint64_t a1)
{
  return sub_100252F60(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002E6030);
}

void *sub_100252F48(unint64_t a1)
{
  return sub_100252F60(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002E6208);
}

void *sub_100252F60(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v5 = (void *)sub_100254560();
      j__malloc_size(v5);
      sub_100254504();
      v5[2] = v4;
      v5[3] = v6;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v7;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

uint64_t sub_10025304C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 applicationInfoForApplication:v4];

  if (!v5) {
    return 0;
  }
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void *sub_1002530D4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    uint64_t v17 = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    uint64_t v18 = *(void *)(a4 + 56) + 24 * v12;
    uint64_t v19 = *(void *)(v18 + 16);
    long long v20 = *(_OWORD *)v18;
    *(void *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v20;
    *(void *)(a2 + 24) = v19;
    a2 += 32;
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100253284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a4 + 56;
  sub_100254434();
  if (v12 && (uint64_t v13 = v11) != 0)
  {
    if (v11 < 0)
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      sub_100254410();
      if (!v6) {
        goto LABEL_6;
      }
LABEL_5:
      sub_100254488();
      while (1)
      {
        ++v5;
        unint64_t v16 = (void *)(*(void *)(a4 + 48) + 16 * v14);
        uint64_t v17 = v16[1];
        *uint64_t v4 = *v16;
        v4[1] = v17;
        if (v5 == v13)
        {
          swift_bridgeObjectRetain();
          goto LABEL_28;
        }
        v4 += 2;
        swift_bridgeObjectRetain();
        if (v6) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        if (v15 >= v7) {
          goto LABEL_28;
        }
        if (!*(void *)(v10 + 8 * v15))
        {
          v8 += 2;
          if (v15 + 1 >= v7) {
            goto LABEL_28;
          }
          if (!*(void *)(v10 + 8 * v8))
          {
            if (v15 + 2 >= v7) {
              goto LABEL_28;
            }
            if (!*(void *)(v10 + 8 * (v15 + 2)))
            {
              uint64_t v8 = v15 + 3;
              if (v15 + 3 >= v7) {
                goto LABEL_28;
              }
              if (!*(void *)(v10 + 8 * v8))
              {
                uint64_t v18 = v15 + 4;
                if (v15 + 4 >= v7) {
                  goto LABEL_28;
                }
                if (!*(void *)(v10 + 8 * v18)) {
                  break;
                }
              }
            }
          }
        }
LABEL_14:
        sub_100254454();
      }
      while (1)
      {
        uint64_t v19 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        if (v19 >= v7) {
          goto LABEL_28;
        }
        ++v18;
        if (*(void *)(v10 + 8 * v19)) {
          goto LABEL_14;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_28:
    sub_10025452C();
  }
}

uint64_t sub_100253420()
{
  return sub_1002541BC();
}

uint64_t sub_100253428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100253438()
{
  return swift_release();
}

uint64_t sub_100253440()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100208504();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100253470()
{
  return sub_10024F504();
}

uint64_t sub_100253478()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002534B0()
{
  return sub_10024F990(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002534B8()
{
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002534E8()
{
  return sub_10024F7A4();
}

uint64_t sub_10025350C(uint64_t a1, uint64_t a2)
{
  return sub_100250EF4(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void *sub_100253518(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  int64_t v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v7 = v28;
    uint64_t v8 = v29;
    int64_t v9 = v30;
    unint64_t v10 = v31;
    if (v6) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v11 = 0;
    goto LABEL_39;
  }
  int64_t v9 = 0;
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = a4 + 56;
  uint64_t v8 = ~v19;
  uint64_t v20 = -v19;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v10 = v21 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_37;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v11 = 0;
LABEL_39:
    uint64_t v22 = v24;
LABEL_41:
    *uint64_t v22 = v4;
    v22[1] = v7;
    void v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (void *)v11;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v11 = 0;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v14 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_23;
    }
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      unint64_t v10 = 0;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      unint64_t v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25) {
        goto LABEL_44;
      }
      unint64_t v16 = *(void *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        int64_t v15 = v9 + 3;
        goto LABEL_21;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        unint64_t v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (!v16)
      {
        int64_t v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          unint64_t v10 = 0;
          int64_t v9 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          int64_t v18 = v9 + 6;
          while (v18 < v25)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v18++);
            if (v16)
            {
              int64_t v15 = v18 - 1;
              goto LABEL_21;
            }
          }
          unint64_t v10 = 0;
          int64_t v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_21;
      }
    }
    int64_t v15 = v17;
LABEL_21:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v9 = v15;
LABEL_22:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    id v14 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_23:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      uint64_t v11 = a3;
LABEL_40:
      uint64_t v8 = v23;
      uint64_t v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *sub_100253824(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100253A20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t sub_100253A68(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100253AB4(void *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_DWORD *)(*(void *)(a4 + 48) + 4 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100253C48()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for PendingMembershipInfo();
  uint64_t v9 = sub_1002462DC(v8);
  uint64_t v11 = v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v31 - v15;
  uint64_t v36 = v1;
  uint64_t v19 = *(void *)(v1 + 64);
  uint64_t v18 = v1 + 64;
  uint64_t v17 = v19;
  uint64_t v20 = -1 << *(unsigned char *)(v18 - 32);
  if (-v20 < 64) {
    uint64_t v21 = ~(-1 << -(char)v20);
  }
  else {
    uint64_t v21 = -1;
  }
  uint64_t v22 = v21 & v17;
  if (!v5)
  {
    int64_t v23 = 0;
LABEL_37:
    *unint64_t v7 = v36;
    v7[1] = v18;
    v7[2] = ~v20;
    v7[3] = v23;
    v7[4] = v22;
    sub_1001FCC08();
    return;
  }
  if (!v3)
  {
    int64_t v23 = 0;
    goto LABEL_37;
  }
  if (v3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v33 = -1 << *(unsigned char *)(v18 - 32);
  uint64_t v34 = v7;
  int64_t v23 = 0;
  uint64_t v24 = 0;
  int64_t v35 = (unint64_t)(63 - v20) >> 6;
  int64_t v32 = v35 - 1;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_8:
  sub_1002545D8();
  unint64_t v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    uint64_t v30 = *(void *)(v11 + 72);
    sub_100254068(*(void *)(v36 + 56) + v30 * v26, (uint64_t)v14);
    sub_1002540CC((uint64_t)v14, (uint64_t)v16);
    sub_1002540CC((uint64_t)v16, v5);
    if (v24 == v3) {
      goto LABEL_36;
    }
    v5 += v30;
    if (v22) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v27 >= v35) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v18 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_18:
    uint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v35)
  {
    uint64_t v22 = 0;
    int64_t v23 = v27;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v18 + 8 * v23);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v35) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v18 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v23 = v27 + 3;
  if (v27 + 3 >= v35)
  {
    uint64_t v22 = 0;
    int64_t v23 = v27 + 2;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v18 + 8 * v23);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v23;
    goto LABEL_18;
  }
  int64_t v29 = v27 + 4;
  if (v27 + 4 >= v35)
  {
LABEL_32:
    uint64_t v22 = 0;
LABEL_36:
    uint64_t v20 = v33;
    unint64_t v7 = v34;
    goto LABEL_37;
  }
  unint64_t v28 = *(void *)(v18 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v35)
    {
      uint64_t v22 = 0;
      int64_t v23 = v32;
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v18 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

void sub_100253ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a4 + 64;
  sub_100254434();
  if (v12 && (uint64_t v13 = v11) != 0)
  {
    if (v11 < 0)
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      sub_100254410();
      if (!v6) {
        goto LABEL_6;
      }
LABEL_5:
      sub_100254488();
      while (1)
      {
        ++v5;
        *uint64_t v4 = *(void *)(*(void *)(a4 + 56) + 8 * v14);
        if (v5 == v13)
        {
          swift_retain();
          goto LABEL_28;
        }
        ++v4;
        swift_retain();
        if (v6) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        if (v15 >= v7) {
          goto LABEL_28;
        }
        if (!*(void *)(v10 + 8 * v15))
        {
          v8 += 2;
          if (v15 + 1 >= v7) {
            goto LABEL_28;
          }
          if (!*(void *)(v10 + 8 * v8))
          {
            if (v15 + 2 >= v7) {
              goto LABEL_28;
            }
            if (!*(void *)(v10 + 8 * (v15 + 2)))
            {
              uint64_t v8 = v15 + 3;
              if (v15 + 3 >= v7) {
                goto LABEL_28;
              }
              if (!*(void *)(v10 + 8 * v8))
              {
                uint64_t v16 = v15 + 4;
                if (v15 + 4 >= v7) {
                  goto LABEL_28;
                }
                if (!*(void *)(v10 + 8 * v16)) {
                  break;
                }
              }
            }
          }
        }
LABEL_14:
        sub_100254454();
      }
      while (1)
      {
        uint64_t v17 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          break;
        }
        if (v17 >= v7) {
          goto LABEL_28;
        }
        ++v16;
        if (*(void *)(v10 + 8 * v17)) {
          goto LABEL_14;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_28:
    sub_10025452C();
  }
}

uint64_t sub_100254068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingMembershipInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002540CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingMembershipInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100254130()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_100254160(uint64_t a1)
{
  sub_1002519BC(a1, *(void *)(v1 + 16));
}

uint64_t sub_10025416C()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002541B4()
{
  return sub_1002541BC();
}

uint64_t sub_1002541BC()
{
  return sub_100251CE0();
}

void sub_1002541E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1002515F0(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1002541EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_1002044D8((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_100233560(&v12, v10 + 40 * a1 + 32);
}

char *sub_1002542C4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1002542F0()
{
  return sub_100206FA0();
}

uint64_t sub_100254354()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100254374()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_100254398@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1002543B0()
{
  return v0;
}

void sub_1002543C8(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t sub_1002543E0(uint64_t result)
{
  *(void *)(v4 - 104) = result;
  *(void *)(v4 - 96) = v2;
  *(void *)(v4 - 128) = v3;
  *(void *)(v4 - 88) = v1;
  return result;
}

uint64_t sub_1002543F8()
{
  *(void *)(v1 - 88) = v0;
  return 0;
}

uint64_t sub_100254470()
{
  return 0;
}

uint64_t sub_1002544A0()
{
  return sub_10020EF04(v1 - 128, v0);
}

uint64_t sub_1002544DC()
{
  return v0;
}

uint64_t sub_1002544EC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10025452C()
{
  void *v0 = v1;
  v0[1] = v3;
  v0[2] = ~v4;
  v0[3] = v6;
  v0[4] = v5;
  return v2;
}

uint64_t sub_100254560()
{
  return swift_allocObject();
}

__n128 *sub_100254578(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u32[0] = -1;
  result[2].n128_u64[1] = 0;
  return result;
}

uint64_t sub_1002545A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + a1);
  sub_1002084D8(v2);
  return v2;
}

uint64_t sub_100254618()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100254668()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_1002546A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100256114(v1 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_badgeCategory, a1);
}

uint64_t sub_1002546B4(uint64_t a1, void *a2)
{
  id v3 = [objc_allocWithZone((Class)TUContactsDataProviderFetchRequest) initWithHandle:a1];
  id v4 = [a2 executeFetchRequest:v3];

  id v5 = [v4 localizedName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_10025475C()
{
  id v0 = [self soundWithAlertType:1];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100256300(v1, v2, v0);
  qword_1005861D8 = (uint64_t)v0;
}

uint64_t sub_1002547C0(uint64_t a1, uint64_t a2)
{
  sub_100274858(0xD000000000000023, (void *)0x800000010047FB50);
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1001F3B08();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100254888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100274858(0xD000000000000025, (void *)0x800000010047FB20);
  sub_1001F081C(&qword_100584B20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048FB00;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v9 = sub_1001F3B08();
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = a1;
  *(void *)(v8 + 80) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100254970()
{
  swift_getObjectType();
  sub_1001F081C(&qword_100586238);
  uint64_t v1 = String.init<A>(describing:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType)) {
    uint64_t v2 = 0x656E6F6850;
  }
  else {
    uint64_t v2 = 0x656D695465636146;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType)) {
    id v3 = (void *)0xE500000000000000;
  }
  else {
    id v3 = (void *)0xE800000000000000;
  }
  uint64_t v6 = v1;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100254A30()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType);
}

uint64_t sub_100254A40()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100254A50(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

uint64_t sub_100254A70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_100208490(v6);
}

void sub_100254AD0(uint64_t a1)
{
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594CA0);
  sub_10020ED28(a1, (uint64_t)v15);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412546;
    id v9 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v4;

    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    sub_100204074(v15, v16);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    sub_1002344D8(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ does not handle response with identifier %s", (uint8_t *)v7, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_1002018DC((uint64_t)v15);
  }
}

void sub_100254D24()
{
}

uint64_t sub_100254E60()
{
  return type metadata accessor for FaceTimeNotificationProvider();
}

uint64_t type metadata accessor for FaceTimeNotificationProvider()
{
  uint64_t result = qword_100586220;
  if (!qword_100586220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100254EB0()
{
  sub_100254F90();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100254F90()
{
  if (!qword_100586230)
  {
    type metadata accessor for BadgeCountCategory();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100586230);
    }
  }
}

uint64_t sub_100254FF8(uint64_t a1, uint64_t a2)
{
  return sub_100254A50(a1, a2, &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_10025502C(uint64_t a1, uint64_t a2)
{
  return sub_100254A50(a1, a2, &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_replace, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_100255064(uint64_t a1, uint64_t a2)
{
  return sub_100254A50(a1, a2, &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_updateBadgeValue, (uint64_t (*)(uint64_t, uint64_t))sub_100208490);
}

void sub_10025509C(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v3 = type metadata accessor for Notification();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v52 - v8;
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_1001F5F88(v10, (uint64_t)qword_100594CA0);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v9, a1, v3);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v55 = v11;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v53 = swift_slowAlloc();
    v59[0] = v53;
    uint64_t v54 = a1;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v52 = v16 + 4;
    v12(v7, (uint64_t)v9, v3);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)&long long v60 = sub_1002344D8(v17, v18, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Handling notification %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  uint64_t v19 = Notification.userInfo.getter();
  if (!v19)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    goto LABEL_12;
  }
  uint64_t v20 = v19;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v58 = v21;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v59, v20, &v60);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v59);
  if (!*((void *)&v61 + 1))
  {
LABEL_12:
    sub_100210614((uint64_t)&v60, (uint64_t *)&unk_100584CA0);
    goto LABEL_13;
  }
  type metadata accessor for IDSPendingChat(0);
  if (swift_dynamicCast())
  {
    uint64_t v22 = *(void **)(v59[0] + OBJC_IVAR___CSDIDSPendingChat_handle);
    uint64_t v55 = v59[0];
    int v23 = *(unsigned __int8 *)(v59[0] + OBJC_IVAR___CSDIDSPendingChat_isVideo);
    id v24 = v22;
    if (v23 == 1)
    {
      uint64_t v25 = (void *)0x800000010047E170;
      uint64_t v26 = 0xD000000000000010;
    }
    else
    {
      uint64_t v26 = 0xD000000000000016;
      uint64_t v25 = (void *)0x800000010047E130;
    }
    id v30 = sub_100274858(v26, v25);
    uint64_t v32 = v31;
    uint64_t v33 = *(uint64_t (**)(id, uint64_t))(v56
                                                + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_localizeHandleName);
    uint64_t v34 = *(void *)(v56 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_contactsDataProvider);
    swift_retain();
    uint64_t v35 = v33(v24, v34);
    uint64_t v37 = v36;
    swift_release();
    id v38 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
    sub_1002547C0(v35, v37);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v38 setTitle:v39];

    sub_100254888(v35, v37, (uint64_t)v30, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v38 setBody:v40];

    NSString v41 = String._bridgeToObjectiveC()();
    [v38 setCategoryIdentifier:v41];

    if (qword_100583788 != -1) {
      swift_once();
    }
    [v38 setSound:qword_1005861D8];
    NSString v42 = [v24 value];
    int64_t v43 = (void *)v55;
    if (!v42)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v38 setThreadIdentifier:v42];

    uint64_t v44 = v56;
    uint64_t v45 = sub_100254970();
    sub_10036EEF0(v45, v46, v38);
    sub_100256364();
    uint64_t v47 = UUID.uuidString.getter();
    uint64_t v49 = v48;
    char v50 = v38;
    int64_t v27 = sub_100362954(v47, v49, v50, 0);
    [v27 setDestinations:15];
    uint64_t v51 = *(void (**))(v44 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add);
    if (v51)
    {
      swift_retain();
      v51(v27);

      sub_100208490((uint64_t)v51);
    }
    else
    {

      int64_t v27 = v50;
    }
    goto LABEL_23;
  }
LABEL_13:
  int64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    int64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Did not find expected pending chat information", v29, 2u);
    swift_slowDealloc();
  }
LABEL_23:
}

uint64_t sub_1002557B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  v27[0] = a2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v32 = v6;
  __chkstk_darwin(v7);
  sub_1001F2514();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v30 = v9;
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  sub_1001F2514();
  uint64_t v10 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15);
  uint64_t v16 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(void *)&v4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, a1, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v16, v10);
  *(void *)(v19 + v18) = v4;
  aBlock[4] = v28;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = v29;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v4;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  sub_1001F7664();
  v23(v22);
  sub_1001F7664();
  v25(v24);
  return swift_release();
}

void sub_100255A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v3 - 8);
  uint64_t v42 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Notification();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_1001F5F88(v15, (uint64_t)qword_100594CA0);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v43 = a1;
  v17(v14, a1, v8);
  uint64_t v41 = v16;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = v6;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v37 = swift_slowAlloc();
    v47[0] = v37;
    uint64_t v39 = v5;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v36 = v21 + 4;
    v17(v12, (uint64_t)v14, v8);
    uint64_t v22 = String.init<A>(reflecting:)();
    *(void *)&long long v48 = sub_1002344D8(v22, v23, v47);
    uint64_t v5 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Handling notification %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v38;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  uint64_t v24 = Notification.userInfo.getter();
  uint64_t v25 = v44;
  if (!v24)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    goto LABEL_12;
  }
  uint64_t v26 = v24;
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v27;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v47, v26, &v48);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v47);
  if (!*((void *)&v49 + 1))
  {
LABEL_12:
    sub_100210614((uint64_t)&v48, (uint64_t *)&unk_100584CA0);
    uint64_t v28 = v42;
    sub_1001F0530(v42, 1, 1, v5);
    goto LABEL_13;
  }
  uint64_t v28 = v42;
  int v29 = swift_dynamicCast();
  sub_1001F0530(v28, v29 ^ 1u, 1, v5);
  if (sub_1001F758C(v28, 1, v5) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v25, v28, v5);
    uint64_t v30 = (void (**)(uint64_t))(v40
                                        + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification);
    swift_beginAccess();
    uint64_t v31 = *v30;
    if (*v30)
    {
      swift_endAccess();
      swift_retain();
      uint64_t v32 = UUID.uuidString.getter();
      v31(v32);
      swift_bridgeObjectRelease();
      sub_100208490((uint64_t)v31);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v5);
      swift_endAccess();
    }
    return;
  }
LABEL_13:
  sub_100210614(v28, (uint64_t *)&unk_100585580);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Did not find expected pending chat uuid information", v35, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10025603C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1001F2514();
  uint64_t v16 = v15 - v14;
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = a1;
  sub_1002557B8(v16, a4, a5, a6);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
}

uint64_t sub_100256114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_10058B240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100256180()
{
  return sub_100256260((uint64_t (*)(unint64_t, uint64_t))sub_100255A5C);
}

uint64_t sub_100256198(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002561A8()
{
  return swift_release();
}

uint64_t sub_1002561B4()
{
  type metadata accessor for Notification();
  sub_1001F75FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v5();

  return _swift_deallocObject(v0, v4 + 8, v3);
}

uint64_t sub_100256248()
{
  return sub_100256260((uint64_t (*)(unint64_t, uint64_t))sub_10025509C);
}

uint64_t sub_100256260(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for Notification() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v4);
}

void sub_100256300(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setAlertTopic:v4];
}

unint64_t sub_100256364()
{
  unint64_t result = qword_1005858F8;
  if (!qword_1005858F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005858F8);
  }
  return result;
}

uint64_t sub_1002563AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  uint64_t v9 = *(void (**)(uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(a2 + 24);
  sub_1002084D8(a3);
  v9(sub_100256594, v8, ObjectType, a2);

  return swift_release();
}

uint64_t sub_10025646C(char a1, uint64_t (*a2)(void))
{
  id v4 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10048F550;
  unint64_t v6 = sub_1001F3B08();
  uint64_t v7 = 544501614;
  if (a1) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0xE400000000000000;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = v6;
  if (a1) {
    unint64_t v8 = 0xE000000000000000;
  }
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t result = swift_bridgeObjectRelease();
  if (a2) {
    return a2(a1 & 1);
  }
  return result;
}

uint64_t sub_100256554()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100256594(char a1)
{
  return sub_10025646C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10025659C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002E4D1C(v20, a1);
  uint64_t v5 = v20[0];
  uint64_t v18 = v20[1];
  int64_t v6 = v20[3];
  unint64_t v7 = v20[4];
  int64_t v21 = (unint64_t)(v20[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v6 << 6);
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
    v19[0] = a2;
    v19[1] = a3;
    __chkstk_darwin(result);
    v17[2] = v19;
    swift_bridgeObjectRetain_n();
    char v15 = sub_1002F6760(sub_10025A63C, (uint64_t)v17, v14);
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v14;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v11 >= v21) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v18 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v21) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v18 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 3;
      if (v6 + 3 >= v21) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v18 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 4;
      if (v6 + 4 >= v21) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v18 + 8 * v13);
      if (v12)
      {
LABEL_12:
        int64_t v11 = v13;
      }
      else
      {
        int64_t v11 = v6 + 5;
        if (v6 + 5 >= v21) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v18 + 8 * v11);
        if (!v12)
        {
          int64_t v16 = v6 + 6;
          while (v16 < v21)
          {
            unint64_t v12 = *(void *)(v18 + 8 * v16++);
            if (v12)
            {
              int64_t v11 = v16 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
      }
    }
LABEL_13:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    int64_t v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002567D0()
{
  sub_1001F081C(&qword_100586438);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1004904F0;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x8000000100480780;
  *(void *)(inited + 48) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(inited + 56) = 0xD00000000000001ELL;
  *(void *)(inited + 64) = 0x80000001004807A0;
  *(void *)(inited + 72) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(inited + 80) = 0xD000000000000024;
  *(void *)(inited + 88) = 0x80000001004807C0;
  *(void *)(inited + 96) = Dictionary.init(dictionaryLiteral:)();
  sub_1001F081C((uint64_t *)&unk_100586440);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  qword_100586240 = result;
  return result;
}

id sub_1002568F8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100202CC4((uint64_t)v23, (uint64_t)v24);
    if (v24[3])
    {
      unint64_t v10 = sub_100202D8C();
      if (swift_dynamicCast())
      {
        id v11 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
        *(void *)(v12 + 56) = &type metadata for String;
        *(void *)(v12 + 64) = sub_1001F3B08();
        *(void *)(v12 + 32) = a1;
        *(void *)(v12 + 40) = a2;
        *(void *)(v12 + 96) = v10;
        *(void *)(v12 + 104) = sub_10025A5C0();
        *(void *)(v12 + 72) = v22;
        swift_bridgeObjectRetain();
        id v13 = v22;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        a3 = [v13 BOOLValue];

        return (id)(a3 & 1);
      }
    }
    else
    {
      sub_100202D2C((uint64_t)v24);
    }
    id v14 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10048FB00;
    v24[0] = a1;
    v24[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_1001F3B08();
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    LOBYTE(v24[0]) = a3 & 1;
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)(v15 + 96) = &type metadata for String;
    *(void *)(v15 + 104) = v19;
    *(void *)(v15 + 72) = v20;
    *(void *)(v15 + 80) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return (id)(a3 & 1);
  }
  __break(1u);
  return result;
}

id sub_100256BAC(uint64_t a1, uint64_t a2, id a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100202CC4((uint64_t)v23, (uint64_t)v24);
    if (v24[3])
    {
      unint64_t v10 = sub_100202D8C();
      if (swift_dynamicCast())
      {
        id v11 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
        *(void *)(v12 + 56) = &type metadata for String;
        *(void *)(v12 + 64) = sub_1001F3B08();
        *(void *)(v12 + 32) = a1;
        *(void *)(v12 + 40) = a2;
        *(void *)(v12 + 96) = v10;
        *(void *)(v12 + 104) = sub_10025A5C0();
        *(void *)(v12 + 72) = v22;
        swift_bridgeObjectRetain();
        id v13 = v22;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        a3 = [v13 unsignedIntegerValue];

        return a3;
      }
    }
    else
    {
      sub_100202D2C((uint64_t)v24);
    }
    id v14 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10048FB00;
    v24[0] = a1;
    v24[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_1001F3B08();
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    v24[0] = a3;
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)(v15 + 96) = &type metadata for String;
    *(void *)(v15 + 104) = v19;
    *(void *)(v15 + 72) = v20;
    *(void *)(v15 + 80) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return a3;
  }
  __break(1u);
  return result;
}

id sub_100256E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F75B4(&v23, v24);
    }
    else
    {
      memset(v24, 0, sizeof(v24));
    }
    sub_1001F081C((uint64_t *)&unk_100584CA0);
    sub_1001F081C(&qword_100586430);
    if (swift_dynamicCast())
    {
      a3 = v23;
      id v10 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_10048FB00;
      *(void *)(v11 + 56) = &type metadata for String;
      unint64_t v12 = sub_1001F3B08();
      *(void *)(v11 + 64) = v12;
      *(void *)(v11 + 32) = a1;
      *(void *)(v11 + 40) = a2;
      *(void *)&v24[0] = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v12;
      *(void *)(v11 + 72) = v13;
      *(void *)(v11 + 80) = v14;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    else
    {
      id v15 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_10048FB00;
      *(void *)&v24[0] = a1;
      *((void *)&v24[0] + 1) = a2;
      swift_bridgeObjectRetain();
      uint64_t v17 = String.init<A>(reflecting:)();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = &type metadata for String;
      unint64_t v20 = sub_1001F3B08();
      *(void *)(v16 + 64) = v20;
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      *(void *)&v24[0] = a3;
      swift_bridgeObjectRetain();
      uint64_t v21 = String.init<A>(reflecting:)();
      *(void *)(v16 + 96) = &type metadata for String;
      *(void *)(v16 + 104) = v20;
      *(void *)(v16 + 72) = v21;
      *(void *)(v16 + 80) = v22;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
    }
    return (id)a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100257108(uint64_t a1, uint64_t a2, float a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F75B4(&v20, v21);
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_1001F081C((uint64_t *)&unk_100584CA0);
    if (swift_dynamicCast())
    {
      int v10 = v20;
      id v11 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
      *(void *)(v12 + 56) = &type metadata for String;
      unint64_t v13 = sub_1001F3B08();
      *(void *)(v12 + 64) = v13;
      *(void *)(v12 + 32) = a1;
      *(void *)(v12 + 40) = a2;
      LODWORD(v21[0]) = v10;
      swift_bridgeObjectRetain();
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v12 + 96) = &type metadata for String;
      *(void *)(v12 + 104) = v13;
    }
    else
    {
      id v11 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
      *(void *)&v21[0] = a1;
      *((void *)&v21[0] + 1) = a2;
      swift_bridgeObjectRetain();
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v18 = v17;
      *(void *)(v12 + 56) = &type metadata for String;
      unint64_t v19 = sub_1001F3B08();
      *(void *)(v12 + 64) = v19;
      *(void *)(v12 + 32) = v16;
      *(void *)(v12 + 40) = v18;
      *(float *)uint64_t v21 = a3;
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v12 + 96) = &type metadata for String;
      *(void *)(v12 + 104) = v19;
    }
    *(void *)(v12 + 72) = v14;
    *(void *)(v12 + 80) = v15;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100257378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F75B4(&v19, v20);
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_1001F081C((uint64_t *)&unk_100584CA0);
    if (swift_dynamicCast())
    {
      a3 = v19;
      id v10 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_10048FB00;
      *(void *)(v11 + 56) = &type metadata for String;
      unint64_t v12 = sub_1001F3B08();
      *(void *)(v11 + 64) = v12;
      *(void *)(v11 + 32) = a1;
      *(void *)(v11 + 40) = a2;
      *(void *)&v20[0] = a3;
      swift_bridgeObjectRetain();
      uint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v12;
    }
    else
    {
      id v10 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_10048FB00;
      *(void *)&v20[0] = a1;
      *((void *)&v20[0] + 1) = a2;
      swift_bridgeObjectRetain();
      uint64_t v15 = String.init<A>(reflecting:)();
      uint64_t v17 = v16;
      *(void *)(v11 + 56) = &type metadata for String;
      unint64_t v18 = sub_1001F3B08();
      *(void *)(v11 + 64) = v18;
      *(void *)(v11 + 32) = v15;
      *(void *)(v11 + 40) = v17;
      *(void *)&v20[0] = a3;
      uint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v18;
    }
    *(void *)(v11 + 72) = v13;
    *(void *)(v11 + 80) = v14;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return (id)a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1002575E8(uint64_t a1, uint64_t a2, double a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F75B4(&v20, v21);
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_1001F081C((uint64_t *)&unk_100584CA0);
    if (swift_dynamicCast())
    {
      uint64_t v10 = v20;
      id v11 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
      *(void *)(v12 + 56) = &type metadata for String;
      unint64_t v13 = sub_1001F3B08();
      *(void *)(v12 + 64) = v13;
      *(void *)(v12 + 32) = a1;
      *(void *)(v12 + 40) = a2;
      *(void *)&v21[0] = v10;
      swift_bridgeObjectRetain();
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v12 + 96) = &type metadata for String;
      *(void *)(v12 + 104) = v13;
    }
    else
    {
      id v11 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
      *(void *)&v21[0] = a1;
      *((void *)&v21[0] + 1) = a2;
      swift_bridgeObjectRetain();
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v18 = v17;
      *(void *)(v12 + 56) = &type metadata for String;
      unint64_t v19 = sub_1001F3B08();
      *(void *)(v12 + 64) = v19;
      *(void *)(v12 + 32) = v16;
      *(void *)(v12 + 40) = v18;
      *(double *)uint64_t v21 = a3;
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v12 + 96) = &type metadata for String;
      *(void *)(v12 + 104) = v19;
    }
    *(void *)(v12 + 72) = v14;
    *(void *)(v12 + 80) = v15;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100257858()
{
  id result = sub_100256BAC(0xD00000000000001CLL, 0x8000000100480DC0, (id)0x1E);
  qword_100586248 = (uint64_t)result;
  return result;
}

id sub_100257894()
{
  id result = sub_100256BAC(0xD00000000000001ALL, 0x8000000100480DA0, (id)0x1E);
  qword_100586250 = (uint64_t)result;
  return result;
}

id sub_1002578D0()
{
  id result = sub_100256BAC(0xD000000000000018, 0x8000000100480D80, (id)2);
  qword_100586258 = (uint64_t)result;
  return result;
}

id sub_10025790C()
{
  id result = sub_100256BAC(0xD000000000000029, 0x8000000100480D50, (id)5);
  qword_100586260 = (uint64_t)result;
  return result;
}

id sub_100257948()
{
  id result = sub_100256BAC(0xD000000000000024, 0x8000000100480D20, (id)0x41);
  qword_100586268 = (uint64_t)result;
  return result;
}

id sub_100257984()
{
  id result = sub_100256BAC(0xD00000000000002ELL, 0x8000000100480CF0, (id)0x14);
  qword_100586270 = (uint64_t)result;
  return result;
}

id sub_1002579C0()
{
  id result = sub_100256BAC(0xD000000000000020, 0x8000000100480CC0, (id)0xA);
  qword_100586278 = (uint64_t)result;
  return result;
}

id sub_1002579FC()
{
  id result = sub_100256BAC(0xD000000000000024, 0x8000000100480C90, (id)5);
  qword_100586280 = (uint64_t)result;
  return result;
}

id sub_100257A38()
{
  id result = sub_100256BAC(0xD00000000000001ALL, 0x8000000100480C50, (id)0x64);
  qword_100586288 = (uint64_t)result;
  return result;
}

id sub_100257A74()
{
  id result = sub_100256BAC(0xD000000000000016, 0x8000000100480C30, (id)0x64);
  qword_100586290 = (uint64_t)result;
  return result;
}

id sub_100257AB0()
{
  id result = sub_1002568F8(0xD000000000000013, 0x8000000100480C10, 1u);
  byte_100586298 = result & 1;
  return result;
}

id sub_100257AF0()
{
  id result = sub_1002568F8(0xD00000000000001DLL, 0x8000000100480C70, 0);
  byte_100586299 = result & 1;
  return result;
}

id sub_100257B30()
{
  id result = sub_1002568F8(0xD00000000000001ELL, 0x8000000100480BC0, 1u);
  byte_10058629A = result & 1;
  return result;
}

id sub_100257B70()
{
  id result = sub_1002568F8(0xD00000000000002DLL, 0x8000000100480BE0, 0);
  byte_10058629B = result & 1;
  return result;
}

id sub_100257BB0()
{
  id result = sub_1002568F8(0xD00000000000001FLL, 0x8000000100480BA0, 1u);
  byte_10058629C = result & 1;
  return result;
}

id sub_100257BF0()
{
  id result = sub_1002568F8(0xD00000000000002ALL, 0x8000000100480B70, 1u);
  byte_10058629D = result & 1;
  return result;
}

id sub_100257C30()
{
  id result = sub_1002568F8(0xD00000000000002CLL, 0x8000000100480B40, 1u);
  byte_10058629E = result & 1;
  return result;
}

id sub_100257C70()
{
  id result = sub_1002568F8(0xD000000000000025, 0x8000000100480B10, 1u);
  byte_10058629F = result & 1;
  return result;
}

id sub_100257CB0()
{
  id result = sub_1002568F8(0xD00000000000001FLL, 0x8000000100480AF0, 1u);
  byte_1005862A0 = result & 1;
  return result;
}

id sub_100257CF0()
{
  id result = sub_1002568F8(0xD000000000000025, 0x8000000100480AC0, 1u);
  byte_1005862A1 = result & 1;
  return result;
}

id sub_100257D30()
{
  id result = sub_1002568F8(0xD00000000000001ALL, 0x8000000100480AA0, 1u);
  byte_1005862A2 = result & 1;
  return result;
}

id sub_100257D70()
{
  id result = sub_100256BAC(0xD000000000000023, 0x8000000100480A70, (id)5);
  qword_1005862A8 = (uint64_t)result;
  return result;
}

id sub_100257DAC()
{
  id result = sub_1002568F8(0xD00000000000001BLL, 0x80000001004808D0, 1u);
  byte_1005862B0 = result & 1;
  return result;
}

id sub_100257DEC()
{
  id result = sub_100256BAC(0xD000000000000016, 0x8000000100480A50, (id)5);
  qword_1005862B8 = (uint64_t)result;
  return result;
}

id sub_100257E28()
{
  id result = sub_100256BAC(0xD000000000000015, 0x8000000100480A30, (id)0x1F4FA00);
  qword_1005862C0 = (uint64_t)result;
  return result;
}

id sub_100257E68()
{
  id result = sub_100256BAC(0xD00000000000001ELL, 0x80000001004809A0, (id)0x1F4FA00);
  qword_1005862C8 = (uint64_t)result;
  return result;
}

id sub_100257EA8()
{
  id result = sub_100256BAC(0xD00000000000001CLL, 0x8000000100480A10, (id)0x1F4);
  qword_1005862D0 = (uint64_t)result;
  return result;
}

id sub_100257EE4()
{
  id result = sub_100256BAC(0xD00000000000001BLL, 0x80000001004809F0, (id)0x1F4FA00);
  qword_1005862D8 = (uint64_t)result;
  return result;
}

id sub_100257F24()
{
  id result = sub_100256BAC(0xD000000000000027, 0x80000001004809C0, (id)0x1F4FA00);
  qword_1005862E0 = (uint64_t)result;
  return result;
}

id sub_100257F64()
{
  id result = sub_100256BAC(0xD000000000000019, 0x8000000100480980, (id)3);
  qword_1005862E8 = (uint64_t)result;
  return result;
}

id sub_100257FA0()
{
  id result = sub_100256BAC(0xD000000000000019, 0x8000000100480960, (id)0x100);
  qword_1005862F0 = (uint64_t)result;
  return result;
}

id sub_100257FDC()
{
  id result = sub_100256BAC(0xD00000000000001FLL, 0x8000000100480940, (id)2);
  qword_1005862F8 = (uint64_t)result;
  return result;
}

id sub_100258018()
{
  id result = sub_100256BAC(0xD00000000000001CLL, 0x8000000100480920, (id)0x15180);
  qword_100586300 = (uint64_t)result;
  return result;
}

id sub_100258058()
{
  id result = sub_100256BAC(0xD000000000000026, 0x80000001004808F0, (id)0x12C);
  qword_100586308 = (uint64_t)result;
  return result;
}

id sub_100258094()
{
  id result = sub_100256BAC(0xD000000000000022, 0x80000001004808A0, (id)0x12C);
  qword_100586310 = (uint64_t)result;
  return result;
}

id sub_1002580D0()
{
  id result = sub_100256BAC(0xD000000000000026, 0x8000000100480870, (id)5);
  qword_100586318 = (uint64_t)result;
  return result;
}

uint64_t sub_10025810C()
{
  if (qword_100583790 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100586240;
  swift_bridgeObjectRetain();
  id v1 = sub_100256E5C(0xD000000000000020, 0x8000000100480750, v0);
  uint64_t result = swift_bridgeObjectRelease();
  qword_100586320 = (uint64_t)v1;
  return result;
}

id sub_10025819C()
{
  id result = sub_100256BAC(0xD000000000000025, 0x80000001004806F0, (id)0x1388);
  qword_100586328 = (uint64_t)result;
  return result;
}

id sub_1002581D8()
{
  id result = sub_100256BAC(0xD000000000000022, 0x8000000100480720, (id)0xA);
  qword_100586330 = (uint64_t)result;
  return result;
}

id sub_100258214()
{
  id result = sub_1002568F8(0xD000000000000022, 0x80000001004806C0, 1u);
  byte_100586338 = result & 1;
  return result;
}

id sub_100258254()
{
  id result = sub_100256BAC(0xD000000000000027, 0x8000000100480690, (id)4);
  qword_100586340 = (uint64_t)result;
  return result;
}

id sub_100258290()
{
  id result = sub_1002568F8(0xD000000000000025, 0x8000000100480660, 1u);
  byte_100586348 = result & 1;
  return result;
}

id sub_1002582D0()
{
  id result = sub_1002568F8(0xD000000000000014, 0x8000000100480640, 1u);
  byte_100586349 = result & 1;
  return result;
}

id sub_100258310()
{
  id result = sub_100256BAC(0xD00000000000001BLL, 0x80000001004801C0, (id)0xB4);
  qword_100586350 = (uint64_t)result;
  return result;
}

id sub_10025834C()
{
  id result = sub_100256BAC(0xD000000000000014, 0x80000001004801E0, (id)0x1F4);
  qword_100586358 = (uint64_t)result;
  return result;
}

id sub_100258388()
{
  id result = sub_100256BAC(0xD000000000000019, 0x8000000100480200, (id)5);
  qword_100586360 = (uint64_t)result;
  return result;
}

uint64_t sub_1002583C4(uint64_t a1, uint64_t a2)
{
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1001F3B08();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init(format:_:)();
  LOBYTE(a1) = sub_1002568F8(v5, v6, 1u);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

id sub_100258474()
{
  id result = sub_100256BAC(0xD00000000000001BLL, 0x80000001004802F0, (id)3);
  qword_100586368 = (uint64_t)result;
  return result;
}

id sub_1002584B0()
{
  id result = sub_100256BAC(0xD000000000000019, 0x8000000100480310, (id)2);
  qword_100586370 = (uint64_t)result;
  return result;
}

id sub_1002584EC()
{
  id result = sub_100256BAC(0xD00000000000001CLL, 0x8000000100480330, (id)2);
  qword_100586378 = (uint64_t)result;
  return result;
}

id sub_100258528()
{
  id result = sub_100256BAC(0xD000000000000013, 0x8000000100480350, (id)5);
  qword_100586380 = (uint64_t)result;
  return result;
}

id sub_100258564()
{
  id result = sub_100256BAC(0xD000000000000011, 0x8000000100480370, (id)0xF);
  qword_100586388 = (uint64_t)result;
  return result;
}

id sub_1002585A0()
{
  sub_100246A14();
  id result = sub_100257108(0xD000000000000028, v0, 300.0);
  dword_100586390 = v2;
  return result;
}

id sub_1002585DC()
{
  sub_100246A14();
  id result = sub_100256BAC(0xD000000000000024, v0, (id)0x19);
  qword_100586398 = (uint64_t)result;
  return result;
}

id sub_100258614()
{
  unint64_t v0 = sub_10025A674();
  id result = sub_100257378(v0, v1, 2);
  qword_1005863A0 = (uint64_t)result;
  return result;
}

id sub_100258644()
{
  sub_100246A14();
  id result = sub_100257378(0xD000000000000019, v0, 120);
  qword_1005863A8 = (uint64_t)result;
  return result;
}

id sub_10025867C()
{
  unint64_t v0 = sub_10025A674();
  id result = sub_100257378(v0, v1, 15);
  qword_1005863B0 = (uint64_t)result;
  return result;
}

id sub_1002586AC()
{
  id result = sub_100257378(0x736F642D70696F76, 0xEE00746E756F632DLL, 20);
  qword_1005863B8 = (uint64_t)result;
  return result;
}

id sub_1002586F0()
{
  id result = sub_100256BAC(0xD000000000000015, 0x8000000100480600, (id)0x1E);
  qword_1005863C0 = (uint64_t)result;
  return result;
}

id sub_10025872C()
{
  id result = sub_100256BAC(0xD00000000000001ELL, 0x80000001004805E0, (id)0x12C);
  qword_1005863C8 = (uint64_t)result;
  return result;
}

id sub_100258768()
{
  id result = sub_100256BAC(0xD00000000000001ELL, 0x80000001004805C0, (id)1);
  qword_1005863D0 = (uint64_t)result;
  return result;
}

id sub_1002587A4()
{
  id result = sub_100256BAC(0xD000000000000013, 0x8000000100480450, (id)2);
  qword_1005863D8 = (uint64_t)result;
  return result;
}

id sub_1002587E0()
{
  id result = sub_1002575E8(0xD000000000000018, 0x80000001004804E0, 1.0);
  qword_1005863E0 = v1;
  return result;
}

id sub_10025881C()
{
  sub_100246A14();
  id result = sub_1002568F8(0xD000000000000020, v0, 1u);
  byte_1005863E8 = result & 1;
  return result;
}

uint64_t sub_10025888C()
{
  return sub_10025A318(&qword_100583798, (uint64_t)&qword_100586248);
}

uint64_t sub_1002588E4()
{
  return sub_10025A318(&qword_1005837A0, (uint64_t)&qword_100586250);
}

uint64_t sub_10025893C()
{
  return sub_10025A318(&qword_1005837A8, (uint64_t)&qword_100586258);
}

uint64_t sub_100258994()
{
  return sub_10025A318(&qword_1005837B0, (uint64_t)&qword_100586260);
}

uint64_t sub_1002589EC()
{
  return sub_10025A318(&qword_1005837B8, (uint64_t)&qword_100586268);
}

uint64_t sub_100258A44()
{
  return sub_10025A318(&qword_1005837C0, (uint64_t)&qword_100586270);
}

uint64_t sub_100258A9C()
{
  return sub_10025A318(&qword_1005837C8, (uint64_t)&qword_100586278);
}

uint64_t sub_100258AF4()
{
  return sub_10025A318(&qword_1005837D0, (uint64_t)&qword_100586280);
}

uint64_t sub_100258B4C()
{
  return sub_10025A434(&qword_1005837F0, (unsigned __int8 *)&byte_100586299);
}

uint64_t sub_100258BA4()
{
  return sub_10025A318(&qword_1005837D8, (uint64_t)&qword_100586288);
}

uint64_t sub_100258BFC()
{
  return sub_10025A318(&qword_1005837E0, (uint64_t)&qword_100586290);
}

uint64_t sub_100258C54()
{
  return sub_10025A434(&qword_1005837E8, (unsigned __int8 *)&byte_100586298);
}

uint64_t sub_100258CAC()
{
  return sub_10025A434(&qword_100583800, (unsigned __int8 *)&byte_10058629B);
}

uint64_t sub_100258D04()
{
  return sub_10025A434(&qword_1005837F8, (unsigned __int8 *)&byte_10058629A);
}

uint64_t sub_100258D5C()
{
  return sub_10025A434(&qword_100583808, (unsigned __int8 *)&byte_10058629C);
}

uint64_t sub_100258DB4()
{
  return sub_10025A434(&qword_100583810, (unsigned __int8 *)&byte_10058629D);
}

uint64_t sub_100258E0C()
{
  return sub_10025A434(&qword_100583818, (unsigned __int8 *)&byte_10058629E);
}

uint64_t sub_100258E64()
{
  return sub_10025A434(&qword_100583820, (unsigned __int8 *)&byte_10058629F);
}

uint64_t sub_100258EBC()
{
  return sub_10025A434(&qword_100583828, (unsigned __int8 *)&byte_1005862A0);
}

uint64_t sub_100258F14()
{
  return sub_10025A434(&qword_100583830, (unsigned __int8 *)&byte_1005862A1);
}

uint64_t sub_100258F6C()
{
  return sub_10025A434(&qword_100583838, (unsigned __int8 *)&byte_1005862A2);
}

uint64_t sub_100258FC4()
{
  return sub_10025A318(&qword_100583840, (uint64_t)&qword_1005862A8);
}

uint64_t sub_10025901C()
{
  return sub_10025A318(&qword_100583850, (uint64_t)&qword_1005862B8);
}

uint64_t sub_100259074()
{
  return sub_10025A318(&qword_100583858, (uint64_t)&qword_1005862C0);
}

uint64_t sub_1002590CC()
{
  return sub_10025A318(&qword_100583868, (uint64_t)&qword_1005862D0);
}

uint64_t sub_100259124()
{
  return sub_10025A318(&qword_100583870, (uint64_t)&qword_1005862D8);
}

uint64_t sub_10025917C()
{
  return sub_10025A318(&qword_100583878, (uint64_t)&qword_1005862E0);
}

uint64_t sub_1002591D4()
{
  return sub_10025A318(&qword_100583860, (uint64_t)&qword_1005862C8);
}

uint64_t sub_10025922C()
{
  return sub_10025A318(&qword_100583880, (uint64_t)&qword_1005862E8);
}

uint64_t sub_100259284()
{
  return sub_10025A318(&qword_100583888, (uint64_t)&qword_1005862F0);
}

uint64_t sub_1002592DC()
{
  return sub_10025A318(&qword_100583890, (uint64_t)&qword_1005862F8);
}

uint64_t sub_100259334()
{
  return sub_10025A318(&qword_100583898, (uint64_t)&qword_100586300);
}

uint64_t sub_10025938C()
{
  return sub_10025A318(&qword_1005838A0, (uint64_t)&qword_100586308);
}

uint64_t sub_1002593E4()
{
  return sub_10025A434(&qword_100583848, (unsigned __int8 *)&byte_1005862B0);
}

uint64_t sub_10025943C()
{
  return sub_10025A318(&qword_1005838A8, (uint64_t)&qword_100586310);
}

uint64_t sub_100259494()
{
  return sub_10025A318(&qword_1005838B0, (uint64_t)&qword_100586318);
}

uint64_t sub_100259530()
{
  if (qword_1005838B8 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_10025958C(uint64_t a1, uint64_t a2)
{
  if (qword_1005838B8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100586320;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100223128(a1, a2, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v6 = sub_10022337C(5459817, 0xE300000000000000, v5);
    if (v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = sub_10025A65C();
      uint64_t v15 = sub_10022337C(v13, v14, v5);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      if (v17)
      {
        id v18 = sub_100008DCC();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        return v15;
      }
    }
  }
  else
  {
    id v8 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10048FB00;
    *(void *)(v9 + 56) = &type metadata for String;
    unint64_t v10 = sub_1001F3B08();
    *(void *)(v9 + 64) = v10;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_100586430);
    uint64_t v11 = String.init<A>(reflecting:)();
    *(void *)(v9 + 96) = &type metadata for String;
    *(void *)(v9 + 104) = v10;
    *(void *)(v9 + 72) = v11;
    *(void *)(v9 + 80) = v12;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

uint64_t sub_100259878()
{
  return sub_10025A318(&qword_1005838F0, (uint64_t)&qword_100586350);
}

uint64_t sub_1002598D0()
{
  return sub_10025A318(&qword_1005838F8, (uint64_t)&qword_100586358);
}

uint64_t sub_100259928()
{
  return sub_10025A318(&qword_100583900, (uint64_t)&qword_100586360);
}

uint64_t sub_10025994C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID) == a1
    && *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID + 8) == a2;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusAppBundleID);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (qword_1005838B8 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = sub_10025659C(v8, a1, a2);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = sub_10025A65C();
      uint64_t v12 = sub_10022337C(v10, v11, v9);
      if (!v13) {
        uint64_t v12 = sub_10022337C(5459817, 0xE300000000000000, v9);
      }
      uint64_t v6 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_100259B44()
{
  return sub_10025A318(&qword_1005838C8, (uint64_t)&qword_100586330);
}

uint64_t sub_100259B9C()
{
  return sub_10025A318(&qword_1005838C0, (uint64_t)&qword_100586328);
}

uint64_t sub_100259BF4()
{
  return sub_10025A434(&qword_1005838D0, (unsigned __int8 *)&byte_100586338);
}

uint64_t sub_100259C4C()
{
  return sub_10025A318(&qword_1005838D8, (uint64_t)&qword_100586340);
}

uint64_t sub_100259CA4()
{
  return sub_10025A434(&qword_1005838E0, (unsigned __int8 *)&byte_100586348);
}

uint64_t sub_100259CFC()
{
  return sub_10025A434(&qword_1005838E8, (unsigned __int8 *)&byte_100586349);
}

uint64_t sub_100259D20(uint64_t a1, uint64_t a2)
{
  return sub_1002583C4(a1, a2) & 1;
}

uint64_t sub_100259DF4()
{
  return sub_10025A318(&qword_100583908, (uint64_t)&qword_100586368);
}

uint64_t sub_100259E4C()
{
  return sub_10025A318(&qword_100583910, (uint64_t)&qword_100586370);
}

uint64_t sub_100259EA4()
{
  return sub_10025A318(&qword_100583918, (uint64_t)&qword_100586378);
}

uint64_t sub_100259EFC()
{
  return sub_10025A318(&qword_100583920, (uint64_t)&qword_100586380);
}

uint64_t sub_100259F54()
{
  return sub_10025A318(&qword_100583928, (uint64_t)&qword_100586388);
}

float sub_100259FB4()
{
  if (qword_100583930 != -1) {
    swift_once();
  }
  return *(float *)&dword_100586390;
}

uint64_t sub_10025A034()
{
  return sub_10025A318(&qword_100583938, (uint64_t)&qword_100586398);
}

uint64_t sub_10025A08C()
{
  return sub_10025A318(&qword_100583940, (uint64_t)&qword_1005863A0);
}

uint64_t sub_10025A0E4()
{
  return sub_10025A318(&qword_100583948, (uint64_t)&qword_1005863A8);
}

uint64_t sub_10025A13C()
{
  return sub_10025A318(&qword_100583950, (uint64_t)&qword_1005863B0);
}

uint64_t sub_10025A194()
{
  return sub_10025A318(&qword_100583978, (uint64_t)&qword_1005863D8);
}

uint64_t sub_10025A1EC()
{
  return sub_10025A318(&qword_100583958, (uint64_t)&qword_1005863B8);
}

uint64_t sub_10025A244()
{
  return sub_10025A318(&qword_100583960, (uint64_t)&qword_1005863C0);
}

uint64_t sub_10025A29C()
{
  return sub_10025A318(&qword_100583968, (uint64_t)&qword_1005863C8);
}

uint64_t sub_10025A2F4()
{
  return sub_10025A318(&qword_100583970, (uint64_t)&qword_1005863D0);
}

uint64_t sub_10025A318(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

double sub_10025A390()
{
  if (qword_100583980 != -1) {
    swift_once();
  }
  return *(double *)&qword_1005863E0;
}

uint64_t sub_10025A410()
{
  return sub_10025A434(&qword_100583988, (unsigned __int8 *)&byte_1005863E8);
}

uint64_t sub_10025A434(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

id sub_10025A470()
{
  uint64_t v1 = &v0[OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusAppBundleID];
  *(void *)uint64_t v1 = 0xD000000000000011;
  *((void *)v1 + 1) = 0x8000000100480DE0;
  uint64_t v2 = &v0[OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID];
  *(void *)uint64_t v2 = 0xD00000000000001ALL;
  *((void *)v2 + 1) = 0x8000000100480E00;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SharedConversationServerBag();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_10025A514()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedConversationServerBag();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SharedConversationServerBag()
{
  return self;
}

unint64_t sub_10025A5C0()
{
  unint64_t result = qword_100586428;
  if (!qword_100586428)
  {
    sub_100202D8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586428);
  }
  return result;
}

uint64_t sub_10025A610(uint64_t *a1, uint64_t *a2)
{
  return sub_1002F73AC(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10025A63C(uint64_t *a1)
{
  return sub_10025A610(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10025A65C()
{
  return 0x6B6361626C6C6166;
}

unint64_t sub_10025A674()
{
  return 0xD00000000000001ELL;
}

void sub_10025A688(char *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = self;
  id v12 = [v11 defaultManager];
  URL.absoluteString.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v14 = [v12 fileExistsAtPath:v13];

  if (v14)
  {
LABEL_11:
    sub_1001FCC08();
    return;
  }
  id v15 = [v11 defaultManager];
  URL._bridgeToObjectiveC()(v16);
  id v18 = v17;
  id v45 = 0;
  unsigned int v19 = [v15 createDirectoryAtURL:v17 withIntermediateDirectories:1 attributes:0 error:&v45];

  if (!v19)
  {
    id v43 = v45;
    id v23 = v45;
    uint64_t v24 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_1001F5F88(v25, (uint64_t)qword_100594C58);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v26(v10, a1, v2);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      int v42 = v29;
      uint64_t v31 = v30;
      id v43 = (id)swift_slowAlloc();
      uint64_t v44 = v24;
      id v45 = v43;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v40 = v26;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v32 = String.init<A>(reflecting:)();
      os_log_t v41 = v27;
      uint64_t v44 = sub_1002344D8(v32, v33, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v40(v8, v10, v2);
      uint64_t v34 = String.init<A>(reflecting:)();
      uint64_t v44 = sub_1002344D8(v34, v35, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025B5F4();
      v36();
      os_log_t v37 = v41;
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v42, "Received an error (%s creating %s", (uint8_t *)v31, 0x16u);
      sub_10025B600();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v38 = sub_10021ECA8();
      v39(v38);
    }
    goto LABEL_11;
  }
  sub_1001FCC08();
  id v22 = v20;
}

void sub_10025AAB4(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v72 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = &v67[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F7650();
  uint64_t v71 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v70 = &v67[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = &v67[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v67[-v20];
  __chkstk_darwin(v19);
  id v23 = &v67[-v22];
  static URL.temporaryDirectory.getter();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v2);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v73 = v10;
  Class isa = (void (*)(void))v10[1].isa;
  uint64_t v69 = v21;
  uint64_t v77 = v8;
  unint64_t v78 = isa;
  BOOL v74 = v10 + 1;
  ((void (*)(unsigned char *, uint64_t))isa)(v21, v8);
  sub_10025A688(v23);
  uint64_t v25 = v72;
  URL.lastPathComponent.getter();
  Swift::Int v75 = v23;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = self;
  id v27 = [v26 defaultManager];
  char v79 = v18;
  URL._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  id v81 = 0;
  unsigned int v31 = [v27 removeItemAtURL:v29 error:&v81];

  if (v31)
  {
    id v32 = v81;
  }
  else
  {
    id v33 = v81;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  id v34 = [v26 defaultManager];
  URL._bridgeToObjectiveC()(v35);
  os_log_t v37 = v36;
  uint64_t v38 = v79;
  URL._bridgeToObjectiveC()(v39);
  os_log_t v41 = v40;
  id v81 = 0;
  unsigned int v42 = [v34 copyItemAtURL:v37 toURL:v40 error:&v81];

  id v43 = v73;
  if (v42)
  {
    id v44 = v81;
    uint64_t v45 = v77;
    ((void (*)(char *, uint64_t))v78)(v75, v77);
    uint64_t v46 = v76;
    ((void (*)(uint64_t, unsigned char *, uint64_t))v43[4].isa)(v76, v38, v45);
    uint64_t v47 = 0;
  }
  else
  {
    id v48 = v81;
    uint64_t v49 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_1001F5F88(v50, (uint64_t)qword_100594C58);
    uint64_t v51 = (void (*)(void))v43[2].isa;
    uint64_t v52 = v25;
    uint64_t v45 = v77;
    ((void (*)(unsigned char *, void *, uint64_t))v51)(v70, v52, v77);
    sub_10025B5E0();
    v51();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    int v55 = v54;
    uint64_t v73 = v53;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      char v72 = (void *)swift_slowAlloc();
      id v81 = v72;
      *(_DWORD *)uint64_t v56 = 136315650;
      int v68 = v55;
      sub_10025B5E0();
      v51();
      uint64_t v57 = String.init<A>(reflecting:)();
      uint64_t v80 = sub_1002344D8(v57, v58, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100235D50();
      v59();
      *(_WORD *)(v56 + 12) = 2080;
      sub_10025B5E0();
      v51();
      uint64_t v60 = String.init<A>(reflecting:)();
      uint64_t v80 = sub_1002344D8(v60, v61, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      BOOL v62 = v78;
      sub_100235D50();
      v62();
      *(_WORD *)(v56 + 22) = 2080;
      uint64_t v80 = v49;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v63 = String.init<A>(reflecting:)();
      uint64_t v80 = sub_1002344D8(v63, v64, (uint64_t *)&v81);
      uint64_t v45 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      char v65 = v73;
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v68, "Error copying file (%s to temp location (%s): %s", (uint8_t *)v56, 0x20u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
      sub_100235D50();
      v62();
      sub_100235D50();
      v62();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      uint64_t v66 = v78;
      sub_10025B5F4();
      v66();
      sub_10025B5F4();
      v66();
      swift_errorRelease();
      sub_10025B5F4();
      v66();
      ((void (*)(char *, uint64_t))v66)(v75, v45);
    }
    uint64_t v47 = 1;
    uint64_t v46 = v76;
  }
  sub_1001F0530(v46, v47, 1, v45);
  sub_1001FCC08();
}

void sub_10025B194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F7650();
  uint64_t v49 = v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = self;
  id v12 = [v11 defaultManager];
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  id v52 = 0;
  unsigned int v16 = [v12 removeItemAtURL:v14 error:&v52];

  if (v16)
  {
    id v17 = v52;
  }
  else
  {
    id v18 = v52;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  id v19 = [v11 defaultManager];
  URL._bridgeToObjectiveC()(v20);
  uint64_t v22 = v21;
  URL._bridgeToObjectiveC()(v23);
  uint64_t v25 = v24;
  id v52 = 0;
  unsigned int v26 = [v19 copyItemAtURL:v22 toURL:v24 error:&v52];

  if (v26)
  {
    sub_1001FCC08();
    id v29 = v27;
  }
  else
  {
    id v50 = v52;
    id v30 = v52;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_1001F5F88(v32, (uint64_t)qword_100594C58);
    id v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a2, v3);
    swift_errorRetain();
    swift_errorRetain();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      int v48 = v36;
      uint64_t v38 = v37;
      id v50 = (id)swift_slowAlloc();
      id v52 = v50;
      *(_DWORD *)uint64_t v38 = 136315394;
      v33(v49, (uint64_t)v10, v3);
      uint64_t v39 = String.init<A>(reflecting:)();
      uint64_t v51 = sub_1002344D8(v39, v40, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_10021ECA8();
      v42(v41);
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t v51 = v31;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v43 = String.init<A>(reflecting:)();
      uint64_t v51 = sub_1002344D8(v43, v44, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v48, "Error copying completed greeting to %s: %s", (uint8_t *)v38, 0x16u);
      sub_10025B600();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      uint64_t v45 = sub_10021ECA8();
      v46(v45);
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_1001FCC08();
  }
}

uint64_t sub_10025B600()
{
  return swift_arrayDestroy();
}

void sub_10025B620(char a1)
{
  *uint64_t v1 = a1;
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C58);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v5 = String.init<A>(reflecting:)();
    sub_1002344D8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v7 = String.init<A>(reflecting:)();
    sub_1002344D8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Transitioning from %s to %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10025B82C()
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C58);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v4 = String.init<A>(reflecting:)();
    sub_1002344D8(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    uint64_t v6 = String.init<A>(reflecting:)();
    sub_1002344D8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unpexected state %s expected %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10025DF9C();
  swift_allocError();
  return swift_willThrow();
}

_UNKNOWN **sub_10025BA34()
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1001F5F88(v1, (uint64_t)qword_100594C58);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stop recording for active call", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t result = &off_10050AE18;
  switch(*v0)
  {
    case 2:
      sub_10025B620(7);
      unint64_t result = &off_10050AD78;
      break;
    case 3:
      sub_10025B620(6);
      unint64_t result = &off_10050ADA0;
      break;
    case 4:
      sub_10025B620(5);
      unint64_t result = &off_10050ADC8;
      break;
    case 5:
      return result;
    case 6:
      unint64_t result = &off_10050AE40;
      break;
    case 7:
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v6, v7))
      {
        unint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to stop a completed call recording session", v8, 2u);
        swift_slowDealloc();
      }

      sub_10025DF9C();
      swift_allocError();
      unint64_t result = (_UNKNOWN **)swift_willThrow();
      break;
    default:
      sub_10025B620(5);
      unint64_t result = &off_10050ADF0;
      break;
  }
  return result;
}

_UNKNOWN **sub_10025BC70()
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1001F5F88(v1, (uint64_t)qword_100594C58);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stop recording for inactive call", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t result = &off_10050AF08;
  switch(*v0)
  {
    case 2:
      sub_10025B620(7);
      unint64_t result = &off_10050AE68;
      break;
    case 3:
      sub_10025B620(7);
      unint64_t result = &off_10050AE90;
      break;
    case 4:
      sub_10025B620(5);
      unint64_t result = &off_10050AEB8;
      break;
    case 5:
      return result;
    case 6:
      sub_10025B620(7);
      unint64_t result = &off_10050AF30;
      break;
    case 7:
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v6, v7))
      {
        unint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to stop a completed call recording session", v8, 2u);
        swift_slowDealloc();
      }

      sub_10025DF9C();
      swift_allocError();
      unint64_t result = (_UNKNOWN **)swift_willThrow();
      break;
    default:
      sub_10025B620(5);
      unint64_t result = &off_10050AEE0;
      break;
  }
  return result;
}

uint64_t sub_10025BEB8(char a1)
{
  unsigned int v2 = *v1;
  BOOL v3 = v2 > 7;
  int v4 = (1 << v2) & 0xCC;
  if (v3 || v4 == 0)
  {
    if (a1)
    {
      sub_10025B620(6);
      return 1;
    }
    else
    {
      sub_10025B620(7);
      return 2;
    }
  }
  else
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1001F5F88(v6, (uint64_t)qword_100594C58);
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Finish should only be called after recording via AVC is completed", v9, 2u);
      sub_1001F63CC();
    }

    sub_10025DF9C();
    swift_allocError();
    return swift_willThrow();
  }
}

void sub_10025BFFC(char a1)
{
  switch(*v1)
  {
    case 2:
    case 6:
      goto LABEL_4;
    case 3:
    case 5:
      if (a1) {
        goto LABEL_3;
      }
LABEL_4:
      sub_10025B620(7);
      break;
    default:
LABEL_3:
      sub_10025E6B4();
      break;
  }
}

uint64_t sub_10025C080(char a1)
{
  if ((a1 - 2) > 5u) {
    return 3;
  }
  else {
    return dword_100491190[(char)(a1 - 2)];
  }
}

uint64_t sub_10025C0AC(char a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2:
      if (a2 == 2) {
        goto LABEL_13;
      }
      goto LABEL_15;
    case 3:
      if (a2 != 3) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 4:
      if (a2 != 4) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 5:
      if (a2 != 5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 6:
      if (a2 != 6) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 7:
      if (a2 != 7) {
        goto LABEL_15;
      }
LABEL_13:
      char v2 = 1;
      break;
    default:
      if (a2 - 2 >= 6) {
        char v2 = ((a1 & 1) == 0) ^ a2;
      }
      else {
LABEL_15:
      }
        char v2 = 0;
      break;
  }
  return v2 & 1;
}

uint64_t sub_10025C16C(char *a1, unsigned __int8 *a2)
{
  return sub_10025C0AC(*a1, *a2);
}

void sub_10025C178()
{
  sub_1001FCC38();
  char v2 = v1;
  id v18 = v3;
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235BE8();
  uint64_t v8 = (uint64_t)&v0[OBJC_IVAR___CSDCallRecordingSession_dateStartedRecording];
  uint64_t v9 = type metadata accessor for Date();
  sub_1001F0530(v8, 1, 1, v9);
  sub_1001F0530((uint64_t)&v0[OBJC_IVAR___CSDCallRecordingSession_dateEndedRecording], 1, 1, v9);
  sub_1001F0530((uint64_t)&v0[OBJC_IVAR___CSDCallRecordingSession_currentMessageUUID], 1, 1, v4);
  *(void *)&v0[OBJC_IVAR___CSDCallRecordingSession_recurringDisclosureCount] = 0;
  *(void *)&v0[OBJC_IVAR___CSDCallRecordingSession_messageUUIDs] = _swiftEmptyArrayStorage;
  v0[OBJC_IVAR___CSDCallRecordingSession_stoppedReason] = 3;
  swift_unknownObjectWeakInit();
  uint64_t v10 = v0;
  UUID.init()();
  uint64_t v11 = *(void (**)(void))(v6 + 32);
  sub_10025E71C();
  v11();
  v10[OBJC_IVAR___CSDCallRecordingSession_stateMachine] = 2;
  id v12 = [v2 uniqueProxyIdentifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  unsigned int v16 = (uint64_t *)&v10[OBJC_IVAR___CSDCallRecordingSession_callUUID];
  *unsigned int v16 = v13;
  v16[1] = v15;
  id v17 = [v18 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10025E71C();
  v11();
  swift_unknownObjectWeakAssign();

  v19.receiver = v10;
  v19.super_class = (Class)type metadata accessor for CallRecordingSession();
  objc_msgSendSuper2(&v19, "init");

  sub_1001FCC08();
}

uint64_t sub_10025C3F8()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  sub_100235BE8();
  swift_getObjectType();
  uint64_t v18 = _typeName(_:qualified:)();
  uint64_t v19 = v3;
  v4._countAndFlagsBits = 40;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v21 = v18;
  uint64_t v22 = v19;
  strcpy((char *)&v20, "state: ");
  sub_1002022F8();
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v20._countAndFlagsBits;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x203A64697575;
  v20._object = (void *)0xE600000000000000;
  uint64_t v8 = *(void (**)(uint64_t))(v1 + 16);
  uint64_t v9 = sub_10025E708();
  v8(v9);
  v10._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x203A64697575;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v20, "requestUUID: ");
  HIWORD(v20._object) = -4864;
  uint64_t v13 = sub_10025E708();
  v8(v13);
  v14._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v18;
}

void sub_10025C67C()
{
  sub_1001FCC38();
  uint64_t v3 = sub_1001F081C(&qword_100584B40);
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_100210660();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10025E730();
  sub_1001F6398();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  Swift::String v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  Swift::String v14 = &v22[-v13];
  Swift::String v15 = (unsigned char *)(v1 + OBJC_IVAR___CSDCallRecordingSession_stateMachine);
  sub_1002022F8();
  if (*v15 != 7)
  {
    Swift::String v16 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
    v16(v14, v1 + OBJC_IVAR___CSDCallRecordingSession_uuid, v6);
    unsigned int v23 = sub_10025C884();
    uint64_t v17 = *(void *)(v1 + OBJC_IVAR___CSDCallRecordingSession_callUUID);
    uint64_t v18 = *(void *)(v1 + OBJC_IVAR___CSDCallRecordingSession_callUUID + 8);
    v16(v12, v1 + OBJC_IVAR___CSDCallRecordingSession_requestUUID, v6);
    uint64_t v19 = v1 + OBJC_IVAR___CSDCallRecordingSession_dateStartedRecording;
    sub_1002022F8();
    sub_10025E234(v19, v2, &qword_100584B40);
    uint64_t v20 = v1 + OBJC_IVAR___CSDCallRecordingSession_dateEndedRecording;
    sub_1002022F8();
    sub_10025E234(v20, v0, &qword_100584B40);
    char v21 = sub_10025C928();
    objc_allocWithZone((Class)TUCallRecordingSession);
    swift_bridgeObjectRetain();
    sub_10025DFE8((uint64_t)v14, v23, v17, v18, (uint64_t)v12, v2, v0, v21 & 1);
  }
  sub_1001FCC08();
}

uint64_t sub_10025C884()
{
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 5;
  }
  uint64_t v2 = Strong;
  if ([Strong status] == 5)
  {

    return 5;
  }
  unsigned int v3 = [v2 status];

  if (v3 == 6) {
    return 5;
  }
  uint64_t v5 = (char *)(v0 + OBJC_IVAR___CSDCallRecordingSession_stateMachine);
  sub_1002022F8();
  return sub_10025C080(*v5);
}

uint64_t sub_10025C928()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___CSDCallRecordingSession_stateMachine);
  sub_1002022F8();
  return (*v1 - 8 < 0xFFFFFFFA) & *v1;
}

void sub_10025C9BC()
{
  sub_1001FCC38();
  uint64_t v3 = sub_1001F081C(&qword_100584B40);
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_100210660();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10025E730();
  sub_1001F6398();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  Swift::String v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  Swift::String v14 = &v21[-v13];
  Swift::String v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  v15(&v21[-v13], v1 + OBJC_IVAR___CSDCallRecordingSession_uuid, v6);
  unsigned int v22 = sub_10025C884();
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR___CSDCallRecordingSession_callUUID);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR___CSDCallRecordingSession_callUUID + 8);
  v15(v12, v1 + OBJC_IVAR___CSDCallRecordingSession_requestUUID, v6);
  uint64_t v18 = v1 + OBJC_IVAR___CSDCallRecordingSession_dateStartedRecording;
  sub_1002022F8();
  sub_10025E234(v18, v2, &qword_100584B40);
  uint64_t v19 = v1 + OBJC_IVAR___CSDCallRecordingSession_dateEndedRecording;
  sub_1002022F8();
  sub_10025E234(v19, v0, &qword_100584B40);
  char v20 = sub_10025C928();
  objc_allocWithZone((Class)TUCallRecordingSession);
  swift_bridgeObjectRetain();
  sub_10025DFE8((uint64_t)v14, v22, v16, v17, (uint64_t)v12, v2, v0, v20 & 1);
  sub_1001FCC08();
}

void sub_10025CB9C()
{
}

id sub_10025CBDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallRecordingSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10025CD28()
{
  return type metadata accessor for CallRecordingSession();
}

uint64_t type metadata accessor for CallRecordingSession()
{
  uint64_t result = qword_100586488;
  if (!qword_100586488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10025CD78()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10025CEF8(319, (unint64_t *)&qword_100589F20, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F)
    {
      sub_10025CEF8(319, (unint64_t *)&qword_100584C60, (void (*)(uint64_t))&type metadata accessor for UUID);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_10025CEF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10025CF4C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v3 == 2)
      {
        int v4 = *(unsigned __int16 *)(a1 + 1);
        if (!*(_WORD *)(a1 + 1)) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 8)) - 8;
        return (v5 + 1);
      }
      int v4 = a1[1];
      if (a1[1]) {
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v5 = ((v6 + 2147483646) & 0x7FFFFFFF) - 6;
  }
  else {
    int v5 = -7;
  }
  if (v5 < 0) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10025CFF0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025D0BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void type metadata accessor for CallRecordingStateMachine()
{
}

unsigned char *sub_10025D0F0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025D1BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for StopRecordingReason()
{
}

unint64_t sub_10025D1F4()
{
  unint64_t result = qword_100586498;
  if (!qword_100586498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586498);
  }
  return result;
}

void sub_10025D240()
{
  sub_10025E6FC();
  sub_10025E674();
  if (*v0 == 2)
  {
    sub_10025B620(3);
  }
  else
  {
    sub_10025E6B4();
    if (v1)
    {
      swift_endAccess();
      return;
    }
  }
  swift_endAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10025E6CC();
    unsigned int v4 = (void *)v3;
    sub_10025E6E4(v3, "setRecordingSession:");
  }
}

void sub_10025D2EC()
{
  sub_10025E6FC();
  sub_10025E674();
  if (*v0 == 3)
  {
    sub_10025B620(4);
  }
  else
  {
    sub_10025E6B4();
    if (v1)
    {
      swift_endAccess();
      return;
    }
  }
  swift_endAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10025E6CC();
    unsigned int v4 = (void *)v3;
    sub_10025E6E4(v3, "setRecordingSession:");
  }
}

void sub_10025D398()
{
  sub_10025E6FC();
  sub_10025E674();
  if ((*v0 - 8) <= 0xF9u && (*v0 & 1) == 0)
  {
    sub_10025B620(1);
  }
  else
  {
    sub_10025E6B4();
    if (v1)
    {
      swift_endAccess();
      return;
    }
  }
  swift_endAccess();
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CSDCallRecordingSession_recurringDisclosureCount);
  BOOL v6 = __CFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + OBJC_IVAR___CSDCallRecordingSession_recurringDisclosureCount) = v7;
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10025E6CC();
      uint64_t v9 = (void *)v8;
      sub_10025E6E4(v8, "setRecordingSession:");
    }
  }
}

void sub_10025D46C()
{
  sub_10025E6FC();
  sub_10025E674();
  int v3 = *v0;
  if ((v3 - 2) < 6 || (v3 & 1) == 0)
  {
    sub_10025E6B4();
    if (v1)
    {
      swift_endAccess();
      return;
    }
  }
  else
  {
    sub_10025B620(0);
  }
  swift_endAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10025E6CC();
    BOOL v6 = (void *)v5;
    sub_10025E6E4(v5, "setRecordingSession:");
  }
}

void sub_10025D520()
{
  sub_10025E6FC();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001F081C(&qword_100584B40);
  uint64_t v5 = sub_100202384(v4);
  __chkstk_darwin(v5);
  sub_1001F2514();
  uint64_t v8 = (void *)(v7 - v6);
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_1001F2514();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for UUID();
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v3, v14);
  sub_1001F0530(v13, 0, 1, v14);
  uint64_t v16 = v1 + OBJC_IVAR___CSDCallRecordingSession_currentMessageUUID;
  sub_1002024E8();
  sub_10025E1D8(v13, v16, (uint64_t *)&unk_100585580);
  swift_endAccess();
  uint64_t v17 = (unsigned char *)(v1 + OBJC_IVAR___CSDCallRecordingSession_stateMachine);
  sub_10025E698();
  if (*v17 == 4)
  {
    sub_10025B620(0);
  }
  else
  {
    sub_10025E6B4();
    if (v0)
    {
      swift_endAccess();
      return;
    }
  }
  swift_endAccess();
  static Date.now.getter();
  uint64_t v18 = type metadata accessor for Date();
  sub_1001F0530((uint64_t)v8, 0, 1, v18);
  uint64_t v19 = v1 + OBJC_IVAR___CSDCallRecordingSession_dateStartedRecording;
  sub_10025E698();
  sub_10025E1D8((uint64_t)v8, v19, &qword_100584B40);
  swift_endAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10025E6CC();
    char v21 = (void *)v20;
    sub_10025E6E4(v20, "setRecordingSession:");
  }
}

void sub_10025D734()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v5 = sub_100202384(v4);
  __chkstk_darwin(v5);
  sub_100210660();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = v1 + OBJC_IVAR___CSDCallRecordingSession_currentMessageUUID;
  sub_1002022F8();
  sub_10025E234(v16, (uint64_t)v8, (uint64_t *)&unk_100585580);
  if (sub_1001F758C((uint64_t)v8, 1, v9) == 1)
  {
    sub_1002392A8((uint64_t)v8, (uint64_t *)&unk_100585580);
    uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15, v8, v9);
    uint64_t v18 = (uint64_t *)(v1 + OBJC_IVAR___CSDCallRecordingSession_messageUUIDs);
    swift_beginAccess();
    sub_10035EF70();
    uint64_t v19 = *(void *)(*v18 + 16);
    sub_100398CB8(v19);
    uint64_t v20 = *v18;
    *(void *)(v20 + 16) = v19 + 1;
    uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
    v17(v20+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v19, v15, v9);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
  }
  v17(v0, v3, v9);
  sub_1001F0530(v0, 0, 1, v9);
  swift_beginAccess();
  sub_10025E1D8(v0, v16, (uint64_t *)&unk_100585580);
  swift_endAccess();
  sub_1001FCC08();
}

char *sub_10025D978(char a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = sub_1001F081C(&qword_100584B40);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  sub_100235BE8();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594C58);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  uint64_t v11 = "eIdentifier";
  uint64_t v30 = v3;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    LOBYTE(v33) = a1;
    uint64_t v13 = String.init<A>(reflecting:)();
    uint64_t v11 = (char *)v14;
    uint64_t v33 = sub_1002344D8(v13, v14, v32);
    uint64_t v4 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Asked to stop recording session with reason %s", v12, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }

  if (*(unsigned char *)(v5 + OBJC_IVAR___CSDCallRecordingSession_stoppedReason) == 3) {
    *(unsigned char *)(v5 + OBJC_IVAR___CSDCallRecordingSession_stoppedReason) = a1;
  }
  unsigned __int8 v15 = sub_10025DD90();
  sub_10025E698();
  if (v15) {
    uint64_t v16 = (char *)sub_10025BA34();
  }
  else {
    uint64_t v16 = (char *)sub_10025BC70();
  }
  if (v4)
  {
    swift_endAccess();
  }
  else
  {
    uint64_t v11 = v16;
    swift_endAccess();
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      v32[0] = v20;
      uint64_t v33 = (uint64_t)v11;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_1005864A0);
      uint64_t v21 = String.init<A>(reflecting:)();
      uint64_t v33 = sub_1002344D8(v21, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Stop recording action %s", v19, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v24 = (void *)Strong;
      sub_10025C67C();
      unsigned int v26 = v25;
      [v24 setRecordingSession:v25];
    }
    static Date.now.getter();
    uint64_t v27 = type metadata accessor for Date();
    sub_1001F0530(v30, 0, 1, v27);
    uint64_t v28 = v5 + OBJC_IVAR___CSDCallRecordingSession_dateEndedRecording;
    sub_1002024E8();
    sub_10025E1D8(v30, v28, &qword_100584B40);
    swift_endAccess();
  }
  return v11;
}

id sub_10025DD90()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v2 = Strong;
  if (*(unsigned char *)(v0 + OBJC_IVAR___CSDCallRecordingSession_stoppedReason) == 2
    || [Strong status] != 1)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = [v2 isEndpointOnCurrentDevice];
  }

  return v3;
}

uint64_t sub_10025DE1C()
{
  unsigned __int8 v1 = sub_10025DD90();
  sub_1002024E8();
  uint64_t v2 = sub_10025BEB8(v1 & 1);
  swift_endAccess();
  if (!v0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v4 = (void *)Strong;
      sub_10025C67C();
      uint64_t v6 = v5;
      [v4 setRecordingSession:v5];
    }
  }
  return v2;
}

void sub_10025DEE4()
{
  unsigned __int8 v1 = sub_10025DD90();
  sub_1002024E8();
  sub_10025BFFC(v1 & 1);
  swift_endAccess();
  if (!v0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v3 = (void *)Strong;
      sub_10025C67C();
      uint64_t v5 = v4;
      [v3 setRecordingSession:v4];
    }
  }
}

unint64_t sub_10025DF9C()
{
  unint64_t result = qword_10058A470;
  if (!qword_10058A470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058A470);
  }
  return result;
}

id sub_10025DFE8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v12.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = type metadata accessor for Date();
  Class isa = 0;
  if (sub_1001F758C(a6, 1, v15) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a6, v15);
  }
  if (sub_1001F758C(a7, 1, v15) == 1)
  {
    Class v17 = 0;
  }
  else
  {
    Class v17 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a7, v15);
  }
  LOBYTE(v22) = a8 & 1;
  id v18 = [v25 initWithUUID:v12.super.isa state:a2 callUUID:v13 requestUUID:v14.super.isa recordingStartedDate:isa recordingEndedDate:v17 isRedisclosing:v22];

  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(a5, v19);
  v20(a1, v19);
  return v18;
}

uint64_t sub_10025E1D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t sub_10025E234(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for ParticipantUpdateSanitizerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10025E318(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025E3E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for StopRecordingAction()
{
}

void type metadata accessor for RecordingStateTransitionError()
{
}

uint64_t sub_10025E424(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9)
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 7;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10025E4D4);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 5;
  if (v8 <= 5) {
    return 0;
  }
  return result;
}

unsigned char *sub_10025E4E8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10025E5BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_10025E5E4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_10025E600(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

void type metadata accessor for CallRecordingSessionState()
{
}

unint64_t sub_10025E628()
{
  unint64_t result = qword_1005864A8;
  if (!qword_1005864A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005864A8);
  }
  return result;
}

uint64_t sub_10025E674()
{
  return swift_beginAccess();
}

uint64_t sub_10025E698()
{
  return swift_beginAccess();
}

uint64_t sub_10025E6B4()
{
  return sub_10025B82C();
}

void sub_10025E6CC()
{
  sub_10025C67C();
}

id sub_10025E6E4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_10025E708()
{
  return v0;
}

uint64_t sub_10025E730()
{
  return type metadata accessor for UUID();
}

uint64_t sub_10025E750@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v34 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = *(void *)(a1 + 48) + 56 * i;
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 24);
    uint64_t v30 = *(void *)(v14 + 32);
    uint64_t v31 = *(void *)(v14 + 16);
    uint64_t v18 = *(unsigned __int8 *)(v14 + 40);
    uint64_t v19 = *(void **)(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v20 = v19;
    id v21 = [a2 uniqueIdentifier];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v16 == v22 && v15 == v24)
    {

      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_29:
      *a3 = v16;
      a3[1] = v15;
      a3[2] = v31;
      a3[3] = v17;
      a3[4] = v30;
      a3[5] = v18;
      a3[6] = v20;
      return result;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26)
    {

      uint64_t result = swift_release();
      goto LABEL_29;
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v7 = v34;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v10 >= v29) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v28 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v29) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v28 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v29) {
          goto LABEL_30;
        }
        unint64_t v11 = *(void *)(v28 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v7 + 4;
          if (v7 + 4 >= v29) {
            goto LABEL_30;
          }
          unint64_t v11 = *(void *)(v28 + 8 * v12);
          if (!v11)
          {
            uint64_t v13 = v7 + 5;
            if (v7 + 5 >= v29)
            {
LABEL_30:

              uint64_t result = swift_release();
              a3[6] = 0;
              *((_OWORD *)a3 + 1) = 0u;
              *((_OWORD *)a3 + 2) = 0u;
              *(_OWORD *)a3 = 0u;
              return result;
            }
            unint64_t v11 = *(void *)(v28 + 8 * v13);
            int64_t v12 = v7 + 5;
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    int64_t v34 = v12;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v29) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v28 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_10025EA0C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 deviceWithUniqueID:v1];

  if (!v2) {
    return 0;
  }
  id v3 = [self destinationWithDevice:v2];

  return v3;
}

id sub_10025EA98()
{
  return sub_10025EA0C();
}

uint64_t sub_10025EABC()
{
  return swift_initClassMetadata2();
}

void sub_10025EB60()
{
  sub_1001FCC38();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  id v3 = *(void **)(v0 + qword_1005864E0);
  *NSString v1 = v3;
  sub_100235D68();
  v4();
  id v5 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_10020241C();
  v7(v6);
  if (v3)
  {
    uint64_t v8 = *(void *)(v0 + qword_100586508);
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9)
    {
LABEL_10:
      sub_1001FCC08();
      return;
    }
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v11 = sub_100261A20(v8);
    char v13 = v12 & 1;
    uint64_t v24 = v8 + 56;
    uint64_t v23 = v8;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(v8 + 32))
    {
      if (((*(void *)(v24 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      if (*(_DWORD *)(v8 + 36) != v10) {
        goto LABEL_13;
      }
      uint64_t v14 = *(void *)(v8 + 48) + 56 * v11;
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = *(unsigned __int8 *)(v14 + 40);
      uint64_t v17 = *(void **)(v14 + 48);
      int v26 = v10;
      char v25 = v13;
      id v18 = objc_allocWithZone((Class)TUMutableRoute);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v19 = v17;
      id v20 = sub_1002618AC();
      [v20 setDeviceType:v15];
      [v20 setSupportsRelay:1];
      [v20 setCurrentlyPicked:v16];
      objc_msgSend(v20, "setGuest:", objc_msgSend(v19, "isGuest"));
      [v20 copy];
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
      sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
      swift_dynamicCast();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v8 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v21 = sub_100261938(v11, v26, v25 & 1, v23);
      int64_t v11 = v21;
      char v13 = v22 & 1;
      if (!--v9)
      {
        sub_10023561C(v21, v10, v13);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10025EE70(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + qword_1005864B0);
  uint64_t v4 = *(void *)(v2 + qword_1005864B0);
  *id v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

uint64_t sub_10025EE90(uint64_t a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100252284(v3, a1);
  LOBYTE(a1) = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v6 = *(void (**)(uint64_t))(v1 + qword_1005864B0);
    if (v6)
    {
      uint64_t v7 = swift_retain();
      v6(v7);
      return sub_100208490((uint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_10025EF34(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_100586508);
  *(void *)(v1 + qword_100586508) = a1;
  sub_10025EE90(v2);

  return swift_bridgeObjectRelease();
}

void sub_10025EF7C()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v2);
  uint64_t v13 = sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1002024D0();
  id v4 = objc_msgSend(self, "sharedInstance", v13);
  id v5 = [v4 queue];

  uint64_t v6 = sub_1001FCCB8();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
  *(void *)(v6 + 64) = *(void *)(v1 + 48);
  v14[4] = sub_100261B74;
  v14[5] = v6;
  v14[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  long long v14[2] = sub_1002C2C88;
  v14[3] = &unk_10050F0E0;
  uint64_t v8 = _Block_copy(v14);
  sub_100253A20(v1);
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_100261BE0();
  sub_100261C0C();
  _Block_release(v8);

  uint64_t v9 = sub_10021ECA8();
  v10(v9);
  uint64_t v11 = sub_10021EBF4();
  v12(v11);
  swift_release();
  sub_1001FCC08();
}

void sub_10025F178(uint64_t a1)
{
  id v2 = [self sharedInstance];
  [v2 pushHostedCallsToDestination:*(void *)(a1 + 48)];
}

void sub_10025F1E8()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v0);
  uint64_t v9 = sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_1002024D0();
  id v2 = objc_msgSend(self, "sharedInstance", v9);
  id v3 = [v2 queue];

  void v10[4] = sub_10025F3AC;
  v10[5] = 0;
  v10[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v10[2] = sub_1002C2C88;
  v10[3] = &unk_10050F090;
  id v4 = _Block_copy(v10);
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_100261BE0();
  sub_100261C0C();
  _Block_release(v4);

  uint64_t v5 = sub_10021ECA8();
  v6(v5);
  uint64_t v7 = sub_10021EBF4();
  v8(v7);
  sub_1001FCC08();
}

void sub_10025F3AC()
{
  id v0 = [self sharedInstance];
  [v0 pullRelayingCallsFromClient];
}

id sub_10025F40C()
{
  return [self supportsPrimaryCalling];
}

BOOL sub_10025F438()
{
  sub_1001F6204(0, &qword_1005858C8);
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v1 = [v0 service];

  id v2 = [v1 iCloudAccount];
  if (v2) {

  }
  return v2 != 0;
}

id sub_10025F4D4()
{
  sub_1001F6204(0, &qword_1005858C8);
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 deviceWithUniqueID:v1];

  return v2;
}

void sub_10025F570()
{
  sub_1001FCC38();
  id v2 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x58);
  uint64_t v150 = *(void *)((swift_isaMask & *v0) + 0x50);
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  sub_1001F6398();
  uint64_t v151 = v5;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v137 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  id v143 = (char *)&v126 - v10;
  uint64_t v134 = v11;
  __chkstk_darwin(v9);
  uint64_t v148 = (char *)&v126 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100235BE8();
  uint64_t v17 = *(void **)((char *)v2 + qword_1005864E0);
  *NSString v1 = v17;
  sub_100235D68();
  v18();
  id v19 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v1, v13);
  if ((v17 & 1) == 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v149 = v3;
  if (qword_1005839A0 != -1) {
LABEL_91:
  }
    swift_once();
  uint64_t v142 = sub_1001F081C(&qword_100584B20);
  uint64_t v20 = sub_1001FCCB8();
  long long v140 = xmmword_10048F550;
  *(_OWORD *)(v20 + 16) = xmmword_10048F550;
  v169[0] = sub_100337D84(v20);
  type metadata accessor for Array();
  uint64_t v21 = sub_1002747A0((uint64_t)v169);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v141 = sub_1001F3B08();
  *(void *)(v20 + 64) = v141;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  v154 = &_swiftEmptySetSingleton;
  uint64_t v24 = *(uint64_t (**)(uint64_t))((char *)v2 + qword_1005864C8);
  uint64_t v25 = swift_retain();
  unsigned __int8 v26 = v24(v25);
  swift_release();
  uint64_t v27 = *(uint64_t (**)(uint64_t))((char *)v2 + qword_1005864D0);
  uint64_t v28 = swift_retain();
  char v29 = v27(v28);
  uint64_t v30 = swift_release();
  char v31 = *((unsigned char *)v2 + qword_100586520) ^ 1;
  char v32 = v26 ^ 1;
  if ((v31 & 1) != 0 || ((v26 ^ 1) & 1) != 0 || (v29 & 1) == 0)
  {
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_10048FB00;
    LOBYTE(v169[0]) = v31 & 1;
    uint64_t v39 = String.init<A>(reflecting:)();
    AssociatedTypeWitness = &type metadata for String;
    unint64_t v40 = v141;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = v40;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    LOBYTE(v169[0]) = v32 & 1;
    uint64_t v42 = String.init<A>(reflecting:)();
    *(void *)(v38 + 96) = &type metadata for String;
    *(void *)(v38 + 104) = v40;
    *(void *)(v38 + 72) = v42;
    *(void *)(v38 + 80) = v43;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_9;
  }
  uint64_t v33 = sub_100337D84(v30);
  uint64_t v34 = Array.startIndex.getter();
  v156[0] = v34;
  uint64_t v35 = Array.endIndex.getter();
  uint64_t v36 = (uint64_t)v143;
  uint64_t v37 = v148;
  if (v34 != v35)
  {
    id v139 = (uint64_t (**)(uint64_t))((char *)v2 + qword_1005864D8);
    uint64_t v136 = (uint64_t)v2 + qword_1005864F8;
    unint64_t v152 = (void (**)(char *, unint64_t, void *))(v151 + 16);
    v146 = (void (**)(uint64_t, char *, void *))(v151 + 32);
    uint64_t v147 = qword_100586518;
    uint64_t v144 = (void (**)(uint64_t, void *))(v151 + 8);
    uint64_t v145 = v33;
    uint64_t v133 = qword_100586510;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        unint64_t v58 = *(void (**)(char *, unint64_t, void *))(v151 + 16);
        v58(v37, v33+ ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80))+ *(void *)(v151 + 72) * v34, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v121 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v134 != 8) {
          goto LABEL_93;
        }
        v166[0] = v121;
        unint64_t v58 = *v152;
        (*v152)(v37, (unint64_t)v166, AssociatedTypeWitness);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRetain();
      Array.formIndex(after:)(v156);
      swift_bridgeObjectRelease();
      (*v146)(v36, v37, AssociatedTypeWitness);
      int v59 = *((unsigned __int8 *)v2 + v147);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      if (v59 != 1) {
        break;
      }
      uint64_t v61 = sub_100261C30();
      v62(v61);
      if (v63)
      {
        unint64_t v64 = *v139;
        swift_retain();
        uint64_t v65 = sub_100261C3C();
        uint64_t v66 = v64(v65);
        uint64_t v37 = v148;
        uint64_t v67 = (void *)v66;
        swift_bridgeObjectRelease();
        swift_release();
        if (v67)
        {
          unsigned __int8 v68 = [v67 canReceiveRelayedGFTCalls];

          if (v68) {
            break;
          }
        }
      }
      uint64_t v82 = (void *)sub_1001FCCB8();
      uint64_t v83 = sub_100261C50((uint64_t)v82);
      unint64_t v84 = v141;
      v82[7] = &type metadata for String;
      v82[8] = v84;
      v82[4] = v83;
      v82[5] = v85;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      sub_1001F7664();
      v86();
LABEL_57:
      uint64_t v33 = v145;
LABEL_58:
      uint64_t v34 = v156[0];
      if (v34 == Array.endIndex.getter()) {
        goto LABEL_9;
      }
    }
    uint64_t v69 = sub_100261C30();
    uint64_t v138 = v70;
    v70(v69);
    if (!v71) {
      goto LABEL_46;
    }
    char v72 = v2;
    uint64_t v73 = *v139;
    swift_retain();
    uint64_t v74 = sub_100261C3C();
    uint64_t v75 = v73(v74);
    id v2 = v72;
    uint64_t v76 = (void *)v75;
    swift_bridgeObjectRelease();
    swift_release();
    if (!v76 || (unsigned __int8 v77 = [v76 canReceiveRelayedCalls], v76, (v77 & 1) != 0))
    {
LABEL_46:
      sub_100261C30();
      uint64_t v36 = (uint64_t)v143;
      if (sub_10020E9A4())
      {
        uint64_t v78 = sub_1001FCCB8();
        *(_OWORD *)(v78 + 16) = v140;
        uint64_t v79 = sub_1002747A0(v36);
        unint64_t v80 = v141;
        *(void *)(v78 + 56) = &type metadata for String;
        *(void *)(v78 + 64) = v80;
        *(void *)(v78 + 32) = v79;
        *(void *)(v78 + 40) = v81;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
LABEL_54:
        uint64_t v91 = v144;
        goto LABEL_55;
      }
      sub_10020ED28(v136, (uint64_t)v166);
      id v87 = sub_100261388(v166, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness);
      sub_1002018DC((uint64_t)v166);
      if (!v87) {
        goto LABEL_54;
      }
      v58(v137, v36, AssociatedTypeWitness);
      id v88 = v87;
      sub_10020EA48(v88, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v155);
      sub_10020EF54((uint64_t)v155, (uint64_t)&v158);
      uint64_t v89 = v36;
      uint64_t v90 = v159;
      if (!v159)
      {
        static os_log_type_t.error.getter();
        id v92 = (void *)sub_1001FCCB8();
        uint64_t v93 = sub_100261C50((uint64_t)v92);
        unint64_t v94 = v141;
        v92[7] = &type metadata for String;
        v92[8] = v94;
        v92[4] = v93;
        v92[5] = v95;
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        sub_1001F7664();
        v96();
        uint64_t v36 = v89;
        goto LABEL_56;
      }
      uint64_t v135 = v161;
      char v165 = v163;
      if (v162 != 13)
      {
        uint64_t v130 = v160;
        uint64_t v131 = v162;
        uint64_t v129 = v158;
        id v132 = v88;
        id v97 = v164;
        uint64_t v98 = *(void **)((char *)v2 + v133);
        uint64_t v33 = v145;
        if (!v98)
        {
          id v113 = v164;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_77;
        }
        id v128 = v164;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v99 = [v98 remoteDevice];
        if (!v99)
        {
LABEL_77:
          char v114 = v165;
          char v115 = *(void **)((char *)v2 + v133);
          if (v115 && (id v116 = [v115 remoteDestination]) != 0)
          {
            uint64_t v117 = v116;
            sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
            char v118 = static NSObject.== infix(_:_:)();

            v114 |= v118;
          }
          else
          {
          }
          goto LABEL_84;
        }
        id v100 = v99;
        uint64_t v101 = sub_100261C30();
        uint64_t v102 = v138(v101);
        uint64_t v104 = v103;
        id v105 = [v100 uniqueIDOverride];
        uint64_t v106 = (uint64_t (*)(uint64_t))v100;
        if (v105)
        {
          uint64_t v107 = v105;
          uint64_t v138 = (uint64_t (*)(uint64_t))v100;
          uint64_t v127 = v102;
          uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v110 = v109;

          if (v104)
          {
            uint64_t v106 = v138;
            if (v110)
            {
              if (v127 != v108 || v104 != v110)
              {
                char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                if (v112)
                {
LABEL_83:

                  char v114 = 1;
LABEL_84:
                  v169[0] = v129;
                  v169[1] = v90;
                  v169[2] = v130;
                  v169[3] = v135;
                  v169[4] = v131;
                  char v170 = v114 & 1;
                  id v171 = v97;
                  sub_1002DFDF8((uint64_t)v166, (uint64_t)v169);

                  uint64_t v119 = v168;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v36 = (uint64_t)v143;
                  sub_1001F7664();
                  v120();
                  uint64_t v37 = v148;
                  goto LABEL_58;
                }
                goto LABEL_77;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v106 = v138;
LABEL_82:

              goto LABEL_83;
            }
LABEL_74:
          }
          else
          {

            if (!v110) {
              goto LABEL_83;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_77;
        }
        if (!v104) {
          goto LABEL_82;
        }
        goto LABEL_74;
      }

      sub_100261AA0((uint64_t)v155);
    }
    uint64_t v36 = (uint64_t)v143;
    uint64_t v91 = v144;
LABEL_55:
    (*v91)(v36, AssociatedTypeWitness);
LABEL_56:
    uint64_t v37 = v148;
    goto LABEL_57;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  unint64_t v44 = *(void **)((char *)v2 + qword_100586510);
  if (!v44 || (id v45 = [v44 remoteDevice]) == 0)
  {
LABEL_88:
    sub_10025EF34((uint64_t)v154);
    sub_1001FCC08();
    return;
  }
  int64_t v46 = 0;
  uint64_t v47 = 1 << v154[32];
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  uint64_t v49 = v154 + 56;
  unint64_t v50 = v48 & *((void *)v154 + 7);
  int64_t v51 = (unint64_t)(v47 + 63) >> 6;
  while (v50)
  {
    unint64_t v52 = __clz(__rbit64(v50));
    v50 &= v50 - 1;
    unint64_t v53 = v52 | (v46 << 6);
LABEL_34:
    if (*(unsigned char *)(*((void *)v154 + 6) + 56 * v53 + 40) == 1)
    {

      goto LABEL_88;
    }
  }
  int64_t v54 = v46 + 1;
  if (__OFADD__(v46, 1))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v54 >= v51) {
    goto LABEL_87;
  }
  unint64_t v55 = *(void *)&v49[8 * v54];
  ++v46;
  if (v55) {
    goto LABEL_33;
  }
  int64_t v46 = v54 + 1;
  if (v54 + 1 >= v51) {
    goto LABEL_87;
  }
  unint64_t v55 = *(void *)&v49[8 * v46];
  if (v55) {
    goto LABEL_33;
  }
  int64_t v46 = v54 + 2;
  if (v54 + 2 >= v51) {
    goto LABEL_87;
  }
  unint64_t v55 = *(void *)&v49[8 * v46];
  if (v55) {
    goto LABEL_33;
  }
  int64_t v46 = v54 + 3;
  if (v54 + 3 >= v51) {
    goto LABEL_87;
  }
  unint64_t v55 = *(void *)&v49[8 * v46];
  if (v55) {
    goto LABEL_33;
  }
  int64_t v46 = v54 + 4;
  if (v54 + 4 >= v51) {
    goto LABEL_87;
  }
  unint64_t v55 = *(void *)&v49[8 * v46];
  if (v55)
  {
LABEL_33:
    unint64_t v50 = (v55 - 1) & v55;
    unint64_t v53 = __clz(__rbit64(v55)) + (v46 << 6);
    goto LABEL_34;
  }
  int64_t v56 = v54 + 5;
  if (v56 >= v51)
  {
LABEL_87:
    id v122 = v45;
    sub_10020E644(v122, (uint64_t)v156);
    uint64_t v123 = v157;
    v166[0] = v156[0];
    v166[1] = v156[1];
    v166[2] = v156[2];
    v166[3] = v156[3];
    v166[4] = v156[4];
    char v167 = 1;
    v168 = v157;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v124 = v123;
    sub_1002DFDF8((uint64_t)v153, (uint64_t)v166);

    uint64_t v125 = (void *)v153[6];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  unint64_t v55 = *(void *)&v49[8 * v56];
  if (v55)
  {
    int64_t v46 = v56;
    goto LABEL_33;
  }
  while (1)
  {
    int64_t v46 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_87;
    }
    unint64_t v55 = *(void *)&v49[8 * v46];
    ++v56;
    if (v55) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_93:
  __break(1u);
}

uint64_t sub_100260320(uint64_t result)
{
  if (result)
  {
    swift_errorRetain();
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v1 = sub_1001FCCB8();
    *(_OWORD *)(v1 + 16) = xmmword_10048F550;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v2 = String.init<A>(reflecting:)();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_1001F3B08();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

void sub_100260440()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100202310();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1002024D0();
  id v9 = [v3 relayClientTransport];
  uint64_t v19 = v5;
  if (v3)
  {
    id v10 = v3;
    if ([v10 isHostedOnCurrentDevice]
      && [v10 hasRelaySupport:2])
    {
      id v11 = [v10 provider];
      unsigned __int8 v12 = [v11 isSystemProvider];
    }
    else
    {
      unsigned __int8 v12 = 0;
    }
    unsigned __int8 v13 = [v10 needsConversationOrVideoRelaySupport];
  }
  else
  {
    unsigned __int8 v13 = 0;
    unsigned __int8 v12 = 0;
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v0;
  *(unsigned char *)(v14 + 24) = v12;
  *(unsigned char *)(v14 + 25) = v13;
  *(void *)(v14 + 32) = v9;
  v20[4] = sub_100261B18;
  void v20[5] = v14;
  v20[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v20[2] = sub_1002C2C88;
  v20[3] = &unk_10050F068;
  uint64_t v15 = _Block_copy(v20);
  id v16 = v0;
  id v17 = v9;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  sub_1001F7664();
  v18();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v19);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100260714()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14[0] - 8);
  __chkstk_darwin(v14[0]);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self sharedInstance];
  id v9 = [v8 queue];

  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  aBlock[4] = sub_100261BB4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050F130;
  id v11 = _Block_copy(aBlock);
  id v12 = v0;
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v14[0]);
  return swift_release();
}

uint64_t sub_1002609D8()
{
  return sub_100260714();
}

void sub_1002609E0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1002609D8();
}

void sub_100260A54()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235BE8();
  id v8 = *(void **)(v0 + qword_1005864E0);
  *uint64_t v1 = v8;
  sub_100235D68();
  v9();
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v1, v4);
  if (v8)
  {
    if (qword_1005839A0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = sub_1001FCCB8();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  uint64_t v12 = sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
  *(void *)(v11 + 56) = v12;
  unint64_t v13 = sub_1002617F4();
  *(void *)(v11 + 64) = v13;
  *(void *)(v11 + 32) = v3;
  id v14 = v3;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = qword_100586508;
  id v16 = v14;
  uint64_t v17 = swift_bridgeObjectRetain();
  sub_10025E750(v17, v16, &v29);
  swift_bridgeObjectRelease();
  uint64_t v18 = v30;
  if (v30)
  {
    uint64_t v20 = v34;
    uint64_t v19 = v35;
    uint64_t v22 = v32;
    uint64_t v21 = v33;
    uint64_t v23 = v31;
    uint64_t v24 = v29;
    v36[0] = v29;
    v36[1] = v30;
    v36[2] = v31;
    v36[3] = v32;
    v36[4] = v33;
    char v37 = v34 & 1;
    uint64_t v38 = v35;
    uint64_t v25 = *(void (**)(void *))(v0 + qword_1005864B8);
    swift_retain();
    v25(v36);
    swift_release();
    sub_100261854(v24, v18, v23, v22, v21, v20, v19);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_10048FB00;
    *(void *)(v26 + 56) = v12;
    *(void *)(v26 + 64) = v13;
    *(void *)(v26 + 32) = v16;
    uint64_t v27 = *(void *)(v0 + v15);
    *(void *)(v26 + 96) = sub_1001F081C(&qword_1005865B8);
    *(void *)(v26 + 104) = sub_1001FCB74((unint64_t *)&unk_1005865C0, &qword_1005865B8);
    *(void *)(v26 + 72) = v27;
    id v28 = v16;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  sub_1001FCC08();
}

void sub_100260D60()
{
  sub_1001FCC38();
  uint64_t v39 = v1;
  uint64_t v37 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v44 = v4;
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  sub_1001FCCD0();
  uint64_t v42 = v5;
  uint64_t v43 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v41 = v6;
  __chkstk_darwin(v7);
  sub_1001FCCD0();
  uint64_t v40 = v8;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  id v14 = (void *)((char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = type metadata accessor for DispatchWallTime();
  sub_1001F6398();
  uint64_t v16 = v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v36 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  id v28 = (void *)((char *)v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = *(void **)(v0 + qword_1005864E0);
  *id v28 = v29;
  sub_100235D68();
  v30();
  v36[1] = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v23);
  if (v29)
  {
    static DispatchWallTime.now()();
    *id v14 = TUTransferTimeout();
    sub_100235D68();
    v31();
    + infix(_:_:)();
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v14, v9);
    v36[0] = *(void *)(v16 + 8);
    uint64_t v32 = v38;
    ((void (*)(char *, uint64_t))v36[0])(v20, v38);
    v47[4] = v37;
    uint64_t v47[5] = v39;
    v47[0] = _NSConcreteStackBlock;
    sub_10021EAFC(COERCE_DOUBLE(1107296256));
    v47[2] = sub_1002C2C88;
    v47[3] = &unk_10050F018;
    uint64_t v33 = _Block_copy(v47);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    int64_t v46 = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)();
    _Block_release(v33);
    sub_1001F7664();
    v34();
    sub_1001F7664();
    v35();
    ((void (*)(char *, uint64_t))v36[0])(v22, v32);
    swift_release();
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100261170()
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  uint64_t v3 = *(void **)(v0 + qword_1005864E0);
  *uint64_t v1 = v3;
  sub_100235D68();
  v4();
  id v5 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_10020241C();
  v7(v6);
  if ((v3 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_1005839A0 != -1) {
LABEL_5:
  }
    swift_once();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v8 = *(void (**)(uint64_t))(v0 + qword_1005864C0);
  uint64_t v9 = swift_retain();
  v8(v9);
  return swift_release();
}

void sub_1002612C0(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + qword_1005864E8), "callContainer"), "frontmostAudioOrVideoCall");
  swift_unknownObjectRelease();
  if (v1)
  {
    self;
    uint64_t v2 = swift_dynamicCastObjCClass();
    if (v2)
    {
      id v4 = (id)v2;
      id v3 = v1;
      uint64_t v2 = (uint64_t)v4;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v5 = (id)v2;
  sub_100260440();
}

id sub_100261388(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    sub_100204074(a1, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v8, v9, v10, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (v13)
  {
    if (v12)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001F6204(0, &qword_1005865E0);
      return sub_1002F9C2C();
    }
  }
  return (id)v12;
}

void sub_1002614B4(uint64_t a1, char a2, char a3, void *a4)
{
  *(unsigned char *)(a1 + qword_100586520) = a2;
  *(unsigned char *)(a1 + qword_100586518) = a3;
  uint64_t v6 = qword_100586510;
  uint64_t v7 = *(void **)(a1 + qword_100586510);
  if (v7)
  {
    if (a4)
    {
      sub_1001F6204(0, &qword_1005865E8);
      id v8 = a4;
      id v9 = v7;
      char v10 = static NSObject.== infix(_:_:)();

      if (v10) {
        goto LABEL_12;
      }
    }
  }
  else if (!a4)
  {
    goto LABEL_12;
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  if (a4)
  {
    sub_1001F6204(0, &qword_1005865E8);
    id v12 = a4;
    uint64_t v13 = String.init<A>(reflecting:)();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE300000000000000;
    uint64_t v13 = 7104878;
  }
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1001F3B08();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)(a1 + v6);
  *(void *)(a1 + v6) = a4;
  id v17 = a4;

LABEL_12:
  sub_10025F570();
}

void sub_100261684()
{
}

void sub_1002616B4()
{
}

void sub_1002616C4(uint64_t a1)
{
  sub_100208490(*(void *)(a1 + qword_1005864B0));
  sub_1001FCD14();
  sub_1001FCD14();
  sub_1001FCD14();
  sub_1001FCD14();
  sub_1001FCD14();

  swift_unknownObjectRelease();
  sub_1002018DC(a1 + qword_1005864F8);

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + qword_100586510);
}

uint64_t type metadata accessor for NearbyDeviceRouteProvider()
{
  return sub_1001F919C();
}

uint64_t sub_1002617DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002617EC()
{
  return swift_release();
}

unint64_t sub_1002617F4()
{
  unint64_t result = qword_1005865B0;
  if (!qword_1005865B0)
  {
    sub_1001F6204(255, (unint64_t *)&qword_10058BE00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005865B0);
  }
  return result;
}

void sub_100261854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

id sub_1002618AC()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithUniqueIdentifier:v1 name:v2];

  return v3;
}

int64_t sub_100261938(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100261A20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100261AA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100261AD8()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100261B18()
{
  sub_1002614B4(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25), *(void **)(v0 + 32));
}

uint64_t sub_100261B2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100261B74()
{
  sub_10025F178(v0 + 16);
}

uint64_t sub_100261B7C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100261BB4()
{
  sub_1002612C0(*(void *)(v0 + 16));
}

uint64_t sub_100261BE0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100261C0C()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_100261C30()
{
  return v0;
}

uint64_t sub_100261C3C()
{
  return v0;
}

uint64_t sub_100261C50(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 112);
  return sub_1002747A0(v2);
}

BOOL sub_100261C70(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      Float.init(truncating:)();
      float v10 = v9;
      float v11 = sub_100261F94();

      BOOL v12 = v11 < v10;
      ++v5;
      if (v11 < v10 || v8 == v4) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  BOOL v12 = 0;
LABEL_17:

  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100261D80()
{
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_startRecordingTime;
  uint64_t v2 = type metadata accessor for Date();
  sub_1001F0530(v1, 1, 1, v2);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isProcessingGibberish) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_hasReceivedAudio) = 0;
  uint64_t v3 = (void *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_calleeHandle);
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_calleeLabelID);
  *uint64_t v4 = 0;
  v4[1] = 0;
  *(void *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_lastCaptions) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isStopping) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_voicemailTimeoutBlock) = 0;
  return v0;
}

uint64_t sub_100261E48()
{
  if (*(void *)(v0 + 72))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_voicemailTimeoutBlock))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  sub_1002392A8(v0 + 16, &qword_100586A40);

  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1002392A8(v0 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_startRecordingTime, &qword_100584B40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t sub_100261F3C()
{
  sub_100261E48();

  return swift_deallocClassInstance();
}

float sub_100261F94()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDAnsweringMachineController_serverBag);
  uint64_t v2 = qword_100583930;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  float v4 = *(float *)&dword_100586390;

  return v4;
}

uint64_t sub_10026200C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  id v5 = *(id *)(v2 + OBJC_IVAR___CSDAnsweringMachineController_serverBag);
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = *a2;

  return v6;
}

uint64_t sub_100262080()
{
  uint64_t v1 = OBJC_IVAR___CSDAnsweringMachineController_serverBag;
  uint64_t v2 = qword_100583948;
  id v3 = *(id *)(v0 + OBJC_IVAR___CSDAnsweringMachineController_serverBag);
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1005863A8;

  id v5 = *(void **)(v0 + v1);
  uint64_t v6 = qword_100583950;
  id v7 = v5;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1005863B0;

  uint64_t result = v4 + v8;
  if (__OFADD__(v4, v8)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10026217C()
{
  sub_10037DE3C();
  return v0 & 1;
}

uint64_t sub_1002621E0()
{
  return sub_10037E258();
}

double sub_10026220C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1001F6204(0, &qword_100586A48);
  id v9 = a3;
  id v10 = a1;
  swift_unknownObjectRetain();
  id v11 = sub_1002622AC(v10, a2, a3);
  if (v11)
  {
    *(void *)(a4 + 24) = v8;
    *(void *)(a4 + 32) = &off_10050F158;
    *(void *)a4 = v11;
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

id sub_1002622AC(void *a1, uint64_t a2, void *a3)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithConfiguration:a1 delegate:a2 delegateQueue:a3];

  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_100262318(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v11 = (void *)result;
    v17[1] = *(void *)(result + OBJC_IVAR___CSDAnsweringMachineController_queue);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = a1;
    aBlock[4] = sub_10026B5DC;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050F4A8;
    uint64_t v13 = v6;
    unint64_t v14 = _Block_copy(aBlock);
    id v15 = v11;
    id v16 = a1;
    static DispatchQoS.unspecified.getter();
    v17[2] = _swiftEmptyArrayStorage;
    sub_10026B014((unint64_t *)&qword_100584FF0);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v13);

    return swift_release();
  }
  return result;
}

void sub_1002625E0(char *a1, void *a2)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  if (Strong)
  {
    uint64_t v5 = swift_unknownObjectWeakLoadStrong();
    if (!v5
      || (uint64_t v6 = (void *)v5,
          sub_1001F6204(0, (unint64_t *)&qword_10058A480),
          id v7 = a2,
          char v8 = static NSObject.== infix(_:_:)(),
          v7,
          v7,
          v6,
          (v8 & 1) == 0))
    {
      if (qword_100583A10 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_1001F5F88(v9, (uint64_t)qword_100594C28);
      id v16 = a1;
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        uint64_t v17 = v13;
        type metadata accessor for AnsweringMachineState();
        swift_retain();
        uint64_t v14 = String.init<A>(reflecting:)();
        sub_1002344D8(v14, v15, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Ignoring second call because we are already screening: %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_17;
    }
  }
  if ([a2 status] == 1
    && [a2 isScreening]
    && [a2 isConnected]
    && [a2 isEndpointOnCurrentDevice])
  {
    sub_100262908(a2);
    return;
  }
  sub_1002635C4();
  if ([a2 status] == 6)
  {
    id v16 = (char *)objc_retain(*(id *)(*(void *)&a1[OBJC_IVAR___CSDAnsweringMachineController_greetingsDataSource]
                                    + OBJC_IVAR____TtC13callservicesd19GreetingsDataSource_speechAssetManager));
    sub_10027926C();
LABEL_17:
  }
}

void sub_100262908(void *a1)
{
  void (*v58)(long long *__return_ptr, NSObject *, uint64_t, id);
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  void v88[2];
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  unsigned char v101[40];
  long long v102;
  uint64_t v103;
  uint64_t v104[3];
  uint64_t v105;
  uint64_t v106;

  uint64_t v2 = v1;
  id v100 = a1;
  id v97 = type metadata accessor for Locale();
  id v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v95 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v98 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C(&qword_1005878F0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v10 = (char *)v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v88 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v88 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void *)((char *)v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  void *v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v99 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v21 = OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
  uint64_t v22 = *(void *)(v2 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState) + 16;
  swift_beginAccess();
  sub_10026B5E4(v22, (uint64_t)v104, &qword_100586A40);
  uint64_t v23 = v105;
  sub_1002392A8((uint64_t)v104, &qword_100586A40);
  if (v23)
  {
    if (qword_100583A10 == -1)
    {
LABEL_4:
      uint64_t v24 = type metadata accessor for Logger();
      sub_1001F5F88(v24, (uint64_t)qword_100594C28);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v25, v26))
      {
LABEL_16:

        return;
      }
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      id v28 = "We already have an answering machine";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
      swift_slowDealloc();
      goto LABEL_16;
    }
LABEL_42:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v29 = *(void *)(v2 + OBJC_IVAR___CSDAnsweringMachineController_greetingsDataSource);
  if ((sub_10037E38C() & 1) == 0)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_1001F5F88(v39, (uint64_t)qword_100594C28);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26)) {
      goto LABEL_16;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    id v28 = "We don't have an greeting, so we will not create the answeringMachine";
    goto LABEL_15;
  }
  id v30 = [objc_allocWithZone((Class)AVCAnsweringMachineConfiguration) init];
  [v30 setIsMessageCaptioningEnabled:1];
  uint64_t v91 = v30;
  [v30 setIsMessageRecordingEnabled:1];
  sub_10037E484();
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_1001F5F88(v31, (uint64_t)qword_100594C28);
  unint64_t v94 = v15;
  sub_10026B5E4((uint64_t)v15, (uint64_t)v13, &qword_1005878F0);
  uint64_t v93 = v32;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  id v92 = v21;
  uint64_t v90 = v29;
  if (v35)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    v104[0] = v89;
    *(_DWORD *)uint64_t v36 = 136315138;
    v88[1] = v36 + 4;
    uint64_t v37 = sub_1001FCDEC((uint64_t)v13);
    *(void *)&uint64_t v102 = sub_1002344D8(v37, v38, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002392A8((uint64_t)v13, &qword_1005878F0);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "greeting = %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002392A8((uint64_t)v13, &qword_1005878F0);
  }

  uint64_t v40 = (uint64_t)v94;
  sub_10026B5E4((uint64_t)v94, (uint64_t)v10, &qword_1005878F0);
  int v41 = sub_1001F758C((uint64_t)v10, 1, v4);
  uint64_t v42 = v91;
  if (v41 == 1)
  {
    sub_1002392A8((uint64_t)v10, &qword_1005878F0);
  }
  else
  {
    uint64_t v43 = v98;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v6, v10, v4);
    URL._bridgeToObjectiveC()(v44);
    int64_t v46 = v45;
    [v42 setAnnouncementAsset:v45];

    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v4);
  }
  id v47 = v100;
  id v48 = [v100 provider];
  unsigned int v49 = [v48 isTelephonyProvider];

  if (v49 && ([v47 isUsingBaseband] & 1) != 0)
  {
    unsigned __int8 v50 = 1;
  }
  else
  {
    id v51 = [v47 provider];
    unsigned __int8 v52 = [v51 isFaceTimeProvider];

    if (v52) {
      unsigned __int8 v50 = 2;
    }
    else {
      unsigned __int8 v50 = sub_100263E60([v47 callSubType]);
    }
  }
  [v42 setSource:v50];
  unint64_t v53 = v42;
  int64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    int64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int64_t v56 = 16777472;
    LOBYTE(v104[0]) = [v53 source];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Recording live voicemail via call type %hhu", v56, 5u);
    swift_slowDealloc();
  }
  else
  {

    int64_t v54 = v53;
  }
  uint64_t v57 = v92;

  unint64_t v58 = *(void (**)(long long *__return_ptr, NSObject *, uint64_t, id))(v2
                                                                               + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineCreationBlock);
  swift_retain();
  v58(&v102, v53, v2, v99);
  swift_release();
  if (v103)
  {
    sub_100233560(&v102, (uint64_t)v104);
    int v59 = *(void *)(v2 + v57);
    sub_10020ED28((uint64_t)v104, (uint64_t)&v102);
    sub_10026B62C((uint64_t)&v102, (uint64_t)v101, &qword_100586A40);
    swift_beginAccess();
    swift_retain();
    sub_10026B674((uint64_t)v101, v59 + 16, &qword_100586A40);
    swift_endAccess();
    swift_release();
    uint64_t v60 = *(void *)(v2 + v57);
    swift_unknownObjectWeakAssign();
    swift_retain_n();
    uint64_t v61 = sub_10037EBF0(v47);
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v66 = (void *)(v60 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_calleeHandle);
    *uint64_t v66 = v61;
    v66[1] = v67;
    swift_release();
    swift_bridgeObjectRelease();
    unsigned __int8 v68 = (void *)(v60 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_calleeLabelID);
    *unsigned __int8 v68 = v63;
    v68[1] = v65;
    swift_release();
    swift_bridgeObjectRelease();
    if (([v47 isRTT] & 1) != 0 || objc_msgSend(v47, "isTTY"))
    {
      type metadata accessor for AnsweringMachineRTTHelper();
      swift_initStaticObject();
      uint64_t v69 = v95;
      static Locale.current.getter();
      uint64_t v70 = Locale.identifier.getter();
      char v72 = v71;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v69, v97);
      uint64_t v73 = [v47 callUUID];
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;

      sub_100319200(v40, v70, v72, v74, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    unsigned __int8 v77 = v105;
    uint64_t v78 = v106;
    sub_100204074(v104, v105);
    objc_msgSend(v47, "setAnsweringMachineStreamToken:", (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v77, v78));
    uint64_t v79 = v105;
    unint64_t v80 = v106;
    sub_100204074(v104, v105);
    (*(void (**)(uint64_t, uint64_t))(v80 + 24))(v79, v80);
    uint64_t v81 = v47;
    uint64_t v82 = Logger.logObject.getter();
    uint64_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      unint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v84 = 134217984;
      *(void *)&uint64_t v102 = [v81 answeringMachineStreamToken];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v82, v83, "created answering machine token=%ld", v84, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      unint64_t v53 = v81;
    }

    sub_1002392A8(v40, &qword_1005878F0);
    sub_1002018DC((uint64_t)v104);
  }
  else
  {
    sub_1002392A8((uint64_t)&v102, &qword_100586A40);
    uint64_t v85 = Logger.logObject.getter();
    uint64_t v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v85, v86))
    {
      id v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "answering machine creation failed", v87, 2u);
      swift_slowDealloc();
    }

    sub_1002392A8(v40, &qword_1005878F0);
  }
}

uint64_t sub_1002635C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)v44 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (void *)((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = *(void **)((char *)v1 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  uint64_t v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_4;
  }
  v44[1] = v16;
  uint64_t v16 = (char *)OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
  uint64_t v18 = *(void *)((char *)v1 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState) + 16;
  swift_beginAccess();
  sub_10026B5E4(v18, (uint64_t)&aBlock, &qword_100586A40);
  if (!v52)
  {
    sub_1002392A8((uint64_t)&aBlock, &qword_100586A40);
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_1001F5F88(v27, (uint64_t)qword_100594C28);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "not destroying answering machine because we don't have one active", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AnsweringMachineState();
    uint64_t v31 = swift_allocObject();
    sub_100261D80();
    *(void *)&v16[(void)v1] = v31;
    return swift_release();
  }
  sub_100233560(&aBlock, (uint64_t)v55);
  if (qword_100583A10 != -1) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v19 = type metadata accessor for Logger();
  sub_1001F5F88(v19, (uint64_t)qword_100594C28);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "stopping answering machine", v22, 2u);
    swift_slowDealloc();
  }

  uint64_t v23 = *(void *)&v16[(void)v1];
  if (*(unsigned char *)(v23 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isStopping))
  {
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "we are already stopping, not calling stop again", v26, 2u);
      swift_slowDealloc();
    }

    return sub_1002018DC((uint64_t)v55);
  }
  *(unsigned char *)(v23 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isStopping) = 1;
  uint64_t v33 = v56;
  uint64_t v34 = v57;
  sub_100204074(v55, v56);
  (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
  uint64_t v35 = *(void *)&v16[(void)v1];
  *(void *)&long long aBlock = 0;
  sub_10026B014((unint64_t *)&unk_100586A00);
  swift_retain();
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v1;
  unint64_t v53 = sub_10026B6F4;
  uint64_t v54 = v36;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  id v51 = sub_1002C2C88;
  unsigned __int8 v52 = &unk_10050F4F8;
  _Block_copy(&aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v37 = v1;
  uint64_t v38 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  *(void *)(v35 + 72) = v38;
  swift_release();
  swift_release();
  static DispatchTime.now()();
  *uint64_t v4 = sub_10026200C(&qword_100583940, &qword_1005863A0);
  uint64_t v40 = v46;
  uint64_t v39 = v47;
  (*(void (**)(uint64_t *, void, uint64_t))(v46 + 104))(v4, enum case for DispatchTimeInterval.seconds(_:), v47);
  int v41 = v45;
  + infix(_:_:)();
  (*(void (**)(uint64_t *, uint64_t))(v40 + 8))(v4, v39);
  uint64_t v42 = v49;
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
  uint64_t result = v43(v8, v49);
  if (*(void *)(*(void *)&v16[(void)v1] + 72))
  {
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v43(v41, v42);
    return sub_1002018DC((uint64_t)v55);
  }
  __break(1u);
  return result;
}

char *sub_100263D08(void *a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v6 = objc_allocWithZone((Class)type metadata accessor for GreetingsDataSource());
  id v7 = a1;
  id v8 = a2;
  sub_10038121C();
  uint64_t v10 = v9;
  type metadata accessor for AnsweringMachineState();
  uint64_t v11 = sub_10026B79C();
  sub_100261D80();
  uint64_t v12 = sub_10026B33C(v5, v7, v10, v11, [objc_allocWithZone((Class)CHManager) init], (char *)objc_allocWithZone(ObjectType));

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v12;
}

unint64_t sub_100263E60(unsigned int a1)
{
  if (a1 < 5) {
    return 0x504030100uLL >> (8 * a1);
  }
  type metadata accessor for TUTelephonyCallSubType(0);
  unint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_100263EBC(uint64_t a1)
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C28);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stop timeout block running", v5, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AnsweringMachineState();
  uint64_t v6 = swift_allocObject();
  sub_100261D80();
  *(void *)(a1 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState) = v6;

  return swift_release();
}

void sub_100263FD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = *(void **)(v2 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t v18 = *(void (**)(void *, uint64_t))(v12 + 8);
  char v17 = (void *)(v12 + 8);
  v18(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (!a1)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_1001F5F88(v34, (uint64_t)qword_100594C28);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v35, v36)) {
      goto LABEL_16;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Requesting captions provider with stream streamToken == 0. Will not create client.", v37, 2u);
    goto LABEL_15;
  }
  id v19 = [objc_allocWithZone((Class)AVCCaptionsClient) initWithDelegate:v2 streamToken:a1];
  if (!v19)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_1001F5F88(v38, (uint64_t)qword_100594C28);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v35, v39)) {
      goto LABEL_16;
    }
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v66 = a1;
    uint64_t v67 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v42 = String.init<A>(reflecting:)();
    uint64_t v66 = sub_1002344D8(v42, v43, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v39, "Failed to create AVCCaptionsClient with stream token %s.", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_15:
    swift_slowDealloc();
LABEL_16:

    return;
  }
  char v17 = v19;
  if (qword_100583A10 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_1001F5F88(v20, (uint64_t)qword_100594C28);
  id v22 = v17;
  id v64 = (id)v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v65 = v17;
  uint64_t v63 = v6;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v62 = v7;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v66 = a1;
    uint64_t v67 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v61 = v2;
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v66 = sub_1002344D8(v29, v30, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v66 = (uint64_t)v22;
    sub_1001F6204(0, &qword_1005869F8);
    id v31 = v22;
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v66 = sub_1002344D8(v32, v33, &v67);
    uint64_t v2 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    char v17 = v65;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Captions client created for token %s: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v62;
    swift_slowDealloc();
  }
  else
  {
  }
  id v44 = [objc_allocWithZone((Class)AVCCaptionsConfig) init];
  v68.value._rawValue = 0;
  LanguageManager.mappedASRLanguageIdentifier(supportedLanguages:)(v68);
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  [v44 setLocale:isa];

  [v44 setUsage:2];
  id v46 = v44;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    id v64 = v22;
    uint64_t v49 = v7;
    unsigned __int8 v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)unsigned __int8 v50 = 136315138;
    id v51 = [v46 locale];
    if (v51)
    {
      unsigned __int8 v52 = v51;
      uint64_t v53 = (uint64_t)v63;
      static Locale._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 1;
      uint64_t v53 = (uint64_t)v63;
    }
    sub_1001F0530(v53, v54, 1, v49);
    uint64_t v55 = sub_1001FCF88(v53);
    unint64_t v57 = v56;
    sub_1002392A8(v53, (uint64_t *)&unk_10058BB70);
    uint64_t v66 = sub_1002344D8(v55, v57, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Captions client configure with locale: %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v22 = v64;
    char v17 = v65;
  }
  else
  {
  }
  [v22 configureCaptions:v46];
  [v22 enableCaptions:1];

  uint64_t v58 = *(void *)(v2 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState);
  int v59 = *(void **)(v58 + 56);
  *(void *)(v58 + 56) = v17;
}

void sub_100264828()
{
}

void sub_1002649F0()
{
}

void sub_100264B04()
{
}

void sub_100264DDC()
{
}

uint64_t sub_100264E08()
{
  return sub_10038073C() & 1;
}

void sub_100264E9C()
{
}

void sub_100264F9C()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  char v36 = v5;
  unint64_t v33 = v6;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_1001FCCD0();
  sub_10026B7B4();
  uint64_t v35 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v34 = v8;
  __chkstk_darwin(v9);
  sub_10026B830();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1001FCC20();
  uint64_t v11 = *(void **)((char *)v0 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  void *v0 = v11;
  sub_100235D68();
  v12();
  v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  sub_1002466D4();
  v13();
  if (v11)
  {
    if (qword_100583A10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  sub_1001F5F88(v14, (uint64_t)qword_100594C28);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v37[0] = sub_10026B9C0();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = String.init<A>(reflecting:)();
    sub_1002344D8(v18, v19, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    if (v4)
    {
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v20 = String.init<A>(reflecting:)();
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE300000000000000;
      uint64_t v20 = sub_10026B7CC();
    }
    sub_1002344D8(v20, v22, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Answering machine didStart=%s error=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  if (v36)
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v0;
    *(void *)(v23 + 24) = v33;
    v37[4] = (uint64_t)sub_10026B334;
    v37[5] = v23;
    v37[0] = (uint64_t)_NSConcreteStackBlock;
    sub_10021EAFC(COERCE_DOUBLE(1107296256));
    v37[2] = (uint64_t)sub_1002C2C88;
    v37[3] = (uint64_t)&unk_10050F408;
    os_log_type_t v24 = _Block_copy(v37);
    BOOL v25 = v0;
    id v26 = v33;
    static DispatchQoS.unspecified.getter();
    sub_10026B014((unint64_t *)&qword_100584FF0);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    sub_10026B7C0();
    v27();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v1, v35);
  }
  else
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)sub_100246544();
      *(_WORD *)unint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Answering Machine did not start, terminating call", v30, 2u);
      sub_1001F63CC();
    }

    id v31 = [self sharedInstance];
    [v31 disconnectAllCalls];

    type metadata accessor for AnsweringMachineState();
    uint64_t v32 = sub_10026B79C();
    sub_100261D80();
    *(void *)((char *)v2 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState) = v32;
  }
  swift_release();
  sub_1001FCC08();
}

void sub_1002654FC(int a1, id a2)
{
}

void sub_1002655B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10026B880();
  a21 = v24;
  a22 = v25;
  id v26 = v22;
  uint64_t v28 = v27;
  v288 = v29;
  LODWORD(v282) = v30;
  uint64_t v31 = sub_1001F081C(&qword_100586A10);
  uint64_t v32 = sub_100202384(v31);
  __chkstk_darwin(v32);
  sub_10026B830();
  uint64_t v33 = type metadata accessor for MessageQuality();
  sub_1001F6398();
  uint64_t v267 = v34;
  __chkstk_darwin(v35);
  sub_1001FCCD0();
  uint64_t v268 = v36;
  uint64_t v37 = sub_1001F081C(&qword_100586A18);
  uint64_t v38 = sub_100202384(v37);
  __chkstk_darwin(v38);
  sub_1001FCCD0();
  uint64_t v266 = v39;
  uint64_t v40 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v41 = sub_100202384(v40);
  __chkstk_darwin(v41);
  sub_1001FCCD0();
  uint64_t v264 = v42;
  sub_10026B7B4();
  uint64_t v271 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v273 = v43;
  __chkstk_darwin(v44);
  sub_1001F7650();
  sub_10026B78C();
  __chkstk_darwin(v45);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v46);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v47);
  sub_10026B914();
  uint64_t v270 = v48;
  sub_10026B7B4();
  uint64_t v49 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v284 = v50;
  uint64_t v52 = __chkstk_darwin(v51);
  v274 = (char *)&v257 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  sub_10026B914();
  uint64_t v275 = v54;
  uint64_t v56 = __chkstk_darwin(v55);
  v283 = (char *)&v257 - v57;
  __chkstk_darwin(v56);
  sub_10026B914();
  uint64_t v277 = v58;
  uint64_t v265 = v59;
  __chkstk_darwin(v60);
  sub_10026B914();
  uint64_t v285 = v61;
  sub_10026B7B4();
  type metadata accessor for Utterance();
  sub_1001F6398();
  v279 = v63;
  uint64_t v280 = v62;
  __chkstk_darwin(v62);
  sub_1001FCCD0();
  v278 = v64;
  uint64_t v65 = sub_1001F081C(&qword_1005878F0);
  uint64_t v66 = sub_100202384(v65);
  __chkstk_darwin(v66);
  sub_1001F7650();
  sub_10026B78C();
  __chkstk_darwin(v67);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v68);
  sub_10026B98C();
  v281 = v69;
  __chkstk_darwin(v70);
  char v72 = (char *)&v257 - v71;
  uint64_t v73 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v75 = v74;
  __chkstk_darwin(v76);
  sub_1001FCC20();
  unsigned __int8 v77 = *(void **)&v22[OBJC_IVAR___CSDAnsweringMachineController_queue];
  *(void *)unint64_t v22 = v77;
  sub_100235D68();
  v78();
  id v79 = v77;
  LOBYTE(v77) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v73);
  if (v77)
  {
    uint64_t v262 = v33;
    uint64_t v263 = v23;
    if (qword_100583A10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v80 = type metadata accessor for Logger();
  uint64_t v81 = sub_1001F5F88(v80, (uint64_t)qword_100594C28);
  sub_10026B5E4((uint64_t)v288, (uint64_t)v72, &qword_1005878F0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v289 = v81;
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  BOOL v84 = sub_10026B94C(v83);
  uint64_t v286 = v49;
  v287 = v26;
  if (v84)
  {
    uint64_t v85 = swift_slowAlloc();
    v291[0] = (id)sub_10026B9C0();
    *(_DWORD *)uint64_t v85 = 67109634;
    LODWORD(v290) = v282 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v85 + 8) = 2080;
    uint64_t v86 = sub_1001FCDEC((uint64_t)v72);
    uint64_t v290 = sub_1002344D8(v86, v87, (uint64_t *)v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002392A8((uint64_t)v72, &qword_1005878F0);
    *(_WORD *)(v85 + 18) = 2080;
    if (v28)
    {
      uint64_t v290 = v28;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v88 = String.init<A>(reflecting:)();
      unint64_t v90 = v89;
    }
    else
    {
      uint64_t v88 = sub_10026B7CC();
      unint64_t v90 = 0xE300000000000000;
    }
    uint64_t v290 = sub_1002344D8(v88, v90, (uint64_t *)v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Answering machine didStop=%{BOOL}d messageRecordingURL=%s error=%s", (uint8_t *)v85, 0x1Cu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    id v26 = v287;
    if (!v28) {
      goto LABEL_15;
    }
  }
  else
  {
    sub_1002392A8((uint64_t)v72, &qword_1005878F0);
    swift_errorRelease();
    swift_errorRelease();

    if (!v28)
    {
LABEL_15:
      uint64_t v97 = OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
      uint64_t v98 = *(void *)&v26[OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState];
      id v99 = &unk_100594000;
      uint64_t v100 = OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_lastCaptions;
      uint64_t v101 = *(void **)(v98 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_lastCaptions);
      if (v101)
      {
        id v102 = v101;
        uint64_t v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.default.getter();
        BOOL v105 = os_log_type_enabled(v103, v104);
        v261 = (void (*)(void, void, void))v102;
        if (v105)
        {
          uint64_t v282 = v97;
          uint64_t v106 = (_DWORD *)sub_100235B18();
          uint64_t v107 = (void *)swift_slowAlloc();
          _DWORD *v106 = 138412290;
          v291[0] = v102;
          id v108 = v102;
          uint64_t v97 = v282;
          id v26 = v287;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v101;

          id v99 = (void *)&unk_100594000;
          sub_100249830((void *)&_mh_execute_header, v109, v110, "Answering machine didStop, adding existing captions: %@");
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();
        }
        else
        {

          uint64_t v103 = v102;
        }
        id v113 = v279;
        uint64_t v112 = v280;
        char v114 = v278;

        uint64_t v115 = *(void *)&v26[v97];
        swift_retain();
        id v116 = v261;
        sub_100266EDC();
        swift_beginAccess();
        sub_10035EF88();
        uint64_t v117 = *(void *)(*(void *)(v115 + 80) + 16);
        sub_100398CD0(v117);
        uint64_t v118 = *(void *)(v115 + 80);
        *(void *)(v118 + 16) = v117 + 1;
        (*((void (**)(unint64_t, NSObject *, uint64_t))v113 + 4))(v118+ ((*((unsigned __int8 *)v113 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v113 + 80))+ *((void *)v113 + 9) * v117, v114, v112);
        swift_endAccess();
        swift_release();

        uint64_t v98 = *(void *)&v26[v97];
        uint64_t v100 = v99[320];
        uint64_t v111 = *(void **)(v98 + v100);
      }
      else
      {
        uint64_t v111 = 0;
      }
      *(void *)(v98 + v100) = 0;

      if (*(void *)(*(void *)&v26[v97] + 72))
      {
        swift_retain();
        dispatch thunk of DispatchWorkItem.cancel()();
        swift_release();
      }
      uint64_t v119 = v286;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (!Strong) {
        goto LABEL_65;
      }
      uint64_t v121 = Strong;
      [Strong setLiveVoicemailStatus:1];
      id v122 = v121;
      os_log_type_t v123 = v289;
      id v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.default.getter();
      if (sub_10026B89C(v125))
      {
        uint64_t v126 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v126 = 67109120;
        LODWORD(v291[0]) = [v122 screeningAnnouncementHasFinished];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v124, v123, "Answering machine stopped, screeningAnnouncementHasFinished %{BOOL}d", v126, 8u);
        sub_1001F63CC();
      }
      else
      {

        id v124 = v122;
      }
      id v128 = (void *)v284;
      uint64_t v127 = v285;
      uint64_t v129 = (uint64_t)v281;

      uint64_t v130 = (uint64_t)v288;
      sub_10026B5E4((uint64_t)v288, v129, &qword_1005878F0);
      if (sub_1001F758C(v129, 1, v119) == 1)
      {
        sub_1002392A8(v129, &qword_1005878F0);
        uint64_t v131 = (uint64_t)v276;
        sub_10026B5E4(v130, (uint64_t)v276, &qword_1005878F0);
        id v132 = v26;
        uint64_t v133 = Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.default.getter();
        if (sub_10026B94C(v134))
        {
          v288 = v122;
          uint64_t v135 = swift_slowAlloc();
          v291[0] = (id)sub_10026B9C0();
          *(_DWORD *)uint64_t v135 = 136315394;
          uint64_t v136 = sub_1001FCDEC(v131);
          uint64_t v282 = v97;
          uint64_t v290 = sub_1002344D8(v136, v137, (uint64_t *)v291);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002392A8(v131, &qword_1005878F0);
          *(_WORD *)(v135 + 12) = 2080;
          uint64_t v138 = swift_unknownObjectWeakLoadStrong();
          if (v138)
          {
            uint64_t v290 = v138;
            sub_1001F6204(0, (unint64_t *)&qword_10058A480);
            uint64_t v139 = String.init<A>(reflecting:)();
            unint64_t v141 = v140;
          }
          else
          {
            uint64_t v139 = sub_10026B7CC();
            unint64_t v141 = 0xE300000000000000;
          }
          uint64_t v144 = &selRef_setActiveRequestsByTransactionID_;
          uint64_t v145 = &selRef_removeMembers_fromExistingMembers_activeParticipants_triggeredLocally_;
          uint64_t v290 = sub_1002344D8(v139, v141, (uint64_t *)v291);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v133, v134, "Not saving message because either messageURL (%s or currentCall (%s) is nil", (uint8_t *)v135, 0x16u);
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          id v26 = v287;
          id v122 = v288;
          uint64_t v97 = v282;
        }
        else
        {
          sub_1002392A8(v131, &qword_1005878F0);

          uint64_t v144 = &selRef_setActiveRequestsByTransactionID_;
          uint64_t v145 = &selRef_removeMembers_fromExistingMembers_activeParticipants_triggeredLocally_;
        }
        if ([v122 v145[262]]) {
          uint64_t v219 = 2;
        }
        else {
          uint64_t v219 = 5;
        }
        objc_msgSend(v122, v144[277], v219);

LABEL_65:
        type metadata accessor for AnsweringMachineState();
        uint64_t v220 = sub_10026B79C();
        sub_100261D80();
        *(void *)&v26[v97] = v220;
LABEL_66:
        swift_release();
        goto LABEL_67;
      }
      uint64_t v142 = (void (*)(void, void, void))v128[4];
      v276 = v128 + 4;
      v261 = v142;
      v142(v127, v129, v119);
      v288 = v122;
      int v260 = sub_10026727C(v122);
      if (v260) {
        int v143 = 1;
      }
      else {
        int v143 = *(unsigned __int8 *)(*(void *)&v26[v97]
      }
                                  + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_hasReceivedAudio);
      uint64_t v146 = v277;
      uint64_t v147 = (void (*)(uint64_t, uint64_t, uint64_t))v128[2];
      v281 = v128 + 2;
      uint64_t v148 = v286;
      v147(v277, v127, v286);
      if (v143)
      {
        uint64_t v149 = (void (*)(void))v128[1];
        ((void (*)(uint64_t, uint64_t))v149)(v146, v148);
      }
      else
      {
        BOOL v150 = sub_10026736C();
        uint64_t v149 = (void (*)(void))v128[1];
        sub_10026B9D8();
        v149();
        if (!v150)
        {
          v211 = (void *)Logger.logObject.getter();
          os_log_type_t v212 = static os_log_type_t.default.getter();
          if (sub_10026B89C(v212))
          {
            *(_WORD *)sub_100246544() = 0;
            sub_100246944((void *)&_mh_execute_header, v213, v214, "Answering machine stopped, we got no audio and it wasn't an RTT call not saving voicemail");
            sub_1001F63CC();
          }

          v215 = v287;
          v216 = v288;
          if (*(unsigned char *)(*(void *)&v287[v97] + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_hasReceivedAudio)) {
            uint64_t v217 = 3;
          }
          else {
            uint64_t v217 = 4;
          }
          [v288 setLiveVoicemailStatus:v217];

          sub_10026B9D8();
          v149();
          type metadata accessor for AnsweringMachineState();
          uint64_t v218 = sub_10026B79C();
          sub_100261D80();
          *(void *)&v215[v97] = v218;
          goto LABEL_66;
        }
      }
      uint64_t v151 = v149;
      id v152 = [v288 handle];
      uint64_t v153 = v275;
      uint64_t v154 = v97;
      if (v152)
      {
        uint64_t v258 = sub_1003577F4(v152);
        uint64_t v277 = v155;
      }
      else
      {
        uint64_t v258 = 0;
        uint64_t v277 = 0;
      }
      static URL.temporaryDirectory.getter();
      URL.lastPathComponent.getter();
      v156 = v283;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v157 = v284 + 8;
      uint64_t v158 = v286;
      sub_10026B8B8();
      v151();
      uint64_t v159 = v274;
      v147((uint64_t)v274, (uint64_t)v156, v158);
      uint64_t v160 = Logger.logObject.getter();
      os_log_type_t v161 = static os_log_type_t.default.getter();
      v278 = v160;
      BOOL v162 = os_log_type_enabled(v160, v161);
      uint64_t v282 = v154;
      v279 = v151;
      uint64_t v280 = v157;
      v259 = v147;
      if (v162)
      {
        char v163 = (uint8_t *)sub_100235B18();
        v291[0] = (id)sub_100202470();
        *(_DWORD *)char v163 = 136315138;
        v147(v153, (uint64_t)v159, v158);
        uint64_t v164 = String.init<A>(reflecting:)();
        uint64_t v166 = sub_1002344D8(v164, v165, (uint64_t *)v291);
        sub_10026B8C8(v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        char v167 = v279;
        swift_bridgeObjectRelease();
        sub_10026B8B8();
        v167();
        v168 = v278;
        _os_log_impl((void *)&_mh_execute_header, v278, v161, "destinationURL: %s", v163, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        uint64_t v169 = v158;
        sub_1001F63CC();
      }
      else
      {
        sub_10026B8B8();
        v151();

        char v167 = v151;
        uint64_t v169 = v158;
      }
      id v170 = [self defaultManager];
      URL._bridgeToObjectiveC()(v171);
      v173 = v172;
      URL._bridgeToObjectiveC()(v174);
      v176 = v175;
      v291[0] = 0;
      unsigned int v177 = [v170 copyItemAtURL:v173 toURL:v175 error:v291];

      if (!v177)
      {
        id v200 = v291[0];
        swift_bridgeObjectRelease();
        uint64_t v201 = _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        v202 = Logger.logObject.getter();
        os_log_type_t v203 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v202, v203))
        {
          v204 = (uint8_t *)sub_100235B18();
          v205 = (void *)sub_100202470();
          uint64_t v290 = v201;
          v291[0] = v205;
          *(_DWORD *)v204 = 136315138;
          swift_errorRetain();
          sub_1001F081C((uint64_t *)&unk_100585FE0);
          uint64_t v206 = String.init<A>(reflecting:)();
          uint64_t v208 = sub_1002344D8(v206, v207, (uint64_t *)v291);
          sub_10026B978(v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v202, v203, "Received an error %s copying recorded message", v204, 0xCu);
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          swift_errorRelease();
          uint64_t v209 = sub_10026B868();
          ((void (*)(uint64_t))v202)(v209);
          uint64_t v210 = sub_10026B964();
          ((void (*)(uint64_t))v202)(v210);
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          ((void (*)(char *, uint64_t))v167)(v283, v169);
          ((void (*)(uint64_t, uint64_t))v167)(v285, v169);
        }
        uint64_t v234 = v282;
        type metadata accessor for AnsweringMachineState();
        uint64_t v235 = sub_10026B79C();
        sub_100261D80();
        *(void *)&v287[v234] = v235;
        goto LABEL_66;
      }
      id v178 = v291[0];
      v180 = v287;
      v179 = v288;
      uint64_t v181 = sub_1002676C0(v288);
      if (v182)
      {
        swift_bridgeObjectRelease();
        v221 = v179;
        v222 = Logger.logObject.getter();
        os_log_type_t v223 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v222, v223))
        {
          v224 = (void (*)(uint64_t))sub_100235B18();
          v225 = (void *)sub_100202470();
          uint64_t v290 = (uint64_t)v221;
          v291[0] = v225;
          *(_DWORD *)v224 = 136315138;
          sub_1001F6204(0, (unint64_t *)&qword_10058A480);
          v226 = v221;
          uint64_t v227 = String.init<A>(reflecting:)();
          uint64_t v229 = sub_1002344D8(v227, v228, (uint64_t *)v291);
          sub_10026B978(v229);
          v180 = v287;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          sub_100249830((void *)&_mh_execute_header, v230, v231, "Call has an unsupported provider. Call: %s");
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          uint64_t v232 = sub_10026B868();
          v224(v232);
          uint64_t v233 = sub_10026B964();
          v224(v233);
        }
        else
        {

          ((void (*)(char *, uint64_t))v167)(v283, v169);
          ((void (*)(uint64_t, uint64_t))v167)(v285, v169);
        }
        uint64_t v236 = v282;
        type metadata accessor for AnsweringMachineState();
        uint64_t v237 = sub_10026B79C();
        sub_100261D80();
        *(void *)&v180[v236] = v237;
        goto LABEL_66;
      }
      v183 = v181;
      sub_100267800();
      uint64_t v185 = v184;
      v186 = Logger.logObject.getter();
      os_log_type_t v187 = static os_log_type_t.default.getter();
      BOOL v188 = os_log_type_enabled(v186, v187);
      v278 = v183;
      if (v188)
      {
        v189 = (uint8_t *)sub_100235B18();
        v291[0] = (id)sub_100202470();
        *(_DWORD *)v189 = 136315138;
        uint64_t v290 = v185;
        uint64_t v190 = String.init<A>(reflecting:)();
        uint64_t v290 = sub_1002344D8(v190, v191, (uint64_t *)v291);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v186, v187, "creatingMessage duration: %s", v189, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }

      uint64_t v192 = v271;
      uint64_t v193 = v270;
      uint64_t v194 = v264;
      id v195 = [v288 conversationID];
      v196 = v287;
      if (v195)
      {
        v197 = v195;
        uint64_t v198 = v272;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v199 = *(void (**)(uint64_t, uint64_t, uint64_t))(v273 + 32);
        v199(v194, v198, v192);
        sub_1001F0530(v194, 0, 1, v192);
        if (sub_1001F758C(v194, 1, v192) != 1)
        {
          v199(v193, v194, v192);
LABEL_76:
          uint64_t v289 = type metadata accessor for Message();
          UUID.init()();
          v238 = *(void (**)(uint64_t))(v273 + 16);
          uint64_t v239 = sub_10026B8FC((uint64_t)&a12);
          v238(v239);
          uint64_t v240 = sub_10026B8FC((uint64_t)&a13);
          v238(v240);
          uint64_t v241 = v275;
          v242 = (void (*)(uint64_t, char *, uint64_t))v259;
          v259(v275, (uint64_t)v283, v169);
          sub_1001F0530(v269, 1, 1, v169);
          v278 = MessageStoreProvider.identifierString.getter();
          v274 = v243;
          uint64_t v264 = *(void *)(*(void *)&v196[v282] + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_calleeHandle);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v244 = v266;
          Transcript.init(utterances:)();
          uint64_t v245 = type metadata accessor for Transcript();
          sub_1001F0530(v244, 0, 1, v245);
          (*(void (**)(uint64_t, void, uint64_t))(v267 + 104))(v268, enum case for MessageQuality.raw(_:), v262);
          swift_bridgeObjectRetain();
          LOBYTE(v290) = 1;
          v246 = (void *)Message.__allocating_init(recordUUID:callUUID:conversationID:messageFile:messageThumbnail:messageType:from:provider:isSensitive:duration:recipient:transcript:isRTT:simID:quality:voicemailID:)();
          uint64_t v247 = type metadata accessor for TaskPriority();
          uint64_t v248 = v263;
          sub_1001F0530(v263, 1, 1, v247);
          v242(v241, v283, v169);
          unint64_t v249 = (*(unsigned __int8 *)(v284 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v284 + 80);
          v250 = (void *)swift_allocObject();
          v250[2] = 0;
          v250[3] = 0;
          v251 = v288;
          v250[4] = v196;
          v250[5] = v251;
          v250[6] = v246;
          v261((char *)v250 + v249, v241, v169);
          v252 = v251;
          v253 = v196;
          id v254 = v246;
          sub_1002C8468(v248, (uint64_t)&unk_100586A28, (uint64_t)v250);

          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v273 + 8))(v270, v271);
          v255 = v279;
          sub_1002466D4();
          v255();
          sub_1002466D4();
          v255();
          type metadata accessor for AnsweringMachineState();
          uint64_t v256 = sub_10026B79C();
          sub_100261D80();
          *(void *)&v196[v282] = v256;
          goto LABEL_66;
        }
      }
      else
      {
        sub_1001F0530(v194, 1, 1, v192);
      }
      UUID.init()();
      sub_1002392A8(v194, (uint64_t *)&unk_100585580);
      goto LABEL_76;
    }
  }
  swift_errorRetain();
  uint64_t v91 = (void *)_convertErrorToNSError(_:)();
  id v92 = [v91 code];

  if (v92 != (id)32028)
  {
    swift_errorRelease();
    goto LABEL_15;
  }
  uint64_t v93 = (void *)Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.default.getter();
  if (sub_10026B89C(v94))
  {
    *(_WORD *)sub_100246544() = 0;
    sub_100246944((void *)&_mh_execute_header, v95, v96, "Error caused by bad API usage, ignoring");
    sub_1001F63CC();
  }
  swift_errorRelease();

LABEL_67:
  sub_10026B920();
}

void sub_100266EDC()
{
  sub_10026B880();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1001F081C(&qword_1005869E0);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Caption();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001FCC70();
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v19 = *(void **)(v0 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v18 = v19;
  sub_100235D68();
  v20();
  id v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v13);
  if (v19)
  {
    unint64_t v22 = sub_10026ADD4(v3);
    if (!v22)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v13 = v22;
    uint64_t v35 = v3;
    if (!(v22 >> 62))
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v23) {
        goto LABEL_16;
      }
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  if (!v23) {
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1002E3F84(0, v23 & ~(v23 >> 63), 0);
  if (v23 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v34 = v5;
  uint64_t v24 = 0;
  uint64_t v25 = v39;
  unint64_t v36 = v13 & 0xC000000000000001;
  uint64_t v26 = v13;
  do
  {
    if (v36) {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v27 = *(id *)(v13 + 8 * v24 + 32);
    }
    uint64_t v28 = v27;
    objc_msgSend(v27, "confidence", v34);
    [v28 range];
    CaptionRange.init(_:)();
    uint64_t v29 = type metadata accessor for CaptionRange();
    sub_1001F0530((uint64_t)v9, 0, 1, v29);
    Caption.init(confidence:range:)();

    uint64_t v39 = v25;
    unint64_t v31 = v25[2];
    unint64_t v30 = v25[3];
    if (v31 >= v30 >> 1)
    {
      sub_1002E3F84(v30 > 1, v31 + 1, 1);
      uint64_t v25 = v39;
    }
    ++v24;
    void v25[2] = v31 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v31, v1, v37);
    uint64_t v13 = v26;
  }
  while (v23 != v24);
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v32 = v35;
  sub_10026AE44(v35);
  if (v33)
  {
    [v32 utteranceNumber];
    [v32 utteranceStartTimestamp];
    [v32 utteranceDuration];
    char v38 = 0;
    Utterance.init(text:captions:utteranceNumber:utteranceStartTimestamp:utteranceDuration:)();
    sub_10026B920();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_10026727C(void *a1)
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100235BE8();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v2 = v5;
  sub_100235D68();
  v6();
  id v7 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v8 = sub_10026B84C();
  uint64_t result = v9(v8);
  if (v5)
  {
    if ([a1 isRTT]) {
      return 1;
    }
    else {
      return (uint64_t)[a1 isTTY];
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_10026736C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)&v0[OBJC_IVAR___CSDAnsweringMachineController_queue];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  unint64_t v11 = sub_10026200C(&qword_100583938, &qword_100586398);
  id v12 = sub_10009CEA4(v10, v11);

  if (!v12) {
    return 0;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  uint64_t v5 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100583A10 != -1) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C28);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = (uint64_t)v5;
    uint64_t v24 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    sub_1001F081C((uint64_t *)&unk_100586A30);
    uint64_t v18 = String.init<A>(reflecting:)();
    uint64_t v23 = sub_1002344D8(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "powerLevels=%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  BOOL v20 = sub_100261C70((unint64_t)v5, v1);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1002676C0(void *a1)
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100235BE8();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v2 = v5;
  sub_100235D68();
  v6();
  id v7 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v8 = sub_10026B84C();
  uint64_t result = v9(v8);
  if (v5)
  {
    id v11 = [a1 provider];
    unsigned __int8 v12 = [v11 isTelephonyProvider];

    if (v12)
    {
      return 1;
    }
    else
    {
      id v13 = [a1 provider];
      unsigned int v14 = [v13 isFaceTimeProvider];

      if (v14) {
        return 2;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100267800()
{
  sub_10026B880();
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  sub_1001FCC20();
  uint64_t v4 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_1001FCC70();
  os_log_type_t v15 = *(void **)&v0[OBJC_IVAR___CSDAnsweringMachineController_queue];
  *uint64_t v1 = v15;
  sub_100235D68();
  v16();
  id v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v1, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v18 = *(void *)&v0[OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState]
      + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_startRecordingTime;
  swift_beginAccess();
  sub_10026B5E4(v18, (uint64_t)v0, &qword_100584B40);
  if (sub_1001F758C((uint64_t)v0, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v0, v4);
    static Date.now.getter();
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v28 = *(void (**)(void))(v6 + 8);
    sub_10026B7C0();
    v28();
    Date.timeIntervalSinceReferenceDate.getter();
    sub_10026B7C0();
    v28();
    goto LABEL_11;
  }
  sub_1002392A8((uint64_t)v0, &qword_100584B40);
  if (qword_100583A10 != -1) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v19 = type metadata accessor for Logger();
  sub_1001F5F88(v19, (uint64_t)qword_100594C28);
  BOOL v20 = v0;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (sub_10026B94C(v22))
  {
    uint64_t v23 = (uint8_t *)sub_100235B18();
    uint64_t v31 = sub_100202470();
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v30 = Strong;
      sub_1001F6204(0, (unint64_t *)&qword_10058A480);
      uint64_t v25 = String.init<A>(reflecting:)();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = sub_10026B7CC();
    }
    uint64_t v30 = sub_1002344D8(v25, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No start time given for the recording. Call: %s", v23, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
LABEL_11:
  sub_10026B920();
}

uint64_t sub_100267BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  return _swift_task_switch(sub_100267C5C, 0, 0);
}

uint64_t sub_100267C5C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_10026843C(*(void **)(v0 + 64));
  uint64_t v2 = OBJC_IVAR___CSDAnsweringMachineController_messageStoreController;
  *(void *)(v0 + 88) = OBJC_IVAR___CSDAnsweringMachineController_messageStoreController;
  if (*(void *)(v1 + v2))
  {
    uint64_t v3 = *(void *)(v1 + v2);
  }
  else
  {
    type metadata accessor for MessageStoreController();
    uint64_t v3 = static MessageStoreController.shared.getter();
  }
  *(void *)(v0 + 96) = v3;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100267D6C;
  uint64_t v5 = *(void *)(v0 + 72);
  return MessageStoreController.saveMessage(_:)(v5);
}

uint64_t sub_100267D6C()
{
  sub_1001F63B4();
  *(void *)(v2 + 112) = v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100268164;
  }
  else {
    uint64_t v3 = sub_100267E88;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100267E88()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0 + 2;
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594C28);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[14];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)sub_100235B18();
    uint64_t v23 = sub_100202470();
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[5] = v8;
    type metadata accessor for Message();
    id v10 = v8;
    uint64_t v11 = String.init<A>(reflecting:)();
    v0[6] = sub_1002344D8(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = v0 + 2;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Message saved: %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
    swift_release();
  }
  else
  {

    swift_release();
  }
  *(void *)(v0[7] + v0[11]) = 0;
  swift_release();
  id v13 = [self defaultManager];
  URL._bridgeToObjectiveC()(v14);
  uint64_t v16 = v15;
  v0[2] = 0;
  unsigned int v17 = [v13 removeItemAtURL:v15 error:v1];

  uint64_t v18 = (void *)v0[2];
  if (v17)
  {
    id v19 = v18;
  }
  else
  {
    id v20 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  id v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100268164()
{
  id v21 = v0;
  uint64_t v1 = v0 + 2;
  swift_release();
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C28);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[15];
  if (v5)
  {
    BOOL v7 = (uint8_t *)sub_100235B18();
    uint64_t v20 = sub_100202470();
    *(_DWORD *)BOOL v7 = 136315138;
    v0[3] = v6;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[4] = sub_1002344D8(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error adding message: %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    uint64_t v1 = v0 + 2;
    sub_1001F63CC();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  id v10 = [self defaultManager];
  URL._bridgeToObjectiveC()(v11);
  id v13 = v12;
  v0[2] = 0;
  unsigned int v14 = [v10 removeItemAtURL:v12 error:v1];

  os_log_type_t v15 = (void *)v0[2];
  if (v14)
  {
    id v16 = v15;
  }
  else
  {
    id v17 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

void sub_10026843C(void *a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___CSDAnsweringMachineController_callHistoryManager);
  NSString v4 = [a1 callHistoryIdentifier];
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  [v3 updateMessageStatusFor:v4 with:isa];

  NSString v6 = [a1 callHistoryIdentifier];
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 updateAutoAnsweredReasonFor:v6 with:1];

  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1001F5F88(v7, (uint64_t)qword_100594C28);
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    swift_slowDealloc();
  }
}

#error "1002686EC: call analysis failed (funcsize=66)"

void sub_100268724()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  uint64_t v67 = v3;
  int v75 = v4;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1001FCCD0();
  uint64_t v73 = v9;
  sub_10026B7B4();
  uint64_t v10 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1001F7650();
  uint64_t v72 = v14;
  __chkstk_darwin(v15);
  sub_10026B914();
  uint64_t v74 = v16;
  sub_10026B7B4();
  uint64_t v70 = type metadata accessor for DispatchWorkItemFlags();
  sub_10020233C();
  __chkstk_darwin(v17);
  sub_1001FCCD0();
  uint64_t v71 = v18;
  uint64_t v19 = sub_1001F081C(&qword_100584B40);
  uint64_t v20 = sub_100202384(v19);
  __chkstk_darwin(v20);
  sub_1001F7650();
  uint64_t v69 = v21;
  __chkstk_darwin(v22);
  uint64_t v68 = (char *)v65 - v23;
  sub_10026B7B4();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v24);
  sub_1002024D0();
  uint64_t v25 = *(void **)(v0 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v1 = v25;
  sub_100235D68();
  v26();
  id v27 = v25;
  char v28 = _dispatchPreconditionTest(_:)();
  sub_1002466D4();
  v29();
  if (v28)
  {
    v65[2] = v7;
    uint64_t v66 = v12;
    if (qword_100583A10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v30 = type metadata accessor for Logger();
  sub_1001F5F88(v30, (uint64_t)qword_100594C28);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = "synchronousConversationsForBundleIdentifier" + 32;
  char v35 = v75;
  v65[3] = v5;
  v65[1] = v27;
  if (v33)
  {
    unint64_t v36 = (uint8_t *)sub_100235B18();
    uint64_t v37 = sub_100202470();
    v65[0] = v10;
    v77[0] = v37;
    *(_DWORD *)unint64_t v36 = 136315138;
    LOBYTE(v76) = v35 & 1;
    uint64_t v38 = String.init<A>(reflecting:)();
    uint64_t v76 = sub_1002344D8(v38, v39, v77);
    char v35 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Answering machine didFinishAnnouncement: %s", v36, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v65[0];
    sub_1001F63CC();
    uint64_t v34 = "eIdentifier";
    sub_1001F63CC();
  }

  uint64_t v40 = v67;
  if ((v35 & 1) == 0)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (sub_10026B94C(v42))
    {
      uint64_t v43 = v10;
      uint64_t v44 = (uint8_t *)sub_100235B18();
      v77[0] = sub_100202470();
      *(_DWORD *)uint64_t v44 = *((void *)v34 + 202);
      if (v40)
      {
        uint64_t v76 = v40;
        swift_errorRetain();
        sub_1001F081C((uint64_t *)&unk_100585FE0);
        uint64_t v45 = String.init<A>(reflecting:)();
        unint64_t v47 = v46;
      }
      else
      {
        unint64_t v47 = 0xE300000000000000;
        uint64_t v45 = sub_10026B7CC();
      }
      uint64_t v48 = sub_1002344D8(v45, v47, v77);
      sub_10026B8C8(v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Issue playing announcement: %s", v44, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      uint64_t v10 = v43;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  uint64_t v49 = OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v51 = v66;
  if (Strong)
  {
    uint64_t v52 = Strong;
    [Strong setScreeningAnnouncementHasFinished:1];
  }
  uint64_t v53 = *(void *)(v2 + v49);
  swift_retain();
  uint64_t v54 = (uint64_t)v68;
  static Date.now.getter();
  uint64_t v55 = type metadata accessor for Date();
  sub_1001F0530(v54, 0, 1, v55);
  uint64_t v56 = v54;
  uint64_t v57 = v69;
  sub_10026B62C(v56, v69, &qword_100584B40);
  uint64_t v58 = v53 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_startRecordingTime;
  swift_beginAccess();
  sub_10026B674(v57, v58, &qword_100584B40);
  swift_endAccess();
  swift_release();
  uint64_t v59 = *(void *)(v2 + v49);
  v77[0] = 0;
  sub_10026B014((unint64_t *)&unk_100586A00);
  swift_retain();
  dispatch thunk of OptionSet.init(rawValue:)();
  v77[4] = (uint64_t)sub_100268E54;
  v77[5] = 0;
  v77[0] = (uint64_t)_NSConcreteStackBlock;
  v77[1] = 1107296256;
  v77[2] = (uint64_t)sub_1002C2C88;
  v77[3] = (uint64_t)&unk_10050F390;
  _Block_copy(v77);
  type metadata accessor for DispatchWorkItem();
  sub_10026B79C();
  *(void *)(v59 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_voicemailTimeoutBlock) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  uint64_t v60 = v72;
  static DispatchTime.now()();
  *uint64_t v73 = sub_100262080();
  sub_100235D68();
  v61();
  uint64_t v62 = v74;
  + infix(_:_:)();
  sub_10026B9D8();
  v63();
  id v64 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v64(v60, v10);
  if (*(void *)(*(void *)(v2 + v49) + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_voicemailTimeoutBlock))
  {
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v64(v62, v10);
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_100268E54()
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C28);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "voicemail timeout block running", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self sharedInstance];
  [v4 disconnectAllCalls];
}

uint64_t sub_100268FF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR___CSDAnsweringMachineController_queue);
  *uint64_t v7 = v8;
  sub_100235D68();
  v9();
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v2);
  if (v8)
  {
    if (qword_100583A10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594C28);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)sub_100246544();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Answering machine serverDidDisconnect", v14, 2u);
    sub_1001F63CC();
  }

  id v15 = [self sharedInstance];
  [v15 disconnectAllCalls];

  type metadata accessor for AnsweringMachineState();
  uint64_t v16 = sub_10026B79C();
  sub_100261D80();
  *(void *)(v1 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState) = v16;
  return swift_release();
}

void sub_1002692EC()
{
  sub_1001FCC38();
  uint64_t v18 = v1;
  uint64_t v19 = v2;
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v13);
  sub_1002024D0();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v8;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v4;
  v20[4] = v18;
  void v20[5] = v14;
  v20[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v20[2] = sub_1002C2C88;
  v20[3] = v19;
  id v15 = _Block_copy(v20);
  id v16 = v8;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  sub_10026B014((unint64_t *)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v9);
  sub_10026B7C0();
  v17();
  swift_release();
  sub_1001FCC08();
}

void sub_1002694D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1001F5F88(v7, (uint64_t)qword_100594C28);
  id v8 = a1;
  swift_errorRetain();
  id v9 = v8;
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    uint64_t v11 = 7104878;
    uint64_t v12 = sub_100202470();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    if (a1)
    {
      sub_1001F6204(0, &qword_1005869F8);
      id v13 = v9;
      uint64_t v14 = String.init<A>(reflecting:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v14 = sub_10026B7CC();
    }
    sub_1002344D8(v14, v16, &v22);
    sub_10026B998();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v17 = String.init<A>(reflecting:)();
    sub_1002344D8(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    if (a3)
    {
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v20 = v19;
    }
    else
    {
      unint64_t v20 = 0xE300000000000000;
    }
    sub_1002344D8(v11, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, a4, (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_100269914()
{
  sub_1001FCC38();
  uint64_t v16 = v1;
  uint64_t v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v8);
  uint64_t v17 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002024D0();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(unsigned char *)(v12 + 24) = v5;
  v18[4] = v3;
  v18[5] = v12;
  v18[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v18[2] = sub_1002C2C88;
  void v18[3] = v16;
  id v13 = _Block_copy(v18);
  id v14 = v7;
  static DispatchQoS.unspecified.getter();
  sub_10026B014((unint64_t *)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  sub_10026B9D8();
  v15();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v17);
  swift_release();
  sub_1001FCC08();
}

void sub_100269B00(void *a1, uint64_t a2, const char *a3)
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1001F5F88(v5, (uint64_t)qword_100594C28);
  id v15 = a1;
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_10026B94C(v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = sub_10026B9C0();
    *(_DWORD *)uint64_t v8 = 136315394;
    if (a1)
    {
      sub_1001F6204(0, &qword_1005869F8);
      id v9 = v15;
      uint64_t v10 = String.init<A>(reflecting:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v10 = sub_10026B7CC();
    }
    sub_1002344D8(v10, v12, &v16);
    sub_10026B998();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    type metadata accessor for AVCCaptionsReason(0);
    uint64_t v13 = String.init<A>(reflecting:)();
    sub_1002344D8(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a3, (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
}

void sub_100269DD4()
{
  sub_1001FCC38();
  char v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1002024D0();
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v0;
  void v12[4] = sub_10026AEE0;
  v12[5] = v5;
  v12[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v12[2] = sub_1002C2C88;
  void v12[3] = &unk_10050F228;
  char v6 = _Block_copy(v12);
  id v7 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10026B014((unint64_t *)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B7D8();
  sub_100261C0C();
  _Block_release(v6);
  uint64_t v8 = sub_10026B774();
  v9(v8);
  uint64_t v10 = sub_10026B75C();
  v11(v10);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100269F84(char a1, uint64_t a2)
{
  id v4 = sub_1001B1B60();
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10048F550;
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 32) = a1;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
  *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState)
           + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isProcessingGibberish) = a1;
  *(unsigned char *)(*(void *)(a2 + v7) + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_hasReceivedAudio) = 1;
  return result;
}

void sub_10026A0CC()
{
  sub_1001FCC38();
  int v2 = v1;
  id v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  *(_DWORD *)(v7 + 24) = v2;
  *(void *)(v7 + 32) = v4;
  v15[4] = sub_10026ADC4;
  void v15[5] = v7;
  v15[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  uint64_t v15[2] = sub_1002C2C88;
  void v15[3] = &unk_10050F1D8;
  uint64_t v8 = _Block_copy(v15);
  id v9 = v4;
  id v10 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10026B014((unint64_t *)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  uint64_t v11 = sub_10026B774();
  v12(v11);
  uint64_t v13 = sub_10026B75C();
  v14(v13);
  swift_release();
  sub_1001FCC08();
}

void sub_10026A290(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Utterance();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v47 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState;
  *(unsigned char *)(*(void *)(a1 + OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState)
           + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_hasReceivedAudio) = 1;
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C28);
  id v10 = a3;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v44 = a1;
    uint64_t v45 = v7;
    unint64_t v46 = (void *)v6;
    uint64_t v13 = swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    LODWORD(v49) = a2;
    type metadata accessor for AVCCaptionsSource(0);
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v49 = sub_1002344D8(v14, v15, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    if (a3)
    {
      uint64_t v49 = (uint64_t)v10;
      sub_1001F6204(0, &qword_1005869D8);
      id v16 = v10;
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v49 = sub_1002344D8(v17, v19, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Captions updated: source: %s captions: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v45;
    uint64_t v6 = (uint64_t)v46;
    a1 = v44;
  }
  else
  {
  }
  uint64_t v20 = v48;
  uint64_t v21 = *(void *)(a1 + v48);
  if ((*(unsigned char *)(v21 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_isProcessingGibberish) & 1) == 0)
  {
    uint64_t v22 = &unk_100594000;
    uint64_t v23 = *(void **)(v21 + OBJC_IVAR____TtC13callservicesd21AnsweringMachineState_lastCaptions);
    if (v23)
    {
      id v24 = v23;
      unsigned int v25 = [v24 utteranceNumber];
      if (a3)
      {
        if (v25 != [v10 utteranceNumber])
        {
          unint64_t v46 = a3;
          unint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, v27))
          {
            char v28 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v28 = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "updating transcript with lastCaptions", v28, 2u);
            swift_slowDealloc();
          }

          uint64_t v29 = *(void *)(a1 + v20);
          swift_retain();
          uint64_t v30 = v47;
          sub_100266EDC();
          swift_beginAccess();
          sub_10035EF88();
          uint64_t v31 = *(void *)(*(void *)(v29 + 80) + 16);
          sub_100398CD0(v31);
          uint64_t v32 = *(void *)(v29 + 80);
          *(void *)(v32 + 16) = v31 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v31, v30, v6);
          swift_endAccess();
          swift_release();
          a3 = v46;
        }

        uint64_t v22 = (void *)&unk_100594000;
        goto LABEL_18;
      }
      __break(1u);
    }
    else if (a3)
    {
LABEL_18:
      unsigned int v33 = [v10 utteranceComplete];
      uint64_t v34 = *(void *)(a1 + v20);
      if (v33)
      {
        swift_retain();
        char v35 = v47;
        sub_100266EDC();
        swift_beginAccess();
        sub_10035EF88();
        uint64_t v36 = *(void *)(*(void *)(v34 + 80) + 16);
        sub_100398CD0(v36);
        uint64_t v37 = *(void *)(v34 + 80);
        *(void *)(v37 + 16) = v36 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v37+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v36, v35, v6);
        swift_endAccess();
        swift_release();
        uint64_t v38 = *(void *)(a1 + v20);
        uint64_t v39 = v22[320];
        uint64_t v40 = *(void **)(v38 + v39);
        *(void *)(v38 + v39) = 0;
      }
      else
      {
        uint64_t v41 = v22[320];
        uint64_t v40 = *(void **)(v34 + v41);
        *(void *)(v34 + v41) = a3;
        id v42 = v10;
      }

      return;
    }
    __break(1u);
  }
}

void sub_10026A85C()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v0);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_1002024D0();
  v7[4] = sub_10026A9E0;
  v7[5] = 0;
  v7[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v7[2] = sub_1002C2C88;
  v7[3] = &unk_10050F188;
  int v2 = _Block_copy(v7);
  static DispatchQoS.unspecified.getter();
  sub_10026B014((unint64_t *)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B7D8();
  sub_100261C0C();
  _Block_release(v2);
  uint64_t v3 = sub_10026B774();
  v4(v3);
  uint64_t v5 = sub_10026B75C();
  v6(v5);
  sub_1001FCC08();
}

void sub_10026A9E0()
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C28);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    int v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Captions server did die", v2, 2u);
    swift_slowDealloc();
  }
}

id sub_10026AB28()
{
  return sub_10026AB4C();
}

id sub_10026AB4C()
{
  return [v0 messageAudioToken];
}

id sub_10026AB5C()
{
  return sub_10026AB80();
}

id sub_10026AB80()
{
  return [v0 start];
}

id sub_10026AB90()
{
  return sub_10026AD74();
}

uint64_t sub_10026ABB4()
{
  return type metadata accessor for AnsweringMachineState();
}

uint64_t type metadata accessor for AnsweringMachineState()
{
  uint64_t result = qword_100586618;
  if (!qword_100586618) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10026AC04()
{
  sub_10026ACE0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10026ACE0()
{
  if (!qword_100589F20)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100589F20);
    }
  }
}

uint64_t type metadata accessor for AnsweringMachineController()
{
  return self;
}

uint64_t sub_10026AD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10026AD6C()
{
  return swift_release();
}

id sub_10026AD74()
{
  return [v0 stop];
}

uint64_t sub_10026AD84()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10026ADC4()
{
  sub_10026A290(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10026ADD4(void *a1)
{
  id v1 = [a1 tokens];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_1001F6204(0, (unint64_t *)&unk_1005869E8);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10026AE44(void *a1)
{
  id v1 = [a1 text];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10026AEA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026AEE0()
{
  return sub_100269F84(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10026AEEC()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_10026AF24()
{
  sub_100269B00(*(void **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), "Captions didStopCaptioningWith: client: %s reason: %s");
}

void sub_10026AF4C()
{
  sub_100269B00(*(void **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), "Captions didStartCaptioningWith: client: %s reason: %s");
}

void sub_10026AF78()
{
  sub_1002694D8(*(void **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), "Captions didDisableCaptions: client: %s enabled: %s error: %s");
}

uint64_t sub_10026AFA8()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10026AFE8()
{
  sub_1002694D8(*(void **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), "Captions didEnableCaptions: client: %s enabled: %s error: %s");
}

uint64_t sub_10026B014(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DispatchWorkItemFlags();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026B058()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 56) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v3 + 8))((char *)v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_10026B114(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10026B224;
  return sub_100267BC8(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10026B224()
{
  sub_1001F63B4();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10026B2F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10026B334()
{
  sub_1002654FC(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

char *sub_10026B33C(void *a1, void *a2, void *a3, uint64_t a4, void *a5, char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a6[OBJC_IVAR___CSDAnsweringMachineController_messageStoreController] = 0;
  *(void *)&a6[OBJC_IVAR___CSDAnsweringMachineController_lockStateObserver] = 0;
  uint64_t v13 = OBJC_IVAR___CSDAnsweringMachineController_serverBag;
  id v14 = objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag());
  unint64_t v15 = a6;
  *(void *)&a6[v13] = [v14 init];
  id v16 = (double (**)@<D0>(void *@<X0>, uint64_t@<X1>, void *@<X2>, uint64_t@<X8>))&v15[OBJC_IVAR___CSDAnsweringMachineController_answeringMachineCreationBlock];
  *id v16 = sub_10026220C;
  v16[1] = 0;
  *(void *)&v15[OBJC_IVAR___CSDAnsweringMachineController_callCenterObserver] = a1;
  *(void *)&v15[OBJC_IVAR___CSDAnsweringMachineController_queue] = a2;
  *(void *)&v15[OBJC_IVAR___CSDAnsweringMachineController_greetingsDataSource] = a3;
  *(void *)&v15[OBJC_IVAR___CSDAnsweringMachineController_answeringMachineState] = a4;
  *(void *)&v15[OBJC_IVAR___CSDAnsweringMachineController_callHistoryManager] = a5;
  id v17 = a1;
  id v18 = a2;
  id v19 = a3;
  swift_retain();
  id v20 = a5;

  v27.receiver = v15;
  v27.super_class = ObjectType;
  uint64_t result = (char *)objc_msgSendSuper2(&v27, "init");
  uint64_t v22 = *(void **)&result[OBJC_IVAR___CSDAnsweringMachineController_callCenterObserver];
  if (v22)
  {
    uint64_t v23 = result;
    [v22 setTriggers:67108901];
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v26[4] = sub_10026B5D4;
    v26[5] = v24;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1107296256;
    v26[2] = sub_1002F8408;
    void v26[3] = &unk_10050F458;
    unsigned int v25 = _Block_copy(v26);
    swift_unknownObjectRetain();
    swift_release();
    [v22 setCallChanged:v25];

    swift_release();
    _Block_release(v25);
    swift_unknownObjectRelease();
    return v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10026B59C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026B5D4(void *a1)
{
  return sub_100262318(a1);
}

void sub_10026B5DC()
{
  sub_1002625E0(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10026B5E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10026B8E0(a1, a2, a3);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return v3;
}

uint64_t sub_10026B62C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10026B8E0(a1, a2, a3);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return v3;
}

uint64_t sub_10026B674(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10026B8E0(a1, a2, a3);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return v3;
}

uint64_t sub_10026B6BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026B6F4()
{
  return sub_100263EBC(*(void *)(v0 + 16));
}

uint64_t sub_10026B75C()
{
  return v0;
}

uint64_t sub_10026B774()
{
  return v0;
}

void sub_10026B78C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_10026B79C()
{
  return swift_allocObject();
}

uint64_t sub_10026B7B4()
{
  return 0;
}

uint64_t sub_10026B7CC()
{
  return 7104878;
}

uint64_t sub_10026B7D8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10026B804()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10026B830()
{
  return 0;
}

uint64_t sub_10026B84C()
{
  return v0;
}

uint64_t sub_10026B868()
{
  return *(void *)(v0 - 208);
}

BOOL sub_10026B89C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10026B8C8(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_10026B8E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001F081C(a3);
}

uint64_t sub_10026B8FC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_10026B93C()
{
  return v0;
}

BOOL sub_10026B94C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10026B964()
{
  return *(void *)(v0 - 192);
}

uint64_t sub_10026B978(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_10026B9AC()
{
  return 0;
}

uint64_t sub_10026B9C0()
{
  return swift_slowAlloc();
}

uint64_t sub_10026BA8C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  sub_1002084D8(v1);
  return v1;
}

uint64_t sub_10026BB74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

BOOL sub_10026BB94()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  return v3 == 0;
}

id sub_10026BC1C(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR___CSDDirtyCallManager_callChanged];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet] = &_swiftEmptySetSingleton;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_queue] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

void sub_10026BCA4(void *a1)
{
  type metadata accessor for DispatchPredicate();
  sub_10026C880();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___CSDDirtyCallManager_queue);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v1);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v1);
  if (v9)
  {
    if (sub_10026BB94()) {
      sub_10026BF34();
    }
    uint64_t v11 = (uint64_t *)(v2 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
    swift_beginAccess();
    uint64_t v12 = *v11;
    swift_bridgeObjectRetain();
    char v13 = sub_1003708D4(a1, v12);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      id v14 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_10048F550;
      *(void *)(v15 + 56) = sub_10026C73C();
      *(void *)(v15 + 64) = sub_10026C7F0((unint64_t *)&qword_100585160, (void (*)(uint64_t))sub_10026C73C);
      *(void *)(v15 + 32) = a1;
      id v16 = a1;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      id v17 = (void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray);
      swift_beginAccess();
      id v18 = v16;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100398CE8(*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_beginAccess();
      sub_1002E008C((uint64_t)&v20, (uint64_t)v18);
      swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10026BF34()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)&v0[OBJC_IVAR___CSDDirtyCallManager_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v18[1] = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    id v14 = sub_100008DCC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v0;
    aBlock[4] = sub_10026C7B4;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050F548;
    id v16 = _Block_copy(aBlock);
    id v17 = v0;
    static DispatchQoS.unspecified.getter();
    id v20 = _swiftEmptyArrayStorage;
    sub_10026C7F0((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10026C370()
{
  type metadata accessor for DispatchPredicate();
  sub_10026C880();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v6 = (void (*)(void))&v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDDirtyCallManager_queue);
  *(void *)uint64_t v6 = v7;
  (*(void (**)(void (*)(void), void, unint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v0);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void (*)(void), unint64_t))(v3 + 8))(v6, v0);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v9 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10048F550;
  uint64_t v11 = (unint64_t *)(v1 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray);
  swift_beginAccess();
  unint64_t v12 = *v11;
  *(void *)(v10 + 56) = sub_1001F081C(&qword_100586A98);
  *(void *)(v10 + 64) = sub_1001FCB74(&qword_100586AA0, &qword_100586A98);
  *(void *)(v10 + 32) = v12;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t result = sub_10026BB94();
  if (result) {
    return result;
  }
  unint64_t v0 = *v11;
  *uint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  id v14 = (void *)(v1 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
  swift_beginAccess();
  *id v14 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void))(v1 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  if (v0 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    sub_1002084D8((uint64_t)v6);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return sub_100208490((uint64_t)v6);
  }
  uint64_t v15 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_retain();
  if (!v15) {
    goto LABEL_12;
  }
LABEL_6:
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v0 + 8 * i + 32);
      }
      id v18 = v17;
      v6();
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_10026C668()
{
}

uint64_t type metadata accessor for DirtyCallManager()
{
  return self;
}

unint64_t sub_10026C73C()
{
  unint64_t result = qword_10058A480;
  if (!qword_10058A480)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10058A480);
  }
  return result;
}

uint64_t sub_10026C77C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026C7B4()
{
  return sub_10026C370();
}

uint64_t sub_10026C7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10026C7E8()
{
  return swift_release();
}

uint64_t sub_10026C7F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026C838()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026C870(uint64_t a1)
{
  return sub_10027D6F4(a1, *(void *)(v1 + 16));
}

void sub_10026C8A0(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v27 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  if (v2)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_1002E3EC4();
    if (v27)
    {
      uint64_t v3 = __CocoaSet.startIndex.getter();
      char v5 = 1;
    }
    else
    {
      uint64_t v3 = sub_100261A1C(v1);
      char v5 = v6 & 1;
    }
    uint64_t v29 = v3;
    uint64_t v30 = v4;
    char v31 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v1;
      do
      {
        uint64_t v8 = v29;
        uint64_t v7 = v30;
        char v9 = v31;
        sub_10024736C(v29, v30, v31, v1);
        id v11 = v10;
        id v12 = [v11 handle];
        id v13 = [v12 value];
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        id v17 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002E3EC4();
          id v17 = v32;
        }
        unint64_t v18 = v17[2];
        if (v18 >= v17[3] >> 1)
        {
          sub_1002E3EC4();
          id v17 = v32;
        }
        v17[2] = v18 + 1;
        uint64_t v19 = &v17[2 * v18];
        void v19[4] = v14;
        v19[5] = v16;
        if (v27)
        {
          uint64_t v1 = v26;
          if ((v9 & 1) == 0) {
            goto LABEL_24;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_1001F081C(&qword_1005858F0);
          unsigned int v25 = (void (*)(char *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v25(v28, 0);
        }
        else
        {
          uint64_t v1 = v26;
          uint64_t v20 = sub_100261934(v8);
          uint64_t v22 = v21;
          char v24 = v23;
          sub_10023561C(v8, v7, v9);
          uint64_t v29 = v20;
          uint64_t v30 = v22;
          char v31 = v24 & 1;
        }
        --v2;
      }
      while (v2);
      sub_10023561C(v29, v30, v31);
    }
  }
}

void sub_10026CB48(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v4 = v22;
    int64_t v5 = v23;
    unint64_t v6 = v24;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  int64_t v18 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    int64_t v10 = v5;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v25;
    swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_32;
    }
LABEL_31:
    unsigned int v17 = [v13 isEquivalentToHandle:a2];

    if (v17) {
      goto LABEL_32;
    }
  }
  if (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_30:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (!v13) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v18) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v19 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v10 + 2;
      if (v10 + 2 >= v18) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v19 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v10 + 3;
        if (v10 + 3 >= v18) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v19 + 8 * v5);
        if (!v15)
        {
          int64_t v5 = v10 + 4;
          if (v10 + 4 >= v18) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v5);
          if (!v15)
          {
            int64_t v5 = v10 + 5;
            if (v10 + 5 >= v18) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v19 + 8 * v5);
            if (!v15)
            {
              int64_t v16 = v10 + 6;
              while (v16 < v18)
              {
                unint64_t v15 = *(void *)(v19 + 8 * v16++);
                if (v15)
                {
                  int64_t v5 = v16 - 1;
                  goto LABEL_29;
                }
              }
LABEL_32:
              sub_100206FA0();

              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_10026CE94()
{
  return sub_100274540();
}

uint64_t sub_10026CF00()
{
  return sub_10026CFB8();
}

uint64_t sub_10026CF40()
{
  return sub_100274540();
}

uint64_t sub_10026CFAC()
{
  return sub_10026CFB8();
}

uint64_t sub_10026CFB8()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

id sub_10026CFFC()
{
  type metadata accessor for MemoryPendingMembershipTrackerStorage();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  type metadata accessor for SharedPendingMembershipBag();
  uint64_t v1 = swift_allocObject();
  id v2 = sub_100273E40(v0, v1);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v2;
}

void sub_10026D0A0()
{
  sub_1001FCC38();
  char v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_100235BE8();
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F560;
  *(void *)(inited + 32) = v6;
  unint64_t v18 = inited;
  specialized Array._endMutation()();
  if (v18 >> 62)
  {
    id v17 = v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v10 = v6;
  }
  if (v9) {
    sub_1002DF820(v18);
  }
  else {
    swift_bridgeObjectRelease();
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  sub_100137760();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 removePendingMembers:isa triggeredLocally:v2 & 1];

  sub_10027465C((void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage), *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  id v12 = [v4 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = [v6 handle];
  uint64_t v14 = sub_100274644();
  sub_100272338(v14);
  uint64_t v15 = sub_100274548();
  v16(v15);

  sub_1001FCC08();
}

uint64_t sub_10026D35C(void *a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235BE8();
  sub_10027465C((void *)(v1 + OBJC_IVAR___CSDPendingMembershipTracker_storage), *(void *)(v1 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  id v8 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100272544(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

void sub_10026D498()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PendingMembershipInfo();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100202310();
  sub_100204074((void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage), *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  id v8 = sub_100271AD4(v3);
  uint64_t v9 = v8[2];
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v10 = (uint64_t)v8 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v11 = *(void *)(v6 + 72);
    do
    {
      sub_100254068(v10, v1);
      *(id *)(v1 + *(int *)(v4 + 24));
      sub_100273C54(v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += v11;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  sub_10024E278((unint64_t)_swiftEmptyArrayStorage);
  sub_1001FCC08();
}

uint64_t sub_10026D750()
{
  uint64_t v1 = *sub_100204074((void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage), *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  sub_100271B6C();
  sub_1002733F4(v2);
  sub_1002544EC();
  return v1;
}

void sub_10026D838()
{
  sub_1001FCC38();
  uint64_t v183 = v0;
  uint64_t v174 = v4;
  v176 = v5;
  id v186 = v6;
  unint64_t v179 = v7;
  uint64_t v178 = v8;
  v180 = v9;
  uint64_t v182 = type metadata accessor for PendingMembershipInfo();
  sub_10020233C();
  __chkstk_darwin(v10);
  sub_1001F7650();
  uint64_t v181 = v11;
  __chkstk_darwin(v12);
  sub_100274560();
  unint64_t v13 = type metadata accessor for Date();
  sub_1001F6398();
  int64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v185 = (char *)v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v19 = sub_100202384(v18);
  __chkstk_darwin(v19);
  sub_100235BE8();
  id v189 = 0;
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v20);
  sub_100274524();
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v24 = (void *)((char *)v167 - v23);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v29 = (char *)v167 - v28;
  if (qword_100583990 != -1) {
    goto LABEL_83;
  }
  while ((byte_100586AA8 & 1) == 0)
  {
    id v170 = v27;
    uint64_t v184 = v29;
    uint64_t v172 = v26;
    uint64_t v177 = v25;
    int64_t v175 = v15;
    if (!v186)
    {
      uint64_t v39 = v176;
      uint64_t v40 = sub_1002B4A18(v176);
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v169 = v2;
        id v42 = [v39 groupUUID];
        if (v42)
        {
          uint64_t v43 = v42;
          unint64_t v173 = v13;
          uint64_t v44 = v170;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v45 = v172;
          unint64_t v46 = *(void (**)(uint64_t))(v172 + 32);
          uint64_t v47 = sub_100274650();
          uint64_t v48 = v177;
          v46(v47);
          sub_1001F0530((uint64_t)v1, 0, 1, v48);
          if (sub_1001F758C((uint64_t)v1, 1, v48) != 1)
          {
            ((void (*)(uint64_t *, void *, uint64_t))v46)(v24, v1, v48);
            uint64_t v49 = *(void (**)(char *, uint64_t *, uint64_t))(v45 + 16);
            uint64_t v50 = v184;
            v49(v184, v24, v48);
            id v51 = sub_100008DCC();
            sub_1001F081C(&qword_100584B20);
            uint64_t v52 = swift_allocObject();
            *(_OWORD *)(v52 + 16) = xmmword_10048FB00;
            v49(v44, (uint64_t *)v50, v48);
            uint64_t v53 = String.init<A>(reflecting:)();
            uint64_t v55 = v54;
            *(void *)(v52 + 56) = &type metadata for String;
            unint64_t v56 = sub_1001F3B08();
            *(void *)(v52 + 64) = v56;
            *(void *)(v52 + 32) = v53;
            *(void *)(v52 + 40) = v55;
            v195[0] = v41;
            swift_bridgeObjectRetain();
            sub_1001F081C(&qword_100587A40);
            uint64_t v57 = String.init<A>(reflecting:)();
            *(void *)(v52 + 96) = &type metadata for String;
            *(void *)(v52 + 104) = v56;
            uint64_t v58 = v41;
            *(void *)(v52 + 72) = v57;
            *(void *)(v52 + 80) = v59;
            static os_log_type_t.default.getter();
            os_log(_:dso:log:type:_:)();

            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v24, v48);
            goto LABEL_59;
          }
        }
        else
        {
          sub_1001F0530((uint64_t)v1, 1, 1, v177);
        }
        swift_bridgeObjectRelease();
        sub_100235804((uint64_t)v1, (uint64_t *)&unk_100585580);
      }
      id v152 = sub_100008DCC();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

LABEL_80:
      sub_1001FCC08();
      return;
    }
    uint64_t v169 = v2;
    unint64_t v173 = v13;
    id v171 = v186;
    id v32 = [v171 activeRemoteParticipants];
    sub_1001F6204(0, (unint64_t *)&qword_100588540);
    sub_100273C10((unint64_t *)&qword_100586D48, (unint64_t *)&qword_100588540);
    uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = sub_10039E66C(v33);
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v194 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v33 & 0xC000000000000001) != 0)
      {
        uint64_t v36 = __CocoaSet.startIndex.getter();
        char v38 = 1;
      }
      else
      {
        uint64_t v36 = sub_100261A1C(v33);
        char v38 = v61 & 1;
      }
      uint64_t v191 = v36;
      uint64_t v192 = v37;
      char v193 = v38;
      if ((v35 & 0x8000000000000000) == 0)
      {
        while (1)
        {
          uint64_t v62 = v191;
          uint64_t v63 = v192;
          char v64 = v193;
          uint64_t v65 = sub_10027470C();
          sub_100247634(v65, v66, v67, v68);
          uint64_t v70 = v69;
          [v69 handle];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((v33 & 0xC000000000000001) != 0)
          {
            if ((v64 & 1) == 0)
            {
              __break(1u);
              return;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_1001F081C(&qword_100586D50);
            unsigned __int8 v77 = (void (*)(void *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v77(v195, 0);
          }
          else
          {
            uint64_t v71 = sub_10027470C();
            uint64_t v72 = sub_100261934(v71);
            uint64_t v74 = v73;
            char v76 = v75;
            sub_10023561C(v62, v63, v64);
            uint64_t v191 = v72;
            uint64_t v192 = v74;
            char v193 = v76 & 1;
          }
          if (!--v35)
          {
            sub_10023561C(v191, v192, v193);
            uint64_t v60 = v194;
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }
        }
      }
      __break(1u);
      goto LABEL_85;
    }
    swift_bridgeObjectRelease();
    uint64_t v60 = _swiftEmptyArrayStorage;
LABEL_25:
    uint64_t v1 = (void *)sub_10024E2A8((unint64_t)v60);
    id v78 = [v171 memberHandlesEligibleForLinkApproval];
    uint64_t v79 = sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    unint64_t v24 = (uint64_t *)sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    uint64_t v80 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v191 = (uint64_t)&_swiftEmptySetSingleton;
    v168 = (void *)v80;
    uint64_t v187 = v79;
    if ((v80 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      uint64_t v25 = Set.Iterator.init(_cocoa:)();
      uint64_t v80 = v195[0];
      *(void *)&long long v188 = v195[1];
      uint64_t v81 = v195[2];
      int64_t v2 = v195[3];
      unint64_t v13 = v195[4];
    }
    else
    {
      uint64_t v82 = -1 << *(unsigned char *)(v80 + 32);
      uint64_t v83 = *(void *)(v80 + 56);
      *(void *)&long long v188 = v80 + 56;
      uint64_t v81 = ~v82;
      uint64_t v84 = -v82;
      if (v84 < 64) {
        uint64_t v85 = ~(-1 << v84);
      }
      else {
        uint64_t v85 = -1;
      }
      unint64_t v13 = v85 & v83;
      uint64_t v25 = swift_bridgeObjectRetain();
      int64_t v2 = 0;
    }
    v167[1] = v81;
    int64_t v86 = (unint64_t)(v81 + 64) >> 6;
    if (v80 < 0)
    {
      while (1)
      {
        uint64_t v89 = __CocoaSet.Iterator.next()();
        if (!v89) {
          break;
        }
        uint64_t v190 = v89;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v24 = v194;
        swift_unknownObjectRelease();
        int64_t v15 = v2;
        uint64_t v87 = v13;
        if (!v24) {
          break;
        }
LABEL_47:
        id v92 = v24;
        uint64_t v93 = sub_100274644();
        id v94 = v189;
        sub_10026CB48(v93, v95);
        id v189 = v94;
        if (v96)
        {
          unint64_t v24 = &v191;
          sub_1002E00C4((uint64_t)&v194, (uint64_t)v92);
        }
        else
        {
        }
        int64_t v2 = v15;
        unint64_t v13 = v87;
        if ((v80 & 0x8000000000000000) == 0) {
          goto LABEL_32;
        }
      }
LABEL_58:
      sub_100206FA0();
      id v98 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v99 = sub_1001FCCB8();
      long long v188 = xmmword_10048F550;
      *(_OWORD *)(v99 + 16) = xmmword_10048F550;
      uint64_t v58 = v191;
      uint64_t v194 = (void *)v191;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_100587A40);
      uint64_t v100 = String.init<A>(reflecting:)();
      uint64_t v102 = v101;
      *(void *)(v99 + 56) = &type metadata for String;
      unint64_t v103 = sub_1001F3B08();
      *(void *)(v99 + 64) = v103;
      *(void *)(v99 + 32) = v100;
      *(void *)(v99 + 40) = v102;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      id v104 = sub_100008DCC();
      uint64_t v105 = sub_1001FCCB8();
      *(_OWORD *)(v105 + 16) = v188;
      uint64_t v194 = v1;
      uint64_t v106 = String.init<A>(reflecting:)();
      *(void *)(v105 + 56) = &type metadata for String;
      *(void *)(v105 + 64) = v103;
      *(void *)(v105 + 32) = v106;
      *(void *)(v105 + 40) = v107;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      id v108 = sub_100008DCC();
      uint64_t v109 = sub_1001FCCB8();
      *(_OWORD *)(v109 + 16) = v188;
      uint64_t v194 = v168;
      uint64_t v110 = String.init<A>(reflecting:)();
      *(void *)(v109 + 56) = &type metadata for String;
      *(void *)(v109 + 64) = v103;
      *(void *)(v109 + 32) = v110;
      *(void *)(v109 + 40) = v111;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      id v112 = v171;
      id v113 = [v171 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_59:
      *(void *)&long long v188 = v58;
      Date.init()();
      uint64_t v35 = v169;
      UUID.init()();
      uint64_t v114 = v182;
      sub_10024640C();
      v115();
      id v116 = (uint64_t *)(v35 + *(int *)(v114 + 20));
      uint64_t v117 = v178;
      *id v116 = v58;
      v116[1] = v117;
      unint64_t v118 = v179;
      v116[2] = v179;
      uint64_t v119 = v180;
      *(void *)(v35 + *(int *)(v114 + 24)) = v180;
      swift_bridgeObjectRetain();
      sub_1001F7440(v117, v118);
      uint64_t v33 = v119;
      id v120 = sub_100008DCC();
      uint64_t v187 = sub_1001F081C(&qword_100584B20);
      uint64_t v121 = swift_allocObject();
      *(_OWORD *)(v121 + 16) = xmmword_1004904F0;
      sub_100254068(v35, v181);
      uint64_t v122 = String.init<A>(reflecting:)();
      uint64_t v124 = v123;
      *(void *)(v121 + 56) = &type metadata for String;
      unint64_t v125 = sub_1001F3B08();
      *(void *)(v121 + 64) = v125;
      *(void *)(v121 + 32) = v122;
      *(void *)(v121 + 40) = v124;
      uint64_t v126 = v172;
      sub_10024640C();
      v127();
      uint64_t v128 = String.init<A>(reflecting:)();
      *(void *)(v121 + 96) = &type metadata for String;
      *(void *)(v121 + 104) = v125;
      *(void *)(v121 + 72) = v128;
      *(void *)(v121 + 80) = v129;
      uint64_t v191 = (uint64_t)[(id)v33 handle];
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      uint64_t v130 = String.init<A>(reflecting:)();
      *(void *)(v121 + 136) = &type metadata for String;
      *(void *)(v121 + 144) = v125;
      *(void *)(v121 + 112) = v130;
      *(void *)(v121 + 120) = v131;
      static os_log_type_t.default.getter();
      sub_100274638();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      sub_10027465C((void *)(v183 + OBJC_IVAR___CSDPendingMembershipTracker_storage), *(void *)(v183 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
      id v132 = [(id)v33 handle];
      uint64_t v133 = sub_100274644();
      uint64_t v134 = (uint64_t)v189;
      sub_100272114(v133, v135);
      if (v134)
      {

        swift_bridgeObjectRelease();
        id v136 = sub_100008DCC();
        uint64_t v137 = sub_1001FCCB8();
        *(_OWORD *)(v137 + 16) = xmmword_10048F550;
        uint64_t v191 = v134;
        swift_errorRetain();
        sub_1001F081C((uint64_t *)&unk_100585FE0);
        uint64_t v138 = String.init<A>(reflecting:)();
        *(void *)(v137 + 56) = &type metadata for String;
        *(void *)(v137 + 64) = v125;
        *(void *)(v137 + 32) = v138;
        *(void *)(v137 + 40) = v139;
        static os_log_type_t.default.getter();
        sub_100274464();

        swift_bridgeObjectRelease();
        swift_errorRelease();
        sub_100273C54(v35);
        sub_100274734();
        sub_1001F7664();
        v140();
        (*(void (**)(char *, uint64_t))(v126 + 8))(v184, v177);
        goto LABEL_80;
      }
      uint64_t v3 = v35;

      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [(id)v33 setDateReceivedLetMeIn:isa];

      Class v142 = Date._bridgeToObjectiveC()().super.isa;
      [(id)v33 setDateInitiatedLetMeIn:v142];

      if (v186)
      {
        sub_1001F081C((uint64_t *)&unk_100584DD0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10048F560;
        *(void *)(inited + 32) = v33;
        uint64_t v191 = inited;
        specialized Array._endMutation()();
        unint64_t v144 = v191;
        if ((unint64_t)v191 >> 62)
        {
          if (v191 < 0) {
            uint64_t v145 = v191;
          }
          else {
            uint64_t v145 = v191 & 0xFFFFFFFFFFFFFF8;
          }
          id v165 = v186;
          id v166 = (id)v33;
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          sub_1002469FC();
        }
        else
        {
          uint64_t v145 = *(void *)((v191 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v146 = v186;
          id v147 = (id)v33;
        }
        if (v145) {
          sub_1002DF820(v144);
        }
        else {
          swift_bridgeObjectRelease();
        }
        sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
        sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
        sub_100137760();
        Set._bridgeToObjectiveC()();
        sub_1002469FC();
        id v153 = v186;
        [v186 addPendingMembers:&unk_1005888A0 triggeredLocally:1];
      }
      else
      {
        uint64_t v148 = v183;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          BOOL v150 = (void *)Strong;
          Class v151 = UUID._bridgeToObjectiveC()().super.isa;
          [v150 pendingMembershipTracker:v148 didTrack:v33 forGroupUUID:v151];

          swift_unknownObjectRelease();
        }
      }
      if (qword_100583998 != -1) {
LABEL_85:
      }
        swift_once();
      if (byte_100586AA9)
      {
        swift_bridgeObjectRelease();
        id v154 = sub_100008DCC();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
      }
      else
      {
        uint64_t v155 = swift_unknownObjectWeakLoadStrong();
        if (v155)
        {
          v156 = (void *)v155;
          sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
          Class v157 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v158 = UUID._bridgeToObjectiveC()().super.isa;
          [v156 sendDelegationMessageTo:v157 conversation:v186 link:v176 transactionUUID:v158 forMember:v33];
          swift_unknownObjectRelease();

          uint64_t v35 = v3;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      sub_100273C54(v35);
      sub_100274734();
      sub_1001F7664();
      v159();
      sub_100274734();
      v160(v184, v177);
      goto LABEL_80;
    }
LABEL_32:
    if (v13)
    {
      uint64_t v87 = (v13 - 1) & v13;
      unint64_t v88 = __clz(__rbit64(v13)) | (v2 << 6);
      int64_t v15 = v2;
      goto LABEL_46;
    }
    int64_t v15 = v2 + 1;
    if (!__OFADD__(v2, 1))
    {
      if (v15 >= v86) {
        goto LABEL_58;
      }
      unint64_t v90 = *(void *)(v188 + 8 * v15);
      if (!v90)
      {
        int64_t v91 = v2 + 2;
        if (v2 + 2 >= v86) {
          goto LABEL_58;
        }
        unint64_t v90 = *(void *)(v188 + 8 * v91);
        if (v90) {
          goto LABEL_44;
        }
        int64_t v91 = v2 + 3;
        if (v2 + 3 >= v86) {
          goto LABEL_58;
        }
        unint64_t v90 = *(void *)(v188 + 8 * v91);
        if (v90)
        {
LABEL_44:
          int64_t v15 = v91;
        }
        else
        {
          int64_t v15 = v2 + 4;
          if (v2 + 4 >= v86) {
            goto LABEL_58;
          }
          unint64_t v90 = *(void *)(v188 + 8 * v15);
          if (!v90)
          {
            int64_t v97 = v2 + 5;
            while (v97 < v86)
            {
              unint64_t v90 = *(void *)(v188 + 8 * v97++);
              if (v90)
              {
                int64_t v15 = v97 - 1;
                goto LABEL_45;
              }
            }
            goto LABEL_58;
          }
        }
      }
LABEL_45:
      uint64_t v87 = (v90 - 1) & v90;
      unint64_t v88 = __clz(__rbit64(v90)) + (v15 << 6);
LABEL_46:
      unint64_t v24 = (uint64_t *)*(id *)(*(void *)(v80 + 48) + 8 * v88);
      if (v24) {
        goto LABEL_47;
      }
      goto LABEL_58;
    }
    __break(1u);
LABEL_83:
    uint64_t v3 = v2;
    uint64_t v161 = v25;
    BOOL v162 = v29;
    char v163 = v27;
    uint64_t v164 = v26;
    swift_once();
    unint64_t v27 = v163;
    uint64_t v29 = v162;
    uint64_t v26 = v164;
    uint64_t v25 = v161;
    int64_t v2 = v3;
  }
  id v189 = sub_100008DCC();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  sub_1001FCC08();
}

void sub_10026ECD0()
{
  sub_1001FCC38();
  uint64_t v58 = v3;
  uint64_t v59 = v1;
  uint64_t v5 = v4;
  id v57 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1001F081C(&qword_100588110);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_100202310();
  uint64_t v11 = type metadata accessor for PendingMembershipInfo();
  sub_10020233C();
  __chkstk_darwin(v12);
  sub_10024672C();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v56 - v17;
  type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_1002745B8();
  if (qword_100583990 != -1)
  {
    uint64_t v52 = v22;
    swift_once();
    uint64_t v22 = v52;
  }
  if ((byte_100586AA8 & 1) == 0)
  {
    if (qword_100583998 != -1)
    {
      uint64_t v53 = v22;
      swift_once();
      uint64_t v22 = v53;
    }
    if ((byte_100586AA9 & 1) == 0)
    {
      uint64_t v25 = v22;
      Date.init()();
      type metadata accessor for UUID();
      sub_10020233C();
      uint64_t v26 = sub_100274650();
      v27(v26);
      v56[2] = v25;
      v56[3] = v20;
      v56[1] = v0;
      sub_10024640C();
      v28();
      uint64_t v29 = &v18[*(int *)(v11 + 20)];
      *(void *)uint64_t v29 = v5;
      *(_OWORD *)(v29 + 8) = xmmword_100491490;
      *(void *)&v18[*(int *)(v11 + 24)] = v8;
      uint64_t v30 = &v59[OBJC_IVAR___CSDPendingMembershipTracker_storage];
      sub_100204074(&v59[OBJC_IVAR___CSDPendingMembershipTracker_storage], *(void *)&v59[OBJC_IVAR___CSDPendingMembershipTracker_storage + 24]);
      id v31 = v8;
      id v32 = v5;
      uint64_t v33 = v31;
      id v34 = [v31 handle];
      uint64_t v35 = v58;
      sub_1002719D4(v58);

      if (sub_1001F758C(v2, 1, v11) == 1)
      {
        sub_100235804(v2, &qword_100588110);
      }
      else
      {
        sub_1002540CC(v2, v15);
        uint64_t v36 = v15 + *(int *)(v11 + 20);
        uint64_t v37 = *(void **)v36;
        uint64_t v38 = *(void *)(v36 + 8);
        unint64_t v39 = *(void *)(v36 + 16);
        sub_100272BA4(*(void **)v36, v38, v39);
        sub_100273C54(v15);
        sub_100272CC0(v37, v38, v39);
        if ((v39 & 0x2000000000000000) == 0) {
          goto LABEL_23;
        }
      }
      sub_10027465C(v30, *((void *)v30 + 3));
      id v40 = [v33 handle];
      sub_100272114((uint64_t)v18, v35);

      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [v33 setDateReceivedLetMeIn:isa];

      if (v57)
      {
        sub_1001F081C((uint64_t *)&unk_100584DD0);
        uint64_t inited = (__n128 *)swift_initStackObject();
        sub_1002744E0(inited, (__n128)xmmword_10048F560);
        unint64_t v43 = v60;
        if ((unint64_t)v60 >> 62)
        {
          if (v60 < 0) {
            uint64_t v44 = v60;
          }
          else {
            uint64_t v44 = v60 & 0xFFFFFFFFFFFFFF8;
          }
          id v54 = v33;
          id v55 = v57;
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          sub_1002469FC();
        }
        else
        {
          uint64_t v44 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v45 = v33;
          id v46 = v57;
        }
        if (v44) {
          sub_1002DF820(v43);
        }
        else {
          swift_bridgeObjectRelease();
        }
        sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
        sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
        v49.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v50 = v57;
        [v57 addPendingMembers:v49.super.isa triggeredLocally:0];

        goto LABEL_22;
      }
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v48 = (void *)Strong;
        v49.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        [v48 pendingMembershipTracker:v59 didTrack:v33 forGroupUUID:v49.super.isa];
        swift_unknownObjectRelease();
LABEL_22:
      }
LABEL_23:
      sub_100273C54((uint64_t)v18);
      sub_1001F7664();
      v51();
      sub_1001FCC08();
      return;
    }
  }
  uint64_t v59 = (char *)sub_100008DCC();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  sub_1001FCC08();
}

void sub_10026F470()
{
}

void sub_10026F4A0()
{
}

void sub_10026F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1001FCC38();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  unint64_t v27 = v26;
  uint64_t v29 = v28;
  id v31 = v30;
  uint64_t v32 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v38 = v29;
  id v39 = v27;
  id v40 = v25;
  id v41 = v31;
  v23(v38, v39, v40, v37);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v32);
  sub_1001FCC08();
}

void sub_10026F5D4()
{
}

void sub_10026F660()
{
}

void sub_10026F6EC()
{
  sub_1001FCC38();
  uint64_t v221 = v0;
  uint64_t v222 = v3;
  uint64_t v220 = v4;
  id v223 = v5;
  unint64_t v7 = v6;
  LODWORD(v219) = v8;
  uint64_t v9 = sub_1001F081C(&qword_100588110);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_100235BE8();
  uint64_t v11 = type metadata accessor for PendingMembershipInfo();
  sub_10020233C();
  __chkstk_darwin(v12);
  sub_1001F7650();
  uint64_t v218 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v217 = &v198[-v16];
  __chkstk_darwin(v15);
  sub_100274720();
  __chkstk_darwin(v17);
  uint64_t v19 = &v198[-v18];
  uint64_t v20 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_100274524();
  uint64_t v25 = __chkstk_darwin(v24);
  unint64_t v27 = &v198[-v26];
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = &v198[-v29];
  uint64_t v31 = __chkstk_darwin(v28);
  __chkstk_darwin(v31);
  uint64_t v35 = &v198[-v34];
  if (qword_100583990 != -1)
  {
    sub_1002745A0();
    swift_once();
    sub_100274608();
  }
  if ((byte_100586AA8 & 1) == 0)
  {
    if (qword_100583998 != -1)
    {
      sub_1002745A0();
      swift_once();
      sub_100274608();
    }
    if ((byte_100586AA9 & 1) == 0)
    {
      uint64_t v211 = v33;
      uint64_t v215 = v32;
      uint64_t v214 = v20;
      uint64_t v216 = v22;
      id v38 = [v223 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = *(void *)(v221 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24);
      uint64_t v208 = (void *)(v221 + OBJC_IVAR___CSDPendingMembershipTracker_storage);
      sub_10027465C((void *)(v221 + OBJC_IVAR___CSDPendingMembershipTracker_storage), v39);
      id v40 = [v7 handle];
      sub_1002719D4((uint64_t)v35);

      if (sub_1001F758C(v1, 1, v11) == 1)
      {
        sub_100235804(v1, &qword_100588110);
        id v41 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_10048FB00;
        unint64_t v43 = v7;
        uint64_t v44 = v216;
        uint64_t v45 = v214;
        sub_10024640C();
        v46();
        uint64_t v47 = String.init<A>(reflecting:)();
        uint64_t v49 = v48;
        *(void *)(v42 + 56) = &type metadata for String;
        unint64_t v50 = sub_1001F3B08();
        *(void *)(v42 + 64) = v50;
        *(void *)(v42 + 32) = v47;
        *(void *)(v42 + 40) = v49;
        v225[0] = [v43 handle];
        sub_1001F6204(0, (unint64_t *)&unk_100586E00);
        uint64_t v51 = sub_100274768();
        *(void *)(v42 + 96) = &type metadata for String;
        *(void *)(v42 + 104) = v50;
        *(void *)(v42 + 72) = v51;
        *(void *)(v42 + 80) = v52;
        static os_log_type_t.default.getter();
        sub_100274464();

        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v35, v45);
LABEL_50:
        sub_1001FCC08();
        return;
      }
      v202 = v27;
      uint64_t v209 = v35;
      int v53 = v219 & 1;
      uint64_t v54 = sub_100274650();
      uint64_t v213 = v19;
      sub_1002540CC(v54, v55);
      id v207 = sub_100008DCC();
      uint64_t v203 = sub_1001F081C(&qword_100584B20);
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_1004914A0;
      sub_100254068((uint64_t)v19, v2);
      uint64_t v57 = String.init<A>(reflecting:)();
      uint64_t v59 = v58;
      *(void *)(v56 + 56) = &type metadata for String;
      unint64_t v60 = sub_1001F3B08();
      *(void *)(v56 + 64) = v60;
      *(void *)(v56 + 32) = v57;
      *(void *)(v56 + 40) = v59;
      unsigned int v199 = v53;
      LOBYTE(v225[0]) = v53;
      uint64_t v61 = String.init<A>(reflecting:)();
      *(void *)(v56 + 96) = &type metadata for String;
      *(void *)(v56 + 104) = v60;
      *(void *)(v56 + 72) = v61;
      *(void *)(v56 + 80) = v62;
      v225[0] = v7;
      uint64_t v63 = sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      id v200 = v7;
      uint64_t v201 = v63;
      uint64_t v64 = String.init<A>(reflecting:)();
      *(void *)(v56 + 136) = &type metadata for String;
      *(void *)(v56 + 144) = v60;
      *(void *)(v56 + 112) = v64;
      *(void *)(v56 + 120) = v65;
      int v66 = v220;
      v225[0] = v220;
      uint64_t v67 = sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      id v212 = v66;
      uint64_t v204 = v67;
      uint64_t v68 = String.init<A>(reflecting:)();
      *(void *)(v56 + 176) = &type metadata for String;
      *(void *)(v56 + 184) = v60;
      *(void *)(v56 + 152) = v68;
      *(void *)(v56 + 160) = v69;
      uint64_t v70 = v216;
      uint64_t v72 = v216 + 16;
      uint64_t v71 = *(void (**)(void))(v216 + 16);
      uint64_t v73 = v215;
      uint64_t v74 = v214;
      ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v215, v222, v214);
      uint64_t v75 = String.init<A>(reflecting:)();
      *(void *)(v56 + 216) = &type metadata for String;
      *(void *)(v56 + 224) = v60;
      *(void *)(v56 + 192) = v75;
      *(void *)(v56 + 200) = v76;
      id v77 = [v223 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v210 = v72;
      uint64_t v219 = v71;
      ((void (*)(unsigned char *, uint64_t, uint64_t))v71)(v30, v73, v74);
      uint64_t v78 = String.init<A>(reflecting:)();
      uint64_t v80 = v79;
      uint64_t v220 = *(void (**)(void, void))(v70 + 8);
      uint64_t v216 = v70 + 8;
      v220(v73, v74);
      *(void *)(v56 + 256) = &type metadata for String;
      *(void *)(v56 + 264) = v60;
      unint64_t v81 = v60;
      *(void *)(v56 + 232) = v78;
      *(void *)(v56 + 240) = v80;
      static os_log_type_t.default.getter();
      uint64_t v82 = v207;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      uint64_t v83 = &v213[*(int *)(v11 + 20)];
      uint64_t v84 = *(void **)v83;
      uint64_t v85 = *((void *)v83 + 1);
      unint64_t v86 = *((void *)v83 + 2);
      id v207 = (id)v85;
      unint64_t v206 = v86;
      v205 = v84;
      if ((v86 & 0x2000000000000000) != 0)
      {
        sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
        id v120 = v84;
        uint64_t v121 = v212;
        int64_t v122 = static NSObject.== infix(_:_:)();
        uint64_t v123 = sub_100274570();
        uint64_t v124 = v218;
        sub_100254068(v123, v218);
        ((void (*)(uint64_t, uint64_t, uint64_t))v219)(v211, v222, v74);
        if (v122)
        {
          int64_t v122 = static UUID.== infix(_:_:)();
          uint64_t v125 = v74;
          sub_10027444C();
          v126();
          sub_100273C54(v124);
          if (v122)
          {
            sub_1001F081C((uint64_t *)&unk_100584DD0);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_10048F560;
            uint64_t v128 = v200;
            *(void *)(inited + 32) = v200;
            sub_100274500(inited);
            sub_100274674();
            if (v129)
            {
              if (v122 < 0) {
                uint64_t v130 = (void *)v122;
              }
              else {
                uint64_t v130 = (void *)(v122 & 0xFFFFFFFFFFFFFF8);
              }
              id v196 = v128;
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.endIndex.getter();
              sub_1002544EC();
            }
            else
            {
              uint64_t v130 = *(void **)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10);
              id v131 = v128;
            }
            id v132 = v223;
            uint64_t v133 = v208;
            if (v130) {
              sub_1002DF820(v122);
            }
            else {
              swift_bridgeObjectRelease();
            }
            sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
            Set._bridgeToObjectiveC()();
            sub_1002544EC();
            [v132 removePendingMembers:v130 triggeredLocally:1];

            id v175 = [v132 delegate];
            if (v175)
            {
              [v175 conversationChanged:v132];
              swift_unknownObjectRelease();
            }
            sub_100204074(v133, v133[3]);
            uint64_t v176 = sub_100274518();
            sub_100272338(v176);
            sub_100274498((uint64_t)v225);
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v125 = v74;
          sub_10027444C();
          v150();
          sub_100273C54(v124);
        }
        id v151 = sub_100008DCC();
        uint64_t v152 = sub_1002744BC();
        *(_OWORD *)(v152 + 16) = xmmword_10048FAF0;
        v225[0] = v120;
        id v153 = v120;
        uint64_t v154 = String.init<A>(reflecting:)();
        *(void *)(v152 + 56) = &type metadata for String;
        *(void *)(v152 + 64) = v81;
        *(void *)(v152 + 32) = v154;
        *(void *)(v152 + 40) = v155;
        v225[0] = v121;
        id v156 = v121;
        uint64_t v157 = String.init<A>(reflecting:)();
        *(void *)(v152 + 96) = &type metadata for String;
        *(void *)(v152 + 104) = v81;
        sub_100274620(v157, v158);
        uint64_t v160 = *(void *)(v159 - 256);
        uint64_t v161 = v219;
        sub_1002746C0();
        v161();
        uint64_t v162 = String.init<A>(reflecting:)();
        *(void *)(v152 + 136) = &type metadata for String;
        *(void *)(v152 + 144) = v81;
        *(void *)(v152 + 112) = v162;
        *(void *)(v152 + 120) = v163;
        sub_1002746C0();
        v161();
        uint64_t v164 = String.init<A>(reflecting:)();
        *(void *)(v152 + 176) = &type metadata for String;
        *(void *)(v152 + 184) = v81;
        *(void *)(v152 + 152) = v164;
        *(void *)(v152 + 160) = v165;
        static os_log_type_t.default.getter();
        sub_100274464();

        swift_bridgeObjectRelease();
        sub_100274498((uint64_t)v225);
        sub_100273C54(v160);
        uint64_t v166 = sub_100274518();
        v220(v166, v125);
        goto LABEL_50;
      }
      swift_bridgeObjectRetain();
      sub_1001F7440(v85, v86);
      uint64_t v87 = sub_1003708E8(v212, (uint64_t)v84);
      uint64_t v88 = sub_100274570();
      uint64_t v89 = v217;
      sub_100254068(v88, (uint64_t)v217);
      sub_10024640C();
      v90();
      if (v87)
      {
        uint64_t v87 = static UUID.== infix(_:_:)();
        sub_10027444C();
        v91();
        sub_100273C54((uint64_t)v89);
        if (v87)
        {
          id v92 = [v223 kickedMembers];
          uint64_t v93 = (void *)sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
          uint64_t v94 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10026C8A0(v94);
          char v96 = v95;
          swift_bridgeObjectRelease();
          int64_t v97 = v212;
          id v98 = [v212 value];
          uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v101 = v100;

          LOBYTE(v98) = sub_10039E4D0(v99, v101, v96);
          swift_bridgeObjectRelease();
          if (v98)
          {
            swift_bridgeObjectRelease();
            id v102 = sub_100008DCC();
            uint64_t v103 = sub_1002744BC();
            *(_OWORD *)(v103 + 16) = xmmword_10048FAF0;
            v225[0] = v96;
            sub_1001F081C(&qword_10058B600);
            uint64_t v104 = sub_100274768();
            *(void *)(v103 + 56) = &type metadata for String;
            *(void *)(v103 + 64) = v81;
            *(void *)(v103 + 32) = v104;
            *(void *)(v103 + 40) = v105;
            v225[0] = v97;
            id v106 = v97;
            uint64_t v107 = String.init<A>(reflecting:)();
            *(void *)(v103 + 96) = &type metadata for String;
            *(void *)(v103 + 104) = v81;
            uint64_t v109 = sub_100274620(v107, v108);
            uint64_t v111 = *(void *)(v110 - 256);
            uint64_t v112 = v214;
            id v113 = v219;
            ((void (*)(uint64_t, uint64_t, uint64_t))v219)(v109, v111, v214);
            uint64_t v114 = String.init<A>(reflecting:)();
            *(void *)(v103 + 136) = &type metadata for String;
            *(void *)(v103 + 144) = v81;
            *(void *)(v103 + 112) = v114;
            *(void *)(v103 + 120) = v115;
            ((void (*)(void *, uint64_t, uint64_t))v113)(v96, v222, v112);
            uint64_t v116 = String.init<A>(reflecting:)();
            *(void *)(v103 + 176) = &type metadata for String;
            *(void *)(v103 + 184) = v81;
            *(void *)(v103 + 152) = v116;
            *(void *)(v103 + 160) = v117;
            static os_log_type_t.default.getter();
            sub_100274464();
            sub_1002746EC();

            swift_bridgeObjectRelease();
            sub_100273C54(v111);
            uint64_t v118 = sub_100274518();
            uint64_t v119 = v112;
LABEL_49:
            v220(v118, v119);
            goto LABEL_50;
          }
          swift_bridgeObjectRelease();
          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v167 = swift_initStackObject();
          *(_OWORD *)(v167 + 16) = xmmword_10048F560;
          v168 = v200;
          *(void *)(v167 + 32) = v200;
          sub_100274500(v167);
          unint64_t v169 = v225[0];
          if (v225[0] >> 62)
          {
            id v197 = v168;
            swift_bridgeObjectRetain();
            uint64_t v170 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v170 = *(void *)((v225[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            id v171 = v168;
          }
          uint64_t v172 = v199;
          unint64_t v173 = v212;
          id v174 = v223;
          if (v170) {
            sub_1002DF820(v169);
          }
          else {
            swift_bridgeObjectRelease();
          }
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v174 removePendingMembers:isa triggeredLocally:1];

          v225[0] = v205;
          uint64_t Strong = swift_unknownObjectWeakLoadStrong();
          if (v172)
          {
            if (!Strong)
            {
LABEL_44:
              uint64_t v189 = swift_unknownObjectWeakLoadStrong();
              if (v189)
              {
                uint64_t v190 = (void *)v189;
                sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
                sub_100137760();
                Class v191 = Set._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                Class v192 = UUID._bridgeToObjectiveC()().super.isa;
                [v190 sendDelegationResponseMessageTo:v191 conversation:v174 transactionUUID:v192 forMember:v168 withResponse:v172];

                swift_unknownObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              uint64_t v193 = (uint64_t)v207;
              sub_100204074(v208, v208[3]);
              uint64_t v194 = sub_100274518();
              sub_100272338(v194);
              sub_1001F7498(v193, v206);
LABEL_48:
              uint64_t v195 = sub_100274570();
              sub_100273C54(v195);
              uint64_t v118 = sub_100274518();
              uint64_t v119 = v214;
              goto LABEL_49;
            }
            Class v179 = sub_1002746CC().super.isa;
            v180 = (void *)sub_100274754();
            [v180 v181];
          }
          else
          {
            if (Strong)
            {
              Class v182 = sub_1002746CC().super.isa;
              uint64_t v183 = (void *)sub_100274754();
              [v183 v184];

              swift_unknownObjectRelease();
            }
            id v185 = [v174 rejectedMembers];
            uint64_t v186 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v224 = v186;
            Class v187 = Set._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v174 setRejectedMembers:v187];

            id v188 = [v174 delegate];
            if (!v188) {
              goto LABEL_44;
            }
            [v188 conversationChanged:v174];
          }
          swift_unknownObjectRelease();
          goto LABEL_44;
        }
      }
      else
      {
        sub_10027444C();
        v134();
        sub_100273C54((uint64_t)v89);
      }
      id v135 = sub_100008DCC();
      uint64_t v136 = sub_1002744BC();
      *(_OWORD *)(v136 + 16) = xmmword_10048FAF0;
      v225[0] = v205;
      sub_1001F081C(&qword_100587A40);
      uint64_t v137 = sub_100274768();
      *(void *)(v136 + 56) = &type metadata for String;
      *(void *)(v136 + 64) = v81;
      unint64_t v138 = v81;
      *(void *)(v136 + 32) = v137;
      *(void *)(v136 + 40) = v139;
      v225[0] = v212;
      id v140 = v212;
      uint64_t v141 = String.init<A>(reflecting:)();
      *(void *)(v136 + 96) = &type metadata for String;
      *(void *)(v136 + 104) = v81;
      *(void *)(v136 + 72) = v141;
      *(void *)(v136 + 80) = v142;
      uint64_t v143 = (uint64_t)v213;
      unint64_t v144 = v219;
      sub_1002746C0();
      v144();
      uint64_t v145 = String.init<A>(reflecting:)();
      *(void *)(v136 + 136) = &type metadata for String;
      *(void *)(v136 + 144) = v138;
      *(void *)(v136 + 112) = v145;
      *(void *)(v136 + 120) = v146;
      sub_1002746C0();
      v144();
      uint64_t v147 = String.init<A>(reflecting:)();
      *(void *)(v136 + 176) = &type metadata for String;
      *(void *)(v136 + 184) = v138;
      *(void *)(v136 + 152) = v147;
      *(void *)(v136 + 160) = v148;
      static os_log_type_t.default.getter();
      sub_100274464();
      sub_1002746EC();

      swift_bridgeObjectRelease();
      sub_100273C54(v143);
      sub_1001F7664();
      v149();
      goto LABEL_50;
    }
  }
  id v223 = sub_100008DCC();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  sub_1001FCC08();
}

void sub_1002708F8()
{
  sub_1001FCC38();
  *(void *)&long long v136 = v4;
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v9 = sub_1001F081C(&qword_100588110);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_1002745B8();
  uint64_t v11 = type metadata accessor for PendingMembershipInfo();
  sub_10020233C();
  __chkstk_darwin(v12);
  sub_10024672C();
  __chkstk_darwin(v13);
  uint64_t v135 = (uint64_t)&v124 - v14;
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10024672C();
  __chkstk_darwin(v18);
  sub_100274720();
  __chkstk_darwin(v19);
  sub_100274560();
  if (qword_100583990 != -1)
  {
    uint64_t v133 = v20;
    swift_once();
    uint64_t v20 = v133;
  }
  if ((byte_100586AA8 & 1) == 0)
  {
    uint64_t v133 = v20;
    uint64_t v134 = v16;
    int v131 = v8 & 1;
    uint64_t v23 = (void *)sub_100274570();
    id v25 = [v23 v24];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v129 = v1;
    uint64_t v26 = *(void *)(v1 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24);
    uint64_t v128 = (void *)(v1 + OBJC_IVAR___CSDPendingMembershipTracker_storage);
    sub_10027465C((void *)(v1 + OBJC_IVAR___CSDPendingMembershipTracker_storage), v26);
    id v130 = v6;
    id v27 = [v6 handle];
    sub_1002719D4(v2);

    int v28 = sub_1001F758C(v0, 1, v11);
    uint64_t v132 = v2;
    if (v28 == 1)
    {
      sub_100235804(v0, &qword_100588110);
      id v29 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_1004904F0;
      sub_10024640C();
      v31();
      uint64_t v32 = String.init<A>(reflecting:)();
      uint64_t v34 = v33;
      *(void *)(v30 + 56) = &type metadata for String;
      unint64_t v35 = sub_1001F3B08();
      *(void *)(v30 + 64) = v35;
      *(void *)(v30 + 32) = v32;
      *(void *)(v30 + 40) = v34;
      id v36 = v130;
      v137[0] = [v130 handle];
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      uint64_t v37 = String.init<A>(reflecting:)();
      *(void *)(v30 + 96) = &type metadata for String;
      *(void *)(v30 + 104) = v35;
      *(void *)(v30 + 72) = v37;
      *(void *)(v30 + 80) = v38;
      v137[0] = v36;
      sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      id v39 = v36;
      uint64_t v40 = String.init<A>(reflecting:)();
      *(void *)(v30 + 136) = &type metadata for String;
      *(void *)(v30 + 144) = v35;
      *(void *)(v30 + 112) = v40;
      *(void *)(v30 + 120) = v41;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      uint64_t v42 = (void *)v136;
      if ([(id)v136 shouldRespondToLetMeInRequestForMember:v39])
      {
        uint64_t v43 = sub_1001FCCB8();
        *(_OWORD *)(v43 + 16) = xmmword_10048F550;
        id v44 = [v39 handle];
        if (v131)
        {
          v137[0] = v44;
          uint64_t v103 = String.init<A>(reflecting:)();
          *(void *)(v43 + 56) = &type metadata for String;
          *(void *)(v43 + 64) = v35;
          *(void *)(v43 + 32) = v103;
          *(void *)(v43 + 40) = v104;
          sub_1001F6204(0, &qword_100584B80);
          int64_t v105 = static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t inited = (__n128 *)swift_initStackObject();
          sub_1002744E0(inited, (__n128)xmmword_10048F560);
          sub_100274674();
          if (v107)
          {
            if (v105 < 0) {
              uint64_t v108 = v105;
            }
            else {
              uint64_t v108 = v105 & 0xFFFFFFFFFFFFFF8;
            }
            id v123 = v39;
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            sub_1002544EC();
          }
          else
          {
            uint64_t v108 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
            id v109 = v39;
          }
          if (v108) {
            sub_1002DF820(v105);
          }
          else {
            swift_bridgeObjectRelease();
          }
          sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
          sub_100137760();
          v113.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter()) {
              sub_1002DFA84((unint64_t)_swiftEmptyArrayStorage);
            }
            uint64_t v42 = (void *)v136;
          }
          sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
          Set._bridgeToObjectiveC()();
          sub_1002469FC();
          [v42 addRemoteMembers:v113.super.isa otherInvitedHandles:v30 triggeredLocally:1];
        }
        else
        {
          v137[0] = v44;
          uint64_t v45 = String.init<A>(reflecting:)();
          *(void *)(v43 + 56) = &type metadata for String;
          *(void *)(v43 + 64) = v35;
          *(void *)(v43 + 32) = v45;
          *(void *)(v43 + 40) = v46;
          sub_1001F6204(0, &qword_100584B80);
          int64_t v47 = static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v48 = (__n128 *)swift_initStackObject();
          sub_1002744E0(v48, (__n128)xmmword_10048F560);
          sub_100274674();
          if (v49)
          {
            if (v47 < 0) {
              unint64_t v50 = (void *)v47;
            }
            else {
              unint64_t v50 = (void *)(v47 & 0xFFFFFFFFFFFFFF8);
            }
            id v122 = v39;
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            sub_1002544EC();
          }
          else
          {
            unint64_t v50 = *(void **)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
            id v51 = v39;
          }
          if (v50) {
            sub_1002DF820(v47);
          }
          else {
            swift_bridgeObjectRelease();
          }
          sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
          Set._bridgeToObjectiveC()();
          sub_1002544EC();
          [v42 removePendingMembers:v50 triggeredLocally:1];

          id v112 = [v42 delegate];
          if (v112)
          {
            [v112 conversationChanged:v42];
            swift_unknownObjectRelease();
          }
        }
      }
      sub_100274734();
      goto LABEL_56;
    }
    sub_1002540CC(v0, v135);
    id v125 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_10048FF70;
    uint64_t v53 = sub_100274650();
    sub_100254068(v53, v54);
    uint64_t v126 = v11;
    uint64_t v55 = String.init<A>(reflecting:)();
    uint64_t v57 = v56;
    *(void *)(v52 + 56) = &type metadata for String;
    unint64_t v58 = sub_1001F3B08();
    *(void *)(v52 + 64) = v58;
    *(void *)(v52 + 32) = v55;
    *(void *)(v52 + 40) = v57;
    uint64_t v59 = v133;
    LOBYTE(v137[0]) = v131;
    uint64_t v60 = String.init<A>(reflecting:)();
    *(void *)(v52 + 96) = &type metadata for String;
    *(void *)(v52 + 104) = v58;
    *(void *)(v52 + 72) = v60;
    *(void *)(v52 + 80) = v61;
    id v62 = v130;
    v137[0] = v130;
    uint64_t v63 = (void *)sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    id v64 = v62;
    id v130 = v63;
    uint64_t v65 = String.init<A>(reflecting:)();
    *(void *)(v52 + 136) = &type metadata for String;
    *(void *)(v52 + 144) = v58;
    *(void *)(v52 + 112) = v65;
    *(void *)(v52 + 120) = v66;
    uint64_t v67 = (void *)v136;
    id v68 = [(id)v136 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v69 = v134;
    sub_10024640C();
    v70();
    uint64_t v71 = String.init<A>(reflecting:)();
    uint64_t v73 = v72;
    uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    uint64_t v134 = v69 + 8;
    v127(v3, v59);
    *(void *)(v52 + 176) = &type metadata for String;
    *(void *)(v52 + 184) = v58;
    *(void *)(v52 + 152) = v71;
    *(void *)(v52 + 160) = v73;
    v137[0] = v67;
    sub_1001F6204(0, &qword_100585690);
    id v74 = v67;
    uint64_t v75 = String.init<A>(reflecting:)();
    *(void *)(v52 + 216) = &type metadata for String;
    *(void *)(v52 + 224) = v58;
    uint64_t v76 = v64;
    *(void *)(v52 + 192) = v75;
    *(void *)(v52 + 200) = v77;
    static os_log_type_t.default.getter();
    uint64_t v78 = v125;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    int64_t v79 = sub_1001F081C((uint64_t *)&unk_100584DD0);
    uint64_t v80 = swift_initStackObject();
    long long v136 = xmmword_10048F560;
    *(_OWORD *)(v80 + 16) = xmmword_10048F560;
    *(void *)(v80 + 32) = v64;
    sub_100274500(v80);
    unint64_t v81 = v137[0];
    if (v137[0] >> 62)
    {
      if (v137[0] < 0) {
        uint64_t v82 = (void *)v137[0];
      }
      else {
        uint64_t v82 = (void *)(v137[0] & 0xFFFFFFFFFFFFFF8);
      }
      id v121 = v64;
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      sub_1002469FC();
    }
    else
    {
      uint64_t v82 = *(void **)((v137[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v83 = v64;
    }
    int v84 = v131;
    uint64_t v85 = v126;
    if (v82) {
      sub_1002DF820(v81);
    }
    else {
      swift_bridgeObjectRelease();
    }
    sub_100273C10((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set._bridgeToObjectiveC()();
    sub_1002469FC();
    [v74 removePendingMembers:v82 triggeredLocally:1];

    uint64_t v86 = v135 + *(int *)(v85 + 20);
    uint64_t v88 = *(void **)v86;
    uint64_t v87 = *(void *)(v86 + 8);
    unint64_t v89 = *(void *)(v86 + 16);
    if ((v89 & 0x2000000000000000) == 0)
    {
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      swift_bridgeObjectRetain();
      sub_1001F7440(v87, v89);
      if (v84)
      {
        if (Strong)
        {
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v95 = v74;
          [Strong pendingMembershipTracker:v129 willAdd:v76 to:v74 using:isa];
          sub_1001F7498(v87, v89);

          swift_unknownObjectRelease();
        }
        else
        {
          id v95 = v74;
          sub_1001F7498(v87, v89);
        }
        uint64_t v111 = 1;
      }
      else
      {
        if (Strong)
        {
          Class v91 = Data._bridgeToObjectiveC()().super.isa;
          [Strong pendingMembershipTracker:v129 willNotAdd:v76 to:v74 using:v91];

          swift_unknownObjectRelease();
        }
        id v92 = [v74 rejectedMembers];
        uint64_t v93 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        v137[0] = v93;
        Set._bridgeToObjectiveC()();
        sub_1002544EC();
        [v74 setRejectedMembers:v137];

        id v94 = [v74 delegate];
        id v95 = v74;
        if (v94)
        {
          [v94 conversationChanged:v74];
          sub_1001F7498(v87, v89);
          swift_unknownObjectRelease();
        }
        else
        {
          sub_1001F7498(v87, v89);
        }
        uint64_t v111 = 0;
      }
      goto LABEL_52;
    }
    uint64_t v96 = swift_initStackObject();
    *(_OWORD *)(v96 + 16) = v136;
    *(void *)(v96 + 32) = v88;
    sub_100274500(v96);
    sub_100274674();
    if (v97)
    {
      if (v79 < 0) {
        uint64_t v98 = v79;
      }
      else {
        uint64_t v98 = v79 & 0xFFFFFFFFFFFFFF8;
      }
      sub_1002745EC();
      sub_1002745EC();
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      sub_1002544EC();
    }
    else
    {
      uint64_t v98 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_1002745EC();
      id v99 = v88;
    }
    if (v98)
    {
      sub_1002DFA84(v79);
      if (!v84)
      {
LABEL_29:
        id v100 = [v74 rejectedMembers];
        uint64_t v101 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        v137[0] = v101;
        Set._bridgeToObjectiveC()();
        sub_1002544EC();
        [v74 setRejectedMembers:v137];

        id v102 = [v74 delegate];
        id v95 = v74;
        if (v102)
        {
          [v102 conversationChanged:v74];
          sub_1002745D0();
          swift_unknownObjectRelease();
        }
        else
        {
          sub_1002745D0();
        }
        uint64_t v111 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (!v84) {
        goto LABEL_29;
      }
    }
    id v95 = v74;
    sub_1002745D0();
    uint64_t v111 = 1;
LABEL_52:
    uint64_t v114 = swift_unknownObjectWeakLoadStrong();
    if (v114)
    {
      uint64_t v115 = (void *)v114;
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      sub_100273C10((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
      Class v116 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v117 = UUID._bridgeToObjectiveC()().super.isa;
      [v115 sendDelegationResponseMessageTo:v116 conversation:v95 transactionUUID:v117 forMember:v76 withResponse:v111];

      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10027465C(v128, v128[3]);
    id v118 = [v76 handle];
    uint64_t v119 = sub_100274518();
    sub_100272338(v119);

    sub_100273C54(v135);
LABEL_56:
    sub_1001F7664();
    v120();
    sub_1001FCC08();
    return;
  }
  *(void *)&long long v136 = sub_100008DCC();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  sub_100274570();
  sub_1001FCC08();
}

id sub_100271910()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PendingMembershipTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PendingMembershipTracker()
{
  return self;
}

uint64_t sub_1002719D4(uint64_t a1)
{
  id v3 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    sub_100274780();
    uint64_t v8 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1002233D4(a1, v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      sub_1002233D8(v5, v7, v9);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for PendingMembershipInfo();
      uint64_t v15 = sub_1001F2548();
      return sub_1001F0530(v15, v16, v17, v18);
    }
  }
  else
  {
    type metadata accessor for PendingMembershipInfo();
    uint64_t v11 = sub_1001F2548();
    return sub_1001F0530(v11, v12, v13, v14);
  }
}

void *sub_100271AD4(uint64_t a1)
{
  sub_100274780();
  if (!*(void *)(*(void *)(v1 + 16) + 16)) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  sub_1002337A4(a1);
  if ((v3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100252E18();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  return (void *)v5;
}

void sub_100271B6C()
{
  sub_1001FCC38();
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_100235BE8();
  uint64_t v4 = sub_1001F081C(&qword_100586D30);
  uint64_t v5 = sub_100202384(v4);
  __chkstk_darwin(v5);
  sub_10024672C();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  sub_100274560();
  swift_beginAccess();
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v54 = v10 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v55 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v57 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  int64_t v61 = 0;
  uint64_t v58 = v2;
  uint64_t v59 = v8;
  uint64_t v56 = v1;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      uint64_t v16 = (v14 - 1) & v14;
      unint64_t v17 = v15 | (v61 << 6);
LABEL_6:
      sub_100274740();
      v18();
      uint64_t v19 = *(void *)(v57 + 56);
      uint64_t v20 = sub_1001F081C(&qword_100586D38);
      *(void *)(v8 + *(int *)(v20 + 48)) = *(void *)(v19 + 8 * v17);
      sub_1001F0530(v8, 0, 1, v20);
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
    int64_t v21 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      goto LABEL_49;
    }
    if (v21 < v55)
    {
      unint64_t v22 = *(void *)(v54 + 8 * v21);
      if (v22) {
        goto LABEL_10;
      }
      int64_t v23 = v61 + 2;
      ++v61;
      if (v21 + 1 < v55)
      {
        unint64_t v22 = *(void *)(v54 + 8 * v23);
        if (v22) {
          goto LABEL_13;
        }
        int64_t v61 = v21 + 1;
        if (v21 + 2 < v55)
        {
          unint64_t v22 = *(void *)(v54 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_10;
          }
          int64_t v23 = v21 + 3;
          int64_t v61 = v21 + 2;
          if (v21 + 3 < v55) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v24 = sub_1001F081C(&qword_100586D38);
    sub_1001F0530(v8, 1, 1, v24);
    uint64_t v16 = 0;
LABEL_25:
    sub_100273CB0(v8, v2, &qword_100586D30);
    uint64_t v25 = sub_1001F081C(&qword_100586D38);
    if (sub_1001F758C(v2, 1, v25) == 1)
    {
      swift_release();
      sub_1001FCC08();
      return;
    }
    unint64_t v62 = v16;
    uint64_t v26 = *(void *)(v2 + *(int *)(v25 + 48));
    uint64_t v27 = sub_100274644();
    v28(v27);
    uint64_t v29 = *(void *)(v26 + 16);
    if (v29)
    {
      sub_1001F081C(&qword_1005861B8);
      uint64_t v30 = *(void *)(type metadata accessor for PendingMembershipInfo() - 8);
      uint64_t v31 = *(void *)(v30 + 72);
      unint64_t v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v33 = (void *)swift_allocObject();
      size_t v34 = j__malloc_size(v33);
      if (!v31) {
        goto LABEL_46;
      }
      if (v34 - v32 == 0x8000000000000000 && v31 == -1) {
        goto LABEL_50;
      }
      v33[2] = v29;
      uint64_t v33[3] = 2 * ((uint64_t)(v34 - v32) / v31);
      sub_100253C48();
      uint64_t v60 = v36;
      swift_bridgeObjectRetain();
      sub_100206FA0();
      if (v60 != v29) {
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
      uint64_t v1 = v56;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = _swiftEmptyArrayStorage;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = sub_1002337A4(v1);
    uint64_t v40 = _swiftEmptyDictionarySingleton[2];
    BOOL v41 = (v39 & 1) == 0;
    Swift::Int v42 = v40 + v41;
    if (__OFADD__(v40, v41))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    unint64_t v43 = v38;
    char v44 = v39;
    sub_1001F081C(&qword_100586D40);
    Swift::Bool v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
    uint64_t v8 = v59;
    if (v45)
    {
      unint64_t v46 = sub_1002337A4(v1);
      if ((v44 & 1) != (v47 & 1)) {
        goto LABEL_52;
      }
      unint64_t v43 = v46;
    }
    if (v44)
    {
      uint64_t v48 = _swiftEmptyDictionarySingleton[7];
      swift_bridgeObjectRelease();
      *(void *)(v48 + 8 * v43) = v33;
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v43 >> 6) + 8] |= 1 << v43;
      sub_100274740();
      v49();
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v43) = v33;
      uint64_t v50 = _swiftEmptyDictionarySingleton[2];
      BOOL v51 = __OFADD__(v50, 1);
      uint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_48;
      }
      _swiftEmptyDictionarySingleton[2] = v52;
    }
    swift_bridgeObjectRelease();
    sub_1001F7664();
    v53();
    uint64_t v2 = v58;
    unint64_t v14 = v62;
  }
  unint64_t v22 = *(void *)(v54 + 8 * v23);
  if (v22)
  {
LABEL_13:
    int64_t v21 = v23;
LABEL_10:
    uint64_t v16 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v21 << 6);
    int64_t v61 = v21;
    goto LABEL_6;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v55)
    {
      int64_t v61 = v55 - 1;
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_10;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100272114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1001F081C(&qword_100588110);
  uint64_t v8 = sub_100202384(v7);
  __chkstk_darwin(v8);
  sub_1001FCC88();
  id v9 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10027457C();
    uint64_t v11 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1002233D4(a2, v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyDictionarySingleton;
    if (v12) {
      uint64_t v13 = (void *)v12;
    }
    uint64_t v21 = (uint64_t)v13;
    sub_100254068(a1, v3);
    uint64_t v14 = type metadata accessor for PendingMembershipInfo();
    sub_1001F0530(v3, 0, 1, v14);
    sub_1002746A0();
    sub_100274680();
    sub_10027F944(v21, a2);
    swift_endAccess();
    id v15 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_10048F550;
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_100586D20);
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1001F3B08();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    static os_log_type_t.default.getter();
    sub_100274638();
    os_log(_:dso:log:type:_:)();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002733A8();
    swift_allocError();
    return swift_willThrow();
  }
}

uint64_t sub_100272338(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1001F081C(&qword_100588110);
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_1001FCC88();
  id v7 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (v7)
  {
    uint64_t v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10027457C();
    uint64_t v9 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002233D4(a1, v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyDictionarySingleton;
    if (v10) {
      uint64_t v11 = (void *)v10;
    }
    uint64_t v19 = (uint64_t)v11;
    uint64_t v12 = type metadata accessor for PendingMembershipInfo();
    sub_1001F0530(v2, 1, 1, v12);
    sub_1002746A0();
    sub_100274680();
    sub_10027F944(v19, a1);
    swift_endAccess();
    id v13 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10048F550;
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_100586D20);
    uint64_t v15 = String.init<A>(reflecting:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1001F3B08();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    static os_log_type_t.default.getter();
    sub_100274638();
    os_log(_:dso:log:type:_:)();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002733A8();
    swift_allocError();
    return swift_willThrow();
  }
}

uint64_t sub_100272544(uint64_t a1)
{
  swift_beginAccess();
  sub_1002CE740(a1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v2 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v3 = sub_1001FCCB8();
  *(_OWORD *)(v3 + 16) = xmmword_10048F550;
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_100586D20);
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1001F3B08();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  static os_log_type_t.default.getter();
  sub_100274464();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027264C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MemoryPendingMembershipTrackerStorage()
{
  return self;
}

id sub_1002726A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  id result = [self sharedInstance];
  if (result)
  {
    id v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100273CB0((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_100584CA0);
    if (v24[3])
    {
      uint64_t v10 = sub_1001F6204(0, (unint64_t *)&qword_100585590);
      if (swift_dynamicCast())
      {
        id v11 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
        *(void *)(v12 + 56) = &type metadata for String;
        *(void *)(v12 + 64) = sub_1001F3B08();
        *(void *)(v12 + 32) = a1;
        *(void *)(v12 + 40) = a2;
        *(void *)(v12 + 96) = v10;
        *(void *)(v12 + 104) = sub_100273C10((unint64_t *)&qword_100586428, (unint64_t *)&qword_100585590);
        *(void *)(v12 + 72) = v22;
        swift_bridgeObjectRetain();
        id v13 = v22;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        a3 = [v13 BOOLValue];

        return (id)(a3 & 1);
      }
    }
    else
    {
      sub_100235804((uint64_t)v24, (uint64_t *)&unk_100584CA0);
    }
    id v14 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10048FB00;
    v24[0] = a1;
    v24[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_1001F3B08();
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    LOBYTE(v24[0]) = a3 & 1;
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)(v15 + 96) = &type metadata for String;
    *(void *)(v15 + 104) = v19;
    *(void *)(v15 + 72) = v20;
    *(void *)(v15 + 80) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return (id)(a3 & 1);
  }
  __break(1u);
  return result;
}

id sub_1002729A8()
{
  id result = sub_1002726A8(0x617369642D696D6CLL, 0xEC00000064656C62, 0);
  byte_100586AA8 = result & 1;
  return result;
}

id sub_1002729EC()
{
  id result = sub_1002726A8(0xD000000000000017, 0x8000000100481ED0, 0);
  byte_100586AA9 = result & 1;
  return result;
}

uint64_t type metadata accessor for SharedPendingMembershipBag()
{
  return self;
}

uint64_t *sub_100272A50(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    id v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    id v11 = *(void **)v10;
    uint64_t v12 = *((void *)v10 + 1);
    unint64_t v13 = *((void *)v10 + 2);
    sub_100272BA4(*(void **)v10, v12, v13);
    void *v9 = v11;
    v9[1] = v12;
    _OWORD v9[2] = v13;
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v16;
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    id v21 = v16;
    v20(v17, v18, v19);
  }
  return a1;
}

id sub_100272BA4(void *a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0)
  {
    return a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    return (id)sub_1001F7440(a2, a3);
  }
}

uint64_t sub_100272BF8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_100272CC0(*(void **)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(void *)(a1 + a2[5] + 16));

  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void sub_100272CC0(void *a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1001F7498(a2, a3);
  }
}

uint64_t sub_100272D14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  unint64_t v12 = *(void *)(v9 + 16);
  sub_100272BA4(*(void **)v9, v11, v12);
  void *v8 = v10;
  v8[1] = v11;
  v8[2] = v12;
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  id v20 = v15;
  v19(v16, v17, v18);
  return a1;
}

uint64_t sub_100272E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  unint64_t v12 = *(void *)(v9 + 16);
  sub_100272BA4(*(void **)v9, v11, v12);
  uint64_t v13 = *(void **)v8;
  uint64_t v14 = *(void *)(v8 + 8);
  unint64_t v15 = *(void *)(v8 + 16);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  sub_100272CC0(v13, v14, v15);
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)(a2 + v16);
  uint64_t v18 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = v17;
  id v19 = v17;

  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

uint64_t sub_100272F30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  uint64_t v11 = *(void *)(a2 + v8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(a1 + v8) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t sub_10027300C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void **)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  unint64_t v13 = *(void *)(v8 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = v10;
  sub_100272CC0(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);

  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_100273100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100273114);
}

uint64_t sub_100273114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_100274480();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = sub_100137760();
LABEL_8:
    return sub_1001F758C(v7, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v7 = a1 + *(int *)(a3 + 28);
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1002731C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002731D4);
}

void sub_1002731D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_100274480();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return;
    }
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }

  sub_1001F0530(v11, a2, a2, v10);
}

uint64_t type metadata accessor for PendingMembershipInfo()
{
  uint64_t result = qword_100586CE0;
  if (!qword_100586CE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002732C8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1002733A8()
{
  unint64_t result = qword_100586D28;
  if (!qword_100586D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586D28);
  }
  return result;
}

uint64_t sub_1002733F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingMembershipInfo();
  uint64_t v42 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v39 - v10;
  sub_1001F081C(&qword_100586D58);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = result;
  int64_t v13 = 0;
  uint64_t v50 = v6;
  uint64_t v51 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v43 = v15;
  int64_t v44 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v47 = v6 + 16;
  uint64_t v48 = result;
  uint64_t v45 = result + 64;
  uint64_t v46 = v6 + 32;
  uint64_t v40 = v9;
  uint64_t v41 = v5;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v53 = (v19 - 1) & v19;
  int64_t v54 = v13;
  for (unint64_t i = __clz(__rbit64(v19)) | (v13 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v26 = v50;
    uint64_t v25 = v51;
    uint64_t v27 = *(void *)(v51 + 48);
    unint64_t v56 = *(void *)(v50 + 72) * i;
    int v28 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v49, v27 + v56, v5);
    uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * i);
    int64_t v55 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v55(v9, v28, v5);
    uint64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      uint64_t v57 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v31 = *(unsigned __int8 *)(v42 + 80);
      uint64_t v52 = v29;
      uint64_t v32 = v29 + ((v31 + 32) & ~v31);
      uint64_t v33 = *(void *)(v42 + 72);
      do
      {
        sub_100254068(v32, (uint64_t)v4);
        id v34 = *(id *)&v4[*(int *)(v2 + 24)];
        sub_100273C54((uint64_t)v4);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v32 += v33;
        --v30;
      }
      while (v30);
      unint64_t v35 = v57;
      swift_bridgeObjectRelease();
      uint64_t v9 = v40;
      uint64_t v5 = v41;
    }
    else
    {
      unint64_t v35 = _swiftEmptyArrayStorage;
    }
    *(void *)(v45 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v12 = v48;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v55)(*(void *)(v48 + 48) + v56, v9, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * i) = v35;
    uint64_t v36 = *(void *)(v12 + 16);
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(void *)(v12 + 16) = v38;
    unint64_t v19 = v53;
    int64_t v13 = v54;
    if (v53) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_29;
    }
    if (v21 >= v44) {
      return v12;
    }
    unint64_t v22 = *(void *)(v43 + 8 * v21);
    int64_t v23 = v13 + 1;
    if (!v22)
    {
      int64_t v23 = v13 + 2;
      if (v13 + 2 >= v44) {
        return v12;
      }
      unint64_t v22 = *(void *)(v43 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v13 + 3;
        if (v13 + 3 >= v44) {
          return v12;
        }
        unint64_t v22 = *(void *)(v43 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v53 = (v22 - 1) & v22;
    int64_t v54 = v23;
  }
  uint64_t v24 = v13 + 4;
  if (v13 + 4 >= v44) {
    return v12;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v13 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v44) {
      return v12;
    }
    unint64_t v22 = *(void *)(v43 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100273834(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = sub_10027391C(a1, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v20;
    swift_bridgeObjectRelease();
    return v15;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    sub_1002E09A0(v5, v6 + 1, v8, v9, v10, v11, v12, v13, v17, v18, v21);
    uint64_t v19 = v14;
    uint64_t v15 = sub_10027391C(a1, 1);
    *uint64_t v2 = v19;
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_10027391C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(*v2 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    id v11 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
      uint64_t v13 = 0;
      char v14 = 1;
    }
    else
    {
      uint64_t v15 = ~v8;
      unint64_t v9 = (v9 + 1) & v15;
      if ((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
      {
        uint64_t v13 = 1;
        while (1)
        {
          id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
          char v14 = static NSObject.== infix(_:_:)();

          if (v14) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v15;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v13 = 0;
      }
      else
      {
        char v14 = 0;
        uint64_t v13 = 1;
      }
    }
LABEL_12:
    uint64_t v3 = v2;
  }
  else
  {
    char v14 = 0;
    uint64_t v13 = 1;
  }
  uint64_t v17 = *(void *)(v6 + 16);
  uint64_t v18 = v17 + v13;
  if (__OFADD__(v17, v13))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 24);
  if (v19 >= v18 && (a2 & 1) != 0)
  {
    if ((v14 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (a2)
  {
    sub_1002E0CB4();
  }
  else
  {
    if (v19 >= v18)
    {
      sub_1002E2958();
      if ((v14 & 1) == 0)
      {
LABEL_33:
        uint64_t v31 = *v3;
        *(void *)(*v3 + 8 * (v9 >> 6) + 56) |= 1 << v9;
        *(void *)(*(void *)(v31 + 48) + 8 * v9) = a1;
        uint64_t v32 = *(void *)(v31 + 16);
        BOOL v33 = __OFADD__(v32, 1);
        uint64_t v34 = v32 + 1;
        if (!v33)
        {
          uint64_t result = 0;
          *(void *)(v31 + 16) = v34;
          return result;
        }
        goto LABEL_36;
      }
LABEL_30:
      uint64_t v29 = *(void *)(*v3 + 48);
      uint64_t result = *(void *)(v29 + 8 * v9);
      *(void *)(v29 + 8 * v9) = a1;
      return result;
    }
    sub_1002E3728();
  }
  uint64_t v20 = *v3;
  Swift::Int v21 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
  unint64_t v9 = v21 & ~v22;
  if (((*(void *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_32;
  }
  int64_t v23 = v3;
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  id v24 = *(id *)(*(void *)(v20 + 48) + 8 * v9);
  char v25 = static NSObject.== infix(_:_:)();

  if ((v25 & 1) == 0)
  {
    uint64_t v26 = ~v22;
    while (1)
    {
      unint64_t v9 = (v9 + 1) & v26;
      if (((*(void *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        break;
      }
      id v27 = *(id *)(*(void *)(v20 + 48) + 8 * v9);
      char v28 = static NSObject.== infix(_:_:)();

      if (v28) {
        goto LABEL_29;
      }
    }
    uint64_t v3 = v23;
LABEL_32:
    if ((v14 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
LABEL_29:
  uint64_t v3 = v23;
  if (v14) {
    goto LABEL_30;
  }
LABEL_37:
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100273C10(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001F6204(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100273C54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingMembershipInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100273CB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_100273D0C()
{
  unint64_t result = qword_1005873E0;
  if (!qword_1005873E0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005873E0);
  }
  return result;
}

id sub_100273D5C(uint64_t a1, uint64_t a2, void *a3)
{
  v10[3] = type metadata accessor for MemoryPendingMembershipTrackerStorage();
  void v10[4] = &off_10050F5D8;
  v10[0] = a1;
  void v9[3] = type metadata accessor for SharedPendingMembershipBag();
  v9[4] = &off_10050F5C0;
  v9[0] = a2;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  sub_10020ED28((uint64_t)v10, (uint64_t)a3 + OBJC_IVAR___CSDPendingMembershipTracker_storage);
  sub_10020ED28((uint64_t)v9, (uint64_t)a3 + OBJC_IVAR___CSDPendingMembershipTracker_serverBag);
  v8.receiver = a3;
  v8.super_class = (Class)type metadata accessor for PendingMembershipTracker();
  id v6 = objc_msgSendSuper2(&v8, "init");
  sub_1002018DC((uint64_t)v9);
  sub_1002018DC((uint64_t)v10);
  return v6;
}

id sub_100273E40(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for MemoryPendingMembershipTrackerStorage();
  uint64_t v20 = &off_10050F5D8;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for SharedPendingMembershipBag();
  uint64_t v17 = &off_10050F5C0;
  v15[0] = a2;
  id v4 = objc_allocWithZone((Class)type metadata accessor for PendingMembershipTracker());
  uint64_t v5 = sub_10020EF04((uint64_t)v18, v19);
  __chkstk_darwin(v5);
  Swift::Int v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_10020EF04((uint64_t)v15, v16);
  __chkstk_darwin(v9);
  id v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  id v13 = sub_100273D5C(*v7, *v11, v4);
  sub_1002018DC((uint64_t)v15);
  sub_1002018DC((uint64_t)v18);
  return v13;
}

unsigned char *sub_100274004(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002740D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for PendingMembershipTracker.UserAction()
{
}

unsigned char *sub_100274104(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002741A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for MemoryPendingMembershipTrackerStorage.Errors()
{
}

void sub_1002741D8(uint64_t a1)
{
}

void *sub_1002741E8(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100272BA4(*(void **)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t sub_100274234(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100272BA4(*(void **)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100272CC0(v6, v7, v8);
  return a1;
}

uint64_t sub_10027428C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_100272CC0(v4, v6, v5);
  return a1;
}

uint64_t sub_1002742D0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 3 && *(unsigned char *)(a1 + 24))
    {
      unsigned int v2 = *(_DWORD *)a1 + 2;
    }
    else
    {
      unsigned int v2 = ((2 * ((*(void *)(a1 + 16) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 16) >> 60) >> 1) & 1) ^ 3;
      if (v2 >= 2) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_10027431C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 3;
    if (a3 >= 3) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_10027436C(uint64_t a1)
{
  return (*(void *)(a1 + 16) >> 61) & 1;
}

uint64_t sub_100274378(uint64_t result)
{
  *(void *)(result + 16) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_100274388(uint64_t result, char a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

void type metadata accessor for PendingMembershipInfo.Mode()
{
}

unint64_t sub_1002743B0()
{
  unint64_t result = qword_100586D68;
  if (!qword_100586D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586D68);
  }
  return result;
}

unint64_t sub_100274400()
{
  unint64_t result = qword_100586D70;
  if (!qword_100586D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586D70);
  }
  return result;
}

uint64_t sub_100274464()
{
  return os_log(_:dso:log:type:_:)();
}

void sub_100274498(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(a1 - 256);
  uint64_t v4 = *(void *)(v1 - 336);
  unint64_t v5 = *(void *)(v1 - 344);
  sub_100272CC0(v3, v4, v5);
}

uint64_t sub_1002744BC()
{
  return swift_allocObject();
}

uint64_t sub_1002744E0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  *(void *)(v3 - 96) = a1;
  return specialized Array._endMutation()();
}

uint64_t sub_100274500(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return specialized Array._endMutation()();
}

uint64_t sub_100274518()
{
  return *(void *)(v0 - 320);
}

uint64_t sub_100274540()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100274548()
{
  return v0;
}

uint64_t sub_100274570()
{
  return *(void *)(v0 - 288);
}

uint64_t sub_10027457C()
{
  return swift_beginAccess();
}

void sub_1002745A0()
{
  *(void *)(v2 - 320) = v1;
  *(void *)(v2 - 272) = v0;
}

void sub_1002745D0()
{
  sub_100272CC0(v2, v0, v1);
}

id sub_1002745EC()
{
  return sub_100272BA4(v2, v0, v1);
}

uint64_t sub_100274620(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return *(void *)(v3 - 272);
}

uint64_t sub_100274644()
{
  return v0;
}

uint64_t sub_100274650()
{
  return v0;
}

void *sub_10027465C(void *a1, uint64_t a2)
{
  return sub_100204074(a1, a2);
}

uint64_t sub_100274680()
{
  return swift_beginAccess();
}

uint64_t sub_1002746A0()
{
  return sub_1002C27D4(v0);
}

NSData sub_1002746CC()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_1002746EC()
{
  uint64_t v2 = *(void *)(v0 - 336);
  unint64_t v3 = *(void *)(v0 - 344);
  return sub_1001F7498(v2, v3);
}

uint64_t sub_10027470C()
{
  return v0;
}

uint64_t sub_100274754()
{
  return v0;
}

uint64_t sub_100274768()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_100274780()
{
  return swift_beginAccess();
}

uint64_t sub_1002747A0(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(reflecting:)();
}

id sub_100274858(uint64_t a1, void *a2)
{
  id result = (id)TUBundle();
  if (result)
  {
    unint64_t v5 = result;
    v10._object = (void *)0xE000000000000000;
    v6.value._object = (void *)0x80000001004821B0;
    v7._uint64_t countAndFlagsBits = a1;
    v7._object = a2;
    v6.value._uint64_t countAndFlagsBits = 0xD000000000000012;
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v10._uint64_t countAndFlagsBits = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v6, (NSBundle)v5, v8, v10)._countAndFlagsBits;

    return (id)countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1002748F8(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_maxDuration] = 0x4024000000000000;
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver] = 0;
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_queue] = a1;
  v13.receiver = v1;
  v13.super_class = ObjectType;
  id v4 = a1;
  id v5 = objc_msgSendSuper2(&v13, "init");
  Swift::String_optional v6 = self;
  id v7 = v5;
  id v12 = objc_msgSend(v6, "tu_defaults");
  swift_getKeyPath();
  *(void *)(swift_allocObject() + 16) = v7;
  Swift::String v8 = (char *)v7;
  uint64_t v9 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();

  swift_release();
  swift_release();

  Swift::String v10 = *(void **)&v8[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver];
  *(void *)&v8[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver] = v9;

  return v8;
}

uint64_t sub_100274A54()
{
  id v0 = objc_msgSend(self, "tu_defaults");
  unsigned int v1 = [v0 silenceUnknownCallersEnabled];

  if (v1) {
    uint64_t v2 = 28271;
  }
  else {
    uint64_t v2 = 6710895;
  }
  if (v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  else {
    unint64_t v3 = 0xE300000000000000;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  sub_1001F081C(&qword_100586DC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  *(void *)(inited + 32) = 0xD00000000000001CLL;
  *(void *)(inited + 40) = 0x800000010047D790;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 88) = &protocol witness table for String;
  *(void *)(inited + 96) = &protocol witness table for String;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  sub_1001F081C((uint64_t *)&unk_100586DD0);
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
  sub_100275094(v4, v6, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_100274BDC()
{
  unsigned int v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v3 = *(void **)&v0[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver];
  if (v3)
  {
    id v4 = v3;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

BOOL sub_100274CC0(void *a1)
{
  return [a1 isIncoming]
      && [a1 isJunk]
      && ![a1 isKnownCaller];
}

uint64_t sub_100274D24(void *a1)
{
  if ([a1 status] != 6) {
    return 0;
  }
  uint64_t result = (uint64_t)[a1 isIncoming];
  if (!result) {
    return result;
  }
  id v3 = [a1 provider];
  unsigned int v4 = [v3 isTelephonyProvider];

  if (v4
    && ([a1 isKnownCaller] & 1) == 0
    && ((sub_10039E598([a1 disconnectedReason], &off_10050AF58) & 1) != 0
     || ![a1 disconnectedReason] && (objc_msgSend(a1, "callDuration"), v5 < 10.0)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_100274E14(void *a1)
{
  BOOL result = 0;
  if ([a1 liveVoicemailStatus] == (id)1)
  {
    id v2 = [a1 provider];
    unsigned __int8 v3 = [v2 isTelephonyProvider];

    if (v3) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100274E88()
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1002024D0();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  aBlock[4] = sub_1002773C0;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050F9C8;
  unsigned int v4 = _Block_copy(aBlock);
  id v5 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_100277464();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v4);
  uint64_t v6 = sub_10026B774();
  v7(v6);
  uint64_t v8 = sub_10026B75C();
  v9(v8);
  return swift_release();
}

uint64_t sub_100275044()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100275094(v0, v1, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100275094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100586A10);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  sub_1001F0530((uint64_t)v8, 1, 1, v9);
  Swift::String v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  void v10[4] = a1;
  void v10[5] = a2;
  void v10[6] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002C8468((uint64_t)v8, (uint64_t)&unk_100586DE8, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1002751FC(uint64_t a1, void *a2)
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1002024D0();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = a2;
  aBlock[4] = sub_1002770AC;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050F7E8;
  uint64_t v7 = _Block_copy(aBlock);
  id v8 = v2;
  id v9 = a2;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_100277464();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v7);
  uint64_t v10 = sub_10026B774();
  v11(v10);
  uint64_t v12 = sub_10026B75C();
  v13(v12);
  return swift_release();
}

uint64_t sub_1002753C0(uint64_t a1, void *a2)
{
  sub_1002754A0();
  if (sub_100274CC0(a2))
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100275094(v3, v4, 0);
    swift_bridgeObjectRelease();
  }
  if (sub_100274D24(a2))
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100275094(v5, v6, 0);
    swift_bridgeObjectRelease();
    sub_100274A54();
  }
  uint64_t result = sub_100274E14(a2);
  if (result)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100275094(v8, v9, 0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002754A0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self sharedInstance];
  id v9 = [v8 queue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v0;
  aBlock[4] = sub_100277228;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050F8B0;
  id v11 = _Block_copy(aBlock);
  id v12 = v8;
  id v13 = v0;
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v15[0]);
  return swift_release();
}

void sub_1002757BC(void *a1)
{
  Swift::Int v21 = (uint64_t (*)(uint64_t))sub_1002748F4;
  uint64_t v22 = 0;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10039E628;
  uint64_t v20 = &unk_10050F8D8;
  unint64_t v2 = (unint64_t)_Block_copy(&v17);
  swift_release();
  id v3 = [a1 callsPassingTest:v2];
  _Block_release((const void *)v2);
  if (swift_isEscapingClosureAtFileLocation())
  {
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_8;
  }
  uint64_t v4 = *(void **)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
LABEL_4:
    sub_1002DE19C(0, (v2 & 0xC000000000000001) == 0, v2);
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v2 + 32);
    }
    uint64_t v4 = v5;
    swift_bridgeObjectRelease();
    id v6 = v4;
    sub_100275B48(v6);
    uint64_t v8 = v7;

    goto LABEL_10;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v8 = 0;
LABEL_10:
  id v9 = [self userContext];
  if (v9)
  {
    uint64_t v10 = v9;
    if (v8)
    {
      swift_bridgeObjectRetain();
      v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v11.super.Class isa = 0;
    }
    id v12 = [self keyPathForActiveCall];
    id v13 = (void *)swift_allocObject();
    v13[2] = a1;
    void v13[3] = v8;
    v13[4] = v4;
    Swift::Int v21 = sub_100277278;
    uint64_t v22 = v13;
    uint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256;
    uint64_t v19 = sub_100209DA8;
    uint64_t v20 = &unk_10050F928;
    char v14 = _Block_copy(&v17);
    id v15 = v4;
    id v16 = a1;
    swift_release();
    [v10 setObject:v11.super.isa forContextualKeyPath:v12 responseQueue:0 withCompletion:v14];

    _Block_release(v14);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v12 = v4;
  }
}

uint64_t sub_100275AF8(void *a1)
{
  if ([a1 status] == 1) {
    return [a1 isScreening] ^ 1;
  }
  else {
    return 0;
  }
}

void sub_100275B48(void *a1)
{
  uint64_t v92 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  unint64_t v89 = (char *)v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  Class v91 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v93 = (uint64_t)v87 - v6;
  uint64_t v102 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v7 = sub_100276EEC(a1);
  if (v8)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    uint64_t v11 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      id v12 = [self bundleIDKey];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      *((void *)&v101 + 1) = &type metadata for String;
      *(void *)&long long v100 = v9;
      *((void *)&v100 + 1) = v10;
      sub_1002C2414((uint64_t)&v100);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = sub_1002772CC(a1);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      id v15 = a1;
      id v16 = (uint64_t *)(v13 + 40);
      uint64_t v17 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v19 = *(v16 - 1);
        uint64_t v18 = *v16;
        uint64_t v20 = HIBYTE(*v16) & 0xF;
        if ((*v16 & 0x2000000000000000) == 0) {
          uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
        }
        if (v20)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1003A47C8();
            uint64_t v17 = v23;
          }
          unint64_t v21 = v17[2];
          if (v21 >= v17[3] >> 1)
          {
            sub_1003A47C8();
            uint64_t v17 = v24;
          }
          v17[2] = v21 + 1;
          uint64_t v22 = &v17[2 * v21];
          unsigned char v22[4] = v19;
          v22[5] = v18;
        }
        v16 += 2;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      if (v17[2])
      {
        id v25 = [self calleeContactIDsKey];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        *((void *)&v101 + 1) = sub_1001F081C(&qword_10058B600);
        *(void *)&long long v100 = v17;
        sub_1002C2414((uint64_t)&v100);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      a1 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v26 = [a1 remoteParticipantHandles];
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100247240();
  uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v26) = sub_1002D1958(v27);
  swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_59;
  }
  id v28 = [self calleeHandlesKey];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v87[0] = v30;
  v87[1] = v29;

  uint64_t v88 = a1;
  id v31 = [a1 remoteParticipantHandles];
  uint64_t v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = sub_10039E66C(v32);
  if (!v33)
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_46:
    uint64_t v59 = v38[2];
    if (v59)
    {
      uint64_t v60 = v38 + 5;
      int64_t v61 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v63 = *(v60 - 1);
        uint64_t v62 = *v60;
        swift_bridgeObjectRetain();
        NSString v64 = String._bridgeToObjectiveC()();
        unsigned __int8 v65 = [v64 destinationIdIsPseudonym];

        if (v65)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v100 = v61;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002E3EC4();
            int64_t v61 = (void *)v100;
          }
          unint64_t v67 = v61[2];
          if (v67 >= v61[3] >> 1)
          {
            sub_1002E3EC4();
            int64_t v61 = (void *)v100;
          }
          v61[2] = v67 + 1;
          id v68 = &v61[2 * v67];
          v68[4] = v63;
          v68[5] = v62;
        }
        v60 += 2;
        --v59;
      }
      while (v59);
    }
    else
    {
      int64_t v61 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    *((void *)&v101 + 1) = sub_1001F081C(&qword_10058B600);
    *(void *)&long long v100 = v61;
    sub_1002C2414((uint64_t)&v100);
    a1 = v88;
LABEL_59:
    if ([a1 isConversation])
    {
      id v69 = [self sharedInstance];
      id v70 = [v69 activeConversationForCall:a1];

      if (v70)
      {
        uint64_t v71 = self;
        id v72 = [v71 groupIDKey];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v73 = [v70 messagesGroupUUID];
        if (v73)
        {
          id v74 = v73;
          uint64_t v75 = (uint64_t)v91;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v76 = 0;
        }
        else
        {
          uint64_t v76 = 1;
          uint64_t v75 = (uint64_t)v91;
        }
        uint64_t v77 = v92;
        sub_1001F0530(v75, v76, 1, v92);
        uint64_t v78 = v93;
        sub_10021E124(v75, v93);
        if (sub_1001F758C(v78, 1, v77))
        {
          sub_1002012F4(v78);
          long long v100 = 0u;
          long long v101 = 0u;
        }
        else
        {
          uint64_t v80 = v89;
          uint64_t v79 = v90;
          (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v78, v77);
          sub_1002012F4(v78);
          uint64_t v81 = UUID.uuidString.getter();
          uint64_t v83 = v82;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v77);
          *((void *)&v101 + 1) = &type metadata for String;
          *(void *)&long long v100 = v81;
          *((void *)&v100 + 1) = v83;
        }
        sub_1002C2414((uint64_t)&v100);
        id v84 = [v71 groupNameKey];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v85 = sub_100277324(v70);
        if (v86)
        {
          *((void *)&v101 + 1) = &type metadata for String;
          *(void *)&long long v100 = v85;
          *((void *)&v100 + 1) = v86;
        }
        else
        {
          long long v100 = 0u;
          long long v101 = 0u;
        }
        sub_1002C2414((uint64_t)&v100);
      }
    }
    return;
  }
  uint64_t v34 = v33;
  id v99 = _swiftEmptyArrayStorage;
  sub_1002E3EC4();
  unint64_t v95 = v32 & 0xC000000000000001;
  if ((v32 & 0xC000000000000001) != 0)
  {
    uint64_t v35 = __CocoaSet.startIndex.getter();
    char v37 = 1;
  }
  else
  {
    uint64_t v35 = sub_100261A1C(v32);
    char v37 = v39 & 1;
  }
  uint64_t v96 = v35;
  uint64_t v97 = v36;
  char v98 = v37;
  if ((v34 & 0x8000000000000000) == 0)
  {
    uint64_t v40 = v32 & 0xFFFFFFFFFFFFFF8;
    if (v32 < 0) {
      uint64_t v40 = v32;
    }
    uint64_t v94 = v40;
    do
    {
      uint64_t v41 = v96;
      uint64_t v42 = v97;
      char v43 = v98;
      sub_100247358(v96, v97, v98, v32);
      uint64_t v45 = v44;
      id v46 = [v44 value];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      uint64_t v50 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002E3EC4();
        uint64_t v50 = v99;
      }
      unint64_t v51 = v50[2];
      if (v51 >= v50[3] >> 1)
      {
        sub_1002E3EC4();
        uint64_t v50 = v99;
      }
      v50[2] = v51 + 1;
      uint64_t v52 = &v50[2 * v51];
      v52[4] = v47;
      void v52[5] = v49;
      if (v95)
      {
        if ((v43 & 1) == 0) {
          goto LABEL_73;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1001F081C(&qword_100586E10);
        uint64_t v58 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v58(&v100, 0);
      }
      else
      {
        uint64_t v53 = sub_100261934(v41);
        uint64_t v55 = v54;
        char v57 = v56;
        sub_10023561C(v41, v42, v43);
        uint64_t v96 = v53;
        uint64_t v97 = v55;
        char v98 = v57 & 1;
      }
      --v34;
    }
    while (v34);
    sub_10023561C(v96, v97, v98);
    swift_bridgeObjectRelease();
    uint64_t v38 = v99;
    goto LABEL_46;
  }
  __break(1u);
LABEL_73:
  __break(1u);
}

uint64_t sub_100276480(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  id v15 = [a2 queue];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  aBlock[4] = sub_1002772C4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050F978;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a4;
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100276710(uint64_t a1, void *a2)
{
  uint64_t v4 = 7104878;
  id v5 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10048FB00;
  if (a1)
  {
    swift_bridgeObjectRetain();
    sub_1001F081C((uint64_t *)&unk_100586DF0);
    uint64_t v7 = String.init<A>(reflecting:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_1001F3B08();
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  if (a2)
  {
    sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
    id v11 = a2;
    uint64_t v4 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
  }
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 72) = v4;
  *(void *)(v6 + 80) = v12;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100276870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v6[15] = v8;
  v6[16] = *(void *)(v8 - 8);
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_100276990, 0, 0);
}

uint64_t sub_100276990()
{
  type metadata accessor for TipEventProxy();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  v0[18] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100276A64;
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[9];
  return static TipEventProxy.donate(eventIdentifier:for:with:)(v7, v5, v1, v3, v6);
}

uint64_t sub_100276A64()
{
  sub_1001F63B4();
  uint64_t v2 = *v1;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100276B90, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

uint64_t sub_100276B90()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v13 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  swift_bridgeObjectRelease();
  id v7 = [self sharedInstance];
  id v8 = [v7 queue];

  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v5;
  void v9[3] = v6;
  v9[4] = v1;
  v0[6] = sub_10027721C;
  v0[7] = v9;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1002C2C88;
  v0[5] = &unk_10050F860;
  uint64_t v10 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v0[8] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v15);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100276DCC()
{
  id v0 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10048FB00;
  swift_bridgeObjectRetain();
  uint64_t v2 = String.init<A>(reflecting:)();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v5 = sub_1001F3B08();
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  swift_errorRetain();
  sub_1001F081C((uint64_t *)&unk_100585FE0);
  uint64_t v6 = String.init<A>(reflecting:)();
  *(void *)(v1 + 96) = &type metadata for String;
  *(void *)(v1 + 104) = v5;
  *(void *)(v1 + 72) = v6;
  *(void *)(v1 + 80) = v7;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100276EEC(void *a1)
{
  id v2 = [a1 provider];
  unsigned int v3 = [v2 isTelephonyProvider];

  if (v3) {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v5 = [a1 provider];
  unsigned int v6 = [v5 isFaceTimeProvider];

  if (!v6) {
    return sub_1001F618C([a1 provider]);
  }
  id v7 = (id)TUPreferredFaceTimeBundleIdentifier();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

void sub_100276FD4()
{
}

uint64_t type metadata accessor for DuetDonater()
{
  return self;
}

uint64_t sub_10027706C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002770AC()
{
  return sub_1002753C0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002770B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002770C4()
{
  return swift_release();
}

uint64_t sub_1002770CC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100277114(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10026B224;
  return sub_100276870(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1002771DC()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10027721C()
{
  return sub_100276DCC();
}

void sub_100277228()
{
  sub_1002757BC(*(void **)(v0 + 16));
}

uint64_t sub_100277230()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100277278(uint64_t a1)
{
  return sub_100276480(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100277284()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002772C4()
{
  return sub_100276710(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002772CC(void *a1)
{
  id v1 = [a1 contactIdentifiers];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100277324(void *a1)
{
  id v1 = [a1 messagesGroupName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100277388()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002773C0()
{
  return sub_100275044();
}

const char *sub_1002773C8()
{
  return "allowContactsOnly";
}

id sub_1002773D4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 allowContactsOnly];
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_100277408()
{
  return sub_100274A54();
}

uint64_t sub_100277464()
{
  return v0 - 136;
}

char *sub_100277480(void *a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LanguageManager();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  sub_1001F0530((uint64_t)v4, 1, 1, v8);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  id v9 = [self sharedManager];
  id v10 = objc_allocWithZone((Class)type metadata accessor for SpeechAssetManager());
  uint64_t v11 = sub_100277648(a1, (uint64_t)v7, 0, v9);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v11;
}

char *sub_100277648(void *a1, uint64_t a2, char a3, void *a4)
{
  v4[OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets] = 0;
  uint64_t v9 = OBJC_IVAR___CSDSpeechAssetManager_delegates;
  id v10 = self;
  uint64_t v11 = v4;
  *(void *)&v4[v9] = [v10 weakObjectsHashTable];
  unint64_t v12 = &v11[OBJC_IVAR___CSDSpeechAssetManager____lazy_storage___downloadSpeechAssetPath];
  *unint64_t v12 = 0;
  v12[1] = 0;
  *(void *)&v11[OBJC_IVAR___CSDSpeechAssetManager_queue] = a1;
  uint64_t v13 = &v11[OBJC_IVAR___CSDSpeechAssetManager_languageManager];
  uint64_t v14 = type metadata accessor for LanguageManager();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a2, v14);
  v11[OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets] = a3;
  *(void *)&v11[OBJC_IVAR___CSDSpeechAssetManager_assetSetObserver] = a4;
  id v16 = a1;
  id v17 = a4;

  v32.receiver = v11;
  v32.super_class = (Class)type metadata accessor for SpeechAssetManager();
  id v18 = objc_msgSendSuper2(&v32, "init");
  uint64_t v19 = self;
  uint64_t v20 = (char *)v18;
  id v21 = [v19 defaultCenter];
  [v21 addObserver:v20 selector:"handleCurrentLocaleDidChange" name:NSCurrentLocaleDidChangeNotification object:0];

  id v22 = *(id *)&v20[OBJC_IVAR___CSDSpeechAssetManager_assetSetObserver];
  NSString v23 = String._bridgeToObjectiveC()();
  uint64_t v24 = sub_10027AC68();
  *(void *)(v24 + 16) = v20;
  aBlock[4] = sub_10027ABE4;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FD60;
  id v25 = _Block_copy(aBlock);
  id v26 = v16;
  uint64_t v27 = v20;
  swift_release();
  id v28 = [v22 observeAssetSet:v23 queue:v26 handler:v25];

  _Block_release(v25);
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  return v27;
}

void sub_100277940(uint64_t a1)
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C28);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "assets updated", v5, 2u);
    swift_slowDealloc();
  }

  sub_10027926C();
  if (*(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) == 1) {
    sub_100277A40();
  }
}

void sub_100277A40()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___CSDSpeechAssetManager_delegates) allObjects];
  sub_1001F081C(&qword_100586E90);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_9;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v5 = *(void **)(v2 + 8 * i + 32);
      swift_unknownObjectRetain();
    }
    [v5 assetsUpdated];
    swift_unknownObjectRelease();
  }
LABEL_9:

  swift_bridgeObjectRelease();
}

void (*sub_100277B68())()
{
  id v1 = (void (**)())&v0[OBJC_IVAR___CSDSpeechAssetManager____lazy_storage___downloadSpeechAssetPath];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___CSDSpeechAssetManager____lazy_storage___downloadSpeechAssetPath];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR___CSDSpeechAssetManager____lazy_storage___downloadSpeechAssetPath];
  }
  else
  {
    uint64_t v4 = sub_10027AC68();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_10027ABC0;
    *id v1 = sub_10027ABC0;
    v1[1] = (void (*)())v4;
    uint64_t v5 = v0;
    swift_retain();
    sub_100208490(0);
  }
  sub_1002084D8(v2);
  return v3;
}

uint8_t *sub_100277C0C()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v58 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v57 = (char *)v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for LanguageManager();
  uint64_t v5 = *(void *)(v60 - 8);
  uint64_t v6 = __chkstk_darwin(v60);
  uint64_t v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v52 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v52 - v12;
  uint64_t v59 = v0;
  sub_1001F0530((uint64_t)v4, 1, 1, v0);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  v63.value._rawValue = 0;
  LanguageManager.mappedASRLanguageIdentifier(supportedLanguages:)(v63);
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v14 assetPathForLanguage:v15 clientIdentifier:v16];

  if (v17)
  {
    id v18 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v19;

    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1001F5F88(v20, (uint64_t)qword_100594C28);
    uint64_t v21 = v5;
    uint64_t v22 = v60;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v60);
    NSString v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v55 = v18;
      id v26 = (uint8_t *)v25;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v62 = v54;
      *(_DWORD *)id v26 = 136315138;
      v52[1] = v26 + 4;
      uint64_t v27 = v57;
      LanguageManager.locale.getter();
      sub_10027AB78(&qword_100586E88, (void (*)(uint64_t))&type metadata accessor for Locale);
      uint64_t v53 = v13;
      uint64_t v28 = v21;
      uint64_t v29 = v59;
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v29);
      uint64_t v61 = sub_1002344D8(v30, v32, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      uint64_t v34 = v60;
      v33(v8, v60);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s language available", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v18 = v55;
      swift_slowDealloc();

      v33(v53, v34);
    }
    else
    {

      uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
      v50(v8, v22);
      v50(v13, v22);
    }
  }
  else
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_1001F5F88(v35, (uint64_t)qword_100594C28);
    uint64_t v36 = v60;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v13, v60);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v62 = v56;
      uint64_t v55 = v39;
      *(_DWORD *)char v39 = 136315138;
      uint64_t v54 = (uint64_t)(v39 + 4);
      uint64_t v40 = v57;
      LanguageManager.locale.getter();
      sub_10027AB78(&qword_100586E88, (void (*)(uint64_t))&type metadata accessor for Locale);
      uint64_t v41 = v59;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v44 = v43;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v41);
      uint64_t v61 = sub_1002344D8(v42, v44, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      id v46 = v11;
      uint64_t v47 = v60;
      v45(v46, v60);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s language not available, will have to download", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v13;
      uint64_t v49 = v47;
    }
    else
    {

      uint64_t v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v11, v36);
      uint64_t v48 = v13;
      uint64_t v49 = v36;
    }
    v45(v48, v49);
    return 0;
  }
  return v18;
}

void sub_10027834C()
{
  uint64_t v3 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v9 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1002024D0();
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C28);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    NSString v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "checkSpeechAssets", v16, 2u);
    swift_slowDealloc();
  }

  id v17 = *(void **)&v3[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v3;
  *(void *)(v18 + 24) = ObjectType;
  aBlock[4] = sub_10027AAD8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FC48;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  uint64_t v21 = v3;
  static DispatchQoS.unspecified.getter();
  sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_100277464();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
  swift_release();
  sub_1001FCC08();
}

void sub_100278658(void *a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self mainBundle];
  uint64_t v14 = sub_1001F618C(v13);
  if (v15)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    sub_1001F07DC();
    uint64_t v30 = v6;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v18 = static OS_dispatch_queue.global(qos:)();
    uint64_t v19 = v33;
    uint64_t v29 = (void *)v18;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    id v20 = (void *)swift_allocObject();
    void v20[2] = v16;
    v20[3] = v17;
    uint64_t v21 = v31;
    v20[4] = v19;
    void v20[5] = v21;
    aBlock[4] = sub_10027AB20;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050FC98;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = v19;
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    os_log_type_t v24 = v29;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v30);
    swift_release();
  }
  else
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_1001F5F88(v25, (uint64_t)qword_100594C28);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Missing bundle identifier", v28, 2u);
      swift_slowDealloc();
    }

    *((unsigned char *)v33 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = 0;
  }
}

uint64_t sub_100278ACC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100277C0C();
  uint64_t v14 = v13;
  uint64_t v15 = *(void **)&a3[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = a3;
  v16[3] = v12;
  v16[4] = v14;
  aBlock[4] = sub_10027AB6C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FCE8;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  uint64_t v19 = a3;
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_100278D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = a3 != 0;
  uint64_t v3 = sub_100277B68();
  v3();

  return swift_release();
}

void sub_100278DEC()
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1002024D0();
  uint64_t v11 = *(void **)&v0[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v12 = sub_10027AC68();
  *(void *)(v12 + 16) = v0;
  aBlock[4] = sub_10027AA98;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FBF8;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  uint64_t v15 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_100277464();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10027AC54();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
  swift_release();
  sub_1001FCC08();
}

void sub_100278FE8(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LanguageManager();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  sub_1001F0530((uint64_t)v4, 1, 1, v9);
  [objc_allocWithZone((Class)TUFeatureFlags) init];
  LanguageManager.init(featureFlags:localeOverride:)();
  uint64_t v10 = a1 + OBJC_IVAR___CSDSpeechAssetManager_languageManager;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v10, v8, v5);
  swift_endAccess();
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594C28);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "handleCurrentLocaleDidChange", v14, 2u);
    swift_slowDealloc();
  }

  sub_100277A40();
  sub_10027926C();
}

void sub_10027926C()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10021EA1C();
  sub_1001F6398();
  os_log_t v35 = v9;
  __chkstk_darwin(v10);
  sub_1002024D0();
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  sub_1001F6398();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v3[OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets] & 1) != 0
    || (uint64_t v17 = OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets,
        (v3[OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets] & 1) != 0))
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1001F5F88(v18, (uint64_t)qword_100594C28);
    os_log_t v35 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v19, "we already have the speech assets (or are fetching them), not downloading again", v20, 2u);
      swift_slowDealloc();
    }
    sub_1001FCC08();
  }
  else
  {
    uint64_t v33 = v8;
    uint64_t v34 = v6;
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_1001F5F88(v23, (uint64_t)qword_100594C28);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = v4;
      *(_WORD *)id v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "downloadSpeechAssets (it is necessary)", v26, 2u);
      uint64_t v4 = v32;
      swift_slowDealloc();
    }

    v3[v17] = 1;
    sub_1001F07DC();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v11);
    os_log_type_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
    uint64_t v28 = sub_10027AC68();
    *(void *)(v28 + 16) = v3;
    aBlock[4] = sub_10027AA0C;
    aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_10050FA40;
    uint64_t v29 = _Block_copy(aBlock);
    uint64_t v30 = v3;
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_10027AC54();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v1, v4);
    ((void (*)(uint64_t, uint64_t))v35[1].isa)(v2, v33);
    swift_release();
    sub_1001FCC08();
  }
}

void sub_1002796E0(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LanguageManager();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self mainBundle];
  sub_1001F618C(v12);
  if (!v13)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_1001F5F88(v24, (uint64_t)qword_100594C28);
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing bundle identifier", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = *(void **)&a1[OBJC_IVAR___CSDSpeechAssetManager_queue];
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = a1;
    uint64_t v54 = sub_10027AA2C;
    uint64_t v55 = v29;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_1002C2C88;
    uint64_t v53 = &unk_10050FA90;
    uint64_t v21 = _Block_copy(&aBlock);
    uint64_t v30 = a1;
    id v23 = v28;
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    goto LABEL_9;
  }
  unint64_t v43 = v4;
  uint64_t v44 = v2;
  uint64_t v14 = &a1[OBJC_IVAR___CSDSpeechAssetManager_languageManager];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  v56.value._rawValue = 0;
  LanguageManager.mappedASRLanguageIdentifier(supportedLanguages:)(v56);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = self;
  NSString v16 = String._bridgeToObjectiveC()();
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v15 assetPathForLanguage:v16 clientIdentifier:v17];

  if (v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    os_log_type_t v19 = *(void **)&a1[OBJC_IVAR___CSDSpeechAssetManager_queue];
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a1;
    uint64_t v54 = sub_10027AA48;
    uint64_t v55 = v20;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_1002C2C88;
    uint64_t v53 = &unk_10050FB58;
    uint64_t v21 = _Block_copy(&aBlock);
    uint64_t v22 = a1;
    id v23 = v19;
    static DispatchQoS.unspecified.getter();
    uint64_t v48 = _swiftEmptyArrayStorage;
    sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    uint64_t v4 = v43;
    uint64_t v2 = v44;
LABEL_9:
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
    swift_release();
    return;
  }
  uint64_t v31 = v15;
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_1001F5F88(v32, (uint64_t)qword_100594C28);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    os_log_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Starting asset download.", v35, 2u);
    swift_slowDealloc();
  }

  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v54 = sub_100279EDC;
  uint64_t v55 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10027A03C;
  uint64_t v53 = &unk_10050FAB8;
  os_log_type_t v38 = _Block_copy(&aBlock);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a1;
  uint64_t v54 = sub_10027AA40;
  uint64_t v55 = v39;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10027A604;
  uint64_t v53 = &unk_10050FB08;
  uint64_t v40 = _Block_copy(&aBlock);
  uint64_t v41 = a1;
  swift_release();
  [v31 fetchAssetsForLanguage:v36 clientIdentifier:v37 urgent:1 forceUpgrade:1 detailedProgress:v38 completion:v40];
  _Block_release(v40);
  _Block_release(v38);
}

void sub_100279EDC()
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C28);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v2 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Speech model download progress: %ld. Is stalled: %{BOOL}d", (uint8_t *)v2, 0x12u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10027A03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_10027A09C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)&a4[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a3;
  aBlock[4] = sub_10027AA90;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FBA8;
  NSString v16 = _Block_copy(aBlock);
  id v17 = v14;
  id v18 = a4;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_10027AB78((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_10027A350(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
  *(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = a2 == 0;
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate.opt_inst_meths;
  if (a2)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1001F5F88(v3, (uint64_t)qword_100594C28);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v7 = String.init<A>(reflecting:)();
      sub_1002344D8(v7, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Speech model fetch failed with error: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate + 40);
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  if (p_opt_inst_meths[322] != (__objc2_meth_list *)-1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C28);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Speech model fetch complete", v12, 2u);
    swift_slowDealloc();
  }

  sub_100277A40();
}

uint64_t sub_10027A604(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10027A69C(uint64_t a1)
{
  *(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = 1;
  *(unsigned char *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1001F5F88(v1, (uint64_t)qword_100594C28);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Speech model ready", v3, 2u);
    swift_slowDealloc();
  }
}

void sub_10027A7A0()
{
}

id sub_10027A7E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechAssetManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10027A8CC()
{
  return type metadata accessor for SpeechAssetManager();
}

uint64_t type metadata accessor for SpeechAssetManager()
{
  uint64_t result = qword_100586E78;
  if (!qword_100586E78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10027A91C()
{
  uint64_t result = type metadata accessor for LanguageManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10027A9D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10027AA0C()
{
  sub_1002796E0(*(char **)(v0 + 16));
}

uint64_t sub_10027AA14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027AA24()
{
  return swift_release();
}

void sub_10027AA2C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
}

uint64_t sub_10027AA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027A09C(a1, a2, a3, *(char **)(v3 + 16));
}

void sub_10027AA48()
{
  sub_10027A69C(*(void *)(v0 + 16));
}

uint64_t sub_10027AA50()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10027AA90()
{
  sub_10027A350(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10027AA98()
{
  sub_100278FE8(*(void *)(v0 + 16));
}

uint64_t sub_10027AAA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10027AAD8()
{
  sub_100278658(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10027AAE0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10027AB20()
{
  return sub_100278ACC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_10027AB2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10027AB6C()
{
  return sub_100278D94(v0[2], v0[3], v0[4]);
}

uint64_t sub_10027AB78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10027ABC0()
{
}

void sub_10027ABE4()
{
  sub_100277940(*(void *)(v0 + 16));
}

uint64_t sub_10027AC54()
{
  return 0;
}

uint64_t sub_10027AC68()
{
  return swift_allocObject();
}

uint64_t sub_10027AC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

void sub_10027ACE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_lockStateObserver);
  *(void *)(v1 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_lockStateObserver) = a1;
}

uint64_t sub_10027ACF4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_phoneProcessObserver) = a1;
  return swift_unknownObjectRelease();
}

id sub_10027AD0C()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___idsRegistrationRestriction);
  if (*(unsigned char *)(v0 + OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___idsRegistrationRestriction + 8) != 1) {
    return *(id *)v1;
  }
  if (qword_100583780 != -1) {
    swift_once();
  }
  id result = [(id)qword_100585B80 registrationRestrictionReason];
  *(void *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t sub_10027AD94()
{
  uint64_t v1 = OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___facetimeRestrictedOnDevice;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___facetimeRestrictedOnDevice);
  if (v2 == 2)
  {
    unsigned __int8 v3 = sub_10027ADDC();
    *(unsigned char *)(v0 + v1) = v3 & 1;
  }
  else
  {
    unsigned __int8 v3 = v2 & 1;
  }
  return v3 & 1;
}

id sub_10027ADDC()
{
  uint64_t v0 = self;
  id result = [v0 sharedInstance];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  int v2 = result;
  unsigned int v3 = [result faceTimeBlocked];

  id result = [v0 sharedInstance];
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  unsigned int v5 = [result faceTimeSupported];

  if (qword_1005839E0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1001F5F88(v6, (uint64_t)qword_100594B98);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "isBlocked: %{BOOL}d, isSupported: %{BOOL}d", (uint8_t *)v9, 0xEu);
    swift_slowDealloc();
  }

  return (id)(v3 | v5 ^ 1);
}

id sub_10027AFA8()
{
  id v1 = objc_allocWithZone((Class)LSApplicationRecord);
  id v2 = sub_100377640(0xD000000000000012, 0x800000010047E2C0, 1);
  id v3 = [v2 applicationState];
  id v4 = [v3 isInstalled];

  if (qword_1005839E0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1001F5F88(v5, (uint64_t)qword_100594B98);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_10027D4F8(v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v0, "isFaceTimeInstalled: %{BOOL}d", v8, 8u);
    sub_10027D514();
  }

  return v4;
}

char *sub_10027B120(void *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for ProcessObserver());
  id v3 = a1;
  id v4 = sub_10024F180((uint64_t)&off_10050AF80, v3);
  uint64_t v5 = objc_allocWithZone((Class)type metadata accessor for FaceTimeInstallationNotifier());
  uint64_t v6 = sub_10027CF5C(v3, (void (*)(void *__return_ptr))sub_10027B1D4, 0, 0, v4, v5);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

id sub_10027B1D4@<X0>(void *a1@<X8>)
{
  return sub_1002045FC(a1);
}

void sub_10027B240(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1) {
    id v12 = a1;
  }
  else {
    id v12 = [objc_allocWithZone((Class)CSDDeviceLockStateObserver) initWithQueue:a2];
  }
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v13;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  void v14[6] = a7;
  v18[4] = sub_10027D4A0;
  v18[5] = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  void v18[2] = sub_1002C2C88;
  void v18[3] = &unk_10050FEF0;
  uint64_t v15 = _Block_copy(v18);
  id v16 = a1;
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  [v12 performBlockAfterFirstUnlock:v15];
  _Block_release(v15);
  id v17 = v12;
  sub_10027ACE0((uint64_t)v12);
}

void sub_10027B3BC(uint64_t a1, void (*a2)(long long *__return_ptr))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = Strong + OBJC_IVAR___CSDFaceTimeInstallationNotifier_storage;
    swift_beginAccess();
    sub_10027CEB4(v6, (uint64_t)&aBlock);

    if (*((void *)&v45 + 1))
    {
      sub_10021E23C((uint64_t)&aBlock, &qword_100586EF8);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v46 = 0;
    long long aBlock = 0u;
    long long v45 = 0u;
  }
  sub_10021E23C((uint64_t)&aBlock, &qword_100586EF8);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectWeakLoadStrong();
  if (v7)
  {
    os_log_type_t v8 = (void *)v7;
    a2(&aBlock);
    uint64_t v9 = (uint64_t)v8 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_storage;
    swift_beginAccess();
    sub_10027D36C((uint64_t)&aBlock, v9);
    swift_endAccess();
  }
LABEL_7:
  if (qword_1005839E0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_1001F5F88(v10, (uint64_t)qword_100594B98);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109120;
    LOBYTE(aBlock) = sub_10027AFA8() & 1;
    LODWORD(aBlock) = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "isFaceTimeInstalled: %{BOOL}d", v13, 8u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v14 = swift_unknownObjectWeakLoadStrong();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    uint64_t v16 = v14 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_storage;
    swift_beginAccess();
    sub_10027CEB4(v16, (uint64_t)&aBlock);

    if (*((void *)&v45 + 1))
    {
      sub_10020ED28((uint64_t)&aBlock, (uint64_t)v41);
      sub_10021E23C((uint64_t)&aBlock, &qword_100586EF8);
      uint64_t v17 = v42;
      uint64_t v18 = v43;
      sub_100204074(v41, v42);
      (*(void (**)(uint64_t *__return_ptr, void *, unint64_t, unint64_t, void *, uint64_t, uint64_t))(v18 + 16))(v48, &type metadata for Bool, 0xD00000000000001ELL, 0x80000001004824D0, &type metadata for Bool, v17, v18);
      char v19 = v48[0];
      sub_1002018DC((uint64_t)v41);
      if (v19) {
        return;
      }
    }
    else
    {
      sub_10021E23C((uint64_t)&aBlock, &qword_100586EF8);
    }
  }
  swift_beginAccess();
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (!v20 || (uint64_t v21 = (void *)v20, v22 = sub_10027AD94(), v21, (v22 & 1) != 0))
  {
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Skipping to setup xpc activity since FaceTime is blocked on this device", v25, 2u);
      swift_slowDealloc();
    }
    goto LABEL_30;
  }
  swift_beginAccess();
  uint64_t v26 = swift_unknownObjectWeakLoadStrong();
  if (v26)
  {
    os_log_type_t v27 = (void *)v26;
    sub_10027C100();
  }
  swift_beginAccess();
  uint64_t v28 = swift_unknownObjectWeakLoadStrong();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    uint64_t v30 = swift_unknownObjectRetain();
    sub_10027ACF4(v30);
  }
  swift_beginAccess();
  uint64_t v31 = swift_unknownObjectWeakLoadStrong();
  if (v31)
  {
    uint64_t v32 = (void *)v31;
    uint64_t v33 = *(void **)(v31 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_phoneProcessObserver);
    swift_unknownObjectRetain();

    if (v33)
    {
      uint64_t v34 = swift_allocObject();
      swift_beginAccess();
      os_log_t v35 = (void *)swift_unknownObjectWeakLoadStrong();
      swift_unknownObjectWeakInit();

      uint64_t v46 = sub_10027D4B0;
      uint64_t v47 = v34;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v45 = sub_10027AC80;
      *((void *)&v45 + 1) = &unk_10050FF18;
      NSString v36 = _Block_copy(&aBlock);
      swift_release();
      [v33 setProcessStateChanged:v36];
      _Block_release(v36);
      swift_unknownObjectRelease();
    }
  }
  swift_beginAccess();
  uint64_t v37 = swift_unknownObjectWeakLoadStrong();
  if (v37)
  {
    os_log_type_t v38 = (void *)v37;
    uint64_t v39 = *(void **)(v37 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_phoneProcessObserver);
    swift_unknownObjectRetain();

    if (v39)
    {
      id v23 = String._bridgeToObjectiveC()();
      uint64_t v46 = sub_10027D4B8;
      uint64_t v47 = a1;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v45 = sub_10027BB80;
      *((void *)&v45 + 1) = &unk_10050FF40;
      uint64_t v40 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v39 fetchCurrentProcessStatesForBundleIdentifier:v23 completion:v40];
      swift_unknownObjectRelease();
      _Block_release(v40);
LABEL_30:
    }
  }
}

void sub_10027BA00(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    if (a2 == 4)
    {
      id v5 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10048F550;
      uint64_t v7 = String.init<A>(reflecting:)();
      uint64_t v9 = v8;
      *(void *)(v6 + 56) = &type metadata for String;
      *(void *)(v6 + 64) = sub_1001F3B08();
      *(void *)(v6 + 32) = v7;
      *(void *)(v6 + 40) = v9;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      sub_10027C3F4();
    }
  }
}

void sub_10027BB18(uint64_t a1)
{
  uint64_t v1 = sub_100246B64(a1);
  if ((v2 & 1) == 0 && v1 == 4)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v4 = (void *)Strong;
      sub_10027C3F4();
    }
  }
}

uint64_t sub_10027BB80(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10027BC00(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100274858(0xD00000000000001BLL, (void *)0x8000000100482560);
  uint64_t v4 = String.init(format:_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v20 = &type metadata for String;
  uint64_t v18 = v4;
  uint64_t v19 = v6;
  sub_1002C2414((uint64_t)&v18);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100274858(0xD00000000000001DLL, (void *)0x8000000100482580);
  uint64_t v7 = String.init(format:_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v20 = &type metadata for String;
  uint64_t v18 = v7;
  uint64_t v19 = v9;
  sub_1002C2414((uint64_t)&v18);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = sub_100274858(0xD000000000000025, (void *)0x80000001004825A0);
  uint64_t v20 = &type metadata for String;
  uint64_t v18 = (uint64_t)v10;
  uint64_t v19 = v11;
  sub_1002C2414((uint64_t)&v18);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = sub_100274858(0xD000000000000023, (void *)0x80000001004825D0);
  uint64_t v20 = &type metadata for String;
  uint64_t v18 = (uint64_t)v12;
  uint64_t v19 = v13;
  sub_1002C2414((uint64_t)&v18);
  sub_1001F6204(0, &qword_100588070);
  uint64_t v14 = (void *)static IMUserNotificationCenter.shared.getter();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v16);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(swift_allocObject() + 16) = v17;
  IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_10027BF4C(uint64_t a1)
{
  if (a1)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1001F5F88(v1, (uint64_t)qword_100594B98);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Not ending ScreenSharing because user didn't choose to end", v3, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1001F5F88(v4, (uint64_t)qword_100594B98);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "User tapped on App store button.", v7, 2u);
      swift_slowDealloc();
    }

    sub_10027C9D4();
  }
}

uint64_t sub_10027C100()
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
  if (qword_1005839E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1001F5F88(v1, (uint64_t)qword_100594B98);
  os_log_type_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_10027D4F8(v3))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_10027D530((void *)&_mh_execute_header, v4, v5, "Registering FaceTimeAppInstallAlertActivity");
    sub_10027D514();
  }

  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9[4] = sub_10027CF54;
  void v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  _OWORD v9[2] = sub_100339000;
  void v9[3] = &unk_10050FE00;
  uint64_t v7 = _Block_copy(v9);
  swift_release();
  xpc_activity_register("FaceTimeAppInstallAlertActivity", empty, v7);
  _Block_release(v7);
  return swift_unknownObjectRelease();
}

void sub_10027C2D4(_xpc_activity_s *a1)
{
  if (xpc_activity_get_state(a1) == 2)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1001F5F88(v1, (uint64_t)qword_100594B98);
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "FaceTimeAppInstallAlertActivity: run activity fired", v4, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      sub_10027C3F4();
    }
  }
}

uint64_t sub_10027C3F4()
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1001F2514();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1002024D0();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v0;
  aBlock[4] = sub_10027CE94;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FDB0;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  return swift_release();
}

void sub_10027C5F4(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR___CSDFaceTimeInstallationNotifier_storage;
  swift_beginAccess();
  sub_10027CEB4(v2, (uint64_t)v21);
  if (v22)
  {
    sub_10020ED28((uint64_t)v21, (uint64_t)v18);
    sub_10021E23C((uint64_t)v21, &qword_100586EF8);
    uint64_t v3 = v19;
    uint64_t v4 = v20;
    sub_100204074(v18, v19);
    (*(void (**)(void *__return_ptr, void *, unint64_t, unint64_t, void *, uint64_t, uint64_t))(v4 + 16))(v17, &type metadata for Bool, 0xD00000000000001ELL, 0x80000001004824D0, &type metadata for Bool, v3, v4);
    char v5 = v17[0];
    sub_1002018DC((uint64_t)v18);
    if (v5)
    {
      if (qword_1005839E0 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_1001F5F88(v6, (uint64_t)qword_100594B98);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8)) {
        goto LABEL_21;
      }
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      uint64_t v10 = "Not posting notification since we determined that we have already shown it";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
      swift_slowDealloc();
LABEL_21:

      return;
    }
  }
  else
  {
    sub_10021E23C((uint64_t)v21, &qword_100586EF8);
  }
  if (sub_10027AD94())
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1001F5F88(v11, (uint64_t)qword_100594B98);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_21;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Skipping to setup xpc activity since FaceTime is blocked on this device";
    goto LABEL_20;
  }
  if (sub_10027AD0C() != (id)3)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594B98);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_21;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Not posting the notifcation since FaceTime app restriction is not uninstalled";
    goto LABEL_20;
  }
  sub_10027CEB4(v2, (uint64_t)v21);
  if (v22)
  {
    sub_10020ED28((uint64_t)v21, (uint64_t)v18);
    sub_10021E23C((uint64_t)v21, &qword_100586EF8);
    uint64_t v12 = v19;
    uint64_t v13 = v20;
    sub_100204074(v18, v19);
    void v17[3] = &type metadata for Bool;
    LOBYTE(v17[0]) = 1;
    (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(v17, 0xD00000000000001ELL, 0x80000001004824D0, v12, v13);
    sub_10021E23C((uint64_t)v17, (uint64_t *)&unk_100584CA0);
    sub_1002018DC((uint64_t)v18);
  }
  else
  {
    sub_10021E23C((uint64_t)v21, &qword_100586EF8);
  }
  id v15 = *(void (**)(uint64_t))(a1
                                       + OBJC_IVAR___CSDFaceTimeInstallationNotifier_postFaceTimeUninstallAlertClosure);
  if (v15)
  {
    uint64_t v16 = swift_retain();
    v15(v16);
    sub_100208490((uint64_t)v15);
  }
  else
  {
    __break(1u);
  }
}

id sub_10027C9D4()
{
  uint64_t v1 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v1 - 8);
  sub_1001F2514();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1002024D0();
  uint64_t v9 = type metadata accessor for URLComponents();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v15 = v14 - v13;
  URLComponents.init()();
  URLComponents.scheme.setter();
  sub_1001F081C((uint64_t *)&unk_10058C0D0);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10048F550;
  URLQueryItem.init(name:value:)();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  if (sub_1001F758C(v4, 1, v5) == 1)
  {
    sub_10021E23C(v4, &qword_1005878F0);
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1001F5F88(v16, (uint64_t)qword_100594B98);
    uint64_t v17 = (void *)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (sub_10027D4F8(v18))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_10027D530((void *)&_mh_execute_header, v19, v20, "Unable to create itunes url");
      sub_10027D514();
    }

    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v4, v5);
  id result = [self defaultWorkspace];
  if (result)
  {
    id v23 = result;
    URL._bridgeToObjectiveC()(v22);
    os_log_type_t v25 = v24;
    [v23 openURL:v24 configuration:0 completionHandler:0];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

void sub_10027CD3C()
{
}

id sub_10027CD7C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeInstallationNotifier();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeInstallationNotifier()
{
  return self;
}

uint64_t sub_10027CE5C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10027CE94()
{
  sub_10027C5F4(*(void *)(v0 + 16));
}

uint64_t sub_10027CE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027CEAC()
{
  return swift_release();
}

uint64_t sub_10027CEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100586EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027CF1C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10027CF54(_xpc_activity_s *a1)
{
}

char *sub_10027CF5C(void *a1, void (*a2)(void *__return_ptr), uint64_t a3, void *a4, void *a5, unsigned char *a6)
{
  os_log_type_t v38 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v37 = ObjectType;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)&a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier_storage];
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(void *)(v16 + 32) = 0;
  *(void *)&a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier_lockStateObserver] = 0;
  *(void *)&a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier_phoneProcessObserver] = 0;
  uint64_t v17 = &a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier_postFaceTimeUninstallAlertClosure];
  *uint64_t v17 = 0;
  v17[1] = 0;
  os_log_type_t v18 = &a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___idsRegistrationRestriction];
  *(void *)os_log_type_t v18 = 0;
  v18[8] = 1;
  a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier____lazy_storage___facetimeRestrictedOnDevice] = 2;
  *(void *)&a6[OBJC_IVAR___CSDFaceTimeInstallationNotifier_queue] = a1;
  uint64_t v19 = a6;
  id v20 = a1;
  a2(aBlock);
  swift_beginAccess();
  sub_10027D36C((uint64_t)aBlock, v16);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for FaceTimeInstallationNotifier();
  v45.receiver = v19;
  v45.super_class = v21;
  id v22 = objc_msgSendSuper2(&v45, "init");
  id v23 = (void *)swift_allocObject();
  _OWORD v23[2] = a4;
  void v23[3] = v20;
  v23[4] = v22;
  v23[5] = a2;
  os_log_type_t v24 = v38;
  void v23[6] = a3;
  v23[7] = v24;
  v23[8] = ObjectType;
  aBlock[4] = sub_10027D42C;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_10050FE50;
  os_log_type_t v25 = _Block_copy(aBlock);
  id v36 = a4;
  swift_retain();
  id v26 = v24;
  id v27 = v22;
  id v28 = v20;
  uint64_t v29 = (char *)v27;
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  uint64_t v31 = v39;
  uint64_t v30 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();

  _Block_release(v25);
  swift_release();

  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
  swift_release();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v37;
  uint64_t v33 = (void (**)())&v29[OBJC_IVAR___CSDFaceTimeInstallationNotifier_postFaceTimeUninstallAlertClosure];
  uint64_t v34 = *(void *)&v29[OBJC_IVAR___CSDFaceTimeInstallationNotifier_postFaceTimeUninstallAlertClosure];
  *uint64_t v33 = sub_10027D444;
  v33[1] = (void (*)())v32;
  sub_100208490(v34);
  return v29;
}

uint64_t sub_10027D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100586EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027D3D4()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10027D42C()
{
  sub_10027B240(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_10027D444()
{
  sub_10027BC00(*(void *)(v0 + 16));
}

void sub_10027D450(uint64_t a1)
{
}

uint64_t sub_10027D458()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10027D4A0()
{
  sub_10027B3BC(*(void *)(v0 + 16), *(void (**)(long long *__return_ptr))(v0 + 24));
}

void sub_10027D4B0(uint64_t a1, uint64_t a2)
{
}

void sub_10027D4B8(uint64_t a1)
{
}

uint64_t sub_10027D4E8()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_10027D4F8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10027D514()
{
  return swift_slowDealloc();
}

void sub_10027D530(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t type metadata accessor for EmptyDescriptorProvider()
{
  return self;
}

ValueMetadata *type metadata accessor for EmptyDescriptor()
{
  return &type metadata for EmptyDescriptor;
}

id sub_10027D584(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 shouldRegisterCall:a2];

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v9 = 0;
LABEL_14:

  swift_bridgeObjectRelease();
  return v9;
}

void sub_10027D68C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10027D6F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_10027D740()
{
  return swift_unknownObjectWeakLoadStrong();
}

void sub_10027D7AC(void *a1)
{
  swift_unknownObjectWeakAssign();
}

uint64_t sub_10027D89C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallController_callChanged);
  sub_1002084D8(v1);
  return v1;
}

uint64_t sub_10027D984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDCallController_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDCallController_callChanged);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

void sub_10027D9E8()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallController_dataSources);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_13;
    }
  }
  sub_1002E3FA4(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v4 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v5 = v4;
    id v6 = [v4 calls];
    sub_1001F6204(0, (unint64_t *)&qword_10058A480);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v9 = _swiftEmptyArrayStorage[2];
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    if (v9 >= v8 >> 1) {
      sub_1002E3FA4(v8 > 1, v9 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v9 + 1;
    _swiftEmptyArrayStorage[v9 + 4] = v7;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v10 = _swiftEmptyArrayStorage[2];
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    do
    {
      ++v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002D204C();
      swift_bridgeObjectRelease();
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  }
  swift_bridgeObjectRelease();
  sub_1001F6204(0, &qword_100587010);
  sub_10027DCAC();
}

id sub_10027DCAC()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithCalls:isa];

  return v2;
}

char *sub_10027DD34(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DeviceRestrictionController();
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_allocWithZone((Class)type metadata accessor for DirtyCallManager());
  id v7 = a2;
  id v8 = sub_10026BC1C((uint64_t)v7);
  id result = (char *)[self sharedConnection];
  if (result)
  {
    DeviceRestrictionController.init(profileConnection:)();
    uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for CallController());
    uint64_t v11 = sub_10027E250(a1, v8, (uint64_t)v6, v10);

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10027DEB8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    uint64_t v4 = *(void (**)(uint64_t))(Strong + OBJC_IVAR___CSDCallController_callChanged);
    sub_1002084D8((uint64_t)v4);

    if (v4)
    {
      v4(a1);
      sub_100208490((uint64_t)v4);
    }
  }
}

uint64_t sub_10027DF4C(void *a1)
{
  uint64_t result = sub_10027E0E4(a1);
  if ((result & 1) == 0) {
    return result;
  }
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR___CSDCallController_dataSources);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_4:
      if (v5 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v5; ++i)
      {
        if ((v4 & 0xC000000000000001) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(v4 + 8 * i + 32);
        }
        id v8 = v7;
        [v7 registerCall:a1];
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = *(void **)(v1 + OBJC_IVAR___CSDCallController_dirtyCallManager);

  return (uint64_t)[v9 add:a1];
}

uint64_t sub_10027E0E4(void *a1)
{
  id v1 = a1;
  unint64_t v2 = swift_bridgeObjectRetain();
  LOBYTE(v1) = sub_10027D584(v2, v1);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

void sub_10027E148()
{
}

id sub_10027E188()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CallController()
{
  return self;
}

char *sub_10027E250(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  swift_unknownObjectWeakInit();
  id v8 = &a4[OBJC_IVAR___CSDCallController_callChanged];
  *(void *)id v8 = 0;
  *((void *)v8 + 1) = 0;
  *(void *)&a4[OBJC_IVAR___CSDCallController_dataSources] = a1;
  *(void *)&a4[OBJC_IVAR___CSDCallController_dirtyCallManager] = a2;
  v16.receiver = a4;
  v16.super_class = (Class)type metadata accessor for CallController();
  swift_unknownObjectRetain();
  unint64_t v9 = (char *)objc_msgSendSuper2(&v16, "init");
  DeviceRestrictionController.resetRestrictions()();
  uint64_t v10 = *(void **)&v9[OBJC_IVAR___CSDCallController_dirtyCallManager];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15[4] = sub_10027E430;
  void v15[5] = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  void v15[2] = sub_10027D68C;
  void v15[3] = &unk_10050FFB0;
  uint64_t v12 = _Block_copy(v15);
  swift_release();
  [v10 setCallChanged:v12];

  _Block_release(v12);
  uint64_t v13 = type metadata accessor for DeviceRestrictionController();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a3, v13);
  return v9;
}

uint64_t sub_10027E3F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10027E430(uint64_t a1)
{
}

uint64_t sub_10027E438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027E448()
{
  return swift_release();
}

uint64_t sub_10027E450()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027E488()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

unint64_t sub_10027E4A4()
{
  return (unint64_t)sub_10027E4CC() & 1;
}

id sub_10027E4CC()
{
  return [v0 isTTY];
}

uint64_t sub_10027E4F0()
{
  return sub_10027E548((SEL *)&selRef_pickableRoutesForTTY);
}

uint64_t sub_10027E51C()
{
  return sub_10027E548((SEL *)&selRef_bestGuessPickableRoutesForAnyCall);
}

uint64_t sub_10027E548(SEL *a1)
{
  id v2 = [v1 *a1];
  sub_1001F081C((uint64_t *)&unk_100586DF0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10027E5A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return sub_10027E5C4(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10027E5C4(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6)
{
  NSString v10 = String._bridgeToObjectiveC()();
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }
  v13[4] = a5;
  v13[5] = a6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10027E6B4;
  void v13[3] = &unk_100510068;
  uint64_t v11 = _Block_copy(v13);
  swift_retain();
  [v6 getPickableRoutesForCategory:v10 mode:a4 completion:v11];
  _Block_release(v11);

  return swift_release();
}

uint64_t sub_10027E6B4(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1001F081C((uint64_t *)&unk_100586DF0);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_10027E72C(uint64_t a1)
{
  return sub_10027E750(a1);
}

id sub_10027E750(uint64_t a1)
{
  id v4 = 0;
  if ([v1 pickRoute:a1 error:&v4]) {
    return v4;
  }
  id v3 = v4;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

unint64_t sub_10027E7FC()
{
  return (unint64_t)sub_10027E824() & 1;
}

id sub_10027E824()
{
  return [v0 otherSessionsRequestNoRingtoneInterruption];
}

id sub_10027E84C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [(id)swift_getObjCClassFromMetadata() isPhoneCallAudioCategory:v0];

  return v1;
}

uint64_t sub_10027E894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027E8A4()
{
  return swift_release();
}

uint64_t destroy for AudioActivationContext()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioActivationContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioActivationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioActivationContext()
{
  return &type metadata for AudioActivationContext;
}

void *sub_10027EA84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v28 = &_swiftEmptyDictionarySingleton;
  if ((a4 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10028419C();
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    *((void *)&v27 + 1) = sub_1001F6204(0, (unint64_t *)&qword_100585590);
    sub_100284168(*((uint64_t *)&v27 + 1), v7, v8, v9, v10, v11, v12, v13, (uint64_t)isa);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = sub_10028419C();
    if (v14 == 1668047476 && a3)
    {
      *((void *)&v27 + 1) = &type metadata for String;
      *(void *)&long long v26 = a2;
      *((void *)&v26 + 1) = a3;
      uint64_t v14 = swift_bridgeObjectRetain();
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    sub_100284168(v14, v15, v16, v17, v18, v19, v20, v21, v26);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Class v22 = UInt._bridgeToObjectiveC()().super.super.isa;
  uint64_t v23 = sub_1001F6204(0, (unint64_t *)&qword_100585590);
  *((void *)&v27 + 1) = v23;
  *(void *)&long long v26 = v22;
  sub_1002C2414((uint64_t)&v26);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24.super.super.Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  *((void *)&v27 + 1) = v23;
  *(NSNumber *)&long long v26 = v24;
  sub_1002C2414((uint64_t)&v26);
  return v28;
}

uint64_t sub_10027EC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 1668047728;
  if (!a3) {
    return 1668047974;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v6 == a3)
  {
    swift_bridgeObjectRelease();
    return 1668050283;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8) {
    return 1668050283;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v9 == a3)
  {
    swift_bridgeObjectRelease();
    return 1668051824;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    return 1668051824;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v15 == a3)
      {
        swift_bridgeObjectRelease();
        return 1668051817;
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v17) {
          return 1668051817;
        }
        else {
          return 1668047476;
        }
      }
    }
  }
  return v3;
}

uint64_t sub_10027EE04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = sub_10027EA84(a1 & 0xFFFFFFFF00000001, a2, a3, a4);
  uint64_t v49 = v4 + 64;
  uint64_t v5 = 1 << v4[32];
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *((void *)v4 + 8);
  int64_t v50 = (unint64_t)(v5 + 63) >> 6;
  int64_t v8 = 0;
  uint64_t v9 = (void *)swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v8 << 6);
LABEL_5:
  uint64_t v12 = *((void *)v4 + 7);
  uint64_t v13 = (void *)(*((void *)v4 + 6) + 16 * v11);
  uint64_t v14 = v13[1];
  *(void *)&long long v57 = *v13;
  *((void *)&v57 + 1) = v14;
  sub_100201880(v12 + 32 * v11, (uint64_t)v58);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100283A5C((uint64_t)&v57, (uint64_t)&v59, (uint64_t *)&unk_100587020);
    uint64_t v18 = v60;
    if (!v60)
    {
      swift_release();
      return (uint64_t)v9;
    }
    uint64_t v19 = v59;
    sub_1001F75B4(&v61, &v57);
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v18) {
      goto LABEL_41;
    }
    char v22 = sub_100283CC4();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_42;
    }
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v18) {
      goto LABEL_41;
    }
    char v25 = sub_100283CC4();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_42;
    }
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v18)
    {
LABEL_41:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = sub_100283CC4();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        sub_100201880((uint64_t)&v57, (uint64_t)&v55);
        goto LABEL_52;
      }
    }
LABEL_42:
    sub_100201880((uint64_t)&v57, (uint64_t)v54);
    if (swift_dynamicCast())
    {
      unint64_t v29 = v53;
      uint64_t v30 = sub_10027F2F8(v53);
      if (!v31)
      {
        uint64_t v32 = &type metadata for Int;
LABEL_50:
        Swift::OpaquePointer_optional v56 = v32;
        *(void *)&long long v55 = v29;
        goto LABEL_51;
      }
    }
    else
    {
      if (!swift_dynamicCast())
      {
        sub_100201880((uint64_t)&v57, (uint64_t)&v55);
        goto LABEL_51;
      }
      unint64_t v29 = v53;
      uint64_t v30 = sub_10027F2F8(v53);
      if (!v31)
      {
        uint64_t v32 = &type metadata for UInt;
        goto LABEL_50;
      }
    }
    uint64_t v52 = &type metadata for String;
    *(void *)&long long v51 = v30;
    *((void *)&v51 + 1) = v31;
    sub_1001F75B4(&v51, &v55);
LABEL_51:
    sub_1002018DC((uint64_t)v54);
LABEL_52:
    sub_100201880((uint64_t)&v55, (uint64_t)v54);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v51 = v9;
    unint64_t v34 = sub_100233664();
    uint64_t v36 = v9[2];
    BOOL v37 = (v35 & 1) == 0;
    Swift::Int v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    unint64_t v39 = v34;
    char v40 = v35;
    sub_1001F081C((uint64_t *)&unk_1005885B0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38))
    {
      unint64_t v41 = sub_100233664();
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_67;
      }
      unint64_t v39 = v41;
    }
    uint64_t v9 = (void *)v51;
    if (v40)
    {
      uint64_t v43 = (_OWORD *)(*(void *)(v51 + 56) + 32 * v39);
      sub_1002018DC((uint64_t)v43);
      sub_1001F75B4(v54, v43);
    }
    else
    {
      *(void *)(v51 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      uint64_t v44 = (void *)(v9[6] + 16 * v39);
      *uint64_t v44 = v19;
      v44[1] = v18;
      sub_1001F75B4(v54, (_OWORD *)(v9[7] + 32 * v39));
      uint64_t v45 = v9[2];
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_64;
      }
      _OWORD v9[2] = v47;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)&v55);
    sub_1002018DC((uint64_t)&v57);
    if (v7) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_65;
    }
    if (v15 < v50)
    {
      unint64_t v16 = *(void *)&v49[8 * v15];
      if (v16) {
        goto LABEL_9;
      }
      int64_t v17 = v8 + 2;
      ++v8;
      if (v15 + 1 < v50)
      {
        unint64_t v16 = *(void *)&v49[8 * v17];
        if (v16) {
          goto LABEL_12;
        }
        int64_t v8 = v15 + 1;
        if (v15 + 2 < v50)
        {
          unint64_t v16 = *(void *)&v49[8 * v15 + 16];
          if (v16)
          {
            v15 += 2;
            goto LABEL_9;
          }
          int64_t v17 = v15 + 3;
          int64_t v8 = v15 + 2;
          if (v15 + 3 < v50)
          {
            unint64_t v16 = *(void *)&v49[8 * v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_66;
                }
                if (v15 >= v50)
                {
                  int64_t v8 = v50 - 1;
                  goto LABEL_23;
                }
                unint64_t v16 = *(void *)&v49[8 * v15];
                ++v17;
                if (v16) {
                  goto LABEL_9;
                }
              }
            }
LABEL_12:
            int64_t v15 = v17;
LABEL_9:
            unint64_t v7 = (v16 - 1) & v16;
            unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
            int64_t v8 = v15;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = 0;
    memset(v58, 0, sizeof(v58));
    long long v57 = 0u;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10027F2F8(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  unint64_t v14 = bswap64(a1);
  size_t v3 = sub_1002838EC((size_t)&v14, (unint64_t)&v15);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_5;
  }
  if (!*(unsigned char *)(v3 + 32))
  {
    if (v4 != 1)
    {
      if (*(unsigned char *)(v3 + 33)) {
        goto LABEL_3;
      }
      if (v4 != 2)
      {
        uint64_t v10 = 34;
        while (1)
        {
          uint64_t v11 = v10 - 32;
          if (*(unsigned char *)(v3 + v10)) {
            break;
          }
          BOOL v12 = __OFADD__(v11, 1);
          uint64_t v13 = v10 - 31;
          if (v12) {
            goto LABEL_18;
          }
          uint64_t v8 = 0;
          ++v10;
          if (v13 == v4) {
            goto LABEL_6;
          }
        }
        if (v4 >= v11)
        {
          if ((v11 & 0x8000000000000000) == 0) {
            goto LABEL_3;
          }
          __break(1u);
        }
        __break(1u);
LABEL_18:
        __break(1u);
      }
    }
LABEL_5:
    uint64_t v8 = 0;
    goto LABEL_6;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_100587030);
  sub_1002839A0();
  uint64_t v5 = Data.init<A>(bytes:)();
  unint64_t v7 = v6;
  static String.Encoding.ascii.getter();
  uint64_t v8 = String.init(data:encoding:)();
  sub_1001F7498(v5, v7);
LABEL_6:
  swift_release();
  return v8;
}

uint64_t sub_10027F4C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10027EE04(a1 & 0xFFFFFFFF00000001, a2, a3, a4);
  uint64_t v4 = Dictionary.debugDescription.getter();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10027F530()
{
  return sub_10027F4C8(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32), *((void *)v0 + 1), *((void *)v0 + 2), v0[24]);
}

uint64_t sub_10027F548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 0;
  if (((a1 ^ a5) & 1) == 0 && HIDWORD(a1) == HIDWORD(a5))
  {
    uint64_t result = (a3 | a7) == 0;
    if (a3)
    {
      if (a7)
      {
        if (a2 == a6 && a3 == a7) {
          return 1;
        }
        else {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_10027F5A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10027F548(*a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32), *((void *)a1 + 1), *((void *)a1 + 2), 0, *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32), *((void *)a2 + 1), *((void *)a2 + 2));
}

uint64_t sub_10027F5D8(uint64_t a1, uint64_t a2)
{
  return sub_10027FF04(a1, a2, sub_100280BC8);
}

#error "10027F61C: call analysis failed (funcsize=21)"

uint64_t sub_10027F644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027FBCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100280DE8);
}

uint64_t sub_10027F65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027F97C(a1, a2, a3, sub_100280F18);
}

uint64_t sub_10027F674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027FDFC(a1, a2, a3, sub_10028106C);
}

uint64_t sub_10027F68C()
{
  sub_100283EFC();
  uint64_t v0 = sub_100283C40();
  uint64_t v3 = sub_100281190(v0, v1, v2);
  sub_100283BCC(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027F6D8(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_1005871B0, sub_100281320);
}

uint64_t sub_10027F6F8(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_1005871A0, sub_100281320);
}

uint64_t sub_10027F718(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_100587198, sub_100281320);
}

uint64_t sub_10027F738(uint64_t a1, uint64_t a2)
{
  return sub_10027FA64(a1, a2, sub_100281404);
}

uint64_t sub_10027F750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027FBCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002815DC);
}

uint64_t sub_10027F768()
{
  sub_100283EFC();
  uint64_t v0 = (_OWORD *)sub_100283C40();
  uint64_t v3 = sub_100281818(v0, v1, v2);
  sub_100283BCC((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

#error "10027F7E0: call analysis failed (funcsize=21)"

uint64_t sub_10027F808(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_100587178, sub_100281320);
}

uint64_t sub_10027F828(uint64_t a1)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  sub_100281AF4(a1, isUniquelyReferenced_nonNull_native);
  sub_100283BCC(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027F898()
{
  sub_100283EFC();
  uint64_t v0 = sub_100283C40();
  sub_100281BE8(v0, v1, v2);
  sub_100283BCC(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100586160, (uint64_t (*)(uint64_t))sub_1002822FC);
}

uint64_t sub_10027F904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100587128, (uint64_t (*)(uint64_t))sub_10028223C);
}

uint64_t sub_10027F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027FCE8(a1, a2, a3, (uint64_t)&qword_10058BB80, (void (*)(void))&type metadata accessor for URL);
}

uint64_t sub_10027F944(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_100587160, sub_10028294C);
}

uint64_t sub_10027F964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027F97C(a1, a2, a3, sub_100281CF8);
}

#error "10027F9A4: call analysis failed (funcsize=20)"

#error "10027FA24: call analysis failed (funcsize=32)"

uint64_t sub_10027FA4C(uint64_t a1, uint64_t a2)
{
  return sub_10027FA64(a1, a2, sub_100281F6C);
}

#error "10027FA94: call analysis failed (funcsize=22)"

uint64_t sub_10027FABC(uint64_t a1, int a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v2;
  *char v2 = 0x8000000000000000;
  unint64_t v6 = sub_10028212C(a1, a2, isUniquelyReferenced_nonNull_native);
  sub_100283BCC(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027FB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100588330, (uint64_t (*)(uint64_t))sub_10028223C);
}

uint64_t sub_10027FB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100587130, (uint64_t (*)(uint64_t))sub_10028223C);
}

uint64_t sub_10027FB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_1005884F0, (uint64_t (*)(uint64_t))sub_100282A3C);
}

uint64_t sub_10027FB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100587120, (uint64_t (*)(uint64_t))sub_1002822FC);
}

uint64_t sub_10027FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027FBCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002823BC);
}

uint64_t sub_10027FBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = sub_100283EC8();
  uint64_t v22 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  uint64_t v12 = a5(v8, v7, v6, a4, v11);
  sub_100283DCC(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22);

  return swift_bridgeObjectRelease();
}

#error "10027FC80: call analysis failed (funcsize=19)"

uint64_t sub_10027FCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_1005870E0, (uint64_t (*)(uint64_t))sub_1002822FC);
}

uint64_t sub_10027FCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027FCE8(a1, a2, a3, (uint64_t)&unk_1005870E8, (void (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10027FCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  sub_100283EC8();
  uint64_t v6 = sub_100283D64();
  uint64_t v11 = sub_1002826A0(v6, v7, v8, v9, v10, (uint64_t (*)(void))a5, a5);
  sub_100284030(v11, v12, v13, v14, v15, v16, v17, v18, v20, v21);

  return swift_bridgeObjectRelease();
}

#error "10027FD7C: call analysis failed (funcsize=19)"

uint64_t sub_10027FDA4(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_1005870D8, sub_10028294C);
}

uint64_t sub_10027FDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_1005870B0, (uint64_t (*)(uint64_t))sub_100282A3C);
}

uint64_t sub_10027FDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027FDFC(a1, a2, a3, sub_100282AFC);
}

#error "10027FE24: call analysis failed (funcsize=20)"

uint64_t sub_10027FE4C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_1002800D0(v7, result + 1);
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_1002841BC();
  sub_100282C3C(a1, a2, v9);
  sub_100283BCC(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027FEEC(uint64_t a1, uint64_t a2)
{
  return sub_10027FF04(a1, a2, sub_100282D64);
}

#error "10027FF34: call analysis failed (funcsize=22)"

uint64_t sub_10027FF5C(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_100587070, sub_100281320);
}

uint64_t sub_10027FF7C(uint64_t a1, uint64_t a2)
{
  return sub_10027FF9C(a1, a2, &unk_1005884A0, sub_100281320);
}

#error "10027FFFC: call analysis failed (funcsize=34)"

uint64_t sub_100280024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100588490, (uint64_t (*)(uint64_t))sub_10028223C);
}

uint64_t sub_100280044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100280064(a1, a2, a3, (uint64_t)&unk_100587060, (uint64_t (*)(uint64_t))sub_100282A3C);
}

uint64_t sub_100280064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  sub_100283EC8();
  uint64_t v6 = sub_100283D64();
  uint64_t v7 = a5(v6);
  sub_100284030(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002800D0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  sub_1001F081C(&qword_1005870A8);
  uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
  uint64_t v17 = v2;
  __CocoaDictionary.makeIterator()();
  uint64_t v3 = __CocoaDictionary.Iterator.next()();
  if (!v3)
  {
LABEL_16:
    swift_release();
    return v2;
  }
  uint64_t v4 = v3;
  sub_1001F6204(0, (unint64_t *)&qword_10058A480);
  while (1)
  {
    swift_dynamicCast();
    sub_1001F6204(0, (unint64_t *)&qword_100585590);
    swift_dynamicCast();
    uint64_t v2 = v17;
    unint64_t v5 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v5)
    {
      sub_100280904(v5 + 1, 1);
      uint64_t v2 = v17;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v7 = v2 + 64;
    uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v9 = result & ~v8;
    unint64_t v10 = v9 >> 6;
    if (((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6))) == 0) {
      break;
    }
    unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v2 + 48) + 8 * v11) = v16;
    *(void *)(*(void *)(v2 + 56) + 8 * v11) = v4;
    ++*(void *)(v2 + 16);
    uint64_t v4 = __CocoaDictionary.Iterator.next()();
    if (!v4) {
      goto LABEL_16;
    }
  }
  char v12 = 0;
  unint64_t v13 = (unint64_t)(63 - v8) >> 6;
  while (++v10 != v13 || (v12 & 1) == 0)
  {
    BOOL v14 = v10 == v13;
    if (v10 == v13) {
      unint64_t v10 = 0;
    }
    v12 |= v14;
    uint64_t v15 = *(void *)(v7 + 8 * v10);
    if (v15 != -1)
    {
      unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_100280310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  sub_100284084();
  sub_100283CEC();
  sub_1001F081C(&qword_100587100);
  uint64_t v18 = sub_100283D08();
  if (*(void *)(v15 + 16))
  {
    sub_100283BF0();
    uint64_t v19 = 0;
    if (!v16) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100284018();
    while (1)
    {
      sub_1002840B0();
      if ((v22 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_100283F30();
      if (v23)
      {
        sub_100283EE8();
        while (++v26 != v27 || (v25 & 1) == 0)
        {
          BOOL v28 = v26 == v27;
          if (v26 == v27) {
            uint64_t v26 = 0;
          }
          v25 |= v28;
          if (*(void *)(v17 + 8 * v26) != -1)
          {
            sub_100283EA0();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_100283F1C();
LABEL_27:
      sub_100283C64(v24);
      if (v16) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_36;
      }
      if (v20 >= a11) {
        goto LABEL_29;
      }
      ++v19;
      if (!*(void *)(a12 + 8 * v20))
      {
        uint64_t v19 = v20 + 1;
        if (v20 + 1 >= a11) {
          goto LABEL_29;
        }
        if (!*(void *)(a12 + 8 * v19))
        {
          uint64_t v21 = v20 + 2;
          if (v21 >= a11)
          {
LABEL_29:
            swift_release();
            BOOL v14 = a10;
            if (a14)
            {
              sub_100283EB4();
              if (v30 != v31) {
                sub_100284124(v29);
              }
              else {
                sub_100283E80(v29);
              }
              *(void *)(v15 + 16) = 0;
            }
            break;
          }
          if (!*(void *)(a12 + 8 * v21))
          {
            while (1)
            {
              uint64_t v19 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_37;
              }
              if (v19 >= a11) {
                goto LABEL_29;
              }
              ++v21;
              if (*(void *)(a12 + 8 * v19)) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v19 = v21;
        }
      }
LABEL_15:
      sub_1002840F0();
    }
  }
  swift_release();
  *BOOL v14 = v18;
  sub_100284108();
}

void sub_1002804C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
}

void sub_1002804CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
}

void sub_1002804D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  sub_100284084();
  sub_100283CEC();
  sub_1001F081C(v16);
  uint64_t v17 = sub_100283D08();
  uint64_t v18 = v17;
  if (*(void *)(v15 + 16))
  {
    uint64_t v19 = 1 << *(unsigned char *)(v15 + 32);
    uint64_t v44 = v15 + 64;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v21 = v20 & *(void *)(v15 + 64);
    int64_t v43 = (unint64_t)(v19 + 63) >> 6;
    uint64_t v22 = v17 + 64;
    swift_retain();
    int64_t v23 = 0;
    if (!v21) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v24 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    for (unint64_t i = v24 | (v23 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v23 << 6))
    {
      uint64_t v29 = (uint64_t *)(*(void *)(v15 + 48) + 16 * i);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(*(void *)(v15 + 56) + 8 * i);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      unint64_t v33 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v18 + 32));
      if (((-1 << v33) & ~*(void *)(v22 + 8 * (v33 >> 6))) == 0)
      {
        sub_100283EE8();
        while (++v36 != v37 || (v35 & 1) == 0)
        {
          BOOL v38 = v36 == v37;
          if (v36 == v37) {
            uint64_t v36 = 0;
          }
          v35 |= v38;
          if (*(void *)(v22 + 8 * v36) != -1)
          {
            sub_100283EA0();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_100283F1C();
LABEL_30:
      *(void *)(v22 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      unint64_t v39 = (void *)(*(void *)(v18 + 48) + 16 * v34);
      *unint64_t v39 = v31;
      v39[1] = v30;
      *(void *)(*(void *)(v18 + 56) + 8 * v34) = v32;
      ++*(void *)(v18 + 16);
      if (v21) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v26 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_39;
      }
      if (v26 >= v43) {
        goto LABEL_32;
      }
      unint64_t v27 = *(void *)(v44 + 8 * v26);
      ++v23;
      if (!v27)
      {
        int64_t v23 = v26 + 1;
        if (v26 + 1 >= v43) {
          goto LABEL_32;
        }
        unint64_t v27 = *(void *)(v44 + 8 * v23);
        if (!v27)
        {
          int64_t v28 = v26 + 2;
          if (v28 >= v43)
          {
LABEL_32:
            swift_release();
            if (a14)
            {
              sub_100283EB4();
              if (v41 != v42) {
                sub_100284124(v40);
              }
              else {
                sub_100283E80(v40);
              }
              *(void *)(v15 + 16) = 0;
            }
            break;
          }
          unint64_t v27 = *(void *)(v44 + 8 * v28);
          if (!v27)
          {
            while (1)
            {
              int64_t v23 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_40;
              }
              if (v23 >= v43) {
                goto LABEL_32;
              }
              unint64_t v27 = *(void *)(v44 + 8 * v23);
              ++v28;
              if (v27) {
                goto LABEL_18;
              }
            }
          }
          int64_t v23 = v28;
        }
      }
LABEL_18:
      unint64_t v21 = (v27 - 1) & v27;
    }
  }
  swift_release();
  *BOOL v14 = v18;
  sub_100284108();
}

void sub_100280750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  sub_100284084();
  sub_100283CEC();
  sub_1001F081C((uint64_t *)&unk_100587110);
  uint64_t v18 = sub_100283D08();
  if (*(void *)(v15 + 16))
  {
    sub_100283BF0();
    uint64_t v19 = 0;
    if (!v16) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100284018();
    while (1)
    {
      sub_1002840B0();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        int64_t v23 = v14;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_100283F30();
      if (v24)
      {
        sub_100283EE8();
        while (++v27 != v28 || (v26 & 1) == 0)
        {
          BOOL v29 = v27 == v28;
          if (v27 == v28) {
            uint64_t v27 = 0;
          }
          v26 |= v29;
          if (*(void *)(v17 + 8 * v27) != -1)
          {
            sub_100283EA0();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_100283F1C();
LABEL_27:
      sub_100283C64(v25);
      if (v16) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_36;
      }
      if (v20 >= a11) {
        goto LABEL_29;
      }
      ++v19;
      if (!*(void *)(a12 + 8 * v20))
      {
        uint64_t v19 = v20 + 1;
        if (v20 + 1 >= a11) {
          goto LABEL_29;
        }
        if (!*(void *)(a12 + 8 * v19))
        {
          uint64_t v21 = v20 + 2;
          if (v21 >= a11)
          {
LABEL_29:
            swift_release();
            BOOL v14 = a10;
            if (a14)
            {
              sub_100283EB4();
              if (v31 != v32) {
                sub_100284124(v30);
              }
              else {
                sub_100283E80(v30);
              }
              *(void *)(v15 + 16) = 0;
            }
            break;
          }
          if (!*(void *)(a12 + 8 * v21))
          {
            while (1)
            {
              uint64_t v19 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_37;
              }
              if (v19 >= a11) {
                goto LABEL_29;
              }
              ++v21;
              if (*(void *)(a12 + 8 * v19)) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v19 = v21;
        }
      }
LABEL_15:
      sub_1002840F0();
    }
  }
  swift_release();
  *BOOL v14 = v18;
  sub_100284108();
}

uint64_t sub_100280904(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1001F081C(&qword_1005870A8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v34 = v2;
    uint64_t v35 = v5 + 64;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
    {
      uint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      char v22 = *(void **)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        id v23 = v21;
        id v24 = v22;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(void *)(*(void *)(v7 + 48) + 8 * v28) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v28) = v22;
      ++*(void *)(v7 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        break;
      }
      uint64_t v18 = (void *)(v5 + 64);
      unint64_t v19 = *(void *)(v35 + 8 * v17);
      ++v14;
      if (!v19)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v35 + 8 * v14);
        if (!v19)
        {
          int64_t v20 = v17 + 2;
          if (v20 >= v11)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v34;
            if ((a2 & 1) == 0) {
              goto LABEL_39;
            }
            goto LABEL_35;
          }
          unint64_t v19 = *(void *)(v35 + 8 * v20);
          if (!v19)
          {
            while (1)
            {
              int64_t v14 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                goto LABEL_42;
              }
              if (v14 >= v11) {
                goto LABEL_32;
              }
              unint64_t v19 = *(void *)(v35 + 8 * v14);
              ++v20;
              if (v19) {
                goto LABEL_18;
              }
            }
          }
          int64_t v14 = v20;
        }
      }
LABEL_18:
      unint64_t v10 = (v19 - 1) & v19;
    }
    swift_release();
    uint64_t v3 = v34;
    uint64_t v18 = (void *)(v5 + 64);
    if ((a2 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_1002DF3E4(0, (unint64_t)(v33 + 63) >> 6, v18);
    }
    else {
      *uint64_t v18 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

_OWORD *sub_100280BC8(_OWORD *a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100233600(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001F081C((uint64_t *)&unk_1005870C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100233600(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    type metadata accessor for TTSAssetProperty(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_1002018DC((uint64_t)v19);
    return sub_1001F75B4(a1, v19);
  }
  else
  {
    return sub_100282E94(v14, a2, a1, v18);
  }
}

_OWORD *sub_100280CF0()
{
  sub_100283B9C();
  sub_100283B44();
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v7 = v4;
  char v8 = v5;
  sub_1001F081C((uint64_t *)&unk_1005885B0);
  if (!sub_100283D30()) {
    goto LABEL_5;
  }
  unint64_t v9 = sub_100283E64();
  if ((v8 & 1) != (v10 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v7 = v9;
LABEL_5:
  uint64_t v11 = *v3;
  if (v8)
  {
    BOOL v12 = (_OWORD *)(v11[7] + 32 * v7);
    sub_1002018DC((uint64_t)v12);
    return sub_1001F75B4(v0, v12);
  }
  else
  {
    sub_100282EFC(v7, v2, v1, v0, v11);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

unint64_t sub_100280DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v13 = sub_100233714(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001F081C(&qword_1005871C8);
  unint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t result = sub_100233714(a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = result;
LABEL_5:
  char v22 = *v6;
  if (v19)
  {
    id v23 = (uint64_t *)(v22[7] + 24 * v18);
    *id v23 = a1;
    v23[1] = a2;
    _OWORD v23[2] = a3;
  }
  else
  {
    return sub_100282F64(v18, a4, a1, a2, a3, v22);
  }
  return result;
}

uint64_t sub_100280F18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_100233664();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001F081C(&qword_100587048);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100233664();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  int64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = v21 + *(void *)(*(void *)(sub_1001F081C((uint64_t *)&unk_100587050) - 8) + 72) * v16;
    return sub_1002839F4(a1, v22);
  }
  else
  {
    sub_100282FB4(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_10028106C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = sub_100233758();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001F081C(&qword_1005871C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  uint64_t v18 = sub_100233758();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v20 + 56) + 24 * v16);
    swift_bridgeObjectRelease();
    unint64_t result = swift_unknownObjectRelease();
    *uint64_t v21 = a1;
    v21[1] = a2;
    void v21[2] = a3;
  }
  else
  {
    return sub_100283060(v16, a1, a2, a3, v20);
  }
  return result;
}

uint64_t sub_100281190(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (void *)*v3;
  unint64_t v13 = sub_1002337A4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001F081C(&qword_1005871A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1002337A4(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_1002830A8(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

void sub_100281320()
{
  sub_1001FCC38();
  sub_100283FC8(v3);
  sub_100283CA4();
  __chkstk_darwin(v4);
  sub_100283F6C();
  sub_100283B44();
  if (v7)
  {
    __break(1u);
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  sub_1001F081C(v2);
  if (sub_100284148())
  {
    sub_1002337A4(v0);
    sub_100284050();
    if (!v11) {
      goto LABEL_11;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v1 + 56);

    *(void *)(v12 + 8 * v8) = v19;
  }
  else
  {
    uint64_t v13 = sub_100283FAC();
    v14(v13);
    unint64_t v15 = sub_100284188();
    sub_10028383C(v15, v16, v17, v18);
  }
  sub_1001FCC08();
}

uint64_t sub_100281404(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v12 = sub_1002337A4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_1001F081C(&qword_100587190);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_1002337A4(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  char v21 = *v4;
  if (v18)
  {
    uint64_t v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 40);
    unint64_t v23 = v21[7] + *(void *)(v26 + 72) * v17;
    return v22(v23, a1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a2, v8);
    return sub_100283160(v17, (uint64_t)v10, a1, v21);
  }
}

void sub_1002815DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v13 = sub_100233664();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001F081C((uint64_t *)&unk_100588550);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100233664();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = v22[7] + 16 * v18;
    id v24 = *(void **)(v23 + 8);

    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + 8) = a2;
  }
  else
  {
    sub_10028323C(v18, a3, a4, a1, a2, v22);
    swift_bridgeObjectRetain();
  }
}

void sub_100281720()
{
  sub_100283E2C();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  Swift::Int v6 = *v0;
  uint64_t v19 = v7;
  sub_10023387C(v7);
  sub_100283B44();
  if (v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v11 = v8;
  char v12 = v9;
  sub_1001F081C(&qword_100587188);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v6)) {
    goto LABEL_5;
  }
  unint64_t v13 = sub_10023387C(v19);
  if ((v12 & 1) != (v14 & 1))
  {
LABEL_11:
    type metadata accessor for Name(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v13;
LABEL_5:
  uint64_t v15 = (void *)*v1;
  if (v12)
  {
    *(void *)(v15[7] + 8 * v11) = v5;
    sub_100283D50();
  }
  else
  {
    sub_100283288(v11, v19, v5, v15);
    sub_100283D50();
    id v18 = v16;
  }
}

_OWORD *sub_100281818(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1002336D0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001F081C(&qword_1005870F0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1002336D0(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  id v18 = *v4;
  if (v15)
  {
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_1002018DC((uint64_t)v19);
    return sub_1001F75B4(a1, v19);
  }
  else
  {
    sub_1002353DC(a2, (uint64_t)v21);
    return sub_1002832CC(v14, (uint64_t)v21, a1, v18);
  }
}

uint64_t sub_100281950(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v13 = (void *)*v4;
  unint64_t v14 = sub_1002337A4(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_1001F081C(&qword_100587180);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_1002337A4(a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v5;
  if (v20)
  {
    id v24 = (uint64_t *)(v23[7] + 16 * v19);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = v28;
    *id v24 = a1;
    v24[1] = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_100283348(v19, (uint64_t)v12, a1, v28, v23);
  }
  return result;
}

void sub_100281AF4(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100233910();
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v8 & 1) == 0;
  Swift::Int v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v7;
  char v13 = v8;
  sub_1001F081C(&qword_100587140);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v11)) {
    goto LABEL_5;
  }
  uint64_t v14 = sub_100233910();
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v14;
LABEL_5:
  uint64_t v16 = *v3;
  if (v13)
  {
    uint64_t v17 = *(void *)(v16 + 56);

    *(void *)(v17 + 8 * v12) = a1;
  }
  else
  {
    sub_100283408(v12, a1, v16);
  }
}

void sub_100281BE8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v9 = sub_100233714(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001F081C(&qword_100587170);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100233714(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v16;
LABEL_5:
  Swift::Int v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];

    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_100283288(v14, a2, a1, v18);
  }
}

uint64_t sub_100281CF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100233664();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001F081C((uint64_t *)&unk_100588530);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100233664();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  if (v17)
  {
    type metadata accessor for PendingMembershipInfo();
    return sub_100283AAC();
  }
  else
  {
    sub_100283444(v16, a2, a3, a1, *v5);
    return swift_bridgeObjectRetain();
  }
}

void sub_100281E50()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  __int16 v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  sub_100233714(v4);
  sub_100283B44();
  if (v15)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v16 = v13;
  char v17 = v14;
  sub_1001F081C(&qword_100587370);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    sub_100233714(v5);
    sub_100284050();
    if (!v19) {
      goto LABEL_12;
    }
    uint64_t v16 = v18;
  }
  if (v17)
  {
    uint64_t v20 = *(void *)(*v1 + 56) + 24 * v16;

    *(void *)uint64_t v20 = v11;
    *(void *)(v20 + 8) = v9;
    *(unsigned char *)(v20 + 16) = v7 & 1;
    *(unsigned char *)(v20 + 17) = HIBYTE(v7) & 1;
    sub_1001FCC08();
  }
  else
  {
    sub_1001FCC08();
    sub_1002834F0(v21, v22, v23, v24, v25, v26);
  }
}

void sub_100281F6C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  unint64_t v13 = sub_1002337A4(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001F081C((uint64_t *)&unk_100587150);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1002337A4(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_100283AAC();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_10028354C(v18, (uint64_t)v11, a1, v22);
  }
}

unint64_t sub_10028212C(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100235A18(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001F081C(&qword_100587148);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100235A18(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    unint64_t result = swift_release();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    return sub_1002835EC(v14, a2, a1, v18);
  }
  return result;
}

void sub_10028223C()
{
  sub_1001FCC38();
  sub_100283B9C();
  sub_100283B44();
  if (v6)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_1002840C8();
  if (sub_100283D30())
  {
    sub_100283E64();
    sub_100284040();
    if (!v8) {
      goto LABEL_12;
    }
    unint64_t v4 = v7;
  }
  uint64_t v9 = *v3;
  if (v5)
  {
    uint64_t v10 = *(void *)(v9 + 56);

    *(void *)(v10 + 8 * v4) = v0;
    sub_1001FCC08();
  }
  else
  {
    sub_10028373C(v4, v2, v1, v0, v9);
    sub_1001FCC08();
    swift_bridgeObjectRetain();
  }
}

void sub_1002822FC()
{
  sub_1001FCC38();
  sub_100283B9C();
  sub_100283B44();
  if (v6)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_1002840C8();
  if (sub_100283D30())
  {
    sub_100283E64();
    sub_100284040();
    if (!v8) {
      goto LABEL_12;
    }
    unint64_t v4 = v7;
  }
  uint64_t v9 = *v3;
  if (v5)
  {
    uint64_t v10 = *(void *)(v9 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v10 + 8 * v4) = v0;
    sub_1001FCC08();
  }
  else
  {
    sub_10028373C(v4, v2, v1, v0, v9);
    sub_1001FCC08();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_1002823BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v13 = sub_100233664();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001F081C((uint64_t *)&unk_1005884C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100233664();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 16 * v18);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v23 = a1;
    v23[1] = a2;
  }
  else
  {
    sub_10028323C(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002824FC(char a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v26 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void *)*v4;
  unint64_t v14 = sub_1002337A4(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_1001F081C(&qword_100587040);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1002337A4(a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = result;
LABEL_5:
  uint64_t v23 = *v5;
  if (v20)
  {
    uint64_t v24 = v23[7] + 16 * v19;
    *(unsigned char *)uint64_t v24 = a1 & 1;
    *(void *)(v24 + 8) = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_100283678(v19, (uint64_t)v12, a1 & 1, v26, v23);
  }
  return result;
}

uint64_t sub_1002826A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void))
{
  uint64_t v10 = v7;
  Swift::Int v15 = *v7;
  sub_100233664();
  sub_100283B44();
  if (v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v19 = v16;
  char v20 = v17;
  sub_1001F081C(a5);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_100233664();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v10;
  if (v20)
  {
    uint64_t v24 = *(void *)(v23 + 56);
    uint64_t v25 = a6(0);
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40);
    uint64_t v28 = v25;
    uint64_t v29 = v24 + *(void *)(v26 + 72) * v19;
    return v27(v29, a1, v28);
  }
  else
  {
    sub_100283758(v19, a2, a3, a1, v23, a7);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100282828(char a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_100233664();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001F081C(&qword_1005870D0);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_100233664();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
LABEL_5:
  char v20 = *v5;
  if (v17)
  {
    *(unsigned char *)(v20[7] + v16) = a1 & 1;
  }
  else
  {
    sub_1002837F4(v16, a2, a3, a1 & 1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10028294C()
{
  sub_1001FCC38();
  sub_100283FC8(v3);
  sub_100283CA4();
  __chkstk_darwin(v4);
  sub_100283F6C();
  sub_100283B44();
  if (v7)
  {
    __break(1u);
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  sub_1001F081C(v2);
  if (sub_100284148())
  {
    sub_1002337A4(v0);
    sub_100284050();
    if (!v11) {
      goto LABEL_11;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v1 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v12 + 8 * v8) = v19;
  }
  else
  {
    uint64_t v13 = sub_100283FAC();
    v14(v13);
    unint64_t v15 = sub_100284188();
    sub_10028383C(v15, v16, v17, v18);
  }
  sub_1001FCC08();
}

void sub_100282A30()
{
}

void sub_100282A3C()
{
  sub_1001FCC38();
  sub_100283B9C();
  sub_100283B44();
  if (v6)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_1002840C8();
  if (sub_100283D30())
  {
    sub_100283E64();
    sub_100284040();
    if (!v8) {
      goto LABEL_12;
    }
    unint64_t v4 = v7;
  }
  uint64_t v9 = *v3;
  if (v5)
  {
    uint64_t v10 = *(void *)(v9 + 56);
    swift_release();
    *(void *)(v10 + 8 * v4) = v0;
    sub_1001FCC08();
  }
  else
  {
    sub_10028373C(v4, v2, v1, v0, v9);
    sub_1001FCC08();
    swift_bridgeObjectRetain();
  }
}

id sub_100282AFC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v9 = (void *)*v4;
  uint64_t v10 = sub_100233A08((uint64_t)a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_1001F081C((uint64_t *)&unk_100587090);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  uint64_t v17 = sub_100233A08((uint64_t)a3);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_1001F6204(0, (unint64_t *)&qword_10058A480);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = *v5;
  if (v16)
  {
    char v20 = (uint64_t *)(v19[7] + 16 * v15);
    id result = (id)swift_bridgeObjectRelease();
    *char v20 = a1;
    v20[1] = a2;
  }
  else
  {
    sub_1002838A4(v15, (uint64_t)a3, a1, a2, v19);
    return a3;
  }
  return result;
}

void sub_100282C3C(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  uint64_t v8 = sub_100233A08((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_1001F081C(&qword_1005870A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  uint64_t v15 = sub_100233A08((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_1001F6204(0, (unint64_t *)&qword_10058A480);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = v17[7];

    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_100283288(v13, (uint64_t)a2, a1, v17);
    id v19 = a2;
  }
}

_OWORD *sub_100282D64(_OWORD *a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v8 = sub_100233A58((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_1001F081C(&qword_100587080);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_100233A58((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_13:
    type metadata accessor for CFString(0);
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = (_OWORD *)(v17[7] + 32 * v13);
    sub_1002018DC((uint64_t)v18);
    return sub_1001F75B4(a1, v18);
  }
  else
  {
    sub_100282E94(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
}

_OWORD *sub_100282E94(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  id result = sub_1001F75B4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void sub_100282EFC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  sub_1001F75B4(a4, (_OWORD *)(a5[7] + 32 * a1));
  sub_1002840E4();
  if (v8) {
    __break(1u);
  }
  else {
    a5[2] = v7;
  }
}

unint64_t sub_100282F64(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  *uint64_t v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t sub_100282FB4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100587050);
  uint64_t result = sub_100283A5C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_100587050);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_100283060(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  char v5 = (void *)(*(void *)(a5 + 56) + 24 * result);
  *char v5 = a2;
  v5[1] = a3;
  v5[2] = a4;
  uint64_t v6 = *(void *)(a5 + 16);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v8;
  }
  return result;
}

uint64_t sub_1002830A8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100283160(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

unint64_t sub_10028323C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_100283288(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *sub_1002832CC(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1001F75B4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_100283348(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

unint64_t sub_100283408(unint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(*(void *)(a3 + 56) + 8 * result) = a2;
  uint64_t v3 = *(void *)(a3 + 16);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 16) = v5;
  }
  return result;
}

uint64_t sub_100283444(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  long long v6 = (void *)(*(void *)(a5 + 48) + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  type metadata accessor for PendingMembershipInfo();
  uint64_t result = sub_100283AFC();
  uint64_t v8 = *(void *)(a5 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v10;
  }
  return result;
}

unint64_t sub_1002834F0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  *(unsigned char *)(v6 + 17) = HIBYTE(a5) & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

void sub_10028354C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100283B58(a1, a2, a3, a4);
  sub_100283BDC();
  uint64_t v5 = sub_100283F98();
  v6(v5);
  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  sub_100283AFC();
  sub_1002840E4();
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v4 + 16) = v7;
  }
}

unint64_t sub_1002835EC(unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100283630(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2 & 1;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100283678(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = a5[7] + 16 * a1;
  *(unsigned char *)uint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

unint64_t sub_10028373C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100283D90(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v7;
  }
  return result;
}

void sub_100283758(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  *(void *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v7 = (void *)(*(void *)(a5 + 48) + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  a6(0);
  sub_100283BDC();
  sub_1002840A0();
  v8();
  sub_1002840E4();
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v9;
  }
}

unint64_t sub_1002837F4(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(unsigned char *)(a5[7] + result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void sub_10028383C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100283B58(a1, a2, a3, a4);
  sub_100283BDC();
  uint64_t v7 = sub_100283F98();
  v8(v7);
  *(void *)(*(void *)(v4 + 56) + 8 * v6) = v5;
  sub_1002840E4();
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v4 + 16) = v9;
  }
}

unint64_t sub_1002838A4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

size_t sub_1002838EC(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    sub_1001F081C((uint64_t *)&unk_100585870);
    uint64_t v5 = (void *)swift_allocObject();
    unint64_t result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_1002839A0()
{
  unint64_t result = qword_100587038;
  if (!qword_100587038)
  {
    sub_1001F08B4(&qword_100587030);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587038);
  }
  return result;
}

uint64_t sub_1002839F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100283A5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_100283BDC();
  sub_1002840A0();
  v4();
  return a2;
}

uint64_t sub_100283AAC()
{
  uint64_t v2 = sub_100284134();
  v3(v2);
  sub_100283BDC();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v0, v1);
  return v0;
}

uint64_t sub_100283AFC()
{
  uint64_t v1 = sub_100284134();
  v2(v1);
  sub_100283BDC();
  sub_1002840A0();
  v3();
  return v0;
}

uint64_t sub_100283B58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  return type metadata accessor for UUID();
}

unint64_t sub_100283B9C()
{
  return sub_100233664();
}

uint64_t sub_100283BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *char v10 = a10;
  return result;
}

uint64_t sub_100283BF0()
{
  return swift_retain();
}

uint64_t sub_100283C40()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

void sub_100283C64(unint64_t a1@<X8>)
{
  *(void *)(v5 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v6 = (void *)(v2[6] + 16 * a1);
  *uint64_t v6 = v4;
  v6[1] = v3;
  *(void *)(v2[7] + 8 * a1) = v1;
  ++v2[2];
}

uint64_t sub_100283CC4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100283D08()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

BOOL sub_100283D30()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100283D64()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

unint64_t sub_100283D90(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100283DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *char v10 = a10;
  return result;
}

uint64_t sub_100283DDC()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100283E04()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100283E40()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

unint64_t sub_100283E64()
{
  return sub_100233664();
}

uint64_t sub_100283E80@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DF3E4(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_100283EC8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100283EFC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100283F50()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

unint64_t sub_100283F6C()
{
  return sub_1002337A4(v0);
}

uint64_t sub_100283F98()
{
  return v2 + v0 * v1;
}

uint64_t sub_100283FAC()
{
  return v0;
}

uint64_t sub_100283FC8(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return type metadata accessor for UUID();
}

uint64_t sub_100283FF0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100284030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *char v10 = a10;
  return result;
}

uint64_t sub_100284060()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1002840C8()
{
  return sub_1001F081C(v0);
}

void sub_100284124(char a1@<W8>)
{
  *uint64_t v1 = -1 << a1;
}

uint64_t sub_100284134()
{
  return 0;
}

BOOL sub_100284148()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100284168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1002C2414((uint64_t)&a9);
}

uint64_t sub_100284188()
{
  return v0;
}

uint64_t sub_10028419C()
{
  return sub_10027EC58(v2, v1, v0);
}

void sub_1002841BC()
{
  void *v0 = 0x8000000000000000;
}

void sub_1002841D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002E4D1C(v34, a1);
  uint64_t v33 = v34[0];
  uint64_t v28 = v34[1];
  int64_t v3 = v34[3];
  unint64_t v4 = v34[4];
  int64_t v30 = (unint64_t)(v34[2] + 64) >> 6;
  uint64_t v5 = _swiftEmptyArrayStorage;
  while (v4)
  {
    unint64_t v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v7 = v6 | (v3 << 6);
LABEL_20:
    uint64_t v12 = *(void *)(v33 + 56) + 24 * v7;
    uint64_t v13 = *(void *)(v12 + 8);
    char v14 = *(unsigned char *)(v12 + 16);
    char v32 = *(unsigned char *)(v12 + 17);
    id v15 = *(id *)v12;
    id v16 = (id)TUCopyIDSCanonicalAddressForHandle();
    if (!v16) {
      goto LABEL_26;
    }
    uint64_t v17 = v16;
    uint64_t v18 = v3;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v19 == a2 && v21 == a3)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002E3FD4(0, v5[2] + 1, 1);
        uint64_t v5 = v35;
      }
      unint64_t v26 = v5[2];
      unint64_t v25 = v5[3];
      if (v26 >= v25 >> 1)
      {
        sub_1002E3FD4((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v5 = v35;
      }
      v5[2] = v26 + 1;
      uint64_t v27 = &v5[3 * v26];
      v27[4] = v15;
      v27[5] = v13;
      *((unsigned char *)v27 + 48) = v14;
      *((unsigned char *)v27 + 49) = v32;
      int64_t v3 = v18;
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      int64_t v3 = v18;
      if (v23) {
        goto LABEL_28;
      }
LABEL_26:
    }
  }
  int64_t v8 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v8 >= v30) {
      goto LABEL_33;
    }
    unint64_t v9 = *(void *)(v28 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v30) {
        goto LABEL_33;
      }
      unint64_t v9 = *(void *)(v28 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v30) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v28 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v30) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v28 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v30) {
              goto LABEL_33;
            }
            unint64_t v9 = *(void *)(v28 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v30)
              {
                unint64_t v9 = *(void *)(v28 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_19;
                }
              }
LABEL_33:
              swift_bridgeObjectRelease();
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v3 = v10;
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_100284474(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v5 & 0xC000000000000001;
    unint64_t v32 = v5 + 32;
    unint64_t v9 = &selRef_conversationsByUUID;
    uint64_t v33 = v6;
    while (1)
    {
      if (v8)
      {
        int64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        int64_t v10 = *(void **)(v32 + 8 * v7);
        swift_unknownObjectRetain();
      }
      if (__OFADD__(v7++, 1)) {
        break;
      }
      id v12 = [v10 v9[190]];
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      char v14 = *(unsigned char *)(v13 + 32);
      uint64_t v15 = 1 << v14;
      unint64_t v16 = *(void *)(v13 + 56);
      if (v16)
      {
        uint64_t v17 = 0;
      }
      else
      {
        if ((v14 & 0x3Fu) < 7) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v13 + 64);
        if (!v16)
        {
          uint64_t v30 = 9;
          while (v30 - 7 < (unint64_t)(v15 + 63) >> 6)
          {
            unint64_t v16 = *(void *)(v13 + 8 * v30++);
            if (v16)
            {
              uint64_t v17 = v30 - 8;
              goto LABEL_10;
            }
          }
LABEL_32:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        uint64_t v17 = 1;
      }
LABEL_10:
      unint64_t v18 = __clz(__rbit64(v16));
      uint64_t v19 = v18 + (v17 << 6);
      if (v19 == v15) {
        goto LABEL_32;
      }
      if (v19 < 0 || v19 >= v15) {
        goto LABEL_40;
      }
      if (((*(void *)(v13 + 56 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
        goto LABEL_41;
      }
      unint64_t v20 = v8;
      unint64_t v21 = v5;
      uint64_t v22 = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      NSString v23 = String._bridgeToObjectiveC()();
      id v24 = (id)TUCopyIDSCanonicalAddressForDestinationID();

      if (v24)
      {
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();

        a3 = v22;
        if (v22)
        {
          BOOL v28 = v25 == a2 && v27 == v22;
          unint64_t v5 = v21;
          if (v28)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
LABEL_36:
            swift_bridgeObjectRelease();
            return 1;
          }
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v8 = v20;
          uint64_t v6 = v33;
          unint64_t v9 = &selRef_conversationsByUUID;
          if (v29)
          {
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v5 = v21;
          unint64_t v8 = v20;
          uint64_t v6 = v33;
          unint64_t v9 = &selRef_conversationsByUUID;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v9 = &selRef_conversationsByUUID;
        if (!v22)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return 1;
        }
        a3 = v22;
        swift_unknownObjectRelease();
        unint64_t v5 = v21;
        unint64_t v8 = v20;
        uint64_t v6 = v33;
      }
LABEL_33:
      if (v7 == v6) {
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1002847E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0) + 24);
    unint64_t result = sub_100233714(v14);
    if (v16)
    {
      unint64_t v17 = result;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *(void *)(a2 + v15);
      *(void *)(a2 + v15) = 0x8000000000000000;
      Swift::Int v19 = *(void *)(v23 + 24);
      sub_1001F081C(&qword_100587370);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19);
      unint64_t v20 = *(void **)(*(void *)(v23 + 56) + 24 * v17);
      _NativeDictionary._delete(at:)();
      *(void *)(a2 + v15) = v23;

      unint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v22) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v21 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v22) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v21 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v22) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v21 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v22) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v21 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v22) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v21 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v22) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v21 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100284A30()
{
  sub_1001F081C(&qword_100587228);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_100284AA8(uint64_t a1)
{
  int64_t v3 = *(NSObject **)&v1[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v4 = sub_1002393DC();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = sub_1002393DC();
  *(void *)(v5 + 16) = sub_10028A91C;
  *(void *)(v5 + 24) = v4;
  void v10[4] = sub_10028AB44;
  void v10[5] = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10032062C;
  v10[3] = &unk_100510410;
  unint64_t v6 = _Block_copy(v10);
  uint64_t v7 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100284BF0()
{
  return sub_100285014();
}

uint64_t (*sub_100284C24(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_100284A30();
  return sub_100284C6C;
}

uint64_t sub_100284C6C(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_100284AA8(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_100284AA8(v2);

  return swift_bridgeObjectRelease();
}

void sub_100284CC4()
{
  sub_1001FCC38();
  uint64_t v1 = sub_1001F081C(&qword_1005873B0);
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_1001F081C(&qword_1005873B8);
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002024D0();
  swift_beginAccess();
  sub_1001F081C(&qword_1005873C0);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10027AC68();
  swift_unknownObjectWeakInit();
  sub_1001F081C(&qword_1005873C8);
  sub_1001FCB74(&qword_1005873D0, &qword_1005873B0);
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  sub_1001FCB74(&qword_1005873D8, &qword_1005873B8);
  Publisher.eraseToAnyPublisher()();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
  sub_1001FCC08();
}

uint64_t sub_100284EC4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = sub_100284FA0();
  }
  else
  {
    type metadata accessor for UUID();
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_10028A890((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  }
  *a2 = v6;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100284FA0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100285014()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

void (*sub_100285080(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return sub_10028510C;
}

void sub_10028510C(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t sub_100285174()
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1001FCCD0();
  sub_1001F081C(&qword_1005873C0);
  sub_1001F6398();
  uint64_t v32 = v4;
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  sub_1001FCCD0();
  uint64_t v31 = v5;
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10028AC3C();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  sub_1001F2514();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1001FCCA0();
  uint64_t v29 = OBJC_IVAR___CSDSimulatedConversationManager_queue;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_10028A890((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001FCB74((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v1, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  uint64_t v12 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v28 + v29) = v12;
  int64_t v13 = &v11[OBJC_IVAR___CSDSimulatedConversationManager___activeGroupSessionsByGroupUUID];
  long long aBlock = (void **)_swiftEmptyDictionarySingleton;
  sub_1001F081C(&qword_100587228);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v13, v31, v33);
  uint64_t v14 = &v11[OBJC_IVAR___CSDSimulatedConversationManager_localCallerID];
  *(void *)uint64_t v14 = 0xD000000000000016;
  *((void *)v14 + 1) = 0x8000000100482A00;
  id v15 = [objc_allocWithZone((Class)CSDClientManager) initWithSerialQueue:v12];
  *(void *)&v11[OBJC_IVAR___CSDSimulatedConversationManager_clientManager] = v15;

  v40.receiver = v11;
  v40.super_class = (Class)type metadata accessor for SimulatedConversationManager(0);
  char v16 = (char *)objc_msgSendSuper2(&v40, "init");
  unint64_t v17 = *(NSObject **)&v16[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v18 = sub_10027AC68();
  *(void *)(v18 + 16) = v16;
  uint64_t v19 = sub_1002393DC();
  *(void *)(v19 + 16) = sub_10028A99C;
  *(void *)(v19 + 24) = v18;
  BOOL v38 = sub_10028AB44;
  uint64_t v39 = v19;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v35 = 1107296256;
  uint64_t v36 = sub_10032062C;
  uint64_t v37 = &unk_100510488;
  unint64_t v20 = _Block_copy(&aBlock);
  uint64_t v21 = v16;
  swift_retain();
  swift_release();
  dispatch_sync(v17, v20);
  _Block_release(v20);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = sub_10027AC68();
    *(void *)(v23 + 16) = v21;
    BOOL v38 = sub_10028A9A8;
    uint64_t v39 = v23;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_1002C2C88;
    uint64_t v37 = &unk_1005104D8;
    id v24 = _Block_copy(&aBlock);
    uint64_t v25 = v21;
    static DispatchQoS.unspecified.getter();
    sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v24);
    sub_1001F7664();
    v26();
    sub_1001F7664();
    v27();
    swift_release();
    swift_release();
    return (uint64_t)v25;
  }
  return result;
}

void sub_1002857B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR___CSDSimulatedConversationManager_clientManager);
  uint64_t v3 = self;
  id v4 = [v3 simulatedConversationControllerClientXPCInterface];
  [v2 setRemoteObjectInterface:v4];

  id v5 = [v3 simulatedConversationControllerServerXPCInterface];
  [v2 setExportedInterface:v5];

  [v2 setExportedObject:a1];
  [v2 setRequiredConnectionCapability:@"modify-simulated-conversations"];
  uint64_t v12 = sub_100285990;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  uint64_t v10 = sub_10027D68C;
  uint64_t v11 = &unk_100510500;
  uint64_t v6 = _Block_copy(&v8);
  [v2 setInterruptionHandler:v6];
  _Block_release(v6);
  uint64_t v12 = sub_10028599C;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  uint64_t v10 = sub_10027D68C;
  uint64_t v11 = &unk_100510528;
  uint64_t v7 = _Block_copy(&v8);
  [v2 setInvalidationHandler:v7];
  _Block_release(v7);
}

uint64_t sub_100285990(void *a1)
{
  return sub_1002859A8(a1);
}

uint64_t sub_10028599C(void *a1)
{
  return sub_1002859A8(a1);
}

uint64_t sub_1002859A8(void *a1)
{
  id v2 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10048F550;
  *(void *)(v3 + 56) = sub_1001F081C(&qword_1005873E8);
  *(void *)(v3 + 64) = sub_1001FCB74((unint64_t *)&unk_1005873F0, &qword_1005873E8);
  *(void *)(v3 + 32) = a1;
  id v4 = a1;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

void sub_100285A98(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR___CSDSimulatedConversationManager_clientManager);
  id v2 = String._bridgeToObjectiveC()();
  [v1 startListeningOnMachServiceWithName:v2];
}

void sub_100285B34()
{
  sub_1001FCC38();
  id v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v10);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_queue_t v21 = *(dispatch_queue_t *)&v0[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  sub_10024640C();
  v12();
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v11, v5);
  *(void *)(v15 + v14) = v4;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v2;
  uint64_t v16 = sub_1002393DC();
  *(void *)(v16 + 16) = sub_10028A7E0;
  *(void *)(v16 + 24) = v15;
  unsigned char v22[4] = sub_10028AB44;
  v22[5] = v16;
  v22[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  void v22[2] = sub_10032062C;
  v22[3] = &unk_100510398;
  unint64_t v17 = _Block_copy(v22);
  uint64_t v18 = v0;
  swift_bridgeObjectRetain();
  id v19 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v21, v17);
  _Block_release(v17);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v2) {
    __break(1u);
  }
  else {
    sub_1001FCC08();
  }
}

uint64_t sub_100285D48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v34 = a4;
  uint64_t v32 = a3;
  uint64_t v6 = (int *)type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)v30 - v13;
  uint64_t v15 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v30 - v19;
  uint64_t v21 = sub_100284FA0();
  sub_10022347C(a2, v21);
  swift_bridgeObjectRelease();
  int v22 = sub_1001F758C((uint64_t)v20, 1, (uint64_t)v6);
  uint64_t result = sub_10028A404((uint64_t)v20);
  if (v22 == 1)
  {
    v30[1] = a1;
    uint64_t v31 = v14;
    uint64_t v24 = v33;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    v25(v14, a2, v9);
    v25(v12, a2, v9);
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v32 = sub_10028608C(v26);
    *(void *)&v8[v6[6]] = _swiftEmptyDictionarySingleton;
    uint64_t v27 = v6[8];
    id v28 = v34;
    *(void *)&v8[v27] = sub_1002EC9A4(-1);
    v25(v8, (uint64_t)v12, v9);
    *(void *)&v8[v6[5]] = v32;
    *(void *)&v8[v6[7]] = v28;
    v8[v6[9]] = 1;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
    sub_10028A19C((uint64_t)v8, (uint64_t)v18);
    sub_1001F0530((uint64_t)v18, 0, 1, (uint64_t)v6);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v29 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    sub_1002C28F8((uint64_t)v18, (uint64_t)v31);
    v29(v35, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

void *sub_10028608C(uint64_t a1)
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v1;
  }
  uint64_t v3 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100201880(v3, (uint64_t)v8);
    sub_100201880((uint64_t)v8, (uint64_t)v7);
    sub_1001F081C(&qword_100587330);
    if (swift_dynamicCast()) {
      goto LABEL_7;
    }
    sub_100201880((uint64_t)v8, (uint64_t)v7);
    sub_1001F6204(0, (unint64_t *)&qword_10058B4C0);
    if (swift_dynamicCast()) {
      break;
    }
    sub_1002018DC((uint64_t)v8);
LABEL_11:
    v3 += 32;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = (void *)v9;
      goto LABEL_13;
    }
  }
  uint64_t result = [v6 _stripPotentialTokenURIWithToken:0];
  if (result)
  {
    uint64_t v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1002018DC((uint64_t)v8);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002862A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v6);
  uint64_t v7 = *(NSObject **)&v0[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  sub_10024640C();
  v8();
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10 + v9, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  uint64_t v11 = sub_1002393DC();
  *(void *)(v11 + 16) = sub_10028A6B4;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_10021E788;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10032062C;
  uint64_t aBlock[3] = &unk_100510320;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100286494(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v18[-v11];
  uint64_t v13 = sub_100284FA0();
  sub_10022347C(a2, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  int v15 = sub_1001F758C((uint64_t)v12, 1, v14);
  uint64_t result = sub_10028A404((uint64_t)v12);
  if (v15 != 1)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
    sub_1001F0530((uint64_t)v10, 1, 1, v14);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v17 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    sub_1002C28F8((uint64_t)v10, (uint64_t)v6);
    v17(v18, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1002866B0()
{
  sub_1001FCC38();
  uint64_t v41 = v2;
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v47 = v3;
  __chkstk_darwin(v4);
  int64_t v43 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  sub_1001FCCD0();
  uint64_t v42 = v8;
  uint64_t v36 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_1001FCCA0();
  uint64_t v18 = type metadata accessor for DispatchTime();
  uint64_t v38 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  int v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v37 = (char *)&v34 - v23;
  uint64_t v40 = *(void *)(v0 + OBJC_IVAR___CSDSimulatedConversationManager_queue);
  static DispatchTime.now()();
  *uint64_t v1 = 2;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v1, enum case for DispatchTimeInterval.seconds(_:), v14);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v1, v14);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v19 + 8);
  v39(v22, v18);
  uint64_t v24 = sub_10027AC68();
  swift_unknownObjectWeakInit();
  uint64_t v26 = v35;
  uint64_t v25 = v36;
  sub_10024640C();
  v27();
  unint64_t v28 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v29 + v28, v26, v25);
  v49[4] = sub_10028A608;
  v49[5] = v29;
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 1107296256;
  v49[2] = sub_1002C2C88;
  v49[3] = &unk_1005102A8;
  uint64_t v30 = _Block_copy(v49);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = v37;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v30);
  sub_1001F7664();
  v32();
  sub_1001F7664();
  v33();
  v39(v31, v38);
  swift_release();
  swift_release();
  sub_1001FCC08();
}

void sub_100286B58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
    uint64_t v9 = sub_100285080(v16);
    uint64_t v10 = sub_100359B04(v15);
    uint64_t v12 = v11;
    uint64_t v13 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    if (!sub_1001F758C(v12, 1, v13)) {
      sub_100286CF8();
    }
    ((void (*)(void *, void))v10)(v15, 0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ((void (*)(void *, void))v9)(v16, 0);
  }
}

uint64_t sub_100286CF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v3 = v0 + v2[6];
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10024E44C(v4);
  uint64_t v64 = v1;
  unint64_t v6 = *(void *)(v1 + v2[5]);
  if (v6 >> 62) {
    goto LABEL_73;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (id *)(v64 + v2[7]);
    uint64_t v68 = v6 & 0xFFFFFFFFFFFFFF8;
    unint64_t v69 = v6 & 0xC000000000000001;
    unint64_t v67 = v6 + 32;
    uint64_t v62 = v3;
    unint64_t v63 = v6;
    uint64_t v65 = v7;
    uint64_t v66 = v9;
    while (1)
    {
      if (v69)
      {
        uint64_t v2 = (int *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v8 >= *(void *)(v68 + 16)) {
          goto LABEL_72;
        }
        uint64_t v2 = *(int **)(v67 + 8 * v8);
        swift_unknownObjectRetain();
      }
      if (__OFADD__(v8++, 1)) {
        break;
      }
      id v11 = [v2 destinationURIs];
      uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      char v13 = *(unsigned char *)(v12 + 32);
      uint64_t v14 = 1 << v13;
      unint64_t v15 = *(void *)(v12 + 56);
      if (v15)
      {
        uint64_t v16 = 0;
      }
      else
      {
        unsigned int v22 = v13 & 0x3F;
        if (v22 < 7) {
          goto LABEL_26;
        }
        unint64_t v15 = *(void *)(v12 + 64);
        if (v15)
        {
          uint64_t v16 = 1;
        }
        else
        {
          if (v22 < 8) {
            goto LABEL_26;
          }
          unint64_t v15 = *(void *)(v12 + 72);
          if (!v15)
          {
            uint64_t v23 = 10;
            while (v23 - 7 < (unint64_t)(v14 + 63) >> 6)
            {
              unint64_t v15 = *(void *)(v12 + 8 * v23++);
              if (v15)
              {
                uint64_t v16 = v23 - 8;
                goto LABEL_11;
              }
            }
LABEL_26:
            uint64_t v21 = 0;
            uint64_t v20 = 0;
            goto LABEL_27;
          }
          uint64_t v16 = 2;
        }
      }
LABEL_11:
      unint64_t v17 = __clz(__rbit64(v15));
      uint64_t v18 = v17 + (v16 << 6);
      if (v18 == v14) {
        goto LABEL_26;
      }
      if (v18 < 0 || v18 >= v14) {
        goto LABEL_70;
      }
      if (((*(void *)(v12 + 56 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_71;
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v18);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      swift_bridgeObjectRetain();
LABEL_27:
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_100305458(v9);
      if (v20)
      {
        if (!v25) {
          goto LABEL_37;
        }
        if (v21 == v24 && v20 == v25)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
LABEL_66:
          swift_bridgeObjectRelease();
          goto LABEL_67;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_38;
        }
      }
      else if (v25)
      {
LABEL_37:
        swift_bridgeObjectRelease();
LABEL_38:
        id v28 = [v2 destinationURIs];
        uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        char v30 = *(unsigned char *)(v29 + 32);
        uint64_t v31 = 1 << v30;
        unint64_t v32 = *(void *)(v29 + 56);
        if (v32)
        {
          uint64_t v33 = 0;
LABEL_40:
          uint64_t v34 = __clz(__rbit64(v32)) + (v33 << 6);
          if (v34 != v31)
          {
            uint64_t v35 = sub_1002475B8(v34, *(_DWORD *)(v29 + 36), 0, v29);
            uint64_t v37 = v36;
            swift_bridgeObjectRelease();
            uint64_t v38 = self;
            NSString v39 = String._bridgeToObjectiveC()();
            id v40 = [v38 normalizedHandleWithDestinationID:v39];

            if (v40)
            {
              uint64_t v41 = swift_bridgeObjectRetain();
              sub_1002841D0(v41, v35, v37);
              uint64_t v43 = *(void *)(v42 + 16);
              if (v43)
              {
                uint64_t v44 = v40;
                uint64_t v45 = v42 + 40;
                swift_bridgeObjectRetain();
                for (uint64_t i = 0; i != v43; ++i)
                {
                  uint64_t v47 = *(void *)(v45 + 24 * i);
                  uint64_t v48 = static Hasher._hash(seed:_:)();
                  uint64_t v49 = -1 << *((unsigned char *)v5 + 32);
                  unint64_t v50 = v48 & ~v49;
                  if ((*(void *)((char *)v5 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v50))
                  {
                    uint64_t v51 = v5[6];
                    if (*(void *)(v51 + 8 * v50) == v47)
                    {
LABEL_49:
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        sub_1002E25C4();
                      }
                      sub_100377D14(v50);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v52 = ~v49;
                      while (1)
                      {
                        unint64_t v50 = (v50 + 1) & v52;
                        if (((*(void *)((char *)v5 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v50) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v51 + 8 * v50) == v47) {
                          goto LABEL_49;
                        }
                      }
                    }
                  }
                }
                swift_unknownObjectRelease();

                swift_bridgeObjectRelease_n();
                uint64_t v3 = v62;
                unint64_t v6 = v63;
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v53 = sub_1002EC9A4(-1);
                sub_10027F9CC(v40, v53, 0, v53);
                swift_unknownObjectRelease();
              }
              uint64_t v7 = v65;
              uint64_t v9 = v66;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              uint64_t v9 = v66;
            }
            goto LABEL_67;
          }
        }
        else if ((v30 & 0x3Fu) >= 7)
        {
          unint64_t v32 = *(void *)(v29 + 64);
          if (v32)
          {
            uint64_t v33 = 1;
            goto LABEL_40;
          }
          uint64_t v54 = 9;
          while (v54 - 7 < (unint64_t)(v31 + 63) >> 6)
          {
            unint64_t v32 = *(void *)(v29 + 8 * v54++);
            if (v32)
            {
              uint64_t v33 = v54 - 8;
              goto LABEL_40;
            }
          }
        }
        swift_unknownObjectRelease();
        goto LABEL_66;
      }
      swift_unknownObjectRelease();
LABEL_67:
      if (v8 == v7) {
        goto LABEL_74;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_74:
  swift_bridgeObjectRelease();
  uint64_t v55 = swift_bridgeObjectRetain();
  sub_1002847E8(v55, v64);
  swift_bridgeObjectRelease();
  id v56 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_10048F550;
  swift_bridgeObjectRetain();
  sub_1001F081C((uint64_t *)&unk_100587360);
  uint64_t v58 = String.init<A>(reflecting:)();
  uint64_t v60 = v59;
  *(void *)(v57 + 56) = &type metadata for String;
  *(void *)(v57 + 64) = sub_1001F3B08();
  *(void *)(v57 + 32) = v58;
  *(void *)(v57 + 40) = v60;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_100287340()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedConversationManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10028741C()
{
  return type metadata accessor for SimulatedConversationManager(0);
}

uint64_t type metadata accessor for SimulatedConversationManager(uint64_t a1)
{
  return sub_10028A058(a1, (uint64_t *)&unk_100587210);
}

void sub_100287444()
{
  sub_1002874F0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002874F0()
{
  if (!qword_100587220)
  {
    sub_1001F08B4(&qword_100587228);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100587220);
    }
  }
}

id sub_10028754C(char a1)
{
  id v2 = [objc_allocWithZone((Class)TUMutableConversationParticipantCapabilities) init];
  id v3 = sub_10028AC80((uint64_t)[v2 setScreenSharingAvailable:1], "setGondolaCallingAvailable:");
  id v4 = sub_10028AC80((uint64_t)v3, "setSupportsLeaveContext:");
  id v5 = sub_10028AC80((uint64_t)v4, "setGftDowngradeToOneToOneAvailable:");
  id v6 = sub_10028AC80((uint64_t)v5, "setUPlusOneScreenShareAvailable:");
  sub_10028AC80((uint64_t)v6, "setUPlusNDowngradeAvailable:");
  [v2 setSharePlayProtocolVersion:TUSharePlayProtocolVersion()];
  [v2 setPersonaAvailable:a1 & 1];
  id v7 = v2;
  [v7 setVisionCallEstablishmentVersion:TUVisionCallEstablishmentVersion()];

  id v8 = v7;
  [v8 setVisionFeatureVersion:TUVisionFeatureVersion()];

  [v8 setUPlusOneAVLessAvailable:1];
  id v9 = objc_msgSend(objc_msgSend(self, "localCapabilities"), "isEnabled");
  swift_unknownObjectRelease();
  [v8 setMomentsAvailable:v9];
  return v8;
}

BOOL sub_1002876B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return ((a2 != a5) | ((static NSObject.== infix(_:_:)() & 1) == 0) | (a3 ^ a6) & 1 | ((a3 ^ a6) >> 8) & 1) == 0;
}

BOOL sub_100287748(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  if (*(unsigned char *)(a2 + 17)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return sub_1002876B8(*(void *)a1, *(void *)(a1 + 8), v2 | *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), v3 | *(unsigned __int8 *)(a2 + 16));
}

void sub_100287788()
{
  sub_1001FCC38();
  int v3 = v2;
  id v5 = v4;
  uint64_t v29 = (uint64_t)v4;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_10028ABE0(v7, v29);
  sub_1001F6398();
  __chkstk_darwin(v8);
  uint64_t v10 = sub_10028ABB4(v9, v30);
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  id v14 = sub_10028AC98();
  sub_1001F081C(&qword_100584B20);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1004904F0;
  *(void *)(v15 + 56) = sub_1001F6204(0, &qword_100587390);
  *(void *)(v15 + 64) = sub_1001FCAC8(&qword_100587398, &qword_100587390);
  *(void *)(v15 + 32) = v3;
  id v32 = v3;
  id v16 = [v5 identifier];
  *(void *)(v15 + 96) = &type metadata for UInt64;
  *(void *)(v15 + 104) = &protocol witness table for UInt64;
  *(void *)(v15 + 72) = v16;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v15 + 136) = sub_1001F6204(0, (unint64_t *)&unk_100587378);
  *(void *)(v15 + 144) = sub_1001FCAC8(&qword_100587380, (unint64_t *)&unk_100587378);
  *(void *)(v15 + 112) = isa;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_10024640C();
  v18();
  sub_10028AC58();
  unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((v19 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v0;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))((char *)&unk_100587378 + v22, v1, v10);
  *(void *)(v22 + v20) = v31;
  *(void *)(v22 + v21) = v32;
  v33[4] = sub_10028A524;
  v33[5] = v22;
  v33[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v33[2] = sub_1002C2C88;
  uint64_t v33[3] = &unk_100510230;
  uint64_t v23 = _Block_copy(v33);
  id v24 = v32;
  id v25 = v0;
  id v26 = v31;
  static DispatchQoS.unspecified.getter();
  sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10028ACBC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  sub_1001F7664();
  v27();
  sub_1001F7664();
  v28();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100287B94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v35 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  id v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)v31 - v15;
  uint64_t v17 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  uint64_t v20 = sub_100284FA0();
  sub_10022347C(a2, v20);
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v16, 1, v17) == 1) {
    return sub_10028A404((uint64_t)v16);
  }
  sub_10028A19C((uint64_t)v16, (uint64_t)v19);
  id v22 = [a3 identifier];
  uint64_t v23 = *(int *)(v17 + 24);
  uint64_t v24 = *(void *)&v19[v23];
  if (*(void *)(v24 + 16))
  {
    unint64_t v25 = sub_100233714((uint64_t)v22);
    if (v26)
    {
      uint64_t v27 = *(void *)(v24 + 56) + 24 * v25;
      id v28 = *(void **)v27;
      uint64_t v33 = *(void *)(v27 + 8);
      v31[1] = *(unsigned __int8 *)(v27 + 16);
      unsigned int v34 = *(unsigned __int8 *)(v27 + 17);
      id v32 = v28;
      id v29 = v35;
      if (sub_10028A480((char)[v35 hasSet])) {
        unsigned int v34 = [v29 isSpatialPersonaEnabled];
      }
      swift_isUniquelyReferenced_nonNull_native();
      v37[0] = *(void *)&v19[v23];
      *(void *)&v19[v23] = 0x8000000000000000;
      sub_100281E50();
      *(void *)&v19[v23] = v37[0];
      swift_bridgeObjectRelease();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  sub_10028A200((uint64_t)v19, (uint64_t)v14);
  sub_1001F0530((uint64_t)v14, 0, 1, v17);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v30 = (void (*)(void *, void))static Published.subscript.modify();
  sub_1002C28F8((uint64_t)v14, (uint64_t)v10);
  v30(v37, 0);
  swift_release();
  swift_release();
  return sub_10028A294((uint64_t)v19);
}

void sub_100287F14()
{
  sub_1001FCC38();
  uint64_t v37 = v0;
  int v2 = v1;
  id v4 = v3;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v41 = v5;
  __chkstk_darwin(v6);
  sub_10028ABE0(v7, v33);
  sub_1001F6398();
  uint64_t v39 = v9;
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  uint64_t v36 = sub_10028ABB4(v10, v33);
  sub_1001F6398();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15);
  id v16 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1004904F0;
  *(void *)(v17 + 56) = sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  *(void *)(v17 + 64) = sub_1001FCAC8(&qword_100587388, (unint64_t *)&unk_100586E00);
  *(void *)(v17 + 32) = v4;
  *(void *)(v17 + 96) = sub_1001F6204(0, &qword_100587390);
  *(void *)(v17 + 104) = sub_1001FCAC8(&qword_100587398, &qword_100587390);
  *(void *)(v17 + 72) = v2;
  id v34 = v4;
  id v18 = v2;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v17 + 136) = sub_1001F6204(0, &qword_100587378);
  *(void *)(v17 + 144) = sub_1001FCAC8(&qword_100587380, &qword_100587378);
  *(void *)(v17 + 112) = isa;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v20 = v37;
  uint64_t v35 = *(void *)&v37[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v21 = v36;
  sub_10024640C();
  v22();
  unint64_t v23 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v25 + v23, (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
  char v26 = v34;
  *(void *)(v25 + v24) = v34;
  *(void *)(v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  v43[4] = sub_10028A468;
  v43[5] = v25;
  v43[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  id v43[2] = sub_1002C2C88;
  void v43[3] = &unk_1005101E0;
  uint64_t v27 = _Block_copy(v43);
  id v28 = v26;
  id v29 = v18;
  id v30 = v20;
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = _swiftEmptyArrayStorage;
  sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10028ACBC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  sub_1001F7664();
  v31();
  sub_1001F7664();
  v32();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100288368(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v42 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v40 - v14;
  uint64_t v16 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v16);
  id v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100284FA0();
  sub_10022347C(a2, v19);
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v15, 1, v16) == 1) {
    return sub_10028A404((uint64_t)v15);
  }
  sub_10028A19C((uint64_t)v15, (uint64_t)v18);
  id v21 = (id)TUCopyIDSCanonicalAddressForHandle();
  v40[1] = a1;
  if (v21)
  {
    id v22 = v21;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v24 = 0;
  }
  unint64_t v25 = *(void *)&v18[*(int *)(v16 + 20)];
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v26 < 3)
  {
    sub_10028A294((uint64_t)v18);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = swift_bridgeObjectRetain();
    char v28 = sub_100284474(v27, v41, v24);
    swift_bridgeObjectRelease();
    if (v28)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = sub_1002EC9A4(-1);
      id v30 = a3;
      id v31 = v42;
      int v32 = sub_10028A480((char)[v42 hasSet]);
      uint64_t v41 = v29;
      if (v32) {
        [v31 isSpatialPersonaEnabled];
      }
      uint64_t v38 = *(int *)(v16 + 24);
      id v42 = v30;
      swift_isUniquelyReferenced_nonNull_native();
      v44[0] = *(void *)&v18[v38];
      *(void *)&v18[v38] = 0x8000000000000000;
      sub_100281E50();
      *(void *)&v18[v38] = v44[0];
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v9, a2, v7);
      sub_10028A200((uint64_t)v18, (uint64_t)v13);
      sub_1001F0530((uint64_t)v13, 0, 1, v16);
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v39 = (void (*)(void *, void))static Published.subscript.modify();
      sub_1002C28F8((uint64_t)v13, (uint64_t)v9);
      v39(v44, 0);

      swift_release();
      swift_release();
    }
    else
    {
      id v33 = sub_1001B1C90();
      sub_1001F081C(&qword_100584B20);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_10048FB00;
      *(void *)(v34 + 56) = sub_1001F081C(&qword_1005873A0);
      *(void *)(v34 + 64) = sub_1001FCB74(&qword_1005873A8, &qword_1005873A0);
      *(void *)(v34 + 32) = v25;
      if (v24)
      {
        v44[0] = v41;
        v44[1] = v24;
        swift_bridgeObjectRetain();
        uint64_t v35 = String.init<A>(reflecting:)();
        unint64_t v37 = v36;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v37 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }
      *(void *)(v34 + 96) = &type metadata for String;
      *(void *)(v34 + 104) = sub_1001F3B08();
      *(void *)(v34 + 72) = v35;
      *(void *)(v34 + 80) = v37;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    return sub_10028A294((uint64_t)v18);
  }
}

uint64_t sub_1002888A4(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  uint64_t v10 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1001F2514();
  uint64_t v16 = v15 - v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = a3;
  id v18 = a4;
  id v19 = a1;
  a6(v17, v18, v16);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
}

void sub_100288994()
{
  sub_1001FCC38();
  unint64_t v27 = v2;
  char v28 = v0;
  int v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_10028ABE0(v5, v25);
  sub_1001F6398();
  __chkstk_darwin(v6);
  uint64_t v8 = sub_10028ABB4(v7, v26);
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  id v12 = sub_10028AC98();
  sub_1001F081C(&qword_100584B20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10048FB00;
  id v14 = [v3 identifier];
  *(void *)(v13 + 56) = &type metadata for UInt64;
  *(void *)(v13 + 64) = &protocol witness table for UInt64;
  *(void *)(v13 + 32) = v14;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v13 + 96) = sub_1001F6204(0, &qword_100587378);
  *(void *)(v13 + 104) = sub_1001FCAC8(&qword_100587380, &qword_100587378);
  *(void *)(v13 + 72) = isa;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_10024640C();
  v16();
  sub_10028AC58();
  unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))((char *)isa + v19, v1, v8);
  *(void *)(v19 + v18) = v27;
  v29[4] = sub_10028A398;
  v29[5] = v19;
  v29[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v29[2] = sub_1002C2C88;
  uint64_t v29[3] = &unk_100510190;
  uint64_t v20 = _Block_copy(v29);
  id v21 = v28;
  id v22 = v27;
  static DispatchQoS.unspecified.getter();
  sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10028ACBC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  sub_1001F7664();
  v23();
  sub_1001F7664();
  v24();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100288D38(uint64_t a1, uint64_t a2, void *a3)
{
  id v39 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100284FA0();
  sub_10022347C(a2, v18);
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v14, 1, v15) == 1) {
    return sub_10028A404((uint64_t)v14);
  }
  uint64_t v34 = v8;
  uint64_t v35 = v5;
  uint64_t v36 = a2;
  uint64_t v37 = v6;
  uint64_t v38 = a1;
  sub_10028A19C((uint64_t)v14, (uint64_t)v17);
  id v20 = v39;
  id v21 = [v39 identifier];
  uint64_t v22 = *(int *)(v15 + 24);
  uint64_t v23 = (void *)sub_100223520((uint64_t)v21, *(void *)&v17[v22]);

  if (v23)
  {
    unint64_t v24 = sub_100233714((uint64_t)[v20 identifier]);
    if (v25)
    {
      unint64_t v26 = v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v40[0] = *(void *)&v17[v22];
      uint64_t v28 = v40[0];
      *(void *)&v17[v22] = 0x8000000000000000;
      Swift::Int v29 = *(void *)(v28 + 24);
      sub_1001F081C(&qword_100587370);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v29);
      uint64_t v30 = v40[0];
      id v31 = *(void **)(*(void *)(v40[0] + 56) + 24 * v26);
      _NativeDictionary._delete(at:)();
      *(void *)&v17[v22] = v30;

      swift_bridgeObjectRelease();
    }
    uint64_t v32 = (uint64_t)v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v34, v36, v35);
    sub_10028A200((uint64_t)v17, (uint64_t)v12);
    sub_1001F0530((uint64_t)v12, 0, 1, v15);
    swift_getKeyPath();
    swift_getKeyPath();
    id v33 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    sub_1002C28F8((uint64_t)v12, v32);
    v33(v40, 0);
    swift_release();
    swift_release();
  }
  return sub_10028A294((uint64_t)v17);
}

void sub_100289198()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10028AC3C();
  uint64_t v17 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002024D0();
  id v12 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10048F550;
  *(void *)(v13 + 56) = sub_1001F081C(&qword_100587338);
  *(void *)(v13 + 64) = sub_1001FCB74((unint64_t *)&unk_100587340, &qword_100587338);
  *(void *)(v13 + 32) = v4;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v14 = sub_1002393DC();
  *(void *)(v14 + 16) = v0;
  *(void *)(v14 + 24) = v4;
  v18[4] = sub_10028A150;
  v18[5] = v14;
  v18[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  void v18[2] = sub_1002C2C88;
  void v18[3] = &unk_100510140;
  uint64_t v15 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  id v16 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10028A890((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10028ACBC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v17);
  swift_release();
  sub_1001FCC08();
}

void sub_100289484(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587350);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v9 = __chkstk_darwin(v41);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 normalizedHandleWithDestinationID:v15];

  if (!v16) {
    return;
  }
  id v17 = objc_allocWithZone((Class)TUConversationMember);
  id v43 = v16;
  id v37 = [v17 initWithHandle:v16];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v38 = v13;
  uint64_t v39 = a1;
  if (v18)
  {
    uint64_t v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v35 = v8;
    uint64_t v36 = v6;
    uint64_t v20 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(a2 + 8 * v20 + 32);
      }
      uint64_t v22 = v21;
      ++v20;
      id v23 = objc_msgSend(v21, "value", v35, v36, v37);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v18 != v20);
    uint64_t v19 = v44;
    uint64_t v8 = v35;
    uint64_t v6 = v36;
  }
  unint64_t v45 = (unint64_t)v19;
  id v24 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (!v24)
  {
LABEL_19:
    __break(1u);
    return;
  }
  char v25 = v24;
  sub_1001F6204(0, &qword_1005865E0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100289994();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  UUID.init()();
  unint64_t v26 = v45;
  unint64_t v27 = (int *)v41;
  *(void *)&v11[*(int *)(v41 + 24)] = _swiftEmptyDictionarySingleton;
  uint64_t v28 = v27[8];
  id v29 = v37;
  *(void *)&v11[v28] = sub_1002EC9A4(-1);
  uint64_t v30 = v40;
  id v31 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  uint64_t v32 = v42;
  v31(v11, v8, v42);
  *(void *)&v11[v27[5]] = v26;
  *(void *)&v11[v27[7]] = v29;
  v11[v27[9]] = 0;
  sub_100286CF8();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v32);
  uint64_t v33 = (uint64_t)v38;
  sub_10028A19C((uint64_t)v11, (uint64_t)v38);
  v31(v8, (char *)v33, v32);
  sub_10028A200(v33, (uint64_t)v6);
  sub_1001F0530((uint64_t)v6, 0, 1, (uint64_t)v27);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v34 = (void (*)(void **, void))static Published.subscript.modify();
  sub_1002C28F8((uint64_t)v6, (uint64_t)v8);
  v34(&v44, 0);

  swift_release();
  swift_release();
  sub_10028A294(v33);
}

id sub_100289994()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() destinationWithURI:v0];

  return v1;
}

void *sub_100289A6C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v11;
    *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v12 = v11;
  }
  return a1;
}

void sub_100289B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + *(int *)(a2 + 28));
}

uint64_t sub_100289C04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v10;
  return a1;
}

uint64_t sub_100289CC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100289D98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100289E3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t sub_100289EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100289F10);
}

uint64_t sub_100289F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_100274480();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_1001F758C(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_100289F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100289FB0);
}

void sub_100289FB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_100274480();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_1001F0530(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(uint64_t a1)
{
  return sub_10028A058(a1, qword_1005872E8);
}

uint64_t sub_10028A058(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028A08C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10028A150()
{
  sub_100289484(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10028A158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10028A168()
{
  return swift_release();
}

uint64_t sub_10028A170()
{
  return sub_100285014();
}

uint64_t sub_10028A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028A200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028A264@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100284FA0();
  *a1 = result;
  return result;
}

uint64_t sub_10028A294(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028A2F0()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  unint64_t v3 = (*(void *)(v2 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v4 = sub_10021EBB8();
  v5(v4);

  uint64_t v6 = sub_10028AC70();

  return _swift_deallocObject(v6, v7, v8);
}

uint64_t sub_10028A398()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1002462DC(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void **)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100288D38(v7, v0 + v6, v8);
}

uint64_t sub_10028A404(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100587350);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028A468()
{
  return sub_10028A7F8((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100288368);
}

uint64_t sub_10028A480(char a1)
{
  return a1 & 1;
}

uint64_t sub_10028A48C()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  sub_10028AC0C();
  uint64_t v3 = sub_10021EBB8();
  v4(v3);

  uint64_t v5 = sub_10028AC70();

  return _swift_deallocObject(v5, v6, v7);
}

uint64_t sub_10028A524()
{
  return sub_10028A7F8((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100287B94);
}

uint64_t sub_10028A53C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10028A574()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  uint64_t v8 = sub_10021EBB8();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10028A608()
{
  return sub_10028A6CC((uint64_t (*)(uint64_t, uint64_t))sub_100286B58);
}

uint64_t sub_10028A620()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;

  uint64_t v8 = sub_10021EBB8();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10028A6B4()
{
  return sub_10028A6CC(sub_100286494);
}

uint64_t sub_10028A6CC(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10028A748()
{
  type metadata accessor for UUID();
  sub_1001F6398();
  sub_10028AC0C();
  uint64_t v2 = sub_10021EBB8();
  v3(v2);
  swift_bridgeObjectRelease();

  uint64_t v4 = sub_10028AC70();

  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_10028A7E0()
{
  return sub_10028A7F8((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100285D48);
}

uint64_t sub_10028A7F8(uint64_t (*a1)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = type metadata accessor for UUID();
  sub_1002462DC(v2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + v8);
  uint64_t v11 = *(void *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));

  return a1(v9, v1 + v7, v10, v11);
}

uint64_t sub_10028A888@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100284EC4(a1, a2);
}

uint64_t sub_10028A890(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10028A8DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10028A91C()
{
  return sub_100284BF0();
}

uint64_t sub_10028A928@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100284FA0();
  *a1 = result;
  return result;
}

uint64_t sub_10028A964()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10028A99C()
{
  sub_1002857B8(*(void *)(v0 + 16));
}

void sub_10028A9A8()
{
  sub_100285A98(*(void *)(v0 + 16));
}

void destroy for SimulatedConversationManager.SimulatedParticipant(id *a1)
{
}

uint64_t _s13callservicesd28SimulatedConversationManagerC20SimulatedParticipantVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for SimulatedConversationManager.SimulatedParticipant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for SimulatedConversationManager.SimulatedParticipant(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SimulatedConversationManager.SimulatedParticipant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimulatedConversationManager.SimulatedParticipant(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 18))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimulatedConversationManager.SimulatedParticipant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimulatedConversationManager.SimulatedParticipant()
{
  return &type metadata for SimulatedConversationManager.SimulatedParticipant;
}

uint64_t sub_10028ABA4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10028ABB4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for UUID();
}

uint64_t sub_10028ABE0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchQoS();
}

void sub_10028AC0C()
{
  uint64_t v2 = *(void **)(v0 + 16);
}

uint64_t sub_10028AC3C()
{
  return 0;
}

uint64_t sub_10028AC70()
{
  return v0;
}

id sub_10028AC80(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

id sub_10028AC98()
{
  return sub_1001B1C90();
}

uint64_t sub_10028ACBC()
{
  return v0 - 136;
}

uint64_t *sub_10028ACC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_1001F081C(&qword_100585A40);
    if (sub_1001F758C((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v9 = (void *)a2[1];
      *a1 = *a2;
      a1[1] = (uint64_t)v9;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      a1[3] = a2[3];
      uint64_t v10 = type metadata accessor for SoundDescriptor();
      uint64_t v11 = *(int *)(v10 + 32);
      id v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UUID();
      id v15 = v9;
      if (sub_1001F758C((uint64_t)v13, 1, v14))
      {
        uint64_t v16 = sub_1001F081C((uint64_t *)&unk_100585580);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        sub_1001F0530((uint64_t)v12, 0, 1, v14);
      }
      *((unsigned char *)a1 + *(int *)(v10 + 36)) = *((unsigned char *)a2 + *(int *)(v10 + 36));
      sub_1001F0530((uint64_t)a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_10028AE7C(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100585A40);
  uint64_t result = sub_1001F758C(a1, 2, v2);
  if (!result)
  {

    uint64_t v4 = a1 + *(int *)(type metadata accessor for SoundDescriptor() + 32);
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t result = sub_1001F758C(v4, 1, v5);
    if (!result)
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      return v6(v4, v5);
    }
  }
  return result;
}

void *sub_10028AF3C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100585A40);
  if (sub_1001F758C((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
    a1[3] = a2[3];
    uint64_t v8 = type metadata accessor for SoundDescriptor();
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    id v13 = v7;
    if (sub_1001F758C((uint64_t)v11, 1, v12))
    {
      uint64_t v14 = sub_1001F081C((uint64_t *)&unk_100585580);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_1001F0530((uint64_t)v10, 0, 1, v12);
    }
    *((unsigned char *)a1 + *(int *)(v8 + 36)) = *((unsigned char *)a2 + *(int *)(v8 + 36));
    sub_1001F0530((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

uint64_t sub_10028B0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100585A40);
  int v7 = sub_1001F758C(a1, 2, v6);
  int v8 = sub_1001F758C(a2, 2, v6);
  if (!v7)
  {
    if (v8)
    {
      sub_10028B3C4(a1);
      goto LABEL_7;
    }
    *(void *)a1 = *(void *)a2;
    id v17 = *(void **)(a2 + 8);
    uint64_t v18 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v17;
    id v19 = v17;

    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v20 = type metadata accessor for SoundDescriptor();
    uint64_t v21 = *(int *)(v20 + 32);
    uint64_t v22 = (void *)(a1 + v21);
    id v23 = (const void *)(a2 + v21);
    uint64_t v24 = type metadata accessor for UUID();
    int v25 = sub_1001F758C((uint64_t)v22, 1, v24);
    int v26 = sub_1001F758C((uint64_t)v23, 1, v24);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        sub_1001F0530((uint64_t)v22, 0, 1, v24);
LABEL_16:
        *(unsigned char *)(a1 + *(int *)(v20 + 36)) = *(unsigned char *)(a2 + *(int *)(v20 + 36));
        return a1;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(v24 - 8);
      if (!v26)
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 24))(v22, v23, v24);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
    }
    uint64_t v28 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_16;
  }
  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v9 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = type metadata accessor for SoundDescriptor();
  uint64_t v11 = *(int *)(v10 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  id v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID();
  id v15 = v9;
  if (sub_1001F758C((uint64_t)v13, 1, v14))
  {
    uint64_t v16 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    sub_1001F0530((uint64_t)v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + *(int *)(v10 + 36)) = *(unsigned char *)(a2 + *(int *)(v10 + 36));
  sub_1001F0530(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_10028B3C4(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100585A40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10028B424(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100585A40);
  if (sub_1001F758C((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
    a1[3] = a2[3];
    uint64_t v8 = type metadata accessor for SoundDescriptor();
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    if (sub_1001F758C((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_1001F081C((uint64_t *)&unk_100585580);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      sub_1001F0530((uint64_t)v10, 0, 1, v12);
    }
    *((unsigned char *)a1 + *(int *)(v8 + 36)) = *((unsigned char *)a2 + *(int *)(v8 + 36));
    sub_1001F0530((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

uint64_t sub_10028B598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100585A40);
  int v7 = sub_1001F758C(a1, 2, v6);
  int v8 = sub_1001F758C(a2, 2, v6);
  if (!v7)
  {
    if (v8)
    {
      sub_10028B3C4(a1);
      goto LABEL_7;
    }
    uint64_t v16 = *(void *)(a2 + 8);
    id v17 = *(void **)(a1 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v16;

    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v18 = type metadata accessor for SoundDescriptor();
    uint64_t v19 = *(int *)(v18 + 32);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for UUID();
    int v23 = sub_1001F758C((uint64_t)v20, 1, v22);
    int v24 = sub_1001F758C((uint64_t)v21, 1, v22);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
        sub_1001F0530((uint64_t)v20, 0, 1, v22);
LABEL_16:
        *(unsigned char *)(a1 + *(int *)(v18 + 36)) = *(unsigned char *)(a2 + *(int *)(v18 + 36));
        return a1;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(v22 - 8);
      if (!v24)
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 40))(v20, v21, v22);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v25 + 8))(v20, v22);
    }
    uint64_t v26 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_16;
  }
  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = type metadata accessor for SoundDescriptor();
  uint64_t v11 = *(int *)(v10 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID();
  if (sub_1001F758C((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    sub_1001F0530((uint64_t)v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + *(int *)(v10 + 36)) = *(unsigned char *)(a2 + *(int *)(v10 + 36));
  sub_1001F0530(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_10028B890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028B8A4);
}

uint64_t sub_10028B8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100585A40);
  unsigned int v5 = sub_1001F758C(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_10028B8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028B904);
}

uint64_t sub_10028B904(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1001F081C(&qword_100585A40);

  return sub_1001F0530(a1, v5, a3, v6);
}

uint64_t sub_10028B968(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100585A40);

  return sub_1001F758C(a1, 2, v2);
}

uint64_t sub_10028B9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100585A40);

  return sub_1001F0530(a1, a2, 2, v4);
}

uint64_t type metadata accessor for SoundDescriptorAction()
{
  uint64_t result = qword_100587470;
  if (!qword_100587470) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028BA48()
{
  uint64_t result = type metadata accessor for SoundDescriptor();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_10028BAC4()
{
  unint64_t result = qword_100587480;
  if (!qword_100587480)
  {
    type metadata accessor for SoundDescriptorAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587480);
  }
  return result;
}

BOOL sub_10028BB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  sub_10028C208(a2, (uint64_t)&v16 - v8);
  uint64_t v10 = sub_1001F081C(&qword_100585A40);
  int v11 = sub_1001F758C((uint64_t)v9, 2, v10);
  if (v11)
  {
    if (v11 == 1) {
      unint64_t v12 = 1;
    }
    else {
      unint64_t v12 = 2;
    }
  }
  else
  {
    sub_10028C26C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v12 = 3;
  }
  sub_10028C208(a1, (uint64_t)v7);
  unsigned int v13 = sub_1001F758C((uint64_t)v7, 2, v10);
  if (v13)
  {
    unint64_t v14 = v13;
    if (v13 != 1) {
      unint64_t v14 = 2;
    }
  }
  else
  {
    sub_10028C26C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v14 = 3;
  }
  return v12 >= v14;
}

BOOL sub_10028BC68(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a5 != a2 || a4 >= a1;
  return a5 >= a2 && v6;
}

BOOL sub_10028BC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  sub_10028C208(a1, (uint64_t)&v16 - v8);
  uint64_t v10 = sub_1001F081C(&qword_100585A40);
  int v11 = sub_1001F758C((uint64_t)v9, 2, v10);
  if (v11)
  {
    if (v11 == 1) {
      unint64_t v12 = 1;
    }
    else {
      unint64_t v12 = 2;
    }
  }
  else
  {
    sub_10028C26C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v12 = 3;
  }
  sub_10028C208(a2, (uint64_t)v7);
  unsigned int v13 = sub_1001F758C((uint64_t)v7, 2, v10);
  if (v13)
  {
    unint64_t v14 = v13;
    if (v13 != 1) {
      unint64_t v14 = 2;
    }
  }
  else
  {
    sub_10028C26C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v14 = 3;
  }
  return v12 >= v14;
}

BOOL sub_10028BDD4(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a2 != a5 || a1 >= a4;
  return a2 >= a5 && v6;
}

BOOL sub_10028BDEC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  uint64_t v5 = sub_100202384(v4);
  __chkstk_darwin(v5);
  sub_100210660();
  uint64_t v7 = __chkstk_darwin(v6);
  sub_10028C340(v7, v8, v9, v10, v11, v12, v13, v14, v22);
  sub_1001F081C(&qword_100585A40);
  if (sub_10028C380(v2))
  {
    sub_10028C330();
    if (v17) {
      unint64_t v18 = v15;
    }
    else {
      unint64_t v18 = v16;
    }
  }
  else
  {
    sub_10028C26C(v2, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v18 = 3;
  }
  sub_10028C208(a1, v1);
  if (sub_10028C380(v1))
  {
    sub_10028C330();
    if (!v17) {
      unint64_t v19 = v20;
    }
  }
  else
  {
    sub_10028C26C(v1, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v19 = 3;
  }
  return v18 < v19;
}

uint64_t sub_10028BEF4(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a5 == a2 && a4 < a1;
  return a5 < a2 || v6;
}

uint64_t sub_10028BF10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SoundDescriptor();
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_100210660();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = sub_1001F081C(qword_100587488);
  uint64_t v11 = sub_100202384(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10028C208(a1, (uint64_t)v14);
  sub_10028C208(a2, v15);
  uint64_t v16 = sub_1001F081C(&qword_100585A40);
  int v17 = sub_1001F758C(v15, 2, v16);
  if (!v17)
  {
    if (!sub_10028C364())
    {
      sub_10028C2CC((uint64_t)v14, (uint64_t)v9);
      sub_10028C2CC(v15, v2);
      char v18 = sub_1002E9700((uint64_t)v9, v2);
      sub_10028C26C(v2, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
      sub_10028C26C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
      return v18 & 1;
    }
    sub_10028C26C(v15, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    if (sub_10028C364() != 1) {
      goto LABEL_9;
    }
  }
  else if (sub_10028C364() != 2)
  {
LABEL_9:
    sub_10028C26C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SoundDescriptorAction);
    char v18 = 0;
    return v18 & 1;
  }
  char v18 = 1;
  return v18 & 1;
}

BOOL sub_10028C0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SoundDescriptorAction();
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_100210660();
  uint64_t v8 = __chkstk_darwin(v7);
  sub_10028C340(v8, v9, v10, v11, v12, v13, v14, v15, v23);
  sub_1001F081C(&qword_100585A40);
  if (sub_10028C380(v3))
  {
    sub_10028C330();
    if (v18) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = v17;
    }
  }
  else
  {
    sub_10028C26C(v3, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v19 = 3;
  }
  sub_10028C208(a2, v2);
  if (sub_10028C380(v2))
  {
    sub_10028C330();
    if (!v18) {
      unint64_t v20 = v21;
    }
  }
  else
  {
    sub_10028C26C(v2, (uint64_t (*)(void))type metadata accessor for SoundDescriptor);
    unint64_t v20 = 3;
  }
  return v19 < v20;
}

uint64_t sub_10028C208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028C26C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10028C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028C340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10028C208(v10, (uint64_t)&a9 - v9);
}

uint64_t sub_10028C364()
{
  return sub_1001F758C(v0, 2, v1);
}

uint64_t sub_10028C380(uint64_t a1)
{
  return sub_1001F758C(a1, 2, v1);
}

id sub_10028C398()
{
  id result = sub_100008DCC();
  qword_100594A20 = (uint64_t)result;
  return result;
}

uint64_t sub_10028C3C0()
{
  return swift_initClassMetadata2();
}

void *sub_10028C460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a1;
  v5[5] = a3;
  v5[6] = a1;
  v5[7] = a4;
  v5[8] = a1;
  v5[9] = a5;
  v5[10] = a1;
  swift_retain_n();
  return v5;
}

uint64_t sub_10028C494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100294CA4(a1 + 16, (uint64_t)v4, (uint64_t *)&unk_10058A140);
  sub_100294AB8((uint64_t)v4);
  return sub_100294CA4((uint64_t)v4, a2, (uint64_t *)&unk_10058A140);
}

uint64_t sub_10028C500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100294CA4(a1 + 64, (uint64_t)v4, (uint64_t *)&unk_10058A140);
  sub_100294AB8((uint64_t)v4);
  return sub_100294CA4((uint64_t)v4, a2, (uint64_t *)&unk_10058A140);
}

uint64_t sub_10028C56C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_100206F20(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v9 = v2;
        type metadata accessor for AnyAudioInterruptionProvider();
        swift_allocObject();
        uint64_t v8 = swift_retain();
        sub_10028C460(v8, (uint64_t)sub_1002945DC, (uint64_t)sub_1002945E0, (uint64_t)sub_1002945E4, (uint64_t)sub_1002945E8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        --v2;
        if (v9 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10028C778(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  sub_100295C3C(v1, (uint64_t)&v7, (uint64_t *)&unk_100584CA0);
  uint64_t v4 = v8;
  if (!v8) {
    return v4 == 0;
  }
  sub_1001F75B4(&v7, v6);
  a1(&v9, v6);
  uint64_t result = sub_1002018DC((uint64_t)v6);
  if (!v2) {
    return v4 == 0;
  }
  return result;
}

void sub_10028C814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100587568);
    sub_100294E20((uint64_t)&unk_100587570);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v21;
    uint64_t v20 = v22;
    uint64_t v3 = v23;
    int64_t v4 = v24;
    unint64_t v5 = v25;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v20 + 8 * v14);
    int64_t v12 = v4 + 1;
    if (!v15)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v12);
      if (!v15)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v12);
        if (!v15)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v12);
          if (!v15)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              goto LABEL_37;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v12);
            if (!v15)
            {
              int64_t v16 = v4 + 6;
              while (v16 < v9)
              {
                unint64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  int64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_37:
              sub_100206FA0();
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_37;
    }
    while (1)
    {
      id v17 = [v13 clientAudioSessionID];
      if (v17)
      {
        char v18 = v17;
        if ([v13 state] == (id)1) {
          [*(id *)(a2 + 24) triggerEndInterruptionForAudioSessionID:v18];
        }
      }
      else
      {
        char v18 = v13;
      }

      int64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1001F6204(0, &qword_100587568);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v26;
        swift_unknownObjectRelease();
        int64_t v12 = v4;
        uint64_t v10 = v5;
        if (v26) {
          continue;
        }
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

uint64_t sub_10028CB34(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = *(void **)&v3[OBJC_IVAR____TtC13callservicesd28SiriCallAnnouncementProvider_queue];
  uint64_t v14 = swift_allocObject();
  long long v15 = a1[1];
  *(_OWORD *)(v14 + 24) = *a1;
  *(void *)(v14 + 16) = v3;
  *(_OWORD *)(v14 + 40) = v15;
  *(_OWORD *)(v14 + 50) = *(_OWORD *)((char *)a1 + 26);
  *(void *)(v14 + 72) = a2;
  *(void *)(v14 + 80) = a3;
  aBlock[4] = sub_1002950BC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_100510908;
  int64_t v16 = _Block_copy(aBlock);
  id v17 = v13;
  char v18 = v3;
  sub_1002950CC((uint64_t)a1);
  sub_1002084D8(a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100295BAC((uint64_t)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_100295BF0((uint64_t)&qword_100585000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v21);
  return swift_release();
}

void sub_10028CE28(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v62 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v61 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v15 = (uint64_t *)((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for DispatchTime();
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC13callservicesd28SiriCallAnnouncementProvider_isAvailable) == 1)
  {
    uint64_t v23 = a1;
    uint64_t v24 = v13;
    unint64_t v25 = v62;
    uint64_t v52 = (char *)&v51 - v21;
    uint64_t v53 = v22;
    uint64_t v57 = v8;
    uint64_t v58 = v20;
    uint64_t v54 = v11;
    uint64_t v55 = v9;
    id v56 = v7;
    uint64_t v26 = v23;
    char v27 = sub_10028D4A8();
    id v63 = sub_100008DCC();
    if ((v27 & 1) == 0)
    {
      sub_1001F081C(&qword_100584B20);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_10048F550;
      long long v30 = v25[1];
      long long aBlock = *v25;
      *(_OWORD *)uint64_t v66 = v30;
      *(_OWORD *)&v66[10] = *(long long *)((char *)v25 + 26);
      sub_1002950CC((uint64_t)v25);
      uint64_t v31 = String.init<A>(reflecting:)();
      uint64_t v51 = v5;
      uint64_t v32 = v31;
      uint64_t v34 = v33;
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = sub_1001F3B08();
      *(void *)(v29 + 32) = v32;
      *(void *)(v29 + 40) = v34;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      sub_10034A160();
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      static DispatchTime.now()();
      uint64_t ObjectType = swift_getObjectType();
      *long long v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(ObjectType, v38);
      uint64_t v40 = v12;
      (*(void (**)(void *, void, uint64_t))(v24 + 104))(v15, enum case for DispatchTimeInterval.milliseconds(_:), v12);
      uint64_t v41 = v52;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v15, v40);
      id v63 = *(id *)(v53 + 8);
      ((void (*)(char *, uint64_t))v63)(v19, v58);
      uint64_t v42 = *(void **)(v26 + OBJC_IVAR____TtC13callservicesd28SiriCallAnnouncementProvider_queue);
      id v43 = (void *)swift_allocObject();
      id v43[2] = v36;
      void v43[3] = v38;
      uint64_t v45 = v59;
      uint64_t v44 = v60;
      v43[4] = v59;
      v43[5] = v44;
      *(void *)&v66[16] = sub_100295160;
      *(void *)&v66[24] = v43;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)uint64_t v66 = sub_1002C2C88;
      *(void *)&v66[8] = &unk_100510958;
      uint64_t v46 = _Block_copy(&aBlock);
      id v47 = v42;
      swift_unknownObjectRetain();
      sub_1002084D8(v45);
      uint64_t v48 = v54;
      static DispatchQoS.unspecified.getter();
      uint64_t v64 = _swiftEmptyArrayStorage;
      sub_100295BAC((uint64_t)&qword_100584FF0);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_100295BF0((uint64_t)&qword_100585000);
      uint64_t v49 = v56;
      uint64_t v50 = v51;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v46);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v50);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v57);
      ((void (*)(char *, uint64_t))v63)(v41, v58);
      swift_release();
      return;
    }
    static os_log_type_t.default.getter();
  }
  else
  {
    id v63 = sub_100008DCC();
    static os_log_type_t.default.getter();
  }
  os_log(_:dso:log:type:_:)();
  id v28 = v63;
}

uint64_t sub_10028D4A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd28SiriCallAnnouncementProvider_queue);
  *int64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5) {
    return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd28SiriCallAnnouncementProvider_activeDescriptor + 8) != 0;
  }
  __break(1u);
  return result;
}

double sub_10028D5D8()
{
  return 3.0;
}

uint64_t sub_10028D5E0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_100295BAC((uint64_t)&qword_100583B00);
  sub_1001F081C(&qword_100585100);
  sub_100295BF0((uint64_t)&qword_100583B10);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_10028D828(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10)
{
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 104) = &_swiftEmptySetSingleton;
  *(void *)(v10 + 112) = sub_10028D5D8;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(void *)(v10 + 184) = 0;
  *(void *)(v10 + 16) = a10;
  *(void *)(v10 + 24) = a1;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a3;
  *(void *)(v10 + 48) = a4;
  *(void *)(v10 + 56) = a5;
  *(void *)(v10 + 64) = a6;
  *(void *)(v10 + 72) = a7;
  *(void *)(v10 + 80) = a8;
  *(void *)(v10 + 88) = a9;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  long long v15 = (uint64_t (**)(uint64_t, uint64_t, int))(a1
                                                       + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  uint64_t v27 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  *long long v15 = sub_1002943E8;
  v15[1] = (uint64_t (*)(uint64_t, uint64_t, int))v14;
  id v32 = a10;
  swift_retain();
  swift_retain();
  id v31 = a3;
  swift_retain();
  swift_retain();
  id v30 = a6;
  id v29 = a7;
  swift_retain();
  id v16 = a9;
  sub_100208490(v27);
  uint64_t v17 = self;
  id v18 = [v17 mainQueue];
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v37 = sub_1002943F0;
  uint64_t v38 = v19;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10028E9A0;
  uint64_t ObjectType = &unk_100510728;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v21 = (void **)[v16 addObserverForName:AVAudioSessionMediaServicesWereResetNotification object:0 queue:v18 usingBlock:v20];
  _Block_release(v20);

  uint64_t ObjectType = (void *)swift_getObjectType();
  long long aBlock = v21;
  swift_beginAccess();
  sub_100294420((uint64_t)&aBlock, v10 + 128);
  swift_endAccess();
  id v22 = [v17 mainQueue];
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v37 = sub_100294488;
  uint64_t v38 = v23;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10028E9A0;
  uint64_t ObjectType = &unk_100510750;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_release();
  unint64_t v25 = (void **)[v16 addObserverForName:AVAudioSessionInterruptionNotification object:0 queue:v22 usingBlock:v24];
  _Block_release(v24);

  uint64_t ObjectType = (void *)swift_getObjectType();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  long long aBlock = v25;
  swift_release();
  swift_beginAccess();
  sub_100294420((uint64_t)&aBlock, v10 + 160);
  swift_endAccess();
  return v10;
}

uint64_t sub_10028DC64(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v25 = a1;
  uint64_t v5 = sub_1001F081C(&qword_100584C80);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v26 + 64);
  uint64_t v7 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  id v12 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v23 = a2;
    long long v15 = *(void **)(result + 16);
    sub_1001F081C(&qword_100587550);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_10048F550;
    int v24 = a3;
    id v17 = v15;
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    aBlock[0] = v16;
    sub_100295BAC((uint64_t)&qword_100584FF0);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_100295BF0((uint64_t)&qword_100585000);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_100295C3C(v25, (uint64_t)v10, &qword_100584C80);
    sub_100295C3C(v23, (uint64_t)v8, &qword_100584C80);
    uint64_t v18 = *(unsigned __int8 *)(v26 + 80);
    uint64_t v19 = (v18 + 24) & ~v18;
    uint64_t v20 = (v6 + v18 + v19) & ~v18;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    sub_100294CA4((uint64_t)v10, v21 + v19, &qword_100584C80);
    sub_100294CA4((uint64_t)v8, v21 + v20, &qword_100584C80);
    *(unsigned char *)(v21 + v20 + v6) = v24 & 1;
    aBlock[4] = sub_100294A18;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_100510818;
    _Block_copy(aBlock);
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    swift_retain();
    DispatchWorkItem.init(flags:block:)();
    swift_release();
    OS_dispatch_queue.async(execute:)();
    swift_release();

    return swift_release();
  }
  return result;
}

uint64_t sub_10028E054(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v66 = a3;
  uint64_t v7 = sub_1001F081C(&qword_100584C80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for AudioDescriptor();
  __chkstk_darwin(v67);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v15 = (uint64_t *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v4 + 16);
  *long long v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) == 0) {
    __break(1u);
  }
  id v19 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1004904F0;
  uint64_t v65 = a1;
  uint64_t v21 = sub_1001FCFA8(a1);
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v24 = sub_1001F3B08();
  *(void *)(v20 + 64) = v24;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  uint64_t v25 = sub_1001FCFA8(a2);
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v24;
  *(void *)(v20 + 72) = v25;
  *(void *)(v20 + 80) = v26;
  LOBYTE(v23) = v66;
  char v68 = v66 & 1;
  uint64_t v27 = String.init<A>(reflecting:)();
  *(void *)(v20 + 136) = &type metadata for String;
  *(void *)(v20 + 144) = v24;
  *(void *)(v20 + 112) = v27;
  *(void *)(v20 + 120) = v28;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  char v29 = v23;
  if (*(void *)(v4 + 96))
  {
    swift_retain();
    id v30 = sub_1001B1BF8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    *(void *)(v4 + 96) = 0;
    swift_release();
  }
  sub_100295C3C(a2, (uint64_t)v9, &qword_100584C80);
  if (sub_1001F758C((uint64_t)v9, 1, v67) == 1)
  {
    sub_100295960((uint64_t)v9, &qword_100584C80);
    id v31 = sub_1001B1BF8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return sub_10029067C();
  }
  else
  {
    sub_1002959BC();
    sub_1001F081C(&qword_100587558);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10048FF70;
    *(void *)(inited + 32) = sub_10028F140((uint64_t)v11);
    *(void *)(inited + 40) = v34;
    *(unsigned char *)(inited + 48) = v35;
    *(void *)(inited + 56) = sub_10028F444((uint64_t)v11);
    *(void *)(inited + 64) = v36;
    *(unsigned char *)(inited + 72) = v37;
    *(void *)(inited + 80) = sub_10028F804((uint64_t)v11);
    *(void *)(inited + 88) = v38;
    *(unsigned char *)(inited + 96) = v39;
    *(void *)(inited + 104) = sub_10028F984((uint64_t)v11);
    *(void *)(inited + 112) = v40;
    *(unsigned char *)(inited + 120) = v41;
    *(void *)(inited + 128) = sub_10028FB4C((uint64_t)v11);
    *(void *)(inited + 136) = v42;
    *(unsigned char *)(inited + 144) = v43;
    uint64_t v44 = sub_10028FCB4((uint64_t)v11);
    uint64_t v46 = v45;
    char v48 = v47;
    sub_1003A4C24();
    uint64_t v50 = v49;
    *(void *)(v49 + 16) = 6;
    *(void *)(v49 + 152) = v44;
    *(void *)(v49 + 160) = v46;
    *(unsigned char *)(v49 + 168) = v48;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != 144; i += 24)
    {
      uint64_t v52 = v50 + i;
      int v53 = *(unsigned __int8 *)(v50 + i + 48);
      if (v53 != 255 && (v53 & 1) != 0)
      {
        id v56 = *(void (**)(uint64_t))(v52 + 32);
        uint64_t v55 = *(void *)(v52 + 40);
        uint64_t v57 = sub_100294A90();
        v56(v57);
        sub_100294A98((uint64_t)v56, v55, v53);
      }
    }
    swift_bridgeObjectRelease();
    sub_10028FEAC(v11, v65, v29 & 1);
    for (uint64_t j = 0; j != 144; j += 24)
    {
      uint64_t v59 = v50 + j;
      unsigned __int8 v60 = *(unsigned char *)(v50 + j + 48);
      if ((v60 & 1) == 0)
      {
        uint64_t v62 = *(void (**)(uint64_t))(v59 + 32);
        uint64_t v61 = *(void *)(v59 + 40);
        uint64_t v63 = sub_100294A90();
        v62(v63);
        sub_100294A98((uint64_t)v62, v61, v60);
      }
    }
    swift_bridgeObjectRelease();
    return sub_100294B30((uint64_t)v11, (void (*)(void))type metadata accessor for AudioDescriptor);
  }
}

uint64_t sub_10028E5DC(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Notification();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10048F550;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
  uint64_t v14 = String.init<A>(reflecting:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_1001F3B08();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  aBlock[4] = sub_1002945C0;
  uint64_t v24 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_1005107C8;
  id v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100295BAC((uint64_t)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_100295BF0((uint64_t)&qword_100585000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  return swift_release();
}

uint64_t sub_10028E9A0()
{
  sub_100295F44();
  uint64_t v1 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *))(v0 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v1);
}

uint64_t sub_10028EA64(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10028EAD8(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v26 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  id v8 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10048F550;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  uint64_t v11 = String.init<A>(reflecting:)();
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1001F3B08();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v14 = v24;
  v10((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v5);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v16 + ((v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v14;
  aBlock[4] = sub_100294558;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_1005107A0;
  id v17 = _Block_copy(aBlock);
  swift_retain();
  char v18 = v25;
  static DispatchQoS.unspecified.getter();
  id v31 = _swiftEmptyArrayStorage;
  sub_100295BAC((uint64_t)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_100295BF0((uint64_t)&qword_100585000);
  uint64_t v20 = v26;
  uint64_t v19 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return swift_release();
}

uint64_t sub_10028EF18()
{
  swift_beginAccess();
  sub_100295C3C(v0 + 128, (uint64_t)v2, (uint64_t *)&unk_100584CA0);
  sub_10028C778((void (*)(uint64_t *__return_ptr, _OWORD *))sub_100295C90);
  sub_100295960((uint64_t)v2, (uint64_t *)&unk_100584CA0);
  swift_beginAccess();
  sub_100295C3C(v0 + 160, (uint64_t)v2, (uint64_t *)&unk_100584CA0);
  sub_10028C778((void (*)(uint64_t *__return_ptr, _OWORD *))sub_100295C90);
  sub_100295960((uint64_t)v2, (uint64_t *)&unk_100584CA0);

  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100295960(v0 + 128, (uint64_t *)&unk_100584CA0);
  sub_100295960(v0 + 160, (uint64_t *)&unk_100584CA0);
  return v0;
}

uint64_t sub_10028F090(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 88);
  sub_100204074(a1, a1[3]);
  [v2 removeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];
  return swift_unknownObjectRelease();
}

uint64_t sub_10028F0F4()
{
  sub_10028EF18();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioController()
{
  return swift_getGenericMetadata();
}

uint64_t (*sub_10028F140(uint64_t a1))()
{
  uint64_t v17 = a1;
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_10058A130);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RingtoneDescriptor();
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v1 + 16);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t v14 = type metadata accessor for AudioDescriptor();
    sub_100295C3C(v17 + *(int *)(v14 + 28), (uint64_t)v4, (uint64_t *)&unk_10058A130);
    if (sub_1001F758C((uint64_t)v4, 1, v5) == 1)
    {
      sub_100295960((uint64_t)v4, (uint64_t *)&unk_10058A130);
      swift_retain();
      return sub_1002959B8;
    }
    else
    {
      sub_1002959BC();
      sub_1002959BC();
      *(void *)(swift_allocObject() + 16) = v1;
      sub_1002959BC();
      swift_retain();
      return sub_100295B00;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*sub_10028F444(uint64_t a1))()
{
  uint64_t v22 = a1;
  uint64_t v2 = type metadata accessor for AudioDescriptor();
  uint64_t v19 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v19 + 64);
  __chkstk_darwin(v2);
  uint64_t v20 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SoundDescriptor();
  v18[1] = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for SoundDescriptorAction();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = v1;
  id v12 = *(void **)(v1 + 16);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    sub_1002952C0();
    uint64_t v15 = sub_1001F081C(&qword_100585A40);
    int v16 = sub_1001F758C((uint64_t)v7, 2, v15);
    if (v16)
    {
      if (v16 == 1) {
        return 0;
      }
      swift_retain();
      return sub_1002952BC;
    }
    else
    {
      sub_1002959BC();
      sub_1002952C0();
      *(void *)(swift_allocObject() + 16) = v21;
      sub_1002959BC();
      sub_1002959BC();
      swift_retain();
      return sub_1002955EC;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*sub_10028F804(uint64_t a1))()
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AudioDescriptor() + 36)))
    {
      uint64_t v10 = *(void **)(v1 + 64);
      *(void *)(swift_allocObject() + 16) = v10;
      id v11 = v10;
      return sub_100295208;
    }
    else
    {
      swift_retain();
      return sub_10029522C;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*sub_10028F984(uint64_t a1))()
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void (*)())(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AudioDescriptor() + 40));
    uint64_t v11 = *v10;
    if (*v10 == 3)
    {
      id v12 = *(void **)(v1 + 72);
      *(void *)(swift_allocObject() + 16) = v12;
      id v13 = v12;
      return sub_100295178;
    }
    else
    {
      unsigned __int16 v15 = *((_WORD *)v10 + 4);
      *((void *)&v16 + 1) = v15;
      *(void *)&long long v16 = *v10;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v1;
      *(unsigned char *)(v17 + 24) = v11;
      *(_DWORD *)(v17 + 28) = DWORD1(v16);
      *(unsigned char *)(v17 + 32) = (unint64_t)(v16 >> 32) >> 32;
      *(unsigned char *)(v17 + 33) = HIBYTE(v15) & 1;
      swift_retain();
      return sub_1002951D4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*sub_10028FB4C(uint64_t a1))()
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AudioDescriptor() + 44)))
    {
      swift_retain();
      return sub_10029516C;
    }
    else
    {
      swift_retain();
      return sub_100295170;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10028FCB4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = a1 + *(int *)(type metadata accessor for AudioDescriptor() + 24);
    uint64_t v12 = *(void *)v10;
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = *(void **)(v10 + 24);
    unsigned __int16 v15 = *(void **)(v10 + 32);
    __int16 v16 = *(_WORD *)(v10 + 40);
    if (v11)
    {
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v1;
      *(void *)(v17 + 24) = v12;
      *(void *)(v17 + 32) = v11;
      *(void *)(v17 + 40) = v13;
      *(void *)(v17 + 48) = v14;
      *(void *)(v17 + 56) = v15;
      *(unsigned char *)(v17 + 64) = v16 & 1;
      *(unsigned char *)(v17 + 65) = HIBYTE(v16) & 1;
      swift_retain();
      uint64_t v18 = sub_100295048;
    }
    else
    {
      uint64_t v19 = *(void **)(v1 + 40);
      *(void *)(swift_allocObject() + 16) = v19;
      id v20 = v19;
      uint64_t v18 = sub_100294F70;
    }
    uint64_t v21 = v18;
    sub_100294F94(v12, v11, v13, v14, v15);
    return (uint64_t)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10028FEAC(const void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v53 = a3;
  uint64_t v52 = a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DispatchWallTime();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  char v48 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v44 - v8;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1001F081C(&qword_100584C80);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1001F081C(&qword_100584C70);
  __chkstk_darwin(v13 - 8);
  unsigned __int16 v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = (void *)v4[2];
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v47 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if (v23)
  {
    uint64_t v25 = type metadata accessor for AudioDescriptor();
    uint64_t v26 = v54;
    sub_100295C3C((uint64_t)v54 + *(int *)(v25 + 20), (uint64_t)v15, &qword_100584C70);
    if (sub_1001F758C((uint64_t)v15, 1, v16) == 1)
    {
      sub_100295960((uint64_t)v15, &qword_100584C70);
      memcpy(v57, v26, 0x99uLL);
      sub_100295C3C(v52, (uint64_t)v12, &qword_100584C80);
      if (sub_1001F758C((uint64_t)v12, 1, v25) == 1)
      {
        sub_100295960((uint64_t)v12, &qword_100584C80);
        sub_10023C1C4(v58);
      }
      else
      {
        memcpy(v55, v12, 0x99uLL);
        sub_10023C3D8((uint64_t)v55);
        sub_100294B30((uint64_t)v12, (void (*)(void))type metadata accessor for AudioDescriptor);
        memcpy(v58, v55, 0x99uLL);
        ScreenSharingActivityManager.carPlayDidDisconnect()();
      }
      sub_100294CA4((uint64_t)v58, (uint64_t)v56, (uint64_t *)&unk_10058A140);
      sub_100294CA4((uint64_t)v56, (uint64_t)v58, (uint64_t *)&unk_10058A140);
      sub_100290914((uint64_t)v57);
      return sub_100294AB8((uint64_t)v56);
    }
    else
    {
      sub_1002959BC();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100370A38();
      char v28 = v27;
      swift_bridgeObjectRelease();
      if (v28)
      {
        id v29 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_10048F550;
        uint64_t v31 = UUID.uuidString.getter();
        uint64_t v33 = v32;
        *(void *)(v30 + 56) = &type metadata for String;
        *(void *)(v30 + 64) = sub_1001F3B08();
        *(void *)(v30 + 32) = v31;
        *(void *)(v30 + 40) = v33;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        sub_1003268E8(0);
      }
      else
      {
        v58[4] = sub_100294B28;
        v58[5] = v4;
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 1107296256;
        _OWORD v58[2] = sub_1002C2C88;
        v58[3] = &unk_100510840;
        _Block_copy(v58);
        v56[0] = _swiftEmptyArrayStorage;
        sub_100295BAC((uint64_t)&qword_100584FF0);
        swift_retain();
        sub_1001F081C((uint64_t *)&unk_100584B00);
        sub_100295BF0((uint64_t)&qword_100585000);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        type metadata accessor for DispatchWorkItem();
        swift_allocObject();
        uint64_t v34 = DispatchWorkItem.init(flags:block:)();
        swift_release();
        v4[12] = v34;
        swift_retain();
        swift_release();
        char v35 = (double (*)(uint64_t))v4[14];
        uint64_t v36 = swift_retain();
        double v37 = v35(v36);
        swift_release();
        id v38 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = xmmword_10048F550;
        *(void *)(v39 + 56) = &type metadata for Double;
        *(void *)(v39 + 64) = &protocol witness table for Double;
        *(double *)(v39 + 32) = v37;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        uint64_t v40 = v48;
        static DispatchWallTime.now()();
        char v41 = v49;
        + infix(_:_:)();
        uint64_t v42 = v51;
        char v43 = *(void (**)(char *, uint64_t))(v50 + 8);
        v43(v40, v51);
        OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
        swift_release();
        v43(v41, v42);
      }
      return sub_100294B30((uint64_t)v18, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10029067C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    sub_10029A8B0();
    sub_100292B40(1);
    sub_100349F10();
    sub_10037AC28();
    sub_1002EA8E4();
    sub_1003480C4();
    sub_100361C54();
    swift_beginAccess();
    *(void *)(v1 + 104) = &_swiftEmptySetSingleton;
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002907F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(a1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    *(void *)(a1 + 96) = 0;
    swift_release();
    return sub_1003268E8(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100290914(uint64_t a1)
{
  void (*v20)(void *__return_ptr, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  void (*v35)(void *__return_ptr, uint64_t);
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[20];
  void v102[20];
  unsigned char v103[160];
  unsigned char v104[72];
  uint64_t v105;
  unsigned char v106[8];
  unsigned char v107[160];
  unsigned char v108[160];
  uint64_t v109;
  void v110[20];
  void v111[20];
  void v112[20];
  id v113[20];
  void v114[20];
  unsigned char v115[160];
  void v116[20];
  void v117[20];
  void v118[20];
  void v119[20];
  unsigned char v120[160];
  unsigned char v121[160];
  unsigned char v122[160];
  unsigned char v123[160];
  unsigned char v124[160];
  unsigned char v125[8];
  unsigned char v126[16];
  unsigned char v127[16];
  void __src[20];
  uint64_t v129;
  id v130[2];
  unsigned char v131[8];
  unsigned char v132[160];
  unsigned char __dst[153];

  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v3 = v1;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v2;
  sub_100294CA4(v6, (uint64_t)v115, (uint64_t *)&unk_10058A140);
  sub_100294CA4((uint64_t)v115, (uint64_t)v132, (uint64_t *)&unk_10058A140);
  memcpy(__dst, (const void *)v8, sizeof(__dst));
  uint64_t v9 = sub_1002939FC(v8);
  if (!v9) {
    goto LABEL_79;
  }
  uint64_t v10 = (uint64_t)v9;
  sub_100294CA4(v7, (uint64_t)v124, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v124) == 1)
  {
    memcpy(__src, __dst, 0x99uLL);
    ScreenSharingActivityManager.carPlayDidDisconnect()();
    sub_100294CA4((uint64_t)__src, (uint64_t)v108, (uint64_t *)&unk_10058A140);
    sub_100294CA4((uint64_t)v132, (uint64_t)&v109, (uint64_t *)&unk_10058A140);
    sub_10023C3D8(v8);
    sub_100294B8C((uint64_t)v108);
    goto LABEL_6;
  }
  sub_100294CA4((uint64_t)v132, (uint64_t)__src, (uint64_t *)&unk_10058A140);
  memcpy(v108, __src, 0x99uLL);
  sub_10023C3D8(v8);
  sub_100294AB8(v7);
  char v11 = sub_10034AFC8(v8, (uint64_t)v108);
  sub_100294AB8(v7);
  sub_100294E6C(v8);
  if ((v11 & 1) != 0 && (v5 & 1) == 0)
  {
    swift_release();
LABEL_79:
    id v72 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    id v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_10048F550;
    memcpy(__src, (const void *)v8, 0x99uLL);
    sub_10023C3D8(v8);
    id v74 = String.init<A>(reflecting:)();
    uint64_t v76 = v75;
    *(void *)(v73 + 56) = &type metadata for String;
    *(void *)(v73 + 64) = sub_1001F3B08();
    *(void *)(v73 + 32) = v74;
    *(void *)(v73 + 40) = v76;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return swift_bridgeObjectRelease();
  }
LABEL_6:
  char v98 = v10;
  if (*(unsigned char *)(v8 + 144))
  {
    id v12 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10048F550;
    uint64_t v14 = *(void *)(v8 + 136);
    if (v14)
    {
      __src[0] = *(void *)(v8 + 128);
      __src[1] = v14;
      swift_bridgeObjectRetain();
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_1001F3B08();
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    if (v14) {
      NSString v18 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v18 = 0;
    }
    uint64_t v10 = v98;
    [self setCurrentAttributionKey:0 andApp:v18];
  }
  sub_100294CA4(v7, (uint64_t)v122, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v122) == 1
    || (memcpy(v123, v122, 0x99uLL),
        sub_100294CA4((uint64_t)v132, (uint64_t)__src, (uint64_t *)&unk_10058A140),
        sub_10023C3D8((uint64_t)__src),
        uint64_t v19 = sub_1002939FC((uint64_t)v123),
        sub_100294AB8(v7),
        !v19))
  {
    sub_10023C1C4(__src);
    sub_100294CA4((uint64_t)__src, (uint64_t)v107, (uint64_t *)&unk_10058A140);
    uint64_t v93 = 0;
  }
  else
  {
    uint64_t v20 = (void (*)(void *__return_ptr, uint64_t))v19[9];
    uint64_t v21 = swift_retain();
    v20(v110, v21);
    sub_100294CA4((uint64_t)v110, (uint64_t)v121, (uint64_t *)&unk_10058A140);
    uint64_t v93 = (uint64_t)v19;
    swift_release();
    sub_100294CA4((uint64_t)v121, (uint64_t)v107, (uint64_t *)&unk_10058A140);
  }
  sub_100294CA4((uint64_t)v107, (uint64_t)__src, (uint64_t *)&unk_10058A140);
  (*(void (**)(uint64_t))(v10 + 24))(v8);
  sub_100294CA4((uint64_t)v107, (uint64_t)v106, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v106) != 1)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
    if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
    {
      char v28 = swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v28 = swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_33;
      }
    }
    (*(void (**)(void *__return_ptr, uint64_t))(v10 + 72))(v111, v28);
    sub_100294CA4((uint64_t)v111, (uint64_t)v120, (uint64_t *)&unk_10058A140);
    if (sub_10024DF14((uint64_t)v120) != 1)
    {
      memcpy(v121, v120, 0x99uLL);
      sub_100294DC4((uint64_t)v121, (uint64_t)v125);
      sub_100294DC4((uint64_t)v125, (uint64_t)v131);
      if (v131[5] != 1) {
        goto LABEL_32;
      }
      if ((v121[53] & 1) == 0) {
        goto LABEL_32;
      }
      id v29 = [*(id *)(v3 + 32) conversationManager];
      uint64_t v30 = [v29 activeConversations];

      sub_1001F6204(0, &qword_100585860);
      sub_100294E20((uint64_t)&qword_100585868);
      uint64_t v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = (void *)sub_100246C0C(v31);
      swift_bridgeObjectRelease();
      if (v32)
      {
        if ([v32 state] == (id)3)
        {
          uint64_t v33 = [v32 activitySessions];
          sub_1001F6204(0, &qword_100587568);
          sub_100294E20((uint64_t)&unk_100587570);
          uint64_t v10 = v98;
          uint64_t v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          swift_retain();
          sub_10028C814(v34, v3);

          sub_100294AB8((uint64_t)v111);
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_100294AB8((uint64_t)v111);
        }
      }
      else
      {
LABEL_32:
        sub_100294AB8((uint64_t)v111);
      }
    }
  }
LABEL_33:
  char v35 = *(void (**)(void *__return_ptr, uint64_t))(v10 + 72);
  uint64_t v36 = swift_retain();
  v35(v112, v36);
  swift_retain();
  double v37 = sub_100293B38((uint64_t)__src, v93, (uint64_t)v112, v10);
  swift_release();
  sub_100294AB8((uint64_t)v112);
  id v38 = swift_release();
  if (*(unsigned char *)(v8 + 49) != 1)
  {
    if ((v37 & 1) != 0
      && ((*(void (**)(void *__return_ptr, uint64_t))(v10 + 72))(v117, v38),
          sub_100294CA4((uint64_t)v117, (uint64_t)v118, (uint64_t *)&unk_10058A140),
          sub_10024DF14((uint64_t)v118) != 1)
      && (memcpy(v119, v118, 0x99uLL),
          sub_100294CA4((uint64_t)&v119[9], (uint64_t)v114, &qword_100587560),
          sub_100294CF8((uint64_t)v114),
          sub_100294AB8((uint64_t)v117),
          sub_100294CA4((uint64_t)v114, (uint64_t)v116, &qword_100587560),
          v116[0]))
    {
      char v41 = v116[1];
      uint64_t ObjectType = swift_getObjectType();
      sub_10034AD80(0, ObjectType, v41);
      sub_100294AB8((uint64_t)v107);
      sub_100294D24((uint64_t)v114);
    }
    else
    {
      sub_100294AB8((uint64_t)v107);
    }
    goto LABEL_77;
  }
  if (v37)
  {
    (*(void (**)(id *__return_ptr, uint64_t))(v10 + 72))(v113, v38);
    sub_100294CA4((uint64_t)v113, (uint64_t)v118, (uint64_t *)&unk_10058A140);
    if (sub_10024DF14((uint64_t)v118) != 1)
    {
      memcpy(v119, v118, 0x99uLL);
      sub_100294CA4((uint64_t)&v119[9], (uint64_t)v126, &qword_100587560);
      sub_100294CF8((uint64_t)v126);
      sub_100294AB8((uint64_t)v113);
      sub_100294CA4((uint64_t)v126, (uint64_t)v130, &qword_100587560);
      if (v130[0])
      {
        uint64_t v39 = v130[1];
        uint64_t v40 = swift_getObjectType();
        sub_10034AD80(1, v40, (uint64_t)v39);
        sub_100294D24((uint64_t)v126);
      }
    }
    goto LABEL_44;
  }
  sub_100294CA4(v7, (uint64_t)v119, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v119) == 1)
  {
LABEL_44:
    sub_100293D68(v10);
    goto LABEL_45;
  }
  uint64_t v77 = (void *)v119[1];
  v130[0] = (id)v119[1];
  v113[0] = *(id *)(v8 + 8);
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v80 == v81)
  {
    uint64_t v85 = v77;
    sub_10023C570(v130);
    sub_10023C570(v113);
    swift_bridgeObjectRelease_n();
    sub_100294D98(v113);
    sub_100294D98(v130);
    sub_100294D98(v130);
  }
  else
  {
    uint64_t v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v84 = v77;
    sub_10023C570(v130);
    sub_10023C570(v113);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100294D98(v113);
    sub_100294D98(v130);
    sub_100294D98(v130);
    if ((v83 & 1) == 0) {
      goto LABEL_44;
    }
  }
  sub_100294CA4((uint64_t)v132, (uint64_t)v118, (uint64_t *)&unk_10058A140);
  uint64_t v86 = *(void *)(v8 + 16);
  if (v118[2])
  {
    if (!v86) {
      goto LABEL_44;
    }
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v89 = v88;
    if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v89 == v90)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v92 & 1) == 0) {
        goto LABEL_44;
      }
    }
  }
  else if (v86)
  {
    goto LABEL_44;
  }
LABEL_45:
  swift_beginAccess();
  char v43 = *(void *)(v3 + 48);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_10048F560;
  *(void *)(v44 + 32) = *(void *)(v3 + 40);
  v117[0] = v44;
  specialized Array._endMutation()();
  uint64_t v45 = v117[0];
  v117[0] = _swiftEmptyArrayStorage;
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  id v47 = *(void *)(v43 + 16);
  if (__OFADD__(v46, v47))
  {
    __break(1u);
  }
  else
  {
    sub_10035FA60(v46 + v47);
    specialized Array._endMutation()();
    char v48 = swift_bridgeObjectRetain();
    sub_1002D22C8(v48, v49, v50, v51, v52, v53, v54, v55, v93, v94, v95, v96, v97, v98, v99, v100, v101[0], v101[1], v101[2],
      v101[3],
      v101[4],
      v101[5],
      v101[6],
      v101[7],
      v101[8],
      v101[9]);
    id v56 = swift_bridgeObjectRetain();
    sub_1002D228C(v56);
    uint64_t v46 = v117[0];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x4000000000000000) == 0)
    {
      uint64_t v58 = v46 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_51;
    }
  }
  uint64_t v58 = (uint64_t)sub_100252F30(v46);
  uint64_t result = swift_bridgeObjectRelease();
  if (v58 < 0)
  {
LABEL_102:
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_release();
    if (v59) {
      goto LABEL_53;
    }
    goto LABEL_76;
  }
LABEL_51:
  if ((v58 & 0x4000000000000000) != 0) {
    goto LABEL_102;
  }
  uint64_t v59 = *(void *)(v58 + 16);
  if (!v59)
  {
LABEL_76:
    swift_release();
    sub_100294AB8((uint64_t)v107);
LABEL_77:
    swift_release();
    return swift_release();
  }
LABEL_53:
  if (v59 >= 1)
  {
    unsigned __int8 v60 = 0;
    while (1)
    {
      if ((v58 & 0xC000000000000001) != 0)
      {
        uint64_t v61 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v61 = *(void *)(v58 + 8 * v60 + 32);
        swift_retain();
      }
      if (*(void *)(v10 + 16) != v61) {
        break;
      }
      swift_release();
LABEL_75:
      if (v59 == ++v60) {
        goto LABEL_76;
      }
    }
    sub_100294D50(v61);
    swift_retain();
    uint64_t v62 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_10048F550;
    v102[0] = v61;
    type metadata accessor for AVAudioSessionInterruptionProvider();
    swift_retain();
    uint64_t v64 = String.init<A>(reflecting:)();
    int v66 = v65;
    *(void *)(v63 + 56) = &type metadata for String;
    *(void *)(v63 + 64) = sub_1001F3B08();
    *(void *)(v63 + 32) = v64;
    *(void *)(v63 + 40) = v66;
    uint64_t v10 = v98;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    sub_10024CD9C(0);
    sub_100294CA4(v61 + 64, (uint64_t)v103, (uint64_t *)&unk_10058A140);
    sub_100294CA4((uint64_t)v103, (uint64_t)v104, (uint64_t *)&unk_10058A140);
    uint64_t v67 = sub_10024DF14((uint64_t)v104);
    char v68 = 0;
    if (v67 != 1)
    {
      char v68 = v105;
      if (v105) {
        uint64_t v67 = swift_unknownObjectRetain();
      }
    }
    (*(void (**)(void *__return_ptr, uint64_t))(v98 + 72))(v114, v67);
    sub_100294CA4((uint64_t)v114, (uint64_t)v116, (uint64_t *)&unk_10058A140);
    if (sub_10024DF14((uint64_t)v116) == 1)
    {
      unint64_t v69 = 0;
      if (v68)
      {
LABEL_64:
        swift_unknownObjectRelease();
        if (v69)
        {
          swift_unknownObjectRelease();
          if (v68 == v69) {
            goto LABEL_74;
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      memcpy(v117, v116, 0x99uLL);
      sub_100294CA4((uint64_t)&v117[9], (uint64_t)v127, &qword_100587560);
      sub_100294CF8((uint64_t)v127);
      sub_100294AB8((uint64_t)v114);
      sub_100294CA4((uint64_t)v127, (uint64_t)&v129, &qword_100587560);
      unint64_t v69 = v129;
      if (v68) {
        goto LABEL_64;
      }
    }
    if (!v69)
    {
LABEL_74:
      swift_release_n();
      goto LABEL_75;
    }
    swift_unknownObjectRelease();
LABEL_71:
    sub_100294CA4(v61 + 64, (uint64_t)v101, (uint64_t *)&unk_10058A140);
    sub_100294CA4((uint64_t)v101, (uint64_t)v102, (uint64_t *)&unk_10058A140);
    if (sub_10024DF14((uint64_t)v102) != 1)
    {
      if (v102[9])
      {
        id v70 = v102[10];
        uint64_t v71 = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_10034AD80(0, v71, v70);
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_74;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002918FC(uint64_t a1, _OWORD *a2)
{
  return sub_10028CB34(a2, (uint64_t)sub_10029193C, 0);
}

void sub_10029193C()
{
  id v0 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
}

void sub_1002919DC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100291A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AudioDescriptor();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  sub_1002952C0();
  unint64_t v7 = (v6 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = swift_allocObject();
  sub_1002959BC();
  *(void *)(v8 + v7) = a1;
  swift_retain();
  sub_10037A658(a2, (uint64_t)sub_1002958E8, v8);
  return swift_release();
}

uint64_t sub_100291B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001F081C(&qword_100584C70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AudioDescriptor();
  sub_100295C3C(a2 + *(int *)(v9 + 20), (uint64_t)v5, &qword_100584C70);
  if (sub_1001F758C((uint64_t)v5, 1, v6) == 1) {
    return sub_100295960((uint64_t)v5, &qword_100584C70);
  }
  sub_1002959BC();
  id v11 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048F550;
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1001F3B08();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_100291D58((uint64_t)v8);
  return sub_100294B30((uint64_t)v8, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
}

uint64_t sub_100291D58(uint64_t a1)
{
  uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v22 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v25 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10048F550;
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_1001F3B08();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v14 = v21[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100293378;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  uint64_t aBlock[3] = &unk_1005106D8;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v27 = _swiftEmptyArrayStorage;
  sub_100295BAC((uint64_t)&qword_100584FF0);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_100295BF0((uint64_t)&qword_100585000);
  uint64_t v19 = v22;
  uint64_t v18 = v23;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  return swift_release();
}

uint64_t sub_10029216C()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_1002EA648((uint64_t)sub_100295234, v0);
  return swift_release_n();
}

uint64_t sub_1002921EC(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v16 = *(void *)(result + 16);
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = a1;
    v14[3] = a2;
    v14[4] = v13;
    aBlock[4] = sub_100295288;
    void aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    uint64_t aBlock[3] = &unk_100510A20;
    unint64_t v15 = _Block_copy(aBlock);
    sub_100295294(a1);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_100295BAC((uint64_t)&qword_100584FF0);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_100295BF0((uint64_t)&qword_100585000);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100292520(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a1 >= 2)
  {
    if (*(unsigned char *)(*(void *)(a3 + 64) + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor))
    {
      swift_retain();
      id v5 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      sub_1002952A8((unint64_t)a1);
    }
    else
    {
      swift_retain();
      id v4 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      a1();
      sub_1002952A8((unint64_t)a1);
    }
  }
}

void sub_100292670(uint64_t a1, unint64_t a2, __int16 a3)
{
  unint64_t v3 = a2;
  LOBYTE(v3) = a2;
  sub_100347C2C(v3, a3);
}

uint64_t sub_1002926C8()
{
  return sub_100361BE0();
}

unint64_t sub_1002926EC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)(v0 + 16);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  unint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5) {
    return sub_1002927FC();
  }
  __break(1u);
  return result;
}

unint64_t sub_1002927FC()
{
  unint64_t result = (unint64_t)sub_1002934D4();
  unint64_t v1 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(void))(v4 + 56))();
    swift_release();
  }
LABEL_9:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002928D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*(void *)(a1 + 96))
  {
    swift_retain();
    id v11 = sub_1001B1BF8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    dispatch thunk of DispatchWorkItem.perform()();
    dispatch thunk of DispatchWorkItem.cancel()();
    return swift_release();
  }
  else
  {
    id v13 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10048F550;
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1001F3B08();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    swift_beginAccess();
    sub_1002E00F4();
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

unint64_t sub_100292B40(uint64_t a1)
{
  unint64_t result = (unint64_t)sub_1002934D4();
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    swift_beginAccess();
    sub_1001F081C(qword_100587580);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    return swift_endAccess();
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(v3 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void *__return_ptr))(v6 + 72))(v10);
      sub_100294CA4((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_10058A140);
      if (sub_10024DF14((uint64_t)v11) == 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        swift_unknownObjectRetain();
        sub_100294AB8((uint64_t)v10);
      }
      (*(void (**)(uint64_t))(v6 + 40))(a1);
      if (v7)
      {
        uint64_t ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_10034AD80(0, ObjectType, v8);
        swift_release();
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100292D20()
{
  return sub_1003268E8(1);
}

uint64_t sub_100292D50()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v5 = 0u;
    long long v6 = 0u;
    return sub_100295960((uint64_t)&v5, (uint64_t *)&unk_100584CA0);
  }
  uint64_t v1 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v4, v1, &v5);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v4);
  if (!*((void *)&v6 + 1)) {
    return sub_100295960((uint64_t)&v5, (uint64_t *)&unk_100584CA0);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (!v4[0])
    {
      id v3 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      return sub_1003268E8(1);
    }
  }
  return result;
}

id sub_100292E7C(void *a1)
{
  type metadata accessor for SiriCallAnnouncementProvider();
  id v3 = v1;
  id v23 = a1;
  sub_1003494BC();
  long long v5 = v4;
  id v6 = [objc_allocWithZone((Class)type metadata accessor for DisclosureProvider()) init];
  type metadata accessor for AudioResolver();
  id v22 = sub_1003264B0();
  type metadata accessor for AudioInterruptionProviderFactory();
  uint64_t v7 = swift_allocObject();
  id v8 = [self sharedAudioSystemController];
  id v9 = [self sharedInstance];
  sub_1001F081C(&qword_100587540);
  swift_allocObject();
  uint64_t v10 = sub_1002933BC(v7, v8, v9);
  type metadata accessor for RingtoneProvider();
  swift_allocObject();
  id v11 = v5;
  uint64_t v12 = sub_100299404();
  type metadata accessor for SoundProvider();
  swift_allocObject();
  uint64_t v13 = sub_10037A5FC();
  id v14 = [objc_allocWithZone((Class)type metadata accessor for HoldMusicProvider()) init];
  type metadata accessor for DiscoveryModeProvider();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = self;
  id v17 = v6;
  id v18 = [v16 defaultCenter];
  uint64_t v19 = (void *)sub_10028D5E0();
  sub_1001F081C(&qword_100587548);
  swift_allocObject();
  *(void *)&v3[OBJC_IVAR___CSDAudioController_audioController] = sub_10028D828((uint64_t)v22, (uint64_t)v10, v11, (uint64_t)v12, v13, v14, v17, v15, v18, v19);

  v24.receiver = v3;
  v24.super_class = (Class)type metadata accessor for CSDAudioController();
  id v20 = objc_msgSendSuper2(&v24, "init");

  return v20;
}

uint64_t sub_100293118(uint64_t a1)
{
  return sub_100291D58(a1);
}

void sub_10029322C()
{
}

id sub_10029326C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDAudioController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CSDAudioController()
{
  return self;
}

uint64_t sub_1002932D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_100293378()
{
  return sub_100295B2C((uint64_t (*)(void))&type metadata accessor for UUID, sub_1002928D0);
}

uint64_t sub_1002933A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002933B4()
{
  return swift_release();
}

void *sub_1002933BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  v4[6] = _swiftEmptyDictionarySingleton;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  uint64_t v7 = self;
  swift_retain();
  id v8 = a2;
  id v9 = a3;
  id v10 = [v7 sharedInstance];
  type metadata accessor for AVAudioSessionInterruptionProvider();
  swift_allocObject();
  void v4[5] = sub_10024B414((uint64_t)v10, 1);
  type metadata accessor for AVAudioClientInterruptionProvider();
  uint64_t v11 = swift_allocObject();
  sub_10023C1C4(v13);
  sub_100294CA4((uint64_t)v13, v11 + 16, (uint64_t *)&unk_10058A140);
  swift_release();

  v4[7] = v11;
  return v4;
}

void *sub_1002934D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 40);
  type metadata accessor for AnyAudioInterruptionProvider();
  swift_allocObject();
  sub_10028C460(v2, (uint64_t)sub_1002945DC, (uint64_t)sub_1002945E0, (uint64_t)sub_1002945E4, (uint64_t)sub_1002945E8);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_10028C56C(v3);
  swift_bridgeObjectRelease();
  if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = (uint64_t)sub_100252F18(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  sub_1002D2064(v5);
  uint64_t v6 = *(void *)(v1 + 56);
  swift_allocObject();
  sub_10028C460(v6, (uint64_t)sub_1002945C8, (uint64_t)sub_1002945CC, (uint64_t)sub_1002945D0, (uint64_t)sub_1002945D4);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100293724(uint64_t a1)
{
  sub_100294DC4(a1, (uint64_t)v18);
  uint64_t result = sub_100294DC4((uint64_t)v18, (uint64_t)&v19);
  if ((v21 & 1) == 0)
  {
    if (v20 == 1)
    {
      uint64_t v3 = *(void *)(v1 + 40);
    }
    else
    {
      uint64_t v4 = v19;
      swift_beginAccess();
      uint64_t v5 = *(void *)(v1 + 48);
      if (!*(void *)(v5 + 16) || (unint64_t v6 = sub_100235A18(v4), (v7 & 1) == 0))
      {
        swift_endAccess();
        sub_1001F081C(&qword_100584B20);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_10048F550;
        *(void *)(v8 + 56) = &type metadata for UInt32;
        *(void *)(v8 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v8 + 32) = v4;
        sub_1001F6204(0, &qword_100584B80);
        id v9 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        uint64_t v10 = sub_10020DDF4(v4);
        if (v10)
        {
          uint64_t v3 = v10;
          swift_retain_n();
          id v11 = sub_1001B1BF8();
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = xmmword_10048F550;
          sub_1001F081C(&qword_100587578);
          uint64_t v13 = Optional.debugDescription.getter();
          uint64_t v15 = v14;
          *(void *)(v12 + 56) = &type metadata for String;
          *(void *)(v12 + 64) = sub_1001F3B08();
          *(void *)(v12 + 32) = v13;
          *(void *)(v12 + 40) = v15;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_10027FABC(v3, v4);
          swift_endAccess();
          swift_release();
        }
        else
        {
          id v16 = sub_1001B1BF8();
          static os_log_type_t.error.getter();
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_10048F550;
          *(void *)(v17 + 56) = &type metadata for UInt32;
          *(void *)(v17 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v17 + 32) = v4;
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          return 0;
        }
        return v3;
      }
      uint64_t v3 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_endAccess();
    }
    swift_retain();
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_1002939FC(uint64_t a1)
{
  sub_100294DC4(a1, (uint64_t)&v9);
  sub_100294DC4((uint64_t)&v9, (uint64_t)v10);
  if (v10[5])
  {
    type metadata accessor for AnyAudioInterruptionProvider();
    swift_allocObject();
    uint64_t v2 = swift_retain();
    uint64_t v3 = sub_1002945C8;
    uint64_t v4 = sub_1002945CC;
    uint64_t v5 = sub_1002945D0;
    unint64_t v6 = sub_1002945D4;
  }
  else
  {
    uint64_t result = (void *)sub_100293724(a1);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    type metadata accessor for AnyAudioInterruptionProvider();
    swift_allocObject();
    uint64_t v3 = sub_1002945DC;
    uint64_t v4 = sub_1002945E0;
    uint64_t v5 = sub_1002945E4;
    unint64_t v6 = sub_1002945E8;
    uint64_t v2 = (uint64_t)v8;
  }
  return sub_10028C460(v2, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6);
}

uint64_t sub_100293B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100294CA4(a1, (uint64_t)v23, (uint64_t *)&unk_10058A140);
  int v8 = sub_10024DF14((uint64_t)v23);
  int v9 = v23[49];
  sub_100294CA4(a3, (uint64_t)v22, (uint64_t *)&unk_10058A140);
  int v10 = sub_10024DF14((uint64_t)v22);
  BOOL v11 = v10 == 1;
  if (v10 == 1)
  {
    if (v8 != 1) {
      BOOL v11 = 0;
    }
  }
  else if (v8 != 1)
  {
    BOOL v11 = ((v9 ^ v22[49]) & 1) == 0;
  }
  sub_100294CA4(a1, (uint64_t)__src, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)__src) == 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    memcpy(__dst, __src, 0x99uLL);
    sub_100294CA4((uint64_t)&__dst[72], (uint64_t)v24, &qword_100587560);
    sub_100294CA4((uint64_t)v24, (uint64_t)&v27, &qword_100587560);
    uint64_t v12 = v27;
  }
  sub_100294CA4(a3, (uint64_t)v18, (uint64_t *)&unk_10058A140);
  if (sub_10024DF14((uint64_t)v18) == 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    memcpy(v19, v18, 0x99uLL);
    sub_100294CA4((uint64_t)&v19[72], (uint64_t)v25, &qword_100587560);
    sub_100294CA4((uint64_t)v25, (uint64_t)&v26, &qword_100587560);
    uint64_t v13 = v26;
  }
  BOOL v14 = (v12 | v13) == 0;
  if (v12 && v13) {
    BOOL v14 = v12 == v13;
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a2 + 16);
    swift_unknownObjectRetain();
    if (!a4)
    {
      if (!v15) {
        return !v11 || !v14;
      }
LABEL_28:
      swift_unknownObjectRelease();
      return 1;
    }
  }
  else
  {
    if (!a4) {
      return !v11 || !v14;
    }
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  swift_unknownObjectRetain();
  if (!v15)
  {
    if (v16) {
      goto LABEL_28;
    }
    return !v11 || !v14;
  }
  if (!v16) {
    goto LABEL_28;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v16 != v15 || !v11 || !v14;
}

uint64_t sub_100293D68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t))(a1 + 72))(v24, v8);
  sub_100294CA4((uint64_t)v24, (uint64_t)v25, (uint64_t *)&unk_10058A140);
  uint64_t result = sub_10024DF14((uint64_t)v25);
  if (result != 1)
  {
    if (v25[9])
    {
      uint64_t v21 = v6;
      uint64_t v12 = v25[10];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v19 = v3;
      uint64_t v20 = v7;
      uint64_t v14 = ObjectType;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      swift_unknownObjectRetain();
      uint64_t v16 = (void *)v15(v14, v12);
      swift_unknownObjectRelease();
      v23[4] = sub_100294EEC;
      v23[5] = a1;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 1107296256;
      _OWORD v23[2] = sub_1002C2C88;
      void v23[3] = &unk_100510868;
      uint64_t v17 = _Block_copy(v23);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v22 = _swiftEmptyArrayStorage;
      sub_100295BAC((uint64_t)&qword_100584FF0);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_100295BF0((uint64_t)&qword_100585000);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v17);

      sub_100294AB8((uint64_t)v24);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v21);
      return swift_release();
    }
    else
    {
      return sub_100294AB8((uint64_t)v24);
    }
  }
  return result;
}

void sub_1002940C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_unknownObjectRetain();
  swift_getObjectType();
  uint64_t v2 = (void *)sub_100294EF4(v1);
  if (v2 && (uint64_t v3 = sub_10029433C(v2), v4))
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    sub_1001F081C((uint64_t *)&unk_100585570);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10048F550;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 48) = v5;
    *(void *)(inited + 56) = v6;
    Class isa = (void *)Dictionary.init(dictionaryLiteral:)();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    Class isa = 0;
  }
  id v10 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048FB00;
  type metadata accessor for Name(0);
  uint64_t v12 = @"CSDCallAudioInterruptionPropertiesChangedNotification";
  uint64_t v13 = String.init<A>(reflecting:)();
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1001F3B08();
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  if (isa)
  {
    swift_bridgeObjectRetain();
    sub_1001F081C((uint64_t *)&unk_100586440);
    uint64_t v17 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v18 = 0xE300000000000000;
    uint64_t v17 = 7104878;
  }
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 72) = v17;
  *(void *)(v11 + 80) = v18;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v19 = [self defaultCenter];
  if (isa)
  {
    sub_100393DF0();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v19 postNotificationName:v12 object:0 userInfo:isa];
}

uint64_t sub_10029433C(void *a1)
{
  Class = (__objc2_class *)object_getClass(a1);
  BOOL v3 = Class != _TtC13callservicesd33AVAudioClientInterruptionProvider || a1 == 0;
  if (v3
    && (Class == _TtC13callservicesd34AVAudioSessionInterruptionProvider ? (BOOL v4 = a1 == 0) : (BOOL v4 = 1), v4))
  {
    return 0;
  }
  else
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
}

uint64_t sub_1002943B0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002943E8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10028DC64(a1, a2, a3);
}

uint64_t sub_1002943F0(uint64_t a1)
{
  return sub_10028EA64(a1, v1, (void (*)(uint64_t))sub_10028E5DC);
}

uint64_t sub_100294420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100584CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100294488(uint64_t a1)
{
  return sub_10028EA64(a1, v1, (void (*)(uint64_t))sub_10028EAD8);
}

uint64_t sub_1002944B8()
{
  type metadata accessor for Notification();
  sub_100295EF0();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100294558()
{
  uint64_t v0 = type metadata accessor for Notification();
  sub_1002462DC(v0);

  return sub_100292D50();
}

uint64_t sub_1002945C0()
{
  return sub_100292D20();
}

uint64_t sub_1002945D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10028C494(v1, a1);
}

uint64_t sub_1002945E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10028C500(v1, a1);
}

uint64_t sub_1002945F0()
{
  uint64_t v3 = sub_1001F081C(&qword_100584C80);
  sub_1002462DC(v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = (v8 + v5 + v6) & ~v5;
  swift_release();
  uint64_t v10 = v0 + v6;
  uint64_t v11 = (int *)type metadata accessor for AudioDescriptor();
  if (!sub_1001F758C(v10, 1, (uint64_t)v11))
  {

    if (*(void *)(v10 + 40) != 1) {
      swift_bridgeObjectRelease();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + v11[5];
    uint64_t v13 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
    if (!sub_1001F758C(v12, 1, v13))
    {
      type metadata accessor for UUID();
      sub_100295EF0();
      (*(void (**)(uint64_t))(v14 + 8))(v12);
    }
    uint64_t v15 = v10 + v11[6];
    if (*(void *)(v15 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = v10 + v11[7];
    uint64_t v17 = type metadata accessor for RingtoneDescriptor();
    if (!sub_100295F54(v17))
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = v16 + *(int *)(v1 + 20);
      uint64_t v19 = type metadata accessor for URL();
      if (!sub_100295FB4(v19))
      {
        sub_100295EF0();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v2);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = v10 + v11[8];
    uint64_t v22 = sub_1001F081C(&qword_100585A40);
    if (!sub_1001F758C(v21, 2, v22))
    {

      uint64_t v23 = v21 + *(int *)(type metadata accessor for SoundDescriptor() + 32);
      uint64_t v24 = type metadata accessor for UUID();
      if (!sub_100295EFC(v24))
      {
        sub_100295EF0();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v16);
      }
    }
  }
  uint64_t v26 = v0 + v9;
  if (!sub_1001F758C(v0 + v9, 1, (uint64_t)v11))
  {

    if (*(void *)(v26 + 40) != 1) {
      swift_bridgeObjectRelease();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v26 + v11[5];
    uint64_t v28 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
    if (!sub_1001F758C(v27, 1, v28))
    {
      type metadata accessor for UUID();
      sub_100295EF0();
      (*(void (**)(uint64_t))(v29 + 8))(v27);
    }
    uint64_t v30 = v26 + v11[6];
    if (*(void *)(v30 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = v26 + v11[7];
    uint64_t v32 = type metadata accessor for RingtoneDescriptor();
    if (!sub_100295F54(v32))
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = v31 + *(int *)(v1 + 20);
      uint64_t v34 = type metadata accessor for URL();
      if (!sub_100295FB4(v34))
      {
        sub_100295EF0();
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v2);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = v26 + v11[8];
    uint64_t v37 = sub_1001F081C(&qword_100585A40);
    if (!sub_1001F758C(v36, 2, v37))
    {

      type metadata accessor for SoundDescriptor();
      type metadata accessor for UUID();
      if (!sub_100295F28())
      {
        sub_100295EF0();
        sub_100295F1C();
        v38();
      }
    }
  }

  return _swift_deallocObject(v0, v8 + v9 + 1, v5 | 7);
}

uint64_t sub_100294A18()
{
  uint64_t v1 = sub_1001F081C(&qword_100584C80);
  sub_1002462DC(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  return sub_10028E054(v0 + ((v6 + 24) & ~v6), v0 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6), *(unsigned __int8 *)(v0 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6) + *(void *)(v5 + 64)));
}

uint64_t sub_100294A90()
{
  return swift_retain();
}

uint64_t sub_100294A98(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100294AB0();
  }
  return result;
}

uint64_t sub_100294AB0()
{
  return swift_release();
}

uint64_t sub_100294AB8(uint64_t a1)
{
  uint64_t v2 = sub_100295FA8(a1);
  char v5 = *(unsigned char *)(v1 + 152);
  v3(v2, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 136), *(void *)(v1 + 144),
    v5);
  return v1;
}

uint64_t sub_100294B28()
{
  return sub_1002907F0(v0);
}

uint64_t sub_100294B30(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_100295EF0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100294B8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v3 = *(void **)(a1 + 176);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  sub_10023C1CC(*(void *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10023C1CC(v8, v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_100294CA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_100295EF0();
  uint64_t v4 = sub_100295F94();
  v5(v4);
  return a2;
}

uint64_t sub_100294CF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100294D24(uint64_t a1)
{
  return a1;
}

uint64_t sub_100294D50(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

id *sub_100294D98(id *a1)
{
  return a1;
}

uint64_t sub_100294DC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100294E20(uint64_t a1)
{
  unint64_t result = sub_100295FA8(a1);
  if (!result)
  {
    sub_1001F6204(255, v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_100294E6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);

  sub_10023C25C(v3, v4, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_100294EEC()
{
  sub_1002940C0(v0);
}

uint64_t sub_100294EF4(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100294F38()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100294F70()
{
}

uint64_t sub_100294F94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    id v6 = a4;
    id v7 = a5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100294FF0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 66, 7);
}

uint64_t sub_100295048()
{
  return sub_1002918FC(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_100295054()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 72)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 88, 7);
}

void sub_1002950BC()
{
  sub_10028CE28(*(void *)(v0 + 16), (long long *)(v0 + 24), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_1002950CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 24);
  id v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100295118()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100295160()
{
  return sub_1002563AC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100295170()
{
  return sub_1002926C8();
}

void sub_100295178()
{
}

uint64_t sub_10029519C()
{
  swift_release();

  return _swift_deallocObject(v0, 34, 7);
}

void sub_1002951D4()
{
  HIDWORD(v1) = *(_DWORD *)(v0 + 28);
  sub_100292670(*(void *)(v0 + 16), v1, *(_WORD *)(v0 + 32));
}

uint64_t sub_100295208()
{
  return sub_1002EA8E4();
}

uint64_t sub_10029522C()
{
  return sub_10029216C();
}

uint64_t sub_100295234(unint64_t a1, uint64_t a2)
{
  return sub_1002921EC(a1, a2);
}

uint64_t sub_10029523C()
{
  if (*(void *)(v0 + 16) >= 2uLL) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100295288()
{
  sub_100292520(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_100295294(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_1002952A8(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1002952C0()
{
  uint64_t v1 = sub_100295F44();
  v2(v1);
  sub_100295EF0();
  uint64_t v3 = sub_100202610();
  v4(v3);
  return v0;
}

uint64_t sub_100295310()
{
  uint64_t v2 = type metadata accessor for SoundDescriptor();
  sub_100295ED4();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = (int *)type metadata accessor for AudioDescriptor();
  sub_100295ED4();
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v5 + v7 + v10) & ~v10;
  uint64_t v32 = *(void *)(v12 + 64);
  swift_release();
  uint64_t v13 = v0 + v5;

  uint64_t v14 = v13 + *(int *)(v2 + 32);
  uint64_t v15 = type metadata accessor for UUID();
  if (!sub_1001F758C(v14, 1, v15))
  {
    sub_100295EF0();
    sub_100295F1C();
    v16();
  }
  uint64_t v17 = v0 + v11;

  if (*(void *)(v0 + v11 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v17 + v8[5];
  uint64_t v19 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  if (!sub_1001F758C(v18, 1, v19))
  {
    sub_100295EF0();
    sub_100295F1C();
    v20();
  }
  uint64_t v21 = v17 + v8[6];
  if (*(void *)(v21 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v17 + v8[7];
  uint64_t v23 = type metadata accessor for RingtoneDescriptor();
  if (!sub_100295F74(v23))
  {
    uint64_t v31 = v11;
    swift_bridgeObjectRelease();
    uint64_t v24 = v22 + *(int *)(v1 + 20);
    uint64_t v25 = type metadata accessor for URL();
    if (!sub_1001F758C(v24, 1, v25))
    {
      sub_100295EF0();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v31;
  }
  uint64_t v27 = v17 + v8[8];
  uint64_t v28 = sub_1001F081C(&qword_100585A40);
  if (!sub_1001F758C(v27, 2, v28))
  {

    if (!sub_100295F28())
    {
      sub_100295EF0();
      sub_100295F1C();
      v29();
    }
  }

  return _swift_deallocObject(v0, v11 + v32, v4 | v10 | 7);
}

uint64_t sub_1002955EC()
{
  uint64_t v1 = type metadata accessor for SoundDescriptor();
  sub_1002462DC(v1);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  type metadata accessor for AudioDescriptor();
  uint64_t v4 = *(void *)(v0 + 16);

  return sub_100291A04(v4, v0 + v3);
}

uint64_t sub_100295698()
{
  unint64_t v3 = (int *)type metadata accessor for AudioDescriptor();
  sub_100295ED4();
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = v0 + v6;

  if (*(void *)(v0 + v6 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 + v3[5];
  uint64_t v11 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  if (!sub_1001F758C(v10, 1, v11))
  {
    type metadata accessor for UUID();
    sub_100295EF0();
    (*(void (**)(uint64_t))(v12 + 8))(v10);
  }
  uint64_t v13 = v9 + v3[6];
  if (*(void *)(v13 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v9 + v3[7];
  uint64_t v15 = type metadata accessor for RingtoneDescriptor();
  if (!sub_100295EFC(v15))
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v14 + *(int *)(v1 + 20);
    uint64_t v17 = type metadata accessor for URL();
    if (!sub_100295F74(v17))
    {
      sub_100295EF0();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v2);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v9 + v3[8];
  uint64_t v20 = sub_1001F081C(&qword_100585A40);
  if (!sub_1001F758C(v19, 2, v20))
  {

    type metadata accessor for SoundDescriptor();
    type metadata accessor for UUID();
    if (!sub_100295F28())
    {
      sub_100295EF0();
      sub_100295F1C();
      v21();
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v8 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v5 | 7);
}

uint64_t sub_1002958E8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AudioDescriptor();
  sub_1002462DC(v3);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100291B60(a1, v5);
}

uint64_t sub_100295960(uint64_t a1, uint64_t *a2)
{
  sub_1001F081C(a2);
  sub_100295EF0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1002959BC()
{
  uint64_t v1 = sub_100295F44();
  v2(v1);
  sub_100295EF0();
  uint64_t v3 = sub_100295F94();
  v4(v3);
  return v0;
}

uint64_t sub_100295A0C()
{
  uint64_t v2 = type metadata accessor for RingtoneDescriptor();
  sub_100295ED4();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v5 + *(int *)(v2 + 20);
  uint64_t v9 = type metadata accessor for URL();
  if (!sub_100295EFC(v9))
  {
    sub_100295EF0();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v1);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + v7, v4 | 7);
}

uint64_t sub_100295B00()
{
  return sub_100295B2C((uint64_t (*)(void))type metadata accessor for RingtoneDescriptor, (uint64_t (*)(uint64_t, uint64_t))sub_1002919DC);
}

uint64_t sub_100295B2C(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

unint64_t sub_100295BAC(uint64_t a1)
{
  unint64_t result = sub_100295FA8(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100295BF0(uint64_t a1)
{
  unint64_t result = sub_100295FA8(a1);
  if (!result)
  {
    sub_1001F08B4(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_100295C3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_100295EF0();
  uint64_t v4 = sub_100202610();
  v5(v4);
  return a2;
}

uint64_t sub_100295C90(void *a1)
{
  return sub_10028F090(a1, v1);
}

uint64_t sub_100295CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 144);
}

uint64_t sub_100295CBC()
{
  return sub_100294AB0();
}

uint64_t sub_100295CCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100294A90();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_100295D18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100294A90();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100294AB0();
  return a1;
}

__n128 sub_100295D70(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_100295D84(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100294AB0();
  return a1;
}

uint64_t sub_100295DCC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100295E0C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100295E50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100295E58(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for AudioController.ProviderChange()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100295EFC(uint64_t a1)
{
  return sub_1001F758C(v1, 1, a1);
}

uint64_t sub_100295F28()
{
  return sub_1001F758C(v0, 1, v1);
}

uint64_t sub_100295F44()
{
  return 0;
}

uint64_t sub_100295F54(uint64_t a1)
{
  return sub_1001F758C(v1, 1, a1);
}

uint64_t sub_100295F74(uint64_t a1)
{
  return sub_1001F758C(v1, 1, a1);
}

uint64_t sub_100295F94()
{
  return v0;
}

uint64_t sub_100295FA8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100295FB4(uint64_t a1)
{
  return sub_1001F758C(v1, 1, a1);
}

uint64_t destroy for SpamDataModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SpamDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SpamDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SpamDataModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for SpamDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpamDataModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpamDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpamDataModel()
{
  return &type metadata for SpamDataModel;
}

uint64_t sub_1002962B4()
{
  sub_10023C59C((uint64_t)(v0 + 7), (uint64_t)v23, &qword_100587608);
  sub_10023C59C((uint64_t)v23, (uint64_t)&v24, &qword_100587608);
  if (v25)
  {
    static os_log_type_t.error.getter();
    id v1 = sub_1001B1AC8();
LABEL_11:
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  uint64_t v2 = v24;
  sub_10023C59C((uint64_t)(v0 + 5), (uint64_t)v22, (uint64_t *)&unk_100586180);
  sub_10023C59C((uint64_t)v22, (uint64_t)&v26, (uint64_t *)&unk_100586180);
  if (!*((void *)&v26 + 1) || (v27 = v26, (uint64_t v3 = (void *)v0[4]) == 0))
  {
LABEL_10:
    static os_log_type_t.error.getter();
    id v1 = sub_1001B1AC8();
    goto LABEL_11;
  }
  id v4 = v3;
  sub_1002966B0((uint64_t)v22);
  id v5 = (id)TUCopyIDSFromIDForHandle();
  if (!v5)
  {
    sub_1002966DC((uint64_t)v22);

    goto LABEL_10;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = (id)TUHandleForIDSCanonicalAddress();

  id v12 = (id)TUCopyIDSFromIDForHandle();
  if (!v12)
  {
    sub_1002966DC((uint64_t)v22);
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    id v21 = sub_1001B1AC8();
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  sub_1001F081C(&qword_100585F08);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1004914A0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100296708();
  *(void *)(inited + 96) = &type metadata for Double;
  *(void *)(inited + 72) = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100296708();
  *(void *)(inited + 168) = &type metadata for String;
  *(_OWORD *)(inited + 144) = v27;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100296708();
  *(void *)(inited + 240) = &type metadata for String;
  *(void *)(inited + 216) = v7;
  *(void *)(inited + 224) = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 288) = v13;
  *(void *)(inited + 296) = v15;
  sub_100296728();
  *(void *)(inited + 384) = &type metadata for Int;
  *(void *)(inited + 360) = 1;
  sub_100296728();
  uint64_t v18 = v0[9];
  uint64_t v17 = v0[10];
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 432) = v18;
  *(void *)(inited + 440) = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();

  return v19;
}

uint64_t sub_1002966B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002966DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100296708()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_100296728()
{
  return AnyHashable.init<A>(_:)();
}

id sub_100296748(uint64_t a1, void *a2, uint64_t a3)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_deferredUpdateRequest] = 2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  *(void *)&v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue] = a3;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for ConversationLocalParticipantBlobTracker();
  id v6 = objc_msgSendSuper2(&v8, "init");
  swift_unknownObjectRelease();

  return v6;
}

void sub_100296874()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  objc_super v8 = *(void **)&v0[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v6 - v5) = v8;
  sub_1002987FC();
  v9();
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  if (v8)
  {
    if (qword_1005839E0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594B98);
  id v12 = v0;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    type metadata accessor for ConversationLocalParticipantBlobTracker();
    uint64_t v16 = v12;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v23 = sub_1002344D8(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      objc_msgSend(Strong, "state", v23, v24);
      swift_unknownObjectRelease();
      type metadata accessor for TUConversationState(0);
      uint64_t v20 = String.init<A>(reflecting:)();
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    sub_1002344D8(v20, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s Learned about updated state new-state=%s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  sub_100297118();
}

void sub_100296BC0(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  id v10 = *(void **)&v1[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v8 - v7) = v10;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v8 - v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  if (v10)
  {
    if (qword_1005839E0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_1001F5F88(v12, (uint64_t)qword_100594B98);
  uint64_t v13 = v1;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    swift_slowAlloc();
    uint64_t v20 = sub_100298834();
    *(_DWORD *)uint64_t v3 = 136315394;
    type metadata accessor for ConversationLocalParticipantBlobTracker();
    char v16 = a1;
    uint64_t v17 = v13;
    uint64_t v18 = String.init<A>(reflecting:)();
    sub_1002344D8(v18, v19, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a1 = v16;
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s received request to update localParticiapntBlob, deliverOverPush: %{BOOL}d", (uint8_t *)v3, 0x12u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  sub_100297A78(a1 & 1);
}

void sub_100297118()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001FCC88();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCCD0();
  v46[14] = v11;
  type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  v46[9] = v13;
  v46[10] = v12;
  __chkstk_darwin(v12);
  sub_1001FCCD0();
  v46[8] = v14;
  v46[16] = type metadata accessor for DispatchTime();
  sub_1001F6398();
  v46[13] = v15;
  uint64_t v17 = __chkstk_darwin(v16);
  v46[11] = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v46[12] = (char *)v46 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_1001F2514();
  uint64_t v26 = v25 - v24;
  v46[7] = OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue;
  long long v27 = *(void **)&v2[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v25 - v24) = v27;
  sub_1002987FC();
  v28();
  id v29 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v20);
  if (v27)
  {
    v46[4] = v9;
    v46[5] = v1;
    v46[6] = v7;
    if (qword_1005839E0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = sub_1001F5F88(v30, (uint64_t)qword_100594B98);
  uint64_t v32 = v2;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  p_vtable = (void **)(&OBJC_METACLASS___CSDCallController + 24);
  if (os_log_type_enabled(v33, v34))
  {
    v46[1] = v31;
    v46[15] = v2;
    v46[2] = v5;
    void v46[3] = v3;
    uint64_t v36 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315394;
    uint64_t v48 = (uint64_t)v32;
    type metadata accessor for ConversationLocalParticipantBlobTracker();
    uint64_t v37 = v32;
    uint64_t v38 = String.init<A>(reflecting:)();
    uint64_t v48 = sub_1002344D8(v38, v39, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    int v40 = v37[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_deferredUpdateRequest];
    if (v40 == 2)
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v42 = 7104878;
    }
    else
    {
      LOBYTE(v48) = v40 & 1;
      uint64_t v42 = String.init<A>(reflecting:)();
      unint64_t v41 = v43;
    }
    uint64_t v48 = sub_1002344D8(v42, v41, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s Evaluating deferredUpdateRequest: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    p_vtable = &OBJC_METACLASS___CSDCallController.vtable;
  }
  else
  {
  }
  uint64_t v44 = p_vtable[196];
  int v45 = v44[(void)v32];
  if (v45 != 2)
  {
    sub_100297A78(v45 & 1);
    v44[(void)v32] = 2;
  }
}

void sub_100297A24()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100297118();
  }
}

void sub_100297A78(char a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001FCC88();
  uint64_t v8 = *(void **)&v1[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *uint64_t v2 = v8;
  sub_1002987FC();
  v9();
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v2, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1005839E0 == -1)
    {
LABEL_10:
      uint64_t v23 = type metadata accessor for Logger();
      sub_1001F5F88(v23, (uint64_t)qword_100594B98);
      uint64_t v24 = v1;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        long long v27 = (uint8_t *)sub_100235B18();
        uint64_t v57 = sub_100202470();
        sub_100298850(4.8149e-34);
        type metadata accessor for ConversationLocalParticipantBlobTracker();
        uint64_t v28 = v24;
        uint64_t v29 = String.init<A>(reflecting:)();
        sub_1002344D8(v29, v30, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s Couldn't find a reference to the underlying conversation to update the local participant for.", v27, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
      }
      sub_10029849C();
      swift_allocError();
      swift_willThrow();
      return;
    }
LABEL_32:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v12 = Strong;
  if ([Strong state] != (id)3)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1001F5F88(v31, (uint64_t)qword_100594B98);
    uint64_t v32 = v1;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      sub_100235B18();
      uint64_t v57 = sub_100202470();
      sub_1002988A0(4.8149e-34);
      uint64_t v35 = v32;
      uint64_t v36 = String.init<A>(reflecting:)();
      uint64_t v38 = sub_1002344D8(v36, v37, &v57);
      sub_10029880C(v38);

      swift_bridgeObjectRelease();
      sub_100298880((void *)&_mh_execute_header, v39, v40, "%s Conversation state is not joined, not executing deferred requests.");
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    sub_1002984E8();
    swift_allocError();
    *unint64_t v41 = 0;
    goto LABEL_30;
  }
  id v13 = [v12 localCSDParticipant];
  if (!v13)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_1001F5F88(v42, (uint64_t)qword_100594B98);
    unint64_t v43 = v1;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      sub_100235B18();
      uint64_t v57 = sub_100202470();
      sub_1002988A0(4.8149e-34);
      uint64_t v46 = v43;
      uint64_t v47 = String.init<A>(reflecting:)();
      uint64_t v49 = sub_1002344D8(v47, v48, &v57);
      sub_10029880C(v49);

      swift_bridgeObjectRelease();
      sub_100298880((void *)&_mh_execute_header, v50, v51, "%s Conversation state is joined but has no localParticipant.");
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    sub_1002984E8();
    swift_allocError();
    unsigned char *v55 = 1;
LABEL_30:
    swift_willThrow();
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v14 = v13;
  if (qword_1005839E0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_1001F5F88(v15, (uint64_t)qword_100594B98);
  uint64_t v16 = v1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v56 = v14;
    uint64_t v19 = (uint8_t *)sub_100235B18();
    uint64_t v57 = sub_100202470();
    *(_DWORD *)uint64_t v19 = 136315138;
    type metadata accessor for ConversationLocalParticipantBlobTracker();
    uint64_t v20 = v16;
    uint64_t v21 = String.init<A>(reflecting:)();
    sub_1002344D8(v21, v22, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s Local participant blob will be updated", v19, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    uint64_t v14 = v56;
    sub_1001F63CC();
  }
  else
  {
  }
  uint64_t v52 = (void *)swift_unknownObjectWeakLoadStrong();
  int v53 = v52;
  uint64_t v54 = &selRef_sendLocalParticipant_;
  if ((a1 & 1) == 0) {
    uint64_t v54 = &selRef_updateLocalParticipantInfo_;
  }
  objc_msgSend(v52, *v54, v14);

  swift_unknownObjectRelease();
}

void sub_100298194()
{
}

id sub_1002981D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLocalParticipantBlobTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLocalParticipantBlobTracker()
{
  return self;
}

uint64_t sub_1002982CC(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100298364(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100298430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.DeferredUpdateRequest()
{
}

id sub_100298464()
{
  id v1 = [v0 localConversationParticipantWithData];

  return v1;
}

unint64_t sub_10029849C()
{
  unint64_t result = qword_100587658;
  if (!qword_100587658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587658);
  }
  return result;
}

unint64_t sub_1002984E8()
{
  unint64_t result = qword_100587660;
  if (!qword_100587660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587660);
  }
  return result;
}

uint64_t sub_100298534()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10029856C()
{
}

uint64_t sub_100298574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100298584()
{
  return swift_release();
}

unsigned char *sub_10029858C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100298658);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.RecoverableErrors()
{
}

unsigned char *sub_10029868C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100298728);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.FatalErrors()
{
}

unint64_t sub_100298760()
{
  unint64_t result = qword_100587668;
  if (!qword_100587668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587668);
  }
  return result;
}

unint64_t sub_1002987B0()
{
  unint64_t result = qword_100587670[0];
  if (!qword_100587670[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100587670);
  }
  return result;
}

uint64_t sub_10029880C(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100298834()
{
  return swift_slowAlloc();
}

void sub_100298850(float a1)
{
  *uint64_t v1 = a1;
}

void sub_100298860(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100298880(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1002988A0(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v3 - 88) = v2;
  return type metadata accessor for ConversationLocalParticipantBlobTracker();
}

uint64_t sub_1002988C0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10029897C()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));

  sub_100298AD8();
  sub_100298AD8();
  swift_unknownObjectRelease();
  sub_100298AD8();
  swift_bridgeObjectRelease();
  sub_100298AD8();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100298A68()
{
  sub_10029897C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioInterruptionProviderPool()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100298B08()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_availability);
}

uint64_t sub_100298B3C()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestSuccessCount);
}

uint64_t sub_100298B70()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount);
}

double sub_100298BA4()
{
  return *(double *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration);
}

double sub_100298BD8()
{
  return *(double *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration);
}

id sub_100298BE8(int a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v5[OBJC_IVAR___CSDMomentsUsageReport_availability] = a1;
  *(void *)&v5[OBJC_IVAR___CSDMomentsUsageReport_photoRequestSuccessCount] = a2;
  *(void *)&v5[OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount] = a3;
  *(double *)&v5[OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration] = a4;
  *(double *)&v5[OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration] = a5;
  v13.receiver = v5;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_100298D20()
{
  _StringGuts.grow(_:)(96);
  v1._object = (void *)0x8000000100483A50;
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v1);
  type metadata accessor for TUMomentsAvailability(0);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x736563637553202CLL;
  v2._object = (void *)0xED0000203A736573;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0xEC000000203A7365;
  v4._uint64_t countAndFlagsBits = 0x72756C696146202CLL;
  String.append(_:)(v4);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6E616964654D202CLL;
  v6._object = (void *)0xEE00203A72754420;
  String.append(_:)(v6);
  sub_100298F80(OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration, v7, v12, v14);
  v8._uint64_t countAndFlagsBits = 0x44206E61654D202CLL;
  v8._object = (void *)0xEC000000203A7275;
  String.append(_:)(v8);
  sub_100298F80(OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration, v9, v13, v15);
  v10._uint64_t countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

void sub_100298F1C()
{
}

uint64_t type metadata accessor for MomentsUsageReport()
{
  return self;
}

uint64_t sub_100298F80@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  a2.n128_u64[0] = *(void *)(v4 + a1);
  return Double.write<A>(to:)(va, v5, v6, a2);
}

id sub_100298FA0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Swift::String v2 = &v0[OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying];
  *(void *)Swift::String v2 = 0;
  *((void *)v2 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

void sub_100299020()
{
  Swift::String v1 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    sub_100208490((uint64_t)v1);
  }
}

id sub_1002990EC()
{
  id v1 = [v0 configuration];

  return v1;
}

uint64_t sub_100299128(uint64_t a1)
{
  [v1 setPlaybackObserver:a1];

  return swift_unknownObjectRelease();
}

void sub_100299174(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[4] = a1;
    void v4[5] = a2;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 1107296256;
    v4[2] = sub_100299234;
    v4[3] = &unk_100510F00;
    Swift::String v3 = _Block_copy(v4);
    swift_retain();
    swift_release();
  }
  else
  {
    Swift::String v3 = 0;
  }
  [v2 playWithCompletionHandler:v3];
  _Block_release(v3);
}

void sub_100299234(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t type metadata accessor for RingtoneProviderAlertPlaybackObserver()
{
  return self;
}

id sub_1002992D4(uint64_t a1)
{
  return [self alertWithConfiguration:a1];
}

id sub_100299328()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for RingtoneProviderAlertPlaybackObserver());

  return [v0 init];
}

id *sub_10029935C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1002993AC()
{
  sub_10029935C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RingtoneProvider()
{
  return self;
}

void *sub_100299404()
{
  id v1 = [objc_allocWithZone((Class)CNContactStore) init];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  v0[5] = dispatch_semaphore_create(0);
  v0[6] = dispatch_semaphore_create(0);
  v0[7] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v0[8] = sub_1002992D4;
  v0[9] = 0;
  v0[10] = sub_100299328;
  v0[11] = 0;
  return v0;
}

void sub_10029949C(uint64_t *a1)
{
  uint64_t v2 = v1;
  id v22 = sub_10029972C(a1);
  if (*(void *)(v1 + 24))
  {
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    swift_unknownObjectRetain();
    id v6 = (void *)v5(ObjectType, v3);
    swift_unknownObjectRelease();
    sub_1001F6204(0, (unint64_t *)&unk_1005878D0);
    id v21 = v22;
    id v7 = v6;
    char v8 = static NSObject.== infix(_:_:)();

    if (v8)
    {
      id v9 = sub_100008DCC();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      Swift::String v10 = v21;
LABEL_6:

      return;
    }
  }
  uint64_t v11 = *(uint64_t (**)(id))(v2 + 64);
  swift_retain();
  uint64_t v12 = v11(v22);
  uint64_t v14 = v13;
  swift_release();
  if (v12)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t))(v2 + 80);
    uint64_t v16 = swift_retain();
    uint64_t v17 = (void *)v15(v16);
    swift_release();
    sub_10029A2C8((uint64_t)v17, v12, v14, v2);

    swift_unknownObjectRelease();
    Swift::String v10 = v22;
    goto LABEL_6;
  }
  id v18 = sub_100008DCC();
  static os_log_type_t.error.getter();
  sub_1001F081C(&qword_100584B20);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_10048F550;
  *(void *)(v19 + 56) = sub_1001F6204(0, (unint64_t *)&unk_1005878D0);
  *(void *)(v19 + 64) = sub_1001FCAC8(&qword_1005878E0, (unint64_t *)&unk_1005878D0);
  *(void *)(v19 + 32) = v22;
  id v20 = v22;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
}

id sub_10029972C(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v97 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v8 = (char *)&v94 - v7;
  uint64_t v9 = sub_1001F081C(&qword_1005878F0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  int64_t v105 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v94 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v94 - v15;
  unint64_t v17 = a1[1];
  id v18 = (_OWORD *)&unk_10048F000;
  uint64_t v98 = v4;
  uint64_t v103 = (char *)&v94 - v15;
  if (!v17)
  {
    uint64_t v96 = 0;
    id v20 = 0;
LABEL_7:
    uint64_t v100 = 0;
    unsigned int v102 = 0;
    goto LABEL_15;
  }
  id v19 = sub_10029A9EC(*a1, v17);
  id v20 = v19;
  if (!v19)
  {
    uint64_t v96 = 0;
    goto LABEL_7;
  }
  unint64_t v95 = v8;
  long long v101 = v1;
  uint64_t v99 = (uint64_t)a1;
  uint64_t v21 = sub_1001F612C(v19, (SEL *)&selRef_sound);
  unint64_t v23 = v22;
  uint64_t v100 = sub_1001F612C(v20, (SEL *)&selRef_vibration);
  uint64_t v104 = v24;
  unsigned int v102 = [v20 ignoreMute];
  id v25 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10048FAF0;
  *(void *)(v26 + 56) = sub_1001F6204(0, &qword_100587908);
  *(void *)(v26 + 64) = sub_1001FCAC8((unint64_t *)&unk_100587910, &qword_100587908);
  *(void *)(v26 + 32) = v20;
  uint64_t v96 = v21;
  if (v23)
  {
    unint64_t v106 = v21;
    unint64_t v107 = v23;
    id v27 = v20;
    unint64_t v28 = v23;
    swift_bridgeObjectRetain();
    uint64_t v29 = String.init<A>(reflecting:)();
    unint64_t v31 = v30;
  }
  else
  {
    unint64_t v28 = 0;
    id v32 = v20;
    unint64_t v31 = 0xE300000000000000;
    uint64_t v29 = 7104878;
  }
  *(void *)(v26 + 96) = &type metadata for String;
  unint64_t v33 = sub_1001F3B08();
  *(void *)(v26 + 104) = v33;
  *(void *)(v26 + 72) = v29;
  *(void *)(v26 + 80) = v31;
  if (v104)
  {
    unint64_t v106 = v100;
    unint64_t v107 = (unint64_t)v104;
    swift_bridgeObjectRetain();
    uint64_t v34 = String.init<A>(reflecting:)();
    a1 = (uint64_t *)v99;
    uint64_t v16 = v103;
  }
  else
  {
    unint64_t v35 = 0xE300000000000000;
    a1 = (uint64_t *)v99;
    uint64_t v16 = v103;
    uint64_t v34 = 7104878;
  }
  *(void *)(v26 + 136) = &type metadata for String;
  *(void *)(v26 + 144) = v33;
  *(void *)(v26 + 112) = v34;
  *(void *)(v26 + 120) = v35;
  LOBYTE(v106) = v102;
  uint64_t v36 = String.init<A>(reflecting:)();
  *(void *)(v26 + 176) = &type metadata for String;
  *(void *)(v26 + 184) = v33;
  *(void *)(v26 + 152) = v36;
  *(void *)(v26 + 160) = v37;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if (v28)
  {
    unint64_t v38 = v28;
    int v39 = 0;
    uint64_t v40 = 1;
    id v20 = v104;
    id v41 = v105;
    uint64_t v1 = v101;
    goto LABEL_19;
  }
  id v18 = &unk_10048F000;
  uint64_t v4 = v98;
  id v20 = v104;
  uint64_t v1 = v101;
  char v8 = v95;
LABEL_15:
  uint64_t v42 = type metadata accessor for RingtoneDescriptor();
  sub_10029AC90((uint64_t)a1 + *(int *)(v42 + 20), (uint64_t)v14);
  if (sub_1001F758C((uint64_t)v14, 1, v3) == 1)
  {
    sub_10029ACF8((uint64_t)v14);
    unint64_t v38 = 0;
    uint64_t v40 = 1;
  }
  else
  {
    unint64_t v43 = v18;
    long long v101 = v1;
    uint64_t v104 = v20;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v44(v8, v14, v3);
    id v45 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v43[85];
    URL._bridgeToObjectiveC()(v47);
    uint64_t v49 = v48;
    *(void *)(v46 + 56) = sub_1001F6204(0, &qword_1005878F8);
    *(void *)(v46 + 64) = sub_1001FCAC8(&qword_100587900, &qword_1005878F8);
    *(void *)(v46 + 32) = v49;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    v44(v103, v8, v3);
    uint64_t v16 = v103;
    id v20 = v104;
    uint64_t v1 = v101;
    uint64_t v40 = 0;
    unint64_t v38 = 0;
  }
  int v39 = 1;
  id v41 = v105;
LABEL_19:
  sub_1001F0530((uint64_t)v16, v40, 1, v3);
  uint64_t v50 = (void *)v1[7];
  unsigned int v51 = [v50 dualSIMRingtoneEnabled];
  uint64_t v99 = 0;
  long long v101 = v50;
  if (v39)
  {
    uint64_t v104 = 0;
    uint64_t v52 = &unk_10048F000;
    if (v51)
    {
      int v53 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RingtoneDescriptor() + 24));
      if (v53[1])
      {
        uint64_t v54 = *v53;
        uint64_t v55 = a1;
        id v56 = (void *)v53[1];
        swift_bridgeObjectRetain_n();
        unint64_t v57 = v38;
        id v58 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_10048F550;
        *(void *)(v59 + 56) = &type metadata for String;
        *(void *)(v59 + 64) = sub_1001F3B08();
        uint64_t v99 = v54;
        *(void *)(v59 + 32) = v54;
        *(void *)(v59 + 40) = v56;
        uint64_t v104 = v56;
        a1 = v55;
        uint64_t v52 = (_OWORD *)&unk_10048F000;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        unint64_t v38 = v57;
        uint64_t v16 = v103;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v99 = 0;
        uint64_t v104 = 0;
      }
    }
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v52 = (_OWORD *)&unk_10048F000;
  }
  int64_t v105 = (char *)[objc_allocWithZone((Class)TLAlertConfiguration) initWithType:1];
  [v105 setShouldRepeat:1];
  if ((v39 & 1) == 0)
  {
    uint64_t v60 = v96;
    unint64_t v61 = v38;
    NSString v62 = String._bridgeToObjectiveC()();
    [v105 setToneIdentifier:v62];

    id v63 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = v52[85];
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 64) = sub_1001F3B08();
    *(void *)(v64 + 32) = v60;
    *(void *)(v64 + 40) = v61;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  id v65 = v105;
  if (v20)
  {
    uint64_t v66 = v100;
    NSString v67 = String._bridgeToObjectiveC()();
    [v65 setVibrationIdentifier:v67];

    id v68 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = v52[85];
    *(void *)(v69 + 56) = &type metadata for String;
    *(void *)(v69 + 64) = sub_1001F3B08();
    *(void *)(v69 + 32) = v66;
    *(void *)(v69 + 40) = v20;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  sub_10029AC90((uint64_t)v16, (uint64_t)v41);
  if (sub_1001F758C((uint64_t)v41, 1, v3) == 1)
  {
    sub_10029ACF8((uint64_t)v41);
  }
  else
  {
    id v70 = v97;
    uint64_t v71 = v98;
    (*(void (**)(char *, id, uint64_t))(v98 + 32))(v97, v41, v3);
    URL._bridgeToObjectiveC()(v72);
    id v74 = v73;
    [v65 setExternalToneFileURL:v73];

    id v75 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = v52[85];
    URL._bridgeToObjectiveC()(v77);
    uint64_t v79 = v78;
    *(void *)(v76 + 56) = sub_1001F6204(0, &qword_1005878F8);
    uint64_t v52 = &unk_10048F000;
    *(void *)(v76 + 64) = sub_1001FCAC8(&qword_100587900, &qword_1005878F8);
    *(void *)(v76 + 32) = v79;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    id v65 = v105;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v3);
  }
  if ([v101 dualSIMRingtoneEnabled])
  {
    uint64_t v80 = v104;
    if (!v104) {
      goto LABEL_36;
    }
    unint64_t v106 = 0xD000000000000018;
    unint64_t v107 = 0x8000000100483DB0;
    uint64_t v81 = v99;
    v82._uint64_t countAndFlagsBits = v99;
    v82._object = v104;
    String.append(_:)(v82);
    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v65 setTopic:v83];

    id v84 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v85 = swift_allocObject();
    *(_OWORD *)(v85 + 16) = v52[85];
    *(void *)(v85 + 56) = &type metadata for String;
    *(void *)(v85 + 64) = sub_1001F3B08();
    *(void *)(v85 + 32) = v81;
    *(void *)(v85 + 40) = v80;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_bridgeObjectRelease();
LABEL_36:
  char v86 = v102;
  [v65 setShouldIgnoreRingerSwitch:v102];
  id v87 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = v52[85];
  LOBYTE(v106) = v86;
  uint64_t v89 = String.init<A>(reflecting:)();
  uint64_t v91 = v90;
  *(void *)(v88 + 56) = &type metadata for String;
  *(void *)(v88 + 64) = sub_1001F3B08();
  *(void *)(v88 + 32) = v89;
  *(void *)(v88 + 40) = v91;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if (*((unsigned char *)a1 + *(int *)(type metadata accessor for RingtoneDescriptor() + 28)) == 1)
  {
    id v92 = sub_100008DCC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    [v65 setToneIdentifier:TLToneIdentifierNone];
    [v65 setExternalToneFileURL:0];
  }
  sub_10029ACF8((uint64_t)v16);
  return v65;
}

uint64_t sub_10029A2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = (Swift::Int (*)())swift_allocObject();
  *((void *)v8 + 2) = a2;
  *((void *)v8 + 3) = a3;
  *((void *)v8 + 4) = a4;
  uint64_t v9 = (Swift::Int (**)())(a1 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  void *v9 = sub_10029A630;
  v9[1] = v8;
  swift_unknownObjectRetain();
  swift_retain();
  sub_100208490(v10);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
  uint64_t v13 = swift_unknownObjectRetain();
  v12(v13, ObjectType, a3);
  id v14 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10048F550;
  swift_unknownObjectRetain();
  sub_1001F081C(&qword_1005878E8);
  uint64_t v16 = String.init<A>(reflecting:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1001F3B08();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v19 = (void *)swift_allocObject();
  void v19[2] = a4;
  v19[3] = a2;
  void v19[4] = a3;
  id v20 = *(void (**)(id (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  v20(sub_10029A8A4, v19, ObjectType, a3);
  swift_release();
  OS_dispatch_semaphore.wait()();
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  swift_unknownObjectRelease();
  return swift_unknownObjectRetain();
}

Swift::Int sub_10029A4F4()
{
  id v0 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10048F550;
  swift_unknownObjectRetain();
  sub_1001F081C(&qword_1005878E8);
  uint64_t v2 = String.init<A>(reflecting:)();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_1001F3B08();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10029A5F0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

Swift::Int sub_10029A630()
{
  return sub_10029A4F4();
}

id sub_10029A63C(uint64_t a1, uint64_t a2)
{
  OS_dispatch_semaphore.signal()();
  OS_dispatch_semaphore.signal()();
  id v4 = sub_100008DCC();
  if (a1 == 5)
  {
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10048FB00;
    swift_unknownObjectRetain();
    sub_1001F081C(&qword_1005878E8);
    uint64_t v6 = String.init<A>(reflecting:)();
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    unint64_t v9 = sub_1001F3B08();
    *(void *)(v5 + 64) = v9;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    if (a2)
    {
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v10 = String.init<A>(reflecting:)();
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    *(void *)(v5 + 96) = &type metadata for String;
    *(void *)(v5 + 104) = v9;
    *(void *)(v5 + 72) = v10;
    *(void *)(v5 + 80) = v11;
    goto LABEL_8;
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048FB00;
  id result = (id)NSStringFromTLAlertPlaybackCompletionType();
  if (result)
  {
    id v14 = result;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v18 = sub_1001F3B08();
    *(void *)(v12 + 64) = v18;
    *(void *)(v12 + 32) = v15;
    *(void *)(v12 + 40) = v17;
    swift_unknownObjectRetain();
    sub_1001F081C(&qword_1005878E8);
    uint64_t v19 = String.init<A>(reflecting:)();
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v18;
    *(void *)(v12 + 72) = v19;
    *(void *)(v12 + 80) = v20;
    static os_log_type_t.default.getter();
LABEL_8:
    os_log(_:dso:log:type:_:)();

    return (id)swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10029A864()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_10029A8A4(uint64_t a1, uint64_t a2)
{
  return sub_10029A63C(a1, a2);
}

void sub_10029A8B0()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    id v2 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10048F550;
    swift_unknownObjectRetain();
    sub_1001F081C(&qword_1005878E8);
    uint64_t v4 = String.init<A>(reflecting:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_1001F3B08();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
    OS_dispatch_semaphore.wait()();
    swift_unknownObjectRelease();
  }
}

id sub_10029A9EC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(void **)(v2 + 16);
  NSString v7 = String._bridgeToObjectiveC()();
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F560;
  unint64_t v9 = (void *)CNContactCallAlertKey;
  *(void *)(v8 + 32) = CNContactCallAlertKey;
  specialized Array._endMutation()();
  id v10 = v9;
  sub_1001F081C((uint64_t *)&unk_100587920);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = 0;
  id v12 = [v6 unifiedContactWithIdentifier:v7 keysToFetch:isa error:&v22];

  if (!v12)
  {
    id v15 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v16 = (void *)_convertErrorToNSError(_:)();
    id v17 = [v16 code];

    if (v17 == (id)200)
    {
      swift_errorRelease();
    }
    else
    {
      id v18 = sub_100008DCC();
      static os_log_type_t.error.getter();
      sub_1001F081C(&qword_100584B20);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_10048FB00;
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = sub_1001F3B08();
      *(void *)(v19 + 32) = a1;
      *(void *)(v19 + 40) = a2;
      swift_bridgeObjectRetain();
      uint64_t v20 = _convertErrorToNSError(_:)();
      *(void *)(v19 + 96) = sub_1001F6204(0, &qword_100589C50);
      *(void *)(v19 + 104) = sub_1001FCAC8((unint64_t *)&unk_100587930, &qword_100589C50);
      *(void *)(v19 + 72) = v20;
      os_log(_:dso:log:type:_:)();
      swift_errorRelease();

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  id v13 = v22;
  id v14 = [v12 callAlert];

  return v14;
}

uint64_t sub_10029AC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_1005878F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029ACF8(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_1005878F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10029AD58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10029AD68()
{
  return swift_release();
}

unint64_t sub_10029AD70(unint64_t result)
{
  if (result > 0xF) {
    return 0;
  }
  return result;
}

unint64_t sub_10029AD80()
{
  return 0xD00000000000002ELL;
}

Swift::Int sub_10029AD9C()
{
  return sub_1002EFB88(*v0);
}

uint64_t sub_10029ADA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002B7F24();

  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10029ADF0(uint64_t a1)
{
  return sub_1002EFEC8(a1, *v1);
}

unint64_t sub_10029ADF8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10029AD70(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10029AE2C(uint64_t a1)
{
  unint64_t v2 = sub_1002B7F24();

  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_10029AE68(uint64_t a1)
{
  unint64_t v2 = sub_1002B7F24();

  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_10029AEA4()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10029AEC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002B7F24();

  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10029AF18(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask) = a1;
  return swift_release();
}

id sub_10029AF30()
{
  swift_getObjectType();
  id v0 = [objc_allocWithZone((Class)TUConversationLinkDescriptorXPCClientDataSource) init];
  if (qword_100583780 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_100585B80;
  id v2 = objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag());
  sub_1002B5344(v0, v1, [v2 init]);
  sub_1002B83E8();
  swift_deallocPartialClassInstance();
  return v0;
}

uint64_t sub_10029B064()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10029B0D4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_delegate) = a1;
  return swift_unknownObjectRelease();
}

NSObject *sub_10029B0EC()
{
  sub_1001F6204(0, &qword_100587A50);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100490020;
  id v2 = self;
  *(void *)(v1 + 32) = objc_msgSend(v2, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  *(void *)(v1 + 40) = objc_msgSend(v2, "tu_predicateForConversationLinkDescriptorsIsDeleted:", 0);
  specialized Array._endMutation()();
  id v3 = sub_1002D1698();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594C10);
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    sub_100235B18();
    id v12 = (void *)sub_100235BB8();
    sub_1002B825C(5.7779e-34);
    sub_1002B8298();
    *id v12 = v5;

    sub_1002B846C((void *)&_mh_execute_header, v8, v9, "Fetching activated links with predicate %@");
    sub_1001F081C(&qword_100585900);
    sub_1002B83CC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  id v10 = sub_10029B59C(v5);

  return v10;
}

NSObject *sub_10029B318()
{
  id v1 = objc_msgSend(self, "tu_predicateForConversationLinkDescriptorsIsDeleted:", 1);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C10);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    sub_100235B18();
    id v10 = (void *)sub_100235BB8();
    sub_1002B825C(5.7779e-34);
    sub_1002B8298();
    *id v10 = v3;

    sub_1002B846C((void *)&_mh_execute_header, v6, v7, "Fetching deleted links with predicate %@");
    sub_1001F081C(&qword_100585900);
    sub_1002B83CC();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  uint64_t v8 = sub_10029B59C(v3);

  return v8;
}

id sub_10029B4C0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  id v5 = a1;
  a4();

  sub_1001F6204(0, &qword_100587A90);
  Array._bridgeToObjectiveC()();
  sub_1002B83E8();
  swift_bridgeObjectRelease();

  return 0;
}

NSObject *sub_10029B59C(void *a1)
{
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594C10);
  uint64_t v4 = a1;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = "eIdentifier";
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = (uint8_t *)sub_100235B18();
    id v27 = (void *)sub_100235BB8();
    *(_DWORD *)uint64_t v8 = 138412290;
    unint64_t v28 = v4;
    uint64_t v9 = v4;
    uint64_t v7 = "synchronousConversationsForBundleIdentifier" + 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v4;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching links with predicate %@", v8, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  id v10 = *(void **)(v1 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  unint64_t v28 = 0;
  id v11 = [v10 conversationLinkDescriptorsWithPredicate:v4 limit:0 offset:0 error:&v28];
  id v12 = v28;
  if (!v11)
  {
    uint64_t v21 = v28;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v22))
    {
      unint64_t v23 = (uint8_t *)sub_100235B18();
      uint64_t v24 = (void *)sub_100235BB8();
      *(_DWORD *)unint64_t v23 = *((void *)v7 + 206);
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      sub_1002B84F0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Fetch attempt failed with error %@", v23, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    return v20;
  }
  id v13 = v11;
  sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v12;

  if (v14 >> 62)
  {
    sub_1002B8518();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_9;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16) {
    goto LABEL_21;
  }
LABEL_9:
  unint64_t v28 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v16 < 0) {
    __break(1u);
  }
  uint64_t v17 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v14 + 8 * v17 + 32);
    }
    uint64_t v19 = v18;
    ++v17;
    [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v18];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v16 != v17);
  uint64_t v20 = v28;
  swift_bridgeObjectRelease();
  return v20;
}

void sub_10029BA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, uint64_t (*a13)(unint64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v25;
  a22 = v26;
  uint64_t v27 = v23;
  sub_1002545EC();
  sub_1001F6204(0, &qword_100587A50);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v28 = sub_1002B8180();
  *(_OWORD *)(v28 + 16) = xmmword_100490020;
  uint64_t v29 = self;
  *(void *)(v28 + 32) = objc_msgSend(v29, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  *(void *)(v28 + 40) = objc_msgSend(v29, "tu_predicateForConversationLinkDescriptorsIsDeleted:", 0);
  a9 = (void **)v28;
  specialized Array._endMutation()();
  id v30 = sub_1002D1698();
  unint64_t v31 = *(void **)(v27 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v32 = sub_1002393DC();
  *(void *)(v32 + 16) = v24;
  *(void *)(v32 + 24) = v22;
  a13 = sub_1002B77D8;
  a14 = v32;
  a9 = _NSConcreteStackBlock;
  a10 = 1107296256;
  a11 = sub_10029BD4C;
  a12 = &unk_100511B08;
  unint64_t v33 = _Block_copy(&a9);
  id v34 = v30;
  sub_1002B84B8();
  swift_release();
  sub_1002B80D8(v31, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v30);
  _Block_release(v33);

  sub_1002B8324();
}

uint64_t sub_10029BB94(unint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t))
{
  unint64_t v5 = a1;
  if (!a1) {
    goto LABEL_15;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_15:
    a3(v5, a2);
    goto LABEL_16;
  }
LABEL_4:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v5 + 8 * v8 + 32);
    }
    id v10 = v9;
    id v11 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v9];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v8;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v6 != v8);
  swift_bridgeObjectRelease();
  a3((unint64_t)_swiftEmptyArrayStorage, a2);
LABEL_16:

  return swift_bridgeObjectRelease();
}

uint64_t sub_10029BD4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

#error "10029BE50: call analysis failed (funcsize=33)"

void sub_10029BE7C(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1001F6204(0, &qword_100587A90);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_10029BF28()
{
  sub_1001FCC38();
  uint64_t v55 = v1;
  id v56 = (void *)v0;
  uint64_t v53 = v3;
  uint64_t v54 = v2;
  unint64_t v57 = (void *)v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  id v9 = (void *)type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v11 = v10;
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v47 - v16;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1002B84A0(v18, (uint64_t)qword_100594C10);
  uint64_t v19 = *(void (**)(void))(v11 + 16);
  sub_1002B848C();
  v19();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.default.getter();
  BOOL v22 = sub_10026B94C((os_log_type_t)v21);
  uint64_t v58 = v8;
  unsigned int v51 = v6;
  if (v22)
  {
    HIDWORD(v47) = v21;
    os_log_t v48 = v20;
    uint64_t v49 = v19;
    uint64_t v23 = sub_100235B88();
    uint64_t v60 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v50 = v9;
    uint64_t v59 = sub_1002344D8(v24, v25, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void *))(v11 + 8))(v17, v50);
    *(_WORD *)(v23 + 12) = 2080;
    if (v6)
    {
      uint64_t v59 = (uint64_t)v6;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_100587A40);
      uint64_t v26 = String.init<A>(reflecting:)();
      unint64_t v28 = v27;
    }
    else
    {
      unint64_t v28 = 0xE300000000000000;
      uint64_t v26 = 7104878;
    }
    uint64_t v59 = sub_1002344D8(v26, v28, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    os_log_t v29 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, BYTE4(v47), "Link manager asked to generate link for groupUUID %s with invitedHandles: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    uint64_t v19 = v49;
    id v9 = v50;
  }
  else
  {
    (*(void (**)(char *, void *))(v11 + 8))(v17, v9);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = v52;
  sub_1002B848C();
  v19();
  unint64_t v31 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v32 = (v13 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, void *))(v11 + 32))(v36 + v31, v30, v9);
  uint64_t v37 = (void *)(v36 + v32);
  uint64_t v39 = v55;
  unint64_t v38 = v56;
  *uint64_t v37 = v53;
  v37[1] = v39;
  *(void *)(v36 + v33) = v38;
  uint64_t v40 = v57;
  *(void *)(v36 + v34) = v57;
  *(void *)(v36 + v35) = v51;
  *(void *)(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8)) = v54;
  swift_bridgeObjectRetain();
  swift_retain();
  v38;
  id v41 = v40;
  sub_1002AA0F0(v58, (uint64_t)sub_1002B7730, v36, v42, v43, v44, v45, v46, v47, (uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t, void *))v49, v50, v51, v52, v53, v54, v55, (uint64_t)v56, (uint64_t)v57,
    v58,
    v59,
    v60);
  swift_release();
  sub_1001FCC08();
}

void sub_10029C340(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(id, id), uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
  {
    uint64_t v44 = v17;
    uint64_t v45 = a4;
    uint64_t v20 = qword_100583A08;
    id v21 = v17;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1001F5F88(v22, (uint64_t)qword_100594C10);
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, a3, v15);
    id v23 = v21;
    swift_errorRetain();
    id v24 = v23;
    swift_errorRetain();
    unint64_t v25 = Logger.logObject.getter();
    int v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      int v41 = v26;
      uint64_t v40 = v25;
      uint64_t v43 = a5;
      uint64_t v27 = swift_slowAlloc();
      unint64_t v28 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v47 = v42;
      *(_DWORD *)uint64_t v27 = 136315650;
      sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v46 = sub_1002344D8(v29, v30, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      *(_WORD *)(v27 + 12) = 2112;
      uint64_t v46 = (uint64_t)v24;
      id v31 = v24;
      unint64_t v32 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v28 = v44;

      *(_WORD *)(v27 + 22) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v46 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v46 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v33 = 0;
      }
      unint64_t v35 = v45;
      uint64_t v36 = v40;
      v32[1] = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v41, "Refusing generation of a link descriptor for groupUUID %s as one already exists %@ (error: %@", (uint8_t *)v27, 0x20u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);

      swift_errorRelease();
      swift_errorRelease();

      unint64_t v35 = v45;
    }
    id v37 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v24];
    id v38 = sub_1002B20E4(5, 0);
    v35(v37, v38);
  }
  else
  {
    double v34 = sub_1002B2150();
    sub_1002ABD74(a3, a7, a8, 1, a9, (void (*)(void, id))a4, a5, v34);
  }
}

void sub_10029C9B4(uint64_t a1, void *a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a5);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain_n();
  id v14 = a2;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = v10;
    uint64_t v18 = v17;
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v35 = v28;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v29 = (char *)(v18 + 4);
    uint64_t v30 = a3;
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    unint64_t v32 = a4;
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    swift_bridgeObjectRetain();
    uint64_t v19 = Set.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1002344D8(v19, v21, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2112;
    uint64_t v34 = (uint64_t)v14;
    id v22 = v14;
    uint64_t v29 = v12;
    id v23 = v15;
    id v24 = v22;
    a4 = v32;
    a3 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v14;

    _os_log_impl((void *)&_mh_execute_header, v23, v16, "Link manager asked to generate link with invitedHandles: %s, originatorHandle: %@", (uint8_t *)v18, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v31;
    swift_slowDealloc();

    uint64_t v12 = v29;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  UUID.init()();
  double v25 = sub_1002B2150();
  _Block_copy(a5);
  sub_1002AA578((unint64_t)v12, v14, a1, 1, a3, a4, (void (**)(void, void, void *))a5, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  _Block_release(a5);
  _Block_release(a5);
}

void sub_10029CE7C(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594C10);
  id v12 = a1;
  uint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (sub_1002B81D0(v14))
  {
    uint64_t v15 = (_DWORD *)sub_100235B18();
    aBlock[0] = v12;
    uint64_t v27 = (void *)sub_100235BB8();
    *uint64_t v15 = 138412290;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v12;

    sub_1002B81EC((void *)&_mh_execute_header, v17, v18, "Link manager asked to generate TUConversationLinkDescriptor for received TUConversationLink %@ (not locally owned)");
    sub_1001F081C(&qword_100585900);
    sub_1002B821C();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  NSString v19 = [v12 pseudonym];
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v20 = objc_msgSend(self, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v19);

  unint64_t v21 = *(void **)&v6[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  uint64_t v22 = sub_100246A38();
  *(void *)(v22 + 16) = v12;
  *(void *)(v22 + 24) = a4;
  *(void *)(v22 + 32) = a5;
  *(unsigned char *)(v22 + 40) = a3 & 1;
  *(void *)(v22 + 48) = v6;
  aBlock[4] = sub_1002B75F4;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10029BD4C;
  uint64_t aBlock[3] = &unk_1005119F0;
  id v23 = _Block_copy(aBlock);
  id v24 = v12;
  id v25 = v20;
  swift_retain();
  uint64_t v26 = v6;
  swift_release();
  [v21 conversationLinkDescriptorsWithPredicate:v25 limit:1 offset:0 completion:v23];
  _Block_release(v23);
}

uint64_t sub_10029D158(unint64_t a1, uint64_t a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v119 = a7;
  int v120 = a6;
  uint64_t v126 = a5;
  uint64_t v127 = a4;
  uint64_t v9 = sub_1001F081C(&qword_100584B40);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v12 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)&v114 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v121 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v114 - v20;
  __chkstk_darwin(v19);
  id v122 = (char *)&v114 - v22;
  uint64_t v23 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v23 - 8);
  id v25 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v125 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v124 = (char *)&v114 - v30;
  id v31 = [a3 originatorHandle];
  if (!v31) {
    goto LABEL_24;
  }
  id v123 = v31;
  uint64_t v118 = v15;
  id v32 = [a3 groupUUID];
  if (!v32)
  {
    sub_1001F0530((uint64_t)v25, 1, 1, v26);
    goto LABEL_18;
  }
  uint64_t v33 = v32;
  uint64_t v117 = v16;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v125 + 32);
  v34(v25, v29, v26);
  sub_1001F0530((uint64_t)v25, 0, 1, v26);
  if (sub_1001F758C((uint64_t)v25, 1, v26) == 1)
  {
LABEL_18:

    uint64_t v54 = (uint64_t *)&unk_100585580;
    uint64_t v55 = (uint64_t)v25;
LABEL_23:
    sub_100235804(v55, v54);
LABEL_24:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_1001F5F88(v56, (uint64_t)qword_100594C10);
    unint64_t v57 = a3;
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      unint64_t v61 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 138412290;
      uint64_t aBlock = (void **)&v57->isa;
      NSString v62 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v61 = v57;

      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received link %@ missing required field", v60, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v58 = v57;
    }

    sub_1002B6420();
    uint64_t v63 = swift_allocError();
    *uint64_t v64 = 13;
    v127(0, v63);
    return swift_errorRelease();
  }
  v34(v124, v25, v26);
  id v35 = [a3 creationDate];
  if (!v35)
  {
    sub_1001F0530((uint64_t)v14, 1, 1, v118);
    goto LABEL_20;
  }
  uint64_t v36 = v35;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = v118;
  id v38 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
  v38(v14, v21, v118);
  sub_1001F0530((uint64_t)v14, 0, 1, v37);
  if (sub_1001F758C((uint64_t)v14, 1, v37) == 1)
  {
LABEL_20:

    (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v26);
    uint64_t v54 = &qword_100584B40;
    uint64_t v55 = (uint64_t)v14;
    goto LABEL_23;
  }
  v38(v122, v14, v37);
  id v39 = [a3 expirationDate];
  uint64_t v40 = v37;
  if (!v39)
  {
    sub_1001F0530((uint64_t)v12, 1, 1, v37);
    goto LABEL_22;
  }
  int v41 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v38(v12, v21, v40);
  sub_1001F0530((uint64_t)v12, 0, 1, v40);
  if (sub_1001F758C((uint64_t)v12, 1, v40) == 1)
  {
LABEL_22:

    (*(void (**)(char *, uint64_t))(v117 + 8))(v122, v40);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v26);
    uint64_t v54 = &qword_100584B40;
    uint64_t v55 = (uint64_t)v12;
    goto LABEL_23;
  }
  uint64_t v42 = v121;
  v38(v121, v12, v40);
  uint64_t v43 = sub_1002B4A18(a3);
  if (!v43)
  {

    uint64_t v66 = *(void (**)(char *, uint64_t))(v117 + 8);
    v66(v42, v40);
    v66(v122, v40);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v26);
    goto LABEL_24;
  }
  uint64_t v44 = v43;
  uint64_t v45 = swift_allocObject();
  uint64_t v115 = (id *)(v45 + 16);
  uint64_t v116 = v45;
  if (!a1)
  {
LABEL_39:
    sub_1001F6204(0, &qword_100587A48);
    id v77 = sub_10029E0A4((uint64_t)v123);
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v29, v124, v26);
    id v78 = v77;
    id v79 = [a3 pseudonym];
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v81;

    id v83 = [a3 publicKey];
    uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v86 = v85;

    id v87 = objc_allocWithZone((Class)TUMutableConversationLinkDescriptor);
    id v88 = sub_100341E38((uint64_t)v29, v78, v80, v82, v84, v86);
    uint64_t v53 = v115;
    *uint64_t v115 = v88;
    [v88 setActivated:1];
    id v89 = *v53;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v89 setCreationDate:isa];

    id v51 = *v53;
    char v52 = v120;
    goto LABEL_40;
  }
  if (!(a1 >> 62))
  {
    uint64_t v46 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v46) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
LABEL_12:
  sub_1002DE19C(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v47 = *(id *)(a1 + 32);
  }
  os_log_t v48 = v47;
  swift_bridgeObjectRelease();
  [v48 mutableCopy];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_100587A10);
  char v49 = swift_dynamicCast();
  uint64_t v50 = v118;
  if ((v49 & 1) == 0) {
    goto LABEL_39;
  }
  id v51 = v134;
  char v52 = v120;
  if (v120)
  {
    uint64_t v53 = v115;
    *uint64_t v115 = v134;
LABEL_40:
    id v91 = v51;
    Class v92 = Date._bridgeToObjectiveC()().super.isa;
    [v91 setExpirationDate:v92];

    sub_1002B4AAC(v44, *v53);
    id v93 = *v53;
    sub_1002B4C14(a3, (SEL *)&selRef_linkName);
    if (v94)
    {
      NSString v95 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v95 = 0;
    }
    uint64_t v96 = v126;
    uint64_t v97 = v119;
    uint64_t v98 = v116;
    [v93 setName:v95];

    uint64_t v99 = (void *)swift_allocObject();
    v99[2] = v127;
    v99[3] = v96;
    v99[4] = v98;
    if (v52)
    {
      swift_beginAccess();
      uint64_t v100 = *(void **)(v98 + 16);
      swift_retain();
      swift_retain();
      id v101 = v100;
      sub_10029E3C0((uint64_t)v101);

      unsigned int v102 = *(void **)(v97 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = xmmword_10048F560;
      uint64_t v104 = *(void **)(v98 + 16);
      *(void *)(v103 + 32) = v104;
      uint64_t aBlock = (void **)v103;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      id v105 = v104;
      v106.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v132 = sub_1002B7640;
      uint64_t v133 = v99;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v129 = 1107296256;
      id v130 = sub_100317DEC;
      int v131 = &unk_100511A90;
      unint64_t v107 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v102 addOrUpdateConversationLinkDescriptors:v106.super.isa completion:v107];
    }
    else
    {
      uint64_t v108 = *(void **)(v97 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16) = xmmword_10048F560;
      swift_beginAccess();
      uint64_t v110 = *(void **)(v98 + 16);
      *(void *)(v109 + 32) = v110;
      uint64_t aBlock = (void **)v109;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_retain();
      swift_retain();
      id v111 = v110;
      v106.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v132 = sub_1002B7640;
      uint64_t v133 = v99;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v129 = 1107296256;
      id v130 = sub_100317DEC;
      int v131 = &unk_100511A68;
      unint64_t v107 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v108 addConversationLinkDescriptors:v106.super.isa completion:v107];
    }
    _Block_release(v107);

    sub_1003399A8();
    swift_release();
    uint64_t v112 = v118;
    NSSet v113 = *(void (**)(char *, uint64_t))(v117 + 8);
    v113(v121, v118);
    v113(v122, v112);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v26);
    return swift_release();
  }
  swift_bridgeObjectRelease();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v67 = type metadata accessor for Logger();
  sub_1001F5F88(v67, (uint64_t)qword_100594C10);
  id v68 = v51;
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = (uint8_t *)swift_slowAlloc();
    id v72 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 138412290;
    uint64_t aBlock = (void **)&v68->isa;
    id v73 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v72 = v68;

    _os_log_impl((void *)&_mh_execute_header, v69, v70, "%@ already existed and isUpdate: NO, ignoring", v71, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    uint64_t v50 = v118;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v69 = v68;
  }

  sub_1002B6420();
  uint64_t v74 = swift_allocError();
  *id v75 = 5;
  v127(0, v74);
  swift_errorRelease();

  uint64_t v76 = *(void (**)(char *, uint64_t))(v117 + 8);
  v76(v121, v50);
  v76(v122, v50);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v26);
  return swift_deallocUninitializedObject();
}

id sub_10029E0A4(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  if (qword_100583AA8 != -1) {
    a1 = swift_once();
  }
  sub_10037B4E8(a1);
  uint64_t v2 = sub_10037B880();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithIdentifier:v4 revision:v2 handle:v1];

  return v5;
}

void sub_10029E178(char a1, uint64_t a2, void (*a3)(id, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)(a5 + 16);
  if (a1)
  {
    swift_beginAccess();
    id v8 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:*v7];
    a3(v8, a2);
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1001F5F88(v10, (uint64_t)qword_100594C10);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_beginAccess();
      uint64_t v16 = *(void **)(a5 + 16);
      id v14 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to persist link %@", v13, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    a3(0, a2);
  }
}

void sub_10029E3C0(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_100583AA8 != -1) {
    a1 = swift_once();
  }
  uint64_t v3 = sub_10037B4E8(a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10037B880();
  id v7 = [v2 originator];
  id v8 = [v7 handle];

  id v9 = objc_allocWithZone((Class)TUConversationLinkOriginator);
  id v10 = sub_100341F28(v3, v5, v6, v8);
  [v2 setOriginator:v10];
}

void sub_10029E59C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = sub_1002B8180();
  *(_OWORD *)(v8 + 16) = xmmword_100490020;
  id v9 = self;
  *(void *)(v8 + 32) = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  *(void *)(v8 + 40) = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsIsDeleted:", 0);
  aBlock[0] = v8;
  specialized Array._endMutation()();
  uint64_t v18 = v8;
  if (a1)
  {
    id v10 = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithPrivateKey:", 0);
    id v11 = [self notPredicateWithSubpredicate:v10];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  sub_1001F6204(0, &qword_100587A50);
  id v12 = sub_1002B82D8();
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v14 = sub_1002393DC();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  aBlock[4] = sub_1002B75AC;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10029BD4C;
  uint64_t aBlock[3] = &unk_1005119A0;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v12;
  sub_1002B84B8();
  swift_release();
  sub_1002B80D8(v13, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v12);
  _Block_release(v15);
}

uint64_t sub_10029E7E4(id *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t))
{
  unint64_t v5 = (unint64_t)a1;
  if (!a1) {
    goto LABEL_13;
  }
  id v12 = &_swiftEmptySetSingleton;
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    unint64_t v5 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_13:
    a3(v5, a2);
    goto LABEL_14;
  }
LABEL_4:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v5 + 8 * v8 + 32);
    }
    id v10 = v9;
    ++v8;
    sub_1002E03CC((uint64_t)&v11, (uint64_t)[objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v9]);
  }
  while (v6 != v8);
  swift_bridgeObjectRelease();
  a3((unint64_t)v12, a2);
LABEL_14:

  return swift_bridgeObjectRelease();
}

void sub_10029E9E4(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1001F6204(0, &qword_100587A90);
    sub_100210D5C((unint64_t *)&unk_100587A98, &qword_100587A90);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_10029EABC()
{
  sub_1002B8284();
  uint64_t v20 = v1;
  uint64_t v21 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  id v11 = self;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = objc_msgSend(v11, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v12);

  uint64_t v14 = *(void **)&v0[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  uint64_t v15 = (void *)sub_100246A38();
  void v15[2] = v0;
  void v15[3] = v6;
  void v15[4] = v4;
  void v15[5] = v10;
  void v15[6] = v8;
  void v19[4] = sub_1002B7504;
  v19[5] = v15;
  v19[0] = _NSConcreteStackBlock;
  sub_1002B8174();
  void v19[2] = sub_10029BD4C;
  v19[3] = &unk_100511900;
  id v16 = _Block_copy(v19);
  id v17 = v13;
  uint64_t v18 = v0;
  sub_1002084D8(v6);
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v14, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", v17, 0, 0, v16, v19[0]);
  _Block_release(v16);

  sub_1002B8348();
}

void sub_10029EC20(unint64_t a1, uint64_t a2, char *a3, void (*a4)(void, void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_9;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
    {
LABEL_4:
      sub_1002DE19C(0, (a1 & 0xC000000000000001) == 0, a1);
      if ((a1 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(a1 + 32);
      }
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      [v19 mutableCopy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F6204(0, (unint64_t *)&unk_100587A10);
      if (swift_dynamicCast())
      {
        id v20 = v34;
        [v34 setActivated:1];
        Date.init()();
        v21.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v31 = a6;
        Class isa = v21.super.isa;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        [v20 setCreationDate:isa];

        sub_10029E3C0((uint64_t)[v20 setDeletionDate:0]);
        id v32 = *(id *)&a3[OBJC_IVAR___CSDConversationLinkManager_dataSource];
        sub_1001F081C((uint64_t *)&unk_100584DD0);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_10048F560;
        *(void *)(v23 + 32) = v20;
        aBlock[0] = v23;
        specialized Array._endMutation()();
        sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
        id v24 = v20;
        Class v25 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v26 = (void *)swift_allocObject();
        v26[2] = a4;
        void v26[3] = a5;
        uint64_t v27 = v31;
        v26[4] = a3;
        v26[5] = v27;
        void v26[6] = a7;
        aBlock[4] = sub_1002B757C;
        void aBlock[5] = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100317DEC;
        uint64_t aBlock[3] = &unk_100511950;
        uint64_t v28 = _Block_copy(aBlock);
        sub_1002084D8((uint64_t)a4);
        uint64_t v29 = a3;
        swift_bridgeObjectRetain();
        swift_release();
        [v32 addOrUpdateConversationLinkDescriptors:v25 completion:v28];
        _Block_release(v28);

        return;
      }

LABEL_9:
      if (!a4) {
        return;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  if (a4) {
LABEL_10:
  }
    a4(0, 0);
}

uint64_t sub_10029EFD4(char a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v19[1] = a7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)v19 - v15;
  if (a3) {
    a3(a1 & 1, a2);
  }
  Date.init()();
  sub_1002B2150();
  Date.addingTimeInterval(_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  sub_1002A47D0();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v16, v10);
  if (a1) {
    return sub_10033991C();
  }
  return result;
}

void sub_10029F23C()
{
  sub_1001FCC38();
  uint64_t v108 = v1;
  id v105 = (id)v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v8 = sub_100202384(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v99 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (void (*)(void))((char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v90 - v18;
  __chkstk_darwin(v17);
  NSDate v21 = (char *)&v90 - v20;
  uint64_t v107 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  uint64_t v100 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B8138();
  __chkstk_darwin(v26);
  NSArray v106 = (char *)&v90 - v27;
  uint64_t v28 = self;
  uint64_t v101 = v6;
  uint64_t v102 = v4;
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = objc_msgSend(v28, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v29);

  uint64_t v103 = v0;
  uint64_t v31 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  v111[0] = 0;
  id v109 = v30;
  id v32 = [v31 conversationLinkDescriptorsWithPredicate:v30 limit:0 offset:0 error:v111];
  id v33 = v111[0];
  p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate + 40);
  if (!v32)
  {
    id v44 = v111[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_27;
  }
  id v35 = v32;
  id v98 = v31;
  uint64_t v36 = sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
  unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v38 = v33;

  if (!(v37 >> 62))
  {
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    id v45 = v109;
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v89) {
    goto LABEL_33;
  }
LABEL_4:
  sub_1002DE19C(0, (v37 & 0xC000000000000001) == 0, v37);
  if ((v37 & 0xC000000000000001) != 0) {
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v39 = *(id *)(v37 + 32);
  }
  id v104 = v39;
  swift_bridgeObjectRelease();
  [v104 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_100587A10);
  if ((swift_dynamicCast() & 1) == 0)
  {

    id v45 = v104;
LABEL_34:

    goto LABEL_35;
  }
  id v40 = v110;
  [v110 setActivated:1];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v96 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v97 = v23 + 8;
  sub_10021EC0C();
  v42();
  [v40 setCreationDate:isa];

  [v40 setDeletionDate:0];
  sub_1002B7464((uint64_t)v105, (uint64_t)v10, (uint64_t *)&unk_100585580);
  if (sub_1001F758C((uint64_t)v10, 1, v11) != 1)
  {
    uint64_t v46 = v99;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v21, v10, v11);
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_1002B84A0(v47, (uint64_t)qword_100594C10);
    sub_10024640C();
    v48();
    id v105 = v40;
    id v49 = v40;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (sub_1002B81D0(v51))
    {
      uint64_t v52 = sub_100235B88();
      int v93 = (int)v10;
      uint64_t v53 = v52;
      Class v92 = (void *)swift_slowAlloc();
      v111[0] = v92;
      *(_DWORD *)uint64_t v53 = 136315394;
      id v54 = objc_msgSend(v49, "groupUUID", v53 + 4);
      id v95 = v49;
      uint64_t v55 = v46;
      id v56 = v54;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v91 = v50;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v94 = v36;
      unint64_t v59 = v58;
      uint64_t v60 = *(void (**)(void))(v55 + 8);
      uint64_t v99 = (v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      sub_10021EC0C();
      v60();
      id v110 = (id)sub_1002344D8(v57, v59, (uint64_t *)v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v53 + 12) = 2080;
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      id v110 = (id)sub_1002344D8(v61, v62, (uint64_t *)v111);
      id v16 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10021EC0C();
      v60();
      id v49 = v95;
      uint64_t v50 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v93, "In activating link, updating the groupUUID from %s to %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      id v16 = *(void (**)(void))(v46 + 8);
      ((void (*)(char *, uint64_t))v16)(v19, v11);
    }

    Class v63 = UUID._bridgeToObjectiveC()().super.isa;
    [v49 setGroupUUID:v63];

    uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v16)(v21, v11);
    id v40 = v105;
    if (!v108) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  uint64_t v43 = sub_100235804((uint64_t)v10, (uint64_t *)&unk_100585580);
  if (v108)
  {
LABEL_18:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_1002B8144(v64, (uint64_t)qword_100594C10);
    id v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (sub_10027D4F8(v66))
    {
      id v105 = v40;
      uint64_t v67 = (uint8_t *)sub_100235B18();
      v111[0] = (id)sub_100202470();
      *(_DWORD *)uint64_t v67 = 136315138;
      uint64_t v99 = (uint64_t)(v67 + 4);
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
      swift_bridgeObjectRetain();
      id v40 = v105;
      uint64_t v68 = Set.description.getter();
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      id v110 = (id)sub_1002344D8(v68, v70, (uint64_t *)v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002B8120();
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v16, "In activating link, setting invitedHandles to %s", v67, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
      sub_1002B8120();
    }

    uint64_t v71 = sub_1002B8460();
    sub_1002B4B64(v71, v72);
  }
LABEL_24:
  sub_10029E3C0(v43);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_10048F560;
  *(void *)(v73 + 32) = v40;
  v111[0] = (id)v73;
  specialized Array._endMutation()();
  id v74 = v40;
  Array._bridgeToObjectiveC()();
  sub_1002544EC();
  v111[0] = 0;
  unsigned int v75 = [v98 addOrUpdateConversationLinkDescriptors:v111 error:v111];

  if (v75)
  {
    id v76 = v111[0];
    sub_10033991C();
    id v77 = v100;
    Date.init()();
    sub_1002B2150();
    id v78 = v106;
    Date.addingTimeInterval(_:)();
    id v79 = v77;
    uint64_t v80 = v107;
    uint64_t v81 = v96;
    v96(v79, v107);
    sub_1002A47D0();
    v81(v78, v80);
    [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v74];

    id v45 = v104;
    goto LABEL_34;
  }
  id v82 = v111[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate.opt_inst_meths;
LABEL_27:
  if (p_opt_inst_meths[321] != (__objc2_meth_list *)-1) {
    swift_once();
  }
  uint64_t v83 = type metadata accessor for Logger();
  sub_1002B84A0(v83, (uint64_t)qword_100594C10);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v84, v85))
  {
    unint64_t v86 = (uint8_t *)sub_100235B18();
    id v87 = (void *)sub_100235BB8();
    *(_DWORD *)unint64_t v86 = 138412290;
    swift_errorRetain();
    id v88 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v111[0] = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v87 = v88;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Exception caught when trying to activate link %@", v86, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    swift_errorRelease();
    id v45 = v109;
    goto LABEL_34;
  }

  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

LABEL_35:
  sub_1001FCC08();
}

void sub_10029FFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, uint64_t (*a13)(uint64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = v22;
  uint64_t v27 = v26;
  uint64_t v28 = *(void **)&v25[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  id v29 = sub_1002A00B4();
  uint64_t v30 = sub_1002393DC();
  *(void *)(v30 + 16) = v25;
  *(void *)(v30 + 24) = v27;
  a13 = sub_1002B745C;
  a14 = v30;
  a9 = _NSConcreteStackBlock;
  sub_1002B8174();
  a11 = sub_1002A05DC;
  a12 = &unk_1005118B0;
  uint64_t v31 = _Block_copy(&a9);
  id v32 = v25;
  id v33 = v27;
  swift_release();
  [v28 conversationLinkDescriptorCountWithPredicate:v29 completion:v31];
  _Block_release(v31);

  sub_1002B8324();
}

id sub_1002A00B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F6204(0, &qword_100587A50);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100492010;
  uint64_t v7 = self;
  *(void *)(v6 + 32) = objc_msgSend(v7, "tu_predicateForConversationLinkDescriptorsWithActivated:", 0);
  *(void *)(v6 + 40) = objc_msgSend(v7, "tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:", v1);
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v9 = objc_msgSend(v7, "tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:", isa);

  *(void *)(v6 + 48) = v9;
  v11[1] = v6;
  specialized Array._endMutation()();
  return sub_1002D1698();
}

#error "1002A0470: call analysis failed (funcsize=211)"

void sub_1002A05DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

#error "1002A0680: call analysis failed (funcsize=22)"

void sub_1002A06AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, void (*a13)(int64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = v22;
  char v27 = v26;
  id v29 = v28;
  uint64_t v30 = *(void **)&v25[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  id v31 = sub_1002A00B4();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v25;
  *(unsigned char *)(v32 + 24) = v27;
  *(void *)(v32 + 32) = v29;
  a13 = sub_1002B7448;
  a14 = v32;
  a9 = _NSConcreteStackBlock;
  sub_1002B8174();
  a11 = sub_1002A05DC;
  a12 = &unk_100511810;
  id v33 = _Block_copy(&a9);
  id v34 = v25;
  id v35 = v29;
  swift_release();
  [v30 conversationLinkDescriptorCountWithPredicate:v31 completion:v33];
  _Block_release(v33);

  sub_1002B8324();
}

void sub_1002A07B0(int64_t a1, uint64_t a2, char *a3, char a4, void *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() == a1)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594C10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)id v16 = 138412290;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
        unint64_t v26 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        unint64_t v26 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v18 = 0;
      }
      *uint64_t v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v15, "Fetching conversation link descriptor count failed with error %@", v16, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_18;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if ((uint64_t)sub_1002B22F4() > a1 || (a4 & 1) != 0 && sub_1002B22F4() == a1)
    {
      UUID.init()();
      sub_1002AB1C4((unint64_t)v13, a5, 0, 0, 0, a3, (double)(unint64_t)[*(id *)&a3[OBJC_IVAR___CSDConversationLinkManager_serverBag] inactiveLinkPseudonymExpiry]);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return;
    }
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_1001F5F88(v19, (uint64_t)qword_100594C10);
    uint64_t v20 = a3;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134218240;
      unint64_t v26 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2048;
      unint64_t v26 = sub_1002B22F4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v25, v21, "Count of inactive links ({public}%ld) reached the cache limit ({public}%ld); not provisioning another.",
        (uint8_t *)v22,
        0x16u);
LABEL_18:
      swift_slowDealloc();

      return;
    }
  }
  uint64_t v23 = v25;
}

void sub_1002A0C10(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1001F5F88(v3, (uint64_t)qword_100594C10);
    id v4 = a1;
    swift_errorRetain();
    id v5 = v4;
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412546;
      if (a1) {
        id v9 = v5;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = a1;

      *(_WORD *)(v7 + 12) = 2112;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v8[1] = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Failed to provision inactive link %@ %@", (uint8_t *)v7, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_14;
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_1001F5F88(v10, (uint64_t)qword_100594C10);
  oslog = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v12))
  {

LABEL_14:

    return;
  }
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 138412290;
  if (a1) {
    os_log_type_t v15 = oslog;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v14 = a1;

  _os_log_impl((void *)&_mh_execute_header, v11, v12, "Provisioned inactive link %@", v13, 0xCu);
  sub_1001F081C(&qword_100585900);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
}

#error "1002A1074: call analysis failed (funcsize=24)"

void sub_1002A10A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, void (*a13)(unint64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  id v29 = *(void **)(v22 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v30 = sub_1002A00B4();
  uint64_t v31 = sub_1002393DC();
  *(void *)(v31 + 16) = v28;
  *(void *)(v31 + 24) = v26;
  a13 = sub_1002B7408;
  a14 = v31;
  a9 = _NSConcreteStackBlock;
  sub_1002B8174();
  a11 = sub_10029BD4C;
  a12 = &unk_1005117C0;
  uint64_t v32 = _Block_copy(&a9);
  swift_retain();
  swift_release();
  [v29 conversationLinkDescriptorsWithPredicate:v30 limit:0 offset:0 completion:v32];
  _Block_release(v32);

  sub_1002B8324();
}

void sub_1002A119C(unint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v20 = 0;
  if (!a1) {
    goto LABEL_9;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    id v9 = 0;
    goto LABEL_10;
  }
LABEL_4:
  sub_1002DE19C(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a1 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v8];

  uint64_t v20 = v9;
LABEL_10:
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_1001F5F88(v10, (uint64_t)qword_100594C10);
  id v11 = v9;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v19 = a2;
    uint64_t v14 = a3;
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v15 = 138412290;
    if (v9) {
      id v17 = v11;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v16 = v9;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Asked for inactive link, returning: %@", v15, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v14;
    a2 = v19;
  }
  else
  {
  }
  swift_beginAccess();
  id v18 = v20;
  a3(v20, a2);
}

#error "1002A14F8: call analysis failed (funcsize=38)"

void sub_1002A1528()
{
  sub_1002B8284();
  uint64_t v21 = v1;
  uint64_t v22 = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v4 = sub_1002A00B4();
  id v20 = 0;
  id v5 = [v3 conversationLinkDescriptorsWithPredicate:v4 limit:0 offset:0 error:&v20];

  id v6 = v20;
  if (!v5)
  {
    id v12 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_18;
  }
  sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v6;

  if (v7 >> 62)
  {
    sub_100254354();
    _CocoaArrayWrapper.endIndex.getter();
    sub_1002544EC();
    goto LABEL_4;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    id v9 = (void *)(v7 & 0xC000000000000001);
    sub_1002DE19C(0, (v7 & 0xC000000000000001) == 0, v7);
    if ((v7 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v7 + 32);
    }
    sub_1002544EC();
    id v11 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v7 & 0xC000000000000001];

    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  id v11 = 0;
LABEL_10:
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C10);
  id v14 = v11;
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (sub_10026B94C(v16))
  {
    id v17 = (_DWORD *)sub_100235B18();
    id v18 = (void *)sub_100235BB8();
    *id v17 = 138412290;
    if (v11)
    {
      id v20 = v14;
      id v19 = v14;
    }
    else
    {
      id v20 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v11;

    sub_1002B839C((void *)&_mh_execute_header, v15, v16, "Asked for inactive link, returning: %@");
    sub_1001F081C(&qword_100585900);
    sub_1002B80F4();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
LABEL_18:
  sub_100254544();
}

void sub_1002A185C()
{
  sub_1002B8284();
  uint64_t v20 = v1;
  uint64_t v21 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  id v10 = self;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v11);

  if (v9)
  {
    sub_1001F081C((uint64_t *)&unk_100584DD0);
    uint64_t v13 = sub_1002B8180();
    *(_OWORD *)(v13 + 16) = xmmword_100490020;
    *(void *)(v13 + 32) = v12;
    id v14 = v12;
    *(void *)(v13 + 40) = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
    v19[0] = v13;
    specialized Array._endMutation()();
    sub_1001F6204(0, &qword_100587A50);
    id v12 = sub_1002B82D8();
  }
  os_log_type_t v15 = *(void **)(v3 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v16 = sub_1002393DC();
  *(void *)(v16 + 16) = v7;
  *(void *)(v16 + 24) = v5;
  void v19[4] = sub_1002B80BC;
  v19[5] = v16;
  v19[0] = _NSConcreteStackBlock;
  sub_1002B8174();
  void v19[2] = sub_10029BD4C;
  v19[3] = &unk_100511770;
  id v17 = _Block_copy(v19);
  id v18 = v12;
  sub_1002B84B8();
  swift_release();
  sub_1002B80D8(v15, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v12);

  _Block_release(v17);
  sub_1002B8348();
}

void sub_1002A1AE4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v2 = sub_100235AE0();
  id v5 = v3;
  v4(v2);
}

void *sub_1002A1B50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *(void *)(a1 + 16);
  NSString v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v26 = v1;
    id v30 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v12 = self;
    id v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v28 = v14;
    id v29 = (void *)v12;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v27 = *(void *)(v13 + 56);
    NSString v11 = (void *)v13;
    do
    {
      v28(v9, v15, v3);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v17 = objc_msgSend(v29, "tu_predicateForConversationLinkDescriptorsWithGroupUUID:", isa);

      (*(void (**)(uint64_t, uint64_t))(v13 - 8))(v9, v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      sub_1002B8460();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += v27;
      --v10;
    }
    while (v10);
    sub_1001F6204(0, &qword_100587A50);
    id v18 = sub_10036F610();
    id v19 = *(void **)(v26 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
    id v30 = 0;
    id v20 = [v19 conversationLinkDescriptorsWithPredicate:v18 limit:0 offset:0 error:&v30];
    id v21 = v30;
    if (v20)
    {
      uint64_t v22 = v20;
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      NSString v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v23 = v21;
    }
    else
    {
      uint64_t v24 = v30;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return v11;
}

void sub_1002A1EDC()
{
  uint64_t v1 = v0;
  if ([*(id *)&v0[OBJC_IVAR___CSDConversationLinkManager_service] hasActiveAccounts])
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = sub_1002466F4(v2, (uint64_t)qword_100594C10);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)sub_100246544();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "validateAllLinks: Checking for invalid links", v5, 2u);
      sub_1001F63CC();
    }

    uint64_t v6 = *(void **)&v1[OBJC_IVAR___CSDConversationLinkManager_dataSource];
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    aBlock[4] = sub_1002B7158;
    void aBlock[5] = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10029BD4C;
    uint64_t aBlock[3] = &unk_100511608;
    uint64_t v8 = _Block_copy(aBlock);
    uint64_t v9 = v1;
    swift_release();
    sub_1002B80D8(v6, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", 0);
    _Block_release(v8);
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    oslog = sub_1002466F4(v10, (uint64_t)qword_100594C10);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)sub_100246544();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "validateAllLinks: No active accounts on the service, skipping link validation for now", v12, 2u);
      sub_1001F63CC();
    }
  }
}

void sub_1002A212C(uint64_t a1, char *a2, void *a3)
{
  unint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v87[-v12];
  __chkstk_darwin(v11);
  id v17 = &v87[-v16];
  if (a1 && !a2)
  {
    int v93 = v15;
    uint64_t v94 = v14;
    Date.init(timeIntervalSinceNow:)();
    uint64_t v101 = (uint64_t)_swiftEmptyArrayStorage;
    unint64_t v96 = v8;
    uint64_t v95 = v9;
    uint64_t v97 = v17;
    os_log_t v91 = a3;
    Class v92 = (void (*)(void, void))v13;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0) {
        unint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = a1;
      }
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v24 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v99 = a1;
    if (v24)
    {
      if (v24 < 1)
      {
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v25 = 0;
      unint64_t v26 = a1 & 0xC000000000000001;
      unint64_t v98 = a1 & 0xC000000000000001;
      do
      {
        if (v26) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(a1 + 8 * v25 + 32);
        }
        uint64_t v28 = v27;
        id v29 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v27];
        if ([v29 isLocallyCreated])
        {
          id v30 = v28;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          a1 = (uint64_t)v99;
          unint64_t v26 = v98;
        }
        ++v25;
      }
      while (v24 != v25);
    }
    swift_bridgeObjectRelease();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    uint64_t v32 = sub_1001F5F88(v31, (uint64_t)qword_100594C10);
    uint64_t v33 = v95;
    id v34 = *(void (**)(void (*)(void, void), unsigned char *, unint64_t))(v95 + 16);
    id v35 = v92;
    uint64_t v36 = v97;
    unint64_t v4 = v96;
    v34(v92, v97, v96);
    unint64_t v98 = v32;
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v90 = v34;
      uint64_t v41 = v40;
      uint64_t v89 = (void *)swift_slowAlloc();
      uint64_t aBlock = v89;
      *(_DWORD *)uint64_t v41 = 136315394;
      sub_1002B6568(&qword_100587A20, (void (*)(uint64_t))&type metadata accessor for Date);
      int v88 = v39;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v108 = sub_1002344D8(v42, v43, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Class v92 = *(void (**)(void, void))(v33 + 8);
      v92(v35, v4);
      *(_WORD *)(v41 + 12) = 2080;
      swift_beginAccess();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_bridgeObjectRetain();
      uint64_t v44 = Array.description.getter();
      unint64_t v46 = v45;
      uint64_t v36 = v97;
      swift_bridgeObjectRelease();
      uint64_t v47 = v44;
      uint64_t v33 = v95;
      unint64_t v108 = sub_1002344D8(v47, v46, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v88, "validateAllLinks: Links expiration must be newer than date %s for descriptors: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v34 = v90;
      swift_slowDealloc();
    }
    else
    {
      Class v92 = *(void (**)(void, void))(v33 + 8);
      v92(v35, v4);
    }

    os_log_t v48 = v91;
    swift_beginAccess();
    uint64_t v49 = v101;
    uint64_t v50 = v94;
    v34((void (*)(void, void))v94, v36, v4);
    unint64_t v51 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v52 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t (*)(id *), unint64_t))(v33 + 32))(v52 + v51, v50, v4);
    unint64_t v108 = v49;
    id v109 = sub_1002B71E4;
    uint64_t v110 = v52;
    *(void *)(swift_allocObject() + 16) = v48;
    swift_bridgeObjectRetain();
    a2 = v48;
    sub_1001F081C((uint64_t *)&unk_100587A60);
    LazyFilterSequence.filter(_:)();
    swift_release();
    unint64_t v3 = (unint64_t)aBlock;
    uint64_t v53 = (uint64_t (*)(id *))v103;
    a1 = (uint64_t)v104;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v54 = sub_1002B6140(v3, v53);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v55 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v55 = *(char **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v94 = v53;
    if ((char *)v54 != v55)
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      id v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        int v93 = a2;
        uint64_t v59 = v58;
        unint64_t v108 = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 134218242;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v60 = (char *)sub_1002B6140(v3, v53);
        uint64_t v61 = (void *)sub_1002B625C(v60, v55, v3, (uint64_t (*)(char **))v53);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        uint64_t aBlock = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        *(_WORD *)(v59 + 12) = 2080;
        uint64_t aBlock = (void *)v3;
        uint64_t v103 = (uint64_t)v53;
        id v104 = (void (*)(uint64_t, uint64_t, void *))a1;
        id v105 = sub_1002A358C;
        NSArray v106 = 0;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1001F081C((uint64_t *)&unk_100587A70);
        uint64_t v62 = String.init<A>(reflecting:)();
        uint64_t aBlock = (void *)sub_1002344D8(v62, v63, (uint64_t *)&v108);
        uint64_t v53 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "validateAllLinks: We have some invalid links to cleanup {count: %ld, pseudonyms: %s}", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a2 = v93;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }

      uint64_t v64 = (void *)swift_allocObject();
      v64[2] = sub_1002A35E4;
      v64[3] = 0;
      v64[4] = v3;
      v64[5] = v53;
      v64[6] = a1;
      v64[7] = sub_1002A358C;
      v64[8] = 0;
      unint64_t v108 = v3;
      id v109 = v53;
      uint64_t v110 = a1;
      id v111 = sub_1002B72D4;
      uint64_t v112 = v64;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      sub_1002B4E1C(&v108);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      sub_1001F6204(0, &qword_100587A50);
      id v65 = sub_10036F610();
      os_log_type_t v66 = *(void **)&a2[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v67 = (void *)swift_allocObject();
      v67[2] = a2;
      uint64_t v67[3] = v3;
      unsigned char v67[4] = v53;
      v67[5] = a1;
      NSArray v106 = sub_1002B72E4;
      uint64_t v107 = v67;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v103 = 1107296256;
      id v104 = sub_1002A05DC;
      id v105 = (void (*)(id *@<X0>, uint64_t *@<X8>))&unk_1005116D0;
      uint64_t v68 = _Block_copy(&aBlock);
      unint64_t v69 = a2;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v66 removeConversationLinkDescriptorsWithPredicate:v65 deleteReason:5 completion:v68];
      _Block_release(v68);

      unint64_t v4 = v96;
    }
    sub_1002B1168();
    uint64_t v71 = v70;
    if (!*(void *)(v70 + 16))
    {
      v92(v97, v4);
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_51:
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRetain_n();
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      uint64_t aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 134218242;
      uint64_t v100 = *(void *)(v71 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2080;
      uint64_t v100 = v71;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_10058B600);
      uint64_t v75 = String.init<A>(reflecting:)();
      uint64_t v100 = sub_1002344D8(v75, v76, (uint64_t *)&aBlock);
      unint64_t v4 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "validateAllLinks: We have some deleted links to remove from database {count: %ld, pseudonyms: %s}", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v77 = *(void *)(v71 + 16);
    if (v77)
    {
      int v93 = a2;
      uint64_t aBlock = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      id v78 = self;
      uint64_t v79 = v71 + 40;
      do
      {
        swift_bridgeObjectRetain();
        NSString v80 = String._bridgeToObjectiveC()();
        id v81 = objc_msgSend(v78, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v80);

        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v79 += 16;
        --v77;
      }
      while (v77);
      unint64_t v8 = (unint64_t)aBlock;
      swift_bridgeObjectRelease();
      unint64_t v4 = v96;
      a2 = v93;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v13 = v97;
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
LABEL_50:
      sub_1001F6204(0, &qword_100587A50);
      id v82 = sub_10036F610();
      uint64_t v83 = *(void **)&a2[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v84 = (void *)swift_allocObject();
      void v84[2] = a2;
      v84[3] = v3;
      v84[4] = v94;
      v84[5] = a1;
      NSArray v106 = sub_1002B7358;
      uint64_t v107 = v84;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v103 = 1107296256;
      id v104 = sub_1002A05DC;
      id v105 = (void (*)(id *@<X0>, uint64_t *@<X8>))&unk_100511720;
      os_log_type_t v85 = _Block_copy(&aBlock);
      unint64_t v86 = a2;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v83 removeLinkDescriptorsFromDataSourceWithPredicate:v82 completion:v85];
      _Block_release(v85);

      swift_bridgeObjectRelease_n();
      swift_release_n();
      v92(v13, v4);
      goto LABEL_51;
    }
LABEL_58:
    sub_100252F48(v8);
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1001F5F88(v18, (uint64_t)qword_100594C10);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v99 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v99, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    *(_DWORD *)id v20 = 138412290;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v22 = (void *)_swift_stdlib_bridgeErrorToNSError();
      uint64_t aBlock = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t aBlock = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v22 = 0;
    }
    *id v21 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v99, v19, "No descriptors fetched -- validation over {error: %@}", v20, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    id v23 = v99;
  }
}

uint64_t sub_1002A3248(id *a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  id v12 = [*a1 expirationDate];
  if (v12)
  {
    uint64_t v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v14(v4, v9, v5);
    sub_1001F0530((uint64_t)v4, 0, 1, v5);
    if (sub_1001F758C((uint64_t)v4, 1, v5) != 1)
    {
      v14(v11, v4, v5);
      char v15 = static Date.> infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v15 & 1;
    }
  }
  else
  {
    sub_1001F0530((uint64_t)v4, 1, 1, v5);
  }
  sub_100235804((uint64_t)v4, &qword_100584B40);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_1001F5F88(v16, (uint64_t)qword_100594C10);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "validateAllLinks: no valid expirationDate", v19, 2u);
    swift_slowDealloc();
  }

  char v15 = 1;
  return v15 & 1;
}

uint64_t sub_1002A3504(id *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + OBJC_IVAR___CSDConversationLinkManager_service);
  NSString v3 = [*a1 pseudonym];
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  unsigned int v4 = [v2 checkValidityForSelfPseudonymString:v3];

  return v4 ^ 1;
}

void sub_1002A358C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 pseudonym];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

void sub_1002A35E4(void *a1@<X8>)
{
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = objc_msgSend(v2, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v3);

  *a1 = v4;
}

void sub_1002A3658()
{
  sub_10025431C();
  uint64_t v2 = v1;
  sub_1002B8338();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1002B84A0(v7, (uint64_t)qword_100594C10);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (sub_10026B94C(v9))
  {
    uint64_t v17 = v0;
    uint64_t v10 = sub_100235B88();
    uint64_t v11 = (void *)sub_100235BB8();
    *(_DWORD *)uint64_t v10 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2112;
    if (v4)
    {
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = 0;
    }
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, v2, (uint8_t *)v10, 0x16u);
    sub_1001F081C(&qword_100585900);
    sub_1002B80F4();
    sub_1001F63CC();
    sub_1001F63CC();

    uint64_t v0 = v17;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  if (NSNotFound.getter() != v6)
  {
    uint64_t v13 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v13)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v14 = sub_100202590();
      sub_1002B50D4(v14, v15);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v13 linkManager:v0 removedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease();
    }
  }
  sub_100254338();
}

void sub_1002A3938()
{
  sub_1002B8284();
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v5 = v1;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_1002545EC();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1002B8144(v12, (uint64_t)qword_100594C10);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v17 = v5;
    char v15 = (uint8_t *)sub_100235B18();
    uint64_t v18 = sub_100202470();
    *(_DWORD *)char v15 = 136315138;
    swift_bridgeObjectRetain();
    sub_1002344D8(v2, v0, &v18);
    sub_1002B83F4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalidating pseudonym %s", v15, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    uint64_t v5 = v17;
    sub_1001F63CC();
  }
  else
  {
    sub_1002B8120();
  }

  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = v2;
  v16[3] = v0;
  void v16[4] = v9;
  v16[5] = v7;
  v16[6] = v5;
  v16[7] = v11;
  swift_bridgeObjectRetain();
  sub_1002084D8(v9);
  v5;
  sub_1002A9CEC();
  swift_release();
  sub_100254544();
}

void sub_1002A3B24(void *a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(void, id), uint64_t a6, char *a7, uint64_t a8)
{
  if (a1)
  {
    id v14 = objc_allocWithZone((Class)TUConversationLink);
    id v43 = a1;
    id v15 = objc_msgSend(v14, "initWithDescriptor:");
    if ([v15 isLocallyCreated])
    {
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_1001F5F88(v16, (uint64_t)qword_100594C10);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1002344D8(a3, a4, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Asking IDS to revoke pseudonym %s because it was locally generated for link being invalidated", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      id v30 = *(void **)&a7[OBJC_IVAR___CSDConversationLinkManager_service];
      NSString v31 = [v15 pseudonym];
      if (!v31)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v32 = (void *)swift_allocObject();
      v32[2] = a5;
      uint64_t v32[3] = a6;
      v32[4] = a7;
      void v32[5] = v15;
      void v32[6] = a8;
      uint64_t v50 = sub_1002B7108;
      unint64_t v51 = v32;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      os_log_t v48 = sub_100317DEC;
      uint64_t v49 = &unk_1005115B8;
      uint64_t v33 = _Block_copy(&aBlock);
      sub_1002084D8((uint64_t)a5);
      id v34 = a7;
      id v35 = v15;
      swift_release();
      [v30 revokePseudonymString:v31 completionHandler:v33];

      _Block_release(v33);
    }
    else
    {
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_1001F5F88(v25, (uint64_t)qword_100594C10);
      swift_bridgeObjectRetain_n();
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v41 = a6;
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = a8;
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1002344D8(a3, a4, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removing link with pseudonym %s from storage without invalidating as it's not locally created", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a6 = v41;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1002A4480((uint64_t)v15, a8, (uint64_t)a5, a6, v36, v37, v38, v39, v40, v41, v42, (uint64_t)v43, (uint64_t)a5, aBlock, v47, (uint64_t)v48, (uint64_t)v49, (uint64_t)v50, (uint64_t)v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        v57,
        v58);
    }
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_1001F5F88(v21, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1002344D8(a3, a4, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Asked to invalidate link for pseudonym %s but none was found.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (a5)
    {
      id v29 = a2;
      if (!a2) {
        id v29 = sub_1002B20E4(3, 0);
      }
      swift_errorRetain();
      a5(0, v29);
      swift_errorRelease();
    }
  }
}

#error "1002A4324: call analysis failed (funcsize=119)"

void sub_1002A4480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v26;
  a26 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_1001F5F88(v34, (uint64_t)qword_100594C10);
  id v35 = v33;
  uint64_t v36 = (void *)Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  uint64_t v38 = &selRef_performBlock_;
  if (sub_1002B81D0(v37))
  {
    uint64_t v39 = (_DWORD *)sub_100235B18();
    a14 = sub_100202470();
    *uint64_t v39 = 136315138;
    id v40 = [v35 pseudonym];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    uint64_t v38 = &selRef_performBlock_;
    sub_1002344D8(v41, v43, &a14);
    sub_1002B84F0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    sub_1002B81EC((void *)&_mh_execute_header, v44, v45, "Removing conversation link for pseudonym %s");
    sub_1002B821C();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  id v46 = [v35 v38[302]];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v47 = sub_1002393DC();
  *(void *)(v47 + 16) = v31;
  *(void *)(v47 + 24) = v29;
  sub_1002084D8(v31);
  sub_1002AA458();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100254338();
}

uint64_t sub_1002A46A4(uint64_t result, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t))
{
  if (a3)
  {
    BOOL v5 = NSNotFound.getter() != result;
    return a3(v5, a2);
  }
  return result;
}

#error "1002A4790: call analysis failed (funcsize=52)"

void sub_1002A47D0()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v18 = v7;
  uint64_t v8 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  sub_10024640C();
  v14();
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v18;
  *((void *)v16 + 3) = v6;
  *((void *)v16 + 4) = v4;
  *((void *)v16 + 5) = v2;
  *((void *)v16 + 6) = v0;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v15], (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_bridgeObjectRetain();
  sub_1002084D8(v4);
  v0;
  sub_1002A9CEC();
  swift_release();
  sub_1001FCC08();
}

void sub_1002A491C(void *a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(void, void *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    id v19 = a1;
    sub_1002AE808((unint64_t)v19, a8, a5, a6);
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain_n();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      sub_1002344D8(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Asked to renew link for pseudonym %s but none was found.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (a5)
    {
      uint64_t v18 = a2;
      if (!a2) {
        uint64_t v18 = sub_1002B20E4(3, 0);
      }
      swift_errorRetain();
      a5(0, v18);
      swift_errorRelease();
    }
  }
}

void sub_1002A4CE8()
{
  sub_1002B8284();
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v5 = v1;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_1002545EC();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_1002B8144(v10, (uint64_t)qword_100594C10);
  uint64_t v11 = (void *)Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (sub_1002B81D0(v12))
  {
    uint64_t v17 = v5;
    uint64_t v13 = (_DWORD *)sub_100235B18();
    uint64_t v18 = sub_100202470();
    *uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_1002344D8(v2, v0, &v18);
    sub_1002B83F4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1002B81EC((void *)&_mh_execute_header, v14, v15, "Checking validity of pseudonym %s");
    sub_1002B821C();
    sub_1001F63CC();
    uint64_t v5 = v17;
    sub_1001F63CC();
  }
  else
  {
    sub_1002B8120();
  }

  os_log_type_t v16 = (void *)sub_100246A38();
  long long v16[2] = v2;
  v16[3] = v0;
  void v16[4] = v9;
  v16[5] = v7;
  v16[6] = v5;
  swift_bridgeObjectRetain();
  sub_1002084D8(v9);
  v5;
  sub_1002A9CEC();
  swift_release();
  sub_100254544();
}

void sub_1002A4E8C(void *a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, char *, void), uint64_t a6, char *a7)
{
  uint64_t v90 = a3;
  id v92 = a2;
  uint64_t v11 = sub_1001F081C(&qword_100584B40);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v91 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v82 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v89 = a4;
    id v20 = a1;
    [v20 mutableCopy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1001F6204(0, (unint64_t *)&unk_100587A10);
    if (swift_dynamicCast())
    {
      uint64_t v91 = v16;
      uint64_t v21 = a7;
      id v22 = v94;
      unint64_t v86 = v21;
      id v87 = v20;
      os_log_type_t v23 = *(void **)&v21[OBJC_IVAR___CSDConversationLinkManager_service];
      NSString v24 = [v94 pseudonym];
      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v25 = [v23 pseudonymForPseudonymString:v24];

      p_opt_inst_meths = &OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate.opt_inst_meths;
      uint64_t v27 = "eIdentifier";
      id v92 = v22;
      int v88 = a5;
      if (v25)
      {
        if (!sub_1002B1FC8(v25))
        {
          id v47 = [v25 properties];
          id v48 = [v47 expirationDate];

          static Date._unconditionallyBridgeFromObjectiveC(_:)();
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v50 = v91;
          (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v91);
          [v22 setExpirationDate:isa];

          sub_10029E3C0(v51);
          uint64_t v85 = (uint64_t)v15;
          uint64_t v52 = v86;
          uint64_t v53 = *(void **)&v86[OBJC_IVAR___CSDConversationLinkManager_dataSource];
          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v54 = swift_allocObject();
          *(_OWORD *)(v54 + 16) = xmmword_10048F560;
          *(void *)(v54 + 32) = v22;
          aBlock[0] = v54;
          specialized Array._endMutation()();
          sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
          id v55 = v22;
          Class v56 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          uint64_t v57 = swift_allocObject();
          *(void *)(v57 + 16) = v55;
          *(void *)(v57 + 24) = v52;
          aBlock[4] = (uint64_t)sub_1002B6EC8;
          void aBlock[5] = v57;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_100317DEC;
          uint64_t aBlock[3] = (uint64_t)&unk_1005114F0;
          uint64_t v58 = _Block_copy(aBlock);
          id v59 = v55;
          id v60 = v52;
          swift_release();
          uint64_t v61 = v53;
          uint64_t v15 = (char *)v85;
          [v61 addOrUpdateConversationLinkDescriptors:v56 completion:v58];

          _Block_release(v58);
          uint64_t v62 = 1;
          unint64_t v63 = v88;
          if (v88)
          {
LABEL_32:
            id v78 = v92;
            id v79 = [v92 expirationDate];
            if (v79)
            {
              NSString v80 = v79;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v81 = 0;
            }
            else
            {
              uint64_t v81 = 1;
            }
            sub_1001F0530((uint64_t)v15, v81, 1, v50);
            v63(v62, v15, 0);

            uint64_t v36 = (uint64_t)v15;
LABEL_36:
            sub_100235804(v36, &qword_100584B40);
            return;
          }
LABEL_23:

          return;
        }
      }
      else
      {
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        sub_1001F5F88(v37, (uint64_t)qword_100594C10);
        id v38 = v22;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v85 = swift_slowAlloc();
          aBlock[0] = v85;
          *(_DWORD *)uint64_t v41 = 136315138;
          uint64_t v83 = v41 + 4;
          uint64_t v84 = v41;
          id v42 = [v38 pseudonym];
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

          uint64_t v46 = v43;
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate + 40);
          id v94 = (id)sub_1002344D8(v46, v45, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v27 = "synchronousConversationsForBundleIdentifier" + 32;
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Could not retrieve IDS pseudonym object for pseudonym string %s", v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v22 = v92;
      }
      if (p_opt_inst_meths[321] != (__objc2_meth_list *)-1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      sub_1001F5F88(v64, (uint64_t)qword_100594C10);
      id v65 = v22;
      os_log_type_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = (uint64_t)v84;
        *(_DWORD *)uint64_t v68 = *((void *)v27 + 202);
        uint64_t v83 = v68 + 4;
        id v69 = [v65 pseudonym];
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v85 = (uint64_t)v15;
        unint64_t v72 = v71;

        id v94 = (id)sub_1002344D8(v70, v72, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = (char *)v85;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Removing invalid conversation link with pseudonym %s", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v63 = v88;
      id v73 = [v65 pseudonym];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v74 = (void *)swift_allocObject();
      unint64_t v75 = v89;
      v74[2] = v90;
      v74[3] = v75;
      unint64_t v76 = v86;
      v74[4] = v86;
      v74[5] = v65;
      id v77 = v65;
      v76;
      swift_bridgeObjectRetain();
      sub_1002AA458();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v62 = 0;
      uint64_t v50 = v91;
      if (v63) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }

    a4 = v89;
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_1001F5F88(v28, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (void (*)(void, void, void))a5;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    id v94 = (id)sub_1002344D8(v90, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Asked to check validity of link for pseudonym %s but none was found.", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = (void (*)(uint64_t, char *, void))v31;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v34 = v91;
  id v33 = v92;
  if (a5)
  {
    sub_1001F0530(v91, 1, 1, v16);
    id v35 = v33;
    if (!v33) {
      id v35 = sub_1002B20E4(3, 0);
    }
    swift_errorRetain();
    a5(0, (char *)v34, v35);
    swift_errorRelease();
    uint64_t v36 = v34;
    goto LABEL_36;
  }
}

void sub_1002A593C(char a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    sub_10033991C();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1001F5F88(v5, (uint64_t)qword_100594C10);
    id v6 = a3;
    swift_errorRetain();
    id v7 = v6;
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      id v11 = [v7 pseudonym];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_1002344D8(v12, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = 0;
      }
      *uint64_t v10 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Saving expiration date for pseudonym %s failed with error %@", (uint8_t *)v9, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_1002A5C70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (NSNotFound.getter() == a1)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      unint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_1002344D8(a3, a4, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = 0;
      }
      *unint64_t v14 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Removal of invalid conversation link with pseudonym %%%s failed with error %@", (uint8_t *)v13, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v16 = *(void **)(a5 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v16)
    {
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10048F560;
      *(void *)(v17 + 32) = a6;
      uint64_t v21 = v17;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_unknownObjectRetain();
      id v18 = a6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v16 linkManager:a5 removedLinkDescriptorsFromValidityCheck:isa];

      swift_unknownObjectRelease();
    }
    sub_10033991C();
  }
}

void sub_1002A6114(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B7464(a2, (uint64_t)v10, &qword_100584B40);
  uint64_t v11 = type metadata accessor for Date();
  Class isa = 0;
  if (sub_1001F758C((uint64_t)v10, 1, v11) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  if (a3) {
    a3 = (void *)_convertErrorToNSError(_:)();
  }
  (*(void (**)(uint64_t, void, Class, void *))(a4 + 16))(a4, a1 & 1, isa, a3);
}

uint64_t sub_1002A6248()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  id v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  id v11 = [v5 pseudonym];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v12 = (void *)swift_allocObject();
  v12[2] = v6;
  void v12[3] = v4;
  void v12[4] = v2;
  v12[5] = v0;
  void v12[6] = v10;
  v12[7] = v8;
  id v13 = v6;
  sub_1002084D8(v4);
  v0;
  swift_bridgeObjectRetain();
  sub_1002A9CEC();
  swift_release();
  sub_1001FCC08();
  return swift_bridgeObjectRelease();
}

void sub_1002A6338(void *a1, void *a2, void *a3, void (*a4)(void, void), uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    id v15 = a1;
    [v15 mutableCopy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1001F6204(0, (unint64_t *)&unk_100587A10);
    if (swift_dynamicCast())
    {
      uint64_t v16 = v41;
      sub_1002B4C70(a7, a8, v41);
      sub_10029E3C0(v17);
      id v39 = *(id *)&a6[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_10048F560;
      *(void *)(v18 + 32) = v16;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      id v37 = v16;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v20 = (void *)swift_allocObject();
      void v20[2] = v15;
      v20[3] = a4;
      v20[4] = a5;
      void v20[5] = a6;
      void v20[6] = a3;
      v20[7] = a7;
      v20[8] = a8;
      aBlock[4] = (uint64_t)sub_1002B6DC8;
      void aBlock[5] = (uint64_t)v20;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100317DEC;
      uint64_t aBlock[3] = (uint64_t)&unk_100511450;
      uint64_t v21 = _Block_copy(aBlock);
      id v22 = v15;
      sub_1002084D8((uint64_t)a4);
      os_log_type_t v23 = a6;
      id v24 = a3;
      swift_bridgeObjectRetain();
      swift_release();
      [v39 addOrUpdateConversationLinkDescriptors:isa completion:v21];
      _Block_release(v21);

      return;
    }
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_1001F5F88(v25, (uint64_t)qword_100594C10);
  id v26 = a3;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    id v38 = a4;
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    id v30 = [v26 pseudonym];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = a2;
    unint64_t v34 = v33;

    uint64_t v35 = v31;
    a4 = v38;
    uint64_t v41 = (void *)sub_1002344D8(v35, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v32;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Asked to set link name for pseudonym %s but none was found.", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (a4)
  {
    id v36 = a2;
    if (!a2) {
      id v36 = sub_1002B20E4(3, 0);
    }
    swift_errorRetain();
    a4(0, v36);
    swift_errorRelease();
  }
}

void sub_1002A6770(char a1, void *a2, void *a3, void (*a4)(void, void), uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    uint64_t v13 = a9;
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594C10);
    id v15 = a3;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v40 = a8;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = a4;
      id v20 = [v15 pseudonym];
      uint64_t v21 = a7;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      a4 = v19;
      uint64_t v13 = a9;
      uint64_t v25 = v22;
      a7 = v21;
      sub_1002344D8(v25, v24, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updated link name for pseudonym %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a8 = v40;
      swift_slowDealloc();
    }
    else
    {
    }
    sub_1002B4CC8(a8, v13, a7);
    if (a4) {
      a4(a7, 0);
    }
    sub_10033991C();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_1001F5F88(v27, (uint64_t)qword_100594C10);
    id v28 = a3;
    swift_errorRetain();
    id v29 = v28;
    swift_errorRetain();
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v41 = a4;
      uint64_t v32 = swift_slowAlloc();
      unint64_t v33 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      id v34 = [v29 pseudonym];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      sub_1002344D8(v35, v37, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v38 = 0;
      }
      *unint64_t v33 = v38;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saving link name for pseudonym %s failed with error %@", (uint8_t *)v32, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v41;
      if (!v41) {
        return;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      if (!a4) {
        return;
      }
    }
    id v39 = a2;
    if (!a2) {
      id v39 = sub_1002B20E4(3, 0);
    }
    swift_errorRetain();
    a4(0, v39);
    swift_errorRelease();
  }
}

void sub_1002A6D94(void *a1, void *a2, uint64_t a3, void *a4)
{
  if ([a1 type] == 10 && objc_msgSend(a1, "hasLink"))
  {
    uint64_t v7 = sub_100325384(a1);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      id v11 = [objc_allocWithZone((Class)CSDMessagingEncryptedConversationMessage) init];
      if (v11)
      {
        id v12 = v11;
        id v13 = [a2 publicKey];
        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        id v17 = objc_allocWithZone((Class)type metadata accessor for LetMeInRequestorKeyAgreement());
        uint64_t v46 = v12;
        uint64_t v35 = sub_10020F648(v14, v16);
        uint64_t v36 = sub_10020FAD4(v9, v10);
        unint64_t v38 = v37;
        uint64_t v40 = v39;
        unint64_t v42 = v41;
        sub_1001F7440(v36, v37);
        sub_1001F7440(v40, v42);
        sub_1002B4D80(v36, v38, v46, (SEL *)&selRef_setConversationMessageBytes_);
        sub_1002B4D80(v40, v42, v46, (SEL *)&selRef_setPublicKey_);
        uint64_t v45 = v9;
        uint64_t v43 = (void (*)(void *, id, uint64_t *, void))a4[2];
        id v44 = v46;
        v43(a4, v44, v35, 0);
        sub_1001F7498(v40, v42);
        sub_1001F7498(v36, v38);

        sub_1001FCB18(v45, v10);
LABEL_18:
        _Block_release(a4);
        return;
      }
      sub_1001FCB18(v9, v10);
    }
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_1001F5F88(v29, (uint64_t)qword_100594C10);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to retrieve the data bytes from the let me in request, or failed to init a CSDMessagingEncryptedConversationMessage", v32, 2u);
      swift_slowDealloc();
    }

    id v33 = sub_1002B20E4(7, 0);
    id v34 = (void *)_convertErrorToNSError(_:)();
    ((void (*)(void *, void, void, void *))a4[2])(a4, 0, 0, v34);

    goto LABEL_18;
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1001F5F88(v18, (uint64_t)qword_100594C10);
  id v19 = a1;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    [v19 type];
    type metadata accessor for CSDMessagingConversationMessageType(0);
    uint64_t v23 = String.init<A>(reflecting:)();
    sub_1002344D8(v23, v24, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    [v19 hasLink];
    uint64_t v25 = String.init<A>(reflecting:)();
    sub_1002344D8(v25, v26, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to encrypt let me in request because either the type was wrong (%s or missing the link (%s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v27 = sub_1002B20E4(7, 0);
  id v28 = (void *)_convertErrorToNSError(_:)();
  ((void (*)(void *, void, void, void *))a4[2])(a4, 0, 0, v28);

  _Block_release(a4);
}

void sub_1002A7724()
{
  sub_1001FCC38();
  unint64_t v62 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for SymmetricKey();
  sub_1001F6398();
  __chkstk_darwin(v8);
  sub_1001FCCD0();
  uint64_t v9 = sub_1001F081C(&qword_100587A58);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  uint64_t v11 = sub_1002B8234();
  sub_10020233C();
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v15 = v14 - v13;
  if ([v7 type] != 16
    || ![v7 hasLink]
    || ![v7 hasIsLetMeInApproved])
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_1001F5F88(v19, (uint64_t)qword_100594C10);
    id v20 = v7;
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!sub_100202368(v22))
    {

      goto LABEL_12;
    }
    uint64_t v23 = sub_100202470();
    v63[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315650;
    LODWORD(v64) = [v20 type];
    type metadata accessor for CSDMessagingConversationMessageType(0);
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v26 = sub_1002344D8(v24, v25, v63);
    sub_1002B8440(v26);

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    LOBYTE(v64) = [v20 hasLink] ^ 1;
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v64 = sub_1002344D8(v27, v28, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    LOBYTE(v64) = [v20 hasIsLetMeInApproved] ^ 1;
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v31 = sub_1002344D8(v29, v30, v63);
    sub_1002B8440(v31);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v11, "Failed to encrypt let me in response because either the type was wrong (%s, missing the link %s, or approval was not specified (%s)", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy();
    sub_1001F63CC();
    goto LABEL_9;
  }
  uint64_t v16 = v15;
  id v17 = [v5 value];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v18 = sub_1002A9EA0();
  swift_bridgeObjectRelease();
  if (!v18)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    os_log_type_t v21 = sub_1002466F4(v38, (uint64_t)qword_100594C10);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!sub_10026B89C(v39)) {
      goto LABEL_10;
    }
    uint64_t v40 = (_WORD *)sub_100246544();
    sub_100246668(v40);
    sub_100246944((void *)&_mh_execute_header, v41, v42, "Failed to retrieve link");
LABEL_9:
    sub_1001F63CC();
LABEL_10:

    goto LABEL_12;
  }
  sub_100325BD0(v0);
  if (sub_1001F758C(v0, 1, v11) == 1)
  {
    sub_100235804(v0, &qword_100587A58);
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    id v33 = (void *)sub_1002466F4(v32, (uint64_t)qword_100594C10);
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (sub_10026B89C(v34))
    {
      uint64_t v35 = (_WORD *)sub_100246544();
      sub_100246668(v35);
      sub_100246944((void *)&_mh_execute_header, v36, v37, "Failed to initialize key agreement from link's private key, or private key is absent, aborting.");
      sub_1001F63CC();
    }
  }
  else
  {
    sub_1002B6C34(v0, v15);
    uint64_t v43 = sub_100325384(v7);
    if (v44 >> 60 != 15)
    {
      uint64_t v45 = v43;
      unint64_t v46 = v44;
      id v47 = [objc_allocWithZone((Class)CSDMessagingEncryptedConversationMessage) init];
      if (v47)
      {
        id v48 = v47;
        v63[0] = v3;
        v63[1] = v62;
        sub_1001F7440(v3, v62);
        SymmetricKey.init<A>(data:)();
        uint64_t v49 = v45;
        uint64_t v54 = sub_1002E8238();
        sub_1001F7440((uint64_t)v54, v55);
        uint64_t v56 = sub_100235D8C();
        sub_1002B4D80(v56, v57, v48, v58);
        sub_1001FCB18(v49, v46);

        uint64_t v59 = sub_100235D8C();
        sub_1001F7498(v59, v60);
        sub_1001F7664();
        v61();
        sub_1002B6B70(v15);
        goto LABEL_12;
      }
      sub_1001FCB18(v45, v46);
    }
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    uint64_t v51 = sub_1002466F4(v50, (uint64_t)qword_100594C10);
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)sub_100246544();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to retrieve the data bytes from the let me in response, or failed to init a CSDMessagingEncryptedConversationMessage", v53, 2u);
      sub_1001F63CC();
    }

    sub_1002B6B70(v16);
  }
LABEL_12:
  sub_1001FCC08();
}

void sub_1002A812C()
{
  sub_1001FCC38();
  sub_1002B8338();
  uint64_t v4 = v3;
  id v6 = v5;
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v7 = sub_1002B8180();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  id v8 = [v4 value];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  sub_10033A0D4();
  swift_bridgeObjectRelease();
  sub_100320654(v6, v4, v2, v1, v0);
  sub_1001FCC08();
}

void sub_1002A81F8(void *a1, void *a2, void *a3, void *a4, void (**a5)(void, void, void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  _Block_copy(a5);
  if ([a1 hasPublicKey] && objc_msgSend(a1, "hasConversationMessageBytes"))
  {
    id v11 = [a2 value];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = a4;
    void v12[3] = a1;
    void v12[4] = a2;
    v12[5] = a3;
    void v12[6] = sub_1002B79D0;
    v12[7] = v10;
    a4;
    id v13 = a1;
    id v14 = a2;
    id v15 = a3;
    swift_retain();
    sub_1002A9CEC();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    _Block_release(a5);
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1001F5F88(v16, (uint64_t)qword_100594C10);
    id v17 = a1;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 67109376;
      [v17 hasPublicKey];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 8) = 1024;
      [v17 hasConversationMessageBytes];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)", (uint8_t *)v20, 0xEu);
      swift_slowDealloc();
    }
    else
    {
    }
    id v21 = sub_1002B20E4(8, 0);
    os_log_type_t v22 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a5)[2](a5, 0, 0, v22);

    swift_release();
    _Block_release(a5);
  }
}

void sub_1002A8504()
{
  sub_1002B8338();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if ([v6 hasPublicKey] && objc_msgSend(v7, "hasConversationMessageBytes"))
  {
    id v8 = [v5 value];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = v1;
    void v9[3] = v7;
    v9[4] = v5;
    void v9[5] = v3;
    void v9[6] = v2;
    v9[7] = v0;
    id v10 = v1;
    id v11 = v7;
    id v12 = v5;
    id v13 = v3;
    swift_retain();
    sub_1002A9CEC();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1002B84A0(v14, (uint64_t)qword_100594C10);
    id v15 = v7;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 67109376;
      [v15 hasPublicKey];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 8) = 1024;
      [v15 hasConversationMessageBytes];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)", (uint8_t *)v18, 0xEu);
      sub_1001F63CC();
    }
    else
    {
    }
    id v19 = sub_1002B20E4(8, 0);
    v2(0, 0, 0xF000000000000000, v19);
  }
}

void sub_1002A8790(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, NSObject *a6, void (*a7)(void, void, unint64_t, id), uint64_t a8)
{
  uint64_t v56 = a8;
  unint64_t v57 = a7;
  os_log_t v54 = a6;
  uint64_t v55 = a3;
  uint64_t v11 = type metadata accessor for SymmetricKey();
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v51 - v15;
  uint64_t v17 = sub_1001F081C(&qword_100587A58);
  __chkstk_darwin(v17 - 8);
  id v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ConversationLinkKeyAgreement();
  __chkstk_darwin(v20);
  os_log_type_t v22 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 || !a1)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_1001F5F88(v29, (uint64_t)qword_100594C10);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v58 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v58 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v34 = 0;
      }
      *id v33 = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to retrieve link with error %@) triggering link recovery for LMI", v32, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v35 = v57;
    sub_1002A812C();
    id v28 = sub_1002B20E4(3, 0);
    v35(0, 0, 0xF000000000000000, v28);
    goto LABEL_19;
  }
  id v23 = a1;
  sub_100325BD0((uint64_t)v19);
  if (sub_1001F758C((uint64_t)v19, 1, v20) == 1)
  {
    sub_100235804((uint64_t)v19, &qword_100587A58);
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_1001F5F88(v24, (uint64_t)qword_100594C10);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to initialize key agreement from link's private key, or private key is absent, aborting.", v27, 2u);
      swift_slowDealloc();
    }

    id v28 = sub_1002B20E4(8, 0);
    v57(0, 0, 0xF000000000000000, v28);

LABEL_19:
    return;
  }
  sub_1002B6C34((uint64_t)v19, (uint64_t)v22);
  sub_1002E8498(v14, a4);
  uint64_t v37 = v36;
  uint64_t v55 = 0;
  uint64_t v38 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v16, v14, v11);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  sub_1001F5F88(v39, (uint64_t)qword_100594C10);
  id v40 = v37;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    os_log_t v54 = v41;
    uint64_t v45 = (void *)v44;
    v51[1] = v44;
    os_log_type_t v52 = v43;
    *(_DWORD *)uint64_t v43 = 138412290;
    v51[0] = v43 + 4;
    uint64_t v58 = (uint64_t)v40;
    id v46 = v40;
    uint64_t v38 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v45 = v40;

    os_log_t v47 = v54;
    _os_log_impl((void *)&_mh_execute_header, v54, v42, "decryptedLetMeInRequest: %@", v52, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v48 = v40;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v49 = v58;
  unint64_t v50 = v59;
  v57(v40, v58, v59, 0);
  sub_1001F7498(v49, v50);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v11);
  sub_1002B6B70((uint64_t)v22);
}

void sub_1002A9048(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >> 60 == 15)
  {
    Class isa = 0;
    if (a4)
    {
LABEL_3:
      uint64_t v9 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a4) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = 0;
LABEL_6:
  id v10 = (id)v9;
  (*(void (**)(uint64_t, uint64_t, Class))(a5 + 16))(a5, a1, isa);
}

uint64_t sub_1002A90F0(void *a1)
{
  if (![a1 hasConversationMessageBytes])
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    os_log_type_t v9 = sub_1001F5F88(v8, (uint64_t)qword_100594C10);
    id v10 = a1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!sub_10026B89C(v11))
    {

      return 0;
    }
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109376;
    [v10 hasPublicKey];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 1024;
    [v10 hasConversationMessageBytes];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v3, v9, "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)", (uint8_t *)v12, 0xEu);
    goto LABEL_11;
  }
  if (LetMeInRequestorKeyAgreement.isExhausted.getter())
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = sub_1002466F4(v2, (uint64_t)qword_100594C10);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!sub_10026B89C(v4)) {
      goto LABEL_14;
    }
    uint64_t v5 = (_WORD *)sub_100246544();
    sub_100246668(v5);
    sub_100246944((void *)&_mh_execute_header, v6, v7, "Failed to decrypt let me in response because the requestor's key agreement has already been used to decrypt a response.");
LABEL_11:
    sub_1001F63CC();
LABEL_14:

    return 0;
  }
  uint64_t result = sub_1002B4D20(a1);
  if (v14 >> 60 != 15)
  {
    uint64_t v15 = result;
    unint64_t v16 = v14;
    id v17 = sub_10020FFD0(result, v14);
    sub_1001FCB18(v15, v16);
    return (uint64_t)v17;
  }
  __break(1u);
  return result;
}

void sub_1002A9430(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100492010;
  os_log_type_t v9 = self;
  *(void *)(v8 + 32) = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v10);

  *(void *)(v8 + 40) = v11;
  id v12 = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithPrivateKey:", 0);
  id v13 = [self notPredicateWithSubpredicate:v12];

  *(void *)(v8 + 48) = v13;
  id v39 = (id)v8;
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100587A50);
  id v14 = sub_1002D1698();
  uint64_t v15 = *(void **)(a4 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v39 = 0;
  id v16 = [v15 conversationLinkDescriptorsWithPredicate:v14 limit:0 offset:0 error:&v39];
  id v17 = v39;
  if (v16)
  {
    uint64_t v18 = v16;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = v17;

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      sub_1002DE19C(0, (v19 & 0xC000000000000001) == 0, v19);
      if ((v19 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v19 + 32);
      }
      os_log_type_t v22 = v21;
      swift_bridgeObjectRelease();
      os_log_type_t v31 = sub_1002B08A0(v22, a1);
      ((void (**)(void, _DWORD *, void))a5)[2](a5, v31, 0);

      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_1001F5F88(v33, (uint64_t)qword_100594C10);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cannot add invited member handles for pseudonym %%@ because no link matching this pseudonym was found", v36, 2u);
      swift_slowDealloc();
    }

    id v37 = sub_1002B20E4(3, 0);
    uint64_t v38 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v38);
  }
  else
  {
    id v23 = v39;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_1001F5F88(v24, (uint64_t)qword_100594C10);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      swift_errorRetain();
      uint64_t v29 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v39 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to add invited member handles with error %@)", v27, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    unint64_t v30 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v30);

    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_19:
  _Block_release(a5);
}

void sub_1002A9AD4(char a1)
{
  if (a1) {
    sub_100339C48();
  }
  else {
    sub_1003399FC();
  }
}

void sub_1002A9B6C()
{
}

void sub_1002A9BFC(char a1, uint64_t a2, void (**a3)(void, void))
{
  sub_100340A88(a1);
  NSString v4 = String._bridgeToObjectiveC()();
  ((void (**)(void, NSString))a3)[2](a3, v4);
  swift_bridgeObjectRelease();

  _Block_release(a3);
}

void sub_1002A9CEC()
{
  sub_1002B8284();
  uint64_t v18 = v1;
  uint64_t v19 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = sub_1002B8180();
  *(_OWORD *)(v8 + 16) = xmmword_100490020;
  os_log_type_t v9 = self;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v10);

  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  v17[0] = v8;
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100587A50);
  id v12 = sub_1002B82D8();
  id v13 = *(void **)(v3 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v14 = sub_1002393DC();
  *(void *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v5;
  void v17[4] = sub_1002B80BC;
  v17[5] = v14;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10029BD4C;
  void v17[3] = &unk_1005113B0;
  uint64_t v15 = _Block_copy(v17);
  id v16 = v12;
  sub_1002B84B8();
  swift_release();
  sub_1002B80D8(v13, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v12);
  _Block_release(v15);

  sub_1002B8348();
}

id sub_1002A9EA0()
{
  uint64_t v1 = v0;
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100490020;
  uint64_t v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = objc_msgSend(v3, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v4);

  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = objc_msgSend(v3, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  id v16 = (id)v2;
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100587A50);
  id v6 = sub_1002D1698();
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v16 = 0;
  id v8 = [v7 conversationLinkDescriptorsWithPredicate:v6 limit:0 offset:0 error:&v16];
  id v9 = v16;
  if (!v8)
  {
    id v14 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v9;
  }
  NSString v10 = v8;
  sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = v9;

  if (v11 >> 62)
  {
    sub_1002B8518();
    id v9 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    id v9 = *(id *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_4:
      sub_1002DE19C(0, (v11 & 0xC000000000000001) == 0, v11);
      if ((v11 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v11 + 32);
      }
      id v9 = v13;
    }
  }
  swift_bridgeObjectRelease();

  return v9;
}

void sub_1002AA0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, void (*a13)(unint64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = v22;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  unint64_t v30 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v32 = objc_msgSend(v30, "tu_predicateForConversationLinkDescriptorsWithGroupUUID:", isa);

  uint64_t v33 = *(void **)(v25 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v34 = sub_1002393DC();
  *(void *)(v34 + 16) = v29;
  *(void *)(v34 + 24) = v27;
  a13 = sub_1002B6CC0;
  a14 = v34;
  a9 = _NSConcreteStackBlock;
  sub_1002B8174();
  a11 = sub_10029BD4C;
  a12 = &unk_100511360;
  os_log_type_t v35 = _Block_copy(&a9);
  id v36 = v32;
  swift_retain();
  swift_release();
  sub_1002B80D8(v33, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v36);
  _Block_release(v35);

  sub_1002B8324();
}

void sub_1002AA224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, void *a3), void *a12, uint64_t (*a13)(), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002B8370();
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = self;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = objc_msgSend(v29, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v30);

  id v32 = *(void **)(v22 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v33 = sub_1002393DC();
  *(void *)(v33 + 16) = v28;
  *(void *)(v33 + 24) = v26;
  a13 = sub_1002B80BC;
  a14 = v33;
  a9 = _NSConcreteStackBlock;
  sub_1002B8174();
  a11 = sub_10029BD4C;
  a12 = &unk_100511310;
  uint64_t v34 = _Block_copy(&a9);
  id v35 = v31;
  swift_retain();
  swift_release();
  sub_1002B80D8(v32, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v35);
  _Block_release(v34);

  sub_1002B8324();
}

void sub_1002AA360(unint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1)
  {
    unint64_t v4 = a1;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        sub_1002DE19C(0, (v4 & 0xC000000000000001) == 0, v4);
        if ((v4 & 0xC000000000000001) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(v4 + 32);
        }
        id v7 = v6;
        swift_bridgeObjectRelease();
        a1 = (unint64_t)v7;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    a1 = 0;
  }
LABEL_9:
  id v8 = (id)a1;
  a3();
}

void sub_1002AA458()
{
  sub_1002B8284();
  uint64_t v15 = v1;
  uint64_t v16 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  id v9 = self;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend(v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v10);

  id v12 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  v14[4] = v6;
  v14[5] = v4;
  v14[0] = _NSConcreteStackBlock;
  sub_1002B8174();
  void v14[2] = sub_1002A05DC;
  v14[3] = &unk_1005112C0;
  id v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v12, "removeConversationLinkDescriptorsWithPredicate:deleteReason:completion:", v11, v8, v13, v14[0]);
  _Block_release(v13);

  sub_1002B8348();
}

void sub_1002AA578(unint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, char *a6, void (**a7)(void, void, void *), double a8)
{
  uint64_t v115 = a5;
  int v118 = a4;
  unint64_t v119 = a1;
  uint64_t v120 = a3;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v116 = *(void **)(v12 - 8);
  NSString v117 = (NSString)v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v113 = v14;
  uint64_t v114 = &v99[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v99[-v15];
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = &v99[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = type metadata accessor for ConversationLinkKeyAgreement();
  uint64_t v111 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v112 = &v99[-(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Class isa = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = &v99[-v24];
  uint64_t v26 = swift_allocObject();
  id v121 = a6;
  uint64_t v122 = v26;
  *(void *)(v26 + 16) = a7;
  uint64_t v27 = *(void (**)(uint64_t))&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v28 = a7;
  uint64_t v29 = a7;
  NSString v30 = a2;
  _Block_copy(v29);
  uint64_t v31 = swift_retain();
  id v123 = v25;
  v27(v31);
  swift_release();
  id v32 = (id)TUNormalizedHandleForTUHandle();
  if (!v32) {
    goto LABEL_10;
  }
  id v33 = v32;
  sub_1002E5874(v32);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  if (!v35)
  {

LABEL_10:
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_1001F5F88(v46, (uint64_t)qword_100594C10);
    os_log_t v47 = a2;
    id v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    id v39 = v28;
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v50 = 138412290;
      aBlock[0] = (uint64_t)v47;
      os_log_type_t v52 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v30;

      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Cannot normalize value for originator handle %@", v50, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v48 = v47;
    }

    id v33 = sub_1002B20E4(10, 0);
    uint64_t v44 = (void *)_convertErrorToNSError(_:)();
    v28[2](v28, 0, v44);
    goto LABEL_16;
  }
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v36 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v38 = v37;
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v17);
  if (v38 >> 60 == 15)
  {
    id v39 = v28;
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_1001F5F88(v40, (uint64_t)qword_100594C10);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?", v43, 2u);
      swift_slowDealloc();
    }

    uint64_t v44 = sub_1002B20E4(0, 0);
    uint64_t v45 = (void *)_convertErrorToNSError(_:)();
    v28[2](v28, 0, v45);

LABEL_16:
    goto LABEL_17;
  }
  unint64_t v107 = v38;
  uint64_t v108 = v36;
  uint64_t v53 = v28;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_1001F5F88(v54, (uint64_t)qword_100594C10);
  uint64_t v55 = v116;
  NSString v56 = v117;
  unint64_t v57 = (void (*)(unsigned char *, unint64_t, NSString))v116[2];
  NSArray v106 = (char *)(v116 + 2);
  id v105 = v57;
  v57(v16, v119, v117);
  uint64_t v58 = v120;
  swift_bridgeObjectRetain_n();
  id v59 = a2;
  unint64_t v60 = Logger.logObject.getter();
  int v61 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v60, (os_log_type_t)v61);
  id v109 = v53;
  if (v62)
  {
    int v100 = v61;
    os_log_t v103 = v60;
    uint64_t v63 = swift_slowAlloc();
    id v104 = (void *)swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    aBlock[0] = v102;
    *(_DWORD *)uint64_t v63 = 136316162;
    uint64_t v101 = v63 + 4;
    sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v124 = sub_1002344D8(v64, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(unsigned char *, NSString))v55[1])(v16, v56);
    *(_WORD *)(v63 + 12) = 2112;
    uint64_t v124 = (uint64_t)v59;
    id v66 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v104 = a2;

    *(_WORD *)(v63 + 22) = 2080;
    if (v58)
    {
      uint64_t v124 = v58;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_100587A40);
      uint64_t v67 = String.init<A>(reflecting:)();
      unint64_t v69 = v68;
    }
    else
    {
      unint64_t v69 = 0xE300000000000000;
      uint64_t v67 = 7104878;
    }
    uint64_t v71 = v115;
    Class v70 = isa;
    os_log_type_t v72 = v100;
    uint64_t v124 = sub_1002344D8(v67, v69, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v63 + 32) = 1024;
    LODWORD(v124) = v118 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v63 + 38) = 2080;
    uint64_t v124 = v71;
    type metadata accessor for TUConversationLinkLifetimeScope(0);
    uint64_t v73 = String.init<A>(reflecting:)();
    uint64_t v124 = sub_1002344D8(v73, v74, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v75 = v103;
    _os_log_impl((void *)&_mh_execute_header, v103, v72, "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActivated: %{BOOL}d, linkLifetimeScope: %s", (uint8_t *)v63, 0x30u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v55 = v116;
    NSString v56 = v117;
  }
  else
  {
    ((void (*)(unsigned char *, NSString))v55[1])(v16, v56);

    swift_bridgeObjectRelease_n();
    Class v70 = isa;
  }
  uint64_t v116 = *(void **)&v121[OBJC_IVAR___CSDConversationLinkManager_service];
  id v76 = v116;
  NSString v117 = String._bridgeToObjectiveC()();
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_10048F550;
  id v78 = [v76 name];
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;

  *(void *)(v77 + 32) = v79;
  *(void *)(v77 + 40) = v81;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v82 = v114;
  v105(v114, v119, v56);
  uint64_t v83 = v112;
  sub_1002B6BCC((uint64_t)v123, (uint64_t)v112);
  unint64_t v84 = (*((unsigned __int8 *)v55 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v55 + 80);
  unint64_t v119 = (v84 + v113 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v85 = (v84 + v113 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v86 = (*(unsigned __int8 *)(v111 + 80) + v85 + 8) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
  id v87 = (void *)swift_allocObject();
  NSString v88 = v56;
  unint64_t v89 = v121;
  uint64_t v90 = v122;
  void v87[2] = sub_1002B7F74;
  v87[3] = v90;
  v87[4] = v89;
  v87[5] = v33;
  ((void (*)(char *, unsigned char *, NSString))v55[4])((char *)v87 + v84, v82, v88);
  uint64_t v91 = v120;
  id v92 = (char *)v87 + v119;
  uint64_t v93 = v108;
  unint64_t v94 = v107;
  *(void *)id v92 = v108;
  *((void *)v92 + 1) = v94;
  v92[16] = v118 & 1;
  *(void *)((char *)v87 + v85) = v91;
  sub_1002B6C34((uint64_t)v83, (uint64_t)v87 + v86);
  *(void *)((char *)v87 + (((unint64_t)v70 + v86 + 7) & 0xFFFFFFFFFFFFFFF8)) = v115;
  aBlock[4] = (uint64_t)sub_1002B6C98;
  void aBlock[5] = (uint64_t)v87;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002031C0;
  uint64_t aBlock[3] = (uint64_t)&unk_100511D88;
  uint64_t v95 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v96 = v121;
  id v33 = v33;
  sub_100249550(v93, v94);
  swift_release();
  uint64_t v97 = v117;
  Class v98 = isa;
  [v116 provisionPseudonymForHandle:v33 featureID:v117 scopeID:0 expiryDuration:isa allowedServices:v95 completionHandler:a8];
  _Block_release(v95);

  sub_1001FCB18(v93, v94);
  id v39 = v109;
LABEL_17:

  sub_1002B6B70((uint64_t)v123);
  swift_release();
  _Block_release(v39);
}

uint64_t sub_1002AB1C4(unint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, char *a6, double a7)
{
  uint64_t v99 = a5;
  int v100 = a4;
  uint64_t v105 = a3;
  unint64_t v101 = a1;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v10 - 8);
  uint64_t v104 = v10;
  uint64_t v11 = *(void *)(v103 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  Class v98 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v86 - v13;
  uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ConversationLinkKeyAgreement();
  uint64_t v96 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v96 + 64);
  uint64_t v21 = __chkstk_darwin(v19 - 8);
  uint64_t v97 = (uint64_t)v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v86 - v22;
  uint64_t v102 = a6;
  uint64_t v24 = *(void (**)(uint64_t))&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v25 = swift_retain();
  NSArray v106 = v23;
  v24(v25);
  swift_release();
  id v26 = (id)TUNormalizedHandleForTUHandle();
  if (v26)
  {
    id v27 = v26;
    sub_1002E5874(v26);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v30 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (v32 >> 60 == 15)
      {
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_1001F5F88(v33, (uint64_t)qword_100594C10);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?", v36, 2u);
          swift_slowDealloc();
        }

        id v37 = sub_1002B20E4(0, 0);
        sub_1002A0C10(0, (uint64_t)v37);
      }
      else
      {
        unint64_t v94 = v32;
        uint64_t v95 = v30;
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        sub_1001F5F88(v45, (uint64_t)qword_100594C10);
        uint64_t v47 = v103;
        uint64_t v46 = v104;
        id v48 = *(void (**)(char *, unint64_t, uint64_t))(v103 + 16);
        uint64_t v93 = v103 + 16;
        id v92 = v48;
        v48(v14, v101, v104);
        swift_bridgeObjectRetain_n();
        id v49 = a2;
        unint64_t v50 = Logger.logObject.getter();
        LODWORD(v89) = static os_log_type_t.default.getter();
        BOOL v51 = os_log_type_enabled(v50, (os_log_type_t)v89);
        uint64_t v90 = v11;
        if (v51)
        {
          os_log_t isa = v50;
          uint64_t v52 = swift_slowAlloc();
          uint64_t v91 = (void *)swift_slowAlloc();
          uint64_t v87 = swift_slowAlloc();
          aBlock[0] = v87;
          *(_DWORD *)uint64_t v52 = 136316162;
          v86[1] = v52 + 4;
          sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v107 = sub_1002344D8(v53, v54, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v103 + 8))(v14, v46);
          *(_WORD *)(v52 + 12) = 2112;
          uint64_t v107 = (uint64_t)v49;
          id v55 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v91 = a2;

          *(_WORD *)(v52 + 22) = 2080;
          char v56 = v100;
          if (v105)
          {
            uint64_t v107 = v105;
            swift_bridgeObjectRetain();
            sub_1001F081C(&qword_100587A40);
            uint64_t v57 = String.init<A>(reflecting:)();
            unint64_t v59 = v58;
          }
          else
          {
            unint64_t v59 = 0xE300000000000000;
            uint64_t v57 = 7104878;
          }
          uint64_t v61 = v99;
          uint64_t v107 = sub_1002344D8(v57, v59, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v52 + 32) = 1024;
          LODWORD(v107) = v56 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v52 + 38) = 2080;
          uint64_t v107 = v61;
          type metadata accessor for TUConversationLinkLifetimeScope(0);
          uint64_t v62 = String.init<A>(reflecting:)();
          uint64_t v107 = sub_1002344D8(v62, v63, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v64 = isa;
          _os_log_impl((void *)&_mh_execute_header, isa, (os_log_type_t)v89, "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActivated: %{BOOL}d, linkLifetimeScope: %s", (uint8_t *)v52, 0x30u);
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v60 = v103;
          uint64_t v46 = v104;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v46);

          swift_bridgeObjectRelease_n();
          uint64_t v60 = v47;
        }
        id v89 = *(id *)&v102[OBJC_IVAR___CSDConversationLinkManager_service];
        id v65 = v89;
        uint64_t v91 = String._bridgeToObjectiveC()();
        sub_1001F081C((uint64_t *)&unk_100585280);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_10048F550;
        id v67 = [v65 name];
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v70 = v69;

        *(void *)(v66 + 32) = v68;
        *(void *)(v66 + 40) = v70;
        os_log_t isa = (os_log_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v71 = v98;
        v92(v98, v101, v46);
        uint64_t v72 = v97;
        sub_1002B6BCC((uint64_t)v106, v97);
        unint64_t v73 = (*(unsigned __int8 *)(v60 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
        unint64_t v101 = (v73 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v74 = (v73 + v90 + 31) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v75 = (*(unsigned __int8 *)(v96 + 80) + v74 + 8) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
        id v76 = (char *)swift_allocObject();
        *((void *)v76 + 2) = sub_1002A0C10;
        *((void *)v76 + 3) = 0;
        uint64_t v77 = v102;
        *((void *)v76 + 4) = v102;
        *((void *)v76 + 5) = v27;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v76[v73], v71, v104);
        id v78 = &v76[v101];
        uint64_t v79 = v95;
        unint64_t v80 = v94;
        *(void *)id v78 = v95;
        *((void *)v78 + 1) = v80;
        v78[16] = v100 & 1;
        *(void *)&v76[v74] = v105;
        sub_1002B6C34(v72, (uint64_t)&v76[v75]);
        *(void *)&v76[(v20 + v75 + 7) & 0xFFFFFFFFFFFFFFF8] = v99;
        aBlock[4] = (uint64_t)sub_1002B6C98;
        void aBlock[5] = (uint64_t)v76;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1002031C0;
        uint64_t aBlock[3] = (uint64_t)&unk_100511860;
        uint64_t v81 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        id v82 = v77;
        id v27 = v27;
        sub_100249550(v79, v80);
        swift_release();
        uint64_t v83 = v91;
        os_log_t v84 = isa;
        [v89 provisionPseudonymForHandle:v27 featureID:v91 scopeID:0 expiryDuration:isa allowedServices:v81 completionHandler:a7];
        _Block_release(v81);

        sub_1001FCB18(v79, v80);
      }
      goto LABEL_25;
    }
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_1001F5F88(v38, (uint64_t)qword_100594C10);
  id v39 = a2;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v42 = 138412290;
    aBlock[0] = (uint64_t)v39;
    uint64_t v44 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v43 = a2;

    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Cannot normalize value for originator handle %@", v42, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v40 = v39;
  }

  id v27 = sub_1002B20E4(10, 0);
  sub_1002A0C10(0, (uint64_t)v27);
LABEL_25:

  return sub_1002B6B70((uint64_t)v106);
}

uint64_t sub_1002ABD74(unint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(void, id), uint64_t a7, double a8)
{
  id v121 = a6;
  uint64_t v122 = a7;
  uint64_t v114 = a5;
  int v115 = a4;
  uint64_t v120 = a3;
  unint64_t v116 = a1;
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v118 = v13;
  uint64_t v119 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v12);
  uint64_t v113 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  sub_1001F6398();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  uint64_t v21 = sub_1002B8234();
  uint64_t v22 = sub_1002462DC(v21);
  uint64_t v111 = v23;
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v26 = __chkstk_darwin(v22);
  uint64_t v112 = (uint64_t)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v102 - v27;
  NSString v117 = v8;
  uint64_t v29 = *(void (**)(uint64_t))&v8[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v30 = swift_retain();
  id v123 = v28;
  v29(v30);
  swift_release();
  id v31 = (id)TUNormalizedHandleForTUHandle();
  if (v31)
  {
    id v32 = v31;
    sub_1002E5874(v31);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    if (v34)
    {
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v35 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      unint64_t v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v9, v17);
      if (v37 >> 60 == 15)
      {
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        id v39 = (void *)sub_1002466F4(v38, (uint64_t)qword_100594C10);
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (sub_10026B89C(v40))
        {
          *(_WORD *)sub_100246544() = 0;
          sub_1002B84D0((void *)&_mh_execute_header, v41, v42, "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?");
          sub_1001F63CC();
        }

        id v43 = sub_1002B20E4(0, 0);
        v121(0, v43);
      }
      else
      {
        unint64_t v109 = v37;
        uint64_t v110 = v35;
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        sub_1002B84A0(v53, (uint64_t)qword_100594C10);
        uint64_t v54 = v118;
        uint64_t v55 = *(void *)(v118 + 16);
        uint64_t v108 = v118 + 16;
        uint64_t v107 = v55;
        sub_10024640C();
        v56();
        swift_bridgeObjectRetain_n();
        id v57 = a2;
        unint64_t v58 = Logger.logObject.getter();
        LODWORD(v105) = static os_log_type_t.default.getter();
        if (sub_10026B94C((os_log_type_t)v105))
        {
          os_log_t isa = v58;
          uint64_t v59 = swift_slowAlloc();
          NSArray v106 = (void *)sub_100235BB8();
          uint64_t v103 = swift_slowAlloc();
          aBlock[0] = v103;
          *(_DWORD *)uint64_t v59 = 136316162;
          uint64_t v102 = (uint64_t *)(v59 + 4);
          sub_1002B6568((unint64_t *)&qword_10058B060, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v124 = sub_1002344D8(v60, v61, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v62 = sub_1002B82F4();
          v63(v62);
          *(_WORD *)(v59 + 12) = 2112;
          uint64_t v124 = (uint64_t)v57;
          id v64 = v57;
          uint64_t v102 = aBlock;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v106 = a2;

          *(_WORD *)(v59 + 22) = 2080;
          char v65 = v115;
          if (v120)
          {
            uint64_t v124 = v120;
            swift_bridgeObjectRetain();
            sub_1001F081C(&qword_100587A40);
            uint64_t v66 = String.init<A>(reflecting:)();
            unint64_t v68 = v67;
          }
          else
          {
            unint64_t v68 = 0xE300000000000000;
            uint64_t v66 = 7104878;
          }
          uint64_t v72 = v114;
          uint64_t v124 = sub_1002344D8(v66, v68, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v59 + 32) = 1024;
          LODWORD(v124) = v65 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v59 + 38) = 2080;
          uint64_t v124 = v72;
          type metadata accessor for TUConversationLinkLifetimeScope(0);
          uint64_t v73 = String.init<A>(reflecting:)();
          uint64_t v124 = sub_1002344D8(v73, v74, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v75 = isa;
          _os_log_impl((void *)&_mh_execute_header, isa, (os_log_type_t)v105, "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActivated: %{BOOL}d, linkLifetimeScope: %s", (uint8_t *)v59, 0x30u);
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          sub_1001F63CC();
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          uint64_t v71 = v118;
        }
        else
        {
          uint64_t v69 = sub_1002B82F4();
          v70(v69);

          swift_bridgeObjectRelease_n();
          uint64_t v71 = v54;
        }
        id v105 = *(id *)&v117[OBJC_IVAR___CSDConversationLinkManager_service];
        id v76 = v105;
        NSArray v106 = String._bridgeToObjectiveC()();
        sub_1001F081C((uint64_t *)&unk_100585280);
        uint64_t v77 = sub_1002B8180();
        *(_OWORD *)(v77 + 16) = xmmword_10048F550;
        id v78 = [v76 name];
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v81 = v80;

        *(void *)(v77 + 32) = v79;
        *(void *)(v77 + 40) = v81;
        os_log_t isa = (os_log_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v82 = v113;
        sub_10024640C();
        v83();
        uint64_t v84 = v112;
        sub_1002B6BCC((uint64_t)v123, v112);
        unint64_t v85 = (*(unsigned __int8 *)(v71 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v116 = (v85 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v86 = (v85 + v15 + 31) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v87 = (*(unsigned __int8 *)(v111 + 80) + v86 + 8) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
        unint64_t v88 = (v25 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
        id v89 = (char *)swift_allocObject();
        uint64_t v90 = v71;
        uint64_t v91 = v122;
        *((void *)v89 + 2) = v121;
        *((void *)v89 + 3) = v91;
        id v92 = v117;
        *((void *)v89 + 4) = v117;
        *((void *)v89 + 5) = v32;
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(&v89[v85], v82, v119);
        uint64_t v93 = &v89[v116];
        unint64_t v94 = v109;
        *(void *)uint64_t v93 = v110;
        *((void *)v93 + 1) = v94;
        v93[16] = v115 & 1;
        *(void *)&v89[v86] = v120;
        sub_1002B6C34(v84, (uint64_t)&v89[v87]);
        *(void *)&v89[v88] = v114;
        aBlock[4] = (uint64_t)sub_1002B6C98;
        void aBlock[5] = (uint64_t)v89;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1002031C0;
        uint64_t aBlock[3] = (uint64_t)&unk_100511248;
        uint64_t v95 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        id v96 = v92;
        id v32 = v32;
        uint64_t v97 = v110;
        unint64_t v98 = v109;
        sub_100249550(v110, v109);
        swift_release();
        uint64_t v99 = v106;
        os_log_t v100 = isa;
        [v105 provisionPseudonymForHandle:v32 featureID:v106 scopeID:0 expiryDuration:isa allowedServices:v95 completionHandler:a8];
        _Block_release(v95);

        sub_1001FCB18(v97, v98);
      }
      goto LABEL_25;
    }
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_1001F5F88(v44, (uint64_t)qword_100594C10);
  id v45 = a2;
  uint64_t v46 = (void *)Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (sub_100202368(v47))
  {
    id v48 = (_DWORD *)sub_100235B18();
    id v49 = (void *)sub_100235BB8();
    *id v48 = 138412290;
    aBlock[0] = (uint64_t)v45;
    id v50 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v49 = a2;

    sub_100202390((void *)&_mh_execute_header, v51, v52, "Cannot normalize value for originator handle %@");
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    uint64_t v46 = v45;
  }

  id v32 = sub_1002B20E4(10, 0);
  v121(0, v32);
LABEL_25:

  return sub_1002B6B70((uint64_t)v123);
}

void sub_1002AC7F8(void *a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, char *a5, void *a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v89 = a7;
  id v90 = (id)a8;
  uint64_t v91 = a5;
  id v92 = a1;
  uint64_t v93 = a3;
  uint64_t v94 = a4;
  uint64_t v87 = a13;
  id v88 = a6;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1001F5F88(v22, (uint64_t)qword_100594C10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to provision pseudonym with error from IDS: %@)", v25, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v93(0, a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    unint64_t v82 = a9;
    int v83 = a10;
    uint64_t v84 = v15;
    uint64_t v85 = a11;
    uint64_t v86 = a12;
    uint64_t v28 = v92;
    if (v92)
    {
      uint64_t v29 = v21;
      sub_1001F6204(0, &qword_100587A48);
      id v30 = v88;
      id v31 = v28;
      id v32 = sub_10029E0A4((uint64_t)v30);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v29, v89, v18);
      id v33 = v32;
      id v34 = [v31 URI];
      id v35 = [v34 prefixedURI];

      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      id v39 = objc_allocWithZone((Class)TUMutableConversationLinkDescriptor);
      uint64_t v40 = (uint64_t)v90;
      unint64_t v41 = v82;
      sub_1001F7440((uint64_t)v90, v82);
      uint64_t v42 = (uint64_t)v29;
      id v43 = v31;
      id v44 = sub_100341E38(v42, v33, v36, v38, v40, v41);
      [v44 setActivated:v83 & 1];
      Date.init()();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v46 = *(void (**)(char *, uint64_t))(v84 + 8);
      v46(v17, v14);
      [v44 setCreationDate:isa];

      id v47 = [v31 properties];
      id v48 = [v47 expirationDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      Class v49 = Date._bridgeToObjectiveC()().super.isa;
      v46(v17, v14);
      [v44 setExpirationDate:v49];

      if (v85)
      {
        sub_1001F6204(0, (unint64_t *)&unk_100586E00);
        sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
        v50.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      }
      else
      {
        v50.super.Class isa = 0;
      }
      uint64_t v56 = v87;
      objc_msgSend(v44, "setInvitedHandles:", v50.super.isa, v82);

      uint64_t v57 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
      sub_1002B4D80(v57, v58, v44, (SEL *)&selRef_setPrivateKey_);
      [v44 setLinkLifetimeScope:v56];
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      sub_1001F5F88(v59, (uint64_t)qword_100594C10);
      id v60 = v43;
      id v61 = v44;
      id v62 = v60;
      id v63 = v61;
      id v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        unint64_t v67 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 138412546;
        aBlock[0] = v62;
        id v68 = v62;
        id v90 = v62;
        id v69 = v33;
        id v70 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v67 = v92;

        *(_WORD *)(v66 + 12) = 2112;
        aBlock[0] = v63;
        id v71 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v67[1] = v63;

        id v33 = v69;
        id v62 = v90;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Successfully provisioned pseudonym %@ and link descriptor %@", (uint8_t *)v66, 0x16u);
        sub_1001F081C(&qword_100585900);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v72 = v91;
      uint64_t v73 = *(void **)&v91[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_10048F560;
      *(void *)(v74 + 32) = v63;
      aBlock[0] = v74;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      id v75 = v63;
      Class v76 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v77 = (void *)swift_allocObject();
      uint64_t v78 = v94;
      v77[2] = v93;
      v77[3] = v78;
      v77[4] = v75;
      v77[5] = v72;
      aBlock[4] = sub_1002B6CB4;
      void aBlock[5] = v77;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100317DEC;
      uint64_t aBlock[3] = &unk_100511298;
      uint64_t v79 = _Block_copy(aBlock);
      id v80 = v75;
      swift_retain();
      id v81 = v72;
      swift_release();
      [v73 addConversationLinkDescriptors:v76 completion:v79];
      _Block_release(v79);
    }
    else
    {
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_1001F5F88(v51, (uint64_t)qword_100594C10);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to provision pseudonym with error from IDS, pseudonym was nil", v54, 2u);
        swift_slowDealloc();
      }

      id v92 = sub_1002B20E4(0, 0);
      v93(0, (uint64_t)v92);
      uint64_t v55 = v92;
    }
  }
}

uint64_t sub_1002AD1A8(char a1, uint64_t a2, uint64_t (*a3)(id, uint64_t), uint64_t a4, uint64_t a5)
{
  if ((a1 & 1) == 0) {
    return a3(0, a2);
  }
  id v7 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:a5];
  a3(v7, a2);

  return sub_10033991C();
}

uint64_t sub_1002AD244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1002AD268, 0, 0);
}

uint64_t sub_1002AD268()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = type metadata accessor for Date();
  *uint64_t v5 = v0;
  v5[1] = sub_1002AD36C;
  uint64_t v7 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD00000000000001ALL, 0x80000001004841F0, sub_1002B68A8, v4, v6);
}

uint64_t sub_1002AD36C()
{
  sub_1001F63B4();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10023D230();
  *uint64_t v5 = v4;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002AD478, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    sub_1001F643C();
    return v6();
  }
}

uint64_t sub_1002AD478()
{
  swift_task_dealloc();
  sub_1001F643C();
  return v0();
}

uint64_t sub_1002AD4D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1001F081C(&qword_100587A38);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v12 + ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_bridgeObjectRetain();
  id v13 = a2;
  sub_1002A9CEC();
  return swift_release();
}

void sub_1002AD658(void *a1, void (*a2)(char *, uint64_t), uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  id v43 = a2;
  id v44 = (id)a5;
  unint64_t v42 = a4;
  uint64_t v45 = sub_1001F081C(&qword_100587A38);
  uint64_t v41 = *(void *)(v45 - 8);
  uint64_t v9 = *(void *)(v41 + 64);
  __chkstk_darwin(v45);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v40 - v16;
  if (a1)
  {
    id v18 = a1;
    sub_1002AE300();
    if (v19)
    {
      static Date.now.getter();
      v40[1] = a6;
      [*(id *)(a6 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkRenewalExtensionTime];
      Date.addingTimeInterval(_:)();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
      unint64_t v42 = v12 + 8;
      id v43 = v20;
      v20(v15, v11);
      uint64_t v21 = v41;
      uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      unint64_t v23 = (unint64_t)v44;
      id v44 = v18;
      uint64_t v24 = v45;
      v22((char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v45);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
      unint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      unint64_t v26 = (v9 + *(unsigned __int8 *)(v12 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v27 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v27 + v25, v10, v24);
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v27 + v26, v15, v11);
      uint64_t v28 = v44;
      sub_1002AE808((unint64_t)v44, (uint64_t)v17, (void (*)(void, void *))sub_1002B6ACC, v27);
      swift_release();

      v43(v17, v11);
    }
    else
    {
      if (v43) {
        id v38 = v43;
      }
      else {
        id v38 = sub_1002B20E4(15, 0);
      }
      uint64_t v47 = (uint64_t)v38;
      swift_errorRetain();
      CheckedContinuation.resume(throwing:)();
    }
  }
  else
  {
    uint64_t v29 = a3;
    unint64_t v30 = v42;
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1001F5F88(v31, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    id v32 = v43;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1002344D8(v29, v30, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12) = 2112;
      if (v32)
      {
        swift_errorRetain();
        uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v46 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v46 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v37 = 0;
      }
      *uint64_t v36 = v37;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Asked to renew link for pseudonym %s but none was found %@", (uint8_t *)v35, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    id v39 = v32;
    if (!v32) {
      id v39 = sub_1002B20E4(3, 0);
    }
    uint64_t v47 = (uint64_t)v39;
    swift_errorRetain();
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1002ADC10(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v23 = a2;
      uint64_t v24 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v23 = sub_1002344D8(v16, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Renewing pseudonym failed with error %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v24 = a2;
    sub_1001F081C(&qword_100587A38);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1001F5F88(v18, (uint64_t)qword_100594C10);
    char v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 67109120;
      LODWORD(v24) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Renewing pseudonym succeeded %{BOOL}d", v21, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
    sub_1001F081C(&qword_100587A38);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1002AE034(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a3;
  uint64_t v6 = type metadata accessor for Date();
  v3[3] = v6;
  v3[4] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v3[5] = v7;
  v3[6] = _Block_copy(a2);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v3[7] = v9;
  a3;
  uint64_t v11 = (void *)swift_task_alloc();
  v3[8] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_1002AE17C;
  return sub_1002AD244(v7, v8, v10);
}

uint64_t sub_1002AE17C()
{
  sub_1001F63B4();
  uint64_t v3 = v2;
  uint64_t v5 = *(objc_class **)(v4 + 56);
  uint64_t v6 = *(void **)(v4 + 16);
  uint64_t v7 = *v1;
  sub_10023D230();
  void *v8 = v7;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)();
    sub_1002B83E8();
    swift_errorRelease();
    Class v9 = v5;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_10021EC0C();
    v11();
    Class v9 = isa;
  }
  uint64_t v12 = *(const void **)(v3 + 48);
  sub_100235C6C();
  v13();

  _Block_release(v12);
  swift_task_dealloc();
  sub_1001F643C();
  return v14();
}

void sub_1002AE300()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001F081C(&qword_100584B40);
  uint64_t v5 = sub_100202384(v4);
  __chkstk_darwin(v5);
  sub_1001FCC20();
  uint64_t v6 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v46 - v13;
  id v15 = [v3 expirationDate];
  if (!v15)
  {
    sub_1001F0530(v0, 1, 1, v6);
    goto LABEL_10;
  }
  uint64_t v16 = v15;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v17(v0, v12, v6);
  sub_1001F0530(v0, 0, 1, v6);
  if (sub_1001F758C(v0, 1, v6) == 1)
  {
LABEL_10:
    sub_100235804(v0, &qword_100584B40);
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_1001F5F88(v24, (uint64_t)qword_100594C10);
    id v25 = v3;
    unint64_t v26 = (void *)Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (sub_100202368(v27))
    {
      sub_100235B18();
      uint64_t v28 = (void *)sub_100235BB8();
      sub_1002B8360(5.7779e-34);
      id v49 = v25;
      id v29 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v25;

      sub_100202390((void *)&_mh_execute_header, v30, v31, "Link has no expiration date - not renewing %@");
      sub_1001F081C(&qword_100585900);
      sub_1002B80F4();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    goto LABEL_27;
  }
  v17((uint64_t)v14, (char *)v0, v6);
  Date.timeIntervalSinceNow.getter();
  if (v18 < 0.0)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    os_log_type_t v20 = (void *)sub_1002466F4(v19, (uint64_t)qword_100594C10);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (sub_10027D4F8(v21))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_10027D530((void *)&_mh_execute_header, v22, v23, "Link has already expired - not renewing");
      sub_1001F63CC();
    }

LABEL_26:
    uint64_t v44 = sub_1002B8504();
    v45(v44);
    goto LABEL_27;
  }
  uint64_t v32 = sub_1003423E8(v3);
  unint64_t v34 = v33;
  sub_1001FCB18(v32, v33);
  if (v34 >> 60 == 15)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_1001F5F88(v35, (uint64_t)qword_100594C10);
    id v36 = v3;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    id v48 = v37;
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (_DWORD *)sub_100235B18();
      uint64_t v47 = (void *)sub_100235BB8();
      *id v39 = 138412290;
      id v49 = v36;
      id v40 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v36;

      sub_1002B839C((void *)&_mh_execute_header, v48, v38, "Not link creator for %@ - not renewing");
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    goto LABEL_26;
  }
  Date.timeIntervalSinceNow.getter();
  if ((~*(void *)&v41 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v41 <= -1.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v41 < 1.84467441e19)
  {
    [*(id *)(v1 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkRemainingTimeBeforeAutoRenewal];
    uint64_t v42 = sub_1002B8504();
    v43(v42);
LABEL_27:
    sub_1001FCC08();
    return;
  }
LABEL_30:
  __break(1u);
}

void sub_1002AE808(unint64_t a1, uint64_t a2, void (*a3)(void, void *), uint64_t a4)
{
  unint64_t v138 = a3;
  uint64_t v8 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F7650();
  uint64_t v130 = v12;
  sub_1002B8138();
  __chkstk_darwin(v13);
  int v131 = (char *)&v119 - v14;
  uint64_t v128 = type metadata accessor for DispatchWorkItemFlags();
  sub_10020233C();
  __chkstk_darwin(v15);
  sub_1001FCCD0();
  uint64_t v129 = v16;
  uint64_t v127 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v126 = v17;
  __chkstk_darwin(v18);
  uint64_t v124 = v19;
  unint64_t v20 = (unint64_t)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A08 != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v21 = type metadata accessor for Logger();
  sub_1002B84A0(v21, (uint64_t)qword_100594C10);
  uint64_t v22 = (id)a1;
  uint64_t v137 = v4;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v134 = a2;
  uint64_t v135 = a4;
  uint64_t v132 = v10;
  uint64_t v133 = v8;
  unint64_t v125 = v20;
  if (v25)
  {
    unint64_t v26 = (_DWORD *)sub_100235B18();
    os_log_type_t v27 = (void *)sub_100235BB8();
    *unint64_t v26 = 138412290;
    uint64_t v10 = v26 + 1;
    uint64_t aBlock = v22;
    uint64_t v28 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v22;

    sub_1002B839C((void *)&_mh_execute_header, v23, v24, "Asking to renew pseudonym for %@");
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  [v22 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_100587A10);
  if (!swift_dynamicCast())
  {
    double v41 = v22;
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (sub_100202368(v43))
    {
      sub_100235B18();
      uint64_t v44 = (void *)sub_100235BB8();
      sub_1002B8360(5.7779e-34);
      uint64_t aBlock = v41;
      uint64_t v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v41;

      sub_100202390((void *)&_mh_execute_header, v46, v47, "Failed to create mutable descriptor for descriptor %@");
      sub_1001F081C(&qword_100585900);
      sub_1002B80F4();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      uint64_t v42 = v41;
    }

    if (v138)
    {
      sub_1002B6420();
      swift_allocError();
      *id v48 = 3;
      uint64_t v49 = sub_1002B8384();
      v50(v49);
      swift_errorRelease();
    }
    return;
  }
  id v29 = v146;
  id v123 = v22;
  id v30 = [v22 originator];
  id v31 = [v30 identifier];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  a1 = *(void *)&v136[OBJC_IVAR___CSDConversationLinkManager_service];
  id v35 = [(id)a1 localDeviceUniqueID];
  if (v35)
  {
    uint64_t v10 = v35;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    if (v32 == v36 && v34 == v38)
    {
      swift_bridgeObjectRelease_n();
LABEL_33:
      os_log_type_t v65 = v136;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (sub_10026B94C(v67))
      {
        id v68 = (_DWORD *)sub_100235B18();
        uint64_t v146 = (void *)sub_100202470();
        *id v68 = 136315138;
        id v69 = [(id)a1 localDeviceUniqueID];
        if (v69)
        {
          id v70 = v69;
          id v71 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v72 = v29;
          uint64_t v74 = v73;

          uint64_t aBlock = v71;
          uint64_t v141 = v74;
          id v29 = v72;
          uint64_t v75 = String.init<A>(reflecting:)();
          unint64_t v77 = v76;
        }
        else
        {
          unint64_t v77 = 0xE300000000000000;
          uint64_t v75 = 7104878;
        }
        uint64_t aBlock = (void *)sub_1002344D8(v75, v77, (uint64_t *)&v146);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        sub_1002B839C((void *)&_mh_execute_header, v66, v67, "The local device (%s) generated this link, sending renew request now.");
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
      }
      id v86 = v123;
      NSString v87 = [v123 pseudonym];
      if (!v87)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v89 = (char *)sub_100246A38();
      uint64_t v90 = (uint64_t)v138;
      uint64_t v91 = v135;
      *((void *)v89 + 2) = v138;
      *((void *)v89 + 3) = v91;
      *((void *)v89 + 4) = v29;
      *((void *)v89 + 5) = v65;
      *((void *)v89 + 6) = v86;
      unint64_t v144 = sub_1002B6600;
      uint64_t v145 = v89;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v141 = 1107296256;
      uint64_t v142 = sub_1002AF8F0;
      uint64_t v143 = &unk_100511090;
      id v92 = _Block_copy(&aBlock);
      id v93 = v86;
      uint64_t v94 = v65;
      sub_1002084D8(v90);
      int v83 = v29;
      swift_release();
      [(id)a1 renewPseudonymString:v87 expirationDate:isa completionHandler:v92];
      _Block_release(v92);

LABEL_46:
      return;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_33;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v51 = [(id)a1 localDeviceUniqueID];
  if (!v51)
  {
    uint64_t v78 = (void *)Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (sub_10026B89C(v79))
    {
      id v80 = (_WORD *)sub_100246544();
      sub_100246668(v80);
      sub_100246944((void *)&_mh_execute_header, v81, v82, "No IDS unique ID found, cannot schedule renew.");
      sub_1001F63CC();
    }

    if (!v138)
    {

      return;
    }
    int v83 = sub_1002B20E4(9, 0);
    uint64_t v84 = sub_1002B8384();
    v85(v84);

    goto LABEL_46;
  }
  uint64_t v52 = v51;
  uint64_t v122 = v29;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v56 = sub_1002B8180();
  *(_OWORD *)(v56 + 16) = xmmword_10048F550;
  uint64_t v120 = v53;
  *(void *)(v56 + 32) = v53;
  *(void *)(v56 + 40) = v55;
  uint64_t v121 = v55;
  swift_bridgeObjectRetain();
  id v57 = [(id)a1 devices];
  sub_1001F6204(0, (unint64_t *)&qword_100585F20);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v20 >> 62))
  {
    uint64_t v8 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_22;
    }
LABEL_52:
    swift_bridgeObjectRelease();
    uint64_t aBlock = (void *)v56;
    swift_bridgeObjectRetain();
    sub_1002B3F50((uint64_t *)&aBlock);
    swift_bridgeObjectRelease();
    uint64_t v95 = sub_10030D0B0(v120, v121, aBlock);
    char v97 = v96;
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v98 = v138;
    uint64_t v99 = v122;
    if ((v97 & 1) == 0)
    {
      uint64_t v100 = v126;
      unint64_t v139 = v95;
      unint64_t v101 = v125;
      uint64_t v102 = v127;
      sub_10024640C();
      v103();
      unint64_t v104 = (*(unsigned __int8 *)(v100 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      id v105 = (char *)swift_allocObject();
      uint64_t v106 = v135;
      id v107 = v136;
      *((void *)v105 + 2) = v136;
      *((void *)v105 + 3) = v99;
      id v108 = v123;
      *((void *)v105 + 4) = v123;
      *((void *)v105 + 5) = v98;
      *((void *)v105 + 6) = v106;
      (*(void (**)(char *, unint64_t, uint64_t))(v100 + 32))(&v105[v104], v101, v102);
      unint64_t v144 = sub_1002B651C;
      uint64_t v145 = v105;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v141 = 1107296256;
      uint64_t v142 = sub_1002C2C88;
      uint64_t v143 = &unk_100511040;
      _Block_copy(&aBlock);
      uint64_t v146 = _swiftEmptyArrayStorage;
      id v109 = v108;
      v107;
      sub_1002084D8((uint64_t)v98);
      sub_1002B6568((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      id v110 = v99;
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      DispatchWorkItem.init(flags:block:)();
      swift_release();
      uint64_t v111 = swift_retain();
      sub_10029AF18(v111);
      sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
      uint64_t v112 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v113 = (void (*)(void))*((void *)v132 + 1);
      sub_10021EC0C();
      v113();
      OS_dispatch_queue.asyncAfter(deadline:execute:)();

      swift_release();
      sub_10021EC0C();
      v113();
      return;
    }
    uint64_t v114 = (void *)Logger.logObject.getter();
    os_log_type_t v115 = static os_log_type_t.error.getter();
    if (sub_10026B89C(v115))
    {
      unint64_t v116 = (_WORD *)sub_100246544();
      sub_100246668(v116);
      sub_100246944((void *)&_mh_execute_header, v117, v118, "Could not find index of our own uniqueID, aborting...");
      sub_1001F63CC();
    }

    if (!v98)
    {

      return;
    }
    int v83 = sub_1002B20E4(9, 0);
    v98(0, v83);

    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_52;
  }
LABEL_22:
  unint64_t v139 = v20 & 0xC000000000000001;
  a2 = 4;
  while (1)
  {
    a4 = a2 - 4;
    if (v139)
    {
      sub_1002B8460();
      id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      id v58 = *(id *)(v20 + 8 * a2);
    }
    uint64_t v59 = v58;
    uint64_t v4 = a2 - 3;
    if (__OFADD__(a4, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v60 = sub_1002B4C14(v58, (SEL *)&selRef_uniqueID);
    if (!v61) {
      break;
    }
    uint64_t v62 = v60;
    uint64_t v10 = v61;
    a1 = *(void *)(v56 + 16);
    if (a1 >= *(void *)(v56 + 24) >> 1)
    {
      sub_1003A47C8();
      uint64_t v56 = v64;
    }
    *(void *)(v56 + 16) = a1 + 1;
    uint64_t v63 = v56 + 16 * a1;
    *(void *)(v63 + 32) = v62;
    *(void *)(v63 + 40) = v10;

    ++a2;
    if (v4 == v8) {
      goto LABEL_52;
    }
  }
  __break(1u);
  swift_release();
  __break(1u);
}