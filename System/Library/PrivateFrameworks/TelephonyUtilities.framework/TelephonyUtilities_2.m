uint64_t sub_1002AF4FC(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t), uint64_t a5, objc_class *a6, char *a7, void *a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  void (*v22)(char *, char *, uint64_t);
  NSDate v23;
  Class isa;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  Class v41;
  uint64_t v42;
  void (*v43)(unint64_t, char *, uint64_t);
  id v44;
  Class v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(void, uint64_t);
  void aBlock[6];

  v46 = a8;
  v47 = a7;
  v45 = a6;
  v48 = a5;
  v49 = a4;
  v11 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v11 - 8);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date();
  v15 = *(void *)(v14 - 8);
  v16 = *(void *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v42 - v19;
  sub_1002B7464(a2, (uint64_t)v13, &qword_100584B40);
  if (sub_1001F758C((uint64_t)v13, 1, v14) == 1)
  {
    result = sub_100235804((uint64_t)v13, &qword_100584B40);
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v22(v20, v13, v14);
    if (!a3)
    {
      v23.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v43 = (void (*)(unint64_t, char *, uint64_t))v22;
      isa = v23.super.isa;
      v25 = v45;
      [(objc_class *)v45 setExpirationDate:v23.super.isa];

      sub_10029E3C0(v26);
      [(objc_class *)v25 setDeletionDate:0];
      v44 = *(id *)&v47[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_10048F560;
      *(void *)(v27 + 32) = v25;
      aBlock[0] = v27;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      v28 = v25;
      v45 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
      v29 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v30 = (v16 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
      v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
      v32 = swift_allocObject();
      v33 = v46;
      *(void *)(v32 + 16) = v46;
      v43(v32 + v29, v18, v14);
      v34 = (void *)(v32 + v30);
      v35 = v48;
      v36 = (uint64_t)v49;
      *v34 = v49;
      v34[1] = v35;
      v37 = v47;
      *(void *)(v32 + v31) = v47;
      aBlock[4] = sub_1002B6614;
      aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100317DEC;
      aBlock[3] = &unk_1005110E0;
      v38 = _Block_copy(aBlock);
      v39 = v33;
      sub_1002084D8(v36);
      v40 = v37;
      swift_release();
      v41 = v45;
      [v44 addOrUpdateConversationLinkDescriptors:v45 completion:v38];
      _Block_release(v38);

      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }
  if (v49) {
    return v49(a1 & 1, a3);
  }
  return result;
}

uint64_t sub_1002AF8F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v8 - 8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(uint64_t, char *, void *))(a1 + 32);
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = 1;
  }
  sub_1001F0530((uint64_t)v10, v13, 1, v12);
  swift_retain();
  id v14 = a4;
  v11(a2, v10, a4);
  swift_release();

  return sub_100235804((uint64_t)v10, &qword_100584B40);
}

uint64_t sub_1002AFA00(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23 = a1;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a2 pseudonym];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  v18 = v23;
  *((void *)v17 + 4) = a5;
  *((void *)v17 + 5) = v18;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], v14, v11);
  id v19 = a3;
  sub_1002084D8(a4);
  id v20 = v18;
  sub_1002A9CEC();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1002AFBB8(void *a1, uint64_t a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, char *a6)
{
  if (a1
    && ([a1 mutableCopy],
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        sub_1001F6204(0, (unint64_t *)&unk_100587A10),
        (swift_dynamicCast() & 1) != 0))
  {
    id v10 = v28;
    uint64_t v11 = *(void **)&a6[OBJC_IVAR___CSDConversationLinkManager_service];
    NSString v12 = [v28 pseudonym];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v14 = (void *)swift_allocObject();
    v14[2] = a4;
    v14[3] = a5;
    v14[4] = v10;
    v14[5] = a6;
    aBlock[4] = sub_1002B673C;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002AF8F0;
    aBlock[3] = &unk_100511158;
    id v15 = _Block_copy(aBlock);
    sub_1002084D8((uint64_t)a4);
    id v16 = v10;
    v17 = a6;
    swift_release();
    [v11 renewPseudonymString:v12 expirationDate:isa completionHandler:v15];
    _Block_release(v15);
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1001F5F88(v18, (uint64_t)qword_100594C10);
    id v19 = a3;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v26 = (void *)swift_slowAlloc();
      aBlock[0] = v19;
      *(_DWORD *)uint64_t v22 = 138412290;
      v23 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v19;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create mutable descriptor for descriptor %@", v22, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v20 = v19;
    }

    if (a4)
    {
      sub_1002B6420();
      uint64_t v24 = swift_allocError();
      void *v25 = 3;
      a4(0, v24);
      swift_errorRelease();
    }
  }
}

uint64_t sub_1002AFF48(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t), uint64_t a5, objc_class *a6, char *a7)
{
  Class v42 = a6;
  v43 = a7;
  uint64_t v44 = a5;
  v45 = a4;
  uint64_t v10 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v10 - 8);
  NSString v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v19 = (char *)&v40 - v18;
  sub_1002B7464(a2, (uint64_t)v12, &qword_100584B40);
  if (sub_1001F758C((uint64_t)v12, 1, v13) == 1)
  {
    uint64_t result = sub_100235804((uint64_t)v12, &qword_100584B40);
  }
  else
  {
    os_log_type_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v21(v19, v12, v13);
    if (!a3)
    {
      v22.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      v40 = (void (*)(unint64_t, char *, uint64_t))v21;
      Class isa = v22.super.isa;
      Class v24 = v42;
      [(objc_class *)v42 setExpirationDate:v22.super.isa];

      sub_10029E3C0(v25);
      id v41 = *(id *)&v43[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_10048F560;
      *(void *)(v26 + 32) = v24;
      aBlock[0] = v26;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      v27 = v24;
      Class v42 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
      unint64_t v28 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      unint64_t v29 = (v15 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v27;
      v40(v31 + v28, v17, v13);
      v32 = (void *)(v31 + v29);
      uint64_t v33 = v44;
      uint64_t v34 = (uint64_t)v45;
      void *v32 = v45;
      v32[1] = v33;
      v35 = v43;
      *(void *)(v31 + v30) = v43;
      aBlock[4] = sub_1002B6814;
      aBlock[5] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100317DEC;
      aBlock[3] = &unk_1005111A8;
      v36 = _Block_copy(aBlock);
      v37 = v27;
      sub_1002084D8(v34);
      id v38 = v35;
      swift_release();
      Class v39 = v42;
      [v41 addOrUpdateConversationLinkDescriptors:v42 completion:v36];
      _Block_release(v36);

      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
  if (v45) {
    return v45(a1 & 1, a3);
  }
  return result;
}

void sub_1002B0324()
{
  sub_1001FCC38();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  type metadata accessor for Date();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1001F2514();
  if ((v9 & 1) == 0)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_1001F5F88(v28, (uint64_t)qword_100594C10);
    id v29 = v5;
    swift_errorRetain();
    id v30 = v29;
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (sub_10026B94C(v32))
    {
      uint64_t v44 = v1;
      char v46 = v9;
      v48 = v3;
      uint64_t v33 = sub_100235B88();
      uint64_t v34 = (void *)sub_100235BB8();
      v49[0] = sub_100202470();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v35 = v7;
      id v36 = [v30 pseudonym];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      sub_1002344D8(v37, v39, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2112;
      if (v35)
      {
        swift_errorRetain();
        uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v40 = 0;
      }
      *uint64_t v34 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v44, (uint8_t *)v33, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      v3 = v48;
      uint64_t v7 = v35;
      char v9 = v46;
      if (!v48) {
        goto LABEL_19;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      if (!v3) {
        goto LABEL_19;
      }
    }
LABEL_18:
    v3(v9 & 1, v7);
    goto LABEL_19;
  }
  uint64_t v47 = v7;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  os_log_type_t v12 = sub_1001F5F88(v11, (uint64_t)qword_100594C10);
  sub_10024640C();
  v13();
  id v14 = v5;
  os_log_type_t v15 = v12;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (sub_10026B89C(v17))
  {
    uint64_t v18 = sub_100235B88();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    id v19 = v3;
    id v20 = [v14 pseudonym];
    v43 = v16;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v45 = v9;
    unint64_t v23 = v22;

    v3 = v19;
    sub_1002344D8(v21, v23, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    char v9 = v45;
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    sub_1002B6568(&qword_100587A20, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_1002344D8(v24, v25, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = sub_1002B83B4();
    v27(v26);
    _os_log_impl((void *)&_mh_execute_header, v43, v15, "Updated expiration date for pseudonym %s to %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    uint64_t v41 = sub_1002B83B4();
    v42(v41);
  }
  uint64_t v7 = v47;
  if (v3) {
    goto LABEL_18;
  }
LABEL_19:
  sub_10033991C();
  sub_1001FCC08();
}

_DWORD *sub_1002B08A0(void *a1, unint64_t a2)
{
  uint64_t v3 = sub_1003423F4(a1);
  v4 = &_swiftEmptySetSingleton;
  if (v3) {
    v4 = (void *)v3;
  }
  uint64_t v54 = (uint64_t)v4;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    Set.Iterator.init(_cocoa:)();
    a2 = (unint64_t)v55[4];
    v52 = v55[5];
    uint64_t v5 = (uint64_t)v55[6];
    id v6 = v55[7];
    unint64_t v7 = (unint64_t)v55[8];
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
    v52 = (void *)(a2 + 56);
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    id v6 = 0;
  }
  int64_t v51 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v11 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate.opt_inst_meths;
  if ((a2 & 0x8000000000000000) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v13 = __CocoaSet.Iterator.next()();
  if (v13)
  {
    v53 = (void *)v13;
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_1002B83E8();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v55[0];
    swift_unknownObjectRelease();
    os_log_type_t v15 = (char *)v6;
    uint64_t v16 = v7;
    if (v14)
    {
      while (1)
      {
        if ([v14 v11[55]] == (id)1) {
          goto LABEL_54;
        }
        id v21 = [v14 v11[55]];
        if (v21 == (id)1) {
          break;
        }
        if (v21 == (id)2)
        {
          NSString v25 = [v14 value];
          if (!v25)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v25 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          sub_100370844(v14);
          if (v26)
          {
            NSString v22 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v22 = 0;
          }
          id v24 = [self normalizedPhoneNumberHandleForValue:v25 isoCountryCode:v22];

          goto LABEL_52;
        }
        if (v21 == (id)3)
        {
          NSString v22 = [v14 value];
          if (!v22)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v22 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          id v23 = [self normalizedEmailAddressHandleForValue:v22];
          goto LABEL_40;
        }
        if (p_opt_inst_meths[321] != (__objc2_meth_list *)-1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_1001F5F88(v27, (uint64_t)qword_100594C10);
        id v28 = v14;
        id v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = sub_100235B18();
          os_log_type_t v32 = (void *)sub_100235BB8();
          *(_DWORD *)uint64_t v31 = 138412290;
          *(void *)(v31 + 4) = v28;
          void *v32 = v14;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unknown handle type used for invited handle %@", (uint8_t *)v31, 0xCu);
          sub_1001F081C(&qword_100585900);
          sub_1002B83CC();
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate + 40);
          sub_1001F63CC();
          uint64_t v11 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          sub_1001F63CC();
        }
        else
        {
        }
LABEL_55:
        id v6 = v15;
        unint64_t v7 = v16;
        if ((a2 & 0x8000000000000000) != 0) {
          goto LABEL_10;
        }
LABEL_13:
        if (v7)
        {
          uint64_t v16 = (v7 - 1) & v7;
          unint64_t v17 = __clz(__rbit64(v7)) | ((void)v6 << 6);
          os_log_type_t v15 = (char *)v6;
        }
        else
        {
          uint64_t v18 = (uint64_t)v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_69;
          }
          if (v18 >= v51) {
            goto LABEL_57;
          }
          unint64_t v19 = v52[v18];
          os_log_type_t v15 = (char *)v6 + 1;
          if (!v19)
          {
            os_log_type_t v15 = (char *)v6 + 2;
            if ((uint64_t)v6 + 2 >= v51) {
              goto LABEL_57;
            }
            unint64_t v19 = v52[(void)v15];
            if (!v19)
            {
              os_log_type_t v15 = (char *)v6 + 3;
              if ((uint64_t)v6 + 3 >= v51) {
                goto LABEL_57;
              }
              unint64_t v19 = v52[(void)v15];
              if (!v19)
              {
                os_log_type_t v15 = (char *)v6 + 4;
                if ((uint64_t)v6 + 4 >= v51) {
                  goto LABEL_57;
                }
                unint64_t v19 = v52[(void)v15];
                if (!v19)
                {
                  uint64_t v20 = (uint64_t)v6 + 5;
                  while (v20 < v51)
                  {
                    unint64_t v19 = v52[v20++];
                    if (v19)
                    {
                      os_log_type_t v15 = (char *)(v20 - 1);
                      goto LABEL_28;
                    }
                  }
                  goto LABEL_57;
                }
              }
            }
          }
LABEL_28:
          uint64_t v16 = (v19 - 1) & v19;
          unint64_t v17 = __clz(__rbit64(v19)) + ((void)v15 << 6);
        }
        id v14 = *(id *)(*(void *)(a2 + 48) + 8 * v17);
        if (!v14) {
          goto LABEL_57;
        }
      }
      NSString v22 = [v14 value];
      if (!v22)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v23 = [self normalizedGenericHandleForValue:v22];
LABEL_40:
      id v24 = v23;
LABEL_52:

      if (v24)
      {
        id v33 = v24;
        sub_1002E00C4((uint64_t)v55, (uint64_t)v33);

        uint64_t v11 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
        goto LABEL_55;
      }
LABEL_54:

      goto LABEL_55;
    }
  }
LABEL_57:
  sub_100206FA0();
  unint64_t v7 = (unint64_t)a1;
  [a1 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_100587A10);
  if (swift_dynamicCast())
  {
    sub_1002B4AAC(v54, v53);
    sub_10029E3C0(v34);
    uint64_t v35 = *(void **)(v49 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
    sub_1001F081C((uint64_t *)&unk_100584DD0);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_10048F560;
    *(void *)(v36 + 32) = v53;
    v55[0] = (id)v36;
    specialized Array._endMutation()();
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    id v37 = v53;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v55[0] = 0;
    LOBYTE(v35) = [v35 addOrUpdateConversationLinkDescriptors:isa error:v55];

    if (v35)
    {
      id v39 = v55[0];
      sub_10033991C();
      uint64_t v40 = [objc_allocWithZone((Class)TUConversationLink) initWithDescriptor:v37];
    }
    else
    {
      uint64_t v40 = v55[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (p_opt_inst_meths[321] != (__objc2_meth_list *)-1) {
LABEL_69:
    }
      swift_once();
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v40 = (_DWORD *)sub_1001F5F88(v41, (uint64_t)qword_100594C10);
    Class v42 = (id)v7;
    v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v40 = (_DWORD *)sub_100235B18();
      char v45 = (void *)sub_100235BB8();
      *uint64_t v40 = 138412290;
      v55[0] = v42;
      char v46 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v45 = v42;

      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Could not create mutable descriptor from descriptor %@", (uint8_t *)v40, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      v43 = v42;
    }

    sub_1002B6420();
    swift_allocError();
    *uint64_t v47 = 3;
    swift_willThrow();
  }
  return v40;
}

void sub_1002B1168()
{
  sub_1001FCC38();
  unint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  v86 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B8138();
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v78 - v6;
  uint64_t v8 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F7650();
  uint64_t v84 = v12;
  sub_1002B8138();
  __chkstk_darwin(v13);
  sub_10026B98C();
  v95 = v14;
  sub_1002B8138();
  __chkstk_darwin(v15);
  sub_10026B98C();
  v88 = v16;
  sub_1002B8138();
  __chkstk_darwin(v17);
  sub_10026B98C();
  uint64_t v89 = v18;
  sub_1002B8138();
  __chkstk_darwin(v19);
  sub_10026B98C();
  uint64_t v85 = v20;
  sub_1002B8138();
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v24 = (unint64_t)&v78 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (uint64_t)&v78 - v25;
  Date.init(timeIntervalSinceNow:)();
  if (qword_100583A08 != -1) {
    goto LABEL_102;
  }
LABEL_2:
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_1001F5F88(v27, (uint64_t)qword_100594C10);
  v80 = v26;
  sub_100235C6C();
  v98 = v29;
  v29();
  uint64_t v96 = v28;
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  v78 = v10;
  if (v32)
  {
    id v33 = (uint8_t *)sub_100235B18();
    v97 = (void (**)(char *, void *, uint64_t))sub_100202470();
    v100[0] = v97;
    v94 = v33;
    *(_DWORD *)id v33 = 136315138;
    uint64_t v93 = (uint64_t)(v33 + 4);
    sub_1002B6568(&qword_100587A20, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v99 = sub_1002344D8(v34, v35, (uint64_t *)v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = (void (*)(void, void))*((void *)v10 + 1);
    v10 += 8;
    v91 = v36;
    sub_10021EC0C();
    v37();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Links deletion date must be before %s", v94, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
    unint64_t v38 = (void (*)(void, void))*((void *)v10 + 1);
    v10 += 8;
    v91 = v38;
    v38(v24, v8);
  }

  sub_100235C6C();
  id v39 = v98;
  v98();
  sub_100235C6C();
  v39();
  if (v1 >> 62)
  {
    sub_100254354();
    uint64_t v40 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter();
    if (!v40) {
      goto LABEL_104;
    }
  }
  else
  {
    uint64_t v40 = *(uint8_t **)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v40) {
      goto LABEL_104;
    }
  }
  uint64_t v26 = 0;
  v98 = (void (*)(void))(v1 & 0xC000000000000001);
  uint64_t v79 = v1 + 32;
  while (1)
  {
    if (v98)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v41 = (uint64_t)*(id *)(v1 + 8 * v26 + 32);
    }
    v100[0] = (void *)v41;
    char v42 = sub_1002B1C5C(v100);

    if (v42) {
      break;
    }
    os_log_type_t v44 = (uint8_t *)(v26 + 1);
    if (__OFADD__(v26, 1)) {
      goto LABEL_95;
    }
    ++v26;
    if (v44 == v40)
    {
      uint64_t v26 = (uint64_t)v40;
      break;
    }
  }
  if ((uint64_t)v40 >= v26)
  {
    if ((uint8_t *)v26 == v40) {
      goto LABEL_104;
    }
    uint64_t v45 = 1;
    v81 = v40;
  }
  else
  {
    uint64_t v45 = -1;
    v81 = (uint8_t *)v26;
    uint64_t v26 = (uint64_t)v40;
  }
  unint64_t v24 = 0;
  uint64_t v93 = v1 & 0xFFFFFFFFFFFFFF8;
  v97 = (void (**)(char *, void *, uint64_t))(v78 + 32);
  v90 = v78 + 8;
  *(void *)&long long v43 = 138412290;
  long long v92 = v43;
  uint64_t v46 = v45;
  v94 = v40;
  uint64_t v82 = v45;
  do
  {
    BOOL v47 = __OFADD__(v24, v45);
    v24 += v45;
    if (v47) {
      goto LABEL_92;
    }
    if ((uint8_t *)v26 == v40) {
      goto LABEL_93;
    }
    if (__OFADD__(v26, 1)) {
      goto LABEL_94;
    }
    v87 = (char *)v46;
    unint64_t v48 = (unint64_t)v40;
    if ((uint8_t *)(v26 + 1) == v40) {
      goto LABEL_43;
    }
    v83 = (char *)v24;
    unint64_t v24 = v26 + 5;
    do
    {
      unint64_t v48 = v24 - 4;
      if (v98)
      {
        swift_bridgeObjectRetain();
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1002544EC();
      }
      else
      {
        if ((v48 & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
        if (v48 >= *(void *)(v93 + 16)) {
          goto LABEL_89;
        }
        uint64_t v26 = (uint64_t)*(id *)(v1 + 8 * v24);
      }
      id v49 = objc_msgSend((id)v26, "deletionDate", v78, v79);
      if (!v49)
      {
        sub_1002B840C();
LABEL_35:
        sub_100235804((uint64_t)v7, &qword_100584B40);
        v53 = (id)v26;
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.default.getter();
        if (sub_10027D4F8(v54))
        {
          uint64_t v10 = (char *)sub_100235B18();
          v55 = (void *)sub_100235BB8();
          *(_DWORD *)uint64_t v10 = v92;
          *(void *)(v10 + 4) = v53;
          void *v55 = v53;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v41, "getDeletedPseudonyms: no deleted descriptors for %@", (uint8_t *)v10, 0xCu);
          sub_1001F081C(&qword_100585900);
          sub_1002B821C();
          uint64_t v40 = v94;
          sub_1001F63CC();
          sub_1001F63CC();
        }
        else
        {

          uint64_t v26 = (uint64_t)v53;
        }

        goto LABEL_39;
      }
      v50 = v49;
      uint64_t v10 = v95;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = (uint64_t)*v97;
      (*v97)(v7, v10, v8);
      sub_1002B8198();
      if (v51) {
        goto LABEL_35;
      }
      uint64_t v10 = v88;
      sub_1002B82C0();
      ((void (*)(void))v41)();
      LOBYTE(v41) = static Date.< infix(_:_:)();
      sub_1001F7664();
      v52();

      if (v41) {
        goto LABEL_42;
      }
LABEL_39:
      v56 = (uint8_t *)(v24 - 3);
      if (__OFADD__(v48, 1))
      {
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        swift_once();
        goto LABEL_2;
      }
      ++v24;
    }
    while (v56 != v40);
    unint64_t v48 = (unint64_t)v40;
LABEL_42:
    unint64_t v24 = (unint64_t)v83;
LABEL_43:
    uint64_t v45 = v82;
    uint64_t v46 = (uint64_t)&v87[v82];
    uint64_t v26 = v48;
  }
  while ((uint8_t *)v48 != v81);
  if (v24)
  {
    v100[0] = _swiftEmptyArrayStorage;
    uint64_t v26 = (uint64_t)v100;
    sub_1002E3EC4();
    unint64_t v57 = 0;
    uint64_t v10 = (char *)v100[0];
    while (1)
    {
      if (v98)
      {
        swift_bridgeObjectRetain();
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1002544EC();
      }
      else
      {
        uint64_t v26 = (uint64_t)*(id *)(v1 + 8 * v57 + 32);
      }
      uint64_t v99 = v26;
      char v58 = sub_1002B1C5C((void **)&v99);

      if (v58) {
        break;
      }
      v59 = (uint8_t *)(v57 + 1);
      if (__OFADD__(v57, 1)) {
        goto LABEL_99;
      }
      ++v57;
      if (v59 == v40)
      {
        unint64_t v57 = (unint64_t)v40;
        break;
      }
    }
    v88 = v10;
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = 0;
      v83 = (char *)v24;
      while (1)
      {
        if (v10 == v87) {
          goto LABEL_96;
        }
        if (v98)
        {
          id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v57 & 0x8000000000000000) != 0) {
            goto LABEL_100;
          }
          if (v57 >= *(void *)(v93 + 16)) {
            goto LABEL_101;
          }
          id v60 = *(id *)(v79 + 8 * v57);
        }
        uint64_t v26 = (uint64_t)v60;
        id v61 = [(id)v26 pseudonym];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v7 = v63;

        v64 = v88;
        v100[0] = v88;
        unint64_t v24 = *((void *)v88 + 2);
        v65 = (void (*)(char *, void *, uint64_t))(v24 + 1);
        if (v24 >= *((void *)v88 + 3) >> 1)
        {
          uint64_t v26 = (uint64_t)v100;
          sub_1002E3EC4();
          v64 = (char *)v100[0];
        }
        *((void *)v64 + 2) = v65;
        v88 = v64;
        v66 = &v64[16 * v24];
        *((void *)v66 + 4) = v62;
        *((void *)v66 + 5) = v7;
        if ((uint8_t *)v57 == v40) {
          goto LABEL_97;
        }
        if (__OFADD__(v57, 1)) {
          goto LABEL_98;
        }
        unint64_t v67 = (unint64_t)v40;
        unint64_t v7 = v86;
        if ((uint8_t *)(v57 + 1) == v40) {
          goto LABEL_84;
        }
        unint64_t v24 = v57 + 5;
        do
        {
          unint64_t v67 = v24 - 4;
          if (v98)
          {
            swift_bridgeObjectRetain();
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            sub_1002544EC();
          }
          else
          {
            if ((v67 & 0x8000000000000000) != 0) {
              goto LABEL_90;
            }
            if (v67 >= *(void *)(v93 + 16)) {
              goto LABEL_91;
            }
            uint64_t v26 = (uint64_t)*(id *)(v1 + 8 * v24);
          }
          id v68 = objc_msgSend((id)v26, "deletionDate", v78);
          if (!v68)
          {
            sub_1002B840C();
LABEL_77:
            sub_100235804((uint64_t)v7, &qword_100584B40);
            v72 = (id)v26;
            uint64_t v26 = Logger.logObject.getter();
            os_log_type_t v73 = static os_log_type_t.default.getter();
            if (sub_10027D4F8(v73))
            {
              uint64_t v74 = sub_100235B18();
              v75 = (void *)sub_100235BB8();
              *(_DWORD *)uint64_t v74 = v92;
              *(void *)(v74 + 4) = v72;
              void *v75 = v72;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v65, "getDeletedPseudonyms: no deleted descriptors for %@", (uint8_t *)v74, 0xCu);
              sub_1001F081C(&qword_100585900);
              sub_1002B821C();
              sub_1001F63CC();
              unint64_t v7 = v86;
              sub_1001F63CC();
            }
            else
            {

              uint64_t v26 = (uint64_t)v72;
            }
            uint64_t v40 = v94;

            goto LABEL_81;
          }
          v69 = v68;
          v70 = v95;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v65 = *v97;
          (*v97)(v7, v70, v8);
          sub_1002B8198();
          if (v51) {
            goto LABEL_77;
          }
          sub_1002B82C0();
          ((void (*)(void))v65)();
          LOBYTE(v65) = static Date.< infix(_:_:)();
          sub_1001F7664();
          v71();

          uint64_t v40 = v94;
          if (v65) {
            goto LABEL_84;
          }
LABEL_81:
          v76 = (uint8_t *)(v24 - 3);
          if (__OFADD__(v67, 1)) {
            goto LABEL_87;
          }
          ++v24;
        }
        while (v76 != v40);
        unint64_t v67 = (unint64_t)v40;
LABEL_84:
        ++v10;
        unint64_t v57 = v67;
        unint64_t v24 = (unint64_t)v83;
        uint64_t v26 = (uint64_t)v80;
        if (v10 == v83)
        {
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_104:
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v80;
LABEL_105:
    v77 = v91;
    v91(v89, v8);
    v77(v85, v8);
    v77(v26, v8);
    sub_1001FCC08();
  }
}

uint64_t sub_1002B1C5C(void **a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *a1;
  id v13 = [v12 deletionDate];
  if (v13)
  {
    id v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v9, v5);
    sub_1001F0530((uint64_t)v4, 0, 1, v5);
    if (sub_1001F758C((uint64_t)v4, 1, v5) != 1)
    {
      v15(v11, v4, v5);
      char v16 = static Date.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v16 & 1;
    }
  }
  else
  {
    sub_1001F0530((uint64_t)v4, 1, 1, v5);
  }
  sub_100235804((uint64_t)v4, &qword_100584B40);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_1001F5F88(v17, (uint64_t)qword_100594C10);
  id v18 = v12;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412290;
    v25[1] = v18;
    id v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v18;

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "getDeletedPseudonyms: no deleted descriptors for %@", v21, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  char v16 = 0;
  return v16 & 1;
}

BOOL sub_1002B1FC8(void *a1)
{
  type metadata accessor for Date();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1001FCC20();
  id v3 = [objc_allocWithZone((Class)NSDate) init];
  id v4 = [a1 properties];
  id v5 = [v4 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  sub_10021EC0C();
  v7();
  id v8 = [v3 compare:isa];

  return v8 == (id)1;
}

id sub_1002B20E4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)NSError);
  swift_bridgeObjectRetain();
  return sub_100332398(0xD00000000000001ALL, 0x8000000100483FB0, a1, a2);
}

double sub_1002B2150()
{
  sub_1002B8284();
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  if (_TUIsInternalInstall())
  {
    id v3 = self;
    id v4 = objc_msgSend(v3, "tu_defaults");
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100235804((uint64_t)v12, (uint64_t *)&unk_100584CA0);
      id v7 = objc_msgSend(v3, "tu_defaults");
      NSString v8 = String._bridgeToObjectiveC()();
      [v7 doubleForKey:v8];
      double v10 = v9;

      if (v10 > 0.0) {
        return v10;
      }
    }
    else
    {
      memset(v12, 0, sizeof(v12));
      sub_100235804((uint64_t)v12, (uint64_t *)&unk_100584CA0);
    }
  }
  return (double)(unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkPseudonymExpiry];
}

double sub_1002B22C4()
{
  return (double)(unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) inactiveLinkPseudonymExpiry];
}

unint64_t sub_1002B22F4()
{
  unint64_t result = (unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) inactiveLinkCacheLimit];
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

id sub_1002B2328()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLinkManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLinkManager()
{
  return self;
}

void sub_1002B2430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v27;
  a26 = v28;
  id v29 = v26;
  uint64_t v31 = v30;
  BOOL v32 = *(void **)&v26[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
  sub_1002B8460();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  a13 = 0;
  unsigned int v34 = [v32 addOrUpdateConversationLinkDescriptors:isa error:&a13];

  if (v34)
  {
    uint64_t v35 = qword_100583A08;
    id v36 = a13;
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_1002B8144(v37, (uint64_t)qword_100594C10);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)sub_100235B18();
      a13 = (id)sub_100202470();
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = Array.description.getter();
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_1002344D8(v41, v43, (uint64_t *)&a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1002B8120();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "ConversationLinkSync: Finished persisting to data source {acquiredLinks: %s}", v40, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      sub_1002B8120();
    }
    sub_100321414(v31);
    v53 = *(void **)&v29[OBJC_IVAR___CSDConversationLinkManager_delegate];
    if (v53)
    {
      swift_unknownObjectRetain();
      Class v54 = Array._bridgeToObjectiveC()().super.isa;
      [v53 linkManager:v29 updatedLinkDescriptorsFromSync:v54];

      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v44 = a13;
    sub_1002B83E8();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_1001F5F88(v45, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = sub_100235B88();
      id v49 = (void *)sub_100235BB8();
      a13 = (id)sub_100202470();
      *(_DWORD *)uint64_t v48 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v50 = Array.description.getter();
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
      sub_1002344D8(v50, v52, (uint64_t *)&a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1002B8120();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2112;
      swift_errorRetain();
      uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v49 = v55;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "ConversationLinkSync: Failed to persist links %s {error: %@)}", (uint8_t *)v48, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1002B8120();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  sub_100254338();
}

#error "1002B29D4: call analysis failed (funcsize=85)"

void sub_1002B2A28(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a1)
  {
    double v9 = (void *)swift_allocObject();
    v9[2] = a3;
    v9[3] = a4;
    v9[4] = a5;
    v9[5] = a1;
    id v10 = a1;
    swift_bridgeObjectRetain();
    id v11 = v10;
    id v12 = a5;
    sub_1002AA458();

    swift_release();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_bridgeObjectRetain();
      sub_1002344D8(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v18 = 0;
      }
      void *v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Removal of invalid conversation link with pseudonym %s failed, unable to find link with error %@)", (uint8_t *)v16, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_1002B2DD0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (NSNotFound.getter() == a1)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1001F5F88(v11, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_1002344D8(a3, a4, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = 0;
      }
      *uint64_t v14 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Removal of invalid conversation link with pseudonym %s failed with error %@", (uint8_t *)v13, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v16 = *(void **)(a5 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v16)
    {
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10048F560;
      *(void *)(v17 + 32) = a6;
      uint64_t v21 = v17;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_unknownObjectRetain();
      id v18 = a6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v16 linkManager:a5 removedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease();
    }
  }
}

#error "1002B3370: call analysis failed (funcsize=94)"

void sub_1002B33C4(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char *a6)
{
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v38 = a6;
    id v16 = a1;
    [v16 mutableCopy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1001F6204(0, (unint64_t *)&unk_100587A10);
    if (swift_dynamicCast())
    {
      uint64_t v17 = (void *)v39;
      id v18 = [a5 properties];
      id v19 = [v18 expirationDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      [v17 setExpirationDate:isa];

      sub_10029E3C0(v21);
      uint64_t v22 = v38;
      id v23 = *(void **)&v38[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_10048F560;
      *(void *)(v24 + 32) = v17;
      aBlock[0] = v24;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      id v25 = v17;
      v26.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v27 = (void *)swift_allocObject();
      v27[2] = a5;
      v27[3] = v22;
      v27[4] = v16;
      aBlock[4] = (uint64_t)sub_1002B3EC4;
      aBlock[5] = (uint64_t)v27;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100317DEC;
      aBlock[3] = (uint64_t)&unk_100510FA0;
      uint64_t v28 = _Block_copy(aBlock);
      id v29 = v16;
      id v30 = a5;
      id v31 = v22;
      swift_release();
      [v23 addOrUpdateConversationLinkDescriptors:v26.super.isa completion:v28];
      _Block_release(v28);

      goto LABEL_13;
    }
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_1001F5F88(v32, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  v26.super.Class isa = (Class)Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v26.super.isa, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1002344D8(a3, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v39 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v39 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v36 = 0;
    }
    void *v35 = v36;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26.super.isa, v33, "Updating expiration of conversation link with pseudonym %s failed, unable to find link with error %@)", (uint8_t *)v34, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_13:
}

void sub_1002B3944(char a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    id v6 = *(void **)(a4 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v6)
    {
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_10048F560;
      *(void *)(v8 + 32) = a5;
      specialized Array._endMutation()();
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_unknownObjectRetain();
      id v9 = a5;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v6 linkManager:a4 updatedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease();
    }
    sub_10033991C();
  }
  else
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1001F5F88(v13, (uint64_t)qword_100594C10);
    id v14 = a3;
    swift_errorRetain();
    id v15 = v14;
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      id v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      id v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v15;

      *(_WORD *)(v17 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = 0;
      }
      v18[1] = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Saving expiration date for pseudonym %@ failed with error %@)", (uint8_t *)v17, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_1002B3D94()
{
  sub_1001FCC38();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    swift_bridgeObjectRetain();
    uint64_t v3 = v2 + 64;
    do
    {
      id v4 = *(void **)(v3 - 32);
      NSString v5 = *(void **)(v3 - 24);
      id v6 = *(void **)(v3 - 16);
      v3 += 40;
      id v7 = v4;
      id v8 = v5;
      id v9 = v6;
      swift_retain();
      sub_1002A8504();
      swift_release();

      --v1;
    }
    while (v1);
    sub_1001FCC08();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001FCC08();
  }
}

uint64_t sub_1002B3E60()
{
  return sub_1002B6E34((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002B3E78(void *a1, uint64_t a2)
{
  sub_1002B33C4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(char **)(v2 + 40));
}

uint64_t sub_1002B3E84()
{
  uint64_t v1 = sub_1002B8110();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002B3EC4(char a1, uint64_t a2)
{
  sub_1002B3944(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1002B3ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002B3EE0()
{
  return swift_release();
}

uint64_t sub_1002B3EE8()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = sub_1002B8110();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002B3F20(void *a1, uint64_t a2)
{
  sub_1002B2A28(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1002B3F2C()
{
  return sub_1002B6E34((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002B3F44(uint64_t a1, uint64_t a2)
{
  sub_1002B2DD0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1002B3F50(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1002B4E08();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1002B3FBC(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1002B3FBC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_1002B4624(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_1002CDBA0(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  v97 = v6;
  uint64_t v93 = a1;
  if (v3 <= 0)
  {
    v98 = (char *)_swiftEmptyArrayStorage;
    unint64_t v31 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      v87 = v98;
      uint64_t v88 = *(void *)&v98[16 * v86 + 32];
      uint64_t v89 = *(void *)&v98[16 * v31 + 24];
      uint64_t result = sub_1002B46EC((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)&v98[16 * v31 + 16]), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1002B498C((uint64_t)v98);
        v87 = (char *)result;
      }
      if (v86 >= *((void *)v87 + 2)) {
        goto LABEL_140;
      }
      v90 = &v87[16 * v86 + 32];
      *(void *)v90 = v88;
      *((void *)v90 + 1) = v89;
      unint64_t v91 = *((void *)v87 + 2);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove(&v87[16 * v31 + 16], &v87[16 * v31 + 32], 16 * (v91 - v31));
      v98 = v87;
      *((void *)v87 + 2) = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  v98 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      os_log_type_t v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        uint64_t v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = v98;
    }
    else
    {
      uint64_t v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = v98;
      do
      {
        v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1002B4894(0, *((void *)v28 + 2) + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_1002B4894((char *)(v29 > 1), v30 + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    *((void *)v28 + 2) = v31;
    uint64_t v32 = v28 + 32;
    os_log_type_t v33 = (Swift::Int *)&v28[16 * v30 + 32];
    *os_log_type_t v33 = v9;
    v33[1] = v7;
    v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      uint64_t v39 = &v32[2 * v31];
      uint64_t v40 = *(v39 - 8);
      uint64_t v41 = *(v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(v39 - 6);
      uint64_t v43 = *(v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      os_log_type_t v47 = &v32[2 * v31 - 4];
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        v69 = &v32[2 * v34];
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    unint64_t v52 = &v32[2 * v31 - 4];
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    char v58 = &v32[2 * v34];
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    v65 = &v32[2 * v34];
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    uint64_t v74 = &v32[2 * v73];
    uint64_t v75 = *v74;
    v76 = &v32[2 * v34];
    uint64_t v77 = v76[1];
    uint64_t result = sub_1002B46EC((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *((void *)v98 + 2)) {
      goto LABEL_125;
    }
    *uint64_t v74 = v75;
    v32[2 * v73 + 1] = v77;
    unint64_t v78 = *((void *)v98 + 2);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove(&v32[2 * v34], v76 + 2, 16 * (v78 - 1 - v34));
    *((void *)v98 + 2) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002B4624(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1002B46EC(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_1002DE1C4(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    id v18 = (char *)(a3 - 16);
    while (1)
    {
      Swift::Int v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)id v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_1002DE1C4(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      Swift::Int v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    Swift::Int v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_1002DE1C4(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

char *sub_1002B4894(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C(&qword_100587A30);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1002B498C(uint64_t a1)
{
  return sub_1002B4894(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1002B49A0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(a4 + 24))(&v6, &v7);
  a2(&v8, &v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1002B4A0C(void *a1)
{
  return sub_1002B4C14(a1, (SEL *)&selRef_linkName);
}

uint64_t sub_1002B4A18(void *a1)
{
  id v1 = [a1 invitedMemberHandles];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_100235C6C();
  sub_1001F6204(v3, v4);
  sub_100235C6C();
  sub_100210D5C(v5, v6);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

void sub_1002B4AAC(uint64_t a1, void *a2)
{
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setInvitedHandles:isa];
}

void sub_1002B4B64(uint64_t a1, void *a2)
{
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  [a2 setInvitedHandles:isa];
}

uint64_t sub_1002B4C14(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100235AE0();
}

void sub_1002B4C70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setName:v4];
}

void sub_1002B4CC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setLinkName:v4];
}

uint64_t sub_1002B4D20(void *a1)
{
  id v1 = [a1 conversationMessageBytes];
  if (v1)
  {
    id v2 = v1;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100235AE0();
}

void sub_1002B4D80(uint64_t a1, unint64_t a2, void *a3, SEL *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001F7498(a1, a2);
  objc_msgSend(a3, *a4, isa);
}

void sub_1002B4DF4()
{
}

void sub_1002B4E08()
{
}

void sub_1002B4E1C(unint64_t *a1)
{
  void (*v25)(uint64_t *__return_ptr, id *);
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;

  unint64_t v1 = *a1;
  id v2 = (uint64_t (*)(id *))a1[1];
  os_log_type_t v33 = v1;
  uint64_t v25 = (void (*)(uint64_t *__return_ptr, id *))a1[3];
  if (v1 >> 62)
  {
LABEL_39:
    sub_1002B7380((uint64_t)&v33);
    swift_retain();
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    sub_1002B7380((uint64_t)&v33);
    swift_retain();
    swift_retain();
  }
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v29 = 0;
    uint64_t v26 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (v4 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_37;
        }
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      unint64_t v7 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_38;
      }
      uint64_t v32 = v5;
      if (v2(&v32))
      {
        uint64_t v32 = v6;
        v25(&v31, &v32);

        uint64_t v9 = v29;
        uint64_t v8 = v31;
        if (!v29)
        {
          unint64_t v30 = v31;
          unint64_t v10 = v28[3];
          if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_42;
          }
          int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          if (v11 <= 1) {
            uint64_t v12 = 1;
          }
          else {
            uint64_t v12 = v11;
          }
          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v13 = (void *)swift_allocObject();
          uint64_t v14 = (uint64_t)(j__malloc_size(v13) - 32) / 8;
          v13[2] = v12;
          v13[3] = (2 * v14) | 1;
          unint64_t v15 = (unint64_t)(v13 + 4);
          unint64_t v16 = v28[3];
          unint64_t v17 = v16 >> 1;
          if (v28[2])
          {
            if (v13 != v28 || v15 >= (unint64_t)&v28[v17 + 4])
            {
              Swift::Int v27 = v14;
              unint64_t v24 = v28[3];
              memmove(v13 + 4, v28 + 4, 8 * v17);
              unint64_t v15 = (unint64_t)(v13 + 4);
              unint64_t v16 = v24;
              uint64_t v14 = v27;
            }
            v28[2] = 0;
          }
          uint64_t v26 = (void *)(v15 + 8 * v17);
          uint64_t v9 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - (v16 >> 1);
          swift_release();
          uint64_t v28 = v13;
          uint64_t v8 = v30;
        }
        BOOL v19 = __OFSUB__(v9, 1);
        uint64_t v20 = v9 - 1;
        if (v19)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v20;
        *v26++ = v8;
        unint64_t v4 = v7;
      }
      else
      {

        ++v4;
      }
      if (v7 == v3) {
        goto LABEL_32;
      }
    }
  }
  unint64_t v29 = 0;
LABEL_32:
  sub_1002B73AC((uint64_t)&v33);
  swift_release();
  swift_release();
  unint64_t v21 = v28[3];
  if (v21 >= 2)
  {
    unint64_t v22 = v21 >> 1;
    BOOL v19 = __OFSUB__(v22, v29);
    unint64_t v23 = v22 - v29;
    if (v19)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }
    else
    {
      v28[2] = v23;
    }
  }
}

uint64_t sub_1002B50D4(unint64_t a1, uint64_t (*a2)(id *))
{
  if (a1 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  uint64_t v32 = (char *)_swiftEmptyArrayStorage;
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v29 = (char *)&_swiftEmptyArrayStorage[4];
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v5 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (v5 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_37;
        }
        id v7 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      unint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      id v33 = v7;
      uint64_t result = a2(&v33);
      if (result)
      {
        if (!v6)
        {
          unint64_t v11 = *((void *)v32 + 3);
          if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_42;
          }
          int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
          if (v12 <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = v12;
          }
          uint64_t v30 = v13;
          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v14 = (char *)swift_allocObject();
          size_t v15 = j__malloc_size(v14);
          unint64_t v16 = v14;
          uint64_t v17 = (uint64_t)(v15 - 32) / 8;
          *((void *)v14 + 2) = v30;
          *((void *)v14 + 3) = (2 * v17) | 1;
          id v18 = v14 + 32;
          unint64_t v19 = *((void *)v32 + 3);
          unint64_t v20 = v19 >> 1;
          uint64_t v28 = v16;
          if (*((void *)v32 + 2))
          {
            if (v16 != v32 || v18 >= &v32[8 * v20 + 32])
            {
              unint64_t v22 = v18;
              uint64_t v27 = (uint64_t)(v15 - 32) / 8;
              unint64_t v31 = *((void *)v32 + 3);
              memmove(v18, v32 + 32, 8 * v20);
              id v18 = v22;
              unint64_t v19 = v31;
              uint64_t v17 = v27;
            }
            *((void *)v32 + 2) = 0;
          }
          unint64_t v29 = &v18[8 * v20];
          uint64_t v6 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - (v19 >> 1);
          uint64_t result = swift_release();
          uint64_t v32 = v28;
        }
        BOOL v23 = __OFSUB__(v6--, 1);
        if (v23)
        {
          __break(1u);
          goto LABEL_41;
        }
        *(void *)unint64_t v29 = v8;
        v29 += 8;
        unint64_t v5 = v9;
      }
      else
      {

        ++v5;
      }
      if (v9 == v4) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_32:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)v32;
  unint64_t v24 = *((void *)v32 + 3);
  if (v24 >= 2)
  {
    unint64_t v25 = v24 >> 1;
    BOOL v23 = __OFSUB__(v25, v6);
    unint64_t v26 = v25 - v6;
    if (v23)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }
    else
    {
      *((void *)v32 + 2) = v26;
    }
  }
  return result;
}

char *sub_1002B5344(void *a1, void *a2, void *a3)
{
  uint64_t v5 = qword_1005839B8;
  id v6 = a1;
  id v7 = a3;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1002B5468((uint64_t)v6, v7, (id)qword_100588C08);
  unint64_t v9 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationLinkManager());
  id v10 = v6;
  id v11 = v7;
  id v12 = a2;
  swift_retain();
  uint64_t v13 = sub_1002B583C(v10, v12, v11, (uint64_t)v8, v9);
  uint64_t v14 = *(void **)&v13[OBJC_IVAR___CSDConversationLinkManager_service];
  size_t v15 = v13;
  id v16 = v14;
  [v16 setDelegate:v15];

  swift_release();
  return v15;
}

void *sub_1002B5468(uint64_t a1, void *a2, void *a3)
{
  unint64_t v22 = a3;
  BOOL v23 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  v25[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v25[4] = &off_10050C720;
  v25[0] = a1;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  v24[0] = _swiftEmptyArrayStorage;
  sub_1002B6568((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_10020A70C((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static OS_dispatch_queue.main.getter();
  id v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for ConversationLinkSyncMessageQueue();
  swift_allocObject();
  id v11 = sub_10020B5B0((uint64_t)v10, (uint64_t)sub_100339480, 0);
  sub_10020ED28((uint64_t)v25, (uint64_t)v24);
  uint64_t v12 = qword_100583AA8;
  id v13 = v10;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100594DA0;
  uint64_t v15 = sub_10020EF04((uint64_t)v24, v24[3]);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v17;
  swift_retain();
  unint64_t v20 = sub_1002B5C48(v19, v13, v22, (uint64_t)v11, v23, v14);
  sub_1002018DC((uint64_t)v24);
  sub_1002018DC((uint64_t)v25);
  return v20;
}

char *sub_1002B583C(void *a1, void *a2, void *a3, uint64_t a4, char *a5)
{
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask] = 0;
  uint64_t v15 = (uint64_t (**)())&a5[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  *uint64_t v15 = variable initialization expression of LetMeInRequestorKeyAgreement.localKey;
  v15[1] = 0;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_delegate] = 0;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_dataSource] = a1;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_service] = a2;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_serverBag] = a3;
  uint64_t v27 = a4;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_linkSyncManager] = a4;
  v25[1] = sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  uint64_t v16 = a5;
  id v29 = a1;
  id v28 = a2;
  id v17 = a3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v31[0] = _swiftEmptyArrayStorage;
  sub_1002B6568((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_10020A70C((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LetMeInRecoveryManager();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(v19 + 24) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 32) = v18;
  *(void *)(v19 + 40) = v17;
  *(void *)&v16[OBJC_IVAR___CSDConversationLinkManager_lmiRecoveryManager] = v19;
  swift_unknownObjectRetain();

  unint64_t v20 = (objc_class *)type metadata accessor for ConversationLinkManager();
  v32.receiver = v16;
  v32.super_class = v20;
  unint64_t v21 = (char *)objc_msgSendSuper2(&v32, "init");
  uint64_t v22 = *(void *)&v21[OBJC_IVAR___CSDConversationLinkManager_lmiRecoveryManager];
  v31[3] = v20;
  v31[4] = &off_100510F28;
  v31[0] = v21;
  sub_1002B7CB0((uint64_t)v31, (uint64_t)v30);
  swift_beginAccess();
  BOOL v23 = v21;
  swift_retain();
  sub_1002B7D18((uint64_t)v30, v22 + 48);
  swift_endAccess();
  swift_release();
  *(void *)(v27 + 24) = &off_100510F40;
  swift_unknownObjectWeakAssign();
  sub_100339E34();
  swift_release();

  return v23;
}

void *sub_1002B5C48(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  v19[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v19[4] = &off_10050C720;
  v19[0] = a1;
  type metadata accessor for ConversationLinkSyncManager();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = sub_10020EF04((uint64_t)v19, (uint64_t)&type metadata for ConversationLinkDataSourceTUWrapper);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_1002B5D8C(*v14, a2, a3, a4, a5, a6, v11);
  sub_1002018DC((uint64_t)v19);
  return v16;
}

void *sub_1002B5D8C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  v27[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v27[4] = &off_10050C720;
  v27[0] = a1;
  a7[3] = 0;
  swift_unknownObjectWeakInit();
  a7[16] = 0;
  sub_10020ED28((uint64_t)v27, (uint64_t)(a7 + 4));
  a7[15] = a2;
  a7[13] = a4;
  a7[10] = a5;
  uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationLinkSyncIDSInteractor());
  uint64_t v14 = a2;
  swift_retain();
  id v15 = a5;
  uint64_t v16 = a3;
  id v17 = (char *)sub_1002B6054(v16, v14, v13);
  a7[9] = v17;
  a7[14] = a6;
  swift_retain();
  unint64_t v18 = (unint64_t)[v15 linkSyncRecoverFailureLimit];
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v19 = v16;
  unint64_t v20 = v14;
  uint64_t v14 = &_s10Foundation4DataV15_RepresentationON_ptr;
  uint64_t v16 = &selRef_setActiveRequestsByTransactionID_;
  uint64_t result = objc_msgSend(objc_allocWithZone((Class)IDSRateLimiter), "initWithLimit:timeLimit:", v18, (double)(unint64_t)objc_msgSend(v15, "linkSyncRecoverTimeLimit"));
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  a7[11] = result;
  unint64_t v22 = (unint64_t)[v15 linkSyncRecoverFailureLimit];
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = objc_msgSend(objc_allocWithZone((Class)IDSRateLimiter), "initWithLimit:timeLimit:", v22, (double)(unint64_t)objc_msgSend(v15, "linkSyncRecoverTimeLimit"));
  if (!result)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  a7[12] = result;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate + 8] = &off_100515548;
  swift_unknownObjectWeakAssign();
  uint64_t v14 = v20;
  uint64_t v16 = v19;
  if (qword_100583A08 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for Logger();
  sub_1001F5F88(v23, (uint64_t)qword_100594C10);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "ConversationLinkSync: ConversationLinkSyncManager init", v26, 2u);
    swift_slowDealloc();
  }

  sub_10033CBA0();
  sub_1003407C0();

  swift_release();
  swift_release();
  sub_1002018DC((uint64_t)v27);
  return a7;
}

id sub_1002B6054(void *a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service] = a1;
  *(void *)&a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_knownDestinations] = &_swiftEmptySetSingleton;
  v8.receiver = a3;
  v8.super_class = (Class)type metadata accessor for ConversationLinkSyncIDSInteractor();
  swift_unknownObjectRetain();
  id v6 = objc_msgSendSuper2(&v8, "init");
  objc_msgSend((id)swift_unknownObjectRetain(), "addServiceDelegate:queue:", v6, a2, v8.receiver, v8.super_class);
  swift_unknownObjectRelease();

  return v6;
}

uint64_t sub_1002B6140(unint64_t a1, uint64_t (*a2)(id *))
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v7 = *(void **)(a1 + 8 * v5 + 32);
        swift_retain();
        id v6 = v7;
      }
      id v11 = v6;
      char v8 = a2(&v11);

      swift_release();
      if (v8) {
        break;
      }
      uint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_13;
      }
      ++v5;
      if (v9 == v4) {
        return v4;
      }
    }
  }
  return v5;
}

uint64_t sub_1002B625C(char *a1, char *a2, uint64_t a3, uint64_t (*a4)(char **))
{
  id v6 = a2;
  if ((uint64_t)a2 < (uint64_t)a1)
  {
    uint64_t v7 = -1;
    char v8 = a1;
    if (a3 < 0) {
      goto LABEL_33;
    }
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    uint64_t v7 = 1;
    char v8 = a2;
    id v6 = a1;
    if (a3 < 0) {
      goto LABEL_33;
    }
LABEL_7:
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v10 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_9;
    }
    while (1)
    {
LABEL_33:
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_9:
      uint64_t v9 = 0;
      uint64_t v16 = v8;
      uint64_t v17 = v7;
      while (1)
      {
        BOOL v11 = __OFADD__(v9, v7);
        v9 += v7;
        if (v11) {
          goto LABEL_30;
        }
        if (v6 == (char *)v10) {
          goto LABEL_31;
        }
        if (__OFADD__(v6, 1)) {
          goto LABEL_32;
        }
        unint64_t v12 = v10;
        if (v6 + 1 != (char *)v10) {
          break;
        }
LABEL_25:
        id v6 = (char *)v12;
        if ((char *)v12 == v8) {
          return v9;
        }
      }
      char v8 = v6 + 5;
      while (1)
      {
        unint64_t v12 = (unint64_t)(v8 - 4);
        if ((a3 & 0xC000000000000001) != 0)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          id v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_28;
          }
          if (v12 >= *(void *)(v18 + 16)) {
            goto LABEL_29;
          }
          uint64_t v13 = *(void **)(a3 + 8 * (void)v8);
          swift_retain();
          id v6 = v13;
        }
        uint64_t v19 = v6;
        uint64_t v7 = a4(&v19);

        swift_release();
        if (v7) {
          goto LABEL_24;
        }
        uint64_t v14 = v8 - 3;
        if (__OFADD__(v12, 1)) {
          break;
        }
        ++v8;
        if (v14 == (char *)v10)
        {
          unint64_t v12 = v10;
LABEL_24:
          char v8 = v16;
          uint64_t v7 = v17;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
  }
  return 0;
}

unint64_t sub_1002B6420()
{
  unint64_t result = qword_100587A28;
  if (!qword_100587A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587A28);
  }
  return result;
}

uint64_t sub_1002B646C()
{
  type metadata accessor for Date();
  sub_1001F6398();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  sub_1002B80C4();
  v1();
  uint64_t v2 = sub_10028AC70();

  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_1002B651C()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_1001F63E4(v1);
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return sub_1002AFA00(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1002B6568(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B65B0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  uint64_t v1 = sub_1002B820C();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B6600(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AF4FC(a1, a2, a3, *(uint64_t (**)(void, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(objc_class **)(v3 + 32), *(char **)(v3 + 40), *(void **)(v3 + 48));
}

void sub_1002B6614()
{
}

uint64_t sub_1002B6620()
{
  type metadata accessor for Date();
  sub_1001F6398();

  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  sub_1002B80C4();
  v1();
  uint64_t v2 = sub_10028AC70();

  return _swift_deallocObject(v2, v3, v4);
}

void sub_1002B66D0()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_1001F63E4(v0);
  uint64_t v1 = (void *)sub_100202590();

  sub_1002AFBB8(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002B6734()
{
  return sub_1002B70AC(48);
}

uint64_t sub_1002B673C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AFF48(a1, a2, a3, *(uint64_t (**)(void, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(objc_class **)(v3 + 32), *(char **)(v3 + 40));
}

uint64_t sub_1002B674C()
{
  type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  unint64_t v4 = (*(void *)(v3 + 64) + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;

  sub_1002B80C4();
  v5();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }
  unint64_t v6 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v6 + 8;

  return _swift_deallocObject(v0, v7, v2 | 7);
}

void sub_1002B6814()
{
}

void sub_1002B6820()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_1002462DC(v0);
  sub_1002B830C();
  sub_1002B0324();
}

uint64_t sub_1002B68A8(uint64_t a1)
{
  return sub_1002AD4D8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002B68B4()
{
  sub_1001F081C(&qword_100587A38);
  sub_1001F6398();
  unint64_t v3 = (*(void *)(v2 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  sub_1002B80C4();
  v4();

  uint64_t v5 = sub_10028AC70();

  return _swift_deallocObject(v5, v6, v7);
}

void sub_1002B6964()
{
  sub_1002545EC();
  uint64_t v0 = sub_1001F081C(&qword_100587A38);
  sub_1002462DC(v0);
  sub_1002B842C();
  uint64_t v1 = (void *)sub_100202590();

  sub_1002AD658(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002B69E0()
{
  sub_1001FCC38();
  sub_1001F081C(&qword_100587A38);
  sub_1001F6398();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v7 = v6;
  unint64_t v8 = (((v2 + 16) & ~v2) + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_10021EC0C();
  v9();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v5);
  sub_100235D8C();
  sub_1001FCC08();
  return _swift_deallocObject(v10, v11, v12);
}

uint64_t sub_1002B6ACC(char a1, uint64_t a2)
{
  uint64_t v5 = sub_1001F081C(&qword_100587A38);
  sub_1002462DC(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = type metadata accessor for Date();
  sub_1001F63E4(v10);
  uint64_t v12 = v2 + ((v7 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));

  return sub_1002ADC10(a1, a2, v2 + v7, v12);
}

uint64_t sub_1002B6B70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationLinkKeyAgreement();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B6BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B6C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B6C9C()
{
  return sub_1002B6E34((void (*)(void))&_swift_release);
}

uint64_t sub_1002B6CB4(char a1, uint64_t a2)
{
  return sub_1002AD1A8(a1, a2, *(uint64_t (**)(id, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void sub_1002B6CC0(unint64_t a1, uint64_t a2)
{
  sub_1002AA360(a1, a2, *(void (**)(void))(v2 + 16));
}

uint64_t sub_1002B6CE0(uint64_t a1, uint64_t a2)
{
  return sub_1002B7A34(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002A8790);
}

uint64_t sub_1002B6CF8()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002B6D50(uint64_t a1, uint64_t a2)
{
  return sub_1002B7A34(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002A6338);
}

uint64_t sub_1002B6D68()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1002B6DC8(char a1, void *a2)
{
  sub_1002A6770(a1, a2, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_1002B6DFC()
{
  return sub_1002B7030(56);
}

uint64_t sub_1002B6E04(uint64_t a1, uint64_t a2)
{
  return sub_1002B751C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1002A4E8C);
}

uint64_t sub_1002B6E1C()
{
  return sub_1002B6E34((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002B6E34(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 48, 7);
}

void sub_1002B6E84(uint64_t a1, uint64_t a2)
{
  sub_1002A5C70(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1002B6E90()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002B6EC8(char a1, uint64_t a2)
{
  sub_1002A593C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1002B6ED0()
{
  type metadata accessor for Date();
  sub_1001F6398();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  sub_1002B80C4();
  v1();
  uint64_t v2 = sub_10028AC70();

  return _swift_deallocObject(v2, v3, v4);
}

void sub_1002B6F80()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_1001F63E4(v0);
  uint64_t v1 = (void *)sub_100202590();

  sub_1002A491C(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1002B6FE8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B7020(uint64_t a1, uint64_t a2)
{
  return sub_1002A46A4(a1, a2, *(uint64_t (**)(BOOL, uint64_t))(v2 + 16));
}

uint64_t sub_1002B7028()
{
  return sub_1002B7030(64);
}

uint64_t sub_1002B7030(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1002B708C(uint64_t a1, uint64_t a2)
{
  return sub_1002B7A34(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002A3B24);
}

uint64_t sub_1002B70A4()
{
  return sub_1002B70AC(56);
}

uint64_t sub_1002B70AC(uint64_t a1)
{
  if (*(void *)(v1 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1002B7108(uint64_t a1, uint64_t a2)
{
  return sub_1002B7594(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1002A41A4);
}

uint64_t sub_1002B7120()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002B7158(uint64_t a1, char *a2)
{
  sub_1002A212C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1002B7160()
{
  type metadata accessor for Date();
  sub_10020233C();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  sub_1001F7664();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

uint64_t sub_1002B71E4(id *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  sub_1001F63E4(v2);

  return sub_1002A3248(a1);
}

uint64_t sub_1002B7234(id *a1)
{
  return sub_1002A3504(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002B723C@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a4 + 16);
  v9[0] = *(_OWORD *)a4;
  v9[1] = v7;
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t result = sub_1002B49A0(v6, a2, a3, (uint64_t)v9);
  *a5 = result;
  return result;
}

uint64_t sub_1002B7284()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002B72D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002B723C(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16), *(void *)(v2 + 24), v2 + 32, a2);
}

void sub_1002B72E4()
{
}

uint64_t sub_1002B7310()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002B7358()
{
}

uint64_t sub_1002B7380(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B73AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B73D8()
{
  swift_release();
  uint64_t v0 = sub_1002544DC();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_1002B7408(unint64_t a1, uint64_t a2)
{
  sub_1002A119C(a1, a2, *(void (**)(void, void))(v2 + 16));
}

uint64_t sub_1002B7410()
{
  uint64_t v1 = sub_1002B8110();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002B7448(int64_t a1, uint64_t a2)
{
  sub_1002A07B0(a1, a2, *(char **)(v2 + 16), *(unsigned char *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1002B745C(uint64_t a1, uint64_t a2)
{
  return sub_1002A0264(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002B7464(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  uint64_t v4 = sub_100235AE0();
  v5(v4);
  return a2;
}

uint64_t sub_1002B74BC()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1002B820C();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B7504(uint64_t a1, uint64_t a2)
{
  return sub_1002B751C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10029EC20);
}

uint64_t sub_1002B751C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1002B7534()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1002B820C();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B757C(uint64_t a1, uint64_t a2)
{
  return sub_1002B7594(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10029EFD4);
}

uint64_t sub_1002B7594(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1002B75AC(id *a1, uint64_t a2)
{
  return sub_10029E7E4(a1, a2, *(void (**)(unint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1002B75B4()
{
  swift_release();
  uint64_t v1 = sub_1002B820C();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B75F4(unint64_t a1, uint64_t a2)
{
  return sub_10029D158(a1, a2, *(void **)(v2 + 16), *(void (**)(void, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_1002B7608()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_1002B8110();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_1002B7640(char a1, uint64_t a2)
{
  sub_10029E178(a1, a2, *(void (**)(id, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1002B764C()
{
  type metadata accessor for UUID();
  sub_10020233C();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v6();
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3);
}

void sub_1002B7730()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1002462DC(v1);
  sub_1002B830C();
  uint64_t v11 = *(void *)(v0
                  + ((((((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v3 = sub_100202590();
  sub_10029C340(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1002B77D8(unint64_t a1, uint64_t a2)
{
  return sub_10029BB94(a1, a2, *(void (**)(unint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1002B77E0()
{
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v1 = sub_1002B8110();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002B7820()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1002B78D4;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_100587A80 + dword_100587A80);
  return v6(v2, v3, v4);
}

uint64_t sub_1002B78D4()
{
  sub_1001F63B4();
  uint64_t v1 = *v0;
  sub_10023D230();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1001F643C();
  return v3();
}

uint64_t sub_1002B7998()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002B79D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_1002A9048(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1002B79DC()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002B7A34(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

void sub_1002B7A4C(uint64_t a1, uint64_t a2)
{
}

void sub_1002B7A68(char a1, uint64_t a2, void *a3)
{
  sub_1002A6114(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_1002B7A70(char a1, uint64_t a2)
{
  sub_100305AE4(a1, a2, *(void *)(v2 + 16));
}

void sub_1002B7A78(objc_class *a1, uint64_t a2)
{
  sub_10029E9E4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002B7A84()
{
  sub_1001FCC38();
  type metadata accessor for UUID();
  sub_1001F6398();
  unint64_t v3 = (((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + *(void *)(v2 + 64)
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement();
  sub_1002462DC(v4);
  swift_release();

  sub_1002B80C4();
  v5();
  sub_1001F7498(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease();
  type metadata accessor for P256.KeyAgreement.PrivateKey();
  sub_10020233C();
  sub_1001F7664();
  v6();
  sub_10028AC70();
  sub_1001FCC08();
  return _swift_deallocObject(v7, v8, v9);
}

#error "1002B7C90: call analysis failed (funcsize=58)"

void sub_1002B7CA8(objc_class *a1, uint64_t a2)
{
  sub_10029BE7C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002B7CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100587AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B7D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100587AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ConversationLinkManagerErrorType()
{
  return &type metadata for ConversationLinkManagerErrorType;
}

unint64_t sub_1002B7D98()
{
  unint64_t result = qword_100587AB0;
  if (!qword_100587AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AB0);
  }
  return result;
}

unint64_t sub_1002B7DE8()
{
  unint64_t result = qword_100587AB8;
  if (!qword_100587AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AB8);
  }
  return result;
}

unint64_t sub_1002B7E38()
{
  unint64_t result = qword_100587AC0;
  if (!qword_100587AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AC0);
  }
  return result;
}

unint64_t sub_1002B7E88()
{
  unint64_t result = qword_100587AC8;
  if (!qword_100587AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AC8);
  }
  return result;
}

unint64_t sub_1002B7ED8()
{
  unint64_t result = qword_100587AD0;
  if (!qword_100587AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AD0);
  }
  return result;
}

unint64_t sub_1002B7F24()
{
  unint64_t result = qword_100587AD8;
  if (!qword_100587AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587AD8);
  }
  return result;
}

id sub_1002B80D8(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 0, 0, v3);
}

uint64_t sub_1002B80F4()
{
  return swift_arrayDestroy();
}

uint64_t sub_1002B8110()
{
  return v0;
}

uint64_t sub_1002B8120()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1002B8144(uint64_t a1, uint64_t a2)
{
  sub_1001F5F88(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1002B8180()
{
  return swift_allocObject();
}

uint64_t sub_1002B8198()
{
  sub_1001F0530(v1, 0, 1, v0);
  return sub_1001F758C(v1, 1, v0);
}

BOOL sub_1002B81D0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1002B81EC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1002B820C()
{
  return v0;
}

uint64_t sub_1002B821C()
{
  return swift_arrayDestroy();
}

uint64_t sub_1002B8234()
{
  return type metadata accessor for ConversationLinkKeyAgreement();
}

id sub_1002B825C(float a1)
{
  *uint64_t v2 = a1;
  return v1;
}

uint64_t sub_1002B8298()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_1002B82D8()
{
  return sub_1002D1698();
}

uint64_t sub_1002B82F4()
{
  return v0;
}

void sub_1002B8360(float a1)
{
  float *v1 = a1;
}

uint64_t sub_1002B8384()
{
  return 0;
}

void sub_1002B839C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1002B83B4()
{
  return v0;
}

uint64_t sub_1002B83CC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1002B83E8()
{
  return v0;
}

uint64_t sub_1002B840C()
{
  return sub_1001F0530(v1, 1, 1, v0);
}

uint64_t sub_1002B8440(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1002B8460()
{
  return v0;
}

void sub_1002B846C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1002B84A0(uint64_t a1, uint64_t a2)
{
  return sub_1001F5F88(a1, a2);
}

uint64_t sub_1002B84B8()
{
  return swift_retain();
}

void sub_1002B84D0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1002B8504()
{
  return v0;
}

uint64_t sub_1002B8518()
{
  return swift_bridgeObjectRetain();
}

id sub_1002B8538()
{
  if (qword_1005839A8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100587AE0;

  return v0;
}

id sub_1002B8594()
{
  type metadata accessor for TinCanIDSService();
  id result = sub_1002EA2A0();
  qword_100587AE0 = (uint64_t)result;
  return result;
}

id sub_1002B8604(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for TinCanIDSService();
  id v8 = objc_msgSendSuper2(&v10, "initWithName:service:queryController:", v7, a3, a4);

  return v8;
}

id sub_1002B86F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TinCanIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TinCanIDSService()
{
  return self;
}

unint64_t sub_1002B8754(unint64_t result)
{
  if (result > 5) {
    return 0;
  }
  return result;
}

unint64_t sub_1002B8764()
{
  return 0xD000000000000021;
}

Swift::Int sub_1002B8780()
{
  return sub_1002EFBA8(*v0);
}

uint64_t sub_1002B8788(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002BD500();

  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1002B87D4(uint64_t a1)
{
  return sub_1002EFDE4(a1, *v1);
}

unint64_t sub_1002B87DC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1002B8754(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1002B8810(uint64_t a1)
{
  unint64_t v2 = sub_1002BD500();

  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_1002B884C(uint64_t a1)
{
  unint64_t v2 = sub_1002BD500();

  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_1002B8888()
{
  return 0xD000000000000021;
}

uint64_t sub_1002B88A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002BD500();

  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

unint64_t sub_1002B88FC(uint64_t a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000020;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000020;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1002B89D8);
  }
  return result;
}

unint64_t sub_1002B89F0()
{
  return sub_1002B88FC(*v0);
}

id sub_1002B89F8(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  NSString v7 = self;
  id v8 = a1;
  id result = [v7 sharedInstance];
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    id v11 = [objc_allocWithZone((Class)TUVouchingEnablementImpl) init];
    *os_log_type_t v6 = 10;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v3);
    id v12 = sub_1002BCEAC((uint64_t)v8, v10, v11, (uint64_t)v6, (char *)objc_allocWithZone(ObjectType));

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002B8BE0(uint64_t a1, unint64_t a2, void *a3, char *a4, void (**a5)(void, void, void))
{
  uint64_t v43 = a3;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v48 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  id v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v46 = (char *)&v34 - v16;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  uint64_t v18 = *(void **)&a4[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement];
  _Block_copy(a5);
  if ([v18 isEnabled])
  {
    uint64_t v19 = swift_allocObject();
    unint64_t v20 = (void *)swift_allocObject();
    v20[2] = a1;
    v20[3] = a2;
    v20[4] = sub_1002BCCD4;
    v20[5] = v17;
    uint64_t v38 = v17;
    uint64_t v39 = v10;
    unint64_t v21 = v43;
    v20[6] = a4;
    v20[7] = v21;
    *(void *)(v19 + 16) = sub_1002BCD68;
    *(void *)(v19 + 24) = v20;
    uint64_t v22 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 32];
    uint64_t v37 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 24];
    uint64_t v40 = a5;
    uint64_t v36 = sub_100204074(&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService], v37);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a4;
    *(void *)(v23 + 24) = v19;
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v22 + 16);
    unint64_t v24 = a4;
    sub_1001F7440(a1, a2);
    swift_retain();
    id v25 = v21;
    swift_retain();
    v35(a1, a2, 3, sub_1002BCDD4, v23, v37, v22);
    swift_release();
    uint64_t v43 = *(void **)&v24[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue];
    static DispatchTime.now()();
    uint64_t v26 = v46;
    + infix(_:_:)();
    uint64_t v27 = v48;
    uint64_t v47 = *(void *)(v47 + 8);
    ((void (*)(char *, uint64_t))v47)(v15, v48);
    aBlock[4] = sub_1002BCDDC;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    aBlock[3] = &unk_100512250;
    id v28 = _Block_copy(aBlock);
    swift_retain();
    id v29 = v49;
    static DispatchQoS.unspecified.getter();
    uint64_t v50 = _swiftEmptyArrayStorage;
    sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    uint64_t v30 = v41;
    uint64_t v31 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v39);
    ((void (*)(char *, uint64_t))v47)(v26, v27);
    swift_release();
    swift_release();
    swift_release();
    _Block_release(v40);
  }
  else
  {
    sub_1002BCB38();
    swift_allocError();
    void *v32 = 3;
    id v33 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v33);

    swift_errorRelease();
    swift_release();
    _Block_release(a5);
  }
}

uint64_t sub_1002B91C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8, void *a9)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1005839E8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1001F5F88(v13, (uint64_t)qword_100594BB0);
    swift_errorRetain();
    swift_errorRetain();
    sub_1001F7440(a4, a5);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134218242;
      Data.hashValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1001F7498(a4, a5);
      *(_WORD *)(v16 + 12) = 2080;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v17 = String.init<A>(describing:)();
      sub_1002344D8(v17, v18, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to sign data (%ld) due to error %s.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F7498(a4, a5);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a6(0, a3);
    swift_errorRelease();
    return swift_errorRelease();
  }
  unint64_t v19 = a2;
  if (a2 >> 60 == 15)
  {
    if (qword_1005839E8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1001F5F88(v20, (uint64_t)qword_100594BB0);
    sub_1001F7440(a4, a5);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      uint64_t v50 = Data.hashValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1001F7498(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to sign data (%ld) because encrypted data was missing from response (without an error).", v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_1001F7498(a4, a5);
    }

    sub_1002BCB38();
    uint64_t v44 = swift_allocError();
    *uint64_t v45 = 2;
    a6(0, v44);
    return swift_errorRelease();
  }
  uint64_t v25 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 24);
  uint64_t v26 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 32);
  sub_100204074((void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler), v25);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
  sub_1001F7440(a1, v19);
  uint64_t v28 = v27(v25, v26);
  unint64_t v30 = v29;
  sub_1002B989C();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_1001F7498(v28, v30);
  objc_allocWithZone((Class)TUVoucher);
  sub_1001F7440(a4, a5);
  sub_100249550(a1, v19);
  id v35 = sub_1002BCA24(a9, v32, v34, a4, a5, a1, v19);
  if (qword_1005839E8 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_1001F5F88(v36, (uint64_t)qword_100594BB0);
  sub_1001F7440(a4, a5);
  id v37 = v35;
  sub_1001F7440(a4, a5);
  id v38 = v37;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    unint64_t v48 = v19;
    uint64_t v42 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 134218242;
    Data.hashValue.getter();
    sub_1001F7498(a4, a5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1001F7498(a4, a5);
    *(_WORD *)(v41 + 12) = 2112;
    uint64_t v50 = (uint64_t)v38;
    id v43 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v42 = v38;

    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Successfully signed data (%ld) into %@.", (uint8_t *)v41, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    unint64_t v19 = v48;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001F7498(a4, a5);
    sub_1001F7498(a4, a5);
  }
  id v47 = v38;
  a6(v38, 0);

  return sub_1001FCB18(a1, v19);
}

void sub_1002B989C()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v1 = (id)TUCopyIDSFromIDForHandle();
  unint64_t v2 = (void *)IDSCopyIDForTokenWithID();

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002B9924(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v15 = (void *)swift_allocObject();
  v15[2] = a5;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_1002BCE3C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  aBlock[3] = &unk_1005122A0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  sub_100249550(a1, a2);
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  unint64_t v21 = _swiftEmptyArrayStorage;
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  return swift_release();
}

uint64_t sub_1002B9C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v9)
  {
    swift_retain();
    v9(a2, a3, a4);
    sub_100208490((uint64_t)v9);
  }
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 16);
  *id v8 = 0;
  v8[1] = 0;
  return sub_100208490(v10);
}

uint64_t sub_1002B9CBC(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void (**)(void, unint64_t, uint64_t))(a1 + 16);
  if (v3)
  {
    sub_1002BCB38();
    uint64_t v4 = swift_allocError();
    void *v5 = 0;
    swift_retain();
    v3(0, 0xF000000000000000, v4);
    sub_100208490((uint64_t)v3);
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  *unint64_t v2 = 0;
  v2[1] = 0;
  return sub_100208490(v6);
}

void sub_1002B9E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_1002B9EC0(void *a1, void *a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v146 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v145 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  v143 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v144 = (char *)&v135 - v16;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  v149 = a2;
  v150 = a3;
  uint64_t v18 = *(void **)((char *)a2 + OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement);
  _Block_copy(a3);
  id v147 = v18;
  if ([v18 isEnabled])
  {
    uint64_t v19 = v17;
    uint64_t v136 = v13;
    v137 = v12;
    if (qword_1005839E8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = sub_1001F5F88(v20, (uint64_t)qword_100594BB0);
    id v22 = a1;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = "eIdentifier";
    uint64_t v148 = v19;
    uint64_t v141 = v6;
    uint64_t v140 = v9;
    v139 = v8;
    uint64_t v138 = v10;
    uint64_t v142 = v21;
    if (v25)
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      aBlock[0] = v22;
      id v29 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v22;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requested to verify %@.", v27, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      uint64_t v19 = v148;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = v149;
    id v35 = (void **)((char *)v149 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache);
    swift_beginAccess();
    uint64_t v36 = *v35;
    id v37 = v22;
    uint64_t v38 = sub_1002BB038(v37, v36);
    unsigned __int8 v40 = v39;
    LODWORD(v36) = ~v39;

    if (v36)
    {
      swift_endAccess();
      if ((v40 & 1) == 0)
      {
        uint64_t v41 = v38 & 1;
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 67109120;
          LODWORD(aBlock[0]) = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "Retrieved previously verified voucher: %{BOOL}d.", v44, 8u);
          swift_slowDealloc();
        }

        uint64_t v45 = v150;
        (*((void (**)(const void *, uint64_t, void))v150 + 2))(v150, v41, 0);
        swift_release();
        uint64_t v33 = v45;
        goto LABEL_8;
      }
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = sub_1002B7A70;
      *(void *)(v59 + 24) = v19;
      id v60 = v37;
      swift_retain();
      sub_1002BCC54(v38, v40);
      swift_retain();
      uint64_t v61 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A4D0C();
        uint64_t v61 = v132;
      }
      unint64_t v62 = *(void *)(v61 + 16);
      if (v62 >= *(void *)(v61 + 24) >> 1)
      {
        sub_1003A4D0C();
        uint64_t v61 = v133;
      }
      *(void *)(v61 + 16) = v62 + 1;
      uint64_t v63 = v61 + 16 * v62;
      *(void *)(v63 + 32) = sub_1002BD580;
      *(void *)(v63 + 40) = v59;
      swift_release();
      swift_beginAccess();
      uint64_t v64 = *v35;
      v65 = (objc_class *)sub_1001F081C(&qword_100587D00);
      uint64_t v66 = (char *)objc_allocWithZone(v65);
      uint64_t v67 = &v66[*(void *)((swift_isaMask & *(void *)v66) + 0x68)];
      *(void *)uint64_t v67 = v61;
      v67[8] = 1;
      v152.receiver = v66;
      v152.super_class = v65;
      swift_bridgeObjectRetain_n();
      id v68 = objc_msgSendSuper2(&v152, "init");
      v69 = (objc_class *)sub_1001F081C(&qword_100587D08);
      uint64_t v70 = (char *)objc_allocWithZone(v69);
      *(void *)&v70[*(void *)((swift_isaMask & *(void *)v70) + 0x68)] = v60;
      v151.receiver = v70;
      v151.super_class = v69;
      id v71 = v60;
      id v72 = objc_msgSendSuper2(&v151, "init");
      [v64 setObject:v68 forKey:v72];
      swift_endAccess();

      swift_bridgeObjectRelease_n();
      sub_1002BCC6C(v38, v40);
LABEL_30:
      swift_release();
      uint64_t v33 = v150;
      goto LABEL_8;
    }
    swift_endAccess();
    id v46 = [v37 handle];
    id v47 = (id)TUCopyIDSFromIDForHandle();

    if (v47)
    {
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      NSString v51 = [v37 tokenPrefixedURI];
      if (!v51)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v51 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      unint64_t v52 = (void *)IDSCopyAddressDestinationForDestination();

      if (v52)
      {
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = v54;

        if (v48 == v53 && v50 == v55)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v58 = v148;
LABEL_38:
          sub_1001F6204(0, (unint64_t *)&unk_100589680);
          id v83 = [v37 tokenPrefixedURI];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v84 = sub_1002BB324();
          if (v84)
          {
            uint64_t v85 = v84;
            sub_1001F081C(&qword_10058C120);
            uint64_t v86 = swift_allocObject();
            *(_OWORD *)(v86 + 16) = xmmword_10048F550;
            uint64_t v87 = swift_allocObject();
            *(void *)(v87 + 16) = sub_1002B7A70;
            *(void *)(v87 + 24) = v58;
            *(void *)(v86 + 32) = sub_1002BCB84;
            *(void *)(v86 + 40) = v87;
            swift_beginAccess();
            uint64_t v88 = *v35;
            uint64_t v89 = (objc_class *)sub_1001F081C(&qword_100587D00);
            v90 = (char *)objc_allocWithZone(v89);
            unint64_t v91 = &v90[*(void *)((swift_isaMask & *(void *)v90) + 0x68)];
            *(void *)unint64_t v91 = v86;
            v91[8] = 1;
            v156.receiver = v90;
            v156.super_class = v89;
            swift_bridgeObjectRetain_n();
            id v92 = v37;
            swift_retain();
            id v93 = objc_msgSendSuper2(&v156, "init");
            uint64_t v94 = (objc_class *)sub_1001F081C(&qword_100587D08);
            uint64_t v95 = (char *)objc_allocWithZone(v94);
            *(void *)&v95[*(void *)((swift_isaMask & *(void *)v95) + 0x68)] = v92;
            v155.receiver = v95;
            v155.super_class = v94;
            id v96 = v92;
            id v97 = objc_msgSendSuper2(&v155, "init");
            [v88 setObject:v93 forKey:v97];
            swift_endAccess();

            swift_bridgeObjectRelease_n();
            uint64_t v98 = swift_allocObject();
            uint64_t v99 = swift_allocObject();
            *(void *)(v98 + 16) = sub_1002BCBF0;
            *(void *)(v99 + 16) = v96;
            *(void *)(v99 + 24) = v34;
            *(void *)(v98 + 24) = v99;
            id v100 = v96;
            v101 = v34;
            if ([v147 shouldForceVerificationFailures])
            {
              sub_1002BCB38();
              uint64_t v102 = swift_allocError();
              void *v103 = 5;
              swift_retain();
              sub_1002BCBF0(0, v102);
              sub_100208490((uint64_t)sub_1002BCBF0);

              swift_errorRelease();
              uint64_t v104 = *(void *)(v98 + 16);
              *(void *)(v98 + 16) = 0;
              *(void *)(v98 + 24) = 0;
              sub_100208490(v104);
            }
            else
            {
              uint64_t v111 = *(void *)&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 32];
              id v147 = *(id *)&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 24];
              v149 = sub_100204074(&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService], (uint64_t)v147);
              id v112 = [v100 encryptedData];
              uint64_t v142 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v114 = v113;

              id v115 = [v100 unsafeData];
              uint64_t v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v118 = v117;

              uint64_t v119 = swift_allocObject();
              *(void *)(v119 + 16) = v101;
              *(void *)(v119 + 24) = v98;
              v120 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, void *, uint64_t, uint64_t (*)(char, uint64_t), uint64_t, id, uint64_t))(v111 + 8);
              v121 = v101;
              v122 = v85;
              id v135 = v85;
              v123 = v121;
              swift_retain();
              uint64_t v134 = v111;
              uint64_t v124 = v142;
              v120(v142, v114, v116, v118, v122, 3, sub_1002BCBFC, v119, v147, v134);
              swift_release();
              sub_1001F7498(v116, v118);
              sub_1001F7498(v124, v114);
              id v147 = *(id *)&v123[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue];
              v125 = v143;
              static DispatchTime.now()();
              v126 = v144;
              + infix(_:_:)();
              v149 = *(void **)(v145 + 8);
              uint64_t v127 = v136;
              ((void (*)(char *, uint64_t))v149)(v125, v136);
              aBlock[4] = sub_1002BCC04;
              aBlock[5] = v98;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_1002C2C88;
              aBlock[3] = &unk_100512110;
              v128 = _Block_copy(aBlock);
              swift_retain();
              v129 = v137;
              static DispatchQoS.unspecified.getter();
              v153 = _swiftEmptyArrayStorage;
              sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_1001F081C((uint64_t *)&unk_100584B00);
              sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
              v130 = v139;
              uint64_t v131 = v141;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

              _Block_release(v128);
              (*(void (**)(char *, uint64_t))(v146 + 8))(v130, v131);
              (*(void (**)(char *, uint64_t))(v138 + 8))(v129, v140);
              ((void (*)(char *, uint64_t))v149)(v126, v127);
              swift_release();
            }
            swift_release();
            goto LABEL_30;
          }
          v105 = v37;
          v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v106, v107))
          {
            v108 = (uint8_t *)swift_slowAlloc();
            v109 = (void *)swift_slowAlloc();
            *(_DWORD *)v108 = 138412290;
            aBlock[0] = v105;
            v110 = v105;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v109 = v105;

            _os_log_impl((void *)&_mh_execute_header, v106, v107, "Failed to verify %@ because we couldn't create a URI.", v108, 0xCu);
            sub_1001F081C(&qword_100585900);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            v106 = v105;
          }

          sub_1002BCB38();
          swift_allocError();
          uint64_t v80 = 1;
LABEL_36:
          *uint64_t v79 = v80;
          uint64_t v81 = (void *)_convertErrorToNSError(_:)();
          Swift::Int v82 = v150;
          (*((void (**)(const void *, void, void *))v150 + 2))(v150, 0, v81);

          swift_errorRelease();
          swift_release();
          uint64_t v33 = v82;
          goto LABEL_8;
        }
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = v148;
        uint64_t v26 = "synchronousConversationsForBundleIdentifier" + 32;
        if (v57) {
          goto LABEL_38;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = "eIdentifier";
      }
    }
    unint64_t v73 = v37;
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = (void *)swift_slowAlloc();
      *(_DWORD *)v76 = *((void *)v26 + 206);
      aBlock[0] = v73;
      unint64_t v78 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v77 = v73;

      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to verify %@ because the token prefixed URI did not come from the handle.", v76, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v74 = v73;
    }

    sub_1002BCB38();
    swift_allocError();
    uint64_t v80 = 4;
    goto LABEL_36;
  }
  sub_1002BCB38();
  swift_allocError();
  *unint64_t v30 = 3;
  uint64_t v31 = (void *)_convertErrorToNSError(_:)();
  uint64_t v32 = v150;
  (*((void (**)(const void *, void, void *))v150 + 2))(v150, 0, v31);

  swift_errorRelease();
  swift_release();
  uint64_t v33 = v32;

LABEL_8:
  _Block_release(v33);
}

uint64_t sub_1002BB038(void *a1, void *a2)
{
  uint64_t v4 = (objc_class *)sub_1001F081C(&qword_100587D08);
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[*(void *)((swift_isaMask & *(void *)v5) + 0x68)] = a1;
  v12.receiver = v5;
  v12.super_class = v4;
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v12, "init");
  id v8 = objc_msgSend(a2, "objectForKey:", v7, v12.receiver, v12.super_class);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = (char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68);
  uint64_t v10 = *(void *)v9;
  sub_1002BC88C(*(void *)v9, v9[8]);

  return v10;
}

void sub_1002BB13C(uint64_t a1, unsigned __int8 a2, void *a3)
{
  if (a2 == 0xFF)
  {
    uint64_t v16 = *v3;
    uint64_t v17 = (objc_class *)sub_1001F081C(&qword_100587D08);
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[*(void *)((swift_isaMask & *(void *)v18) + 0x68)] = a3;
    v23.receiver = v18;
    v23.super_class = v17;
    id v19 = a3;
    id v20 = objc_msgSendSuper2(&v23, "init");
    [v16 removeObjectForKey:v20];
  }
  else
  {
    id v7 = *v3;
    id v8 = (objc_class *)sub_1001F081C(&qword_100587D00);
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = (char *)v9 + *(void *)((swift_isaMask & *v9) + 0x68);
    *(void *)uint64_t v10 = a1;
    v10[8] = a2 & 1;
    sub_1002BC88C(a1, a2 & 1);
    sub_1002BC88C(a1, a2 & 1);
    v22.receiver = v9;
    v22.super_class = v8;
    id v11 = objc_msgSendSuper2(&v22, "init");
    objc_super v12 = (objc_class *)sub_1001F081C(&qword_100587D08);
    uint64_t v13 = (char *)objc_allocWithZone(v12);
    *(void *)&v13[*(void *)((swift_isaMask & *(void *)v13) + 0x68)] = a3;
    v21.receiver = v13;
    v21.super_class = v12;
    id v14 = a3;
    id v15 = objc_msgSendSuper2(&v21, "init");
    objc_msgSend(v7, "setObject:forKey:", v11, v15, v21.receiver, v21.super_class);

    sub_1002BCC6C(a1, a2);
    sub_1002BCC6C(a1, a2);
  }
}

id sub_1002BB324()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithPrefixedURI:v1];

  return v2;
}

uint64_t sub_1002BB398(unsigned __int8 a1, uint64_t a2, void *a3, uint64_t a4)
{
  unsigned __int8 v7 = a1;
  if ((a1 & 1) == 0)
  {
    if (qword_1005839E8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1001F5F88(v14, (uint64_t)qword_100594BB0);
    id v15 = a3;
    swift_errorRetain();
    id v16 = v15;
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v10, v17))
    {

      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_13;
    }
    uint64_t v18 = swift_slowAlloc();
    unsigned __int8 v38 = v7;
    id v19 = (void *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138412546;
    id v20 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v19 = v16;

    *(_WORD *)(v18 + 12) = 2080;
    swift_errorRetain();
    sub_1001F081C(&qword_100587D10);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v40 = sub_1002344D8(v21, v22, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v17, "Failed to verify %@ with error %s", (uint8_t *)v18, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    unsigned __int8 v7 = v38;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_10:
    swift_slowDealloc();
LABEL_13:

    goto LABEL_14;
  }
  if (qword_1005839E8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594BB0);
  id v9 = a3;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    objc_super v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    *(_DWORD *)objc_super v12 = 138412290;
    v41[0] = (uint64_t)v9;
    id v37 = a3;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v36 = v9;

    a3 = v37;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully verified %@.", v12, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_10;
  }

LABEL_14:
  objc_super v23 = (void **)(a4 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache);
  swift_beginAccess();
  os_log_type_t v24 = *v23;
  id v25 = a3;
  uint64_t v26 = sub_1002BB038(v25, v24);
  unsigned __int8 v28 = v27;
  LODWORD(v24) = ~v27;

  if v24 && (v28)
  {
    swift_endAccess();
    uint64_t v29 = *(void *)(v26 + 16);
    if (v29)
    {
      unsigned __int8 v39 = v7;
      char v30 = v7 & 1;
      uint64_t v31 = v26 + 40;
      do
      {
        uint64_t v32 = *(void (**)(uint64_t *, uint64_t *))(v31 - 8);
        LOBYTE(v40) = v30;
        v41[0] = a2;
        swift_retain();
        v32(&v40, v41);
        swift_release();
        v31 += 16;
        --v29;
      }
      while (v29);
      sub_1002BCC6C(v26, v28);
      unsigned __int8 v7 = v39;
    }
    else
    {
      sub_1002BCC6C(v26, v28);
    }
  }
  else
  {
    swift_endAccess();
  }
  swift_beginAccess();
  id v33 = v25;
  if (a2) {
    unsigned __int8 v34 = -1;
  }
  else {
    unsigned __int8 v34 = 0;
  }
  sub_1002BB13C((a2 == 0) & v7, v34, v33);
  return swift_endAccess();
}

uint64_t sub_1002BB884(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  id v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(unsigned char *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  aBlock[4] = sub_1002BCCC4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  aBlock[3] = &unk_100512188;
  id v15 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void))(v11 + 8))(v13, v17[0]);
  return swift_release();
}

uint64_t sub_1002BBB50(uint64_t a1, char a2, uint64_t a3)
{
  id v6 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v7)
  {
    swift_retain();
    v7(a2 & 1, a3);
    sub_100208490((uint64_t)v7);
  }
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 16);
  *id v6 = 0;
  v6[1] = 0;
  return sub_100208490(v8);
}

uint64_t sub_1002BBBFC(uint64_t a1)
{
  id v2 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v3)
  {
    sub_1002BCB38();
    uint64_t v4 = swift_allocError();
    void *v5 = 0;
    swift_retain();
    v3(0, v4);
    sub_100208490((uint64_t)v3);
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  *id v2 = 0;
  v2[1] = 0;
  return sub_100208490(v6);
}

void sub_1002BBD4C()
{
}

uint64_t sub_1002BBE4C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1002BBE80();

  return v2;
}

uint64_t sub_1002BBE80()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t sub_1002BBEF8(uint64_t a1)
{
  sub_100204CE0(a1, (uint64_t)v4);
  if (!v5)
  {
    sub_100202D2C((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for CountLimitCache.WrappedKey();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v1 = 0;
    return v1 & 1;
  }
  char v1 = dispatch thunk of static Equatable.== infix(_:_:)();

  return v1 & 1;
}

uint64_t sub_1002BC01C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    id v5 = a1;
  }
  char v6 = sub_1002BBEF8((uint64_t)v8);

  sub_100202D2C((uint64_t)v8);
  return v6 & 1;
}

void sub_1002BC094()
{
}

void sub_1002BC0C4()
{
}

id sub_1002BC0E8()
{
  return sub_1002BC1D4((uint64_t (*)(void, void, void, void))type metadata accessor for CountLimitCache.WrappedKey);
}

uint64_t sub_1002BC100(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8)
                                           + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x68)]);
}

void sub_1002BC168()
{
}

void sub_1002BC198()
{
}

id sub_1002BC1BC()
{
  return sub_1002BC1D4((uint64_t (*)(void, void, void, void))type metadata accessor for CountLimitCache.WrappedValue);
}

id sub_1002BC1D4(uint64_t (*a1)(void, void, void, void))
{
  uint64_t v2 = (objc_class *)a1(0, *(void *)((swift_isaMask & *v1) + 0x50), *(void *)((swift_isaMask & *v1) + 0x58), *(void *)((swift_isaMask & *v1) + 0x60));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1002BC264(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x58) - 8)
                                           + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x68)]);
}

uint64_t sub_1002BC2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1002BC2F0(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1002BC2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  v17[4] = a7;
  v17[5] = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_100317DEC;
  v17[3] = &unk_1005122F0;
  id v15 = _Block_copy(v17);
  swift_retain();
  [v8 verifySignedData:isa matchesExpectedData:v14 withTokenURI:a5 forAlgorithm:a6 completion:v15];
  _Block_release(v15);

  return swift_release();
}

uint64_t sub_1002BC3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002BC418(a1, a2, a3, a4, a5);
}

uint64_t sub_1002BC418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  _OWORD v12[2] = sub_1002BC4EC;
  v12[3] = &unk_1005122C8;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  [v5 signData:isa withAlgorithm:a3 completion:v10];
  _Block_release(v10);

  return swift_release();
}

uint64_t sub_1002BC4EC(uint64_t a1, void *a2, void *a3)
{
  objc_super v4 = a2;
  id v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    objc_super v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_1001FCB18((uint64_t)v4, v8);

  return swift_release();
}

uint64_t sub_1002BC598()
{
  uint64_t result = sub_1002BCE48(v0);
  if (v2 >> 60 == 15) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002BC5C4()
{
  return sub_1002BC598();
}

uint64_t sub_1002BC5E8()
{
  return type metadata accessor for VoucherManagerImpl();
}

uint64_t type metadata accessor for VoucherManagerImpl()
{
  uint64_t result = qword_100587B68;
  if (!qword_100587B68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BC638()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002BC6EC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedKey()
{
  return sub_1001F919C();
}

uint64_t sub_1002BC798()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedValue()
{
  return sub_1001F919C();
}

uint64_t initializeBufferWithCopyOfBuffer for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1002BC88C(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1002BC88C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for VoucherManagerImpl.VerificationQuery(uint64_t a1)
{
  return sub_1002BC8A8(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_1002BC8A8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1002BC88C(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_1002BC8A8(v5, v6);
  return a1;
}

uint64_t initializeWithTake for VoucherManagerImpl.VerificationQuery(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_1002BC8A8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002BC9E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1002BC9E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for VoucherManagerImpl.VerificationQuery()
{
  return &type metadata for VoucherManagerImpl.VerificationQuery;
}

uint64_t sub_1002BCA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t type metadata accessor for CountLimitCache()
{
  return sub_1001F919C();
}

id sub_1002BCA24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  id v16 = [v7 initWithHandle:a1 tokenPrefixedURI:v13 data:isa encryptedData:v15];
  sub_1001F7498(a6, a7);
  sub_1001F7498(a4, a5);

  return v16;
}

uint64_t sub_1002BCB00()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1002BCB38()
{
  unint64_t result = qword_100587CF8;
  if (!qword_100587CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587CF8);
  }
  return result;
}

uint64_t sub_1002BCB84(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1002BCBB8()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002BCBF0(unsigned __int8 a1, uint64_t a2)
{
  return sub_1002BB398(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002BCBFC(char a1, uint64_t a2)
{
  return sub_1002BB884(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002BCC04()
{
  return sub_1002BBBFC(v0);
}

uint64_t sub_1002BCC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002BCC1C()
{
  return swift_release();
}

uint64_t sub_1002BCC24()
{
  swift_release();
  uint64_t v0 = sub_1002544DC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1002BCC54(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1002BC88C(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1002BCC6C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1002BC8A8(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1002BCC84()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002BCCC4()
{
  return sub_1002BBB50(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1002BCCD4(uint64_t a1, uint64_t a2)
{
  sub_1002B9E50(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002BCCE0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002BCD18()
{
  sub_1001F7498(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002BCD68(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1002B91C8(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void (**)(id, uint64_t))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void **)(v3 + 56));
}

uint64_t sub_1002BCD9C()
{
  swift_release();
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002BCDD4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1002B9924(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1002BCDDC()
{
  return sub_1002B9CBC(v0);
}

uint64_t sub_1002BCDE4()
{
  swift_release();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_1001F7498(*(void *)(v0 + 24), v1);
  }
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002BCE3C()
{
  return sub_1002B9C00(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002BCE48(void *a1)
{
  id v1 = [a1 pushToken];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_1002BCEAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char *a5)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  v36[3] = sub_1001F6204(0, &qword_100587D18);
  v36[4] = &off_100511E20;
  v36[0] = a1;
  v35[3] = sub_1001F6204(0, &qword_100587D20);
  v35[4] = &off_100511E38;
  v35[0] = a2;
  uint64_t v13 = OBJC_IVAR___CSDVoucherManagerImpl_verificationCache;
  id v14 = objc_allocWithZone((Class)NSCache);
  Class v15 = a5;
  id v16 = [v14 init];
  [v16 setCountLimit:32];
  *(void *)&a5[v13] = v16;
  if (qword_1005839E8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_1001F5F88(v17, (uint64_t)qword_100594BB0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Initializing VoucherManager.", v20, 2u);
    swift_slowDealloc();
  }

  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  unsigned __int8 v34 = _swiftEmptyArrayStorage;
  sub_1002BD364((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_10020A70C((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  *(void *)&v15[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10020ED28((uint64_t)v36, (uint64_t)&v15[OBJC_IVAR___CSDVoucherManagerImpl_idsService]);
  sub_10020ED28((uint64_t)v35, (uint64_t)&v15[OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler]);
  uint64_t v21 = v31;
  *(void *)&v15[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement] = v31;
  unint64_t v22 = &v15[OBJC_IVAR___CSDVoucherManagerImpl_timeout];
  uint64_t v23 = type metadata accessor for DispatchTimeInterval();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, v32, v23);
  swift_unknownObjectRetain();

  v33.receiver = v15;
  v33.super_class = ObjectType;
  id v26 = objc_msgSendSuper2(&v33, "init");

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v23);
  sub_1002018DC((uint64_t)v35);
  sub_1002018DC((uint64_t)v36);
  return v26;
}

uint64_t sub_1002BD364(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for VoucherManagerError()
{
  return &type metadata for VoucherManagerError;
}

unint64_t sub_1002BD3C4()
{
  unint64_t result = qword_100587D28;
  if (!qword_100587D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587D28);
  }
  return result;
}

unint64_t sub_1002BD414()
{
  unint64_t result = qword_100587D30;
  if (!qword_100587D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587D30);
  }
  return result;
}

unint64_t sub_1002BD464()
{
  unint64_t result = qword_100587D38;
  if (!qword_100587D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587D38);
  }
  return result;
}

unint64_t sub_1002BD4B4()
{
  unint64_t result = qword_100587D40;
  if (!qword_100587D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587D40);
  }
  return result;
}

unint64_t sub_1002BD500()
{
  unint64_t result = qword_100587D48;
  if (!qword_100587D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587D48);
  }
  return result;
}

uint64_t (*sub_1002BD584(uint64_t (*result)(void)))(void)
{
  if (result) {
    return (uint64_t (*)(void))result(*(unsigned __int8 *)(v1 + 66));
  }
  return result;
}

uint64_t sub_1002BD5B8()
{
  uint64_t v1 = *(void **)(v0 + 48);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MockCallAnnouncementRequest()
{
  return self;
}

uint64_t sub_1002BD63C()
{
  return *(void *)(v0 + 16);
}

id sub_1002BD648()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_1001F2514();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  sub_1001F2514();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  sub_1001F2514();
  sub_1001F07DC();
  static DispatchQoS.unspecified.getter();
  sub_10021FD54();
  sub_1001F081C(&qword_100585100);
  sub_1001F0860();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t v7 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v8 = objc_allocWithZone(ObjectType);
  id v9 = sub_1002BD89C(v7);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v9;
}

id sub_1002BD89C(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC13callservicesd28MockCallAnnouncementProvider_activeDescriptor];
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  *(_OWORD *)((char *)v4 + 26) = 0u;
  v1[OBJC_IVAR____TtC13callservicesd28MockCallAnnouncementProvider_isAvailable] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd28MockCallAnnouncementProvider_queue] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for MockCallAnnouncementProvider()
{
  return self;
}

void sub_1002BD990(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

id FTServerBag.isMomentsDisabled.getter()
{
  if (sub_100202C60(0xD000000000000010, 0x8000000100484650, v0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_100202CC4((uint64_t)v4, (uint64_t)v5);
  if (!v6)
  {
    sub_100202D2C((uint64_t)v5);
    return 0;
  }
  sub_100202D8C();
  if ((sub_1002BDBFC() & 1) == 0) {
    return 0;
  }
  id v1 = [v3 BOOLValue];

  return v1;
}

double FTServerBag.momentsRequestTimeout.getter()
{
  if (sub_100202C60(0xD000000000000017, 0x8000000100484670, v0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100202CC4((uint64_t)v5, (uint64_t)v6);
  if (!v7)
  {
    sub_100202D2C((uint64_t)v6);
    return 300.0;
  }
  sub_100202D8C();
  if ((sub_1002BDBFC() & 1) == 0) {
    return 300.0;
  }
  [v4 doubleValue];
  double v2 = v1;

  return v2;
}

uint64_t sub_1002BDBFC()
{
  return swift_dynamicCast();
}

uint64_t sub_1002BDC1C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002BDC9C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002BDD1C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002BDD9C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002BDE1C()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1002BDE9C(void *a1, void *a2)
{
  id v3 = v2;
  id v221 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v220 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v213 = v6;
  __chkstk_darwin(v7);
  sub_1001FCCD0();
  uint64_t v212 = v8;
  uint64_t v9 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v9 - 8);
  sub_1001F7650();
  uint64_t v219 = v10;
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v187 - v13;
  __chkstk_darwin(v12);
  v218 = (char *)&v187 - v15;
  uint64_t v16 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v16 - 8);
  sub_1001F7650();
  sub_10026B78C();
  __chkstk_darwin(v17);
  v205 = (char *)&v187 - v18;
  uint64_t v204 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v199 = v19;
  __chkstk_darwin(v20);
  sub_1001FCCD0();
  uint64_t v198 = v21;
  uint64_t v22 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v22 - 8);
  sub_1001F7650();
  sub_10026B78C();
  __chkstk_darwin(v23);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v24);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v25);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v26);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v27);
  v208 = (char *)&v187 - v28;
  uint64_t v29 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  sub_1001F7650();
  sub_10026B78C();
  __chkstk_darwin(v33);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v34);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v35);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v36);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v37);
  sub_10026B98C();
  sub_10026B78C();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v187 - v39;
  uint64_t v41 = &v3[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeStart];
  *(void *)uint64_t v41 = 0;
  v187 = v41;
  v41[8] = 1;
  uint64_t v42 = &v3[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeEnd];
  *(void *)uint64_t v42 = 0;
  v189 = v42;
  v42[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = 0;
  os_log_type_t v43 = (uint64_t *)&v3[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_CID];
  uint64_t *v43 = 0;
  v43[1] = 0;
  v197 = v43;
  v3[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud] = 2;
  uint64_t v44 = v3;
  id v45 = [a1 callUUID];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  uint64_t v49 = (uint64_t *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_callUUID];
  *uint64_t v49 = v46;
  v49[1] = v48;
  unsigned int v50 = [a1 disconnectedReason];
  *(_DWORD *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endReason] = v50;
  id v51 = [a1 providerErrorCode];
  *(void *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerErrorCode] = v51;
  id v52 = [a1 providerEndedReason];
  *(void *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerEndedReason] = v52;
  unsigned __int8 v53 = [a1 isIncoming];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_incoming] = v53;
  unsigned __int8 v54 = [a1 isConnecting];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connected] = v54;
  unsigned __int8 v55 = [a1 isConferenced];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_currentlyGrouped] = v55;
  unsigned __int8 v56 = [a1 isHostedOnCurrentDevice];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relay] = v56 ^ 1;
  unsigned __int8 v57 = [a1 isConversation];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isConversation] = v57;
  unsigned __int8 v58 = [a1 joinedFromLink];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_fromLink] = v58;
  *(_DWORD *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_userScore] = -1;
  id v59 = [a1 liveVoicemailStatus];
  *(void *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_liveVoicemailStatus] = v59;
  unsigned int v60 = [a1 originatingUIType];
  *(_DWORD *)&v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_originatingUIType] = v60;
  unsigned __int8 v61 = [a1 startAsOneToOneMode];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtStart] = v61;
  unsigned __int8 v62 = [a1 isOneToOneModeEnabled];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtEnd] = v62;
  Date.init()();
  uint64_t v211 = v31;
  uint64_t v63 = *(void (**)(void))(v31 + 32);
  v192 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_timebase];
  v210 = v40;
  uint64_t v209 = v31 + 32;
  v214 = v63;
  v63();
  uint64_t v227 = 0;
  v228 = 0;
  id v64 = [a1 callCenter];
  v217 = (objc_class *)ObjectType;
  v201 = v14;
  if (v64)
  {
    v65 = v64;
    uint64_t v66 = [v64 queue];
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = &v227;
    *(void *)(v67 + 24) = v65;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = sub_1002C1C88;
    *(void *)(v68 + 24) = v67;
    uint64_t v216 = v67;
    v224 = sub_10021E788;
    uint64_t v225 = v68;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10032062C;
    v223 = &unk_100512408;
    v69 = _Block_copy(aBlock);
    id v70 = v65;
    swift_retain();
    swift_release();
    dispatch_sync(v66, v69);

    _Block_release(v69);
    LOBYTE(v66) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v66)
    {
      __break(1u);
      goto LABEL_103;
    }
    uint64_t v71 = v227;
    id v64 = v228;
    v215 = sub_1002C1C88;
  }
  else
  {
    uint64_t v71 = 0;
    v215 = 0;
    uint64_t v216 = 0;
  }
  id v72 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_audioRoute];
  void *v72 = v71;
  v72[1] = v64;
  swift_bridgeObjectRetain();
  id v73 = [a1 provider];
  unsigned __int8 v74 = [v73 isTelephonyProvider];

  os_log_type_t v75 = &unk_100594000;
  v76 = (void (*)(void))"ConversationPersistenceStorage";
  if ((v74 & 1) == 0)
  {
    sub_1002C2210(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration);
    sub_1002C20F0();
    sub_1002C20C0();
    if (!v186)
    {
      if (v90 > -9.22337204e18)
      {
        sub_1002C20B0();
        if (!v92) {
          goto LABEL_105;
        }
        id v93 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs];
        *(void *)id v93 = (uint64_t)v91;
        v93[8] = 0;
        unsigned __int8 v94 = [a1 startAsHandoff];
        v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff] = v94;
        unsigned __int8 v95 = [a1 endDueToHandoff];
        v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff] = v95;
        unsigned __int8 v96 = [a1 remoteDoesHandoff];
        v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff] = v96;
        id v97 = [a1 dateSentInvitation];
        if (v97)
        {
          uint64_t v98 = v97;
          uint64_t v99 = v210;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          os_log_type_t v75 = v208;
          sub_1002C22A0();
          (*(void (**)(void))"ConversationPersistenceStorage")();
          sub_1002C1F98();
          uint64_t v100 = v211;
          if (!v186)
          {
            uint64_t v101 = v196;
            sub_1002C1FF0();
            (*(void (**)(void))"ConversationPersistenceStorage")();
            id v102 = [a1 dateCreated];
            sub_1002C2124();

            Date.timeIntervalSince(_:)();
            os_log_type_t v75 = *(void **)(v100 + 8);
            ((void (*)(char *, uint64_t))v75)(v99, v29);
            ((void (*)(uint64_t, uint64_t))v75)(v101, v29);
            sub_1002C20C0();
            if (v186)
            {
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }
            if (v103 <= -9.22337204e18)
            {
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
              goto LABEL_112;
            }
            sub_1002C20B0();
            v76 = v214;
            if (!v92) {
              goto LABEL_111;
            }
            char v105 = 0;
            uint64_t v106 = (uint64_t)v104;
LABEL_31:
            v110 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs];
            *(void *)v110 = v106;
            v110[8] = v105;
            uint64_t v111 = &selRef_conversationsByUUID;
            if ([a1 dateConnected])
            {
              sub_1002C2124();

              os_log_type_t v75 = v207;
              sub_1002C1FF0();
              v76();
              sub_1002C1F98();
              if (!v186)
              {
                sub_1002C1FF0();
                v76();
                if ([a1 dateStartedConnecting])
                {
                  sub_1002C2124();

                  os_log_type_t v75 = v195;
                  sub_1002C1FF0();
                  v76();
                  sub_1002C1F98();
                  if (!v186)
                  {
                    uint64_t v112 = v100;
                    uint64_t v113 = v191;
                    sub_1002C1FF0();
                    v76();
                    uint64_t v114 = v200;
                    Date.timeIntervalSince(_:)();
                    os_log_type_t v75 = *(void **)(v112 + 8);
                    ((void (*)(uint64_t, uint64_t))v75)(v113, v29);
                    ((void (*)(uint64_t, uint64_t))v75)(v114, v29);
                    sub_1002C20C0();
                    if (v186)
                    {
LABEL_112:
                      __break(1u);
                      goto LABEL_113;
                    }
                    if (v115 <= -9.22337204e18)
                    {
LABEL_113:
                      __break(1u);
LABEL_114:
                      __break(1u);
                      return;
                    }
                    sub_1002C20B0();
                    v76 = v214;
                    uint64_t v100 = v211;
                    uint64_t v111 = &selRef_conversationsByUUID;
                    if (!v92) {
                      goto LABEL_114;
                    }
                    char v118 = 0;
                    uint64_t v119 = (uint64_t)v117;
LABEL_46:
                    v120 = (char *)p_vtable[481] + (void)v44;
                    *(void *)v120 = v119;
                    v120[8] = v118;
                    if (v221)
                    {
                      id v121 = [v221 timebase];
                      sub_1002C2124();

                      os_log_type_t v75 = v206;
                      sub_1002C1FF0();
                      v76();
                      sub_1002C1F98();
                      if (!v186)
                      {
                        v122 = v76;
                        uint64_t v123 = v202;
                        sub_1002C1FF0();
                        v122();
                        os_log_type_t v75 = v192;
                        swift_beginAccess();
                        (*(void (**)(void *, uint64_t, uint64_t))(v100 + 24))(v75, v123, v29);
                        swift_endAccess();
                        if ([a1 v111[117]])
                        {
                          sub_1002C2124();

                          uint64_t v123 = v193;
                          sub_1002C1FF0();
                          v122();
                          sub_1001F0530(v123, 0, 1, v29);
                          sub_1002C2000(v123);
                          if (!v186)
                          {
                            os_log_type_t v75 = v188;
                            uint64_t v124 = v214;
                            ((void (*)(void *, uint64_t, uint64_t))v214)(v188, v123, v29);
                            Date.timeIntervalSince(_:)();
                            uint64_t v126 = v125;
                            (*(void (**)(void *, uint64_t))(v100 + 8))(v75, v29);
                            uint64_t v127 = v187;
                            void *v187 = v126;
                            *((unsigned char *)v127 + 8) = 0;
                            uint64_t v128 = v203;
                            goto LABEL_57;
                          }
                        }
                        else
                        {
                          sub_1002C21EC((uint64_t)&v223);
                        }
                        sub_1002392A8(v123, &qword_100584B40);
                        uint64_t v128 = v203;
                        uint64_t v124 = v214;
LABEL_57:
                        if ([a1 dateEnded])
                        {
                          sub_1002C2124();

                          uint64_t v123 = v194;
                          sub_1002C1FF0();
                          v124();
                          sub_1001F0530(v123, 0, 1, v29);
                          sub_1002C2000(v123);
                          if (!v186)
                          {
                            os_log_type_t v75 = v190;
                            sub_1002C1FF0();
                            v124();
                            Date.timeIntervalSince(_:)();
                            uint64_t v130 = v129;
                            uint64_t v131 = *(void (**)(void))(v100 + 8);
                            sub_1002C2194();
                            v131();
                            sub_1002C2194();
                            v131();
                            uint64_t v132 = v189;
                            void *v189 = v130;
                            *((unsigned char *)v132 + 8) = 0;
LABEL_62:
                            sub_1002C2244();
                            goto LABEL_63;
                          }
                        }
                        else
                        {
                          sub_1002C21EC((uint64_t)&v224);
                        }
                        sub_1002C2194();
                        v133();
                        sub_1002392A8(v123, &qword_100584B40);
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                      sub_1002C203C((uint64_t)&v229);
                    }
                    sub_1002392A8((uint64_t)v75, &qword_100584B40);
                    if (!v221)
                    {
                      os_log_type_t v75 = v205;
                      sub_1001F0530((uint64_t)v205, 1, 1, v204);
LABEL_68:
                      sub_1002392A8((uint64_t)v75, (uint64_t *)&unk_100585580);
                      goto LABEL_73;
                    }
                    sub_1002C2244();
                    uint64_t v128 = v203;
LABEL_63:
                    id v134 = [v221 conversationID];
                    if (v134)
                    {
                      id v135 = v134;
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                      uint64_t v136 = 0;
                    }
                    else
                    {
                      uint64_t v136 = 1;
                    }
                    sub_1001F0530(v128, v136, 1, v29);
                    sub_100273CB0(v128, (uint64_t)v75, (uint64_t *)&unk_100585580);
                    sub_1002C2000((uint64_t)v75);
                    if (!v186)
                    {
                      uint64_t v137 = v199;
                      uint64_t v138 = v198;
                      (*(void (**)(uint64_t, void *, uint64_t))(v199 + 32))(v198, v75, v29);
                      uint64_t v139 = UUID.uuidString.getter();
                      uint64_t v141 = v140;
                      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v29);
                      uint64_t v142 = v197;
                      uint64_t *v197 = v139;
                      v142[1] = v141;
                      swift_bridgeObjectRelease();
                      goto LABEL_73;
                    }
                    goto LABEL_68;
                  }
                }
                else
                {
                  sub_1002C203C((uint64_t)&v225);
                }
                (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v200, v29);
              }
            }
            else
            {
              sub_1002C203C((uint64_t)&v230);
            }
            sub_1002392A8((uint64_t)v75, &qword_100584B40);
            uint64_t v119 = 0;
            char v118 = 1;
            p_vtable = &OBJC_METACLASS___CSDCallController.vtable;
            goto LABEL_46;
          }
        }
        else
        {
          sub_1002C203C((uint64_t)&v231);
          uint64_t v100 = v211;
          sub_1002C22A0();
        }
        sub_1002392A8((uint64_t)v75, &qword_100584B40);
        uint64_t v106 = 0;
        char v105 = 1;
        goto LABEL_31;
      }
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  sub_1002C2210(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs);
  unint64_t v78 = &v44[*(void *)(v77 + 3848)];
  *(void *)unint64_t v78 = 0;
  v78[8] = v79;
  uint64_t v80 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs];
  *(void *)uint64_t v80 = 0;
  v80[8] = v79;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff] = 0;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff] = 0;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff] = 0;
  sub_1002C20F0();
  double v82 = v81;
  sub_1002C20F0();
  if (v82 <= 10.0)
  {
    sub_1002C20C0();
    if (!v186)
    {
      if (v107 > -9.22337204e18)
      {
        sub_1002C20B0();
        if (v92)
        {
          v109 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration];
          *(void *)v109 = (uint64_t)v108;
          v109[8] = 0;
          goto LABEL_73;
        }
        goto LABEL_108;
      }
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  if (v83 <= 30.0)
  {
    sub_1002C2164();
    uint64_t v89 = 30;
  }
  else
  {
    sub_1002C20F0();
    if (v84 <= 60.0)
    {
      sub_1002C2164();
      uint64_t v89 = 60;
    }
    else
    {
      sub_1002C20F0();
      if (v85 <= 300.0)
      {
        sub_1002C2164();
        uint64_t v89 = 300;
      }
      else
      {
        sub_1002C20F0();
        if (v86 <= 1800.0)
        {
          sub_1002C2164();
          uint64_t v89 = 1800;
        }
        else
        {
          sub_1002C20F0();
          sub_1002C2164();
          if (v88 <= 3600.0) {
            uint64_t v89 = 3600;
          }
          else {
            uint64_t v89 = 10000;
          }
        }
      }
    }
  }
  *(void *)uint64_t v87 = v89;
  *(unsigned char *)(v87 + 8) = 0;
LABEL_73:
  unsigned int v143 = [a1 filteredOutReason];
  v144 = &v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_filteredOutReason];
  *(_DWORD *)v144 = v143;
  v144[4] = 0;
  id v145 = [a1 verificationStatus];
  sub_1002C213C((uint64_t)v145, OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_verficationStatus);
  id v146 = objc_msgSend(self, "tu_defaults");
  unsigned __int8 v147 = [v146 silenceUnknownCallersEnabled];

  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_knownCallerStatus] = v147;
  id v148 = [a1 silencingUserInfo];
  sub_100202D8C();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1002C2288(v149, v150);
  sub_1002C2258();
  swift_bridgeObjectRelease();
  if (v148)
  {
    sub_1002C2270();
  }
  id v151 = sub_1002C2108(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_returnedCall);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1002C2288(v152, v153);
  sub_1002C2258();
  swift_bridgeObjectRelease();
  if (v151)
  {
    sub_1002C2270();
  }
  id v154 = sub_1002C2108(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSiriSuggested);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v155 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1002C2288(v155, v156);
  sub_1002C2258();
  swift_bridgeObjectRelease();
  if (v154)
  {
    sub_1002C2270();
  }
  id v157 = sub_1002C2108(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownContact);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1002C2288(v158, v159);
  sub_1002C2258();
  swift_bridgeObjectRelease();
  if (v157)
  {
    sub_1002C2270();
  }
  uint64_t v160 = v220;
  id v161 = sub_1002C2108(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isOwnNumber);
  uint64_t v162 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v165 = (void *)sub_1002231D4(v163, v164, v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v165)
  {
    unsigned __int8 v166 = [v165 BOOLValue];
  }
  else
  {
    unsigned __int8 v166 = 2;
  }
  uint64_t v168 = (uint64_t)v218;
  uint64_t v167 = v219;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isVerifiedAppleCare] = v166;
  id v169 = [a1 junkConfidence];
  sub_1002C213C((uint64_t)v169, OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_junkConfidence);
  id v170 = [a1 identificationCategory];
  sub_1002C213C((uint64_t)v170, OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_identificationCategory);
  unsigned __int8 v171 = [a1 isKnownCaller];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownCaller] = v171;
  id v172 = [a1 imageURL];
  if (v172)
  {
    v173 = v172;
    uint64_t v174 = v212;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v213 + 32))(v168, v174, v160);
    uint64_t v175 = 1;
    sub_1001F0530(v168, 0, 1, v160);
    if (sub_1001F758C(v168, 1, v160) != 1)
    {
      sub_1002392A8(v168, &qword_1005878F0);
      v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCall] = 1;
      id v176 = [a1 imageURL];
      if (v176)
      {
        v177 = v176;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v175 = 0;
      }
      sub_1001F0530(v167, v175, 1, v160);
      uint64_t v178 = (uint64_t)v201;
      sub_100273CB0(v167, (uint64_t)v201, &qword_1005878F0);
      if (sub_1001F758C(v178, 1, v160) == 1)
      {
        sub_1002392A8(v178, &qword_1005878F0);
        char v179 = 0;
      }
      else
      {
        uint64_t v183 = URL.relativePath.getter();
        uint64_t v185 = v184;
        (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v178, v160);
        BOOL v186 = v183 == 0x6B636F74732FLL && v185 == 0xE600000000000000;
        if (v186)
        {
          swift_bridgeObjectRelease();
          char v179 = 1;
        }
        else
        {
          char v179 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_92;
    }
  }
  else
  {
    sub_1001F0530(v168, 1, 1, v160);
  }
  sub_1002392A8(v168, &qword_1005878F0);
  char v179 = 0;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCall] = 0;
LABEL_92:
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCallWithImage] = v179 & 1;
  if ([a1 wasScreened]) {
    unsigned int v180 = [a1 isScreening] ^ 1;
  }
  else {
    LOBYTE(v180) = 0;
  }
  v181 = v217;
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedThenAnswered] = v180;
  unsigned __int8 v182 = [a1 isScreening];
  v44[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedUnanswered] = v182;

  v226.receiver = v44;
  v226.super_class = v181;
  objc_msgSendSuper2(&v226, "init");

  swift_bridgeObjectRelease();
  sub_100208490((uint64_t)v215);
}

void sub_1002BF560(long long *a1, void *a2)
{
  *a1 = xmmword_100492620;
  swift_bridgeObjectRelease();
  id v4 = [a2 routeController];
  id v5 = [v4 pickedRoute];

  if (!v5) {
    return;
  }
  *a1 = xmmword_100492630;
  swift_bridgeObjectRelease();
  if ([v5 isBluetooth])
  {
    long long v6 = xmmword_100492640;
LABEL_8:
    long long v9 = v6;
    goto LABEL_9;
  }
  if ([v5 isSpeaker])
  {
    long long v6 = xmmword_100492650;
    goto LABEL_8;
  }
  if ([v5 isReceiver])
  {
    long long v6 = xmmword_100492660;
    goto LABEL_8;
  }
  long long v9 = xmmword_100492670;
  if (([v5 isWiredHeadset] & 1) == 0
    && ([v5 isWiredHeadphones] & 1) == 0)
  {
    unsigned __int8 v8 = [v5 isAuxiliary];

    if ((v8 & 1) == 0) {
      return;
    }
    long long v7 = xmmword_100492680;
    goto LABEL_10;
  }
LABEL_9:

  long long v7 = v9;
LABEL_10:
  *a1 = v7;

  swift_bridgeObjectRelease();
}

void sub_1002BF6E8()
{
}

uint64_t sub_1002BF728(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444955556C6C6163 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E6F697461727564 && a2 == 0xEA0000000000734DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65766974616C6572 && a2 == 0xED00007472617453;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65766974616C6572 && a2 == 0xEB00000000646E45;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000010 && a2 == 0x8000000100484730 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6F73616552646E65 && a2 == 0xE90000000000006ELL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x8000000100484750 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x8000000100484770 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else
          {
            BOOL v10 = a1 == 0x6D69547075746573 && a2 == 0xEB00000000734D65;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x8000000100484790 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else
            {
              BOOL v11 = a1 == 0x79616C6572 && a2 == 0xE500000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 10;
              }
              else
              {
                BOOL v12 = a1 == 0x676E696D6F636E69 && a2 == 0xE800000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 11;
                }
                else
                {
                  BOOL v13 = a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 12;
                  }
                  else if (a1 == 0xD000000000000010 && a2 == 0x80000001004847C0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 13;
                  }
                  else if (a1 == 0xD000000000000017 && a2 == 0x80000001004847E0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 14;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100484800 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 15;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100484820 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 16;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100484840 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6D754E6E774F7369 && a2 == 0xEB00000000726562;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 18;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x7265766E6F437369 && a2 == 0xEE006E6F69746173;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 19;
                      }
                      else
                      {
                        BOOL v16 = a1 == 4475203 && a2 == 0xE300000000000000;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 20;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x6B6E694C6D6F7266 && a2 == 0xE800000000000000;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 21;
                          }
                          else if (a1 == 0xD000000000000013 && a2 == 0x8000000100484880 {
                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 22;
                          }
                          else if (a1 == 0xD000000000000011 && a2 == 0x80000001004848A0 {
                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 23;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x64656E7275746572 && a2 == 0xEC0000006C6C6143;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 24;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x65736162656D6974 && a2 == 0xE800000000000000;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 25;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x4873417472617473 && a2 == 0xEE0066666F646E61;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 26;
                                }
                                else
                                {
                                  BOOL v21 = a1 == 0x6F54657544646E65 && a2 == 0xEF66666F646E6148;
                                  if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 27;
                                  }
                                  else if (a1 == 0xD000000000000011 && a2 == 0x80000001004848F0 {
                                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  }
                                  {
                                    swift_bridgeObjectRelease();
                                    return 28;
                                  }
                                  else
                                  {
                                    BOOL v22 = a1 == 0x7553697269537369 && a2 == 0xEF64657473656767;
                                    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                    {
                                      swift_bridgeObjectRelease();
                                      return 29;
                                    }
                                    else
                                    {
                                      BOOL v23 = a1 == 0x436E776F6E4B7369 && a2 == 0xEE00746361746E6FLL;
                                      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                      {
                                        swift_bridgeObjectRelease();
                                        return 30;
                                      }
                                      else if (a1 == 0xD000000000000013 && a2 == 0x8000000100484930 {
                                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                      }
                                      {
                                        swift_bridgeObjectRelease();
                                        return 31;
                                      }
                                      else if (a1 == 0xD000000000000012 && a2 == 0x8000000100484950 {
                                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                      }
                                      {
                                        swift_bridgeObjectRelease();
                                        return 32;
                                      }
                                      else
                                      {
                                        BOOL v24 = a1 == 0x666E6F436B6E756ALL && a2 == 0xEE0065636E656469;
                                        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                        {
                                          swift_bridgeObjectRelease();
                                          return 33;
                                        }
                                        else if (a1 == 0xD000000000000016 && a2 == 0x8000000100484980 {
                                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                        }
                                        {
                                          swift_bridgeObjectRelease();
                                          return 34;
                                        }
                                        else
                                        {
                                          BOOL v25 = a1 == 0x436E776F6E4B7369 && a2 == 0xED000072656C6C61;
                                          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 35;
                                          }
                                          else
                                          {
                                            BOOL v26 = a1 == 0x726F635372657375 && a2 == 0xE900000000000065;
                                            if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                            {
                                              swift_bridgeObjectRelease();
                                              return 36;
                                            }
                                            else
                                            {
                                              BOOL v27 = a1 == 0x436465646E617262 && a2 == 0xEB000000006C6C61;
                                              if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              {
                                                swift_bridgeObjectRelease();
                                                return 37;
                                              }
                                              else if (a1 == 0xD000000000000014 && a2 == 0x80000001004849C0 {
                                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              }
                                              {
                                                swift_bridgeObjectRelease();
                                                return 38;
                                              }
                                              else if (a1 == 0xD000000000000014 && a2 == 0x80000001004849E0 {
                                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              }
                                              {
                                                swift_bridgeObjectRelease();
                                                return 39;
                                              }
                                              else if (a1 == 0xD000000000000012 && a2 == 0x8000000100484A00 {
                                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              }
                                              {
                                                swift_bridgeObjectRelease();
                                                return 40;
                                              }
                                              else if (a1 == 0xD000000000000013 && a2 == 0x8000000100484A20 {
                                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              }
                                              {
                                                swift_bridgeObjectRelease();
                                                return 41;
                                              }
                                              else if (a1 == 0xD000000000000011 && a2 == 0x8000000100484A40 {
                                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                              }
                                              {
                                                swift_bridgeObjectRelease();
                                                return 42;
                                              }
                                              else if (a1 == 0x756F526F69647561 && a2 == 0xEA00000000006574)
                                              {
                                                swift_bridgeObjectRelease();
                                                return 43;
                                              }
                                              else
                                              {
                                                char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                swift_bridgeObjectRelease();
                                                if (v29) {
                                                  return 43;
                                                }
                                                else {
                                                  return 44;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1002C0880()
{
  return 44;
}

unint64_t sub_1002C0888(char a1)
{
  unint64_t result = 0x444955556C6C6163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 2:
    case 3:
      unint64_t result = 0x65766974616C6572;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6F73616552646E65;
      break;
    case 6:
    case 15:
    case 16:
    case 17:
    case 23:
    case 28:
    case 42:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
      unint64_t result = 0x6D69547075746573;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x79616C6572;
      break;
    case 11:
      unint64_t result = 0x676E696D6F636E69;
      break;
    case 12:
      unint64_t result = 0x657463656E6E6F63;
      break;
    case 13:
      unint64_t result = 0xD000000000000010;
      break;
    case 14:
      unint64_t result = 0xD000000000000017;
      break;
    case 18:
      unint64_t result = 0x6D754E6E774F7369;
      break;
    case 19:
      unint64_t result = 0x7265766E6F437369;
      break;
    case 20:
      unint64_t result = 4475203;
      break;
    case 21:
      unint64_t result = 0x6B6E694C6D6F7266;
      break;
    case 22:
      unint64_t result = 0xD000000000000013;
      break;
    case 24:
      unint64_t result = 0x64656E7275746572;
      break;
    case 25:
      unint64_t result = 0x65736162656D6974;
      break;
    case 26:
      unint64_t result = 0x4873417472617473;
      break;
    case 27:
      unint64_t result = 0x6F54657544646E65;
      break;
    case 29:
      unint64_t result = 0x7553697269537369;
      break;
    case 30:
    case 35:
      unint64_t result = 0x436E776F6E4B7369;
      break;
    case 31:
      unint64_t result = 0xD000000000000013;
      break;
    case 32:
      unint64_t result = 0xD000000000000012;
      break;
    case 33:
      unint64_t result = 0x666E6F436B6E756ALL;
      break;
    case 34:
      unint64_t result = 0xD000000000000016;
      break;
    case 36:
      unint64_t result = 0x726F635372657375;
      break;
    case 37:
      unint64_t result = 0x436465646E617262;
      break;
    case 38:
      unint64_t result = 0xD000000000000014;
      break;
    case 39:
      unint64_t result = 0xD000000000000014;
      break;
    case 40:
      unint64_t result = 0xD000000000000012;
      break;
    case 41:
      unint64_t result = 0xD000000000000013;
      break;
    case 43:
      unint64_t result = 0x756F526F69647561;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002C0DB4()
{
  return sub_1002C0888(*v0);
}

uint64_t sub_1002C0DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002BF728(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002C0DE4()
{
  return variable initialization expression of CSDConversationSpatialPersonaResolver.localParticipantID();
}

uint64_t sub_1002C0E04@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002C0880();
  *a1 = result;
  return result;
}

uint64_t sub_1002C0E2C(uint64_t a1)
{
  unint64_t v2 = sub_1002C1B60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C0E68(uint64_t a1)
{
  unint64_t v2 = sub_1002C1B60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C0F58()
{
  return type metadata accessor for RTCCSDCallInfo();
}

uint64_t type metadata accessor for RTCCSDCallInfo()
{
  uint64_t result = qword_100587FB0;
  if (!qword_100587FB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002C0FA8()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1002C10F4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v33 = v5;
  __chkstk_darwin(v6);
  BOOL v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F081C(&qword_100587FC0);
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_100204074(a1, a1[3]);
  sub_1002C1B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v34 = v2;
  LOBYTE(v37) = 0;
  uint64_t v10 = v35;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    uint64_t v11 = v33;
    sub_1002C208C(*(void *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs), *(unsigned __int8 *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs + 8), 1);
    sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeStart);
    sub_1002C21A4(2);
    sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeEnd);
    sub_1002C21A4(3);
    uint64_t v12 = sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration);
    sub_1002C208C(v12, v13, 4);
    LODWORD(v37) = *(_DWORD *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endReason);
    LOBYTE(v39) = 5;
    type metadata accessor for TUCallDisconnectedReason(0);
    sub_1002C1CB8(&qword_100587FD0, type metadata accessor for TUCallDisconnectedReason);
    sub_1002C20D0();
    sub_1002C21C8(*(void *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerErrorCode), 6);
    sub_1002C21C8(*(void *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerEndedReason), 7);
    uint64_t v14 = sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs);
    sub_1002C208C(v14, v15, 8);
    uint64_t v16 = sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connectionTimeMs);
    sub_1002C208C(v16, v17, 9);
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relay);
    LOBYTE(v37) = 10;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_incoming);
    LOBYTE(v37) = 11;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connected);
    LOBYTE(v37) = 12;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_currentlyGrouped);
    LOBYTE(v37) = 13;
    sub_1002C1F7C();
    uint64_t v37 = *(void *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges);
    LOBYTE(v39) = 14;
    sub_1001F081C(&qword_100587FD8);
    sub_1002C1BAC();
    sub_1002C2060();
    sub_1002C2224();
    int v19 = *v18;
    LOBYTE(v18) = *((unsigned char *)v18 + 4);
    LODWORD(v37) = v19;
    BYTE4(v37) = (_BYTE)v18;
    LOBYTE(v39) = 15;
    type metadata accessor for TUCallFilteredOutReason(0);
    sub_1002C1CB8(&qword_100587FF0, type metadata accessor for TUCallFilteredOutReason);
    sub_1002C2060();
    sub_1002C2224();
    uint64_t v21 = *v20;
    LOBYTE(v20) = *((unsigned char *)v20 + 8);
    uint64_t v37 = v21;
    char v38 = (char)v20;
    LOBYTE(v39) = 16;
    type metadata accessor for TUCallVerificationStatus(0);
    sub_1002C1CB8(&qword_100587FF8, type metadata accessor for TUCallVerificationStatus);
    sub_1002C2060();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_knownCallerStatus);
    LOBYTE(v37) = 17;
    sub_1002C2020();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isOwnNumber);
    LOBYTE(v37) = 18;
    sub_1002C2020();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isConversation);
    LOBYTE(v37) = 19;
    sub_1002C2020();
    sub_1002C2224();
    LOBYTE(v37) = 20;
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_fromLink);
    LOBYTE(v37) = 21;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtStart);
    LOBYTE(v37) = 22;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtEnd);
    LOBYTE(v37) = 23;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_returnedCall);
    LOBYTE(v37) = 24;
    sub_1002C2020();
    uint64_t v25 = v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_timebase;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, v25, v4);
    LOBYTE(v39) = 25;
    sub_1002C1CB8(&qword_100588000, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = sub_1002C214C();
    v27(v26);
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff);
    LOBYTE(v39) = 26;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff);
    LOBYTE(v39) = 27;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff);
    LOBYTE(v39) = 28;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSiriSuggested);
    LOBYTE(v39) = 29;
    sub_1002C2020();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownContact);
    LOBYTE(v39) = 30;
    sub_1002C2020();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isVerifiedAppleCare);
    LOBYTE(v39) = 31;
    sub_1002C2020();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud);
    LOBYTE(v39) = 32;
    sub_1002C2020();
    uint64_t v28 = sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_junkConfidence);
    sub_1002C2170(v28, v29, 33);
    uint64_t v30 = sub_1002C1FDC(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_identificationCategory);
    sub_1002C2170(v30, v31, 34);
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownCaller);
    LOBYTE(v39) = 35;
    sub_1002C1F7C();
    LOBYTE(v39) = 36;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCall);
    LOBYTE(v39) = 37;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCallWithImage);
    LOBYTE(v39) = 38;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedThenAnswered);
    LOBYTE(v39) = 39;
    sub_1002C1F7C();
    sub_1002C1FD0(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedUnanswered);
    LOBYTE(v39) = 40;
    sub_1002C1F7C();
    uint64_t v39 = *(void *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_liveVoicemailStatus);
    char v36 = 41;
    type metadata accessor for CSDLiveVoicemailStatus(0);
    sub_1002C1CB8(&qword_100588008, type metadata accessor for CSDLiveVoicemailStatus);
    sub_1002C20D0();
    LODWORD(v39) = *(_DWORD *)(v34 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_originatingUIType);
    char v36 = 42;
    type metadata accessor for TUCallOriginatingUIType(0);
    sub_1002C1CB8(&qword_100588010, type metadata accessor for TUCallOriginatingUIType);
    sub_1002C20D0();
    sub_1002C2224();
    LOBYTE(v39) = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  uint64_t v22 = sub_1002C2230();
  return v23(v22);
}

uint64_t sub_1002C1AE4(void *a1)
{
  return sub_1002C10F4(a1);
}

uint64_t sub_1002C1B08(uint64_t a1)
{
  uint64_t result = sub_1002C1CB8((unint64_t *)&unk_100585560, (void (*)(uint64_t))type metadata accessor for RTCCSDCallInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002C1B60()
{
  unint64_t result = qword_100587FC8;
  if (!qword_100587FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587FC8);
  }
  return result;
}

unint64_t sub_1002C1BAC()
{
  unint64_t result = qword_100587FE0;
  if (!qword_100587FE0)
  {
    sub_1001F08B4(&qword_100587FD8);
    sub_1002C1CB8((unint64_t *)&qword_100587FE8, (void (*)(uint64_t))type metadata accessor for RTCCSDRelayDeviceRoute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587FE0);
  }
  return result;
}

uint64_t sub_1002C1C50()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002C1C88()
{
  sub_1002BF560(*(long long **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002C1C90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002C1CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002C1CB0()
{
  return swift_release();
}

uint64_t sub_1002C1CB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RTCCSDCallInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD5)
  {
    if (a2 + 43 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 43) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 44;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2C;
  int v5 = v6 - 44;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RTCCSDCallInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 43 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 43) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD4)
  {
    unsigned int v6 = ((a2 - 213) >> 8) + 1;
    *uint64_t result = a2 + 43;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002C1E54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 43;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDCallInfo.CodingKeys()
{
  return &type metadata for RTCCSDCallInfo.CodingKeys;
}

unint64_t sub_1002C1E90()
{
  unint64_t result = qword_100588040;
  if (!qword_100588040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588040);
  }
  return result;
}

unint64_t sub_1002C1EE0()
{
  unint64_t result = qword_100588048;
  if (!qword_100588048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588048);
  }
  return result;
}

unint64_t sub_1002C1F30()
{
  unint64_t result = qword_100588050;
  if (!qword_100588050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588050);
  }
  return result;
}

uint64_t sub_1002C1F7C()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_1002C1F98()
{
  sub_1001F0530(v0, 0, 1, v1);
  return sub_1001F758C(v0, 1, v1);
}

uint64_t sub_1002C1FD0@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(*(void *)(v1 - 128) + a1);
}

uint64_t sub_1002C1FDC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(*(void *)(v1 - 128) + a1);
}

uint64_t sub_1002C2000(uint64_t a1)
{
  return sub_1001F758C(a1, 1, v1);
}

uint64_t sub_1002C2020()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1002C203C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  return sub_1001F0530(v3, 1, 1, v1);
}

uint64_t sub_1002C2060()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1002C208C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(unsigned char *)(v4 - 104) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 104, v3);
}

uint64_t sub_1002C20D0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

id sub_1002C20F0()
{
  uint64_t v3 = *(const char **)(v1 + 544);
  return [v0 v3];
}

id sub_1002C2108@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v4 + a1) = v2;
  unsigned int v6 = *(const char **)(v3 + 2032);
  return [v1 v6];
}

uint64_t sub_1002C2124()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1002C213C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + a2;
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = 0;
  return result;
}

uint64_t sub_1002C214C()
{
  return v0;
}

uint64_t sub_1002C2170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(unsigned char *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_1002C21A4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 104) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1002C21C8@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(unsigned char *)(v3 - 104) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 104, v2);
}

uint64_t sub_1002C21EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  return sub_1001F0530(v3, 1, 1, v1);
}

void sub_1002C2210(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + a1;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
}

uint64_t sub_1002C2230()
{
  return v0;
}

uint64_t sub_1002C2258()
{
  return swift_bridgeObjectRelease();
}

id sub_1002C2270()
{
  uint64_t v3 = *(const char **)(v1 + 48);
  return [v0 v3];
}

uint64_t sub_1002C2288(uint64_t a1, uint64_t a2)
{
  return sub_1002231D4(a1, a2, v2);
}

uint64_t sub_1002C22B4(uint64_t a1, Swift::UInt a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001F75B4((_OWORD *)a1, v12);
    return sub_10027F5D8((uint64_t)v12, a2);
  }
  else
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100584CA0);
    unint64_t v5 = sub_100233600(a2);
    if (v6)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v9 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      Swift::Int v10 = *(void *)(v9 + 24);
      sub_1001F081C((uint64_t *)&unk_1005870C0);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      sub_1001F75B4((_OWORD *)(*(void *)(v11 + 56) + 32 * v7), v12);
      type metadata accessor for TTSAssetProperty(0);
      sub_1002C7B74((unint64_t *)&unk_1005880F0, 255, type metadata accessor for TTSAssetProperty);
      _NativeDictionary._delete(at:)();
      *uint64_t v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    return sub_1002392A8((uint64_t)v12, (uint64_t *)&unk_100584CA0);
  }
}

uint64_t sub_1002C2414(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001F75B4((_OWORD *)a1, v3);
    sub_1002C8448();
    sub_10027F5F0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100584CA0);
    uint64_t v2 = sub_100202590();
    sub_1002CDC98(v2);
    swift_bridgeObjectRelease();
    return sub_1002392A8((uint64_t)v3, (uint64_t *)&unk_100584CA0);
  }
}

uint64_t sub_1002C24A0(uint64_t a1)
{
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100588460);
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_1002024D0();
  sub_1001F081C((uint64_t *)&unk_100587050);
  sub_10020233C();
  uint64_t v6 = __chkstk_darwin(v5);
  BOOL v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C8428(v6, v9, v10);
  if (v11)
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100588460);
    uint64_t v12 = sub_100202590();
    sub_1002CDD78(v12);
    swift_bridgeObjectRelease();
    return sub_1002392A8(v1, (uint64_t *)&unk_100588460);
  }
  else
  {
    sub_1002C79B0(a1, (uint64_t)v8);
    sub_1002C8448();
    sub_10027F65C(v13, v14, v15);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002C25B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_1002C8378();
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001F758C(a1, 1, v7) == 1)
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100585580);
    sub_1002CE06C(a2);
    uint64_t v13 = sub_1002C8454();
    v14(v13);
    return sub_1002392A8(v2, (uint64_t *)&unk_100585580);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v12, a1, v7);
    sub_10027F738((uint64_t)v12, a2);
    uint64_t v16 = sub_1002C8454();
    return v17(v16);
  }
}

uint64_t sub_1002C2704(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001F75B4((_OWORD *)a1, v4);
    sub_10027F768();
    return sub_100234D14(a2);
  }
  else
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100584CA0);
    sub_1002CE250(v4, a2);
    sub_100234D14(a2);
    return sub_1002392A8((uint64_t)v4, (uint64_t *)&unk_100584CA0);
  }
}

void sub_1002C278C()
{
}

uint64_t sub_1002C27D4(uint64_t a1)
{
  uint64_t v3 = sub_1001F081C(&qword_100588110);
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_1002C8378();
  type metadata accessor for PendingMembershipInfo();
  sub_10020233C();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C8428(v6, v9, v10);
  if (v11)
  {
    sub_1002392A8(a1, &qword_100588110);
    uint64_t v12 = sub_100202590();
    sub_1002CE754(v12);
    swift_bridgeObjectRelease();
    return sub_1002392A8(v1, &qword_100588110);
  }
  else
  {
    sub_1002C7A60(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for PendingMembershipInfo);
    sub_1002C8448();
    sub_10027F964(v13, v14, v15);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002C28F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  sub_10020233C();
  __chkstk_darwin(v9);
  sub_1002024D0();
  sub_1002C8428(v10, v11, v12);
  if (v13)
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100587350);
    sub_1002CE844(a2);
    type metadata accessor for UUID();
    sub_10020233C();
    (*(void (**)(uint64_t))(v14 + 8))(a2);
    return sub_1002392A8((uint64_t)v8, (uint64_t *)&unk_100587350);
  }
  else
  {
    sub_1002C7A60(a1, v2, (void (*)(void))type metadata accessor for SimulatedConversationManager.SimulatedGroupSession);
    sub_10027FA4C(v2, a2);
    type metadata accessor for UUID();
    sub_10020233C();
    return (*(uint64_t (**)(uint64_t))(v15 + 8))(a2);
  }
}

void sub_1002C2A6C()
{
}

void sub_1002C2AB4()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  BOOL v20 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_1001F081C(v6);
  uint64_t v11 = sub_100202384(v10);
  __chkstk_darwin(v11);
  sub_1001FCCA0();
  uint64_t v12 = v5(0);
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v19 - v16;
  if (sub_1001F758C(v9, 1, v12) == 1)
  {
    sub_1002392A8(v9, v7);
    uint64_t v18 = sub_100202590();
    v2(v18);
    swift_bridgeObjectRelease();
    sub_1002392A8(v0, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v17, v9, v12);
    sub_1002C8448();
    v20();
    swift_bridgeObjectRelease();
  }
  sub_1001FCC08();
}

void sub_1002C2C08(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001F75B4((_OWORD *)a1, v3);
    sub_10027FEEC((uint64_t)v3, (uint64_t)a2);
  }
  else
  {
    sub_1002392A8(a1, (uint64_t *)&unk_100584CA0);
    sub_1002CF0F0(v3, a2);

    sub_1002392A8((uint64_t)v3, (uint64_t *)&unk_100584CA0);
  }
}

uint64_t sub_1002C2C88(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1002C2D00()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1002C2D70()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

id sub_1002C2DB8()
{
  uint64_t v1 = OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags;
  id result = [*(id *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags) expanseEnabled];
  if (result) {
    return [*(id *)(v0 + v1) supportsScreenSharing];
  }
  return result;
}

uint64_t sub_1002C2E34()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1002C2EA4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = a1;
  return swift_unknownObjectRelease();
}

void *sub_1002C2EF0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale);
  id v2 = v1;
  return v1;
}

void sub_1002C2F7C(void *a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale);
  *(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale) = a1;
  id v3 = a1;

  sub_1002C2FD4();
}

void sub_1002C2FD4()
{
  if (*(void *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes))
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRetain();
      ScreenSharingActivityManager.broadcastAttributes(_:)();
LABEL_16:
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v4 = qword_100583A00;
    swift_unknownObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1001F5F88(v5, (uint64_t)qword_100594BF8);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6))
    {

      goto LABEL_16;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Could not cast to TUCallScreenShareAttributes", v7, 2u);
    swift_slowDealloc();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100583A00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1001F5F88(v1, (uint64_t)qword_100594BF8);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "No latest remote attributes", v3, 2u);
      swift_slowDealloc();
    }
  }
}

void ScreenSharingActivityManager.broadcastAttributes(_:)()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1002024D0();
  uint64_t v4 = sub_10027AC68();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v1;
  v12[4] = sub_1002C4A8C;
  v12[5] = v5;
  v12[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v12[2] = sub_1002C2C88;
  v12[3] = &unk_100512510;
  os_log_type_t v6 = _Block_copy(v12);
  swift_retain();
  id v7 = v1;
  static DispatchQoS.unspecified.getter();
  sub_1002C7B74((unint64_t *)&qword_100584FF0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_1002C834C();
  sub_10021EA90();
  _Block_release(v6);
  uint64_t v8 = sub_1002C83F8();
  v9(v8);
  uint64_t v10 = sub_10021EBF4();
  v11(v10);
  sub_1002C8410();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_1002C3414()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002C344C()
{
  sub_1001FCC38();
  uint64_t v18 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1002C8378();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_10020233C();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = sub_100202384(v7);
  __chkstk_darwin(v8);
  sub_1001FCCA0();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_subscriptions] = &_swiftEmptySetSingleton;
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_messenger] = 0;
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_observer] = 0;
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes] = 0;
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_session] = 0;
  *(void *)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale] = 0;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  uint64_t v9 = v0;
  static DispatchQoS.userInitiated.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_1002C7B74((unint64_t *)&qword_100583B00, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001FCB74((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v17);
  *(void *)&v9[OBJC_IVAR___CSDScreenSharingActivityManager_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v9[OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags] = v18;
  id v10 = v18;
  static OS_dispatch_queue.main.getter();
  id v11 = objc_allocWithZone((Class)type metadata accessor for CPCarPlayObserver());
  *(void *)&v9[OBJC_IVAR___CSDScreenSharingActivityManager_carPlayObserver] = CPCarPlayObserver.init(queue:)();

  v20.receiver = v9;
  v20.super_class = ObjectType;
  uint64_t v12 = (char *)objc_msgSendSuper2(&v20, "init");
  uint64_t v13 = *(void **)&v12[OBJC_IVAR___CSDScreenSharingActivityManager_carPlayObserver];
  sub_1002C7B74((unint64_t *)&unk_100588100, v14, (void (*)(uint64_t))type metadata accessor for ScreenSharingActivityManager);
  uint64_t v15 = v12;
  id v16 = v13;
  dispatch thunk of CPCarPlayObserver.delegate.setter();

  ScreenSharingActivityManager.startObservingSessions()();
  sub_1001FCC08();
}

Swift::Void __swiftcall ScreenSharingActivityManager.startObservingSessions()()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v1);
  uint64_t v2 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  if (sub_1002C83B8())
  {
    sub_10027AC68();
    sub_1002C83DC();
    v9[4] = sub_1002C4AAC;
    v9[5] = v2;
    v9[0] = _NSConcreteStackBlock;
    sub_10021EAFC(COERCE_DOUBLE(1107296256));
    _OWORD v9[2] = sub_1002C2C88;
    v9[3] = &unk_100512538;
    uint64_t v6 = _Block_copy(v9);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    sub_1002C7B74((unint64_t *)&qword_100584FF0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    sub_1002C834C();
    sub_10021EA90();
    _Block_release(v6);
    uint64_t v7 = sub_10021EA78();
    v8(v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
    sub_1002C8410();
    swift_release();
  }
  sub_1001FCC08();
}

uint64_t sub_1002C3A1C()
{
  uint64_t v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_queue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v10;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1002C7A48;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10021E788;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10032062C;
  void aBlock[3] = &unk_1005126A8;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_1002C3B80(uint64_t result, void *a2)
{
  if (*(void *)(result + OBJC_IVAR___CSDScreenSharingActivityManager_session))
  {
    swift_retain();
    if (GroupSession.isLocallyInitiated.getter())
    {
    }
    else
    {
      GroupSession.activity.getter();
      swift_bridgeObjectRelease();
      if (v4)
      {
        id v3 = [objc_allocWithZone((Class)TUScreenShareAttributes) initWithAttributes:v4];

        swift_release();
        *a2 = v3;
        return swift_unknownObjectRelease();
      }
    }
    return swift_release();
  }
  return result;
}

void sub_1002C3C50()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1002C3CA4();
  }
}

void sub_1002C3CA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C(&qword_100588158);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v12)
  {
    uint64_t v13 = OBJC_IVAR___CSDScreenSharingActivityManager_observer;
    if (!*(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_observer)
      && (sub_1002C2DB8() & 1) != 0)
    {
      sub_1002C7B14();
      id v14 = v11;
      GroupSessionObserver.init(for:queue:)();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      sub_1001FCB74(&qword_100588160, &qword_100588158);
      uint64_t v15 = Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *(void *)(v1 + v13) = v15;
      swift_release();
      id v16 = sub_100008DCC();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
    }
  }
  else
  {
    __break(1u);
  }
}

void ScreenSharingActivityManager.startActivitySession(for:with:)()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  if (sub_1002C83B8())
  {
    ScreenSharingActivityManager.startObservingSessions()();
    sub_10027AC68();
    sub_1002C83DC();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v6;
    v10[3] = v2;
    v10[4] = v4;
    v16[4] = sub_1002C4AFC;
    v16[5] = v10;
    v16[0] = _NSConcreteStackBlock;
    sub_10021EAFC(COERCE_DOUBLE(1107296256));
    v16[2] = sub_1002C2C88;
    v16[3] = &unk_100512588;
    id v11 = _Block_copy(v16);
    id v12 = v2;
    id v13 = v4;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    sub_1002C7B74((unint64_t *)&qword_100584FF0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v11);
    uint64_t v14 = sub_10021EA78();
    v15(v14);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);
    sub_1002C8410();
    swift_release();
  }
  sub_1001FCC08();
}

void sub_1002C421C(uint64_t a1, void *a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = a2;
    id v7 = a2;
    swift_unknownObjectRelease();
    if (a2) {
      id v8 = [objc_allocWithZone((Class)type metadata accessor for CodableRemoteScreenShareAttributes()) initWithAttributes:v7];
    }
    else {
      id v8 = 0;
    }
    id v9 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10048FB00;
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    a3;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v14 = sub_1001F3B08();
    *(void *)(v10 + 64) = v14;
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    if (v8)
    {
      type metadata accessor for CodableRemoteScreenShareAttributes();
      id v15 = v8;
      uint64_t v16 = String.init<A>(reflecting:)();
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v14;
    *(void *)(v10 + 72) = v16;
    *(void *)(v10 + 80) = v17;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    sub_1002C442C();
    sub_1002C7B14();
    id v18 = v8;
    GroupActivity.activate()();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002C442C()
{
  uint64_t v1 = sub_1002E5874(v0);
  if (v2) {
    return v1;
  }
  id v4 = [v0 value];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Void __swiftcall ScreenSharingActivityManager.stopActivitySession()()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1002024D0();
  sub_10027AC68();
  sub_1002C83DC();
  v8[4] = sub_1002C4B08;
  uint64_t v9 = v0;
  v8[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v8[2] = sub_1002C2C88;
  v8[3] = &unk_1005125B0;
  uint64_t v3 = _Block_copy(v8);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_1002C7B74((unint64_t *)&qword_100584FF0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_1002C834C();
  sub_10021EA90();
  _Block_release(v3);
  uint64_t v4 = sub_1002C83F8();
  v5(v4);
  uint64_t v6 = sub_10021EBF4();
  v7(v6);
  sub_1002C8410();
  swift_release();
  sub_1001FCC08();
}

void sub_1002C4704()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1002C475C();
  }
}

uint64_t sub_1002C475C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100235BE8();
  id v7 = *(void **)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  void *v1 = v7;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v1, v3);
  if (v7)
  {
    if (*(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_session))
    {
      swift_retain();
      if (GroupSession.isLocallyInitiated.getter()) {
        sub_1002C5140();
      }
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002C48C0(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Participants();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v8 = (char *)Strong;
    if ([a2 style] && (sub_1002C2DB8() & 1) != 0)
    {
      *(void *)&v8[OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes] = a2;
      swift_unknownObjectRelease();
      id v9 = [objc_allocWithZone((Class)type metadata accessor for CodableRemoteScreenShareAttributes()) initWithAttributes:a2];
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Participants.all(_:), v3);
      sub_1002C4B10(v9, (uint64_t)v6);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
    }
  }
}

uint64_t sub_1002C4A54()
{
  swift_release();

  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002C4A8C()
{
  sub_1002C48C0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002C4A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002C4AA4()
{
  return swift_release();
}

void sub_1002C4AAC()
{
}

uint64_t sub_1002C4AB4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002C4AFC()
{
  sub_1002C421C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1002C4B08()
{
}

uint64_t sub_1002C4B10(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  unsigned __int8 v53 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unsigned __int8 v54 = (char *)&v45 - v9;
  uint64_t v10 = type metadata accessor for Participants();
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1001F081C(&qword_100588128);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  if (*(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_session))
  {
    uint64_t v50 = v6;
    swift_retain();
    if (GroupSession.isLocallyInitiated.getter())
    {
      uint64_t v49 = a2;
      GroupSession.state.getter();
      (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for GroupSession.State.joined<A>(_:), v13);
      sub_1002C7B14();
      char v20 = static GroupSession.State.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
      v21(v17, v13);
      v21(v19, v13);
      if (v20)
      {
        if (*(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger))
        {
          uint64_t v48 = *(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger);
          swift_retain();
          id v46 = sub_100008DCC();
          sub_1001F081C(&qword_100584B20);
          uint64_t v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = xmmword_1004904F0;
          id v56 = a1;
          uint64_t v47 = type metadata accessor for CodableRemoteScreenShareAttributes();
          id v23 = a1;
          uint64_t v24 = String.init<A>(reflecting:)();
          uint64_t v26 = v25;
          *(void *)(v22 + 56) = &type metadata for String;
          unint64_t v27 = sub_1001F3B08();
          *(void *)(v22 + 64) = v27;
          *(void *)(v22 + 32) = v24;
          *(void *)(v22 + 40) = v26;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v12, v49, v52);
          uint64_t v28 = String.init<A>(reflecting:)();
          *(void *)(v22 + 96) = &type metadata for String;
          *(void *)(v22 + 104) = v27;
          *(void *)(v22 + 72) = v28;
          *(void *)(v22 + 80) = v29;
          uint64_t v30 = v54;
          GroupSession.id.getter();
          uint64_t v31 = v55;
          uint64_t v32 = v50;
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v53, v30, v50);
          uint64_t v33 = String.init<A>(reflecting:)();
          uint64_t v35 = v34;
          (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
          *(void *)(v22 + 136) = &type metadata for String;
          *(void *)(v22 + 144) = v27;
          *(void *)(v22 + 112) = v33;
          *(void *)(v22 + 120) = v35;
          static os_log_type_t.default.getter();
          char v36 = v46;
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          id v56 = v23;
          *(void *)(swift_allocObject() + 16) = v23;
          sub_1002C7B74(&qword_100588188, 255, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
          sub_1002C7B74(&qword_100588190, 255, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
          id v37 = v23;
          GroupSessionMessenger.send<A>(_:to:completion:)();
          swift_release();
          swift_release();
          return swift_release();
        }
      }
    }
    swift_release();
  }
  id v39 = sub_100008DCC();
  static os_log_type_t.error.getter();
  sub_1001F081C(&qword_100584B20);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_10048F550;
  id v56 = a1;
  type metadata accessor for CodableRemoteScreenShareAttributes();
  id v41 = a1;
  uint64_t v42 = String.init<A>(reflecting:)();
  uint64_t v44 = v43;
  *(void *)(v40 + 56) = &type metadata for String;
  *(void *)(v40 + 64) = sub_1001F3B08();
  *(void *)(v40 + 32) = v42;
  *(void *)(v40 + 40) = v44;
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

void sub_1002C5140()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  int v35 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_1001FCCA0();
  uint64_t v19 = *(void **)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  void *v1 = v19;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v1, v15);
  if (v19)
  {
    if (GroupSession.isLocallyInitiated.getter() & 1) != 0 && (sub_1002C2DB8())
    {
      id v21 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v22 = swift_allocObject();
      long long v34 = xmmword_10048F550;
      *(_OWORD *)(v22 + 16) = xmmword_10048F550;
      GroupSession.id.getter();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v14, v6);
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v25 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v6);
      *(void *)(v22 + 56) = &type metadata for String;
      unint64_t v26 = sub_1001F3B08();
      *(void *)(v22 + 64) = v26;
      *(void *)(v22 + 32) = v23;
      *(void *)(v22 + 40) = v25;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      GroupSession.end()();
      *(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = 0;
      swift_unknownObjectRelease();
      *(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_session) = 0;
      swift_release();
      *(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger) = 0;
      swift_release();
      if (v35)
      {
        id v27 = sub_100008DCC();
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v34;
        uint64_t v36 = v5;
        swift_retain();
        sub_1001F081C(&qword_100588118);
        uint64_t v29 = String.init<A>(reflecting:)();
        *(void *)(v28 + 56) = &type metadata for String;
        *(void *)(v28 + 64) = v26;
        *(void *)(v28 + 32) = v29;
        *(void *)(v28 + 40) = v30;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v32 = (void *)Strong;
          sub_1002C7AC8();
          swift_allocError();
          uint64_t v33 = (void *)_convertErrorToNSError(_:)();
          swift_errorRelease();
          [v32 screenSharingActivityManager:v2 invalidatedSessionWithReason:v33 wasLocallySharing:GroupSession.isLocallyInitiated.getter() & 1];

          swift_unknownObjectRelease();
        }
      }
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002C54F0()
{
  uint64_t v1 = sub_1001F081C(&qword_100588128);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1001F081C(&qword_100588130);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1001F081C(&qword_100588138);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - v15;
  if (*(void *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_session))
  {
    swift_retain();
    GroupSession.state.getter();
    swift_release();
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  sub_1001F0530((uint64_t)v16, v17, 1, v1);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v14, enum case for GroupSession.State.joined<A>(_:), v1);
  sub_1001F0530((uint64_t)v14, 0, 1, v1);
  uint64_t v18 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_10025E234((uint64_t)v16, (uint64_t)v7, &qword_100588138);
  sub_10025E234((uint64_t)v14, v18, &qword_100588138);
  if (sub_1001F758C((uint64_t)v7, 1, v1) == 1)
  {
    sub_1002392A8((uint64_t)v14, &qword_100588138);
    sub_1002392A8((uint64_t)v16, &qword_100588138);
    int v19 = sub_1001F758C(v18, 1, v1);
    if (v19 == 1) {
      id v20 = &qword_100588138;
    }
    else {
      id v20 = &qword_100588130;
    }
    if (v19 == 1) {
      char v21 = -1;
    }
    else {
      char v21 = 0;
    }
  }
  else
  {
    sub_10025E234((uint64_t)v7, (uint64_t)v11, &qword_100588138);
    if (sub_1001F758C(v18, 1, v1) == 1)
    {
      sub_1002392A8((uint64_t)v14, &qword_100588138);
      sub_1002392A8((uint64_t)v16, &qword_100588138);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);
      char v21 = 0;
      id v20 = &qword_100588130;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v18, v1);
      sub_1001FCB74((unint64_t *)&unk_100588140, &qword_100588128);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v2 + 8);
      v22(v4, v1);
      id v20 = &qword_100588138;
      sub_1002392A8((uint64_t)v14, &qword_100588138);
      sub_1002392A8((uint64_t)v16, &qword_100588138);
      v22(v11, v1);
    }
  }
  sub_1002392A8((uint64_t)v7, v20);
  return v21 & 1;
}

void sub_1002C58BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1002C5918(v1);
  }
}

void sub_1002C5918(uint64_t a1)
{
  uint64_t v3 = sub_1001F081C(&qword_100588168);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C(&qword_100588170);
  __chkstk_darwin(v7 - 8);
  uint64_t v49 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1001F081C(&qword_100588178);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    uint64_t v51 = v6;
    uint64_t v52 = v4;
    uint64_t v50 = v3;
    id v18 = sub_100008DCC();
    uint64_t v48 = sub_1001F081C(&qword_100584B20);
    uint64_t v19 = swift_allocObject();
    long long v47 = xmmword_10048FB00;
    *(_OWORD *)(v19 + 16) = xmmword_10048FB00;
    *(void *)&long long v57 = a1;
    swift_retain();
    sub_1001F081C(&qword_100588118);
    uint64_t v20 = String.init<A>(reflecting:)();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    unint64_t v23 = sub_1001F3B08();
    *(void *)(v19 + 64) = v23;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    uint64_t v24 = v1;
    GroupSession.activity.getter();
    long long v55 = v57;
    id v56 = v58;
    uint64_t v25 = String.init<A>(reflecting:)();
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v23;
    *(void *)(v19 + 72) = v25;
    *(void *)(v19 + 80) = v26;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    if ((GroupSession.isLocallyInitiated.getter() & 1) != 0
      && !*(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes))
    {
      id v41 = sub_100008DCC();
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = v47;
      *(void *)&long long v57 = a1;
      swift_retain();
      uint64_t v43 = String.init<A>(reflecting:)();
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 64) = v23;
      *(void *)(v42 + 32) = v43;
      *(void *)(v42 + 40) = v44;
      GroupSession.activity.getter();
      long long v55 = v57;
      id v56 = v58;
      uint64_t v45 = String.init<A>(reflecting:)();
      *(void *)(v42 + 96) = &type metadata for String;
      *(void *)(v42 + 104) = v23;
      *(void *)(v42 + 72) = v45;
      *(void *)(v42 + 80) = v46;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      GroupSession.end()();
    }
    else
    {
      GroupSession.$state.getter();
      uint64_t v27 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = a1;
      sub_1001FCB74(&qword_100588180, &qword_100588178);
      swift_retain();
      uint64_t v29 = v54;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v29);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      GroupSession.activity.getter();
      uint64_t v30 = v58;
      swift_bridgeObjectRelease();
      if (v30)
      {
        id v31 = [objc_allocWithZone((Class)TUCallScreenShareAttributes) initWithAttributes:v30];
        uint64_t v32 = type metadata accessor for GroupSessionMessenger.MessageContext();
        uint64_t v33 = v49;
        sub_1001F0530(v49, 1, 1, v32);
        sub_1002C7C38((uint64_t)v31, v33, a1, v24);

        sub_1002392A8(v33, &qword_100588170);
      }
      int v35 = v51;
      uint64_t v34 = v52;
      type metadata accessor for GroupSessionMessenger();
      swift_allocObject();
      swift_retain();
      uint64_t v36 = GroupSessionMessenger.init<A>(session:)();
      GroupSession.join()();
      type metadata accessor for CodableRemoteScreenShareAttributes();
      sub_1002C7B74(&qword_100588188, 255, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
      sub_1002C7B74(&qword_100588190, 255, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
      GroupSessionMessenger.receive<A>(_:)();
      uint64_t v37 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = a1;
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = sub_1002C7BF8;
      *(void *)(v39 + 24) = v38;
      sub_1001FCB74(&qword_100588198, &qword_100588168);
      swift_retain();
      uint64_t v40 = v50;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v40);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      *(void *)(v24 + OBJC_IVAR___CSDScreenSharingActivityManager_session) = a1;
      swift_release();
      *(void *)(v24 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger) = v36;
      swift_retain();
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002C6104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    sub_1002C6174(a1, a3);
  }
}

uint64_t sub_1002C6174(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  id v72 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v65 - v7;
  uint64_t v9 = sub_1001F081C(&qword_100588128);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v65 - v13);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = v2;
  uint64_t v19 = *(void **)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v22(v14, a1, v9);
    int v23 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v14, v9);
    if (v23 == enum case for GroupSession.State.invalidated<A>(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v14, v9);
      uint64_t v24 = *v14;
      id v25 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_10048FB00;
      GroupSession.id.getter();
      uint64_t v28 = v70;
      uint64_t v27 = v71;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v72, v8, v71);
      uint64_t v29 = String.init<A>(reflecting:)();
      uint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
      *(void *)(v26 + 56) = &type metadata for String;
      unint64_t v32 = sub_1001F3B08();
      *(void *)(v26 + 64) = v32;
      *(void *)(v26 + 32) = v29;
      *(void *)(v26 + 40) = v31;
      uint64_t v74 = v24;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v33 = String.init<A>(reflecting:)();
      *(void *)(v26 + 96) = &type metadata for String;
      *(void *)(v26 + 104) = v32;
      *(void *)(v26 + 72) = v33;
      *(void *)(v26 + 80) = v34;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      uint64_t v35 = v69;
      sub_1002C6B18();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v37 = (void *)Strong;
        uint64_t v38 = (void *)_convertErrorToNSError(_:)();
        [v37 screenSharingActivityManager:v35 invalidatedSessionWithReason:v38 wasLocallySharing:GroupSession.isLocallyInitiated.getter() & 1];
        swift_errorRelease();

        return swift_unknownObjectRelease();
      }
      return swift_errorRelease();
    }
    else
    {
      int v39 = v23;
      if (v23 == enum case for GroupSession.State.waiting<A>(_:))
      {
        id v40 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_10048F550;
        GroupSession.id.getter();
        uint64_t v43 = v70;
        uint64_t v42 = v71;
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v72, v8, v71);
        uint64_t v44 = String.init<A>(reflecting:)();
        uint64_t v46 = v45;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v42);
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = sub_1001F3B08();
        *(void *)(v41 + 32) = v44;
        *(void *)(v41 + 40) = v46;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        return swift_bridgeObjectRelease();
      }
      else
      {
        int v47 = enum case for GroupSession.State.joined<A>(_:);
        id v67 = sub_100008DCC();
        if (v39 == v47)
        {
          sub_1001F081C(&qword_100584B20);
          uint64_t v48 = swift_allocObject();
          *(_OWORD *)(v48 + 16) = xmmword_10048F550;
          GroupSession.id.getter();
          uint64_t v50 = v70;
          uint64_t v49 = v71;
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v72, v8, v71);
          uint64_t v51 = String.init<A>(reflecting:)();
          uint64_t v53 = v52;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v49);
          *(void *)(v48 + 56) = &type metadata for String;
          *(void *)(v48 + 64) = sub_1001F3B08();
          *(void *)(v48 + 32) = v51;
          *(void *)(v48 + 40) = v53;
          static os_log_type_t.default.getter();
          uint64_t v54 = v67;
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          uint64_t result = GroupSession.isLocallyInitiated.getter();
          if (result)
          {
            if (*(void *)(v69 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes))
            {
              self;
              uint64_t result = swift_dynamicCastObjCClass();
              if (result)
              {
                swift_unknownObjectRetain();
                ScreenSharingActivityManager.broadcastAttributes(_:)();
                return swift_unknownObjectRelease();
              }
            }
          }
        }
        else
        {
          int v66 = static os_log_type_t.fault.getter();
          sub_1001F081C(&qword_100584B20);
          uint64_t v55 = swift_allocObject();
          *(_OWORD *)(v55 + 16) = xmmword_10048FB00;
          GroupSession.id.getter();
          uint64_t v56 = v70;
          uint64_t v57 = v71;
          unsigned __int8 v58 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
          uint64_t v65 = a1;
          v58(v72, v8, v71);
          id v72 = (char *)String.init<A>(reflecting:)();
          uint64_t v60 = v59;
          (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v57);
          *(void *)(v55 + 56) = &type metadata for String;
          unint64_t v61 = sub_1001F3B08();
          *(void *)(v55 + 64) = v61;
          *(void *)(v55 + 32) = v72;
          *(void *)(v55 + 40) = v60;
          v22((uint64_t *)v68, v65, v9);
          uint64_t v62 = String.init<A>(reflecting:)();
          *(void *)(v55 + 96) = &type metadata for String;
          *(void *)(v55 + 104) = v61;
          *(void *)(v55 + 72) = v62;
          *(void *)(v55 + 80) = v63;
          id v64 = v67;
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          sub_1002C6B18();
          return (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v14, v9);
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C6970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1001F081C(&qword_100588170);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    id v12 = [objc_allocWithZone((Class)TUCallScreenShareAttributes) initWithAttributes:a1];
    uint64_t v13 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v9, a2, v13);
    sub_1001F0530((uint64_t)v9, 0, 1, v13);
    sub_1002C7C38((uint64_t)v12, (uint64_t)v9, a4, (uint64_t)v11);

    return sub_1002392A8((uint64_t)v9, &qword_100588170);
  }
  return result;
}

uint64_t sub_1002C6AC4(char *a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_1005881A8);
  return a2(v4, &a1[*(int *)(v5 + 48)]);
}

void sub_1002C6B18()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (GroupSession.isLocallyInitiated.getter())
    {
      id v14 = sub_100008DCC();
      sub_1001F081C(&qword_100584B20);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_10048F550;
      GroupSession.id.getter();
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v18 = v17;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_1001F3B08();
      *(void *)(v15 + 32) = v16;
      *(void *)(v15 + 40) = v18;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      sub_1002C5140();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002C6DCC(uint64_t result, void *a2)
{
  if (result)
  {
    swift_getObjectType();
    swift_errorRetain();
    id v3 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_10048FB00;
    id v5 = a2;
    uint64_t v6 = String.init<A>(reflecting:)();
    uint64_t v8 = v7;
    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v9 = sub_1001F3B08();
    *(void *)(v4 + 64) = v9;
    *(void *)(v4 + 32) = v6;
    *(void *)(v4 + 40) = v8;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v10 = String.init<A>(reflecting:)();
    *(void *)(v4 + 96) = &type metadata for String;
    *(void *)(v4 + 104) = v9;
    *(void *)(v4 + 72) = v10;
    *(void *)(v4 + 80) = v11;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

void ScreenSharingActivityManager.init()()
{
}

Swift::Void __swiftcall ScreenSharingActivityManager.carPlayStartedConnectionAttempt()()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100235BE8();
  if (sub_1002C54F0())
  {
    uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100274858(0xD00000000000001FLL, (void *)0x8000000100484AB0);
    uint64_t v7 = String.init(format:_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v34 = &type metadata for String;
    uint64_t v32 = v7;
    uint64_t v33 = v9;
    sub_1002C2414((uint64_t)&v32);
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = (void *)MGGetStringAnswer();

    uint64_t v30 = v3;
    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;
    }
    else
    {
      unint64_t v14 = 0xE600000000000000;
      uint64_t v12 = 0x656E6F685069;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100274858(0xD000000000000024, (void *)0x8000000100484AD0);
    sub_1001F081C(&qword_100584B20);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_10048F550;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1001F3B08();
    *(void *)(v20 + 32) = v12;
    *(void *)(v20 + 40) = v14;
    uint64_t v21 = String.init(format:_:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v34 = &type metadata for String;
    uint64_t v32 = v21;
    uint64_t v33 = v23;
    sub_1002C2414((uint64_t)&v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v24 = sub_100274858(0xD000000000000020, (void *)0x8000000100484B00);
    sub_1002C8394((uint64_t)v24, v25);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v26 = sub_100274858(0x574F4E5F544F4ELL, (void *)0xE700000000000000);
    sub_1002C8394((uint64_t)v26, v27);
    sub_1001F6204(0, &qword_100588070);
    uint64_t v28 = (void *)static IMUserNotificationCenter.shared.getter();
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(sub_10027AC68() + 16) = v2;
    id v29 = v2;
    IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    sub_1001FCC08();
  }
  else
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1001F5F88(v15, (uint64_t)qword_100594B98);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v16, "Screen sharing manager ignoring CarPlay connection attempt since we don't have a joined session", v17, 2u);
      swift_slowDealloc();
    }
    sub_1001FCC08();
  }
}

void sub_1002C7480(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1001F5F88(v12, (uint64_t)qword_100594B98);
    v23[0] = (os_log_t)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23[0], v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23[0], v13, "Not ending ScreenSharing because user didn't choose to end", v14, 2u);
      swift_slowDealloc();
    }
    os_log_t v15 = v23[0];
  }
  else
  {
    v23[0] = v5;
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1001F5F88(v16, (uint64_t)qword_100594B98);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Ending ScreenSharing since user tapped the end button", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a2;
    aBlock[4] = sub_1002C7AC0;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_1005126F8;
    uint64_t v21 = _Block_copy(aBlock);
    id v22 = a2;
    static DispatchQoS.unspecified.getter();
    v23[1] = (os_log_t)_swiftEmptyArrayStorage;
    sub_1002C7B74((unint64_t *)&qword_100584FF0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    ((void (*)(char *, uint64_t))v23[0][1].isa)(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
  }
}

uint64_t sub_1002C78E4()
{
  return sub_1002C475C();
}

void sub_1002C7910()
{
  swift_getObjectType();

  CPCarPlayObserverDelegate.carPlayStoppedConnectionAttempt()();
}

uint64_t sub_1002C794C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002C7984(uint64_t a1)
{
  sub_1002C7480(a1, *(void **)(v1 + 16));
}

uint64_t type metadata accessor for ScreenSharingActivityManager()
{
  return self;
}

uint64_t sub_1002C79B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C7A18()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002C7A48()
{
  return sub_1002C3B80(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002C7A50()
{
  uint64_t v0 = sub_1002544DC();
  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1002C7A60(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1002C7AC0()
{
  return sub_1002C78E4();
}

unint64_t sub_1002C7AC8()
{
  unint64_t result = qword_100588120;
  if (!qword_100588120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588120);
  }
  return result;
}

unint64_t sub_1002C7B14()
{
  unint64_t result = qword_100588150;
  if (!qword_100588150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588150);
  }
  return result;
}

void sub_1002C7B60(uint64_t *a1)
{
}

void sub_1002C7B6C(uint64_t a1)
{
  sub_1002C6104(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002C7B74(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C7BC0()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_1002544DC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1002C7BF8(uint64_t a1, uint64_t a2)
{
  return sub_1002C6970(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002C7C00()
{
  swift_release();
  uint64_t v0 = sub_1002544DC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1002C7C30(char *a1)
{
  return sub_1002C6AC4(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 16));
}

void *sub_1002C7C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = type metadata accessor for Participant();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1001F081C(&qword_100588170);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for GroupSessionMessenger.MessageContext();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10025E234(a2, (uint64_t)v16, &qword_100588170);
  if (sub_1001F758C((uint64_t)v16, 1, v17) == 1)
  {
    sub_1002392A8((uint64_t)v16, &qword_100588170);
    id v21 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10048FB00;
    uint64_t v58 = v57;
    swift_unknownObjectRetain();
    sub_1001F081C(&qword_1005881A0);
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v25 = v24;
    uint64_t v26 = v54;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v27 = sub_1001F3B08();
    *(void *)(v22 + 64) = v27;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    GroupSession.id.getter();
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v8, v10, v5);
    uint64_t v28 = String.init<A>(reflecting:)();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v5);
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v27;
    *(void *)(v22 + 72) = v28;
    *(void *)(v22 + 80) = v30;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v49 = v20;
    v31(v20, v16, v17);
    id v51 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1004904F0;
    uint64_t v58 = v57;
    swift_unknownObjectRetain();
    sub_1001F081C(&qword_1005881A0);
    uint64_t v33 = String.init<A>(reflecting:)();
    uint64_t v50 = v18;
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v48 = sub_1001F3B08();
    *(void *)(v32 + 64) = v48;
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    GroupSessionMessenger.MessageContext.source.getter();
    Participant.id.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v53);
    uint64_t v36 = v54;
    uint64_t v52 = *(void *)(v54 + 16);
    uint64_t v53 = v17;
    ((void (*)(char *, char *, uint64_t))v52)(v8, v10, v5);
    uint64_t v37 = String.init<A>(reflecting:)();
    uint64_t v39 = v38;
    id v40 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40(v10, v5);
    unint64_t v41 = v48;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v41;
    *(void *)(v32 + 72) = v37;
    *(void *)(v32 + 80) = v39;
    GroupSession.id.getter();
    ((void (*)(char *, char *, uint64_t))v52)(v8, v10, v5);
    uint64_t v42 = String.init<A>(reflecting:)();
    uint64_t v44 = v43;
    v40(v10, v5);
    *(void *)(v32 + 136) = &type metadata for String;
    *(void *)(v32 + 144) = v41;
    *(void *)(v32 + 112) = v42;
    *(void *)(v32 + 120) = v44;
    static os_log_type_t.default.getter();
    uint64_t v45 = v51;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v53);
  }
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result screenSharingActivityManager:v55 receivedUpdatedRemoteAttributes:v57 isLocallySharing:GroupSession.isLocallyInitiated.getter() & 1];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1002C81F0(uint64_t a1)
{
  return sub_1002C6DCC(a1, *(void **)(v1 + 16));
}

unsigned char *storeEnumTagSinglePayload for ScreenSharingActivityManagerErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002C8294);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivityManagerErrors()
{
  return &type metadata for ScreenSharingActivityManagerErrors;
}

unint64_t sub_1002C82D0()
{
  unint64_t result = qword_1005881B8;
  if (!qword_1005881B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005881B8);
  }
  return result;
}

uint64_t sub_1002C834C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1002C8378()
{
  return 0;
}

uint64_t sub_1002C8394(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 - 96) = v2;
  *(void *)(v3 - 120) = a1;
  *(void *)(v3 - 112) = a2;
  return sub_1002C2414(v3 - 120);
}

id sub_1002C83B8()
{
  return sub_1002C2DB8();
}

uint64_t sub_1002C83DC()
{
  return swift_unknownObjectWeakInit();
}

uint64_t sub_1002C83F8()
{
  return v0;
}

uint64_t sub_1002C8410()
{
  return swift_release();
}

uint64_t sub_1002C8428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001F758C(v3, 1, a3);
}

uint64_t sub_1002C8454()
{
  return v0;
}

uint64_t sub_1002C8468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_1001F758C(a1, 1, v6) == 1)
  {
    sub_10023CF20(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

id sub_1002C85D0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CSDAnalyticsManager()) init];
  static CSDAnalyticsManager.sharedInstance = (uint64_t)result;
  return result;
}

uint64_t *CSDAnalyticsManager.sharedInstance.unsafeMutableAddressor()
{
  if (qword_1005839B0 != -1) {
    swift_once();
  }
  return &static CSDAnalyticsManager.sharedInstance;
}

id static CSDAnalyticsManager.sharedInstance.getter()
{
  if (qword_1005839B0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static CSDAnalyticsManager.sharedInstance;

  return v0;
}

uint64_t CSDAnalyticsManager.analyticsManagerProvider.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_analyticsManagerProvider) = a1;
  return swift_unknownObjectRelease();
}

uint64_t CSDAnalyticsManager.setAnalyticsManagerProvider(_:)()
{
  uint64_t v0 = swift_unknownObjectRetain();

  return CSDAnalyticsManager.analyticsManagerProvider.setter(v0);
}

id sub_1002C8728()
{
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_analyticsManagerProvider] = 0;
  uint64_t v16 = OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_queue;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  uint64_t v6 = v0;
  static DispatchQoS.background.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10021FD54();
  sub_1001F081C(&qword_100585100);
  sub_1001F0860();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v17);
  *(void *)&v0[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v7 = OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_tuFeatureFlags;
  *(void *)&v6[v7] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  uint64_t v8 = OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_callDirectoryManager;
  *(void *)&v6[v8] = [objc_allocWithZone((Class)CXCallDirectoryExtensionManager) init];
  uint64_t v9 = OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_liveLookupManager;
  type metadata accessor for LiveCallerIDLookupManager();
  *(void *)&v6[v9] = static LiveCallerIDLookupManager.shared.getter();

  uint64_t v10 = (objc_class *)type metadata accessor for CSDAnalyticsManager();
  v19.receiver = v6;
  v19.super_class = v10;
  id v11 = objc_msgSendSuper2(&v19, "init");
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  aBlock[4] = sub_1002CA81C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100339000;
  void aBlock[3] = &unk_1005128B8;
  os_log_type_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  swift_release();
  xpc_activity_register("com.apple.telephonyutilities.callservicesd.analytics.daily", XPC_ACTIVITY_CHECK_IN, v13);

  _Block_release(v13);
  return v14;
}

void sub_1002C8A9C(_xpc_activity_s *a1, void *a2)
{
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    (*(void (**)(_xpc_activity_s *))((swift_isaMask & *a2) + 0x98))(a1);
    return;
  }
  if (!state)
  {
    if (qword_1005839F8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1001F5F88(v5, (uint64_t)qword_100594BE0);
    swift_unknownObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7))
    {

      swift_unknownObjectRelease_n();
      return;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    if (xpc_activity_copy_criteria(a1))
    {
      sub_1001F081C(&qword_100588250);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    sub_1002344D8(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "XPC activity checked in. Criteria: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_19;
  }
  if (qword_1005839F8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1001F5F88(v12, (uint64_t)qword_100594BE0);
  swift_unknownObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v14 = 134217984;
    uint64_t v15 = xpc_activity_get_state(a1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v13, "unhandled xpc activity state %ld", v14, 0xCu);
LABEL_19:
    swift_slowDealloc();

    return;
  }

  swift_unknownObjectRelease();
}

uint64_t CSDAnalyticsManager.beginDailyMaintenance(with:)(_xpc_activity_s *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1001F081C(&qword_100586A10);
  __chkstk_darwin(v5 - 8);
  os_log_type_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005839F8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594BE0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (sub_1002CA9A8(v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v2, "beginDailyMaintenance", v11, 2u);
    sub_1001F63CC();
  }

  xpc_activity_set_state(a1, 4);
  uint64_t v12 = type metadata accessor for TaskPriority();
  sub_1001F0530((uint64_t)v7, 1, 1, v12);
  os_log_type_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v3;
  v13[5] = a1;
  id v14 = v3;
  swift_unknownObjectRetain();
  sub_1002C8468((uint64_t)v7, (uint64_t)&unk_1005881D0, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1002C8F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return _swift_task_switch(sub_1002C8FBC, 0, 0);
}

uint64_t sub_1002C8FBC()
{
  int v1 = TUCallScreeningActivatable();
  uint64_t v2 = sub_1001F6204(0, (unint64_t *)&qword_100585590);
  if (v1)
  {
    char v3 = TUCallScreeningEnabled();
    v4.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(v3).super.super.isa;
  }
  else
  {
    v4.super.super.Class isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  }
  Class isa = v4.super.super.isa;
  uint64_t v6 = v0[4];
  v0[6] = v2;
  id v7 = [objc_allocWithZone((Class)NSUserDefaults) init];
  unsigned __int8 v8 = [v7 silenceUnknownCallersEnabled];

  Class v9 = NSNumber.init(BOOLeanLiteral:)(v8).super.super.isa;
  id v10 = [objc_allocWithZone((Class)CSDCoreTelephonyClient) initWithQueue:*(void *)(v6 + OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_queue) shouldRegisterForECBMNotification:0];
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v6;
  sub_1001F081C(&qword_100588268);
  OS_dispatch_queue.sync<A>(execute:)();

  swift_task_dealloc();
  uint64_t v12 = (void *)v0[2];
  os_log_type_t v13 = (void *)v0[3];
  CSDAnalyticsManager.sendFacetimeSettingsDailyEvent(lvmToggleStatus:silenceUnknownCallerStatus:greetingExistsStatus:)(isa, v9, v12, v13);

  id v14 = (void *)swift_task_alloc();
  v0[7] = v14;
  *id v14 = v0;
  v14[1] = sub_1002C91B4;
  return CSDAnalyticsManager.areCallDirectoryAppsEnabled()();
}

uint64_t sub_1002C91B4()
{
  sub_1001F640C();
  sub_1001F63B4();
  sub_1001F6424();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 64) = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002C9288, 0, 0);
}

uint64_t sub_1002C9288()
{
  uint64_t v1 = *(_xpc_activity_s **)(v0 + 40);
  Class isa = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 64)).super.super.isa;
  unsigned __int8 v3 = CSDAnalyticsManager.areLiveLookupAppsEnabled()();
  Class v4 = NSNumber.init(BOOLeanLiteral:)(v3 & 1).super.super.isa;
  CSDAnalyticsManager.sendSpamFiltersDailyEvent(callDirectoryAppEnabled:liveLookupAppEnabled:)(isa, v4);

  xpc_activity_set_state(v1, 5);
  sub_1001F643C();
  return v5();
}

void sub_1002C9354(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

uint64_t CSDAnalyticsManager.sendFacetimeSettingsDailyEvent(lvmToggleStatus:silenceUnknownCallerStatus:greetingExistsStatus:)(void *a1, void *a2, void *a3, void *a4)
{
  sub_1001F081C((uint64_t *)&unk_100588240);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048FAF0;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x8000000100485340;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = 0xD00000000000001DLL;
  sub_1002CA9EC();
  *(void *)(v9 + 64) = v10;
  *(void *)(v9 + 72) = a2;
  sub_1002CA9EC();
  v11[10] = 0xD00000000000001BLL;
  v11[11] = v12;
  v11[12] = a3;
  v11[13] = 0xD00000000000001BLL;
  sub_1002CA9EC();
  *(void *)(v13 + 112) = v14;
  *(void *)(v13 + 120) = a4;
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  if (qword_1005839F8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1001F5F88(v20, (uint64_t)qword_100594BE0);
  swift_bridgeObjectRetain_n();
  id v21 = (void *)Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (sub_1002CA9A8(v22))
  {
    uint64_t v23 = (_DWORD *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    _DWORD *v23 = 136315138;
    uint64_t v24 = Dictionary.description.getter();
    sub_1002344D8(v24, v25, &v30);
    sub_1002CA9C4();
    sub_1002B8120();
    swift_bridgeObjectRelease();
    sub_100298880((void *)&_mh_execute_header, v26, v27, "Logging facetimesettings daily event to core analytics: %s");
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    sub_1002B8120();
  }
  type metadata accessor for AnalyticsReporter();
  uint64_t v28 = sub_1003940B4(v19);
  swift_bridgeObjectRelease();
  sub_100396180(0xD000000000000020, 0x80000001004853C0, v28);
  return swift_bridgeObjectRelease();
}

uint64_t CSDAnalyticsManager.sendSpamFiltersDailyEvent(callDirectoryAppEnabled:liveLookupAppEnabled:)(void *a1, void *a2)
{
  sub_1001F081C((uint64_t *)&unk_100588240);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10048FB00;
  sub_1002CA9EC();
  v4[4] = 0xD00000000000001ALL;
  v4[5] = v5;
  v4[6] = a1;
  v4[7] = 0xD00000000000001ALL;
  sub_1002CA9EC();
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 72) = a2;
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  id v8 = a1;
  id v9 = a2;
  uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
  if (qword_1005839F8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594BE0);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = (void *)Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (sub_1002CA9A8(v13))
  {
    uint64_t v14 = (_DWORD *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *uint64_t v14 = 136315138;
    uint64_t v15 = Dictionary.description.getter();
    sub_1002344D8(v15, v16, &v21);
    sub_1002CA9C4();
    sub_1002B8120();
    swift_bridgeObjectRelease();
    sub_100298880((void *)&_mh_execute_header, v17, v18, "Logging spamfilters daily event to core analytics: %s");
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    sub_1002B8120();
  }
  type metadata accessor for AnalyticsReporter();
  uint64_t v19 = sub_1003940B4(v10);
  swift_bridgeObjectRelease();
  sub_100396180(0xD000000000000029, 0x8000000100485310, v19);
  return swift_bridgeObjectRelease();
}

void sub_1002C98A4(void *a1@<X0>, uint64_t a2@<X1>, NSNumber *a3@<X8>)
{
  id v5 = [a1 subscriptions];
  if (v5)
  {
    uint64_t v6 = v5;
    sub_1001F6204(0, &qword_100588270);
    sub_1002CA948();
    uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  v8.super.super.Class isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v9.super.super.Class isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  if (!v7) {
    goto LABEL_43;
  }
  if (!*(void *)(a2 + OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_analyticsManagerProvider))
  {
    swift_bridgeObjectRelease();
LABEL_43:
    a3->super.super.Class isa = v8.super.super.isa;
    a3[1].super.super.Class isa = v9.super.super.isa;
    return;
  }
  uint64_t v32 = a3;
  id v34 = *(id *)(a2 + OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_analyticsManagerProvider);
  Class isa = v8.super.super.isa;
  Class v33 = v9.super.super.isa;
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_unknownObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100588270);
    sub_1002CA948();
    Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v36;
    uint64_t v10 = v37;
    uint64_t v11 = v38;
    int64_t v12 = v39;
    unint64_t v13 = v40;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v10 = v7 + 56;
    uint64_t v11 = ~v14;
    uint64_t v15 = -v14;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v13 = v16 & *(void *)(v7 + 56);
    swift_unknownObjectRetain();
    int64_t v12 = 0;
  }
  int64_t v17 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    int64_t v18 = v12;
    if ((v7 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_42;
    }
    sub_1001F6204(0, &qword_100588270);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v21 = v41;
    swift_unknownObjectRelease();
    if (!v41) {
      goto LABEL_42;
    }
LABEL_35:
    sub_10038ED34(v21);
    if (!v25) {
      goto LABEL_36;
    }
    if ([v21 slotID] == (id)1)
    {
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v27 = [v34 hasCustomGreetingFor:v26];

      Class v28 = NSNumber.init(BOOLeanLiteral:)(v27).super.super.isa;
      Class isa = v28;
    }
    else
    {
      if ([v21 slotID] == (id)2)
      {
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned __int8 v30 = [v34 hasCustomGreetingFor:v29];

        Class v31 = NSNumber.init(BOOLeanLiteral:)(v30).super.super.isa;
        Class v33 = v31;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_36:
    }
  }
  if (v13)
  {
    unint64_t v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v20 = v19 | (v12 << 6);
LABEL_34:
    id v21 = *(id *)(*(void *)(v7 + 48) + 8 * v20);
    if (!v21) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  int64_t v22 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v22 >= v17) {
      goto LABEL_42;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v18 + 2;
      if (v18 + 2 >= v17) {
        goto LABEL_42;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v12);
      if (!v23)
      {
        int64_t v12 = v18 + 3;
        if (v18 + 3 >= v17) {
          goto LABEL_42;
        }
        unint64_t v23 = *(void *)(v10 + 8 * v12);
        if (!v23)
        {
          int64_t v12 = v18 + 4;
          if (v18 + 4 >= v17) {
            goto LABEL_42;
          }
          unint64_t v23 = *(void *)(v10 + 8 * v12);
          if (!v23)
          {
            int64_t v24 = v18 + 5;
            while (v24 < v17)
            {
              unint64_t v23 = *(void *)(v10 + 8 * v24++);
              if (v23)
              {
                int64_t v12 = v24 - 1;
                goto LABEL_33;
              }
            }
LABEL_42:
            sub_100206FA0();
            swift_unknownObjectRelease();
            a3 = v32;
            v8.super.super.Class isa = isa;
            v9.super.super.Class isa = v33;
            goto LABEL_43;
          }
        }
      }
    }
LABEL_33:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v12 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t CSDAnalyticsManager.areCallDirectoryAppsEnabled()()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_1002C9D08, 0, 0);
}

uint64_t sub_1002C9D08()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR____TtC13callservicesd19CSDAnalyticsManager_callDirectoryManager);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1002C9E10;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1002CA21C;
  v0[13] = &unk_100512878;
  v0[14] = v2;
  [v1 extensionsWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1002C9E10()
{
  sub_1001F640C();
  sub_1001F63B4();
  sub_1001F6424();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 136) = v4;
  if (v4) {
    id v5 = sub_1002CA028;
  }
  else {
    id v5 = sub_1002C9EF4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002C9EF4()
{
  unint64_t v1 = *(void *)(v0 + 120);
  if (v1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 0;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3 + 32);
      id v5 = v4;
      uint64_t v6 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        break;
      }
      id v7 = [v4 state];

      BOOL v8 = v7 == (id)4;
      ++v3;
      if (v7 == (id)4 || v6 == v2) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  BOOL v8 = 0;
LABEL_17:
  swift_bridgeObjectRelease_n();
  uint64_t v10 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v10(v8);
}

uint64_t sub_1002CA028()
{
  swift_willThrow();
  if (qword_1005839F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594BE0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_1002CA9A8(v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)id v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "Failed to retrieve Call Directory Extensions with error: %@", v5, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  BOOL v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8(0);
}

uint64_t sub_1002CA21C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_10037DD08(v3, v4);
  }
  else
  {
    sub_1001F6204(0, &qword_100588238);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return sub_10037DD70(v3, v6);
  }
}

id CSDAnalyticsManager.areLiveLookupAppsEnabled()()
{
  unint64_t v0 = dispatch thunk of LiveCallerIDLookupManager.installedExtensions()();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3);
      id v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 isEnabled];

      if ((v7 & 1) == 0)
      {
        ++v3;
        if (v6 != v2) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v7 = 0;
LABEL_14:
  sub_1002B8120();
  return v7;
}

id CSDAnalyticsManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDAnalyticsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002CA450()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002CA498(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  BOOL v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *BOOL v8 = v2;
  v8[1] = sub_1002CA558;
  return sub_1002C8F9C(a1, v4, v5, v7, v6);
}

uint64_t sub_1002CA558()
{
  sub_1001F640C();
  sub_1001F63B4();
  uint64_t v1 = *v0;
  sub_1001F6424();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1001F643C();
  return v3();
}

uint64_t type metadata accessor for CSDAnalyticsManager()
{
  return self;
}

uint64_t sub_1002CA640(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1002CA71C;
  return v6(a1);
}

uint64_t sub_1002CA71C()
{
  sub_1001F640C();
  sub_1001F63B4();
  uint64_t v1 = *v0;
  sub_1001F6424();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1001F643C();
  return v3();
}

uint64_t sub_1002CA7E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002CA81C(_xpc_activity_s *a1)
{
  sub_1002C8A9C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1002CA824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002CA834()
{
  return swift_release();
}

uint64_t sub_1002CA83C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002CA874(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1002CA558;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100588258 + dword_100588258);
  return v6(a1, v4);
}

void sub_1002CA92C(NSNumber *a1@<X8>)
{
  sub_1002C98A4(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_1002CA948()
{
  unint64_t result = qword_100588278;
  if (!qword_100588278)
  {
    sub_1001F6204(255, &qword_100588270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588278);
  }
  return result;
}

BOOL sub_1002CA9A8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1002CA9C4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_1002CA9F8(void *a1)
{
  uint64_t v3 = OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache;
  sub_1002CBBDC();
  uint64_t v4 = v1;
  *(void *)&v1[v3] = Dictionary.init(dictionaryLiteral:)();
  *(void *)&v4[OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache] = &_swiftEmptySetSingleton;
  *(void *)&v4[OBJC_IVAR___CSDApplicationInstallationObserver_queue] = a1;
  id v5 = a1;

  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for ApplicationInstallationObserver();
  id v6 = objc_msgSendSuper2(&v12, "init");
  uint64_t v7 = self;
  id v8 = v6;
  id result = [v7 defaultWorkspace];
  if (result)
  {
    uint64_t v10 = result;
    id v11 = v8;
    [v10 addObserver:v11];

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002CAB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1002024D0();
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_queue);
  *uint64_t v3 = v10;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v3, v6);
  if (v10)
  {
    unint64_t v13 = (uint64_t *)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache);
    swift_beginAccess();
    uint64_t v14 = *v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_100235E2C();
    int64_t v17 = (void *)sub_1002231D4(v15, v16, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v17)
    {
      int64_t v18 = (uint64_t *)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache);
      swift_beginAccess();
      uint64_t v19 = *v18;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_100235E2C();
      sub_100370C00(v20, v21, v19);
      char v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        id v24 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_100235E2C();
        id v27 = sub_100377640(v25, v26, 1);
        int64_t v17 = v27;
        if (v27)
        {
          swift_beginAccess();
          swift_bridgeObjectRetain();
          sub_10027FB34((uint64_t)v17, a1, a2);
          swift_endAccess();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_beginAccess();
          swift_bridgeObjectRetain();
          sub_1002DFB58(&v28, a1, a2);
          swift_endAccess();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    return (uint64_t)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002CAE18(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1002024D0();
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_queue);
  *uint64_t v3 = v10;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v3, v6);
  if (v10)
  {
    unint64_t v13 = (void *)sub_1002CAB4C(a1, a2);
    uint64_t v14 = v13;
    if (v13) {

    }
    return v14 != 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002CAF84()
{
}

id sub_1002CAFC4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationInstallationObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ApplicationInstallationObserver()
{
  return self;
}

void sub_1002CB078(void *a1, uint64_t a2)
{
  if (qword_1005839E0 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = type metadata accessor for Logger();
    sub_1001F5F88(v3, (uint64_t)qword_100594B98);
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v7 = Array.description.getter();
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
      sub_1002344D8(v7, v9, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "applicationsDidUninstall: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v10 = (unint64_t)sub_100370DDC((uint64_t)a1);
    if (!v10)
    {
      char v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to convert notifications' appProxies to LSApplicationProxy", v24, 2u);
        swift_slowDealloc();
      }

      return;
    }
    unint64_t v11 = v10;
    if (v10 >> 62) {
      break;
    }
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      goto LABEL_25;
    }
LABEL_8:
    v37[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1002E3EC4();
    if (v12 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return;
    }
    uint64_t v13 = 0;
    a1 = (void *)v37[0];
    while (v12 != v13)
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v11 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      uint64_t v16 = sub_10021FC88(v14);
      if (!v17) {
        goto LABEL_33;
      }
      uint64_t v18 = v16;
      uint64_t v19 = v17;

      v37[0] = (uint64_t)a1;
      unint64_t v20 = a1[2];
      if (v20 >= a1[3] >> 1)
      {
        sub_1002E3EC4();
        a1 = (void *)v37[0];
      }
      ++v13;
      a1[2] = v20 + 1;
      uint64_t v21 = &a1[2 * v20];
      v21[4] = v18;
      v21[5] = v19;
      if (v12 == v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_23:
    swift_once();
  }
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  if (v12) {
    goto LABEL_8;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  a1 = _swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v25 = a1[2];
  if (v25)
  {
    uint64_t v26 = (uint64_t *)(a2 + OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache);
    id v27 = a1 + 5;
    do
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_100233664();
      char v30 = v29;
      swift_bridgeObjectRelease();
      if (v30)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v36 = *v26;
        uint64_t v32 = *v26;
        uint64_t *v26 = 0x8000000000000000;
        Swift::Int v33 = *(void *)(v32 + 24);
        sub_1001F081C((uint64_t *)&unk_100588330);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v33);
        swift_bridgeObjectRelease();
        id v34 = *(void **)(*(void *)(v36 + 56) + 8 * v28);
        sub_1002CBBDC();
        _NativeDictionary._delete(at:)();
        uint64_t *v26 = v36;

        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v27 += 2;
      swift_endAccess();
      --v25;
    }
    while (v25);
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1002CB53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v8);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002024D0();
  uint64_t v12 = *(void **)&v4[OBJC_IVAR___CSDApplicationInstallationObserver_queue];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = v4;
  aBlock[4] = a3;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = a4;
  id v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  uint64_t v16 = v4;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  uint64_t v17 = sub_100235E2C();
  v18(v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v21);
  return swift_release();
}

void sub_1002CB74C(void *a1)
{
  if (qword_1005839E0 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    sub_1001F5F88(v2, (uint64_t)qword_100594B98);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v6 = Array.description.getter();
      unint64_t v8 = v7;
      swift_bridgeObjectRelease();
      sub_1002344D8(v6, v8, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "applicationsDidInstall: %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v9 = (unint64_t)sub_100370DDC((uint64_t)a1);
    if (!v9)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to convert notifications' appProxies to LSApplicationProxy", v23, 2u);
        swift_slowDealloc();
      }

      return;
    }
    unint64_t v10 = v9;
    if (v9 >> 62) {
      break;
    }
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      goto LABEL_25;
    }
LABEL_8:
    v28[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1002E3EC4();
    if (v11 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return;
    }
    uint64_t v12 = 0;
    a1 = (void *)v28[0];
    while (v11 != v12)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v10 + 8 * v12 + 32);
      }
      id v14 = v13;
      uint64_t v15 = sub_10021FC88(v13);
      if (!v16) {
        goto LABEL_31;
      }
      uint64_t v17 = v15;
      uint64_t v18 = v16;

      v28[0] = (uint64_t)a1;
      unint64_t v19 = a1[2];
      if (v19 >= a1[3] >> 1)
      {
        sub_1002E3EC4();
        a1 = (void *)v28[0];
      }
      ++v12;
      a1[2] = v19 + 1;
      unint64_t v20 = &a1[2 * v19];
      v20[4] = v17;
      v20[5] = v18;
      if (v11 == v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_23:
    swift_once();
  }
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (v11) {
    goto LABEL_8;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  a1 = _swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v24 = a1[2];
  if (v24)
  {
    uint64_t v25 = a1 + 5;
    do
    {
      uint64_t v26 = *(v25 - 1);
      uint64_t v27 = *v25;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100377734(v26, v27);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 += 2;
      --v24;
    }
    while (v24);
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1002CBB54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a1;
  sub_1002CB53C(v10, a4, a5, a6);

  return swift_bridgeObjectRelease();
}

unint64_t sub_1002CBBDC()
{
  unint64_t result = qword_100588320;
  if (!qword_100588320)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100588320);
  }
  return result;
}

void sub_1002CBC20()
{
  sub_1002CB74C(*(void **)(v0 + 16));
}

uint64_t sub_1002CBC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002CBC38()
{
  return swift_release();
}

uint64_t sub_1002CBC44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002CBC84()
{
  sub_1002CB078(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

id sub_1002CBCC8()
{
  return [v0 isGuest];
}

id sub_1002CBCEC()
{
  return [v0 canReceiveRelayedCalls];
}

id sub_1002CBD5C(void *a1)
{
  id v3 = [v1 destinationURIs];
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100252B78();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v5[2])
  {
    uint64_t v6 = v5[4];
    uint64_t v7 = v5[5];
    swift_bridgeObjectRetain();
    swift_release();
    id v8 = [a1 service];
    id v9 = sub_1002CBE94(v6, v7, v8);

    return v9;
  }
  else
  {
    swift_release();
    return 0;
  }
}

id sub_1002CBE94(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 deviceForFromID:v4];

  return v5;
}

id sub_1002CBF2C()
{
  return [self isFaceTimePhotosEnabled];
}

id sub_1002CBF8C()
{
  return [self isFaceTimePhotosRestricted];
}

id sub_1002CBFB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for MomentsControllerLocalCapabilities()
{
  return self;
}

void type metadata accessor for BackgroundBluetoothAccessValidator()
{
}

uint64_t sub_1002CC04C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1002CC084()
{
  return swift_release();
}

uint64_t sub_1002CC08C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1002CC0D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for DonatedIntentValidator()
{
}

uint64_t sub_1002CC120(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  id v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void sub_1002CC158(uint64_t a1)
{
}

uint64_t sub_1002CC160(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  id v3 = *(void **)(a2 + 8);
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

uint64_t sub_1002CC1A0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t sub_1002CC1DC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1002CC21C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ApplicationStateValidator()
{
}

unsigned char *sub_1002CC264(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CC330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for PrivateAPIValidator()
{
}

void *sub_1002CC364(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1002CC430(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002CC494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CC510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CC58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CC608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CC684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CC698);
}

uint64_t sub_1002CC698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DispatchTimeInterval();
  sub_100274480();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_1001F758C(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2) {
      return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1002CC734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CC748);
}

void sub_1002CC748(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DispatchTimeInterval();
  sub_100274480();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_1001F0530(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
}

uint64_t type metadata accessor for MediaRemoteStateValidator()
{
  uint64_t result = qword_100588428;
  if (!qword_100588428) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002CC818()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1002CC8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100587050);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v38 = (uint64_t)v33 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v33 - v14;
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1002E4D1C(v42, a1);
  uint64_t v39 = v42[0];
  int64_t v40 = v42[3];
  unint64_t v17 = v42[4];
  v33[1] = a2;
  uint64_t v18 = (void (**)(uint64_t))(a2 + qword_10058A208);
  uint64_t v36 = v42[1];
  int64_t v37 = (unint64_t)(v42[2] + 64) >> 6;
  unint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  id v34 = v11;
  uint64_t v35 = v4;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v40 << 6);
      goto LABEL_20;
    }
    int64_t v22 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v22 >= v37) {
      goto LABEL_27;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    int64_t v24 = v40 + 1;
    if (!v23)
    {
      int64_t v24 = v40 + 2;
      if (v40 + 2 >= v37) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v40 + 3;
        if (v40 + 3 >= v37) {
          goto LABEL_27;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v40 + 4;
          if (v40 + 4 >= v37) {
            goto LABEL_27;
          }
          unint64_t v23 = *(void *)(v36 + 8 * v24);
          if (!v23)
          {
            int64_t v24 = v40 + 5;
            if (v40 + 5 >= v37) {
              goto LABEL_27;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v24);
            if (!v23)
            {
              int64_t v25 = v40 + 6;
              while (v25 < v37)
              {
                unint64_t v23 = *(void *)(v36 + 8 * v25++);
                if (v23)
                {
                  int64_t v24 = v25 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              swift_release();
              return v43;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    int64_t v40 = v24;
LABEL_20:
    uint64_t v26 = v38;
    uint64_t v27 = *(void *)(v41 + 72);
    sub_1002CFD90(*(void *)(v39 + 56) + v27 * v21, v38);
    uint64_t v28 = sub_1002C79B0(v26, (uint64_t)v15);
    (*v18)(v28);
    LOBYTE(v26) = static DispatchTime.< infix(_:_:)();
    (*v19)(v7, v4);
    if (v26)
    {
      sub_1002C79B0((uint64_t)v15, (uint64_t)v11);
      char v29 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002E3FF4(0, v29[2] + 1, 1);
        char v29 = v43;
      }
      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        sub_1002E3FF4(v30 > 1, v31 + 1, 1);
        char v29 = v43;
      }
      v29[2] = v31 + 1;
      uint64_t v32 = (uint64_t)v29
          + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
          + v31 * v27;
      id v11 = v34;
      uint64_t result = (void *)sub_1002C79B0((uint64_t)v34, v32);
      uint64_t v4 = v35;
    }
    else
    {
      uint64_t result = (void *)sub_100235804((uint64_t)v15, (uint64_t *)&unk_100587050);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002CCC9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    sub_1002E3EC4();
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100204398(v4, (uint64_t)v19);
      sub_10020ED28((uint64_t)v19, (uint64_t)&v16);
      sub_100204074(&v16, v18);
      swift_getDynamicType();
      sub_1002018DC((uint64_t)&v16);
      sub_1001F081C((uint64_t *)&unk_100588598);
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v7 = v6;
      swift_bridgeObjectRelease();
      uint64_t v16 = v5;
      uint64_t v17 = v7;
      v8._countAndFlagsBits = 8250;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = String.init<A>(reflecting:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      uint64_t v10 = v16;
      uint64_t v11 = v17;
      sub_1002043F4((uint64_t)v19);
      uint64_t v2 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002E3EC4();
        uint64_t v2 = v20;
      }
      unint64_t v12 = v2[2];
      if (v12 >= v2[3] >> 1)
      {
        sub_1002E3EC4();
        uint64_t v2 = v20;
      }
      v2[2] = v12 + 1;
      uint64_t v13 = &v2[2 * v12];
      v13[4] = v10;
      v13[5] = v11;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  v19[0] = v2;
  sub_1001F081C(&qword_10058B600);
  sub_1001F7538();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1002CCE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  Swift::String v9 = sub_1002044D8((uint64_t *)a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v9, v4, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, a2, a3);
  *(unsigned char *)(a4 + 40) = result & 1;
  return result;
}

id sub_1002CCF34(void *a1)
{
  return [a1 isPermittedToUsePrivateAPI];
}

uint64_t sub_1002CCF54()
{
  return *v0;
}

id sub_1002CCF5C(void *a1)
{
  return sub_1002CCF34(a1);
}

BOOL sub_1002CCF64(void *a1)
{
  uint64_t v1 = sub_100251F04(a1);
  uint64_t v2 = sub_1002CF444(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  swift_release();
  return v3 != 0;
}

BOOL sub_1002CCFC4(void *a1)
{
  return sub_1002CCF64(a1);
}

uint64_t sub_1002CCFD0(void *a1)
{
  id v2 = [a1 identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  LOBYTE(v2) = sub_1002CD8A0(v3, v5);
  swift_bridgeObjectRelease();
  if (v2) {
    return 1;
  }
  uint64_t v7 = sub_10021FC88(a1);
  if (!v8) {
    return 0;
  }
  char v9 = sub_1002CD8A0(v7, v8);
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1002CD07C(void *a1)
{
  return sub_1002CCFD0(a1);
}

id sub_1002CD088(void *a1)
{
  return [a1 isPermittedToUseBluetoothAccessories];
}

id sub_1002CD0A8(void *a1)
{
  return sub_1002CD088(a1);
}

BOOL sub_1002CD0B0(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v34 - v10;
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021FC88(a1);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (!v19) {
    return 0;
  }
  uint64_t v38 = v1;
  [a1 processIdentifier];
  uint64_t v20 = MRNowPlayingClientCreate();
  if (!v20) {
    return 0;
  }
  unint64_t v21 = (const void *)v20;
  MRMediaRemoteGetLocalOrigin();
  uint64_t v37 = MRNowPlayingPlayerPathCreate();
  if (!v37)
  {
LABEL_7:
    j__CFRelease(v21);
    return 0;
  }
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v34[1] = v22 + 16;
  dispatch_semaphore_t v35 = dispatch_semaphore_create(0);
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchQoS.QoSClass.userInitiated(_:), v12);
  unint64_t v23 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  uint64_t v24 = swift_allocObject();
  dispatch_semaphore_t v25 = v35;
  *(void *)(v24 + 16) = v22;
  *(void *)(v24 + 24) = v25;
  aBlock[4] = sub_1002CFE4C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002CD480;
  void aBlock[3] = &unk_100512C70;
  uint64_t v26 = _Block_copy(aBlock);
  uint64_t v36 = v22;
  swift_retain();
  uint64_t v27 = v25;
  swift_release();
  uint64_t v28 = (const void *)v37;
  MRMediaRemoteGetPlaybackStateForPlayer();
  _Block_release(v26);

  static DispatchTime.now()();
  + infix(_:_:)();
  char v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v9, v3);
  OS_dispatch_semaphore.wait(timeout:)();
  v29(v11, v3);
  char v30 = static DispatchTimeoutResult.== infix(_:_:)();

  if ((v30 & 1) == 0)
  {
    swift_release();
    j__CFRelease(v28);
    goto LABEL_7;
  }
  swift_beginAccess();
  int v31 = *(_DWORD *)(v36 + 16);
  swift_release();
  BOOL v32 = v31 == 1;
  j__CFRelease(v28);
  j__CFRelease(v21);
  return v32;
}

Swift::Int sub_1002CD42C(int a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = a1;
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1002CD480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1002CD4D4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_1002CD4E4()
{
  uint64_t v1 = sub_1001F081C((uint64_t *)&unk_100587050);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100588460);
  __chkstk_darwin(v5 - 8);
  uint64_t v37 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1002CC8AC(v7, v0);
  uint64_t v9 = v8[2];
  uint64_t v36 = v2;
  if (v9)
  {
    int64_t v40 = _swiftEmptyArrayStorage;
    sub_1002E3EC4();
    uint64_t v10 = *(unsigned __int8 *)(v2 + 80);
    v34[1] = v8;
    uint64_t v11 = (uint64_t)v8 + ((v10 + 32) & ~v10);
    uint64_t v12 = *(void *)(v2 + 72);
    uint64_t v13 = v40;
    uint64_t v35 = v12;
    do
    {
      sub_1002CFD90(v11, (uint64_t)v4);
      uint64_t v14 = v1;
      uint64_t v15 = &v4[*(int *)(v1 + 44)];
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *((void *)v15 + 1);
      swift_bridgeObjectRetain();
      sub_100235804((uint64_t)v4, (uint64_t *)&unk_100587050);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002E3EC4();
        uint64_t v12 = v35;
        uint64_t v13 = v40;
      }
      unint64_t v18 = v13[2];
      if (v18 >= v13[3] >> 1)
      {
        sub_1002E3EC4();
        uint64_t v12 = v35;
        uint64_t v13 = v40;
      }
      v13[2] = v18 + 1;
      uint64_t v19 = &v13[2 * v18];
      v19[4] = v17;
      void v19[5] = v16;
      v11 += v12;
      --v9;
      uint64_t v1 = v14;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  uint64_t v20 = v13[2];
  uint64_t v21 = (uint64_t)v37;
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = v13 + 5;
    unint64_t v23 = v38;
    do
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_100233664();
      char v26 = v25;
      swift_bridgeObjectRelease();
      if (v26)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v39 = *v23;
        uint64_t v28 = v39;
        uint64_t *v23 = 0x8000000000000000;
        Swift::Int v29 = *(void *)(v28 + 24);
        sub_1001F081C(&qword_100587048);
        Swift::Int v30 = v29;
        uint64_t v21 = (uint64_t)v37;
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v30);
        uint64_t v31 = v39;
        swift_bridgeObjectRelease();
        sub_1002C79B0(*(void *)(v31 + 56) + *(void *)(v36 + 72) * v24, v21);
        _NativeDictionary._delete(at:)();
        uint64_t *v23 = v31;
        swift_bridgeObjectRelease();
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = 1;
      }
      v22 += 2;
      sub_1001F0530(v21, v32, 1, v1);
      sub_100235804(v21, (uint64_t *)&unk_100588460);
      swift_endAccess();
      swift_bridgeObjectRelease();
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CD8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100588460);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = sub_1001F081C((uint64_t *)&unk_100587050);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v24 = a1;
  sub_10022358C(v17, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v13, 1, v14) == 1)
  {
    sub_100235804((uint64_t)v13, (uint64_t *)&unk_100588460);
LABEL_5:
    sub_1001F0530((uint64_t)v11, 1, 1, v14);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1002C24A0((uint64_t)v11);
    swift_endAccess();
    uint64_t v20 = 0;
    goto LABEL_6;
  }
  uint64_t v18 = sub_1002C79B0((uint64_t)v13, (uint64_t)v16);
  (*(void (**)(uint64_t))(v3 + qword_10058A208))(v18);
  sub_1002CFE6C((unint64_t *)&unk_100588470, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  sub_100235804((uint64_t)v16, (uint64_t *)&unk_100587050);
  if ((v19 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v20 = 1;
LABEL_6:
  sub_1002CD4E4();
  return v20;
}

void *sub_1002CDBA0(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1002D0650();
    uint64_t result = (void *)sub_1002D062C();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1002CDC18(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1002D0650();
    uint64_t result = (void *)sub_1002D062C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1001F081C(&qword_1005885A8);
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

#error "1002CDCF0: call analysis failed (funcsize=55)"

#error "1002CDDC4: call analysis failed (funcsize=54)"

#error "1002CDEA0: call analysis failed (funcsize=45)"

#error "1002CDF64: call analysis failed (funcsize=59)"

uint64_t sub_1002CE014(uint64_t a1)
{
  return sub_1002CF244(a1, &unk_1005871B0, type metadata accessor for RTCCSDConversationInfo);
}

uint64_t sub_1002CE034(uint64_t a1)
{
  return sub_1002CE45C(a1, &unk_1005871A0, &unk_100588560, RTCReporting_ptr);
}

uint64_t sub_1002CE050(uint64_t a1)
{
  return sub_1002CE45C(a1, &unk_100587198, &unk_100588570, TUConversationReport_ptr);
}

#error "1002CE0BC: call analysis failed (funcsize=78)"

#error "1002CE1EC: call analysis failed (funcsize=39)"

#error "1002CE2AC: call analysis failed (funcsize=60)"

#error "1002CE38C: call analysis failed (funcsize=61)"

uint64_t sub_1002CE440(uint64_t a1)
{
  return sub_1002CE45C(a1, &unk_100587178, &qword_100585860, TUConversation_ptr);
}

#error "1002CE4C0: call analysis failed (funcsize=77)"

#error "1002CE5EC: call analysis failed (funcsize=45)"

#error "1002CE69C: call analysis failed (funcsize=40)"

uint64_t sub_1002CE704(uint64_t a1, uint64_t a2)
{
  return sub_1002CF35C(a1, a2, &unk_100587128, &unk_100588510, RPCompanionLinkDevice_ptr);
}

uint64_t sub_1002CE720(uint64_t a1, uint64_t a2)
{
  return sub_1002CEC08(a1, a2, &unk_10058BB80, &type metadata accessor for URL);
}

uint64_t sub_1002CE740(uint64_t a1)
{
  return sub_1002CEE14(a1, &unk_100587160, &unk_100588528);
}

#error "1002CE7A0: call analysis failed (funcsize=58)"

#error "1002CE894: call analysis failed (funcsize=83)"

uint64_t sub_1002CE99C(uint64_t a1, uint64_t a2)
{
  return sub_1002CE9BC(a1, a2, &unk_100587130, type metadata accessor for MomentsRequest);
}

#error "1002CEA00: call analysis failed (funcsize=41)"

uint64_t sub_1002CEA60(uint64_t a1, uint64_t a2)
{
  return sub_1002CE9BC(a1, a2, &unk_1005884F0, &type metadata accessor for DispatchWorkItem);
}

uint64_t sub_1002CEA80(uint64_t a1, uint64_t a2)
{
  return sub_1002CEB48(a1, a2, &unk_100587120, &unk_100588500);
}

#error "1002CEAD4: call analysis failed (funcsize=39)"

uint64_t sub_1002CEB34(uint64_t a1, uint64_t a2)
{
  return sub_1002CEB48(a1, a2, &unk_1005870E0, &qword_10058B600);
}

#error "1002CEB8C: call analysis failed (funcsize=40)"

uint64_t sub_1002CEBE8(uint64_t a1, uint64_t a2)
{
  return sub_1002CEC08(a1, a2, &unk_1005870E8, &type metadata accessor for UUID);
}

#error "1002CEC90: call analysis failed (funcsize=84)"

#error "1002CED98: call analysis failed (funcsize=41)"

uint64_t sub_1002CEE00(uint64_t a1)
{
  return sub_1002CEE14(a1, &unk_1005870D8, &unk_1005884D0);
}

#error "1002CEE54: call analysis failed (funcsize=54)"

uint64_t sub_1002CEEF0(uint64_t a1, uint64_t a2)
{
  return sub_1002CE9BC(a1, a2, &unk_1005870B0, type metadata accessor for CallRecordingTracker);
}

#error "1002CF060: call analysis failed (funcsize=111)"

#error "1002CF158: call analysis failed (funcsize=73)"

uint64_t sub_1002CF224(uint64_t a1)
{
  return sub_1002CF244(a1, &unk_100587070, &type metadata accessor for NSKeyValueObservation);
}

#error "1002CF284: call analysis failed (funcsize=55)"

uint64_t sub_1002CF324(uint64_t a1)
{
  return sub_1002CE45C(a1, &unk_1005884A0, &unk_1005884A8, STConversationContext_ptr);
}

uint64_t sub_1002CF340(uint64_t a1, uint64_t a2)
{
  return sub_1002CF35C(a1, a2, &unk_100588490, &unk_100588498, STConversation_ptr);
}

#error "1002CF3C8: call analysis failed (funcsize=58)"

uint64_t sub_1002CF444(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v5 = (uint64_t *)((char *)&v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1002DF3E4(0, v4, v5);
    sub_1002CF5A8((uint64_t)v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    sub_1002DF3E4(0, v4, v7);
    sub_1002CF5A8((uint64_t)v7, v4, v2);
    uint64_t v2 = v8;
    swift_slowDealloc();
  }
  return v2;
}

void sub_1002CF5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (*(void *)(*(void *)(a3 + 56) + 8 * v12) == 4)
    {
      *(void *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1002CF934(a1, a2, v4);
        return;
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

void sub_1002CF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_1002D054C();
  if (v7)
  {
    swift_retain();
    return;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v5;
  sub_1001F081C(&qword_1005870F8);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = v10;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  if (v8 < 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v9;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      sub_1002D0784();
      uint64_t v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }
    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_40;
    }
    if (v17 >= v33) {
      return;
    }
    ++v13;
    if (!v32[v17])
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        return;
      }
      if (!v32[v13])
      {
        uint64_t v13 = v17 + 2;
        if (v17 + 2 >= v33) {
          return;
        }
        if (!v32[v13]) {
          break;
        }
      }
    }
LABEL_25:
    sub_1002D071C();
    uint64_t v16 = v19 + (v13 << 6);
LABEL_26:
    uint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t v24 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v11 + 32));
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      sub_100283EE8();
      while (++v27 != v28 || (v26 & 1) == 0)
      {
        BOOL v29 = v27 == v28;
        if (v27 == v28) {
          uint64_t v27 = 0;
        }
        v26 |= v29;
        if (*(void *)(v14 + 8 * v27) != -1)
        {
          sub_100283EA0();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_100283F1C();
LABEL_35:
    *(void *)(v14 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    Swift::Int v30 = (void *)(*(void *)(v11 + 48) + 16 * v25);
    *Swift::Int v30 = v22;
    v30[1] = v21;
    *(void *)(*(void *)(v11 + 56) + 8 * v25) = v23;
    sub_1002D0770();
    if (v31) {
      goto LABEL_39;
    }
    if (!v4) {
      return;
    }
  }
  uint64_t v18 = v17 + 3;
  if (v18 >= v33) {
    return;
  }
  if (v32[v18])
  {
    uint64_t v13 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v33) {
      return;
    }
    ++v18;
    if (v32[v13]) {
      goto LABEL_25;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_1002CF934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_1002D054C();
  if (v7)
  {
    swift_retain();
    return;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v5;
  sub_1001F081C((uint64_t *)&unk_100588480);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = v10;
  Swift::Int v30 = v9;
  if (v8 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v9;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }
    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_40;
    }
    if (v17 >= v8) {
      return;
    }
    unint64_t v18 = v30[v17];
    ++v13;
    if (!v18)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v8) {
        return;
      }
      unint64_t v18 = v30[v13];
      if (!v18)
      {
        uint64_t v13 = v17 + 2;
        if (v17 + 2 >= v8) {
          return;
        }
        unint64_t v18 = v30[v13];
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_26:
    int v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    unint64_t v22 = static Hasher._hash(seed:bytes:count:)() & ~(-1 << *(unsigned char *)(v11 + 32));
    if (((-1 << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) == 0)
    {
      sub_100283EE8();
      while (++v25 != v26 || (v24 & 1) == 0)
      {
        BOOL v27 = v25 == v26;
        if (v25 == v26) {
          uint64_t v25 = 0;
        }
        v24 |= v27;
        if (*(void *)(v14 + 8 * v25) != -1)
        {
          sub_100283EA0();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_100283F1C();
LABEL_35:
    sub_1002D04F8(v23);
    *(_DWORD *)(*(void *)(v11 + 48) + 4 * v28) = v20;
    *(void *)(*(void *)(v11 + 56) + 8 * v28) = v21;
    ++*(void *)(v11 + 16);
    if (__OFSUB__(v4--, 1)) {
      goto LABEL_39;
    }
    if (!v4) {
      return;
    }
  }
  uint64_t v19 = v17 + 3;
  if (v19 >= v8) {
    return;
  }
  unint64_t v18 = v30[v19];
  if (v18)
  {
    uint64_t v13 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v13 >= v8) {
      return;
    }
    unint64_t v18 = v30[v13];
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_1002CFB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_1002D054C();
  if (v7)
  {
    swift_retain();
    return;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v5;
  sub_1001F081C((uint64_t *)&unk_1005884E0);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = v10;
  Swift::Int v30 = v9;
  if (v8 < 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v9;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      sub_1002D0784();
      uint64_t v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }
    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_40;
    }
    if (v17 >= v8) {
      return;
    }
    ++v13;
    if (!v30[v17])
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v8) {
        return;
      }
      if (!v30[v13])
      {
        uint64_t v13 = v17 + 2;
        if (v17 + 2 >= v8) {
          return;
        }
        if (!v30[v13]) {
          break;
        }
      }
    }
LABEL_25:
    sub_1002D071C();
    uint64_t v16 = v19 + (v13 << 6);
LABEL_26:
    sub_1002353DC(*(void *)(v3 + 48) + 40 * v16, (uint64_t)v36);
    sub_100201880(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v35);
    long long v32 = v36[0];
    long long v33 = v36[1];
    uint64_t v34 = v37;
    sub_1001F75B4(v35, v31);
    unint64_t v20 = AnyHashable._rawHashValue(seed:)(*(void *)(v11 + 40)) & ~(-1 << *(unsigned char *)(v11 + 32));
    if (((-1 << v20) & ~*(void *)(v14 + 8 * (v20 >> 6))) == 0)
    {
      sub_100283EE8();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        BOOL v25 = v23 == v24;
        if (v23 == v24) {
          uint64_t v23 = 0;
        }
        v22 |= v25;
        if (*(void *)(v14 + 8 * v23) != -1)
        {
          sub_100283EA0();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_100283F1C();
LABEL_35:
    sub_1002D04F8(v21);
    uint64_t v27 = *(void *)(v11 + 48) + 40 * v26;
    long long v28 = v33;
    *(_OWORD *)uint64_t v27 = v32;
    *(_OWORD *)(v27 + 16) = v28;
    *(void *)(v27 + 32) = v34;
    sub_1001F75B4(v31, (_OWORD *)(*(void *)(v11 + 56) + 32 * v26));
    sub_1002D0770();
    if (v29) {
      goto LABEL_39;
    }
    if (!v4) {
      return;
    }
  }
  uint64_t v18 = v17 + 3;
  if (v18 >= v8) {
    return;
  }
  if (v30[v18])
  {
    uint64_t v13 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v8) {
      return;
    }
    ++v18;
    if (v30[v13]) {
      goto LABEL_25;
    }
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_1002CFD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002CFDFC()
{
  return _swift_deallocObject(v0, 20, 7);
}

uint64_t sub_1002CFE0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1002CFE4C(int a1)
{
  return sub_1002CD42C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002CFE54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002CFE64()
{
  return swift_release();
}

uint64_t sub_1002CFE6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002CFEB4()
{
  unint64_t result = qword_1005884B8;
  if (!qword_1005884B8)
  {
    sub_1001F6204(255, (unint64_t *)&qword_10058A480);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005884B8);
  }
  return result;
}

unint64_t sub_1002CFF14()
{
  unint64_t result = qword_100588520;
  if (!qword_100588520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588520);
  }
  return result;
}

unint64_t sub_1002CFF60()
{
  unint64_t result = qword_100588590;
  if (!qword_100588590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588590);
  }
  return result;
}

uint64_t sub_1002CFFB0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_1002D0014(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t *sub_1002D0048(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 sub_1002D0278(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1002D028C(uint64_t a1, uint64_t a2)
{
  sub_1002018DC(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_1002D02D0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1002D0310(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for UserIntentValidationResult()
{
}

void sub_1002D0370()
{
  void *v0 = 0x8000000000000000;
}

BOOL sub_1002D038C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1002D03AC()
{
  void *v0 = 0x8000000000000000;
  return sub_1001F081C(v1);
}

BOOL sub_1002D03D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void sub_1002D03F8()
{
  void *v0 = 0x8000000000000000;
}

void sub_1002D0444()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_1002D0460()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_1002D047C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1002D049C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D04B8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002D04DC()
{
  return swift_bridgeObjectRetain();
}

void sub_1002D04F8(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_1002D0518()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D0538()
{
  return v1 + v0 * v2;
}

uint64_t sub_1002D0560()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002D058C()
{
  void *v0 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D05A4()
{
  return v0;
}

BOOL sub_1002D05B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1002D05D8()
{
  void *v0 = 0x8000000000000000;
  return sub_1001F081C(v1);
}

uint64_t sub_1002D0604()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002D062C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1002D0668()
{
  void *v1 = v0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D0680()
{
  return type metadata accessor for UUID();
}

unint64_t sub_1002D069C()
{
  return sub_100233664();
}

uint64_t sub_1002D06B8()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_1002D06DC()
{
  return _NativeDictionary._delete(at:)();
}

unint64_t sub_1002D0700()
{
  return sub_100233664();
}

uint64_t sub_1002D0730()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D0750()
{
  return swift_bridgeObjectRelease();
}

void sub_1002D0770()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_1002D07A4()
{
  void *v0 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D07BC()
{
  return v0;
}

uint64_t sub_1002D07D0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002D07F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D082C()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsNotification_streamToken);
}

uint64_t sub_1002D0888()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDMomentsNotification_requesterID);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_1002D08C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR___CSDMomentsNotification_streamToken] = a1;
  uint64_t v8 = &v3[OBJC_IVAR___CSDMomentsNotification_requesterID];
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_1002D0978()
{
}

uint64_t type metadata accessor for MomentsNotification()
{
  return self;
}

void sub_1002D09F0(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
    sub_100210D5C(&qword_100588888, (unint64_t *)&unk_1005858E0);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v25[1];
    uint64_t v24 = v25[2];
    uint64_t v2 = (uint64_t)v25[3];
    int64_t v3 = (int64_t)v25[4];
    unint64_t v4 = (unint64_t)v25[5];
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v22 = v2;
  int64_t v23 = (unint64_t)(v2 + 64) >> 6;
  while ((v1 & 0x8000000000000000) != 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_44;
    }
    sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v25[0];
    swift_unknownObjectRelease();
    int64_t v10 = v3;
    uint64_t v8 = v4;
    if (!v11) {
      goto LABEL_44;
    }
LABEL_26:
    NSString v14 = objc_msgSend(v11, "value", v22);
    if (!v14)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v15 = [self normalizedHandleWithDestinationID:v14];

    if (!v15)
    {

      goto LABEL_37;
    }
    id v16 = v15;
    sub_1001F612C(v16, (SEL *)&selRef_normalizedValue);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (!v18 || [v16 type] == (id)1)
    {

      goto LABEL_37;
    }
    id v19 = v16;
    sub_1002E054C(v25, v19, &unk_100586E00, TUHandle_ptr, &qword_100588800);

    id v20 = [objc_allocWithZone((Class)TUConversationMember) initWithHandle:v19];
    int64_t v3 = v10;
    unint64_t v4 = v8;
    if (v20)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_37:
      int64_t v3 = v10;
      unint64_t v4 = v8;
    }
  }
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v10 = v3;
LABEL_25:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_44;
    }
    goto LABEL_26;
  }
  int64_t v10 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v10 >= v23) {
      goto LABEL_44;
    }
    unint64_t v12 = v24[v10];
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v23) {
        goto LABEL_44;
      }
      unint64_t v12 = v24[v13];
      if (v12) {
        goto LABEL_23;
      }
      int64_t v13 = v3 + 3;
      if (v3 + 3 >= v23) {
        goto LABEL_44;
      }
      unint64_t v12 = v24[v13];
      if (v12) {
        goto LABEL_23;
      }
      int64_t v13 = v3 + 4;
      if (v3 + 4 >= v23) {
        goto LABEL_44;
      }
      unint64_t v12 = v24[v13];
      if (v12)
      {
LABEL_23:
        int64_t v10 = v13;
      }
      else
      {
        int64_t v10 = v3 + 5;
        if (v3 + 5 >= v23) {
          goto LABEL_44;
        }
        unint64_t v12 = v24[v10];
        if (!v12)
        {
          uint64_t v21 = v3 + 6;
          while (v21 < v23)
          {
            unint64_t v12 = v24[v21++];
            if (v12)
            {
              int64_t v10 = v21 - 1;
              goto LABEL_24;
            }
          }
LABEL_44:
          sub_100206FA0();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v8 = (v12 - 1) & v12;
    unint64_t v9 = __clz(__rbit64(v12)) + (v10 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

BOOL sub_1002D0E50(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_1002D0E7C(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_1002D0E8C(uint64_t result)
{
  *v1 &= result;
  return result;
}

void sub_1002D0E9C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v4 = v22;
    int64_t v5 = v23;
    unint64_t v6 = v24;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  int64_t v18 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    int64_t v10 = v5;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v25;
    swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_32;
    }
LABEL_31:
    unsigned int v17 = [v13 isEquivalentToHandle:a2];

    if (v17) {
      goto LABEL_32;
    }
  }
  if (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_30:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (!v13) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v18) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v19 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v10 + 2;
      if (v10 + 2 >= v18) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v19 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v10 + 3;
        if (v10 + 3 >= v18) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v19 + 8 * v5);
        if (!v15)
        {
          int64_t v5 = v10 + 4;
          if (v10 + 4 >= v18) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v5);
          if (!v15)
          {
            int64_t v5 = v10 + 5;
            if (v10 + 5 >= v18) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v19 + 8 * v5);
            if (!v15)
            {
              int64_t v16 = v10 + 6;
              while (v16 < v18)
              {
                unint64_t v15 = *(void *)(v19 + 8 * v16++);
                if (v15)
                {
                  int64_t v5 = v16 - 1;
                  goto LABEL_29;
                }
              }
LABEL_32:
              sub_100206FA0();

              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_1002D11A0(uint64_t a1, char *a2)
{
  uint64_t v3 = a2;
  int64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (uint64_t *)&a2[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers];
  uint64_t result = swift_beginAccess();
  uint64_t v31 = v6;
  if (v6)
  {
    v30[0] = v3;
    v30[1] = v2;
    unint64_t v9 = 0;
    uint64_t v10 = a1 + 32;
    while (v9 < *(void *)(a1 + 16))
    {
      sub_10020ED28(v10, (uint64_t)&v35);
      uint64_t v11 = *v7;
      uint64_t v12 = v36;
      uint64_t v13 = v37;
      sub_100204074(&v35, v36);
      int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
      swift_bridgeObjectRetain();
      uint64_t v15 = v14(v12, v13);
      sub_100370C00(v15, v16, v11);
      LOBYTE(v12) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10020ED28((uint64_t)&v35, (uint64_t)v32);
      if ((v12 & 1) != 0
        && (uint64_t v18 = v33,
            uint64_t v19 = v34,
            sub_100204074(v32, v33),
            (uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19)) != 0))
      {

        sub_1002018DC((uint64_t)v32);
        sub_100233560(&v35, (uint64_t)v32);
        uint64_t v21 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002E4014(0, v21[2] + 1, 1);
          uint64_t v21 = v38;
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        if (v23 >= v22 >> 1) {
          sub_1002E4014(v22 > 1, v23 + 1, 1);
        }
        uint64_t v24 = v33;
        uint64_t v25 = v34;
        uint64_t v26 = sub_10020EF04((uint64_t)v32, v33);
        __chkstk_darwin(v26);
        long long v28 = (char *)v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v29 + 16))(v28);
        sub_1002541EC(v23, (uint64_t)v28, (uint64_t *)&v38, v24, v25);
        uint64_t result = sub_1002018DC((uint64_t)v32);
      }
      else
      {
        sub_1002018DC((uint64_t)v32);
        uint64_t result = sub_1002018DC((uint64_t)&v35);
      }
      ++v9;
      v10 += 40;
      if (v31 == v9)
      {
        int64_t v5 = v38;
        uint64_t v3 = (void *)v30[0];
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:

    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1002D1464(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  int64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = (uint64_t (*)(long long *))result;
    unint64_t v9 = 0;
    uint64_t v10 = a3 + 32;
    unint64_t v23 = (uint64_t (*)(long long *))result;
    uint64_t v24 = a3;
    uint64_t v22 = v6;
    while (v9 < *(void *)(v4 + 16))
    {
      sub_10020ED28(v10, (uint64_t)v28);
      int64_t v5 = a2;
      char v11 = v8(v28);
      if (v3)
      {
        sub_1002018DC((uint64_t)v28);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }
      if (v11)
      {
        sub_100233560(v28, (uint64_t)v25);
        uint64_t v12 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002E4014(0, v12[2] + 1, 1);
          uint64_t v12 = v29;
        }
        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          sub_1002E4014(v13 > 1, v14 + 1, 1);
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_10020EF04((uint64_t)v25, v26);
        __chkstk_darwin(v17);
        uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_1002541EC(v14, (uint64_t)v19, (uint64_t *)&v29, v15, v16);
        uint64_t result = sub_1002018DC((uint64_t)v25);
        uint64_t v8 = v23;
        uint64_t v4 = v24;
        uint64_t v6 = v22;
      }
      else
      {
        uint64_t result = sub_1002018DC((uint64_t)v28);
      }
      ++v9;
      v10 += 40;
      if (v6 == v9)
      {
        int64_t v5 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

id sub_1002D1698()
{
  sub_1001F6204(0, (unint64_t *)&unk_1005887A0);
  Array._bridgeToObjectiveC()();
  sub_100254618();
  id v1 = [(id)swift_getObjCClassFromMetadata() andPredicateWithSubpredicates:v0];

  return v1;
}

id sub_1002D1714(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_1005858D0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Array._bridgeToObjectiveC()();
  sub_1002E7CE4();
  id v9 = [(id)swift_getObjCClassFromMetadata() categoryWithIdentifier:v7 actions:isa intentIdentifiers:a3 options:a5];

  return v9;
}

void sub_1002D17E8(uint64_t a1)
{
  void v9[6] = _swiftEmptyArrayStorage;
  sub_1002E4D20(a1, v9);
  uint64_t v1 = v9[1];
  int64_t v2 = v9[3];
  uint64_t v3 = v9[4];
  int64_t v4 = (unint64_t)(v9[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  v3 &= v3 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_1002D26A0();
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v5 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v5 >= v4) {
      goto LABEL_21;
    }
    uint64_t v6 = *(void *)(v1 + 8 * v5);
    int64_t v7 = v2 + 1;
    if (!v6)
    {
      int64_t v7 = v2 + 2;
      if (v2 + 2 >= v4) {
        goto LABEL_21;
      }
      uint64_t v6 = *(void *)(v1 + 8 * v7);
      if (!v6)
      {
        int64_t v7 = v2 + 3;
        if (v2 + 3 >= v4) {
          goto LABEL_21;
        }
        uint64_t v6 = *(void *)(v1 + 8 * v7);
        if (!v6)
        {
          int64_t v7 = v2 + 4;
          if (v2 + 4 >= v4) {
            goto LABEL_21;
          }
          uint64_t v6 = *(void *)(v1 + 8 * v7);
          if (!v6)
          {
            int64_t v7 = v2 + 5;
            if (v2 + 5 >= v4) {
              goto LABEL_21;
            }
            uint64_t v6 = *(void *)(v1 + 8 * v7);
            if (!v6)
            {
              int64_t v8 = v2 + 6;
              while (v8 < v4)
              {
                uint64_t v6 = *(void *)(v1 + 8 * v8++);
                if (v6)
                {
                  int64_t v7 = v8 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v3 = (v6 - 1) & v6;
    int64_t v2 = v7;
  }
  __break(1u);
}

BOOL sub_1002D195C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

void sub_1002D1998(uint64_t a1)
{
  int64_t v4 = v1;
  unint64_t v5 = a1;
  uint64_t v6 = sub_1002E5998(a1);
  if ((unint64_t)*v4 >> 62)
  {
    sub_1002E7C7C();
    _CocoaArrayWrapper.endIndex.getter();
    sub_1002E7CE4();
  }
  else
  {
    uint64_t v2 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v2, v6))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v4 = v7;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v7 & 0x8000000000000000) != 0
    || (v7 & 0x4000000000000000) != 0
    || (uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8, v2 + v6 > *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (v7 >> 62)
    {
      sub_1002E7C9C();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002E7C28();
    swift_bridgeObjectRelease();
    uint64_t *v4 = v10;
    uint64_t v9 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v12 = (*(void *)(v9 + 24) >> 1) - v11;
  uint64_t v13 = (uint64_t)sub_100253518(&v51, (void *)(v9 + 8 * v11 + 32), v12, v5);
  if (v13 < v6) {
    goto LABEL_19;
  }
  if (v13 >= 1)
  {
    sub_1002E7918();
    uint64_t v15 = *(void *)(v14 + 16);
    BOOL v16 = __OFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
LABEL_26:
      uint64_t v24 = __CocoaSet.Iterator.next()();
      if (!v24) {
        goto LABEL_16;
      }
      unint64_t v5 = v24;
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v21 = v50;
      swift_unknownObjectRelease();
LABEL_28:
      if (!v21) {
        goto LABEL_16;
      }
      while (1)
      {
        sub_1002E7918();
        if (v3 + 1 > *(void *)(v25 + 24) >> 1)
        {
          unint64_t v5 = (unint64_t)v4;
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          sub_1002E7918();
        }
        unint64_t v26 = *(void *)(v25 + 24);
        if (v3 < (uint64_t)(v26 >> 1)) {
          break;
        }
LABEL_64:
        *(void *)(v25 + 16) = v3;
      }
      int64_t v27 = v26 >> 1;
      uint64_t v28 = v25 + 32;
      while (1)
      {
        *(void *)(v28 + 8 * v3++) = v21;
        uint64_t v21 = (void *)v51;
        uint64_t v29 = v54;
        if ((v51 & 0x8000000000000000) != 0)
        {
          uint64_t v32 = __CocoaSet.Iterator.next()();
          if (!v32) {
            goto LABEL_65;
          }
          unint64_t v5 = v32;
          sub_1001F6204(0, (unint64_t *)&unk_100586E00);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v21 = v50;
          swift_unknownObjectRelease();
          goto LABEL_40;
        }
        if (v55)
        {
          unint64_t v5 = (v55 - 1) & v55;
          unint64_t v30 = __clz(__rbit64(v55)) | (v54 << 6);
        }
        else
        {
          int64_t v33 = v54 + 1;
          if (__OFADD__(v54, 1))
          {
            __break(1u);
LABEL_88:
            sub_1002E7784();
            uint64_t v20 = v49;
LABEL_24:
            uint64_t v54 = v20;
            unint64_t v55 = v5;
            goto LABEL_28;
          }
          int64_t v34 = (unint64_t)(v53 + 64) >> 6;
          if (v33 >= v34)
          {
            sub_1002E7784();
            goto LABEL_37;
          }
          if (!*(void *)(v52 + 8 * v33))
          {
            if (v54 + 2 >= v34) {
              goto LABEL_61;
            }
            if (!*(void *)(v52 + 8 * (v54 + 2)))
            {
              if (v54 + 3 >= v34) {
                goto LABEL_62;
              }
              if (!*(void *)(v52 + 8 * (v54 + 3)))
              {
                if (v54 + 4 >= v34)
                {
                  sub_1002E7784();
                  uint64_t v29 = v40;
                  goto LABEL_37;
                }
                if (!*(void *)(v52 + 8 * (v54 + 4)))
                {
                  if (v54 + 5 >= v34)
                  {
LABEL_62:
                    sub_1002E7784();
                    uint64_t v29 = v39;
                    goto LABEL_37;
                  }
                  if (!*(void *)(v52 + 8 * (v54 + 5)))
                  {
                    int64_t v36 = v54 + 6;
                    while (v36 < v34)
                    {
                      if (*(void *)(v52 + 8 * v36++)) {
                        goto LABEL_46;
                      }
                    }
LABEL_61:
                    sub_1002E7784();
                    uint64_t v29 = v38;
                    goto LABEL_37;
                  }
                }
              }
            }
          }
LABEL_46:
          sub_1002E7A10();
          uint64_t v29 = v35;
        }
        uint64_t v21 = *(void **)(v21[6] + 8 * v30);
        uint64_t v31 = v21;
LABEL_37:
        uint64_t v54 = v29;
        unint64_t v55 = v5;
LABEL_40:
        if (!v21)
        {
LABEL_65:
          sub_1002E7918();
          *(void *)(v41 + 16) = v3;
          goto LABEL_16;
        }
        if (v3 >= v27)
        {
          sub_1002E7918();
          goto LABEL_64;
        }
      }
    }
    *(void *)(v14 + 16) = v17;
  }
  if (v13 != v12)
  {
LABEL_16:
    sub_100206FA0();
    specialized Array._endMutation()();
    return;
  }
LABEL_20:
  sub_1002E7918();
  uint64_t v3 = *(void *)(v18 + 16);
  unint64_t v19 = v51;
  uint64_t v20 = v54;
  uint64_t v21 = (void *)v55;
  if ((v51 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
  if (v55)
  {
    unint64_t v5 = (v55 - 1) & v55;
    unint64_t v22 = __clz(__rbit64(v55)) | (v54 << 6);
LABEL_23:
    uint64_t v21 = *(void **)(*(void *)(v19 + 48) + 8 * v22);
    unint64_t v23 = v21;
    goto LABEL_24;
  }
  int64_t v42 = v54 + 1;
  if (!__OFADD__(v54, 1))
  {
    int64_t v43 = (unint64_t)(v53 + 64) >> 6;
    if (v42 >= v43)
    {
      sub_1002E7784();
      goto LABEL_24;
    }
    if (*(void *)(v52 + 8 * v42)) {
      goto LABEL_70;
    }
    if (v54 + 2 < v43)
    {
      if (*(void *)(v52 + 8 * (v54 + 2))) {
        goto LABEL_70;
      }
      if (v54 + 3 >= v43) {
        goto LABEL_86;
      }
      if (*(void *)(v52 + 8 * (v54 + 3))) {
        goto LABEL_70;
      }
      if (v54 + 4 >= v43) {
        goto LABEL_88;
      }
      if (*(void *)(v52 + 8 * (v54 + 4))) {
        goto LABEL_70;
      }
      if (v54 + 5 >= v43)
      {
LABEL_86:
        sub_1002E7784();
        uint64_t v20 = v48;
        goto LABEL_24;
      }
      if (*(void *)(v52 + 8 * (v54 + 5)))
      {
LABEL_70:
        sub_1002E7A10();
        uint64_t v20 = v44;
        goto LABEL_23;
      }
      int64_t v45 = v54 + 6;
      while (v45 < v43)
      {
        if (*(void *)(v52 + 8 * v45++)) {
          goto LABEL_70;
        }
      }
    }
    sub_1002E7784();
    uint64_t v20 = v47;
    goto LABEL_24;
  }
  __break(1u);
}

void sub_1002D1EE8()
{
  sub_1002E79A4();
  unint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100254618();
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v0 >> 62)
  {
    sub_1002E7C7C();
    _CocoaArrayWrapper.endIndex.getter();
    sub_1002E7CE4();
  }
  else
  {
    uint64_t v1 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v1, v4))
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v5 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v0 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v1 + v4 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_26;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1002E7C28();
    swift_bridgeObjectRelease();
    uint64_t *v0 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v9 = sub_1002E771C(v7);
    sub_1002E5B14(v9, v10, v3);
    if (v11 >= v4) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    sub_1002E7C9C();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    sub_1002E78A4();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  sub_1002E7968();
  specialized Array._endMutation()();
}

void sub_1002D204C()
{
}

uint64_t sub_1002D2064(uint64_t a1)
{
  return sub_1002D20A0(a1, type metadata accessor for AnyAudioInterruptionProvider, &unk_100588A08, &unk_100588A00, sub_1002E6D28);
}

#error "1002D21B4: call analysis failed (funcsize=123)"

uint64_t sub_1002D228C(uint64_t a1)
{
  return sub_1002D20A0(a1, type metadata accessor for AVAudioSessionInterruptionProvider, &unk_100588A18, &unk_100588A10, sub_1002E6D74);
}

void sub_1002D22C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v30;
  a26 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 + 16);
  if ((unint64_t)*v26 >> 62)
  {
    sub_1002E7C5C();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v36 = v35 + v34;
  if (__OFADD__(v35, v34))
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v37 = *v26;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v26 = v37;
  uint64_t v39 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v37 & 0x8000000000000000) == 0
    && (v37 & 0x4000000000000000) == 0)
  {
    uint64_t v40 = v37 & 0xFFFFFFFFFFFFFF8;
    if (v36 <= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_14;
    }
    uint64_t v39 = 1;
  }
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v27 <= v36) {
    uint64_t v27 = v36;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  swift_bridgeObjectRelease();
  uint64_t *v26 = v41;
  uint64_t v40 = v41 & 0xFFFFFFFFFFFFFF8;
LABEL_14:
  uint64_t v42 = *(void *)(v40 + 16);
  uint64_t v43 = (*(void *)(v40 + 24) >> 1) - v42;
  sub_100253ED4((uint64_t)&a10, v40 + 8 * v42 + 32, v43, v33);
  if (v44 < v34)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v44 >= 1)
  {
    uint64_t v46 = *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v47 = __OFADD__(v46, v44);
    uint64_t v48 = v46 + v44;
    if (v47)
    {
      __break(1u);
      goto LABEL_57;
    }
    *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10) = v48;
  }
  if (v44 != v43)
  {
LABEL_19:
    sub_100206FA0();
    sub_100254338();
    specialized Array._endMutation()();
    return;
  }
LABEL_25:
  uint64_t v28 = *v26;
  uint64_t v36 = *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v39 = a10;
  uint64_t v43 = a11;
  uint64_t v45 = a12;
  uint64_t v27 = a13;
  if (a14)
  {
    sub_1002E7C08();
    uint64_t v51 = v50 | (v27 << 6);
    int64_t v53 = (unint64_t)(v52 + 64) >> 6;
    goto LABEL_27;
  }
LABEL_57:
  int64_t v64 = v27 + 1;
  if (__OFADD__(v27, 1)) {
    goto LABEL_75;
  }
  int64_t v53 = (unint64_t)(v45 + 64) >> 6;
  if (v64 >= v53) {
    goto LABEL_54;
  }
  if (!*(void *)(v43 + 8 * v64))
  {
    if (v27 + 2 < v53)
    {
      if (*(void *)(v43 + 8 * (v27 + 2))) {
        goto LABEL_60;
      }
      if (v27 + 3 < v53)
      {
        if (*(void *)(v43 + 8 * (v27 + 3))) {
          goto LABEL_60;
        }
        if (v27 + 4 < v53)
        {
          if (*(void *)(v43 + 8 * (v27 + 4))) {
            goto LABEL_60;
          }
          if (v27 + 5 < v53)
          {
            if (*(void *)(v43 + 8 * (v27 + 5))) {
              goto LABEL_60;
            }
            int64_t v65 = v27 + 6;
            while (v65 < v53)
            {
              if (*(void *)(v43 + 8 * v65++)) {
                goto LABEL_60;
              }
            }
          }
        }
      }
    }
LABEL_54:
    sub_100235CD4();
    goto LABEL_19;
  }
LABEL_60:
  sub_1002E78B8();
LABEL_27:
  uint64_t v54 = *(void *)(*(void *)(v39 + 56) + 8 * v51);
  swift_retain();
  while (1)
  {
    if (v36 + 1 > *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v28 = *v26;
    uint64_t v55 = *v26 & 0xFFFFFFFFFFFFFF8;
    unint64_t v56 = *(void *)(v55 + 0x18);
    if (v36 < (uint64_t)(v56 >> 1)) {
      break;
    }
LABEL_52:
    *(void *)(v55 + 16) = v36;
  }
  uint64_t v57 = v56 >> 1;
  uint64_t v58 = v55 + 32;
  while (1)
  {
    *(void *)(v58 + 8 * v36++) = v54;
    if (v29)
    {
      sub_1002E7BF4();
      uint64_t v60 = v59 | (v27 << 6);
      goto LABEL_49;
    }
    int64_t v61 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v61 >= v53) {
      goto LABEL_53;
    }
    if (!*(void *)(v43 + 8 * v61))
    {
      if (v27 + 2 >= v53) {
        goto LABEL_53;
      }
      if (!*(void *)(v43 + 8 * (v27 + 2)))
      {
        if (v27 + 3 >= v53) {
          goto LABEL_53;
        }
        if (!*(void *)(v43 + 8 * (v27 + 3)))
        {
          if (v27 + 4 >= v53) {
            goto LABEL_53;
          }
          if (!*(void *)(v43 + 8 * (v27 + 4)))
          {
            if (v27 + 5 >= v53) {
              goto LABEL_53;
            }
            if (!*(void *)(v43 + 8 * (v27 + 5)))
            {
              int64_t v62 = v27 + 6;
              while (v62 < v53)
              {
                if (*(void *)(v43 + 8 * v62++)) {
                  goto LABEL_48;
                }
              }
LABEL_53:
              *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10) = v36;
              goto LABEL_54;
            }
          }
        }
      }
    }
LABEL_48:
    sub_1002E78B8();
LABEL_49:
    uint64_t v54 = *(void *)(*(void *)(v39 + 56) + 8 * v60);
    if (v36 >= v57)
    {
      uint64_t v28 = *v26;
      uint64_t v55 = *v26 & 0xFFFFFFFFFFFFFF8;
      swift_retain();
      goto LABEL_52;
    }
    swift_retain();
  }
  __break(1u);
LABEL_75:
  __break(1u);
}

void sub_1002D2688()
{
}

void sub_1002D26A0()
{
  sub_1002E79A4();
  sub_1002545EC();
  if (v3 >> 62)
  {
    sub_1002E7C5C();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v5, v4))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 + v4 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v10 = sub_1002E771C(v8);
    v0(v10);
    if (v11 >= v4) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    sub_1002E78A4();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  sub_1002E7968();
  specialized Array._endMutation()();
}

void sub_1002D2838()
{
}

void sub_1002D2850()
{
}

void sub_1002D2868()
{
}

void sub_1002D2880(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_1003A47C8();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_1002E7B84();
  if (v7 != v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v9 = sub_1002E7B78();
  sub_1002DE78C(v9, v10, v11);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return;
  }
  uint64_t v12 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v12, v2);
  uint64_t v13 = v12 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1002D294C()
{
}

void sub_1002D2964()
{
}

void sub_1002D2984()
{
  sub_1002E79A4();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *v0;
  uint64_t v5 = *(void *)(*v0 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v2;
  uint64_t v7 = v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 + v3 > *(void *)(v4 + 24) >> 1) {
    uint64_t v4 = v6();
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_1002E7B84();
  if (v8 != v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = sub_1002E7B78();
  sub_1002DF148(v10, v11);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v0 = v4;
    sub_1002E7968();
    return;
  }
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v12, v3);
  uint64_t v13 = v12 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

id sub_1002D2A64(uint64_t a1)
{
  return [v1 callCountWithPredicate:a1];
}

uint64_t sub_1002D2A78(uint64_t a1)
{
  id v2 = [v1 callsWithPredicate:a1 limit:0 offset:0 batchSize:0];
  sub_1001F6204(0, &qword_100585038);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100250304();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1002D2B04(uint64_t a1, uint64_t a2)
{
  id v3 = [v2 callsWithPredicate:a1 limit:a2 offset:0 batchSize:0];
  sub_1001F6204(0, &qword_100585038);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100250304();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

id sub_1002D2B90(uint64_t a1)
{
  return sub_1002D2A64(a1);
}

uint64_t sub_1002D2BB4(uint64_t a1)
{
  return sub_1002D2A78(a1);
}

uint64_t sub_1002D2BD8(uint64_t a1, uint64_t a2)
{
  return sub_1002D2B04(a1, a2);
}

uint64_t sub_1002D2BFC()
{
  id v1 = [v0 uniqueId];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id sub_1002D2C54(void *a1)
{
  id v2 = [a1 providerForRecentCall:v1];

  return v2;
}

void sub_1002D2C8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1002E757C();
  uint64_t v25 = sub_1002E5880(v24);
  if (!v25) {
    goto LABEL_23;
  }
  if ((v25 & 0xC000000000000001) == 0)
  {
    sub_1002E4EBC(v25, (uint64_t (*)(void *))sub_1002E4FF8);
    goto LABEL_23;
  }
  sub_1002E7D38();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_20:
    swift_release();
LABEL_23:
    sub_100254544();
    return;
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
  while (1)
  {
    sub_1002E797C();
    id v26 = [a11 value];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    sub_1002E7D24();
    if (v27)
    {
      if ([a11 type] == (id)3 || objc_msgSend(a11, "type") == (id)2) {
        break;
      }
    }

LABEL_19:
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_20;
    }
  }
  uint64_t v28 = a12;
  if (*(void *)(a12 + 24) <= *(void *)(a12 + 16))
  {
    sub_1002E18D0();
    uint64_t v28 = a12;
  }
  NSObject._rawHashValue(seed:)(*(void *)(v28 + 40));
  sub_1002E77CC();
  if (!v29)
  {
    sub_1002E7868();
LABEL_18:
    sub_1002E763C(v30);
    goto LABEL_19;
  }
  sub_1002E7CFC();
  while (v32 + 1 != v33 || (v31 & 1) == 0)
  {
    sub_1002E7B10();
    if (!v29)
    {
      sub_1002E7854();
      goto LABEL_18;
    }
  }
  __break(1u);
}

void sub_1002D2E58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1002E757C();
  uint64_t v25 = sub_1002E5880(v24);
  if (!v25) {
    goto LABEL_22;
  }
  if ((v25 & 0xC000000000000001) == 0)
  {
    sub_1002E4EBC(v25, (uint64_t (*)(void *))sub_1002E5238);
    goto LABEL_22;
  }
  sub_1002E7D38();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_19:
    swift_release();
LABEL_22:
    sub_100254544();
    return;
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
  while (1)
  {
    sub_1002E797C();
    id v26 = [a11 value];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    sub_1002E7D24();
    if (v27)
    {
      id v28 = [a11 value];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v30 = [v29 destinationIdIsTemporary];

      if ((v30 & 1) == 0) {
        break;
      }
    }

LABEL_18:
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_19;
    }
  }
  uint64_t v31 = a12;
  if (*(void *)(a12 + 24) <= *(void *)(a12 + 16))
  {
    sub_1002E18D0();
    uint64_t v31 = a12;
  }
  NSObject._rawHashValue(seed:)(*(void *)(v31 + 40));
  sub_1002E77CC();
  if (!v32)
  {
    sub_1002E7868();
LABEL_17:
    sub_1002E763C(v33);
    goto LABEL_18;
  }
  sub_1002E7CFC();
  while (v35 + 1 != v36 || (v34 & 1) == 0)
  {
    sub_1002E7B10();
    if (!v32)
    {
      sub_1002E7854();
      goto LABEL_17;
    }
  }
  __break(1u);
}

uint64_t sub_1002D3058@<X0>(uint64_t a1@<X8>)
{
  return sub_1002D3414((SEL *)&selRef_date, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_1002D30AC()
{
  return sub_1002D2BFC();
}

id sub_1002D30D0()
{
  return sub_1002D30F4();
}

id sub_1002D30F4()
{
  id v1 = [v0 interaction];

  return v1;
}

unint64_t sub_1002D312C()
{
  return (unint64_t)sub_1002D3154() & 1;
}

id sub_1002D3154()
{
  if (sub_1002DDE00()) {
    return [v0 callerIdIsBlocked];
  }
  else {
    return 0;
  }
}

uint64_t sub_1002D3188()
{
  return sub_1002D31AC();
}

uint64_t sub_1002D31AC()
{
  id v1 = [v0 notificationThreadIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_1002D3204()
{
  return sub_1002D3228();
}

uint64_t sub_1002D3228()
{
  return sub_1001F612C(v0, (SEL *)&selRef_callerNetworkName);
}

uint64_t sub_1002D324C()
{
  return sub_1002D3270();
}

uint64_t sub_1002D3270()
{
  return sub_1001F612C(v0, (SEL *)&selRef_isoCountryCode);
}

unint64_t sub_1002D3294()
{
  return (unint64_t)sub_1002D32BC() & 1;
}

id sub_1002D32BC()
{
  return [v0 isJunk];
}

uint64_t sub_1002D32E0()
{
  return sub_1002D3304();
}

uint64_t sub_1002D3304()
{
  return sub_1001F612C(v0, (SEL *)&selRef_junkIdentificationCategory);
}

#error "1002D333C: call analysis failed (funcsize=9)"

#error "1002D3360: call analysis failed (funcsize=9)"

#error "1002D3384: call analysis failed (funcsize=9)"

uint64_t sub_1002D3394()
{
  return sub_1002D33B8();
}

uint64_t sub_1002D33B8()
{
  return sub_1002E5880(v0);
}

uint64_t sub_1002D33C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1002D3414((SEL *)&selRef_participantGroupUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t sub_1002D3414@<X0>(SEL *a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  id v8 = [v4 *a1];
  if (v8)
  {
    BOOL v9 = v8;
    a2();

    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  uint64_t v11 = a3(0);

  return sub_1001F0530(a4, v10, 1, v11);
}

id sub_1002D34A8()
{
  return sub_1002D34CC();
}

id sub_1002D34CC()
{
  return [v0 mediaType];
}

id sub_1002D34DC(void *a1)
{
  return sub_1002D2C54(a1);
}

uint64_t sub_1002D3500()
{
  unint64_t v0 = sub_1002D3538();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

unint64_t sub_1002D3538()
{
  id v1 = [v0 filteredOutReason];
  uint64_t v2 = v1;
  if (v1)
  {
    unsigned int v3 = [v1 intValue];

    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_1002D35B4()
{
  return sub_1002D35D8();
}

uint64_t sub_1002D35D8()
{
  return sub_1001F612C(v0, (SEL *)&selRef_localizedBlockedByExtensionName);
}

unint64_t sub_1002D35FC(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050B090, v3);
  sub_1002544EC();
  if (v1 >= 3) {
    return 3;
  }
  else {
    return v1;
  }
}

BOOL sub_1002D3640()
{
  unint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  unint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, 0);

  return AppBooleanValue == 0;
}

uint64_t sub_1002D36CC@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType);
  uint64_t v4 = type metadata accessor for BadgeCountCategory();
  sub_10020233C();
  uint64_t v6 = (unsigned int *)&enum case for BadgeCountCategory.missedTelephonyCalls(_:);
  if (!v3) {
    uint64_t v6 = (unsigned int *)&enum case for BadgeCountCategory.missedFaceTimeCalls(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(a1, *v6, v4);

  return sub_1001F0530(a1, 0, 1, v4);
}

id sub_1002D3770()
{
  return [self supportsDisplayingFaceTimeAudioCalls];
}

void sub_1002D379C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100235BE8();
  URL._bridgeToObjectiveC()(v7);
  BOOL v9 = v8;
  char v10 = TUOpenURLWithError();

  id v27 = 0;
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = qword_100583A38;
    id v12 = 0;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1001F5F88(v13, (uint64_t)qword_100594CA0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v0, v2, v3);
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_1002E733C((unint64_t *)&qword_1005888D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_1002344D8(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = sub_1002E79F8();
      v21(v20);
      *(_WORD *)(v16 + 12) = 2112;
      swift_beginAccess();
      id v22 = v27;
      if (v27) {
        id v23 = v27;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v22;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to open URL %s#. Error %@", (uint8_t *)v16, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
      uint64_t v24 = sub_1002E79F8();
      v25(v24);
    }
  }
  sub_1001FCC08();
}

void sub_1002D3AB8()
{
  sub_1002E79A4();
  uint64_t v0 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v0 - 8);
  sub_1001F2514();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_100235CD4();
  sub_10025E234(v11, v12, (uint64_t *)&unk_100585580);
  if (sub_1001F758C(v3, 1, v4) == 1)
  {
    sub_100235804(v3, (uint64_t *)&unk_100585580);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v3, v4);
    id v13 = [self sharedInstance];
    id v14 = [v13 conversationManager];

    id v15 = [v14 activatedConversationLinks];
    sub_1001F6204(0, &qword_100587A90);
    sub_100210D5C((unint64_t *)&unk_100587A98, &qword_100587A90);
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v17);
    *(void *)&v18[-16] = v10;
    sub_1002D40E8(sub_1002E731C, (uint64_t)&v18[-32], v16);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  }
  sub_1002E7968();
}

uint64_t sub_1002D3CFC(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned __int8 v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_1005888C0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v29 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v29 - v17;
  id v19 = [*a1 groupUUID];
  if (v19)
  {
    uint64_t v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
  }
  sub_1001F0530((uint64_t)v18, v21, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a2, v4);
  sub_1001F0530((uint64_t)v16, 0, 1, v4);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10025E234((uint64_t)v18, (uint64_t)v9, (uint64_t *)&unk_100585580);
  sub_10025E234((uint64_t)v16, v22, (uint64_t *)&unk_100585580);
  if (sub_1001F758C((uint64_t)v9, 1, v4) == 1)
  {
    sub_100235804((uint64_t)v16, (uint64_t *)&unk_100585580);
    sub_100235804((uint64_t)v18, (uint64_t *)&unk_100585580);
    int v23 = sub_1001F758C(v22, 1, v4);
    if (v23 == 1) {
      uint64_t v24 = (uint64_t *)&unk_100585580;
    }
    else {
      uint64_t v24 = (uint64_t *)&unk_1005888C0;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    sub_10025E234((uint64_t)v9, (uint64_t)v13, (uint64_t *)&unk_100585580);
    if (sub_1001F758C(v22, 1, v4) == 1)
    {
      sub_100235804((uint64_t)v16, (uint64_t *)&unk_100585580);
      sub_100235804((uint64_t)v18, (uint64_t *)&unk_100585580);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      char v25 = 0;
      uint64_t v24 = (uint64_t *)&unk_1005888C0;
    }
    else
    {
      uint64_t v26 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v22, v4);
      sub_1002E733C((unint64_t *)&qword_1005858A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      uint64_t v24 = (uint64_t *)&unk_100585580;
      sub_100235804((uint64_t)v16, (uint64_t *)&unk_100585580);
      sub_100235804((uint64_t)v18, (uint64_t *)&unk_100585580);
      v27(v13, v4);
    }
  }
  sub_100235804((uint64_t)v9, v24);
  return v25 & 1;
}

void sub_1002D40E8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, &qword_100587A90);
    sub_100210D5C((unint64_t *)&unk_100587A98, &qword_100587A90);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
    goto LABEL_24;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 < v22)
    {
      unint64_t v18 = *(void *)(v23 + 8 * v16);
      if (v18)
      {
LABEL_23:
        uint64_t v14 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
LABEL_24:
        id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
        if (v17)
        {
          while (1)
          {
            id v29 = v17;
            char v20 = a1(&v29);
            if (v4) {
              break;
            }
            if (v20) {
              goto LABEL_36;
            }

            int64_t v8 = v16;
            unint64_t v9 = v14;
            if ((v5 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1001F6204(0, &qword_100587A90);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v17 = v29;
              swift_unknownObjectRelease();
              int64_t v16 = v8;
              uint64_t v14 = v9;
              if (v17) {
                continue;
              }
            }
            goto LABEL_36;
          }
        }
        goto LABEL_36;
      }
      int64_t v19 = v8 + 2;
      if (v8 + 2 < v22)
      {
        unint64_t v18 = *(void *)(v23 + 8 * v19);
        if (v18) {
          goto LABEL_22;
        }
        int64_t v19 = v8 + 3;
        if (v8 + 3 >= v22) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v23 + 8 * v19);
        if (v18)
        {
LABEL_22:
          int64_t v16 = v19;
          goto LABEL_23;
        }
        int64_t v19 = v8 + 4;
        if (v8 + 4 < v22)
        {
          unint64_t v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v16 = v8 + 5;
          if (v8 + 5 < v22)
          {
            unint64_t v18 = *(void *)(v23 + 8 * v16);
            if (!v18)
            {
              int64_t v21 = v8 + 6;
              while (v21 < v22)
              {
                unint64_t v18 = *(void *)(v23 + 8 * v21++);
                if (v18)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_23;
                }
              }
              goto LABEL_36;
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_36:
    sub_100206FA0();
    return;
  }
  __break(1u);
}

void sub_1002D4420()
{
}

void sub_1002D4444()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  int64_t v8 = (char *)&v41 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v42 = v5;
    if (qword_100583A38 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  sub_1001F5F88(v17, (uint64_t)qword_100594CA0);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    char v20 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)char v20 = 136315138;
    uint64_t v43 = sub_1002344D8(0xD00000000000001ALL, 0x8000000100485A00, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
  uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
  sub_100204074(&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v21);
  id v23 = sub_1002D9B98();
  uint64_t v24 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v22 + 24))(v23, 1, v21, v22);

  sub_100246D78(v24, (uint64_t)v44);
  swift_bridgeObjectRelease();
  uint64_t v25 = v45;
  if (v45)
  {
    uint64_t v26 = v46;
    sub_100204074(v44, v45);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    sub_1002018DC((uint64_t)v44);
    uint64_t v27 = type metadata accessor for Date();
    if (sub_1001F758C((uint64_t)v8, 1, v27) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v10, v8, v27);
      goto LABEL_10;
    }
  }
  else
  {
    sub_100235804((uint64_t)v44, (uint64_t *)&unk_100588750);
    uint64_t v28 = type metadata accessor for Date();
    sub_1001F0530((uint64_t)v8, 1, 1, v28);
  }
  Date.init()();
  sub_100235804((uint64_t)v8, &qword_100584B40);
LABEL_10:
  uint64_t v29 = type metadata accessor for Date();
  sub_1001F0530((uint64_t)v10, 0, 1, v29);
  uint64_t v30 = (uint64_t)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  swift_beginAccess();
  sub_10025E1D8((uint64_t)v10, v30, &qword_100584B40);
  swift_endAccess();
  uint64_t v31 = v1;
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v44[0] = v41;
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v36 = (uint64_t)v42;
    sub_10025E234(v30, (uint64_t)v42, &qword_100584B40);
    uint64_t v37 = sub_1001FD134(v36);
    unint64_t v39 = v38;
    sub_100235804(v36, &qword_100584B40);
    uint64_t v43 = sub_1002344D8(v37, v39, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2112;
    uint64_t v43 = (uint64_t)v31;
    uint64_t v40 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v35 = v31;

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Most recent call date is now %s for notification provider %@", (uint8_t *)v34, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1002D4AB8()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  type metadata accessor for URL();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1001FCC88();
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v4 - 8);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (char *)Strong;
    sub_10020ED28((uint64_t)v2, (uint64_t)v40);
    sub_1001F081C(&qword_10058C0E0);
    sub_1001F6204(0, &qword_100585038);
    if (swift_dynamicCast())
    {
      uint64_t v10 = v41;
      uint64_t v11 = *(uint64_t (**)(uint64_t))&v9[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
      unint64_t v39 = v41;
      if (v11)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v2[3];
        uint64_t v14 = v2[4];
        sub_100204074(v2, v13);
        unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 112);
        swift_retain();
        uint64_t v16 = v13;
        uint64_t v9 = v12;
        v15(v16, v14);
        uint64_t v17 = (void *)v11(v7);
        uint64_t v10 = v39;
        sub_100208490((uint64_t)v11);
        sub_100235804(v7, (uint64_t *)&unk_100585580);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager;
      id v19 = *(id *)&v9[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager];
      id v20 = sub_1002D4FAC(v19, v17);

      if (v20)
      {
        uint64_t v21 = *(void (**)(uint64_t))&v9[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL];
        swift_retain();
        id v22 = [v20 URL];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v21(v0);
        swift_release();
        sub_1001F7664();
        v23();
        if (qword_100583A38 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        sub_1001F5F88(v24, (uint64_t)qword_100594CA0);
        id v25 = v20;
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 138412290;
          v40[0] = v25;
          id v30 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v29 = v20;

          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Performed join conversation request: %@", v28, 0xCu);
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();

          goto LABEL_17;
        }
      }
      else
      {
        id v31 = *(id *)&v9[v18];
        sub_1002D51B0();
        os_log_type_t v33 = v32;

        if (v33)
        {
          uint64_t v34 = *(void **)&v9[v18];
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = v33;
          v40[4] = sub_1002E7314;
          v40[5] = v35;
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 1107296256;
          v40[2] = sub_1003629D8;
          v40[3] = &unk_100512F08;
          uint64_t v36 = _Block_copy(v40);
          id v37 = v34;
          id v38 = v33;
          swift_release();
          [v37 launchAppForDialRequest:v38 completion:v36];

          _Block_release(v36);
          goto LABEL_17;
        }
      }
      goto LABEL_17;
    }
  }
LABEL_17:
  sub_1001FCC08();
}

id sub_1002D4FAC(void *a1, void *a2)
{
  id v4 = [a1 providerForRecentCall:v2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if (![v4 isFaceTimeProvider])
  {

    return 0;
  }
  uint64_t v6 = sub_1002E5880(v2);
  id v7 = (id)v6;
  if (!v6)
  {

    return v7;
  }
  if (sub_10039E66C(v6) <= 1)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1002D09F0((unint64_t)v7);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10024E278(v9);
  if (!a2)
  {
LABEL_17:
    id v21 = objc_allocWithZone((Class)TUJoinConversationRequest);
    id v7 = sub_1002DE088(v10, (uint64_t)&_swiftEmptySetSingleton, 23);
    goto LABEL_18;
  }
  id v11 = a2;
  id v12 = [v11 originatorHandle];
  if (!v12)
  {
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v13 = v12;
  if (([v11 isLocallyCreated] & 1) == 0)
  {
    id v14 = v13;
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_1002D0E9C(v15, v14);
    char v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {

      id v11 = v14;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
  id v18 = objc_allocWithZone((Class)TUJoinConversationRequest);
  sub_1002DDF30();
  id v7 = v19;

LABEL_18:
  if (v7)
  {
    [v7 setWantsStagingArea:1];
    id v22 = v7;
    [v22 setVideoEnabled:1];
  }
  swift_bridgeObjectRelease();
  return v7;
}

void sub_1002D51B0()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  id v4 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1001F2514();
  uint64_t v50 = v10 - v9;
  uint64_t v11 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v11 - 8);
  sub_100235BE8();
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1001F5F88(v12, (uint64_t)qword_100594CA0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v49 = (uint64_t)v2;
    uint64_t v15 = v1;
    uint64_t v16 = v5;
    uint64_t v17 = v7;
    id v18 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    uint64_t v52 = sub_1002344D8(0xD000000000000012, 0x8000000100485980, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v18, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    uint64_t v7 = v17;
    uint64_t v5 = v16;
    uint64_t v1 = v15;
    uint64_t v2 = (void *)v49;
    sub_1001F63CC();
  }

  id v19 = [v4 providerForRecentCall:v2];
  if (v19)
  {
    os_log_type_t v27 = v19;
    sub_1002D2C8C((int)v19, v20, v21, v22, v23, v24, v25, v26, v44, v45, v47, v49, v50, v52, v53[0], v53[1], v53[2], v53[3], v53[4],
      v53[5],
      v53[6],
      v53[7],
      v53[8],
      v53[9]);
    if (v28 && (uint64_t v29 = (void *)sub_100246C34(v28), swift_bridgeObjectRelease(), v29))
    {
      id v30 = [objc_allocWithZone((Class)TUDialRequest) initWithProvider:v27];
      if ([v29 type] == (id)2)
      {
        LOBYTE(v53[0]) = 0;
        NSString v31 = [v29 value];
        if (!v31)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        sub_1001F612C(v2, (SEL *)&selRef_isoCountryCode);
        uint64_t v48 = v7;
        if (v32)
        {
          NSString v46 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v46 = 0;
        }
        sub_1001F081C(&qword_100584B90);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10048F550;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v35;
        *(void *)(inited + 72) = &type metadata for Bool;
        *(unsigned char *)(inited + 48) = 1;
        Dictionary.init(dictionaryLiteral:)();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v37 = (id)TUNumberToDial();

        uint64_t v7 = v48;
        if (v37)
        {
          [v30 setDialAssisted:LOBYTE(v53[0])];
          sub_1001F612C(v2, (SEL *)&selRef_isoCountryCode);
          if (v38)
          {
            NSString v39 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v39 = 0;
          }
          id v40 = [self normalizedPhoneNumberHandleForValue:v37 isoCountryCode:v39];

          [v30 setHandle:v40];
        }
      }
      else
      {
        id v33 = sub_1002DD8A0();
        [v30 setHandle:v33];
      }
      Class v41 = (Class)[v2 outgoingLocalParticipantUUID];
      if (v41)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v51, v5);
        sub_1001F0530(v1, 0, 1, v5);
        if (sub_1001F758C(v1, 1, v5) == 1)
        {
          Class v41 = 0;
        }
        else
        {
          Class v41 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v42 = sub_100235CD4();
          v43(v42);
        }
      }
      else
      {
        sub_1001F0530(v1, 1, 1, v5);
      }
      [v30 setLocalSenderIdentityAccountUUID:v41];

      [v30 setPerformDialAssist:0];
      [v30 setPerformLocalDialAssist:0];
      [v30 setTtyType:sub_1002DDEC8()];
      objc_msgSend(v30, "setVideo:", objc_msgSend(v2, "mediaType") == (id)2);
      [v30 setOriginatingUIType:8];
    }
    else
    {
    }
  }
  sub_1001FCC08();
}

void sub_1002D57E0(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1001F5F88(v3, (uint64_t)qword_100594CA0);
    id v4 = a2;
    swift_errorRetain();
    id v5 = v4;
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412546;
      id v9 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v5;

      *(_WORD *)(v7 + 12) = 2112;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v8[1] = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Performing dial request: %@ ended in error: %@", (uint8_t *)v7, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1001F5F88(v10, (uint64_t)qword_100594CA0);
    os_log_t oslog = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t v15 = oslog;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v14 = oslog;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Performed dial request: %@", v13, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_1002D5B84()
{
  uint64_t v1 = (void (**)(uint64_t))(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
  void *v1 = sub_1002DB078;
  v1[1] = 0;
  return sub_100208490(v2);
}

void sub_1002D5BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v26;
  a26 = v27;
  uint64_t v29 = v28;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v31 = (void *)Strong;
    if (v29 != 4)
    {
      if (qword_100583A38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_1001F5F88(v32, (uint64_t)qword_100594CA0);
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        a11 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        uint64_t v36 = String.init<A>(reflecting:)();
        sub_1002344D8(v36, v37, &a11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "InCallService changed to non-running state (%s); updating posted notifications",
          v35,
          0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }

      sub_1002D5D4C();
    }
  }
  sub_100254338();
}

void sub_1002D5D4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v99 = (char *)v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  void *v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    if (qword_100583A38 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_1001F5F88(v13, (uint64_t)qword_100594CA0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v100 = v5;
  if (v17)
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    v113[0] = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    *(void *)&v112[0] = sub_1002344D8(0xD00000000000001BLL, 0x8000000100485860, v113);
    uint64_t v5 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  *(void *)(swift_allocObject() + 16) = v1;
  id v19 = v1;
  sub_1002518B8();
  swift_release();
  uint64_t v20 = (uint64_t)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  swift_beginAccess();
  sub_10025E234(v20, (uint64_t)v4, &qword_100584B40);
  if (sub_1001F758C((uint64_t)v4, 1, v5) == 1)
  {
    sub_100235804((uint64_t)v4, &qword_100584B40);
    int v21 = v19;
    int v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int v24 = (uint8_t *)swift_slowAlloc();
      int v25 = (void *)swift_slowAlloc();
      *(_DWORD *)int v24 = 138412290;
      v113[0] = (uint64_t)v21;
      uint64_t v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Could not retrieve date of most recent call for notification provider %@", v24, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      int v22 = v21;
    }

    sub_1002D4444();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v99, v4, v5);
    uint64_t v116 = _swiftEmptyArrayStorage;
    uint64_t v27 = *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
    uint64_t v28 = *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
    double v108 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource];
    sub_100204074(&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v27);
    id v29 = sub_1002D9E40();
    uint64_t v30 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v28 + 16))(v29, v27, v28);

    double v107 = v19;
    uint64_t v31 = sub_1002D11A0(v30, v107);
    uint64_t v32 = *(void *)(v31 + 16);
    uint64_t v105 = v14;
    if (v32)
    {
      swift_bridgeObjectRetain();
      sub_1002D2984();
      uint64_t v33 = *(void *)(v31 + 16);
      if (v33)
      {
        *(void *)&v112[0] = _swiftEmptyArrayStorage;
        sub_1002E3EC4();
        uint64_t v34 = v31 + 32;
        uint64_t v35 = *(void **)&v112[0];
        do
        {
          sub_10020ED28(v34, (uint64_t)v113);
          uint64_t v36 = v114;
          uint64_t v37 = v115;
          sub_100204074(v113, v114);
          uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
          uint64_t v40 = v39;
          sub_1002018DC((uint64_t)v113);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002E3EC4();
            uint64_t v35 = *(void **)&v112[0];
          }
          unint64_t v41 = v35[2];
          if (v41 >= v35[3] >> 1)
          {
            sub_1002E3EC4();
            uint64_t v35 = *(void **)&v112[0];
          }
          _OWORD v35[2] = v41 + 1;
          uint64_t v42 = &v35[2 * v41];
          v42[4] = v38;
          void v42[5] = v40;
          v34 += 40;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = _swiftEmptyArrayStorage;
      }
      uint64_t v43 = v107;
      uint64_t v44 = &v107[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers];
      swift_beginAccess();
      uint64_t v5 = v100;
      if (*(void *)(*(void *)v44 + 16))
      {
        uint64_t v45 = v35[2];
        if (v45)
        {
          swift_bridgeObjectRetain();
          NSString v46 = v35 + 5;
          do
          {
            uint64_t v47 = *(v46 - 1);
            uint64_t v48 = *v46;
            swift_bridgeObjectRetain();
            sub_100377734(v47, v48);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v46 += 2;
            --v45;
          }
          while (v45);
          swift_bridgeObjectRelease();
          uint64_t v5 = v100;
        }
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = v107;
    }
    uint64_t v49 = *((void *)v108 + 3);
    uint64_t v50 = *((void *)v108 + 4);
    sub_100204074(v108, v49);
    uint64_t v51 = v99;
    id v52 = sub_1002D9EF0();
    uint64_t v53 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v50 + 16))(v52, v49, v50);

    __chkstk_darwin(v54);
    v97[-2] = v51;
    v97[-1] = v43;
    uint64_t v55 = (char *)sub_1002D1464((uint64_t)sub_1002E728C, &v97[-4], v53);
    unint64_t v56 = v43;
    swift_bridgeObjectRetain_n();
    uint64_t v57 = v56;
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    uint64_t v106 = v57;
    if (v60)
    {
      uint64_t v61 = swift_slowAlloc();
      int64_t v62 = (void *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412546;
      *(void *)&v112[0] = v57;
      uint64_t v63 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v62 = v106;

      *(_WORD *)(v61 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1001F081C(&qword_10058C0E0);
      uint64_t v64 = Array.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      *(void *)&v112[0] = sub_1002344D8(v64, v66, v113);
      uint64_t v57 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Notifiction provider %@ found missed calls %s", (uint8_t *)v61, 0x16u);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      uint64_t v5 = v100;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v67 = *((void *)v55 + 2);
    if (v67)
    {
      sub_1002D4444();
      double v108 = v55;
      uint64_t v68 = (uint64_t)(v55 + 32);
      do
      {
        sub_10020ED28(v68, (uint64_t)v113);
        sub_10020ED28((uint64_t)v113, (uint64_t)v112);
        sub_1001F081C(&qword_10058C0E0);
        sub_1001F6204(0, &qword_100585038);
        if ((swift_dynamicCast() & 1) == 0
          || (v69 = v109, unint64_t v70 = sub_1002D3538(), v69, (v70 & 0x1FFFFFFFFLL) != 4))
        {
          uint64_t v71 = v114;
          uint64_t v72 = v115;
          sub_100204074(v113, v114);
          uint64_t v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);

          if (v73)
          {
            sub_10020ED28((uint64_t)v113, (uint64_t)v112);
            uint64_t v74 = v116;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1003A4DF4();
              uint64_t v74 = v81;
            }
            unint64_t v75 = v74[2];
            if (v75 >= v74[3] >> 1)
            {
              sub_1003A4DF4();
              uint64_t v74 = v82;
            }
            v74[2] = v75 + 1;
            sub_100233560(v112, (uint64_t)&v74[5 * v75 + 4]);
            uint64_t v116 = v74;
          }
          else
          {
            uint64_t v76 = v114;
            uint64_t v77 = v115;
            sub_100204074(v113, v114);
            uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 16))(v76, v77);
            uint64_t v80 = v79;
            swift_beginAccess();
            sub_1002DFB58((uint64_t *)&v109, v78, v80);
            swift_endAccess();
            swift_bridgeObjectRelease();
          }
        }
        sub_1002018DC((uint64_t)v113);
        v68 += 40;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
      uint64_t v5 = v100;
      uint64_t v57 = v106;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v84 = v116[2];
    if (v84)
    {
      double v85 = &v57[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
      v97[1] = v116;
      uint64_t v86 = (uint64_t)(v116 + 4);
      double v103 = &v110;
      *(void *)&long long v83 = 138412546;
      long long v102 = v83;
      uint64_t v101 = (char *)&type metadata for Any + 8;
      double v104 = &v57[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
      do
      {
        sub_10020ED28(v86, (uint64_t)v113);
        id v87 = sub_1002D721C((uint64_t)v113);
        sub_10020ED28((uint64_t)v113, (uint64_t)v112);
        id v88 = v87;
        uint64_t v89 = (char *)Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled((os_log_t)v89, v90))
        {
          uint64_t v91 = swift_slowAlloc();
          char v92 = (void *)swift_slowAlloc();
          double v108 = (char *)swift_slowAlloc();
          uint64_t v111 = v108;
          *(_DWORD *)uint64_t v91 = v102;
          double v107 = v89;
          id v109 = v88;
          id v93 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v92 = v88;

          *(_WORD *)(v91 + 12) = 2080;
          sub_10020ED28((uint64_t)v112, (uint64_t)&v109);
          sub_1001F081C(&qword_10058C0E0);
          uint64_t v94 = String.init<A>(reflecting:)();
          id v109 = (id)sub_1002344D8(v94, v95, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002018DC((uint64_t)v112);
          uint64_t v89 = v107;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v107, v90, "Adding notification request %@ for missed call %s", (uint8_t *)v91, 0x16u);
          sub_1001F081C(&qword_100585900);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          double v85 = v104;
          swift_slowDealloc();
        }
        else
        {

          sub_1002018DC((uint64_t)v112);
        }

        swift_beginAccess();
        unsigned __int8 v96 = *(void (**)(id))v85;
        if (*(void *)v85)
        {
          swift_endAccess();
          swift_retain();
          v96(v88);
          sub_100208490((uint64_t)v96);

          sub_1002018DC((uint64_t)v113);
        }
        else
        {
          sub_1002018DC((uint64_t)v113);
          swift_endAccess();
        }
        v86 += 40;
        --v84;
      }
      while (v84);
      swift_bridgeObjectRelease();
      uint64_t v5 = v100;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    [self _resetCache];
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v5);
  }
}

void sub_1002D6D44()
{
  uint64_t v1 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callInteractionManager;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)CHCallInteractionManager) init];
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)TUCallProviderManager) init];
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers] = &_swiftEmptySetSingleton;
  uint64_t v3 = (uint64_t)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  uint64_t v4 = type metadata accessor for Date();
  sub_1001F0530(v3, 1, 1, v4);
  uint64_t v5 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_contactStore];
  id v6 = [self storeWithOptions:3];
  *((void *)v5 + 3) = sub_1001F6204(0, &qword_1005889D0);
  *((void *)v5 + 4) = &off_10050C680;
  *(void *)uint64_t v5 = v6;
  uint64_t v7 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  uint64_t v8 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v11 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_replace];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  id v12 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_removeNotification];
  *(void *)id v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1002D6F00(void *a1)
{
  id v3 = [*(id *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager) providerForRecentCall:a1];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  id v5 = [objc_allocWithZone((Class)CNContactStoreConfiguration) init];
  objc_msgSend(v5, "setAssumedIdentity:", objc_msgSend(v4, "assumedIdentity"));
  swift_unknownObjectRelease();
  id v6 = [objc_allocWithZone((Class)CNContactStore) initWithConfiguration:v5];
  id v7 = [objc_allocWithZone((Class)CHContactProvider) initWithDataSource:v6];
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F560;
  *(void *)(v8 + 32) = [self descriptorForRequiredKeysForStyle:0];
  specialized Array._endMutation()();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10048F560;
  *(void *)(v9 + 32) = a1;
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100585038);
  id v10 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001F081C((uint64_t *)&unk_100587920);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = 0;
  id v13 = [v7 contactsByHandleForCalls:isa keyDescriptors:v12 error:&v19];

  id v14 = v19;
  if (!v13)
  {
    id v17 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
  sub_1001F081C(&qword_100588780);
  sub_100210D5C(&qword_100588888, (unint64_t *)&unk_1005858E0);
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v16 = v14;

  return v15;
}

id sub_1002D721C(uint64_t a1)
{
  v290 = (uint8_t *)type metadata accessor for URL();
  uint64_t v283 = *((void *)v290 - 1);
  __chkstk_darwin(v290);
  id v3 = (char *)v270 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v276 = type metadata accessor for URLQueryItem();
  uint64_t v275 = *(void *)(v276 - 8);
  __chkstk_darwin(v276);
  v281 = (char *)v270 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLComponents();
  uint64_t v273 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v282 = (char *)v270 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v7 - 8);
  v287 = (char *)v270 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1001F081C(&qword_1005878F0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v274 = (char *)v270 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v271 = (char *)v270 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v272 = (uint64_t)v270 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v280 = (uint64_t)v270 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v279 = (char *)v270 - v19;
  __chkstk_darwin(v18);
  uint64_t v289 = (uint64_t)v270 - v20;
  uint64_t v21 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v21 - 8);
  os_log_type_t v23 = (char *)v270 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
  v278 = v3;
  uint64_t v277 = v5;
  if (!v26)
  {
    uint64_t v292 = 0;
    unint64_t v32 = 0;
    uint64_t v39 = 0;
    unint64_t v41 = 0;
    uint64_t v27 = 0;
    goto LABEL_20;
  }
  uint64_t v27 = (void *)sub_100246C34(v26);
  swift_bridgeObjectRelease();
  if (!v27) {
    goto LABEL_18;
  }
  sub_10020ED28(a1, (uint64_t)v301);
  id v28 = v27;
  sub_1001F081C(&qword_10058C0E0);
  sub_1001F6204(0, &qword_100585038);
  if (!swift_dynamicCast()
    || (id v29 = (void *)v298, v30 = sub_1002D6F00((void *)v298), v29, !v30))
  {

LABEL_18:
    uint64_t v292 = 0;
    unint64_t v32 = 0;
LABEL_19:
    uint64_t v39 = 0;
    unint64_t v41 = 0;
    goto LABEL_20;
  }
  id v31 = v28;
  unint64_t v32 = sub_100223640((uint64_t)v31, v30);

  if (!v32)
  {
    swift_bridgeObjectRelease();

    uint64_t v292 = 0;
    goto LABEL_19;
  }
  if (!(v32 >> 62))
  {
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
    goto LABEL_172;
  }
  swift_bridgeObjectRetain();
  uint64_t v269 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v269)
  {
LABEL_172:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
LABEL_8:
  if ((v32 & 0xC000000000000001) != 0)
  {
    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v33 = *(id *)(v32 + 32);
  }
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  id v35 = [v34 identifier];
  uint64_t v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v32 = v36;

  id v37 = [self stringFromContact:v34 style:0];
  if (!v37)
  {
    swift_bridgeObjectRelease();

    goto LABEL_19;
  }
  uint64_t v38 = v37;
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v41 = v40;
  swift_bridgeObjectRelease();

  uint64_t v42 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0) {
    uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
  }
  if (v42) {
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v43 = *(void *)(a1 + 24);
  uint64_t v44 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v43);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44))
  {
    uint64_t v39 = (uint64_t)sub_100274858(0x44454B434F4C42, (void *)0xE700000000000000);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    unint64_t v41 = v46;
    goto LABEL_23;
  }
  if (v41)
  {
LABEL_23:
    uint64_t v47 = HIBYTE(v41) & 0xF;
    if ((v41 & 0x2000000000000000) == 0) {
      uint64_t v47 = v39 & 0xFFFFFFFFFFFFLL;
    }
    if (v47) {
      goto LABEL_29;
    }
  }
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v49 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v48);
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 48))(v48, v49);
  if (v51)
  {
    uint64_t v52 = v50;
    unint64_t v53 = v51;
    swift_bridgeObjectRelease();
    uint64_t v39 = v52;
    unint64_t v41 = v53;
  }
  else if (!v41)
  {
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v54 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0) {
    uint64_t v54 = v39 & 0xFFFFFFFFFFFFLL;
  }
  if (v54) {
    goto LABEL_50;
  }
LABEL_32:
  if (v27)
  {
    id v55 = v27;
    NSString v56 = [v55 value];
    if (!v56)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;
    if ([v55 type] == (id)2)
    {
      unint64_t v285 = v41;
      swift_bridgeObjectRelease();
      uint64_t v59 = *(void *)(a1 + 24);
      uint64_t v60 = *(void *)(a1 + 32);
      sub_100204074((void *)a1, v59);
      (*(void (**)(uint64_t, uint64_t))(v60 + 56))(v59, v60);
      if (!v61)
      {
        id v63 = (id)TUHomeCountryCode();
        if (v63)
        {
          uint64_t v64 = v63;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
      }
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unint64_t v66 = (void *)CFPhoneNumberCreate();

      if (!v66)
      {

        unint64_t v41 = v285;
        goto LABEL_50;
      }
      uint64_t String = CFPhoneNumberCreateString();
      if (!String)
      {

        swift_bridgeObjectRelease();
        unint64_t v41 = 0;
        goto LABEL_50;
      }
      uint64_t v68 = (void *)String;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v69;

      goto LABEL_47;
    }

    uint64_t v62 = String.count.getter();
    if (v62 < 1)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    unint64_t v41 = v58;
  }
LABEL_50:
  id v70 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  sub_1002D964C((void *)a1);
  NSString v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v70 setBody:v71];

  uint64_t v72 = *(void *)(a1 + 24);
  uint64_t v73 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v72);
  (*(void (**)(uint64_t, uint64_t))(v73 + 32))(v72, v73);
  NSString v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v293 = v70;
  [v70 setCategoryIdentifier:v74];

  uint64_t v75 = *(void *)(a1 + 24);
  uint64_t v76 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v75);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v76);
  uint64_t v77 = type metadata accessor for Date();
  Class isa = 0;
  if (sub_1001F758C((uint64_t)v23, 1, v77) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v77 - 8) + 8))(v23, v77);
  }
  id v79 = v293;
  [v293 setDate:isa];

  uint64_t v80 = *(void *)(a1 + 24);
  uint64_t v81 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v80);
  (*(void (**)(uint64_t, uint64_t))(v81 + 40))(v80, v81);
  NSString v82 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v79 setThreadIdentifier:v82];

  if (!v41) {
    sub_100274858(0x4E574F4E4B4E55, (void *)0xE700000000000000);
  }
  v284 = v27;
  unint64_t v285 = v41;
  swift_bridgeObjectRetain();
  NSString v83 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v79 setTitle:v83];

  uint64_t v84 = sub_1002D9AD8();
  sub_10036EEF0(v84, v85, v79);
  uint64_t v86 = *(void *)(a1 + 24);
  uint64_t v87 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v86);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v87 + 64))(v86, v87))
  {
    uint64_t v88 = *(void *)(a1 + 24);
    uint64_t v89 = *(void *)(a1 + 32);
    sub_100204074((void *)a1, v88);
    uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 72))(v88, v89);
    if (v91)
    {
      char v92 = v91;
    }
    else
    {
      uint64_t v90 = 0x554A5F454259414DLL;
      char v92 = (void *)0xEA00000000004B4ELL;
    }
    sub_100274858(v90, v92);
    swift_bridgeObjectRelease();
    NSString v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v79 setSubtitle:v93];
  }
  *(void *)&long long v298 = 0xD000000000000016;
  *((void *)&v298 + 1) = 0x8000000100485880;
  AnyHashable.init<A>(_:)();
  uint64_t v94 = *(void *)(a1 + 24);
  uint64_t v95 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v94);
  uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 16))(v94, v95);
  *((void *)&v299 + 1) = &type metadata for String;
  *(void *)&long long v298 = v96;
  *((void *)&v298 + 1) = v97;
  id v98 = [v79 userInfo];
  uint64_t v99 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v296 = v99;
  sub_1002C2704((uint64_t)&v298, (uint64_t)v301);
  Class v100 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v79 setUserInfo:v100];

  *(void *)&long long v298 = 0xD000000000000013;
  *((void *)&v298 + 1) = 0x80000001004858A0;
  AnyHashable.init<A>(_:)();
  if (v32)
  {
    *((void *)&v299 + 1) = &type metadata for String;
    *(void *)&long long v298 = v292;
    *((void *)&v298 + 1) = v32;
  }
  else
  {
    long long v298 = 0u;
    long long v299 = 0u;
  }
  unint64_t v101 = (unint64_t)v287;
  id v102 = [v79 userInfo];
  uint64_t v103 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v296 = v103;
  sub_1002C2704((uint64_t)&v298, (uint64_t)v301);
  Class v104 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v79 setUserInfo:v104];

  uint64_t v105 = *(void *)(a1 + 24);
  uint64_t v106 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v105);
  uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 80))(v105, v106);
  uint64_t v286 = a1;
  if (!v107)
  {
LABEL_65:
    sub_1001F081C((uint64_t *)&unk_100585280);
    id v109 = (void *)swift_allocObject();
    *((_OWORD *)v109 + 1) = xmmword_10048F550;
    v109[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v109[5] = v110;
LABEL_106:
    sub_10036EF54((uint64_t)v109, v79);
    sub_10020ED28(a1, (uint64_t)&v298);
    sub_1001F081C(&qword_10058C0E0);
    sub_1001F6204(0, &qword_100585038);
    if (swift_dynamicCast())
    {
      uint64_t v142 = (void *)v296;
      [v79 setShouldAuthenticateDefaultAction:sub_1002D3640()];
      [v79 setShouldBackgroundDefaultAction:1];
      unint64_t v143 = sub_1002D3538();
      LODWORD(v292) = (v143 & 0x1FFFFFFFFLL) == 2;
      if ((v143 & 0x1FFFFFFFFLL) == 2)
      {
        id v144 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v145 = swift_allocObject();
        *(_OWORD *)(v145 + 16) = xmmword_10048F550;
        *(void *)&long long v298 = v142;
        id v146 = v142;
        uint64_t v147 = String.init<A>(reflecting:)();
        uint64_t v149 = v148;
        *(void *)(v145 + 56) = &type metadata for String;
        *(void *)(v145 + 64) = sub_1001F3B08();
        *(void *)(v145 + 32) = v147;
        *(void *)(v145 + 40) = v149;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
      }
      sub_1001F0530(v289, 1, 1, (uint64_t)v290);
      uint64_t v150 = *(uint64_t (**)(unint64_t))&v294[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
      if (v150)
      {
        swift_retain();
        id v151 = [v142 participantGroupUUID];
        if (v151)
        {
          uint64_t v152 = v151;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v153 = 0;
        }
        else
        {
          uint64_t v153 = 1;
        }
        uint64_t v155 = type metadata accessor for UUID();
        sub_1001F0530(v101, v153, 1, v155);
        id v154 = (char *)v150(v101);
        sub_100208490((uint64_t)v150);
        sub_100235804(v101, (uint64_t *)&unk_100585580);
      }
      else
      {
        id v154 = 0;
      }
      uint64_t v156 = *(void **)&v294[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager];
      v294 = v154;
      id v157 = sub_1002D4FAC(v156, v154);
      if (v157)
      {
        uint64_t v158 = v157;
        id v159 = [v157 URL];
        uint64_t v160 = (uint64_t)v279;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v161 = (uint64_t)v290;
        sub_1001F0530(v160, 0, 1, (uint64_t)v290);
        uint64_t v162 = v160;
        uint64_t v163 = v289;
        sub_10025E1D8(v162, v289, &qword_1005878F0);
        uint64_t v164 = v163;
        uint64_t v165 = v280;
        sub_10025E234(v164, v280, &qword_1005878F0);
        if (sub_1001F758C(v165, 1, v161) == 1)
        {
          uint64_t v167 = 0;
        }
        else
        {
          URL._bridgeToObjectiveC()(v166);
          uint64_t v167 = v176;
          (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v165, v161);
        }
        [v79 setDefaultActionURL:v167];
      }
      else
      {
        sub_1002D51B0();
        if (v168)
        {
          id v169 = v168;
          id v170 = [v168 URL];

          if (v170)
          {
            unsigned __int8 v171 = v271;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v172 = (uint64_t)v171;
            uint64_t v173 = 0;
            uint64_t v174 = v289;
            uint64_t v175 = v272;
          }
          else
          {
            uint64_t v173 = 1;
            uint64_t v174 = v289;
            uint64_t v175 = v272;
            uint64_t v172 = (uint64_t)v271;
          }
          sub_1001F0530(v172, v173, 1, (uint64_t)v290);
          sub_1002E72AC(v172, v175);
        }
        else
        {
          uint64_t v175 = v272;
          sub_1001F0530(v272, 1, 1, (uint64_t)v290);
          uint64_t v174 = v289;
        }
        sub_10025E1D8(v175, v174, &qword_1005878F0);
        URLComponents.init()();
        uint64_t v177 = *(void *)(a1 + 24);
        uint64_t v178 = *(void *)(a1 + 32);
        sub_100204074((void *)a1, v177);
        char v179 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v178 + 128))(v156, v177, v178);
        if (v179)
        {
          unsigned int v180 = v179;
          [v179 isFaceTimeProvider];
        }
        URLComponents.scheme.setter();
        id v181 = [v142 uniqueId];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        URLQueryItem.init(name:value:)();
        swift_bridgeObjectRelease();
        uint64_t v182 = sub_1003A4958(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
        unint64_t v184 = *(void *)(v182 + 16);
        unint64_t v183 = *(void *)(v182 + 24);
        if (v184 >= v183 >> 1) {
          uint64_t v182 = sub_1003A4958(v183 > 1, v184 + 1, 1, v182);
        }
        *(void *)(v182 + 16) = v184 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v275 + 32))(v182+ ((*(unsigned __int8 *)(v275 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v275 + 80))+ *(void *)(v275 + 72) * v184, v281, v276);
        URLComponents.queryItems.setter();
        uint64_t v185 = (uint64_t)v274;
        URLComponents.url.getter();
        uint64_t v186 = (uint64_t)v290;
        if (sub_1001F758C(v185, 1, (uint64_t)v290) == 1)
        {
          v188 = 0;
        }
        else
        {
          URL._bridgeToObjectiveC()(v187);
          v188 = v189;
          (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v185, v186);
        }
        uint64_t v190 = v273;
        [v79 setDefaultActionURL:v188];

        (*(void (**)(char *, uint64_t))(v190 + 8))(v282, v277);
      }
      *(void *)&long long v296 = 0xD000000000000010;
      *((void *)&v296 + 1) = 0x80000001004858E0;
      AnyHashable.init<A>(_:)();
      uint64_t v191 = v289;
      uint64_t v192 = (uint64_t)v290;
      if (sub_1001F758C(v289, 1, (uint64_t)v290))
      {
        long long v296 = 0u;
        long long v297 = 0u;
      }
      else
      {
        uint64_t v193 = v283;
        uint64_t v194 = v278;
        (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v278, v191, v192);
        uint64_t v195 = URL.absoluteString.getter();
        uint64_t v197 = v196;
        (*(void (**)(char *, uint64_t))(v193 + 8))(v194, v192);
        *((void *)&v297 + 1) = &type metadata for String;
        *(void *)&long long v296 = v195;
        *((void *)&v296 + 1) = v197;
      }
      id v198 = [v79 userInfo];
      uint64_t v199 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v295 = v199;
      sub_1002C2704((uint64_t)&v296, (uint64_t)&v298);
      Class v200 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v79 setUserInfo:v200];

      sub_100235804(v191, &qword_1005878F0);
    }
    else
    {
      LODWORD(v292) = 0;
    }
    uint64_t v201 = *(void *)(a1 + 24);
    uint64_t v202 = *(void *)(a1 + 32);
    sub_100204074((void *)a1, v201);
    uint64_t v203 = (*(uint64_t (**)(uint64_t, uint64_t))(v202 + 24))(v201, v202);
    if (v203)
    {
      unint64_t v101 = v203;
      if (qword_100583A38 != -1) {
        goto LABEL_170;
      }
      goto LABEL_141;
    }
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v216 = type metadata accessor for Logger();
    sub_1001F5F88(v216, (uint64_t)qword_100594CA0);
    sub_10020ED28(a1, (uint64_t)&v298);
    v217 = Logger.logObject.getter();
    os_log_type_t v218 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v217, v218))
    {
      uint64_t v219 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v296 = swift_slowAlloc();
      *(_DWORD *)uint64_t v219 = 136315138;
      uint64_t v220 = a1;
      uint64_t v221 = *((void *)&v299 + 1);
      uint64_t v222 = v300;
      sub_100204074(&v298, *((uint64_t *)&v299 + 1));
      v223 = *(uint64_t (**)(uint64_t, uint64_t))(v222 + 16);
      uint64_t v224 = v221;
      a1 = v220;
      uint64_t v225 = v222;
      id v79 = v293;
      uint64_t v226 = v223(v224, v225);
      uint64_t v295 = sub_1002344D8(v226, v227, (uint64_t *)&v296);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)&v298);
      _os_log_impl((void *)&_mh_execute_header, v217, v218, "Cound not retrieve interaction; using original notification content for call with identifier %s",
        v219,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002018DC((uint64_t)&v298);
    }

    v247 = v284;
    id v249 = v79;
    goto LABEL_165;
  }
  uint64_t v108 = v107;
  if (sub_1002D195C(v107))
  {
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  *(void *)&long long v298 = 0x49746361746E6F63;
  *((void *)&v298 + 1) = 0xEB000000006F666ELL;
  AnyHashable.init<A>(_:)();
  uint64_t v111 = swift_bridgeObjectRetain();
  uint64_t v112 = (void *)sub_100246C34(v111);
  swift_bridgeObjectRelease();
  if (v112)
  {
    id v113 = [v112 value];

    uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v116 = v115;

    *((void *)&v299 + 1) = &type metadata for String;
    *(void *)&long long v298 = v114;
    *((void *)&v298 + 1) = v116;
  }
  else
  {
    long long v298 = 0u;
    long long v299 = 0u;
  }
  id v117 = [v79 userInfo];
  uint64_t v118 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v296 = v118;
  sub_1002C2704((uint64_t)&v298, (uint64_t)v301);
  Class v119 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v79 setUserInfo:v119];

  if ((v108 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
    sub_100210D5C(&qword_100588888, (unint64_t *)&unk_1005858E0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v108 = v301[0];
    uint64_t v292 = v301[1];
    uint64_t v120 = v301[2];
    uint64_t v121 = v301[3];
    a1 = v301[4];
  }
  else
  {
    uint64_t v121 = 0;
    uint64_t v122 = -1 << *(unsigned char *)(v108 + 32);
    uint64_t v123 = *(void *)(v108 + 56);
    uint64_t v292 = v108 + 56;
    uint64_t v120 = ~v122;
    uint64_t v124 = -v122;
    if (v124 < 64) {
      uint64_t v125 = ~(-1 << v124);
    }
    else {
      uint64_t v125 = -1;
    }
    a1 = v125 & v123;
  }
  v270[1] = v120;
  id v109 = _swiftEmptyArrayStorage;
  v291 = (uint8_t *)((unint64_t)(v120 + 64) >> 6);
  v288 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v108 < 0) {
    goto LABEL_78;
  }
  while (1)
  {
    if (a1)
    {
      id v79 = (id)((a1 - 1) & a1);
      unint64_t v126 = __clz(__rbit64(a1)) | (v121 << 6);
      uint64_t v127 = v121;
      goto LABEL_95;
    }
    uint64_t v130 = v121 + 1;
    if (__OFADD__(v121, 1)) {
      break;
    }
    if (v130 >= (uint64_t)v291) {
      goto LABEL_105;
    }
    unint64_t v131 = *(void *)(v292 + 8 * v130);
    uint64_t v127 = v121 + 1;
    if (!v131)
    {
      uint64_t v127 = v121 + 2;
      if (v121 + 2 >= (uint64_t)v291) {
        goto LABEL_105;
      }
      unint64_t v131 = *(void *)(v292 + 8 * v127);
      if (!v131)
      {
        uint64_t v127 = v121 + 3;
        if (v121 + 3 >= (uint64_t)v291) {
          goto LABEL_105;
        }
        unint64_t v131 = *(void *)(v292 + 8 * v127);
        if (!v131)
        {
          uint64_t v127 = v121 + 4;
          if (v121 + 4 >= (uint64_t)v291) {
            goto LABEL_105;
          }
          unint64_t v131 = *(void *)(v292 + 8 * v127);
          if (!v131)
          {
            uint64_t v132 = v121 + 5;
            while (v132 < (uint64_t)v291)
            {
              unint64_t v131 = *(void *)(v292 + 8 * v132++);
              if (v131)
              {
                uint64_t v127 = v132 - 1;
                goto LABEL_94;
              }
            }
LABEL_105:
            sub_100206FA0();
            a1 = v286;
            id v79 = v293;
            unint64_t v101 = (unint64_t)v287;
            goto LABEL_106;
          }
        }
      }
    }
LABEL_94:
    id v79 = (id)((v131 - 1) & v131);
    unint64_t v126 = __clz(__rbit64(v131)) + (v127 << 6);
LABEL_95:
    id v129 = *(id *)(*(void *)(v108 + 48) + 8 * v126);
    if (!v129) {
      goto LABEL_105;
    }
    while (1)
    {
      uint64_t v133 = sub_1002E5874(v129);
      if (v134)
      {
        uint64_t v135 = v133;
        uint64_t v136 = v134;
      }
      else
      {
        id v137 = [v129 value];
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v136 = v138;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A47C8();
        id v109 = v140;
      }
      unint64_t v101 = v109[2];
      if (v101 >= v109[3] >> 1)
      {
        sub_1003A47C8();
        id v109 = v141;
      }
      v109[2] = v101 + 1;
      uint64_t v139 = &v109[2 * v101];
      v139[4] = v135;
      v139[5] = v136;

      uint64_t v121 = v127;
      a1 = (uint64_t)v79;
      if ((v108 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_78:
      uint64_t v128 = __CocoaSet.Iterator.next()();
      if (v128)
      {
        *(void *)&long long v296 = v128;
        sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v129 = (id)v298;
        swift_unknownObjectRelease();
        uint64_t v127 = v121;
        id v79 = (id)a1;
        if (v129) {
          continue;
        }
      }
      goto LABEL_105;
    }
  }
  __break(1u);
LABEL_170:
  swift_once();
LABEL_141:
  uint64_t v204 = type metadata accessor for Logger();
  v205 = (char *)sub_1001F5F88(v204, (uint64_t)qword_100594CA0);
  sub_10020ED28(a1, (uint64_t)&v298);
  v206 = Logger.logObject.getter();
  os_log_type_t v207 = static os_log_type_t.default.getter();
  v208 = "eIdentifier";
  if (os_log_type_enabled(v206, v207))
  {
    uint64_t v209 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v296 = swift_slowAlloc();
    v294 = v205;
    *(_DWORD *)uint64_t v209 = 136315138;
    uint64_t v211 = *((void *)&v299 + 1);
    uint64_t v210 = v300;
    sub_100204074(&v298, *((uint64_t *)&v299 + 1));
    uint64_t v212 = *(uint64_t (**)(uint64_t, uint64_t))(v210 + 16);
    uint64_t v213 = v210;
    v208 = "synchronousConversationsForBundleIdentifier" + 32;
    uint64_t v214 = v212(v211, v213);
    uint64_t v295 = sub_1002344D8(v214, v215, (uint64_t *)&v296);
    id v79 = v293;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)&v298);
    _os_log_impl((void *)&_mh_execute_header, v206, v207, "Retrieved interaction; retrieving intent for call with identifier %s",
      v209,
      0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002018DC((uint64_t)&v298);
  }

  id v228 = [(id)v101 intent];
  self;
  uint64_t v229 = swift_dynamicCastObjCClass();
  if (v229)
  {
    uint64_t v230 = v229;
    a1 = v286;
    sub_10020ED28(v286, (uint64_t)&v298);
    uint64_t v231 = Logger.logObject.getter();
    os_log_type_t v232 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v231, v232))
    {
      v233 = (uint8_t *)swift_slowAlloc();
      v294 = (char *)swift_slowAlloc();
      *(void *)&long long v296 = v294;
      uint64_t v234 = *((void *)v208 + 202);
      v291 = v233;
      *(_DWORD *)v233 = v234;
      v290 = v233 + 4;
      id v235 = v228;
      uint64_t v237 = *((void *)&v299 + 1);
      uint64_t v236 = v300;
      sub_100204074(&v298, *((uint64_t *)&v299 + 1));
      uint64_t v238 = v237;
      id v228 = v235;
      uint64_t v239 = (*(uint64_t (**)(uint64_t, uint64_t))(v236 + 16))(v238, v236);
      uint64_t v295 = sub_1002344D8(v239, v240, (uint64_t *)&v296);
      v208 = "synchronousConversationsForBundleIdentifier" + 32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)&v298);
      _os_log_impl((void *)&_mh_execute_header, v231, v232, "Retrieved start call intent; updating notification content for call with identifier %s",
        v291,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v286;
      swift_slowDealloc();
    }
    else
    {
      sub_1002018DC((uint64_t)&v298);
    }

    v247 = v284;
    *(void *)&long long v298 = 0;
    id v79 = v293;
    id v248 = [v293 contentByUpdatingWithProvider:v230 error:&v298];
    if (v248)
    {
      id v249 = v248;
      id v250 = (id)v298;

      goto LABEL_165;
    }
    id v251 = (id)v298;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10020ED28(a1, (uint64_t)&v298);
    v252 = Logger.logObject.getter();
    os_log_type_t v253 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v252, v253))
    {
      v294 = (char *)v101;
      uint64_t v254 = swift_slowAlloc();
      v291 = (uint8_t *)v228;
      v255 = (uint8_t *)v254;
      *(void *)&long long v296 = swift_slowAlloc();
      *(_DWORD *)v255 = *((void *)v208 + 202);
      uint64_t v257 = *((void *)&v299 + 1);
      uint64_t v256 = v300;
      sub_100204074(&v298, *((uint64_t *)&v299 + 1));
      uint64_t v258 = v257;
      id v79 = v293;
      uint64_t v259 = (*(uint64_t (**)(uint64_t, uint64_t))(v256 + 16))(v258, v256);
      uint64_t v295 = sub_1002344D8(v259, v260, (uint64_t *)&v296);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)&v298);
      _os_log_impl((void *)&_mh_execute_header, v252, v253, "Could not update notification content; using original notification content for call with identifier %s",
        v255,
        0xCu);
      swift_arrayDestroy();
      v247 = v284;
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {

      sub_1002018DC((uint64_t)&v298);
      swift_errorRelease();
    }
  }
  else
  {

    v241 = (id)v101;
    v242 = Logger.logObject.getter();
    os_log_type_t v243 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v242, v243))
    {
      v244 = (uint8_t *)swift_slowAlloc();
      v245 = (void *)swift_slowAlloc();
      *(_DWORD *)v244 = 138412290;
      id v246 = [v241 intent];
      *(void *)&long long v298 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v245 = v246;

      _os_log_impl((void *)&_mh_execute_header, v242, v243, "Cound not retrieve start call intent from %@", v244, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v242 = v241;
    }
    v247 = v284;
  }
  id v249 = v79;
  a1 = v286;
LABEL_165:
  sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
  uint64_t v261 = *(void *)(a1 + 24);
  uint64_t v262 = *(void *)(a1 + 32);
  sub_100204074((void *)a1, v261);
  uint64_t v263 = (*(uint64_t (**)(uint64_t, uint64_t))(v262 + 16))(v261, v262);
  uint64_t v265 = v264;
  id v266 = v249;
  id v267 = sub_100362954(v263, v265, v266, 0);
  [v267 setDestinations:6];
  if (v292) {
    objc_msgSend(v267, "setDestinations:", (unint64_t)objc_msgSend(v267, "destinations") | 1);
  }

  swift_bridgeObjectRelease();
  return v267;
}

id sub_1002D964C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100204074(a1, v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4) & 0x1FFFFFFFFLL) == 2)
  {
    uint64_t v5 = 0x4445434E454C4953;
    uint64_t v6 = (void *)0xED00004C4C41435FLL;
LABEL_3:
    return sub_100274858(v5, v6);
  }
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100204074(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 144))(v8, v9);
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    sub_100274858(0x4B434F4C425F4025, (void *)0xED000059425F4445);
    sub_1001F081C(&qword_100584B20);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10048F550;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1001F3B08();
    *(void *)(v14 + 32) = v12;
    *(void *)(v14 + 40) = v13;
    uint64_t v15 = String.init(format:_:)();
    swift_bridgeObjectRelease();
    return (id)v15;
  }
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100204074(a1, v16);
  uint64_t v18 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager);
  uint64_t v19 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 128))(v18, v16, v17);
  id v20 = [v18 faceTimeProvider];
  uint64_t v21 = v20;
  if (!v19)
  {
    if (!v20) {
      goto LABEL_13;
    }
LABEL_18:

LABEL_19:
    uint64_t v5 = 0x435F44455353494DLL;
    uint64_t v6 = (void *)0xEB000000004C4C41;
    goto LABEL_3;
  }
  if (!v20)
  {
    uint64_t v21 = v19;
    goto LABEL_18;
  }
  sub_1001F6204(0, &qword_10058BEC0);
  id v22 = v19;
  char v23 = static NSObject.== infix(_:_:)();

  if ((v23 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  sub_100204074(a1, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 120))(v24, v25);
  switch(v26)
  {
    case 0:
      uint64_t v6 = (void *)0x80000001004859A0;
      uint64_t v5 = 0xD000000000000013;
      goto LABEL_3;
    case 2:
      uint64_t v5 = 0xD00000000000001ALL;
      uint64_t v27 = "MISSED_FACETIME_VIDEO_CALL";
      goto LABEL_22;
    case 1:
      uint64_t v5 = 0xD00000000000001ALL;
      uint64_t v27 = "MISSED_FACETIME_AUDIO_CALL";
LABEL_22:
      uint64_t v6 = (void *)((unint64_t)(v27 - 32) | 0x8000000000000000);
      goto LABEL_3;
  }
  id v28 = sub_100274858(0xD000000000000013, (void *)0x80000001004859A0);
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_1001F5F88(v29, (uint64_t)qword_100594CA0);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    type metadata accessor for CHRecentCallMediaType(0);
    uint64_t v33 = String.init<A>(reflecting:)();
    sub_1002344D8(v33, v34, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Encountered undefined FaceTime media type %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v28;
}

uint64_t sub_1002D9AD8()
{
  swift_getObjectType();
  sub_1001F081C(&qword_1005887C8);
  uint64_t v1 = String.init<A>(describing:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType)) {
    uint64_t v2 = 0x656E6F6850;
  }
  else {
    uint64_t v2 = 0x656D695465636146;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType)) {
    uint64_t v3 = (void *)0xE500000000000000;
  }
  else {
    uint64_t v3 = (void *)0xE800000000000000;
  }
  uint64_t v6 = v1;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_1002D9B98()
{
  uint64_t v1 = v0;
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100490020;
  uint64_t v3 = self;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v5 = [v3 predicateForCallsWithAnyServiceProviders:isa];

  *(void *)(v2 + 32) = v5;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedMediaTypes);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v16 = v3;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v8 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v6 + 8 * v8 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v8 = v9;
    }
    while (v7 != v9);
    swift_bridgeObjectRelease();
    uint64_t v3 = v16;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100585590);
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v3 predicateForCallsWithAnyMediaTypes:v10];

  *(void *)(v2 + 40) = v11;
  specialized Array._endMutation()();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v1
                                          + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportsDisplayingFaceTimeAudioCalls);
  uint64_t v13 = swift_retain();
  LOBYTE(v12) = v12(v13);
  swift_release();
  if ((v12 & 1) == 0)
  {
    id v14 = [v3 predicateForFilteringOutFaceTimeAudioCalls];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  sub_1001F6204(0, &qword_100587A50);
  return sub_1002D1698();
}

id sub_1002D9E40()
{
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100490020;
  *(void *)(v0 + 32) = sub_1002D9B98();
  *(void *)(v0 + 40) = [self predicateForCallsWithStatusRead:0];
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100587A50);
  return sub_1002D1698();
}

id sub_1002D9EF0()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100490020;
  *(void *)(v4 + 32) = sub_1002D9E40();
  id v5 = self;
  static Date.+ infix(_:_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [v5 predicateForCallsBetweenStartDate:isa endDate:0];

  *(void *)(v4 + 40) = v7;
  v9[1] = v4;
  specialized Array._endMutation()();
  sub_1001F6204(0, &qword_100587A50);
  return sub_1002D1698();
}

void sub_1002DA080()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_100583A38 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_1001F5F88(v7, (uint64_t)qword_100594CA0);
  uint64_t v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)id v11 = 138412290;
    v16[1] = v8;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updating call history badge count for notification provider %@", v11, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  id v14 = *(void (**)(uint64_t))((char *)&v8->isa
                                       + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue);
  if (v14)
  {
    uint64_t v15 = swift_retain();
    v14(v15);
    sub_100208490((uint64_t)v14);
  }
}

void sub_1002DA330(uint64_t a1, void *a2)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1002E4D58(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_release();
  if (v5)
  {
    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1001F5F88(v6, (uint64_t)qword_100594CA0);
    id v12 = a2;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      id v11 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v12;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Skipping update of call history notification; InCallService process state is foreground running. %@",
        v9,
        0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1002DA528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v6 - 8);
  os_log_type_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  sub_10020ED28(a1, (uint64_t)v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  sub_100204074(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  if (sub_1001F758C((uint64_t)v8, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_100235804((uint64_t)v8, &qword_100584B40);
    sub_1002018DC((uint64_t)v31);
    sub_10020ED28(a1, (uint64_t)v28);
LABEL_5:
    char v25 = 0;
    goto LABEL_6;
  }
  uint64_t v15 = Date.compare(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  v16(v8, v9);
  sub_1002018DC((uint64_t)v31);
  sub_10020ED28(a1, (uint64_t)v28);
  if (v15 != 1) {
    goto LABEL_5;
  }
  uint64_t v17 = (uint64_t *)(a3 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers);
  swift_beginAccess();
  uint64_t v18 = *v17;
  uint64_t v19 = v29;
  uint64_t v20 = v30;
  sub_100204074(v28, v29);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
  swift_bridgeObjectRetain();
  uint64_t v22 = v21(v19, v20);
  sub_100370C00(v22, v23, v18);
  LOBYTE(v19) = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v25 = v19 ^ 1;
LABEL_6:
  sub_1002018DC((uint64_t)v28);
  return v25 & 1;
}

uint64_t sub_1002DA7E4()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType);
}

void sub_1002DA7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v27;
  a26 = v28;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_1002DF83C((unint64_t)_swiftEmptyArrayStorage, &qword_1005887C0, (unint64_t *)&unk_1005887B0);
  }
  else {
    uint64_t v29 = &_swiftEmptySetSingleton;
  }
  a14 = v29;
  sub_1002D3640();
  sub_1001F6204(0, (unint64_t *)&unk_1005858D0);
  sub_100274858(0xD000000000000016, (void *)0x80000001004857E0);
  sub_1001F6204(0, (unint64_t *)&unk_10058B4A0);
  sub_1002DAC00();
  sub_1002DAC5C();
  os_log_type_t v31 = v30;
  sub_1002E7BC0((uint64_t)"ACTION_TITLE_SEND_MESSAGE");
  sub_1002DAC00();
  sub_1002DAC5C();
  uint64_t v33 = v32;
  sub_1002E7BC0((uint64_t)"ACTION_TITLE_BLOCK_CALLER");
  sub_1002DAC00();
  sub_1002DAC5C();
  uint64_t v35 = v34;
  unsigned int v36 = [*(id *)(v26 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_featureFlags) silencedCallNotificationBlockAndReportEnabled];
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v37 = swift_allocObject();
  if (v36)
  {
    *(_OWORD *)(v37 + 16) = xmmword_100492010;
    *(void *)(v37 + 32) = v31;
    *(void *)(v37 + 40) = v33;
    *(void *)(v37 + 48) = v35;
    a13 = (id)v37;
    specialized Array._endMutation()();
    id v38 = a13;
    id v39 = v35;
  }
  else
  {
    *(_OWORD *)(v37 + 16) = xmmword_100490020;
    *(void *)(v37 + 32) = v31;
    *(void *)(v37 + 40) = v33;
    a13 = (id)v37;
    specialized Array._endMutation()();
    id v38 = a13;
  }
  sub_1001F6204(0, (unint64_t *)&unk_1005887B0);
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_10048F550;
  *(void *)(v40 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v40 + 40) = v41;
  id v42 = v31;
  id v43 = v33;
  uint64_t v44 = sub_1002E7CBC(0x65776F6C6C61);
  id v46 = sub_1002D1714(v44, v45, v38, v40, 2);
  sub_1002E7940((uint64_t)v46, v47, v48, v49);

  id v50 = v46;
  sub_1002E7940((uint64_t)v50, v51, v52, v53);

  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_10048F550;
  *(void *)(v54 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v54 + 40) = v55;
  uint64_t v56 = sub_1002E7CBC(0x656B636F6C62);
  id v59 = sub_1002D1714(v56, v57, v58, v54, 2);
  sub_1002E054C(&a13, v59, &unk_1005887B0, UNNotificationCategory_ptr, &qword_1005887C0);

  sub_100254338();
}

id sub_1002DAC00()
{
  String._bridgeToObjectiveC()();
  sub_100254618();
  id v1 = [(id)swift_getObjCClassFromMetadata() iconWithSystemImageName:v0];

  return v1;
}

void sub_1002DAC5C()
{
  sub_1002E79A4();
  id v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  String._bridgeToObjectiveC()();
  sub_1002E7CE4();
  [(id)swift_getObjCClassFromMetadata() actionWithIdentifier:v6 title:v5 options:v3 icon:v1];

  sub_1002E7968();
}

void sub_1002DACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = v26;
  id v30 = [self sharedSystemShellSwitcher];
  unsigned int v31 = [v30 isClarityBoardEnabled];

  if (v31)
  {
    sub_10020ED28((uint64_t)&v29[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_contactStore], (uint64_t)&a10);
    sub_1001F6204(0, (unint64_t *)&unk_100588760);
    id v32 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    id v33 = [v32 outgoingCommunicationLimit];

    id v34 = [self sharedInstance];
    sub_1002E703C((uint64_t)&a10, v34, (uint64_t)v33, (uint64_t)v29);

    sub_1002018DC((uint64_t)&a10);
  }
  else
  {
    uint64_t v35 = *(void *)&v29[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
    uint64_t v36 = *(void *)&v29[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
    sub_100204074(&v29[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v35);
    id v37 = sub_1002D9E40();
    uint64_t v38 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v36 + 8))(v37, v35, v36);

    if (qword_100583A38 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_1001F5F88(v39, (uint64_t)qword_100594CA0);
    uint64_t v40 = v29;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 138412802;
      a10 = (uint64_t)v40;
      uint64_t v45 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v40;

      *(_WORD *)(v43 + 12) = 2048;
      a10 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 22) = 1024;
      LODWORD(a10) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%@ count: %ld isAmbiguous: %{BOOL}d", (uint8_t *)v43, 0x1Cu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
  }
  sub_100254338();
}

uint64_t sub_1002DAFFC()
{
  sub_1002545EC();
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  v3[1] = v0;
  return sub_100208490(v4);
}

uint64_t sub_1002DB058(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

void sub_1002DB078(uint64_t a1)
{
  if (!a1)
  {
    if (qword_1005839E0 != -1) {
      goto LABEL_76;
    }
    goto LABEL_5;
  }
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
    sub_100210D5C(&qword_100588888, (unint64_t *)&unk_1005858E0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v76[1];
    os_log_t oslog = (os_log_t)v76[2];
    uint64_t v2 = v76[3];
    uint64_t v3 = v76[4];
    unint64_t v4 = v76[5];
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    os_log_t oslog = (os_log_t)(a1 + 56);
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v4 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v9;
    uint64_t v3 = 0;
  }
  int64_t v73 = (unint64_t)(v2 + 64) >> 6;
  id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
  uint64_t v72 = v1;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()
      || (sub_1001F6204(0, (unint64_t *)&unk_1005858E0),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          id v16 = (id)v76[0],
          swift_unknownObjectRelease(),
          uint64_t v15 = v3,
          uint64_t v13 = v4,
          !v16))
    {
LABEL_74:
      sub_100206FA0();
      return;
    }
LABEL_36:
    switch((unint64_t)[v16 v12[55]])
    {
      case 0uLL:
      case 1uLL:
        goto LABEL_50;
      case 2uLL:
        uint64_t v20 = sub_1002E5874(v16);
        if (v21)
        {
          uint64_t v22 = v20;
          unint64_t v23 = v21;
          unint64_t v71 = v13;
          id v24 = (id)TUHomeCountryCode();
          if (v24)
          {
            char v25 = v24;
            uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v28 = v27;
          }
          else
          {
            uint64_t v26 = 0;
            uint64_t v28 = 0;
          }
          id v60 = objc_allocWithZone((Class)TUPhoneNumber);
          swift_bridgeObjectRetain();
          id v61 = sub_1002DDFE8(v22, v23, v26, v28);
          if (qword_1005839E0 != -1) {
            swift_once();
          }
          uint64_t v62 = type metadata accessor for Logger();
          sub_1001F5F88(v62, (uint64_t)qword_100594B98);
          id v63 = v61;
          swift_bridgeObjectRetain();
          id v64 = v63;
          NSString v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v65, v66))
          {
            id v70 = v61;
            uint64_t v67 = swift_slowAlloc();
            uint64_t v68 = (void *)swift_slowAlloc();
            v76[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v67 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)(v67 + 4) = sub_1002344D8(v22, v23, v76);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v67 + 12) = 2112;
            *(void *)(v67 + 14) = v64;
            *uint64_t v68 = v70;

            _os_log_impl((void *)&_mh_execute_header, v65, v66, "Block phoneNumber: %s from notification, formatted phonenumber: %@", (uint8_t *)v67, 0x16u);
            sub_1001F081C(&qword_100585900);
            swift_arrayDestroy();
            uint64_t v1 = v72;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          unint64_t v4 = v71;
          id v69 = [self sharedPrivacyManager];
          if (!v69) {
            goto LABEL_78;
          }
          id v59 = v69;
          [v69 setBlockIncomingCommunication:1 forPhoneNumber:v64];

          goto LABEL_73;
        }
        if (qword_1005839E0 != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        sub_1001F5F88(v43, (uint64_t)qword_100594B98);
        id v44 = v16;
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v47 = 136315138;
          sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
          unint64_t v4 = v13;
          id v48 = v44;
          uint64_t v49 = String.init<A>(reflecting:)();
          *(void *)(v47 + 4) = sub_1002344D8(v49, v50, v76);

          uint64_t v1 = v72;
          swift_bridgeObjectRelease();
          uint64_t v51 = v45;
          os_log_type_t v52 = v46;
          uint64_t v53 = "Unable to block the phoneNumber handle %s because handle.normalizedValue = nil";
          goto LABEL_60;
        }
        goto LABEL_61;
      case 3uLL:
        uint64_t v35 = sub_1002E5874(v16);
        if (v36)
        {
          uint64_t v37 = v35;
          unint64_t v38 = v36;
          unint64_t v4 = v13;
          if (qword_1005839E0 != -1) {
            swift_once();
          }
          uint64_t v39 = type metadata accessor for Logger();
          sub_1001F5F88(v39, (uint64_t)qword_100594B98);
          swift_bridgeObjectRetain_n();
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            v76[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v42 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v42 + 4) = sub_1002344D8(v37, v38, v76);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Block emailAddress %s from notification", (uint8_t *)v42, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v58 = [self sharedPrivacyManager];
          if (!v58)
          {
            __break(1u);
LABEL_78:
            __break(1u);
            JUMPOUT(0x1002DBC94);
          }
          id v59 = v58;
          sub_1002E591C(1, v37, v38, v58);
LABEL_73:

          uint64_t v3 = v15;
        }
        else
        {
          if (qword_1005839E0 != -1) {
            swift_once();
          }
          uint64_t v54 = type metadata accessor for Logger();
          sub_1001F5F88(v54, (uint64_t)qword_100594B98);
          id v44 = v16;
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v45, v55))
          {
            uint64_t v47 = swift_slowAlloc();
            v76[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v47 = 136315138;
            sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
            unint64_t v4 = v13;
            id v48 = v44;
            uint64_t v1 = v72;
            uint64_t v56 = String.init<A>(reflecting:)();
            *(void *)(v47 + 4) = sub_1002344D8(v56, v57, v76);

            swift_bridgeObjectRelease();
            uint64_t v51 = v45;
            os_log_type_t v52 = v55;
            uint64_t v53 = "Unable to block the emailAddress handle %s because handle.normalizedValue = nil";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v51, v52, v53, (uint8_t *)v47, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v3 = v15;
            id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          }
          else
          {
LABEL_61:

            uint64_t v3 = v15;
            unint64_t v4 = v13;
            id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          }
        }
        break;
      default:
        if (qword_1005839E0 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_1001F5F88(v29, (uint64_t)qword_100594B98);
        id v16 = v16;
        id v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 136315138;
          [v16 type];
          type metadata accessor for CHHandleType(0);
          uint64_t v33 = String.init<A>(reflecting:)();
          *(void *)(v32 + 4) = sub_1002344D8(v33, v34, v76);

          uint64_t v1 = v72;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "unknown handle type: %s", (uint8_t *)v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v12 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          swift_slowDealloc();
        }
        else
        {

LABEL_50:
        }
        uint64_t v3 = v15;
        unint64_t v4 = v13;
        continue;
    }
  }
  if (v4)
  {
    uint64_t v13 = (v4 - 1) & v4;
    unint64_t v14 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v15 = v3;
    goto LABEL_35;
  }
  int64_t v17 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v17 >= v73) {
      goto LABEL_74;
    }
    unint64_t isa = (unint64_t)oslog[v17].isa;
    uint64_t v15 = v3 + 1;
    if (!isa)
    {
      uint64_t v15 = v3 + 2;
      if (v3 + 2 >= v73) {
        goto LABEL_74;
      }
      unint64_t isa = (unint64_t)oslog[v15].isa;
      if (!isa)
      {
        uint64_t v15 = v3 + 3;
        if (v3 + 3 >= v73) {
          goto LABEL_74;
        }
        unint64_t isa = (unint64_t)oslog[v15].isa;
        if (!isa)
        {
          uint64_t v15 = v3 + 4;
          if (v3 + 4 >= v73) {
            goto LABEL_74;
          }
          unint64_t isa = (unint64_t)oslog[v15].isa;
          if (!isa)
          {
            int64_t v19 = v3 + 5;
            do
            {
              if (v19 >= v73) {
                goto LABEL_74;
              }
              unint64_t isa = (unint64_t)oslog[v19++].isa;
            }
            while (!isa);
            uint64_t v15 = v19 - 1;
          }
        }
      }
    }
    uint64_t v13 = (isa - 1) & isa;
    unint64_t v14 = __clz(__rbit64(isa)) + (v15 << 6);
LABEL_35:
    id v16 = *(id *)(*(void *)(v1 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_74;
    }
    goto LABEL_36;
  }
  __break(1u);
LABEL_76:
  swift_once();
LABEL_5:
  uint64_t v5 = type metadata accessor for Logger();
  sub_1001F5F88(v5, (uint64_t)qword_100594B98);
  osloga = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, osloga, v6, "Unable to block handles because handles are nil", v7, 2u);
    swift_slowDealloc();
  }
}

void sub_1002DBCA4()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v9 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1002024D0();
  sub_10020ED28(v4, (uint64_t)v17);
  uint64_t v13 = swift_allocObject();
  sub_100233560(v17, v13 + 16);
  *(void *)(v13 + 56) = v0;
  v16[4] = sub_1002DD328;
  v16[5] = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_1002C2C88;
  v16[3] = &unk_100512E90;
  unint64_t v14 = _Block_copy(v16);
  id v15 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1002E733C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_1002E7A58();
  sub_10027AC54();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
  swift_release();
  sub_1001FCC08();
}

void sub_1002DBEDC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v4 - 8);
  id v59 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v57 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594CA0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v60 = v6;
  if (v11)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)&long long v62 = sub_1002344D8(0xD000000000000020, 0x80000001004857B0, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100204074(a1, v13);
  v67._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  char v15 = sub_1002D35FC(v67);
  if (v15 == 3)
  {
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    sub_1001F5F88(v8, (uint64_t)qword_100594B98);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_27;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unknown notification response received", v18, 2u);
    goto LABEL_21;
  }
  char v19 = v15;
  uint64_t v56 = a2;
  uint64_t v20 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource);
  uint64_t v21 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24);
  uint64_t v22 = v20[4];
  sub_100204074(v20, v21);
  unint64_t v23 = self;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  sub_100204074(a1, v25);
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v27 = [v23 predicateForCallsWithUniqueID:v26];

  uint64_t v28 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v22 + 24))(v27, 1, v21, v22);
  sub_100246D78(v28, (uint64_t)&v62);
  swift_bridgeObjectRelease();
  if (!v63)
  {
    sub_100235804((uint64_t)&v62, (uint64_t *)&unk_100588750);
    if (qword_1005839E0 != -1) {
      swift_once();
    }
    sub_1001F5F88(v8, (uint64_t)qword_100594B98);
    sub_10020ED28((uint64_t)a1, (uint64_t)v64);
    id v16 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v41))
    {
      sub_1002018DC((uint64_t)v64);
      goto LABEL_27;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v43 = v65;
    uint64_t v44 = v66;
    sub_100204074(v64, v65);
    *(void *)&long long v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
    *((void *)&v62 + 1) = v45;
    uint64_t v46 = String.init<A>(reflecting:)();
    *(void *)&long long v62 = sub_1002344D8(v46, v47, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v64);
    _os_log_impl((void *)&_mh_execute_header, v16, v41, "Could not find recent call with identifier: %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_21:
    swift_slowDealloc();
LABEL_27:

    return;
  }
  sub_100233560(&v62, (uint64_t)v64);
  if (v19)
  {
    uint64_t v29 = v56;
    if (v19 == 1)
    {
      uint64_t v30 = v65;
      uint64_t v31 = v66;
      sub_100204074(v64, v65);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 96))(v30, v31);
      if (v32)
      {
        uint64_t v33 = (void *)sub_100246C34(v32);
        swift_bridgeObjectRelease();
        if (v33)
        {
          sub_1001F081C(&qword_100584B20);
          uint64_t v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_10048F550;
          id v35 = [v33 value];
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v38 = v37;

          *(void *)(v34 + 56) = &type metadata for String;
          *(void *)(v34 + 64) = sub_1001F3B08();
          *(void *)(v34 + 32) = v36;
          *(void *)(v34 + 40) = v38;
          String.init(format:_:)();
          uint64_t v39 = (uint64_t)v59;
          URL.init(string:)();
          swift_bridgeObjectRelease();
          uint64_t v40 = v60;
          if (sub_1001F758C(v39, 1, v60) == 1)
          {

            sub_100235804(v39, &qword_1005878F0);
          }
          else
          {
            uint64_t v54 = v57;
            uint64_t v53 = v58;
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v57, v39, v40);
            os_log_type_t v55 = *(void (**)(char *))(v29
                                                + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL);
            swift_retain();
            v55(v54);
            swift_release();

            (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v40);
          }
        }
      }
    }
    else
    {
      uint64_t v49 = *(void (**)(void))(v56 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
      if (v49)
      {
        uint64_t v50 = v65;
        uint64_t v51 = v66;
        sub_100204074(v64, v65);
        os_log_type_t v52 = *(void (**)(uint64_t, uint64_t))(v51 + 80);
        swift_retain();
        v52(v50, v51);
        v49();
        sub_100208490((uint64_t)v49);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    id v48 = *(void (**)(uint64_t *))(v56
                                           + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall);
    if (v48)
    {
      swift_retain();
      v48(v64);
      sub_100208490((uint64_t)v48);
    }
  }
  sub_1002018DC((uint64_t)v64);
}

uint64_t sub_1002DC88C()
{
  return type metadata accessor for CallHistoryNotificationProvider();
}

uint64_t type metadata accessor for CallHistoryNotificationProvider()
{
  uint64_t result = qword_100588678;
  if (!qword_100588678) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002DC8DC()
{
  sub_10026ACE0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1002DC9F4(uint64_t a1, uint64_t a2)
{
  return sub_1002DB058(a1, a2, &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_replace, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_1002DCA28(uint64_t a1, uint64_t a2)
{
  return sub_1002DB058(a1, a2, &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_removeNotification, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_1002DCA5C(uint64_t a1, uint64_t a2)
{
  return sub_1002DB058(a1, a2, &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue, (uint64_t (*)(uint64_t, uint64_t))sub_100208490);
}

void sub_1002DCA94()
{
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594CA0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Call interactions changed", v3, 2u);
    sub_1001F63CC();
  }

  sub_1002D5D4C();
}

void sub_1002DCBD8()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  v19[4] = v3;
  __chkstk_darwin(v4);
  sub_10021EA1C();
  sub_1001F6398();
  v19[2] = v6;
  v19[3] = v5;
  __chkstk_darwin(v5);
  sub_1002024D0();
  uint64_t v7 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  v19[1] = *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v20[4] = sub_1002E7428;
  v20[5] = v14;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_1002C2C88;
  v20[3] = &unk_100512F58;
  char v15 = _Block_copy(v20);
  id v16 = v0;
  static DispatchQoS.unspecified.getter();
  void v19[5] = _swiftEmptyArrayStorage;
  sub_1002E733C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_1002E7A58();
  sub_10027AC54();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  sub_1001F7664();
  v17();
  sub_1001F7664();
  v18();
  swift_release();
  sub_1001FCC08();
}

void sub_1002DCE88(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A38 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1001F5F88(v8, (uint64_t)qword_100594CA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  int v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    int v21 = v12;
    char v15 = (void *)v14;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = (uint64_t)v9;
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v13 = 138412546;
    os_log_t v20 = v10;
    id v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v15 = v9;

    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v23 = Notification.name.getter();
    type metadata accessor for Name(0);
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v23 = sub_1002344D8(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v10 = v20;
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v21, "%@ is handling %s", (uint8_t *)v13, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  sub_1002DA080();
}

uint64_t sub_1002DD2E8()
{
  sub_1002018DC(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1002DD328()
{
  sub_1002DBEDC((void *)(v0 + 16), *(void *)(v0 + 56));
}

uint64_t sub_1002DD334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002DD344()
{
  return swift_release();
}

uint64_t sub_1002DD34C()
{
  swift_getObjectType();
  uint64_t v9 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 40;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  v2._countAndFlagsBits = 0xD000000000000012;
  v2._object = (void *)0x8000000100485A40;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001F081C((uint64_t *)&unk_1005889C0);
  v3._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  v4._countAndFlagsBits = 0xD000000000000015;
  v4._object = (void *)0x8000000100485A60;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_10058B600);
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x8000000100485A80;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v9;
}

uint64_t sub_1002DD564(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100204074(a1, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 104))(v7, v8);
  if (!result) {
    return result;
  }
  uint64_t v10 = (void *)sub_100246C34(result);
  swift_bridgeObjectRelease();
  if (!v10) {
    return 0;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_25:
    id v33 = sub_1002DD8A0();
    char v34 = sub_1002DD9CC(v33, a4, a5);

    return v34 & 1;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_27:
    id v35 = sub_1002DD8A0();
    unint64_t v36 = (unint64_t)sub_1002DDACC(v35, a4);
    if (v36 >> 62) {
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();

    return v37 > 0;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      if (qword_100583A28 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_1001F5F88(v29, (uint64_t)qword_100594C70);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unhandled outgoing communication limit", v32, 2u);
        swift_slowDealloc();
      }

      return 0;
    }
  }

  return 1;
}

id sub_1002DD8A0()
{
  id v1 = [v0 value];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v2 < 1) {
    return 0;
  }
  unint64_t v3 = (unint64_t)[v0 type];
  if (v3 >= 4)
  {
    type metadata accessor for CHHandleType(0);
    id result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v4 = qword_100492E38[v3];
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    id v5 = [v0 value];
    Swift::String v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

    return sub_1002DDD8C(v4, v6);
  }
  return result;
}

uint64_t sub_1002DD9CC(void *a1, void *a2, void *a3)
{
  unint64_t v4 = (unint64_t)sub_1002DDACC(a1, a2);
  unint64_t v5 = v4;
  if (v4 >> 62) {
    goto LABEL_12;
  }
  for (uint64_t i = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (v5 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v11 = a3[3];
      uint64_t v12 = a3[4];
      sub_100204074(a3, v11);
      char v13 = sub_1003097CC((uint64_t)v9, v11, v12);

      if ((v13 & 1) == 0)
      {
        ++v7;
        if (v10 != i) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    ;
  }
  char v13 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v13 & 1;
}

void *sub_1002DDACC(void *a1, void *a2)
{
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  id v3 = a1;
  sub_1001F081C(&qword_100588780);
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  sub_100204074(a2, v4);
  id v6 = [v3 value];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v7, v9, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002D17E8(v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  return (void *)v12;
}

id sub_1002DDD8C(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  String._bridgeToObjectiveC()();
  sub_100254618();
  id v5 = [v4 initWithType:a1 value:a2];

  return v5;
}

uint64_t sub_1002DDE00()
{
  uint64_t v2 = sub_1002E5880(v0);
  if (v2)
  {
    sub_10039E66C(v2);
    sub_100254618();
    if (!v1) {
      return 1;
    }
  }
  uint64_t result = sub_1002E5880(v0);
  if (result)
  {
    id v4 = (void *)sub_100246C34(result);
    swift_bridgeObjectRelease();
    if (v4)
    {
      id v5 = [v4 value];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = String.count.getter();
      swift_bridgeObjectRelease();
      return v6 == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002DDEC8()
{
  id v1 = [v0 ttyType];
  if ((unint64_t)v1 < 3) {
    return (uint64_t)v1 + 1;
  }
  type metadata accessor for CHRecentCallTTYType(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_1002DDF30()
{
  sub_1002E79A4();
  char v2 = v1;
  id v4 = v3;
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 initWithConversationLink:v4 otherInvitedHandles:isa sendLetMeInRequest:v2 & 1];

  sub_1002E7968();
}

id sub_1002DDFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v7 = 0;
    goto LABEL_6;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = [v4 initWithDigits:v6 countryCode:v7];

  return v8;
}

id sub_1002DE088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
  Class v6 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v3 initWithRemoteMembers:isa otherInvitedHandles:v6 originatingUIType:a3];

  return v7;
}

unint64_t sub_1002DE1A0(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

char *sub_1002DE1C4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

char *sub_1002DE220(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_1002DE2BC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

char *sub_1002DE318(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

void sub_1002DE37C(uint64_t a1, uint64_t a2)
{
}

void sub_1002DE394(uint64_t a1, uint64_t a2)
{
}

void sub_1002DE3AC(uint64_t a1, uint64_t a2)
{
}

void sub_1002DE3C4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E74E4();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront();
    return;
  }
  sub_1002E7B20();
  if (v6 && (v5(0), sub_10020233C(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      sub_1002E7630();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    v5(0);
    sub_1002E7630();
    _swift_arrayInitWithTakeFrontToBack();
  }
}

char *sub_1002DE4C4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

char *sub_1002DE52C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

char *sub_1002DE590(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    uint64_t result = (char *)sub_1002E74E4();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1002E74C8(a3, result);
  }
  return result;
}

void sub_1002DE5EC(uint64_t a1, uint64_t a2)
{
}

char *sub_1002DE5F8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

void sub_1002DE68C(uint64_t a1, uint64_t a2)
{
}

void sub_1002DE698(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E74E4();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront();
    return;
  }
  sub_1002E7B20();
  if (v6 && (sub_1001F081C(v5), sub_10020233C(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      sub_1002E7630();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    sub_1001F081C(v5);
    sub_1002E7630();
    _swift_arrayInitWithTakeFrontToBack();
  }
}

uint64_t sub_1002DE78C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

void *sub_1002DE83C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[24 * a2] > __src ? (BOOL v3 = &__src[24 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 24 * a2);
  }
  return result;
}

void *sub_1002DE91C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[32 * a2] > __src ? (BOOL v3 = &__src[32 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 32 * a2);
  }
  return result;
}

uint64_t sub_1002DE9F8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  if (a3 + 48 * a2 > a1 && a1 + 48 * a2 > a3)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DEAAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DEB60(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  sub_1002E76A0();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }
  v3(0);
  sub_1002E761C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DEC10(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  sub_1002E76A0();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }
  sub_1001F6204(0, v3);
  sub_1002E761C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DECC4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v5 = *(void *)(*(void *)(type metadata accessor for Caption() - 8) + 72) * a2,
         unint64_t v6 = a3 + v5,
         unint64_t v7 = a1 + v5,
         v6 > a1)
      ? (BOOL v8 = v7 > a3)
      : (BOOL v8 = 0),
        v8))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1002DEDDC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1002DEEC0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v5 = *(void *)(*(void *)(sub_1001F081C((uint64_t *)&unk_100587050) - 8) + 72) * a2,
         unint64_t v6 = a3 + v5,
         unint64_t v7 = a1 + v5,
         v6 > a1)
      ? (BOOL v8 = v7 > a3)
      : (BOOL v8 = 0),
        v8))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1002DEFDC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  sub_1002E76A0();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }
  sub_1001F081C(v3);
  sub_1002E761C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DF088(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  sub_1002545EC();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }
  sub_1001F081C(&qword_100588878);
  sub_1002E761C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1002DF148(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1002E74B4();
    sub_1002E75D0();
LABEL_11:
    uint64_t result = sub_1002E7564();
    __break(1u);
    return result;
  }
  sub_1002545EC();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    sub_1002E74B4();
    sub_1002E75C0();
    goto LABEL_11;
  }
  sub_1001F081C(v5);
  sub_1002E761C();

  return swift_arrayInitWithCopy();
}

void *sub_1002DF208(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[8 * a2] > __src ? (BOOL v3 = &__src[8 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 8 * a2);
  }
  return result;
}

uint64_t sub_1002DF2E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1001F081C((uint64_t *)&unk_100586180);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1002DF3E4(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_1002DF400(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (sub_1001F081C(&qword_100588900), v2 = sub_1002E7B38(), uint64_t v3 = v2, (v4 = *(void *)(a1 + 16)) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    Swift::UInt v7 = *(void *)(a1 + 32 + 8 * v5);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    unint64_t v8 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v8 >> 6;
    uint64_t v10 = *(void *)(v6 + 8 * (v8 >> 6));
    uint64_t v11 = 1 << v8;
    uint64_t v12 = *(void *)(v3 + 48);
    if (((1 << v8) & v10) != 0)
    {
      if (*(void *)(v12 + 8 * v8) == v7) {
        goto LABEL_12;
      }
      while (1)
      {
        sub_1002E7BAC();
        if (v13) {
          break;
        }
        if (*(void *)(v12 + 8 * v8) == v7) {
          goto LABEL_12;
        }
      }
    }
    *(void *)(v6 + 8 * v9) = v11 | v10;
    *(void *)(v12 + 8 * v8) = v7;
    uint64_t v14 = *(void *)(v3 + 16);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_15;
    }
    *(void *)(v3 + 16) = v16;
LABEL_12:
    if (++v5 == v4) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

void sub_1002DF54C(unint64_t a1)
{
}

uint64_t sub_1002DF568(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_1001F081C((uint64_t *)&unk_1005887F0);
  uint64_t result = sub_1002E7B38();
  uint64_t v3 = (unsigned char *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << v3[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *((void *)v3 + 6);
      sub_1002E7B6C(v14 + 16 * v10);
      BOOL v16 = v16 && v15 == v7;
      if (v16 || (uint64_t result = sub_1002E7804(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        sub_1002E7B6C(v14 + 16 * v10);
        if (!v16 || v18 != v7)
        {
          uint64_t result = sub_1002E7804();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*((void *)v3 + 6) + 16 * v10);
    *uint64_t v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1002DF70C()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  if (*(void *)(v0 + 16)
    && (sub_1001F081C((uint64_t *)&unk_1005887E0), v2 = sub_1002E7B38(), uint64_t v3 = v2, (v4 = *(void *)(v1 + 16)) != 0))
  {
    unint64_t v5 = 0;
    uint64_t v6 = v2 + 56;
    sub_1002E79EC();
    uint64_t v8 = ~v7;
    while (v5 < *(void *)(v1 + 16))
    {
      int v9 = *(_DWORD *)(v1 + 32 + 4 * v5);
      uint64_t v10 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v11 = v10 & v8;
      unint64_t v12 = (v10 & (unint64_t)v8) >> 6;
      uint64_t v13 = *(void *)(v6 + 8 * v12);
      uint64_t v14 = 1 << (v10 & v8);
      uint64_t v15 = *(void *)(v3 + 48);
      if ((v14 & v13) != 0)
      {
        while (*(_DWORD *)(v15 + 4 * v11) != v9)
        {
          sub_1002E7BAC();
          if (v16) {
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        *(void *)(v6 + 8 * v12) = v14 | v13;
        *(_DWORD *)(v15 + 4 * v11) = v9;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18) {
          goto LABEL_14;
        }
        *(void *)(v3 + 16) = v19;
      }
      if (++v5 == v4) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1001FCC08();
  }
}

void sub_1002DF820(unint64_t a1)
{
}

void sub_1002DF83C(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_1001F081C(a2);
  uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
LABEL_6:
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v8) {
      goto LABEL_26;
    }
  }
  unint64_t v9 = 0;
  uint64_t v10 = (char *)(v6 + 7);
  unint64_t v31 = a1 & 0xC000000000000001;
  unint64_t v27 = a1 + 32;
  uint64_t v28 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v29 = v8;
  while (1)
  {
    if (v31)
    {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v9 >= *(void *)(v28 + 16)) {
        goto LABEL_29;
      }
      id v11 = *(id *)(v27 + 8 * v9);
    }
    unint64_t v12 = v11;
    BOOL v13 = __OFADD__(v9++, 1);
    if (v13) {
      break;
    }
    Swift::Int v14 = NSObject._rawHashValue(seed:)(v6[5]);
    uint64_t v15 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = *(void *)&v10[8 * (v16 >> 6)];
    uint64_t v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      sub_1001F6204(0, a3);
      id v20 = *(id *)(v6[6] + 8 * v16);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_21:

        uint64_t v8 = v29;
        goto LABEL_25;
      }
      uint64_t v22 = ~v15;
      while (1)
      {
        unint64_t v16 = (v16 + 1) & v22;
        unint64_t v17 = v16 >> 6;
        uint64_t v18 = *(void *)&v10[8 * (v16 >> 6)];
        uint64_t v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0) {
          break;
        }
        id v23 = *(id *)(v6[6] + 8 * v16);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_21;
        }
      }
      uint64_t v8 = v29;
    }
    *(void *)&v10[8 * v17] = v19 | v18;
    *(void *)(v6[6] + 8 * v16) = v12;
    uint64_t v25 = v6[2];
    BOOL v13 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v13) {
      goto LABEL_28;
    }
    uint64_t v6[2] = v26;
LABEL_25:
    if (v9 == v8) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

void sub_1002DFA84(unint64_t a1)
{
}

void sub_1002DFAA0(unint64_t a1)
{
}

void sub_1002DFABC(unint64_t a1)
{
}

unint64_t sub_1002DFAD8(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  sub_1002E79EC();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_1002DFB58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_1002E7CD0();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    sub_1002E7B6C(v12 + 16 * v10);
    BOOL v14 = v14 && v13 == a3;
    if (v14 || (sub_1002E7804() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_1002E7CD0();
      if ((v19 & 1) == 0) {
        break;
      }
      sub_1002E7B6C(v12 + 16 * v10);
      BOOL v21 = v14 && v20 == a3;
      if (v21 || (sub_1002E7804() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1002E1AB0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1002DFCD0(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &unk_100586190, CXHandle_ptr, &unk_100588930);
}

uint64_t sub_1002DFCEC(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &unk_1005887B0, UNNotificationCategory_ptr, &qword_1005887C0);
}

uint64_t sub_1002DFD08(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_1002E7924();
    sub_1002E1D80(a2, v9, v13);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1002DFDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10020E4AC();
  Hasher._finalize()();
  sub_1002E79EC();
  unint64_t v8 = v7 & ~v6;
  uint64_t v35 = v5 + 56;
  uint64_t v36 = v5;
  uint64_t v32 = v2;
  uint64_t v33 = a1;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v34 = ~v6;
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    while (1)
    {
      uint64_t v11 = *(void *)(v36 + 48) + 56 * v8;
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      uint64_t v14 = *(void *)(v11 + 32);
      int v15 = *(unsigned __int8 *)(v11 + 40);
      uint64_t v16 = *(void **)(v11 + 48);
      BOOL v17 = *(void *)v11 == v9 && *(void *)(v11 + 8) == v10;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v18 = v12 == *(void *)(a2 + 16) && v13 == *(void *)(a2 + 24);
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && v14 == *(void *)(a2 + 32)
          && ((v15 ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0)
        {
          sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v19 = v16;
          char v20 = static NSObject.== infix(_:_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20) {
            break;
          }
        }
      }
      unint64_t v8 = (v8 + 1) & v34;
      if (((*(void *)(v35 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    sub_100253A68(a2);
    uint64_t v24 = *(void *)(*v32 + 48) + 56 * v8;
    uint64_t v25 = *(void *)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 24);
    uint64_t v28 = *(void *)(v24 + 32);
    char v29 = *(unsigned char *)(v24 + 40);
    uint64_t v30 = *(void **)(v24 + 48);
    *(void *)uint64_t v33 = *(void *)v24;
    *(void *)(v33 + 8) = v25;
    *(void *)(v33 + 16) = v26;
    *(void *)(v33 + 24) = v27;
    *(void *)(v33 + 32) = v28;
    *(unsigned char *)(v33 + 40) = v29;
    *(void *)(v33 + 48) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v30;
    return 0;
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v32;
    void *v32 = 0x8000000000000000;
    sub_100253A20(a2);
    sub_1002E1EA8(a2, v8, isUniquelyReferenced_nonNull_native);
    void *v32 = v37;
    swift_bridgeObjectRelease();
    long long v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v33 = *(_OWORD *)a2;
    *(_OWORD *)(v33 + 16) = v22;
    *(_OWORD *)(v33 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(v33 + 48) = *(void *)(a2 + 48);
    return 1;
  }
}

uint64_t sub_1002E008C(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &qword_10058A480, off_100502BA0, &unk_100588A48);
}

uint64_t sub_1002E00A8(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &unk_1005888A0, TUConversationMember_ptr, &unk_1005888B0);
}

uint64_t sub_1002E00C4(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &unk_100586E00, TUHandle_ptr, &unk_100588800);
}

uint64_t sub_1002E00E0()
{
  return sub_1002E0434();
}

void sub_1002E00F4()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCC88();
  uint64_t v11 = *v0;
  sub_1002E733C((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v29 = v4;
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_1002E79EC();
  unint64_t v14 = v13 & ~v12;
  uint64_t v28 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v25 = v6;
    uint64_t v26 = ~v12;
    uint64_t v24 = v9;
    BOOL v17 = *(void (**)(void, void, void))(v9 + 16);
    uint64_t v16 = v9 + 16;
    int v15 = v17;
    uint64_t v27 = *(void *)(v16 + 56);
    BOOL v18 = (void (**)(uint64_t, uint64_t))(v16 - 8);
    while (1)
    {
      uint64_t v19 = v11;
      char v20 = v15;
      v15(v1, *(void *)(v11 + 48) + v27 * v14, v7);
      sub_1002E733C((unint64_t *)&qword_1005858A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v22 = *v18;
      (*v18)(v1, v7);
      if (v21) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v26;
      uint64_t v11 = v19;
      int v15 = v20;
      if (((*(void *)(v28 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v25;
        uint64_t v9 = v24;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v29, v7);
    v20(v25, *(void *)(*v2 + 48) + v27 * v14, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    int v15 = *(void (**)(void, void, void))(v9 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15(v1, v29, v7);
    uint64_t v30 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1002E20FC(v1, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v29, v7);
  }
  sub_1001FCC08();
}

uint64_t sub_1002E03CC(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &qword_100587A90, TUConversationLink_ptr, &unk_1005889E8);
}

uint64_t sub_1002E03E8(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &qword_100589CA0, IRCandidate_ptr, &unk_100588970);
}

uint64_t sub_1002E0404(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &qword_100588810, TUCallRecordingSession_ptr, &qword_100588808);
}

uint64_t sub_1002E0420()
{
  return sub_1002E0434();
}

uint64_t sub_1002E0434()
{
  uint64_t v3 = v1;
  sub_1002545EC();
  uint64_t v4 = *v1;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_1002E7924();
    sub_1002E239C();
    *uint64_t v3 = v11;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != v0)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v8 + 8 * v7) != v0);
  }
  uint64_t result = 0;
LABEL_8:
  *uint64_t v2 = v0;
  return result;
}

uint64_t sub_1002E0530(uint64_t a1, uint64_t a2)
{
  return sub_1002E054C(a1, a2, &qword_100588840, TUCollaborationInitiator_ptr, &unk_100588848);
}

#error "1002E0710: call analysis failed (funcsize=166)"

void sub_1002E07E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1002E757C();
  if (!v13)
  {
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  unint64_t v14 = v12;
  sub_1001F081C(v11);
  uint64_t v25 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_14:
    swift_release();
LABEL_16:
    sub_100254544();
    return;
  }
  sub_1001F6204(0, v14);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v15 = v25;
    if (*(void *)(v25 + 24) <= *(void *)(v25 + 16))
    {
      sub_1002E18D0();
      uint64_t v15 = v25;
    }
    Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v18 = v16 & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v15 + 56 + 8 * (v18 >> 6))) == 0) {
      break;
    }
    sub_1002E7868();
LABEL_13:
    *(void *)(v20 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v15 + 48) + 8 * v21) = a11;
    ++*(void *)(v15 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_14;
    }
  }
  char v22 = 0;
  unint64_t v23 = (unint64_t)(63 - v17) >> 6;
  while (v19 + 1 != v23 || (v22 & 1) == 0)
  {
    sub_1002E7B10();
    if (!v24)
    {
      sub_1002E7854();
      goto LABEL_13;
    }
  }
  __break(1u);
}

void sub_1002E09A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1002E09BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t sub_1002E09D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C((uint64_t *)&unk_1005887F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_1002DF3E4(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

void sub_1002E0CB4()
{
}

uint64_t sub_1002E0CC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C((uint64_t *)&unk_1005887E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v7 = (uint64_t *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = -1 << v8;
    uint64_t v28 = v1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v6;
    uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = result + 56;
    if ((v9 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * i);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v11) {
        goto LABEL_32;
      }
      unint64_t v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        int64_t v5 = v15 + 1;
        if (v15 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v16 = v7[v5];
        if (!v16)
        {
          int64_t v5 = v15 + 2;
          if (v15 + 2 >= v11) {
            goto LABEL_32;
          }
          unint64_t v16 = v7[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63) {
                sub_1002DF3E4(0, v11, (void *)(v2 + 56));
              }
              else {
                *unint64_t v7 = v27;
              }
              uint64_t v1 = v28;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v11) {
                  goto LABEL_32;
                }
                unint64_t v16 = v7[v5];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1002E0F48()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C(&qword_1005889A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v36 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v35 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v37 = v2;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v38 = (v7 - 1) & v7;
    int64_t v39 = v10;
    for (unint64_t i = __clz(__rbit64(v7)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
    {
      uint64_t v16 = *(void *)(v2 + 48) + 56 * i;
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v19 = *(void *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 24);
      Swift::UInt v21 = *(void *)(v16 + 32);
      Swift::UInt8 v22 = *(unsigned char *)(v16 + 40);
      char v23 = *(void **)(v16 + 48);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      id v24 = v23;
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v8 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v8 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      uint64_t v33 = *(void *)(v4 + 48) + 56 * v28;
      *(void *)uint64_t v33 = v17;
      *(void *)(v33 + 8) = v18;
      *(void *)(v33 + 16) = v19;
      *(void *)(v33 + 24) = v20;
      *(void *)(v33 + 32) = v21;
      *(unsigned char *)(v33 + 40) = v22;
      *(void *)(v33 + 48) = v24;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v37;
      unint64_t v7 = v38;
      int64_t v10 = v39;
      if (v38) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v12 >= v35) {
        goto LABEL_32;
      }
      unint64_t v13 = v36[v12];
      int64_t v14 = v10 + 1;
      if (!v13)
      {
        int64_t v14 = v10 + 2;
        if (v10 + 2 >= v35) {
          goto LABEL_32;
        }
        unint64_t v13 = v36[v14];
        if (!v13)
        {
          int64_t v14 = v10 + 3;
          if (v10 + 3 >= v35) {
            goto LABEL_32;
          }
          unint64_t v13 = v36[v14];
          if (!v13)
          {
            uint64_t v15 = v10 + 4;
            if (v10 + 4 >= v35)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v34 = 1 << *(unsigned char *)(v2 + 32);
              if (v34 > 63) {
                sub_1002DF3E4(0, (unint64_t)(v34 + 63) >> 6, v36);
              }
              else {
                void *v36 = -1 << v34;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v13 = v36[v15];
            if (!v13)
            {
              while (1)
              {
                int64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v14 >= v35) {
                  goto LABEL_32;
                }
                unint64_t v13 = v36[v14];
                ++v15;
                if (v13) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v14 = v10 + 4;
          }
        }
      }
LABEL_20:
      uint64_t v38 = (v13 - 1) & v13;
      int64_t v39 = v14;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1002E12D8()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  os_log_type_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1001F081C(&qword_1005889F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    int64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_1002E733C((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_1002DF3E4(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                void *v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

void sub_1002E16D0()
{
}

void sub_1002E16DC()
{
  sub_1002E757C();
  sub_1002E76BC(v3, v4);
  sub_1002E7AAC();
  sub_1002E7AE8();
  if (v5)
  {
    int64_t v6 = 0;
    uint64_t v8 = (uint64_t *)(v2 + 56);
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v23 = -1 << v9;
    uint64_t v24 = v0;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & v7;
    uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v1 + 56;
    if ((v10 & v7) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    for (v11 &= v11 - 1; ; uint64_t v11 = (v15 - 1) & v15)
    {
      unint64_t v17 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v1 + 32));
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) == 0)
      {
        sub_100283EE8();
        while (1)
        {
          sub_1002E790C();
          if (v22)
          {
            if (v19) {
              break;
            }
          }
          if (v20 == v21) {
            uint64_t v20 = 0;
          }
          if (*(void *)(v13 + 8 * v20) != -1)
          {
            sub_100283EA0();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_100283F1C();
LABEL_31:
      sub_1002E7790(v18);
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_39;
      }
      if (v14 >= v12) {
        goto LABEL_33;
      }
      uint64_t v15 = v8[v14];
      ++v6;
      if (!v15)
      {
        int64_t v6 = v14 + 1;
        if (v14 + 1 >= v12) {
          goto LABEL_33;
        }
        uint64_t v15 = v8[v6];
        if (!v15)
        {
          int64_t v6 = v14 + 2;
          if (v14 + 2 >= v12) {
            goto LABEL_33;
          }
          uint64_t v15 = v8[v6];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v12)
            {
LABEL_33:
              if (v25 > 63) {
                sub_1002DF3E4(0, v12, (void *)(v2 + 56));
              }
              else {
                *uint64_t v8 = v23;
              }
              uint64_t v0 = v24;
              *(void *)(v2 + 16) = 0;
              break;
            }
            uint64_t v15 = v8[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v6 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_40;
                }
                if (v6 >= v12) {
                  goto LABEL_33;
                }
                uint64_t v15 = v8[v6];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v6 = v16;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  swift_release();
  void *v0 = v1;
  sub_100254544();
}

void sub_1002E18D0()
{
  sub_1002E7700();
  sub_1002E76BC(v2, v3);
  uint64_t v4 = sub_1002E7AAC();
  uint64_t v5 = (void *)v4;
  if (*(void *)(v1 + 16))
  {
    uint64_t v25 = v0;
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = (void *)(v1 + 56);
    if (v6 < 64) {
      uint64_t v8 = ~(-1 << v6);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v1 + 56);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v11 = v4 + 56;
    swift_retain();
    int64_t v12 = 0;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    sub_1002E7A40();
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
      NSObject._rawHashValue(seed:)(v5[5]);
      sub_1002E78D4();
      if (v17)
      {
        sub_100283EE8();
        while (1)
        {
          sub_1002E790C();
          if (v17)
          {
            if (v19) {
              break;
            }
          }
          if (v20 == v21) {
            uint64_t v20 = 0;
          }
          if (*(void *)(v11 + 8 * v20) != -1)
          {
            sub_100283EA0();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_100283F1C();
LABEL_31:
      sub_1002E78F0(v18);
      *(void *)(v5[6] + 8 * v22) = v16;
      ++v5[2];
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_39;
      }
      if (v14 >= v10) {
        goto LABEL_33;
      }
      ++v12;
      if (!v7[v14])
      {
        int64_t v12 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_33;
        }
        if (!v7[v12])
        {
          int64_t v12 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_33;
          }
          if (!v7[v12])
          {
            int64_t v15 = v14 + 3;
            if (v15 >= v10)
            {
LABEL_33:
              swift_release();
              uint64_t v0 = v25;
              uint64_t v23 = 1 << *(unsigned char *)(v1 + 32);
              if (v23 > 63)
              {
                sub_1002DF3E4(0, (unint64_t)(v23 + 63) >> 6, (void *)(v1 + 56));
              }
              else
              {
                sub_1002E79EC();
                *uint64_t v7 = v24;
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v7[v15])
            {
              while (1)
              {
                int64_t v12 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_40;
                }
                if (v12 >= v10) {
                  goto LABEL_33;
                }
                ++v15;
                if (v7[v12]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v15;
          }
        }
      }
LABEL_20:
      sub_1002E7A94();
    }
  }
  swift_release();
  void *v0 = v5;
  sub_1002E76E4();
}

void sub_1002E1AB0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1002E09D8();
  }
  else
  {
    if (v10 > v9)
    {
      sub_1002E249C();
      goto LABEL_22;
    }
    sub_1002E2EA4();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  *uint64_t v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

void sub_1002E1C4C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  sub_1002E7AD0();
  if (!v7 & v6 && (v3 & 1) != 0) {
    goto LABEL_15;
  }
  if (v3)
  {
    sub_1002E18D0();
  }
  else
  {
    if (v5 > v4)
    {
      sub_1002E2D8C();
      goto LABEL_15;
    }
    sub_1002E3C98();
  }
  uint64_t v8 = *v0;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v0 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = v9 & ~v10;
  sub_1002E7B98();
  if (v12)
  {
    sub_1001F6204(0, v2);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v11);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
LABEL_14:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v15 = ~v10;
      while (1)
      {
        uint64_t v11 = (v11 + 1) & v15;
        sub_1002E7B98();
        if ((v16 & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v8 + 48) + 8 * v11);
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  sub_1002E7670(*v0);
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v20;
    sub_1001FCC08();
  }
}

uint64_t sub_1002E1D80(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1002E0CC0();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1002E25D0();
      goto LABEL_14;
    }
    sub_1002E3150();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_1002E1EA8(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_24;
  }
  if (a3)
  {
    sub_1002E0F48();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_1002E2768();
      goto LABEL_24;
    }
    sub_1002E33B4();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  sub_10020E4AC();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  uint64_t v30 = v8 + 56;
  uint64_t v31 = v8;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v29 = ~v9;
    uint64_t v10 = *(void *)v5;
    uint64_t v11 = *(void *)(v5 + 8);
    do
    {
      uint64_t v12 = *(void *)(v31 + 48) + 56 * a2;
      uint64_t result = *(void *)v12;
      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      uint64_t v15 = *(void *)(v12 + 32);
      int v16 = *(unsigned __int8 *)(v12 + 40);
      id v17 = *(void **)(v12 + 48);
      BOOL v18 = *(void *)v12 == v10 && *(void *)(v12 + 8) == v11;
      if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        BOOL v19 = v13 == *(void *)(v5 + 16) && v14 == *(void *)(v5 + 24);
        if (v19 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v15 == *(void *)(v5 + 32) && ((v16 ^ *(unsigned __int8 *)(v5 + 40)) & 1) == 0)
          {
            sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v20 = v17;
            char v21 = static NSObject.== infix(_:_:)();

            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v21) {
              goto LABEL_27;
            }
          }
        }
      }
      a2 = (a2 + 1) & v29;
    }
    while (((*(void *)(v30 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_24:
  uint64_t v22 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v23 = *(void *)(v22 + 48) + 56 * a2;
  long long v24 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v5;
  *(_OWORD *)(v23 + 16) = v24;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v5 + 32);
  *(void *)(v23 + 48) = *(void *)(v5 + 48);
  uint64_t v25 = *(void *)(v22 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v22 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_27:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002E20FC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1002E12D8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E2970();
      goto LABEL_12;
    }
    sub_1002E3734();
  }
  uint64_t v12 = *v3;
  sub_1002E733C((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    id v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1002E733C((unint64_t *)&qword_1005858A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002E239C()
{
  sub_1002E7AD0();
  if (!v7 & v6 && (v2 & 1) != 0) {
    goto LABEL_15;
  }
  if (v2)
  {
    sub_1002E16DC();
  }
  else
  {
    if (v5 > v4)
    {
      sub_1002E2C2C(v3);
      goto LABEL_15;
    }
    sub_1002E3AE0();
  }
  uint64_t v8 = *v1;
  uint64_t v9 = static Hasher._hash(seed:_:)();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = *(void *)(v8 + 48);
    if (*(void *)(v12 + 8 * v11) == v0)
    {
LABEL_14:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * v11) == v0) {
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  sub_1002E7670(*v1);
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v15;
  }
}

void sub_1002E249C()
{
  sub_1002E79A4();
  sub_1001F081C((uint64_t *)&unk_1005887F0);
  sub_1002E7AF4();
  sub_1002E7AE8();
  if (!v6)
  {
LABEL_26:
    swift_release();
    void *v0 = v0;
    sub_1002E7968();
    return;
  }
  char v7 = (void *)sub_1002E7598();
  if (v10) {
    BOOL v11 = (unint64_t)v7 >= v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    memmove(v7, v2, 8 * v8);
  }
  sub_1002E75E0();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1002E7B54();
  while (1)
  {
    uint64_t v15 = (void *)(*(void *)(v1 + 48) + 16 * v12);
    uint64_t v16 = v15[1];
    id v17 = (void *)(v0[6] + 16 * v12);
    void *v17 = *v15;
    v17[1] = v16;
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*((void *)v2 + v13))
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*((void *)v2 + v4))
      {
        uint64_t v4 = v13 + 2;
        if (v13 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*((void *)v2 + v4)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1002E7A7C();
  }
  uint64_t v14 = v13 + 3;
  if (v14 >= v3) {
    goto LABEL_26;
  }
  if (*((void *)v2 + v14))
  {
    uint64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v14;
    if (*((void *)v2 + v4)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E25C4()
{
  return sub_1002E2C2C((uint64_t *)&unk_100588960);
}

void *sub_1002E25D0()
{
  uint64_t v1 = v0;
  sub_1001F081C((uint64_t *)&unk_1005887E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * i) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v12 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002E2768()
{
  uint64_t v1 = v0;
  sub_1001F081C(&qword_1005889A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = 56 * i;
    uint64_t v21 = *(void *)(v2 + 48) + v20;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
    uint64_t v25 = *(void *)(v21 + 32);
    char v26 = *(unsigned char *)(v21 + 40);
    uint64_t v27 = *(void **)(v21 + 48);
    uint64_t v28 = *(void *)(v4 + 48) + v20;
    *(void *)uint64_t v28 = *(void *)v21;
    *(void *)(v28 + 8) = v22;
    *(void *)(v28 + 16) = v23;
    *(void *)(v28 + 24) = v24;
    *(void *)(v28 + 32) = v25;
    *(unsigned char *)(v28 + 40) = v26;
    *(void *)(v28 + 48) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v27;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1002E2958()
{
}

void sub_1002E2964()
{
}

void *sub_1002E2970()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F081C(&qword_1005889F8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    uint64_t *v1 = v8;
    return result;
  }
  id result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v24 = v1;
  uint64_t v25 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    id result = memmove(result, v25, 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v15 = -1;
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  unint64_t v16 = v15 & v14;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  if ((v15 & v14) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    unint64_t v22 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v22, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v22, v5, v2);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v26) {
        goto LABEL_28;
      }
      unint64_t v20 = *((void *)v25 + v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v26) {
          goto LABEL_28;
        }
        unint64_t v20 = *((void *)v25 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v16 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v26)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  unint64_t v20 = *((void *)v25 + v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v12);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1002E2C20()
{
  return sub_1002E2C2C((uint64_t *)&unk_100588850);
}

void *sub_1002E2C2C(uint64_t *a1)
{
  sub_1001F081C(a1);
  sub_1002E7AF4();
  sub_1002E7AE8();
  if (!v4)
  {
LABEL_28:
    id result = (void *)swift_release();
    void *v1 = v1;
    return result;
  }
  id result = (void *)sub_1002E7598();
  if (v8) {
    BOOL v9 = (unint64_t)result >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    id result = memmove(result, v3, 8 * v6);
  }
  int64_t v10 = 0;
  v1[2] = *(void *)(v2 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v2 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(void *)(v1[6] + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *((void *)v3 + v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *((void *)v3 + v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *((void *)v3 + v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *((void *)v3 + v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *((void *)v3 + v10);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1002E2D8C()
{
  sub_1002E79A4();
  sub_1001F081C(v6);
  sub_1002E7AF4();
  sub_1002E7AE8();
  if (!v7)
  {
LABEL_26:
    swift_release();
    void *v0 = v0;
    sub_1002E7968();
    return;
  }
  char v8 = (void *)sub_1002E7598();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    memmove(v8, v2, 8 * v9);
  }
  sub_1002E75E0();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1002E7B54();
  while (1)
  {
    unint64_t v16 = *(void **)(*(void *)(v1 + 48) + 8 * v13);
    *(void *)(v0[6] + 8 * v13) = v16;
    id v17 = v16;
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*((void *)v2 + v14))
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*((void *)v2 + v4))
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*((void *)v2 + v4)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1002E7A7C();
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v3) {
    goto LABEL_26;
  }
  if (*((void *)v2 + v15))
  {
    uint64_t v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v15;
    if (*((void *)v2 + v4)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002E2EA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C((uint64_t *)&unk_1005887F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1002E3150()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C((uint64_t *)&unk_1005887E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * i);
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1002E33B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C(&qword_1005889A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v35 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v36 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v37 = v2;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v38 = (v7 - 1) & v7;
  int64_t v39 = v10;
  for (unint64_t i = __clz(__rbit64(v7)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    uint64_t v16 = *(void *)(v2 + 48) + 56 * i;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = *(void *)(v16 + 24);
    Swift::UInt v21 = *(void *)(v16 + 32);
    Swift::UInt8 v22 = *(unsigned char *)(v16 + 40);
    unint64_t v23 = *(void **)(v16 + 48);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v24 = v23;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v22);
    id v25 = v24;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v8 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t v34 = *(void *)(v4 + 48) + 56 * v29;
    *(void *)uint64_t v34 = v17;
    *(void *)(v34 + 8) = v18;
    *(void *)(v34 + 16) = v19;
    *(void *)(v34 + 24) = v20;
    *(void *)(v34 + 32) = v21;
    *(unsigned char *)(v34 + 40) = v22;
    *(void *)(v34 + 48) = v25;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v37;
    unint64_t v7 = v38;
    int64_t v10 = v39;
    if (v38) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v12 >= v36) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    int64_t v14 = v10 + 1;
    if (!v13)
    {
      int64_t v14 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v10 + 3;
        if (v10 + 3 >= v36) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v38 = (v13 - 1) & v13;
    int64_t v39 = v14;
  }
  uint64_t v15 = v10 + 4;
  if (v10 + 4 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    goto LABEL_34;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1002E3728()
{
}

uint64_t sub_1002E3734()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1001F081C(&qword_1005889F8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_1002E733C((unint64_t *)&qword_1005873E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1002E3AE0()
{
  sub_1002E7700();
  uint64_t v4 = sub_1002E76BC(v2, v3);
  static _SetStorage.resize(original:capacity:move:)();
  sub_1002E7AE8();
  if (!v5)
  {
    swift_release();
LABEL_35:
    uint64_t *v0 = v4;
    sub_1002E76E4();
    return;
  }
  uint64_t v22 = v0;
  int64_t v6 = 0;
  uint64_t v7 = v1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  sub_1002E7A40();
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    static Hasher._hash(seed:_:)();
    sub_1002E78D4();
    if (v16)
    {
      sub_100283EE8();
      while (1)
      {
        sub_1002E790C();
        if (v16)
        {
          if (v18) {
            break;
          }
        }
        if (v19 == v20) {
          uint64_t v19 = 0;
        }
        if (*(void *)(v4 + 56 + 8 * v19) != -1)
        {
          sub_100283EA0();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sub_100283F1C();
LABEL_31:
    sub_1002E78F0(v17);
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v15;
    ++*(void *)(v4 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_37;
    }
    if (v13 >= v11) {
      goto LABEL_33;
    }
    ++v6;
    if (!*(void *)(v7 + 8 * v13))
    {
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v11) {
        goto LABEL_33;
      }
      if (!*(void *)(v7 + 8 * v6))
      {
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v11) {
          goto LABEL_33;
        }
        if (!*(void *)(v7 + 8 * v6)) {
          break;
        }
      }
    }
LABEL_20:
    sub_1002E7A94();
  }
  int64_t v14 = v13 + 3;
  if (v14 >= v11)
  {
LABEL_33:
    swift_release();
    uint64_t v0 = v22;
    goto LABEL_35;
  }
  if (*(void *)(v7 + 8 * v14))
  {
    int64_t v6 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_33;
    }
    ++v14;
    if (*(void *)(v7 + 8 * v6)) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_1002E3C98()
{
  sub_1002E7700();
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1001F081C(v3);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v4;
  if (!*(void *)(v2 + 16))
  {
    swift_release();
LABEL_35:
    uint64_t *v1 = v5;
    sub_1002E76E4();
    return;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v7 = v2 + 56;
  if (v6 < 64) {
    uint64_t v8 = ~(-1 << v6);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v11 = v4 + 56;
  swift_retain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  sub_1002E7BE0();
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    Swift::Int v18 = *(void *)(v5 + 40);
    *(id *)(*(void *)(v2 + 48) + 8 * i);
    unint64_t v19 = NSObject._rawHashValue(seed:)(v18) & ~(-1 << *(unsigned char *)(v5 + 32));
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      sub_100283EE8();
      while (1)
      {
        sub_1002E790C();
        if (v23)
        {
          if (v20) {
            break;
          }
        }
        if (v21 == v22) {
          uint64_t v21 = 0;
        }
        if (*(void *)(v11 + 8 * v21) != -1)
        {
          sub_100283EA0();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sub_100283F1C();
LABEL_31:
    sub_1002E7820();
    *(void *)(v11 + v24) |= v25;
    sub_1002E7A28(v26);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

char *sub_1002E3EA4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002E4164(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1002E3EC4()
{
  sub_1002E4C44();
  void *v0 = v1;
}

char *sub_1002E3F14(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002E42B8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1002E3F34()
{
  sub_1002E43A4();
  void *v0 = v1;
}

size_t sub_1002E3F84(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1002E447C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_1002E3FA4(char a1, uint64_t a2, char a3)
{
  sub_1002E49A4(a1, a2, a3, *v3, &qword_100588A40);
  *uint64_t v3 = v4;
}

char *sub_1002E3FD4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1002E4630(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_1002E3FF4(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1002E471C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_1002E4014(char a1, uint64_t a2, char a3)
{
  sub_1002E48CC(a1, a2, a3, *v3, (uint64_t *)&unk_100588770);
  *uint64_t v3 = v4;
}

void sub_1002E4044(char a1, uint64_t a2, char a3)
{
  sub_1002E48CC(a1, a2, a3, *v3, &qword_100588A60);
  *uint64_t v3 = v4;
}

void sub_1002E4074(char a1, uint64_t a2, char a3)
{
  sub_1002E49A4(a1, a2, a3, *v3, (uint64_t *)&unk_100588990);
  *uint64_t v3 = v4;
}

char *sub_1002E40A4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1002E4A7C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1002E40C4(char a1, uint64_t a2, char a3)
{
  sub_1002E48CC(a1, a2, a3, *v3, (uint64_t *)&unk_10058C0B0);
  *uint64_t v3 = v4;
}

char *sub_1002E40F4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1002E4B60(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1002E4114()
{
  sub_1002E4C44();
  void *v0 = v1;
}

char *sub_1002E4164(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C(&qword_100588A58);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1002DE220(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DE83C(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void sub_1002E4250()
{
}

void sub_1002E4284()
{
}

char *sub_1002E42B8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C((uint64_t *)&unk_10058C150);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1002DE318(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DE9F8((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_1002E43A4()
{
  sub_1002E7C48();
  if (v6)
  {
    sub_1002E7844();
    if (v8 != v9)
    {
      sub_1002E7C1C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1002E7834();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_1001F081C(v5);
    int64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    int64_t v12 = _swiftEmptyArrayStorage;
  }
  int64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

size_t sub_1002E447C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1001F081C(&qword_100588A50);
  uint64_t v10 = *(void *)(type metadata accessor for Caption() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  size_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for Caption() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = a4 + v16;
  if (v5)
  {
    sub_1002DE3C4(v17, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DECC4(v17, v8, (unint64_t)v13 + v16);
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1002E4630(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C((uint64_t *)&unk_100588A20);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  size_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1002DE4C4(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DEDDC((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

size_t sub_1002E471C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1001F081C((uint64_t *)&unk_1005887D0);
  uint64_t v10 = *(void *)(sub_1001F081C((uint64_t *)&unk_100587050) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  size_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_1001F081C((uint64_t *)&unk_100587050) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = a4 + v16;
  if (v5)
  {
    sub_1002DE698(v17, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DEEC0(v17, v8, (unint64_t)v13 + v16);
  }
  swift_release();
  return (size_t)v13;
}

void sub_1002E48CC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    sub_1002E7844();
    if (v8 != v9)
    {
      sub_1002E7C1C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1002E7834();
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_1001F081C(a5);
    unint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  int64_t v14 = (char *)sub_1002E7B78();
  if (a1)
  {
    sub_1002DE52C(v14, v15, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DF148((uint64_t)v14, v15);
  }
  swift_release();
}

void sub_1002E49A4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    sub_1002E7844();
    if (v8 != v9)
    {
      sub_1002E7C1C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1002E7834();
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_1001F081C(a5);
    unint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  int64_t v14 = (char *)sub_1002E7B78();
  if (a1)
  {
    sub_1002DE590(v14, v15, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DEFDC((uint64_t)v14, v15);
  }
  swift_release();
}

char *sub_1002E4A7C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C(&qword_100588870);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1002DE1C4(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DF088((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

char *sub_1002E4B60(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1001F081C(&qword_100588868);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  size_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1002DE590(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002DF208(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void sub_1002E4C44()
{
  sub_1002E7C48();
  if (v6)
  {
    sub_1002E7844();
    if (v8 != v9)
    {
      sub_1002E7C1C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1002E7834();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_1001F081C(v5);
    unint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    unint64_t v12 = _swiftEmptyArrayStorage;
  }
  int64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

uint64_t sub_1002E4D20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1002E4D58(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v5 = (uint64_t *)((char *)&v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1002DF3E4(0, v4, v5);
    sub_1002CF5A8((uint64_t)v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    sub_1002DF3E4(0, v4, v7);
    sub_1002CF5A8((uint64_t)v7, v4, v2);
    uint64_t v2 = v8;
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1002E4EBC(uint64_t isStackAllocationSafe, uint64_t (*a2)(void *))
{
  if ((*(unsigned char *)(isStackAllocationSafe + 32) & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v4 = sub_1002E79B8();
    uint64_t v5 = a2(v4);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    swift_slowAlloc();
    uint64_t v6 = sub_1002E79B8();
    uint64_t v5 = a2(v6);
    swift_release();
    swift_slowDealloc();
  }
  return v5;
}

void sub_1002E4FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_20:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 value];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    swift_bridgeObjectRelease();
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      if ([v14 type] == (id)3)
      {

LABEL_28:
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v23++, 1))
        {
          __break(1u);
LABEL_31:
          swift_retain();
          sub_1002E5688();
          return;
        }
      }
      else
      {
        id v20 = [v14 type];

        if (v20 == (id)2) {
          goto LABEL_28;
        }
      }
    }
    else
    {
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v11 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_20;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v24) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_33:
  __break(1u);
}

void sub_1002E5238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
LABEL_4:
  uint64_t v23 = v4;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v5 << 6);
LABEL_18:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 value];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    swift_bridgeObjectRelease();
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      NSString v20 = [v14 value];
      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      unsigned __int8 v21 = [v20 destinationIdIsTemporary];

      if ((v21 & 1) == 0)
      {
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v4 = v23 + 1;
        if (!__OFADD__(v23, 1)) {
          goto LABEL_4;
        }
        __break(1u);
LABEL_33:
        swift_retain();
        sub_1002E5688();
        return;
      }
    }
    else
    {
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v5 >= v25) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v5);
  if (v12)
  {
LABEL_17:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
    goto LABEL_18;
  }
  int64_t v13 = v5 + 1;
  if (v5 + 1 >= v25) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v5 + 2;
  if (v5 + 2 >= v25) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v5 + 3;
  if (v5 + 3 >= v25) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v5 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v5 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v5 >= v25) {
      goto LABEL_33;
    }
    unint64_t v12 = *(void *)(v24 + 8 * v5);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }
LABEL_35:
  __break(1u);
}

void sub_1002E54A8()
{
}

void sub_1002E54B4()
{
  sub_1001FCC38();
  if (!v2)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v4 = v2;
  if (*(void *)(v3 + 16) == v2)
  {
LABEL_37:
    sub_1001FCC08();
    return;
  }
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  sub_1001F081C((uint64_t *)&unk_100588960);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = v7;
  if (v5 < 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v6;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v7 + 56;
  while (1)
  {
    if (v9)
    {
      sub_1002E7BF4();
      goto LABEL_24;
    }
    uint64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_40;
    }
    if (v12 >= v5) {
      goto LABEL_36;
    }
    ++v10;
    if (!v6[v12])
    {
      uint64_t v10 = v12 + 1;
      if (v12 + 1 >= v5) {
        goto LABEL_36;
      }
      if (!v6[v10])
      {
        uint64_t v10 = v12 + 2;
        if (v12 + 2 >= v5) {
          goto LABEL_36;
        }
        if (!v6[v10]) {
          break;
        }
      }
    }
LABEL_23:
    sub_1002E7C08();
LABEL_24:
    unint64_t v14 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v8 + 32));
    if (((-1 << v14) & ~*(void *)(v11 + 8 * (v14 >> 6))) == 0)
    {
      sub_100283EE8();
      while (1)
      {
        sub_1002E790C();
        if (v18)
        {
          if (v15) {
            break;
          }
        }
        if (v16 == v17) {
          uint64_t v16 = 0;
        }
        if (*(void *)(v11 + 8 * v16) != -1)
        {
          sub_100283EA0();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_100283F1C();
LABEL_34:
    sub_1002E7820();
    sub_1002E7790(v19);
    if (__OFSUB__(v4--, 1)) {
      goto LABEL_39;
    }
    if (!v4) {
      goto LABEL_36;
    }
  }
  uint64_t v13 = v12 + 3;
  if (v13 >= v5) {
    goto LABEL_36;
  }
  if (v6[v13])
  {
    uint64_t v10 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v10 >= v5) {
      goto LABEL_36;
    }
    ++v13;
    if (v6[v10]) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_1002E567C()
{
}

void sub_1002E5688()
{
  sub_1002E7700();
  uint64_t v5 = v3;
  if (!v2)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v6 = v2;
  if (*(void *)(v3 + 16) == v2)
  {
LABEL_37:
    sub_1002E76E4();
    return;
  }
  uint64_t v7 = v1;
  uint64_t v8 = v0;
  sub_1001F081C(v4);
  uint64_t v9 = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = v9;
  char v29 = v8;
  if (v7 < 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *v8;
  }
  uint64_t v12 = 0;
  uint64_t v13 = v9 + 56;
  while (1)
  {
    if (v11)
    {
      sub_1002E7BE0();
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v16 >= v7) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v7) {
        goto LABEL_36;
      }
      unint64_t v17 = v29[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v7) {
          goto LABEL_36;
        }
        unint64_t v17 = v29[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v10 + 40);
    *(id *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v20 = NSObject._rawHashValue(seed:)(v19) & ~(-1 << *(unsigned char *)(v10 + 32));
    if (((-1 << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) == 0)
    {
      sub_100283EE8();
      while (1)
      {
        sub_1002E790C();
        if (v24)
        {
          if (v21) {
            break;
          }
        }
        if (v22 == v23) {
          uint64_t v22 = 0;
        }
        if (*(void *)(v13 + 8 * v22) != -1)
        {
          sub_100283EA0();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_100283F1C();
LABEL_34:
    sub_1002E7820();
    *(void *)(v13 + v25) |= v26;
    sub_1002E7A28(v27);
    if (__OFSUB__(v6--, 1)) {
      goto LABEL_39;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v7) {
    goto LABEL_36;
  }
  unint64_t v17 = v29[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v7) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_1002E5874(void *a1)
{
  return sub_1001F612C(a1, (SEL *)&selRef_normalizedValue);
}

uint64_t sub_1002E5880(void *a1)
{
  id v1 = [a1 remoteParticipantHandles];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_1001F6204(0, (unint64_t *)&unk_1005858E0);
  sub_100210D5C(&qword_100588888, (unint64_t *)&unk_1005858E0);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1002E591C(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a4 setBlockIncomingCommunication:a1 & 1 forEmailAddress:v6];
}

uint64_t sub_1002E5998(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.count.getter();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

#error "1002E5A98: call analysis failed (funcsize=83)"

uint64_t sub_1002E5B14(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74(&qword_1005888F8, &qword_1005888F0);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_1005888F0);
            uint64_t v10 = sub_1002E6C90();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEB60((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

#error "1002E5DB8: call analysis failed (funcsize=83)"

uint64_t sub_1002E5E34(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74((unint64_t *)&unk_100588A30, &qword_100586A98);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_100586A98);
            uint64_t v10 = sub_1002E6CDC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1002E5FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002E606C(a1, a2, a3, (uint64_t)type metadata accessor for AnyAudioInterruptionProvider, (uint64_t)&unk_100588A08, (uint64_t)&unk_100588A00, (uint64_t)sub_1002E6D28, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_1002E6030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002E606C(a1, a2, a3, (uint64_t)type metadata accessor for AVAudioSessionInterruptionProvider, (uint64_t)&unk_100588A18, (uint64_t)&unk_100588A10, (uint64_t)sub_1002E6D74, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_1002E606C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10025431C();
  a25 = v26;
  a26 = v28;
  unint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v27;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  unint64_t v40 = (unint64_t)v27 >> 62;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0) {
      uint64_t v41 = v27;
    }
    else {
      uint64_t v41 = v27 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_1002544EC();
    if (!v41) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v41)
    {
LABEL_16:
      sub_1002E7894();
      sub_100254338();
      return;
    }
  }
  if (v39)
  {
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42 <= v37)
      {
        if (v41 >= 1)
        {
          uint64_t v43 = sub_1001FCB74(v34, v32);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v41; ++i)
          {
            uint64_t v45 = sub_1001F081C(v32);
            uint64_t v46 = (void (*)(char *, void))v30(&a11, i, v35, v45, v43);
            uint64_t v48 = *v47;
            swift_retain();
            v46(&a11, 0);
            *(void *)(v39 + 8 * i) = v48;
          }
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v37)
      {
        sub_1002DEB60((v35 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10));
        goto LABEL_16;
      }
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
}

#error "1002E62E8: call analysis failed (funcsize=83)"

uint64_t sub_1002E6364(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74(&qword_100588788, &qword_100588780);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_100588780);
            uint64_t v10 = sub_1002E6CDC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E6524(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74((unint64_t *)&unk_100588980, &qword_100588978);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_100588978);
            uint64_t v10 = sub_1002E6CDC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E66E4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74((unint64_t *)&unk_100588940, &qword_100588938);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_100588938);
            uint64_t v10 = sub_1002E6C24(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E68A4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74(&qword_100588910, &qword_100588908);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_100588908);
            uint64_t v10 = sub_1002E6CDC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E6A64(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001FCB74(&qword_1005888E0, &qword_1005888D8);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_1001F081C(&qword_1005888D8);
            uint64_t v10 = sub_1002E6CDC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1002DEC10((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1002E6C24(void *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1002E6E24(v6, a2, a3);
  return sub_1002E6C8C;
}

uint64_t (*sub_1002E6C90())()
{
  id v1 = sub_1002E7544();
  uint64_t v2 = sub_1002E7530((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1002E6EA4(v2, v3, v4);
  return sub_1002E6C8C;
}

uint64_t (*sub_1002E6CDC())()
{
  id v1 = sub_1002E7544();
  uint64_t v2 = sub_1002E7530((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1002E6EFC(v2, v3, v4);
  return sub_1002E6C8C;
}

uint64_t (*sub_1002E6D28())()
{
  id v1 = sub_1002E7544();
  uint64_t v2 = sub_1002E7530((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1002E6F54(v2, v3, v4);
  return sub_1002E6C8C;
}

uint64_t (*sub_1002E6D74(uint64_t **a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1002E6FBC(v6, a2, a3);
  return sub_1002E6C8C;
}

void sub_1002E6DDC(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1002E6E24(void *a1, unint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_1002DE1A0(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return j__s13callservicesd28SimulatedConversationManagerC20SimulatedParticipantVwxx;
}

void (*sub_1002E6EA4(uint64_t a1, unint64_t a2, uint64_t a3))(id *a1)
{
  sub_1002E7508(a1, a2, a3);
  if (v4) {
    uint64_t v5 = sub_1002E77B4();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1002E787C();
  }
  *unint64_t v3 = v5;
  return destroy for SimulatedConversationManager.SimulatedParticipant;
}

void (*sub_1002E6EFC(uint64_t a1, unint64_t a2, uint64_t a3))(id *)
{
  sub_1002E7508(a1, a2, a3);
  if (v4) {
    uint64_t v5 = sub_1002E77B4();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1002E787C();
  }
  *unint64_t v3 = v5;
  return j__s13callservicesd28SimulatedConversationManagerC20SimulatedParticipantVwxx;
}

uint64_t (*sub_1002E6F54(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  sub_1002E7508(a1, a2, a3);
  if (v4) {
    uint64_t v5 = sub_1002E77B4();
  }
  else {
    uint64_t v5 = swift_retain();
  }
  *unint64_t v3 = v5;
  return sub_1002E6FB4;
}

uint64_t sub_1002E6FB4()
{
  return swift_release();
}

uint64_t (*sub_1002E6FBC(uint64_t *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v4 = a3 & 0xC000000000000001;
  sub_1002DE1A0(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v4) {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v5 = swift_retain();
  }
  *a1 = v5;
  return sub_1002E74B0;
}

uint64_t sub_1002E703C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v20[3] = sub_1001F6204(0, (unint64_t *)&unk_10058B6D0);
  v20[4] = &off_1005141D0;
  v20[0] = a2;
  uint64_t v8 = *(void *)(a4 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24);
  uint64_t v9 = *(void *)(a4 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32);
  sub_100204074((void *)(a4 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource), v8);
  id v10 = a2;
  id v11 = sub_1002D9E40();
  uint64_t v12 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v9 + 16))(v11, v8, v9);

  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a1;
  void v19[5] = v20;
  uint64_t v13 = *(void *)(sub_1002D1464((uint64_t)sub_1002E7228, v19, v12) + 16);
  swift_bridgeObjectRelease();
  if (qword_100583A28 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_1001F5F88(v14, (uint64_t)qword_100594C70);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 134217984;
    v19[7] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Calculating current badge value for Clarity Board %ld", v17, 0xCu);
    swift_slowDealloc();
  }

  sub_1002018DC((uint64_t)v20);
  return v13;
}

uint64_t sub_1002E7228(void *a1)
{
  return sub_1002DD564(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40)) & 1;
}

uint64_t sub_1002E724C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002E7284(uint64_t a1)
{
  sub_1002DA330(a1, *(void **)(v1 + 16));
}

uint64_t sub_1002E728C(uint64_t a1)
{
  return sub_1002DA528(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1002E72AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_1005878F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1002E7314(uint64_t a1)
{
  sub_1002D57E0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1002E731C(id *a1)
{
  return sub_1002D3CFC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1002E733C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E7384()
{
  uint64_t v1 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

void sub_1002E7428()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_1002DCE88(v2, v3);
}

void *sub_1002E74C8@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_1002E74E4()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

unint64_t sub_1002E7508(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1002DE1A0(a2, (a3 & 0xC000000000000001) == 0, a3);
}

uint64_t sub_1002E7530(uint64_t result)
{
  void *v1 = result;
  return result;
}

void *sub_1002E7544()
{
  return malloc(0x28uLL);
}

uint64_t sub_1002E7564()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1002E7598()
{
  return v0 + 56;
}

void sub_1002E75E0()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_1002E761C()
{
  return v0;
}

void sub_1002E763C(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(void *)(*(void *)(v3 + 48) + 8 * v1) = v2;
  ++*(void *)(v3 + 16);
}

void sub_1002E7670(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8 * (v2 >> 6) + 56) |= 1 << v2;
  *(void *)(*(void *)(a1 + 48) + 8 * v2) = v1;
}

uint64_t sub_1002E76BC(uint64_t a1, uint64_t *a2)
{
  return sub_1001F081C(a2);
}

uint64_t sub_1002E771C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(void *)(a1 + 16) + 32;
}

uint64_t *sub_1002E7734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_1002E777C(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void sub_1002E7790(uint64_t a1@<X8>)
{
  *(void *)(v5 + v1) |= v2;
  *(void *)(*(void *)(v3 + 48) + 8 * a1) = v4;
  ++*(void *)(v3 + 16);
}

uint64_t sub_1002E77B4()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

void sub_1002E77F0()
{
  *(void *)(v0 + 8 * v1) = v2;
}

uint64_t sub_1002E7804()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id sub_1002E787C()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t sub_1002E7894()
{
  return v0;
}

void sub_1002E78F0(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v1 << a1;
}

void sub_1002E7924()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_1002E7940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_1002E054C(va, v4, v5, v6, v7);
}

uint64_t sub_1002E797C()
{
  return swift_dynamicCast();
}

void *sub_1002E79B8()
{
  sub_1002DF3E4(0, v0, v1);
  return v1;
}

uint64_t sub_1002E79F8()
{
  return v0;
}

void sub_1002E7A28(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v2 + 48) + 8 * a1) = v1;
  ++*(void *)(v2 + 16);
}

uint64_t sub_1002E7A58()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1002E7AAC()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_1002E7AF4()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_1002E7B38()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_1002E7B6C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_1002E7B78()
{
  return v0 + 32;
}

id sub_1002E7BC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100274858(0xD000000000000019, (void *)((a1 - 32) | 0x8000000000000000));
}

uint64_t sub_1002E7C28()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1002E7C5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002E7C7C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002E7C9C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002E7CBC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x4364000000000000;
}

uint64_t sub_1002E7CE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E7D38()
{
  return __CocoaSet.makeIterator()();
}

uint64_t sub_1002E7D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1002E7DC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002E7E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002E7E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002E7EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002E7F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002E7FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E7FCC);
}

uint64_t sub_1002E7FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();

  return sub_1001F758C(a1, a2, v4);
}

uint64_t sub_1002E8014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E8028);
}

uint64_t sub_1002E8028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();

  return sub_1001F0530(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ConversationLinkKeyAgreement()
{
  uint64_t result = qword_100588B28;
  if (!qword_100588B28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002E80BC()
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002E8148(uint64_t a1, unint64_t a2)
{
  if (Data.count.getter() > 27)
  {
    sub_1001F7440(a1, a2);
    sub_1002F5A0C(a1, a2);
    AES.GCM.SealedBox.init(combined:)();
  }
  else
  {
    uint64_t v4 = type metadata accessor for CryptoKitError();
    sub_1002E8BE0();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for CryptoKitError.incorrectParameterSize(_:), v4);
    swift_willThrow();
  }
  return sub_1001F7498(a1, a2);
}

NSObject *sub_1002E8238()
{
  unint64_t v1 = &qword_1005853F0;
  uint64_t v2 = sub_1001F081C(&qword_1005853F0);
  __chkstk_darwin(v2 - 8);
  sub_1001F2514();
  uint64_t v5 = v4 - v3;
  type metadata accessor for AES.GCM.SealedBox();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v7 = type metadata accessor for AES.GCM.Nonce();
  sub_1001F0530(v5, 1, 1, v7);
  sub_1002105C8();
  static AES.GCM.seal<A>(_:using:nonce:)();
  sub_1002E8C30(v5, &qword_1005853F0);
  if (!v0)
  {
    AES.GCM.SealedBox.combined.getter();
    sub_1002E8C98();
    if (!v10 & v9)
    {
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_1001F5F88(v11, (uint64_t)qword_100594C10);
      unint64_t v1 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v12, "Failed to retrieve combined data from encrypted LMI response", v13, 2u);
        swift_slowDealloc();
      }

      sub_100210514();
      swift_allocError();
      *uint64_t v14 = 3;
      swift_willThrow();
      uint64_t v15 = sub_1002E8CA4();
      v16(v15);
    }
    else
    {
      unint64_t v1 = v8;
      uint64_t v18 = sub_1002E8CA4();
      v19(v18);
    }
  }
  return v1;
}

void sub_1002E8498(char *a1, void *a2)
{
  type metadata accessor for AES.GCM.SealedBox();
  sub_1001F6398();
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v51 = v9 - v8;
  type metadata accessor for SymmetricKey();
  sub_1001F6398();
  uint64_t v52 = v11;
  uint64_t v53 = v10;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v18;
  uint64_t v19 = sub_1001F081C(&qword_1005853E0);
  __chkstk_darwin(v19 - 8);
  sub_1001FCC88();
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PublicKey();
  sub_1001F6398();
  uint64_t v57 = v21;
  __chkstk_darwin(v22);
  sub_1001F2514();
  uint64_t v25 = v24 - v23;
  sub_1002E8B7C(a2);
  sub_1002E8C98();
  if (!v29 & v28)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v55 = v26;
  uint64_t v56 = v27;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  if (!v2)
  {
    sub_1001F0530(v3, 0, 1, v20);
    if (sub_1001F758C(v3, 1, v20) == 1) {
      goto LABEL_5;
    }
    uint64_t v48 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v25, v3, v20);
    sub_1002F5280((uint64_t)v17, (uint64_t)v14);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v36 = v17;
    uint64_t v37 = v53;
    v35(v54, v36, v53);
    v35(v48, v14, v37);
    sub_1002B4D20(a2);
    sub_1002E8C98();
    if (!(!v29 & v28))
    {
      sub_1002E8148(v38, v39);
      uint64_t v40 = static AES.GCM.open(_:using:)();
      unint64_t v42 = v41;
      id v43 = objc_allocWithZone((Class)CSDMessagingConversationMessage);
      sub_1001F7440(v40, v42);
      if (sub_1002E8B0C())
      {
        sub_1001F7498(v40, v42);
        sub_1001F7664();
        v44();
        sub_1001F7664();
        v45();
        sub_1001F7664();
        v46();
        return;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  swift_errorRelease();
  sub_1001F0530(v3, 1, 1, v20);
LABEL_5:
  sub_1002E8C30(v3, &qword_1005853E0);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_1001F5F88(v30, (uint64_t)qword_100594C10);
  BOOL v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to derive public key from public key data, ignoring let me in", v33, 2u);
    swift_slowDealloc();
  }

  sub_100210514();
  swift_allocError();
  *uint64_t v34 = 0;
  swift_willThrow();
}

uint64_t sub_1002E89CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ConversationLinkKeyAgreement();
  __chkstk_darwin(v10);
  sub_1001FCC88();
  P256.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1, v9, v3);
  sub_1002B6C34(v1, a1);
  return sub_1001F0530(a1, 0, 1, v10);
}

id sub_1002E8B0C()
{
  sub_1002E8C98();
  if (!v4 & v3)
  {
    v7.super.Class isa = 0;
  }
  else
  {
    unint64_t v5 = v2;
    uint64_t v6 = v1;
    v7.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(v6, v5);
  }
  id v8 = [v0 initWithData:v7.super.isa];

  return v8;
}

uint64_t sub_1002E8B7C(void *a1)
{
  id v1 = [a1 publicKey];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_1002E8BE0()
{
  unint64_t result = qword_100588B60;
  if (!qword_100588B60)
  {
    type metadata accessor for CryptoKitError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588B60);
  }
  return result;
}

uint64_t sub_1002E8C30(uint64_t a1, uint64_t *a2)
{
  sub_1001F081C(a2);
  sub_1001F7664();
  v3();
  return a1;
}

uint64_t sub_1002E8CA4()
{
  return v0;
}

void *sub_1002E8CB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    char v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    NSData v7 = (void *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    id v12 = v7;
    if (sub_1001F758C((uint64_t)v10, 1, v11))
    {
      uint64_t v13 = sub_1001F081C((uint64_t *)&unk_100585580);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_1001F0530((uint64_t)v9, 0, 1, v11);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 36)) = *((unsigned char *)a2 + *(int *)(a3 + 36));
  }
  return v4;
}

uint64_t sub_1002E8E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t result = sub_1001F758C(v4, 1, v5);
  if (!result)
  {
    NSData v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_1002E8EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  id v11 = v6;
  if (sub_1001F758C((uint64_t)v9, 1, v10))
  {
    uint64_t v12 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_1001F0530((uint64_t)v8, 0, 1, v10);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1002E8FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (void *)(a1 + v9);
  id v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID();
  int v13 = sub_1001F758C((uint64_t)v10, 1, v12);
  int v14 = sub_1001F758C((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  sub_1001F0530((uint64_t)v10, 0, 1, v12);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1002E9164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 32);
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  if (sub_1001F758C((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    sub_1001F0530((uint64_t)v8, 0, 1, v10);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1002E9268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for UUID();
  int v12 = sub_1001F758C((uint64_t)v9, 1, v11);
  int v13 = sub_1001F758C((uint64_t)v10, 1, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  sub_1001F0530((uint64_t)v9, 0, 1, v11);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1002E93FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E9410);
}

uint64_t sub_1002E9410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100585580);
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    return sub_1001F758C(v9, a2, v8);
  }
}

uint64_t sub_1002E949C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E94B0);
}

uint64_t sub_1002E94B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
    uint64_t v8 = v5 + *(int *)(a4 + 32);
    return sub_1001F0530(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SoundDescriptor()
{
  uint64_t result = qword_100588BC0;
  if (!qword_100588BC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002E957C()
{
  sub_100201688();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1002E9630@<X0>(id a1@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v8 = [a1 provider];
  unsigned __int8 v9 = [a1 isVideo];
  id v10 = [a1 soundRegion];

  uint64_t v11 = type metadata accessor for SoundDescriptor();
  uint64_t v12 = a4 + *(int *)(v11 + 32);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t result = sub_1001F0530(v12, 1, 1, v13);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = v10;
  *(unsigned char *)(a4 + *(int *)(v11 + 36)) = a3;
  return result;
}

uint64_t sub_1002E9700(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  sub_1001FCCD0();
  uint64_t v72 = v4;
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v5 - 8);
  sub_1001FCCD0();
  uint64_t v73 = v6;
  uint64_t v75 = sub_1001F081C((uint64_t *)&unk_1005888C0);
  sub_10020233C();
  __chkstk_darwin(v7);
  sub_1001FCCD0();
  uint64_t v76 = v8;
  uint64_t v78 = type metadata accessor for SoundDescriptor();
  sub_10020233C();
  __chkstk_darwin(v9);
  NSString v82 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B8138();
  __chkstk_darwin(v11);
  sub_10026B98C();
  uint64_t v81 = v12;
  sub_1002B8138();
  __chkstk_darwin(v13);
  sub_10026B98C();
  uint64_t v83 = v14;
  sub_1002B8138();
  __chkstk_darwin(v15);
  sub_10026B98C();
  uint64_t v84 = v16;
  sub_1002B8138();
  __chkstk_darwin(v17);
  sub_10026B98C();
  uint64_t v80 = v18;
  sub_1002B8138();
  __chkstk_darwin(v19);
  sub_10026B98C();
  uint64_t v79 = v20;
  sub_1002B8138();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v71 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v71 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v71 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v71 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (uint64_t *)((char *)&v71 - v35);
  __chkstk_darwin(v34);
  uint64_t v38 = (uint64_t *)((char *)&v71 - v37);
  sub_1002EA110(a1, (uint64_t)&v71 - v37);
  sub_1002EA110(a2, (uint64_t)v36);
  uint64_t v39 = *v38;
  uint64_t v40 = *v36;
  sub_1002EA174((uint64_t)v36);
  uint64_t v41 = (uint64_t)v38;
  uint64_t v42 = a2;
  sub_1002EA174(v41);
  sub_1002EA110(a1, (uint64_t)v33);
  sub_1002EA288();
  if (v39 != v40)
  {
    sub_1002EA174((uint64_t)v33);
    sub_1002EA174((uint64_t)v30);
    sub_1002EA110(a1, (uint64_t)v27);
    sub_1002EA110(a2, (uint64_t)v24);
    uint64_t v44 = a1;
    goto LABEL_9;
  }
  sub_10020EA08();
  char v43 = static NSObject.== infix(_:_:)();
  sub_1002EA174((uint64_t)v33);
  sub_1002EA174((uint64_t)v30);
  sub_1002EA110(a1, (uint64_t)v27);
  sub_1002EA110(a2, (uint64_t)v24);
  uint64_t v44 = a1;
  if ((v43 & 1) == 0)
  {
LABEL_9:
    sub_1002EA174((uint64_t)v24);
    sub_1002EA174((uint64_t)v27);
    uint64_t v47 = v79;
    sub_1002EA110(v44, v79);
    uint64_t v48 = v80;
    sub_1002EA110(v42, v80);
    uint64_t v49 = (uint64_t)v82;
    goto LABEL_10;
  }
  int v45 = v27[16];
  sub_1002EA174((uint64_t)v27);
  int v46 = v24[16];
  sub_1002EA174((uint64_t)v24);
  uint64_t v47 = v79;
  sub_1002EA110(a1, v79);
  uint64_t v48 = v80;
  sub_1002EA110(v42, v80);
  uint64_t v49 = (uint64_t)v82;
  if (v45 != v46)
  {
LABEL_10:
    sub_1002EA174(v48);
    sub_1002EA174(v47);
    uint64_t v52 = v84;
    sub_1002EA110(v44, v84);
    uint64_t v53 = v83;
    sub_1002EA110(v42, v83);
    goto LABEL_11;
  }
  uint64_t v50 = *(void *)(v47 + 24);
  uint64_t v51 = *(void *)(v48 + 24);
  sub_1002EA174(v48);
  sub_1002EA174(v47);
  uint64_t v52 = v84;
  sub_1002EA110(v44, v84);
  uint64_t v53 = v83;
  sub_1002EA110(v42, v83);
  if (v50 != v51)
  {
LABEL_11:
    sub_1002EA174(v53);
    sub_1002EA174(v52);
    uint64_t v61 = v81;
LABEL_12:
    sub_1002EA110(v44, v61);
    sub_1002EA288();
    goto LABEL_13;
  }
  uint64_t v54 = v78;
  uint64_t v55 = *(int *)(v78 + 32);
  uint64_t v56 = v53 + v55;
  uint64_t v57 = v76;
  uint64_t v58 = v76 + *(int *)(v75 + 48);
  sub_1002EA1D0(v52 + v55, v76);
  sub_1002EA1D0(v56, v58);
  uint64_t v59 = v77;
  int v60 = sub_1001F758C(v57, 1, v77);
  uint64_t v61 = v81;
  if (v60 == 1)
  {
    sub_1002EA174(v53);
    sub_1002EA174(v52);
    if (sub_1001F758C(v58, 1, v59) == 1)
    {
      sub_1002392A8(v57, (uint64_t *)&unk_100585580);
      sub_1002EA110(v44, v61);
      sub_1002EA288();
LABEL_19:
      uint64_t v69 = v54;
      char v70 = *(unsigned char *)(v61 + *(int *)(v54 + 36));
      sub_1002EA174(v61);
      LOBYTE(v69) = *(unsigned char *)(v49 + *(int *)(v69 + 36));
      sub_1002EA174(v49);
      char v62 = v70 ^ v69 ^ 1;
      return v62 & 1;
    }
    goto LABEL_17;
  }
  uint64_t v64 = v73;
  sub_1002EA1D0(v57, v73);
  int v65 = sub_1001F758C(v58, 1, v59);
  uint64_t v66 = v74;
  if (v65 == 1)
  {
    sub_1002EA174(v53);
    sub_1002EA174(v84);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v59);
LABEL_17:
    sub_1002392A8(v57, (uint64_t *)&unk_1005888C0);
    goto LABEL_12;
  }
  uint64_t v67 = v72;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v72, v58, v59);
  sub_1002EA238();
  LODWORD(v80) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v68(v67, v59);
  sub_1002EA174(v83);
  sub_1002EA174(v84);
  v68(v64, v59);
  sub_1002392A8(v57, (uint64_t *)&unk_100585580);
  sub_1002EA110(v44, v61);
  sub_1002EA288();
  uint64_t v54 = v78;
  if (v80) {
    goto LABEL_19;
  }
LABEL_13:
  sub_1002EA174(v49);
  sub_1002EA174(v61);
  char v62 = 0;
  return v62 & 1;
}

unint64_t sub_1002E9DA8()
{
  uint64_t v1 = v0;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  v3._countAndFlagsBits = 0x707954646E756F73;
  v3._object = (void *)0xEA00000000003D65;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = *(id *)(v0 + 8);
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x72656469766F7270;
  v10._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + 16)) {
    uint64_t v11 = 1702195828;
  }
  else {
    uint64_t v11 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + 16)) {
    unint64_t v12 = 0xE400000000000000;
  }
  else {
    unint64_t v12 = 0xE500000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 0x3D6F656469567369;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 0x3D6E6F69676572;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for SoundDescriptor();
  BOOL v18 = *(unsigned char *)(v1 + *(int *)(v17 + 36)) == 0;
  if (*(unsigned char *)(v1 + *(int *)(v17 + 36))) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (v18) {
    unint64_t v20 = 0xE500000000000000;
  }
  else {
    unint64_t v20 = 0xE400000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 0xD000000000000019;
  v22._object = (void *)0x8000000100485B00;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t sub_1002EA110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002EA174(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SoundDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002EA1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002EA238()
{
  unint64_t result = qword_1005858A0;
  if (!qword_1005858A0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005858A0);
  }
  return result;
}

uint64_t sub_1002EA288()
{
  return sub_1002EA110(v1, v0);
}

id sub_1002EA2A0()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithName:v1];

  return v2;
}

id sub_1002EA314()
{
  type metadata accessor for FaceTimeSyncIDSService();
  id result = sub_1002EA2A0();
  qword_100588C08 = (uint64_t)result;
  return result;
}

id sub_1002EA384()
{
  if (qword_1005839B8 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_100588C08;

  return v0;
}

id sub_1002EA3E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FaceTimeSyncIDSService();
  id v8 = objc_msgSendSuper2(&v10, "initWithName:service:queryController:", v7, a3, a4);

  return v8;
}

id sub_1002EA4D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeSyncIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeSyncIDSService()
{
  return self;
}

id sub_1002EA530()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_super v2 = &v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler];
  *objc_super v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor] = 1;
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_audioPlayer] = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for HoldMusicProvider()
{
  return self;
}

void sub_1002EA648(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor) == 1)
  {
    objc_super v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
    uint64_t *v4 = a1;
    v4[1] = a2;
    sub_1002084D8(a1);
    sub_100208490(v5);
    *(unsigned char *)(v2 + v3) = 0;
    sub_1002EA728();
  }
  else
  {
    id v6 = sub_1001B1BF8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

void sub_1002EA728()
{
  uint64_t v1 = v0;
  sub_1002EAAC0();
  id v2 = (id)TUBundle();
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v2;
  unint64_t v4 = sub_1002EB9F8();
  v5._countAndFlagsBits = 0xD000000000000020;
  v16._object = (void *)0xE000000000000000;
  v5._object = (void *)0x8000000100485E70;
  v6.value._object = (void *)0x80000001004821B0;
  v6.value._countAndFlagsBits = 0xD000000000000012;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v3, v7, v16);

  id v8 = sub_1002EAB80();
  *(float *)&double v9 = AVSpeechUtteranceDefaultSpeechRate;
  [v8 setRate:v9];
  LODWORD(v10) = 1053609165;
  [v8 setVolume:v10];
  id v11 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048F550;
  *(void *)(v12 + 56) = v4;
  *(void *)(v12 + 64) = sub_1002EBA38();
  *(void *)(v12 + 32) = v8;
  id v14 = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  unint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizer);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    return;
  }
  [v13 speakUtterance:v14];
}

uint64_t sub_1002EA8E4()
{
  sub_1002EA934();
  sub_1002EA9FC();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor) = 1;
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  void *v1 = 0;
  v1[1] = 0;

  return sub_100208490(v2);
}

void sub_1002EA934()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizer);
  if (v1)
  {
    id v3 = v1;
    if ([v3 isSpeaking])
    {
      id v2 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      [v3 stopSpeakingAtBoundary:0];
    }
  }
}

void sub_1002EA9FC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_audioPlayer);
  if (v1)
  {
    id v3 = v1;
    if ([v3 isPlaying])
    {
      id v2 = sub_1001B1BF8();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      [v3 stop];
    }
  }
}

void sub_1002EAAC0()
{
  uint64_t v1 = OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizer;
  if (!*(void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizer))
  {
    id v2 = [objc_allocWithZone((Class)AVSpeechSynthesizer) init];
    [v2 setUsesApplicationAudioSession:0];
    [v2 setDelegate:v0];
    objc_msgSend(v2, "setAudioQueueFlags:", objc_msgSend(v2, "audioQueueFlags") | 0x100);
    id v3 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v2;
  }
}

id sub_1002EAB80()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

void sub_1002EABF4()
{
  sub_1002EAD0C();
  NSString v1 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_audioPlayer);
  if (v1)
  {
    id v4 = v1;
    unsigned int v2 = [v4 play];
    id v3 = sub_1001B1BF8();
    if (v2) {
      static os_log_type_t.default.getter();
    }
    else {
      static os_log_type_t.error.getter();
    }
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    id v4 = sub_1001B1BF8();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
  }
}

void sub_1002EAD0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v2 - 8);
  id v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  double v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v30[-v11];
  __chkstk_darwin(v10);
  id v14 = &v30[-v13];
  uint64_t v15 = OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_audioPlayer;
  if (!*(void *)(v1 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_audioPlayer))
  {
    id v16 = (id)TUBundle();
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = sub_1002EB964(1684828008, 0xE400000000000000, 7758199, 0xE300000000000000, v16);

      if (v18)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32);
        v19(v4, v12, v5);
        sub_1001F0530((uint64_t)v4, 0, 1, v5);
        if (sub_1001F758C((uint64_t)v4, 1, v5) != 1)
        {
          v19(v14, v4, v5);
          uint64_t v31 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16);
          v31(v9, v14, v5);
          id v20 = objc_allocWithZone((Class)AVAudioPlayer);
          id v22 = sub_1002EB818((uint64_t)v9);
          id v23 = sub_1001B1BF8();
          sub_1001F081C(&qword_100584B20);
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_10048F550;
          v31(v12, v14, v5);
          uint64_t v25 = String.init<A>(reflecting:)();
          uint64_t v27 = v26;
          *(void *)(v24 + 56) = &type metadata for String;
          *(void *)(v24 + 64) = sub_1001F3B08();
          *(void *)(v24 + 32) = v25;
          *(void *)(v24 + 40) = v27;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          [v22 setMixToUplink:1];
          [v22 setNumberOfLoops:-1];
          LODWORD(v28) = 1058642330;
          [v22 setVolume:v28];
          (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v14, v5);
          uint64_t v29 = *(void **)(v1 + v15);
          *(void *)(v1 + v15) = v22;

          return;
        }
      }
      else
      {
        sub_1001F0530((uint64_t)v4, 1, 1, v5);
      }
      sub_10029ACF8((uint64_t)v4);
      id v21 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      os_log(_:dso:log:type:_:)();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1002EB274()
{
  id v1 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = *(void (**)(void (*)(), uint64_t))(v0
                                                  + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  if (v3)
  {
    swift_retain();
    v3(sub_1002EB810, v2);
    sub_100208490((uint64_t)v3);
  }

  return swift_release();
}

void sub_1002EB360()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    sub_1002EABF4();
  }
}

void sub_1002EB424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = sub_1001B1BF8();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v8 = *(void (**)(uint64_t, void))(v5
                                              + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  if (v8)
  {
    swift_retain();
    v8(a5, 0);
    sub_100208490((uint64_t)v8);
  }
}

void *destroy for HoldMusicProvider.SpeechSynthesizerEvent(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t _s13callservicesd17HoldMusicProviderC22SpeechSynthesizerEventOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for HoldMusicProvider.SpeechSynthesizerEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for HoldMusicProvider.SpeechSynthesizerEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoldMusicProvider.SpeechSynthesizerEvent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HoldMusicProvider.SpeechSynthesizerEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)id result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)id result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)id result = a2 + 1;
    }
  }
  return result;
}

void *sub_1002EB7A8(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *id result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HoldMusicProvider.SpeechSynthesizerEvent()
{
  return &type metadata for HoldMusicProvider.SpeechSynthesizerEvent;
}

uint64_t sub_1002EB7D8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002EB810()
{
}

id sub_1002EB818(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  unsigned int v5 = v4;
  id v14 = 0;
  id v6 = [v2 initWithContentsOfURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    double v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

id sub_1002EB964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [a5 URLForResource:v6 withExtension:v7];

  return v8;
}

unint64_t sub_1002EB9F8()
{
  unint64_t result = qword_100588D08;
  if (!qword_100588D08)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100588D08);
  }
  return result;
}

unint64_t sub_1002EBA38()
{
  unint64_t result = qword_100588D10;
  if (!qword_100588D10)
  {
    sub_1002EB9F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100588D10);
  }
  return result;
}

NSString sub_1002EBA88()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100594B20 = (uint64_t)result;
  return result;
}

NSString sub_1002EBAC0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100594B28 = (uint64_t)result;
  return result;
}

NSString sub_1002EBAF8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100594B30 = (uint64_t)result;
  return result;
}

uint64_t sub_1002EBB30()
{
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 72) = 0;
  id v1 = self;
  id v2 = [v1 defaultCenter];
  uint64_t v3 = qword_1005839C0;
  uint64_t v4 = swift_retain();
  if (v3 != -1) {
    uint64_t v4 = swift_once();
  }
  sub_1002ECBA4(v4, v5, v6, v7, qword_100594B20);

  swift_release();
  id v8 = [v1 defaultCenter];
  uint64_t v9 = qword_1005839C8;
  uint64_t v10 = swift_retain();
  if (v9 != -1) {
    uint64_t v10 = swift_once();
  }
  sub_1002ECBA4(v10, v11, v12, v13, qword_100594B28);

  swift_release();
  id v14 = [v1 defaultCenter];
  uint64_t v15 = qword_1005839D0;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  [v14 addObserver:v0 selector:"recurringDisclosureFinishedNotification:" name:qword_100594B30 object:0];

  swift_release();
  return v0;
}

void sub_1002EBCFC(uint64_t a1)
{
}

void sub_1002EBD3C(uint64_t a1)
{
}

uint64_t sub_1002EBD7C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  id v5 = a3;
  uint64_t v6 = swift_retain();
  a4(v6);

  return swift_release();
}

void sub_1002EBDD8(uint64_t a1)
{
}

void sub_1002EBE00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F2514();
  uint64_t v14 = v13 - v12;
  uint64_t v29 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_1001F2514();
  uint64_t v20 = v19 - v18;
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_1001F5F88(v21, (uint64_t)qword_100594C58);
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, a2, v24, 2u);
    sub_1001F63CC();
  }

  uint64_t v25 = *(void **)(v7 + 56);
  if (v25)
  {
    aBlock[4] = a3;
    aBlock[5] = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = a4;
    uint64_t v26 = _Block_copy(aBlock);
    id v27 = v25;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v29);
    swift_release();
  }
}

uint64_t sub_1002EC0DC(uint64_t a1, void (*a2)(void))
{
  sub_1002EC898();
  swift_beginAccess();
  sub_1002ECA34(a1 + 16, (uint64_t)v6);
  if (!v7) {
    return sub_1002ECA9C((uint64_t)v6);
  }
  sub_10020ED28((uint64_t)v6, (uint64_t)v5);
  sub_1002ECA9C((uint64_t)v6);
  sub_100204074(v5, v5[3]);
  a2();
  return sub_1002018DC((uint64_t)v5);
}

uint64_t sub_1002EC190(void *a1)
{
  [a1 askProviderToAllowAudioInjection:1];

  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1002EC1D8(void *a1)
{
  return sub_1002EC1F0(a1, "Asked to play stop recording disclosure");
}

uint64_t sub_1002EC1E4(void *a1)
{
  return sub_1002EC1F0(a1, "Asked to play recurring recording disclosure");
}

uint64_t sub_1002EC1F0(void *a1, const char *a2)
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594C58);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 2u);
    sub_1001F63CC();
  }

  [a1 askProviderToAllowAudioInjection:1];

  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1002EC2FC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v34 - v10;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  sub_1001F2514();
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1001F5F88(v12, (uint64_t)qword_100594C58);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Setting up recurring disclosure", v15, 2u);
    sub_1001F63CC();
  }

  aBlock[4] = (uint64_t)sub_1002EC984;
  aBlock[5] = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002C2C88;
  void aBlock[3] = (uint64_t)&unk_1005130A8;
  _Block_copy(aBlock);
  double v37 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_1001F5FE0();
  swift_retain();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v16 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  *(void *)(v2 + 72) = v16;
  uint64_t result = swift_release();
  if (*(void *)(v2 + 72))
  {
    uint64_t v34 = v6;
    swift_retain();
    int64_t v18 = sub_1002EC9A8(0x3DuLL) - 30;
    double v19 = 240.0;
    if (a1) {
      double v19 = 420.0;
    }
    double v20 = v19 + (double)v18;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      double v37 = v20;
      uint64_t v24 = String.init<A>(reflecting:)();
      double v37 = COERCE_DOUBLE(sub_1002344D8(v24, v25, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      double v37 = *(double *)&v18;
      uint64_t v26 = String.init<A>(reflecting:)();
      double v37 = COERCE_DOUBLE(sub_1002344D8(v26, v27, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Scheduing recurring disclosure for %s seconds from now with randomness %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }

    uint64_t v28 = v34;
    uint64_t v29 = *(void **)(v2 + 56);
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = v35;
      static DispatchTime.now()();
      uint64_t v32 = v36;
      + infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v31, v4);
      OS_dispatch_queue.asyncAfter(deadline:execute:)();
      swift_release();

      return ((uint64_t (*)(char *, uint64_t))v33)(v32, v4);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1002EC7AC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  sub_1002ECA34(v1, (uint64_t)v4);
  if (!v5) {
    return sub_1002ECA9C((uint64_t)v4);
  }
  sub_10020ED28((uint64_t)v4, (uint64_t)v3);
  sub_1002ECA9C((uint64_t)v4);
  sub_100204074(v3, v3[3]);
  sub_100330BC0();
  return sub_1002018DC((uint64_t)v3);
}

uint64_t sub_1002EC838()
{
  if (*(void *)(v0 + 72))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v0 + 72) = 0;
  swift_release();

  return sub_1002EC898();
}

uint64_t sub_1002EC898()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong askProviderToAllowAudioInjection:0];
  }

  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1002EC8F4()
{
  sub_1002ECA9C(v0 + 16);

  swift_unknownObjectWeakDestroy();
  swift_release();
  return v0;
}

uint64_t sub_1002EC92C()
{
  sub_1002EC8F4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisclosureController()
{
  return self;
}

uint64_t sub_1002EC984()
{
  return sub_1002EC7AC(v0);
}

uint64_t sub_1002EC98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002EC99C()
{
  return swift_release();
}

unint64_t sub_1002EC9A8(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002ECA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_10058A4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECA9C(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_10058A4A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002ECAFC()
{
  return sub_1002EC0DC(v0, sub_100331044);
}

uint64_t sub_1002ECB2C()
{
  return sub_1002EC0DC(v0, sub_100331270);
}

uint64_t sub_1002ECB5C()
{
  return sub_1002EC0DC(v0, sub_100330E14);
}

id sub_1002ECBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(const char **)(v8 + 2240);
  return objc_msgSend(v6, v10, v5, v7, a5, 0);
}

uint64_t sub_1002ECBC8(int a1)
{
  unint64_t v1 = 0xE700000000000000;
  uint64_t v2 = 0x64656C62616E65;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = 0x6E776F6E6B6E75;
  if (!a1)
  {
    uint64_t v4 = 0x64656C6261736964;
    unint64_t v3 = 0xE800000000000000;
  }
  if (a1 != 1)
  {
    uint64_t v2 = v4;
    unint64_t v1 = v3;
  }
  BOOL v5 = a1 == 2;
  if (a1 == 2) {
    uint64_t v6 = 0x646573756170;
  }
  else {
    uint64_t v6 = v2;
  }
  if (v5) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = v1;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);

  return swift_bridgeObjectRelease();
}

uint64_t AVCSessionMediaState.description.getter(int a1)
{
  uint64_t v1 = 0x64656C62616E65;
  uint64_t v2 = 0x6E776F6E6B6E75;
  if (!a1) {
    uint64_t v2 = 0x64656C6261736964;
  }
  if (a1 != 1) {
    uint64_t v1 = v2;
  }
  if (a1 == 2) {
    return 0x646573756170;
  }
  else {
    return v1;
  }
}

uint64_t sub_1002ECCE4()
{
  return AVCSessionMediaState.description.getter(*v0);
}

uint64_t AVCSessionMediaType.description.getter(int a1)
{
  uint64_t v1 = 0x7065526E696F63;
  uint64_t v2 = 0x6E776F6E6B6E75;
  if (a1 == 6) {
    uint64_t v2 = 0x6F576172656D6163;
  }
  if (a1 != 8) {
    uint64_t v1 = v2;
  }
  if (a1 == 1) {
    return 0x6172656D6163;
  }
  else {
    return v1;
  }
}

uint64_t sub_1002ECD64()
{
  return AVCSessionMediaType.description.getter(*v0);
}

uint64_t sub_1002ECD6C(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v2 = sub_10023359C(1u);
  if ((v3 & 1) == 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v2);
  unint64_t v5 = sub_100222FC4(6u, a1);
  if ((v5 & 0x100000000) != 0) {
    return 0;
  }
  int v6 = v5;
  unint64_t v7 = sub_100222FC4(8u, a1);
  if ((v7 & 0x100000000) == 0)
  {
    int v8 = v7;
    _StringGuts.grow(_:)(56);
    v9._countAndFlagsBits = 0x6361736E6172745BLL;
    v9._object = (void *)0xEF3A44496E6F6974;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = sub_1002ED96C();
    v11._object = (void *)0xE90000000000003ALL;
    String.append(_:)(v11);
    sub_1002ECBC8(v4);
    v12._countAndFlagsBits = sub_1002ED96C();
    v12._object = (void *)0xED00003A666C6F57;
    String.append(_:)(v12);
    sub_1002ECBC8(v6);
    v13._countAndFlagsBits = 0x65526E696F632E20;
    v13._object = (void *)0xEA00000000003A70;
    String.append(_:)(v13);
    sub_1002ECBC8(v8);
    v14._countAndFlagsBits = 93;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
  }
  return 0;
}

uint64_t sub_1002ECEF4(unint64_t a1, int a2, uint64_t a3, int a4)
{
  return sub_1002ED070(a1, a3) & (a2 == a4);
}

uint64_t sub_1002ECF2C(uint64_t a1, uint64_t a2)
{
  return sub_1002ECEF4(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

uint64_t sub_1002ECF48()
{
  return sub_1002ECD6C(*v0);
}

unint64_t sub_1002ECF54()
{
  unint64_t v0 = 0xD000000000000012;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  if (Strong) {
    return 0xD00000000000001ALL;
  }
  uint64_t v2 = swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    char v3 = (void *)v2;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    [v3 participantID];
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 14889;
    v5._object = (void *)0xE200000000000000;
    String.append(_:)(v5);

    return 0xD00000000000001FLL;
  }
  return v0;
}

unint64_t sub_1002ED070(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v11);
    uint64_t result = sub_10023359C(*(_DWORD *)(*(void *)(v3 + 48) + 4 * v11));
    if ((v16 & 1) == 0 || *(_DWORD *)(*(void *)(a2 + 56) + 4 * result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1002ED1F0(void *a1, void *a2)
{
  if (a1 == a2 || a1[2] != a2[2]) {
    return;
  }
  int64_t v4 = 0;
  unint64_t v5 = a1 + 8;
  sub_1002ED950();
  unint64_t v8 = v7 & v6;
  int64_t v10 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v10) {
      return;
    }
    unint64_t v14 = v5[v13];
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        return;
      }
      unint64_t v14 = v5[v4];
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          return;
        }
        unint64_t v14 = v5[v4];
        if (!v14)
        {
          int64_t v4 = v13 + 3;
          if (v13 + 3 >= v10) {
            return;
          }
          unint64_t v14 = v5[v4];
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_22:
    uint64_t v16 = *(void *)(a1[7] + 8 * v12);
    unint64_t v17 = sub_10023383C(*(_DWORD *)(a1[6] + 4 * v12));
    if ((v18 & 1) == 0 || *(void *)(a2[7] + 8 * v17) != v16) {
      return;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v10) {
    return;
  }
  unint64_t v14 = v5[v15];
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v10) {
      return;
    }
    unint64_t v14 = v5[v4];
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
}

void sub_1002ED35C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  sub_1002ED950();
  unint64_t v8 = v7 & v6;
  int64_t v10 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v10) {
      return;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        return;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          return;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14)
        {
          int64_t v4 = v13 + 3;
          if (v13 + 3 >= v10) {
            return;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v4);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_22:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    id v17 = v16;
    unint64_t v18 = sub_100233664();
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {

      return;
    }
    sub_1002ED90C();
    id v21 = *(id *)(*(void *)(a2 + 56) + 8 * v18);
    char v22 = static NSObject.== infix(_:_:)();

    if ((v22 & 1) == 0) {
      return;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v10) {
    return;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v10) {
      return;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_1002ED530()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100222678(v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_delegate);

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t sub_1002ED5F4()
{
  sub_1002ED530();

  return swift_deallocClassInstance();
}

uint64_t sub_1002ED64C()
{
  return type metadata accessor for CSDAVCSessionMediaStateManager();
}

uint64_t type metadata accessor for CSDAVCSessionMediaStateManager()
{
  uint64_t result = qword_100588EC8;
  if (!qword_100588EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002ED69C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MediaStateTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MediaStateTransaction()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MediaStateTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for MediaStateTransaction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MediaStateTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaStateTransaction(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 12))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaStateTransaction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaStateTransaction()
{
  return &type metadata for MediaStateTransaction;
}

unint64_t sub_1002ED8E8()
{
  return sub_1002ECF54();
}

unint64_t sub_1002ED90C()
{
  unint64_t result = qword_10058BE00;
  if (!qword_10058BE00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10058BE00);
  }
  return result;
}

uint64_t sub_1002ED96C()
{
  return 0x6172656D61632E20;
}

uint64_t sub_1002ED984(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100486170
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100486190)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002EDA70()
{
  return 2;
}

unint64_t sub_1002EDA78(char a1)
{
  if (a1) {
    return 0xD000000000000017;
  }
  else {
    return 0xD000000000000011;
  }
}

unint64_t sub_1002EDAB4()
{
  return sub_1002EDA78(*v0);
}

uint64_t sub_1002EDABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002ED984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002EDAE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002EDA70();
  *a1 = result;
  return result;
}

uint64_t sub_1002EDB0C(uint64_t a1)
{
  unint64_t v2 = sub_1002EF1C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002EDB48(uint64_t a1)
{
  unint64_t v2 = sub_1002EF1C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002EDB84()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100594B50 = result;
  *(void *)algn_100594B58 = v1;
  return result;
}

uint64_t *sub_1002EDBB4()
{
  if (qword_1005839D8 != -1) {
    swift_once();
  }
  return &qword_100594B50;
}

uint64_t sub_1002EDC00()
{
  uint64_t v0 = type metadata accessor for SceneAssociationBehavior();
  __chkstk_darwin(v0 - 8);
  sub_100235BE8();
  uint64_t v1 = type metadata accessor for GroupActivityMetadata.ActivityType();
  __chkstk_darwin(v1 - 8);
  sub_1001F2514();
  GroupActivityMetadata.init()();
  static GroupActivityMetadata.ActivityType.screenSharing.getter();
  GroupActivityMetadata.type.setter();
  sub_100274858(0x535F4E4545524353, (void *)0xEE00474E49524148);
  GroupActivityMetadata.localizedTitle.setter();
  swift_bridgeObjectRetain();
  GroupActivityMetadata.localizedSubtitle.setter();
  GroupActivityMetadata.supportsContinuationOnTV.setter();
  static SceneAssociationBehavior.none.getter();
  return GroupActivityMetadata.sceneAssociationBehavior.setter();
}

uint64_t sub_1002EDD18(void *a1)
{
  uint64_t v4 = sub_1001F081C(&qword_1005890E8);
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100235BE8();
  sub_100204074(a1, a1[3]);
  sub_1002EF1C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for CodableRemoteScreenShareAttributes();
    sub_1002EF47C(&qword_100588190, v8, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_1002EDEA0(void *a1)
{
  sub_1001F081C(&qword_1005890D8);
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1001F2514();
  uint64_t v4 = a1[4];
  sub_100204074(a1, a1[3]);
  sub_1002EF1C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1002018DC((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    type metadata accessor for CodableRemoteScreenShareAttributes();
    sub_1002EF47C(&qword_100588188, v6, (void (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = sub_1002EFB10();
    v8(v7);
    id v9 = v10;
    sub_1002018DC((uint64_t)a1);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1002EE084()
{
  sub_1002EDBB4();
  uint64_t v0 = qword_100594B50;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1002EE0C0()
{
  sub_1002EDC00();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return sub_1002EF1BC(v1);
}

unint64_t sub_1002EE14C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050B0F8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

void sub_1002EE19C()
{
  sub_1002EFA9C();
  switch(v0)
  {
    case 1:
      sub_1002EFA70();
      break;
    case 2:
      sub_1002EFA5C();
      break;
    case 3:
      sub_1002EF9A0();
      break;
    case 4:
      sub_100246A14();
      break;
    case 5:
      sub_1002EF980();
      break;
    case 6:
      sub_1002EF960();
      break;
    case 7:
    case 8:
      sub_1002025A4();
      break;
    default:
      return;
  }
}

void sub_1002EE268()
{
  sub_1002EFA9C();
  switch(v0)
  {
    case 1:
      sub_1002EFA70();
      break;
    case 2:
      sub_1002EFA5C();
      break;
    case 3:
      sub_1002EF9A0();
      break;
    case 4:
      sub_100246A14();
      break;
    case 5:
      sub_1002EF980();
      break;
    case 6:
      sub_1002EF960();
      break;
    case 7:
    case 8:
      sub_1002025A4();
      break;
    default:
      return;
  }
}

uint64_t sub_1002EE334@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002EDEA0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1002EE364(void *a1)
{
  return sub_1002EDD18(a1);
}

uint64_t sub_1002EE384(unsigned __int8 *a1, char *a2)
{
  return sub_1001FD38C(*a1, *a2);
}

Swift::Int sub_1002EE390()
{
  return sub_1002EFCA4();
}

uint64_t sub_1002EE398()
{
  return sub_10020E1A4();
}

Swift::Int sub_1002EE3A0()
{
  return sub_1002EFF34();
}

unint64_t sub_1002EE3A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002EE14C(*a1);
  *a2 = result;
  return result;
}

void sub_1002EE3D8(void *a1@<X8>)
{
  sub_1002EE19C();
  *a1 = v2;
  a1[1] = v3;
}

void sub_1002EE404()
{
}

uint64_t sub_1002EE40C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002EE198(a1);
  *a2 = result;
  return result;
}

void sub_1002EE434(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1002EE440(uint64_t a1)
{
  unint64_t v2 = sub_1002EF210();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002EE47C(uint64_t a1)
{
  unint64_t v2 = sub_1002EF210();

  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1002EE4DC(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_1002EE558(uint64_t a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, "initWithAttributes:", a1);
  swift_unknownObjectRelease();
  return v3;
}

id sub_1002EE5E4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1002EE628(a1);
}

id sub_1002EE628(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1001F081C(&qword_100589138);
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1001F2514();
  v30.receiver = v1;
  v30.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v30, "init");
  sub_100204074(a1, a1[3]);
  sub_1002EF210();
  id v7 = v6;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
  }
  else
  {
    LOBYTE(v27) = 0;
    [v7 setDeviceFamily:KeyedDecodingContainer.decode(_:forKey:)()];
    sub_1002EF9C0(1);
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v11 & 1) == 0) {
      [v7 setDeviceHomeButtonType:v10];
    }
    sub_1002EF9C0(2);
    [v7 setStyle:KeyedDecodingContainer.decode(_:forKey:)()];
    uint64_t v12 = sub_1002EF9D8(3);
    if ((v13 & 1) == 0)
    {
      Swift::Double v14 = *(double *)&v12;
      sub_100202D8C();
      Class isa = NSNumber.init(floatLiteral:)(v14).super.super.isa;
      sub_1002EFAC4((uint64_t)isa, "setDisplayScale:");
    }
    uint64_t v16 = sub_1002EF9D8(5);
    if ((v17 & 1) == 0)
    {
      Swift::Double v18 = *(double *)&v16;
      sub_100202D8C();
      Class v19 = NSNumber.init(floatLiteral:)(v18).super.super.isa;
      sub_1002EFAC4((uint64_t)v19, "setScaleFactor:");
    }
    char v31 = 7;
    sub_1002EF430();
    sub_1002EFA30();
    if ((v28 & 1) == 0)
    {
      char v31 = 8;
      sub_1002EFA30();
      if ((v28 & 1) == 0)
      {
        id v26 = objc_msgSend(self, "valueWithRect:", 0.0, 0.0, v27, v27);
        sub_1002EFAC4((uint64_t)v26, "setOriginalResolution:");
      }
    }
    uint64_t v20 = sub_1002EF9D8(6);
    if ((v21 & 1) == 0)
    {
      Swift::Double v22 = *(double *)&v20;
      sub_100202D8C();
      Class v23 = NSNumber.init(floatLiteral:)(v22).super.super.isa;
      sub_1002EFAC4((uint64_t)v23, "setCornerRadius:");
    }
    type metadata accessor for CGAffineTransform(0);
    char v31 = 4;
    sub_1002EF47C(&qword_100589148, 255, type metadata accessor for CGAffineTransform);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if ((v29 & 1) == 0)
    {
      id v24 = objc_msgSend(self, "bs_valueWithCGAffineTransform:", &v27);
      sub_1002EFAC4((uint64_t)v24, "setSystemRootLayerTransform:");
    }
    sub_1002EF9C0(9);
    [v7 setWindowed:KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1];

    uint64_t v8 = sub_1002EFA84();
    v9(v8);
  }
  sub_1002018DC((uint64_t)a1);
  return v7;
}

uint64_t sub_1002EEA90(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_1001F081C(&qword_1005890F0);
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100235BE8();
  sub_100204074(a1, a1[3]);
  sub_1002EF210();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002EFA10((uint64_t)[v4 deviceFamily]);
  if (!v2)
  {
    sub_1002EFA10((uint64_t)[v4 deviceHomeButtonType]);
    sub_1002EFA10((uint64_t)[v4 style]);
    id v10 = [v4 displayScale];
    char v11 = v10;
    if (v10)
    {
      [v10 doubleValue];
    }
    sub_1002EF9FC();
    sub_1001F081C(&qword_100587608);
    sub_1002EF25C();
    sub_1002EF934();
    id v12 = [v4 scaleFactor];
    char v13 = v12;
    if (v12)
    {
      [v12 doubleValue];
    }
    sub_1002EF9FC();
    sub_1002EF934();
    id v14 = [v4 systemRootLayerTransform];
    int64_t v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "bs_CGAffineTransformValue");
    }
    sub_1001F081C(&qword_100589108);
    sub_1002EF2C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    id v16 = [v4 cornerRadius];
    char v17 = v16;
    if (v16)
    {
      [v16 doubleValue];
    }
    sub_1002EF9FC();
    sub_1002EF934();
    id v18 = [v4 originalResolution];
    if (v18)
    {
      [v18 rectValue];
      sub_1002EFAF0();
      v23.origin.x = sub_1002EFB24();
      double Width = CGRectGetWidth(v23);
    }
    else
    {
      double Width = 0.0;
    }
    sub_1002EFADC(Width);
    sub_1001F081C(&qword_100589120);
    sub_1002EF370();
    sub_1002EF934();
    id v20 = [v4 originalResolution];
    if (v20)
    {
      [v20 rectValue];
      sub_1002EFAF0();
      v24.origin.x = sub_1002EFB24();
      double Height = CGRectGetHeight(v24);
    }
    else
    {
      double Height = 0.0;
    }
    sub_1002EFADC(Height);
    sub_1002EF934();
    [v4 isWindowed];
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

uint64_t type metadata accessor for CodableRemoteScreenShareAttributes()
{
  return self;
}

void destroy for ScreenSharingActivity(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s13callservicesd21ScreenSharingActivityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for ScreenSharingActivity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  id v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for ScreenSharingActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingActivity(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivity()
{
  return &type metadata for ScreenSharingActivity;
}

id sub_1002EF0CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_1002EE5E4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002EF0F8(void *a1)
{
  return sub_1002EEA90(a1);
}

unint64_t sub_1002EF120()
{
  unint64_t result = qword_1005890C0;
  if (!qword_1005890C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005890C0);
  }
  return result;
}

unint64_t sub_1002EF170()
{
  unint64_t result = qword_1005890C8;
  if (!qword_1005890C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005890C8);
  }
  return result;
}

uint64_t sub_1002EF1BC(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_1002EF1C4()
{
  unint64_t result = qword_1005890E0;
  if (!qword_1005890E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005890E0);
  }
  return result;
}

unint64_t sub_1002EF210()
{
  unint64_t result = qword_1005890F8;
  if (!qword_1005890F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005890F8);
  }
  return result;
}

unint64_t sub_1002EF25C()
{
  unint64_t result = qword_100589100;
  if (!qword_100589100)
  {
    sub_1001F08B4(&qword_100587608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589100);
  }
  return result;
}

unint64_t sub_1002EF2C8()
{
  unint64_t result = qword_100589110;
  if (!qword_100589110)
  {
    sub_1001F08B4(&qword_100589108);
    sub_1002EF47C(&qword_100589118, 255, type metadata accessor for CGAffineTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589110);
  }
  return result;
}

unint64_t sub_1002EF370()
{
  unint64_t result = qword_100589128;
  if (!qword_100589128)
  {
    sub_1001F08B4(&qword_100589120);
    sub_1002EF3E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589128);
  }
  return result;
}

unint64_t sub_1002EF3E4()
{
  unint64_t result = qword_100589130;
  if (!qword_100589130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589130);
  }
  return result;
}

unint64_t sub_1002EF430()
{
  unint64_t result = qword_100589140;
  if (!qword_100589140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589140);
  }
  return result;
}

uint64_t sub_1002EF47C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CodableRemoteScreenShareAttributes.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CodableRemoteScreenShareAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002EF618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableRemoteScreenShareAttributes.CodingKeys()
{
  return &type metadata for CodableRemoteScreenShareAttributes.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ScreenSharingActivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002EF71CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivity.CodingKeys()
{
  return &type metadata for ScreenSharingActivity.CodingKeys;
}

unint64_t sub_1002EF758()
{
  unint64_t result = qword_100589150;
  if (!qword_100589150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589150);
  }
  return result;
}

unint64_t sub_1002EF7A8()
{
  unint64_t result = qword_100589158;
  if (!qword_100589158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589158);
  }
  return result;
}

unint64_t sub_1002EF7F8()
{
  unint64_t result = qword_100589160;
  if (!qword_100589160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589160);
  }
  return result;
}

unint64_t sub_1002EF848()
{
  unint64_t result = qword_100589168;
  if (!qword_100589168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589168);
  }
  return result;
}

unint64_t sub_1002EF898()
{
  unint64_t result = qword_100589170;
  if (!qword_100589170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589170);
  }
  return result;
}

unint64_t sub_1002EF8E8()
{
  unint64_t result = qword_100589178;
  if (!qword_100589178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589178);
  }
  return result;
}

uint64_t sub_1002EF934()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1002EF960()
{
  return 0x615272656E726F63;
}

uint64_t sub_1002EF980()
{
  return 0x636146656C616373;
}

uint64_t sub_1002EF9A0()
{
  return 0x5379616C70736964;
}

uint64_t sub_1002EF9C0@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_1002EF9D8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 168) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 168, v1);
}

void sub_1002EF9FC()
{
  *(void *)(v1 - 176) = v2;
  *(unsigned char *)(v1 - 168) = v0 == 0;
}

uint64_t sub_1002EFA10(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 176, v1);
}

uint64_t sub_1002EFA30()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1002EFA5C()
{
  return 0x656C797473;
}

unint64_t sub_1002EFA70()
{
  return 0xD000000000000014;
}

uint64_t sub_1002EFA84()
{
  return v0;
}

uint64_t sub_1002EFA9C()
{
  return 0x6146656369766564;
}

id sub_1002EFAC4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_1002EFADC(double a1)
{
  *(double *)(v2 - 176) = a1;
  *(unsigned char *)(v2 - 168) = v1 == 0;
}

void sub_1002EFAF0()
{
}

uint64_t sub_1002EFB10()
{
  return v0;
}

double sub_1002EFB24()
{
  return v0;
}

Swift::Int sub_1002EFB3C()
{
  return sub_1002EFF78();
}

Swift::Int sub_1002EFB48()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFB7C()
{
  return sub_1002EFD70();
}

Swift::Int sub_1002EFB88(uint64_t a1)
{
  return sub_1002EFBC8(a1, (uint64_t (*)(uint64_t))sub_1002B7DE8);
}

Swift::Int sub_1002EFBA8(uint64_t a1)
{
  return sub_1002EFBC8(a1, (uint64_t (*)(uint64_t))sub_1002BD414);
}

Swift::Int sub_1002EFBC8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = Hasher.init(_seed:)();
  uint64_t v4 = a2(v3);
  sub_1002F0B74(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  return Hasher._finalize()();
}

Swift::Int sub_1002EFC18(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFC64(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFCA4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFCEC(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFD2C(Swift::UInt32 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFD70()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFDE4(uint64_t a1, uint64_t a2)
{
  return sub_1002EFEE8(a1, a2, (uint64_t (*)(uint64_t))sub_1002BD414);
}

Swift::Int sub_1002EFE04(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFE4C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFE84(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFEC8(uint64_t a1, uint64_t a2)
{
  return sub_1002EFEE8(a1, a2, (uint64_t (*)(uint64_t))sub_1002B7DE8);
}

Swift::Int sub_1002EFEE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = Hasher.init(_seed:)();
  uint64_t v5 = a3(v4);
  sub_1002F0B74(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  return Hasher._finalize()();
}

Swift::Int sub_1002EFF34()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002EFF78()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0024()
{
  sub_1002F0B5C();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t sub_1002F0060(unint64_t a1)
{
  if (a1 >= 7) {
    return 6;
  }
  else {
    return (0x5040302010006uLL >> (8 * a1));
  }
}

uint64_t sub_1002F0088(unsigned __int8 a1)
{
  return a1 + 1;
}

Swift::Int sub_1002F0094()
{
  return sub_1002EFC18(*v0);
}

void sub_1002F009C(uint64_t a1)
{
  sub_10020E368(a1, *v1);
}

Swift::Int sub_1002F00A4(uint64_t a1)
{
  return sub_1002EFE04(a1, *v1);
}

uint64_t sub_1002F00AC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002F0060(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002F00D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002F0088(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1002F0104()
{
  return RawRepresentable<>.encode(to:)();
}

id sub_1002F0154(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_failed] = 2;
  uint64_t v5 = v2;
  uint64_t v6 = [a1 deviceType];
  if ((unint64_t)(v6 - 6) > 0x16) {
    char v7 = 6;
  }
  else {
    char v7 = byte_1004937AA[(void)(v6 - 6)];
  }
  v5[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type] = v7;

  v10.receiver = v5;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, "init");

  return v8;
}

void sub_1002F020C()
{
}

uint64_t sub_1002F024C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002F0324(char a1)
{
  if (a1) {
    return 0x64656C696166;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1002F0350()
{
  return sub_1002F0324(*v0);
}

uint64_t sub_1002F0358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002F024C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F0380(uint64_t a1)
{
  unint64_t v2 = sub_1002F0818();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F03BC(uint64_t a1)
{
  unint64_t v2 = sub_1002F0818();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t type metadata accessor for RTCCSDRelayDeviceRoute()
{
  return self;
}

uint64_t getEnumTagSinglePayload for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002F0570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType()
{
  return &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType;
}

unint64_t sub_1002F05AC()
{
  unint64_t result = qword_1005891B8;
  if (!qword_1005891B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891B8);
  }
  return result;
}

uint64_t sub_1002F05F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1001F081C(&qword_1005891C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100204074(a1, a1[3]);
  sub_1002F0818();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = *(unsigned char *)(v3 + OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type);
  v10[14] = 0;
  sub_1002F0864();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v10[13] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002F0780(void *a1)
{
  return sub_1002F05F8(a1);
}

unint64_t sub_1002F07A4(uint64_t a1)
{
  unint64_t result = sub_1002F07CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002F07CC()
{
  unint64_t result = qword_100587FE8;
  if (!qword_100587FE8)
  {
    type metadata accessor for RTCCSDRelayDeviceRoute();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100587FE8);
  }
  return result;
}

unint64_t sub_1002F0818()
{
  unint64_t result = qword_1005891C8;
  if (!qword_1005891C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891C8);
  }
  return result;
}

unint64_t sub_1002F0864()
{
  unint64_t result = qword_1005891D0;
  if (!qword_1005891D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891D0);
  }
  return result;
}

unint64_t sub_1002F08B0()
{
  unint64_t result = qword_1005891D8;
  if (!qword_1005891D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891D8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RTCCSDRelayDeviceRoute.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002F09C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDRelayDeviceRoute.CodingKeys()
{
  return &type metadata for RTCCSDRelayDeviceRoute.CodingKeys;
}

unint64_t sub_1002F0A04()
{
  unint64_t result = qword_1005891E0;
  if (!qword_1005891E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891E0);
  }
  return result;
}

unint64_t sub_1002F0A54()
{
  unint64_t result = qword_1005891E8;
  if (!qword_1005891E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891E8);
  }
  return result;
}

unint64_t sub_1002F0AA4()
{
  unint64_t result = qword_1005891F0;
  if (!qword_1005891F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005891F0);
  }
  return result;
}

uint64_t sub_1002F0AF0()
{
  return String.hash(into:)();
}

uint64_t sub_1002F0B20()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1002F0B38()
{
  return String.hash(into:)();
}

uint64_t sub_1002F0B5C()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1002F0B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return dispatch thunk of Hashable.hash(into:)(&a9, v9, a1);
}

uint64_t sub_1002F0BCC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1002F0CEC()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDMomentsControllerSession_isRegistered);
}

uint64_t sub_1002F0D24(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR___CSDMomentsControllerSession_isRegistered) = result;
  return result;
}

uint64_t sub_1002F0DAC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002F0EE4()
{
  swift_getObjectType();
  uint64_t v11 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 40;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  swift_unknownObjectRetain();
  sub_1001F081C((uint64_t *)&unk_1005892B8);
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0x3D73746E656D6F6DLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1001F081C((uint64_t *)&unk_100586440);
  v3._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0xD000000000000016;
  v4._object = (void *)0x80000001004863E0;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v10, "isRegistered=");
  HIWORD(v10._object) = -4864;
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  swift_bridgeObjectRetain();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_1005892C8);
  v6._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  v7._object = (void *)0x8000000100486400;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v11;
}

id sub_1002F1244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v3[OBJC_IVAR___CSDMomentsControllerSession_isRegistered] = 1;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_activeRequestsByTransactionID] = _swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_moments] = a1;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations] = a2;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_callCenterObserver] = a3;
  v9.receiver = v3;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_1002F1358(uint64_t a1, uint64_t a2)
{
  char v19 = 0;
  id v5 = [self sharedInstance];
  Swift::String v6 = [v5 queue];

  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v2;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = &v19;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1002F1DAC;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_10021E788;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10032062C;
  void aBlock[3] = &unk_1005134E8;
  objc_super v9 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  Swift::String v10 = v2;
  swift_release();
  dispatch_sync(v6, v9);

  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    if (v19)
    {
      id v13 = sub_100008DCC();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      uint64_t v14 = (uint64_t *)&v10[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations];
      swift_beginAccess();
      if (a2)
      {
        uint64_t v15 = *v14;
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_10022337C(a1, a2, v15);
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = sub_100246DB4(*v14);
        swift_release();
      }
    }
    else
    {
      id v17 = sub_100008DCC();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_release();

      return 0;
    }
    return v16;
  }
  return result;
}

uint64_t sub_1002F1680(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  id v29 = *(id *)(a1 + OBJC_IVAR___CSDMomentsControllerSession_callCenterObserver);
  unint64_t v6 = (unint64_t)[v29 callContainer];
  aBlock[4] = sub_1002F0B94;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10039E628;
  void aBlock[3] = &unk_100513510;
  Swift::String v7 = _Block_copy(aBlock);
  swift_release();
  id v8 = [(id)v6 callsPassingTest:v7];
  swift_unknownObjectRelease();
  _Block_release(v7);
  if (swift_isEscapingClosureAtFileLocation())
  {
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
    return swift_bridgeObjectRelease();
  }
  sub_1002F1DE0();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
LABEL_4:
    unint64_t v10 = v6 & 0xC000000000000001;
    uint64_t v31 = OBJC_IVAR___CSDMomentsControllerSession_moments;
    for (uint64_t i = 4; ; ++i)
    {
      if (v10) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v6 + 8 * i);
      }
      id v13 = v12;
      uint64_t v14 = i - 3;
      if (__OFADD__(i - 4, 1))
      {
        __break(1u);
        goto LABEL_26;
      }
      if (a3)
      {
        id v15 = [v29 activeConversationForCall:v12];
        if (!v15)
        {

          if ((*a4 & 1) != 0 || v14 == v9) {
            return swift_bridgeObjectRelease();
          }
          continue;
        }
        uint64_t v16 = v15;
        id v30 = [v15 avcSessionToken];
        unint64_t v17 = v10;
        uint64_t v18 = v9;
        unint64_t v19 = v6;
        uint64_t v20 = a3;
        char v21 = a4;
        id v22 = [*(id *)(a1 + v31) streamToken];

        BOOL v23 = v30 == v22;
        a4 = v21;
        a3 = v20;
        unint64_t v6 = v19;
        uint64_t v9 = v18;
        unint64_t v10 = v17;
      }
      else
      {
        id v24 = [v12 videoStreamToken];
        id v25 = [*(id *)(a1 + v31) streamToken];

        BOOL v23 = v24 == v25;
      }
      char v26 = v23;
      *a4 = v26;
      if (v23 || v14 == v9) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

id sub_1002F1954(void *a1)
{
  id result = [a1 isVideo];
  if (result)
  {
    if ([a1 status] == 1) {
      return (id)([a1 isVideoPaused] ^ 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002F19C4(void *a1, SEL *a2)
{
  if (a1 && (id v2 = [a1 *a2]) != 0)
  {
    Swift::String v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = sub_1002F1358(v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_1002F1A50(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v5 = a1;
  uint64_t v6 = (void *)swift_unknownObjectRetain();
  sub_1002F19C4(v6, a4);
  uint64_t v8 = v7;
  swift_unknownObjectRelease();

  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }

  return v9;
}

uint64_t sub_1002F1AE4(void *a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

void sub_1002F1BC8(uint64_t a1, uint64_t a2)
{
  sub_10025E674();
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_1002CE99C(a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

void sub_1002F1C9C()
{
}

uint64_t type metadata accessor for MomentsControllerSession()
{
  return self;
}

uint64_t sub_1002F1D6C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002F1DAC()
{
  return sub_1002F1680(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(char **)(v0 + 40));
}

uint64_t sub_1002F1DB8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F1DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002F1DD8()
{
  return swift_release();
}

unint64_t sub_1002F1DE0()
{
  unint64_t result = qword_1005855B0;
  if (!qword_1005855B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005855B0);
  }
  return result;
}

uint64_t sub_1002F1E28@<X0>(uint64_t a1@<X8>)
{
  return sub_100256114(v1 + OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_badgeCategory, a1);
}

void *sub_1002F1E3C(void *a1, void *a2)
{
  Swift::String v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1002F34AC(OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_updateBadgeValue);
  uint64_t v7 = (uint64_t)&v3[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_badgeCategory];
  uint64_t v8 = type metadata accessor for BadgeCountCategory();
  sub_1001F0530(v7, 1, 1, v8);
  v3[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_notificationType] = 1;
  NSString v9 = v3;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_1002DF54C((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    unint64_t v10 = &_swiftEmptySetSingleton;
  }
  *(void *)&v9[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_categories] = v10;
  sub_1002F34AC(OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_add);
  sub_1002F34AC(OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_replace);
  sub_1002F34AC(OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_removeNotification);
  *(void *)&v9[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_queue] = a1;
  *(void *)&v9[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_notificationCenter] = a2;
  id v11 = a1;
  id v12 = a2;

  v27.receiver = v9;
  v27.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v27, "init");
  uint64_t v14 = qword_100583A60;
  id v15 = v13;
  unint64_t v19 = v15;
  if (v14 != -1) {
    id v15 = (id)swift_once();
  }
  sub_1002F3488((uint64_t)v15, v16, v17, v18, qword_100594CF8);

  uint64_t v20 = qword_100583A68;
  id v21 = v19;
  id v25 = v21;
  if (v20 != -1) {
    id v21 = (id)swift_once();
  }
  sub_1002F3488((uint64_t)v21, v22, v23, v24, qword_100594D00);

  return v25;
}

id sub_1002F202C(void *a1)
{
  unsigned int v1 = [a1 recordingState];
  id result = (id)TUBundle();
  Swift::String v3 = result;
  if (v1 == 3)
  {
    if (result)
    {
      unint64_t v4 = 0xD000000000000016;
      unint64_t v10 = 0xE000000000000000;
      unint64_t v5 = 0x8000000100486550;
LABEL_6:
      v6.value._uint64_t countAndFlagsBits = 0x6F6365526C6C6143;
      v6.value._object = (void *)0xED0000676E696472;
      v7._uint64_t countAndFlagsBits = 0;
      v7._object = (void *)0xE000000000000000;
      uint64_t v8 = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, v6, (NSBundle)v3, v7, *(Swift::String *)(&v10 - 1))._countAndFlagsBits;

      return (id)countAndFlagsBits;
    }
    __break(1u);
  }
  else if (result)
  {
    unint64_t v10 = 0xE000000000000000;
    unint64_t v5 = 0x8000000100486530;
    unint64_t v4 = 0xD000000000000014;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002F2120()
{
  swift_getObjectType();
  sub_1001F081C(&qword_100589318);
  uint64_t v1 = String.init<A>(describing:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_notificationType)) {
    uint64_t v2 = 0x656E6F6850;
  }
  else {
    uint64_t v2 = 0x656D695465636146;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_notificationType)) {
    Swift::String v3 = (void *)0xE500000000000000;
  }
  else {
    Swift::String v3 = (void *)0xE800000000000000;
  }
  uint64_t v6 = v1;
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1002F21E0()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_notificationType);
}

uint64_t sub_1002F21F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002F2200(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

uint64_t sub_1002F2220(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  id v4 = sub_100008DCC();
  static os_log_type_t.error.getter();
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10048FB00;
  id v6 = v2;
  uint64_t v7 = String.init<A>(reflecting:)();
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v10 = sub_1001F3B08();
  *(void *)(v5 + 64) = v10;
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100204074(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v10;
  *(void *)(v5 + 72) = v13;
  *(void *)(v5 + 80) = v14;
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F2354(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v19 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Notification();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  v17[1] = *(void *)&v1[OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)(v13 + ((v11 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
  aBlock[4] = sub_1002F3394;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_1005135F8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  static DispatchQoS.unspecified.getter();
  id v21 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
  return swift_release();
}

void sub_1002F2694(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v8 = String.init<A>(reflecting:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1001F3B08();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  Notification.object.getter();
  if (!v15)
  {
    sub_100210614((uint64_t)v14, (uint64_t *)&unk_100584CA0);
    goto LABEL_5;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100588810);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    id v11 = sub_100008DCC();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_6;
  }
  id v11 = v13;
  sub_1002F28BC(v13);
LABEL_6:
}

uint64_t sub_1002F28BC(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1001FCCD0();
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v8 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F2514();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v15 - 8);
  sub_1001F2514();
  uint64_t v18 = v17 - v16;
  id v19 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  sub_1002F202C(a1);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setTitle:v20];

  id v21 = [self openNoteURLForRecordingSession:a1];
  if (!v21)
  {
    sub_1001F0530(v18, 1, 1, v8);
    goto LABEL_5;
  }
  uint64_t v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v18, v14, v8);
  sub_1001F0530(v18, 0, 1, v8);
  if (sub_1001F758C(v18, 1, v8) == 1)
  {
LABEL_5:
    id v25 = 0;
    goto LABEL_6;
  }
  URL._bridgeToObjectiveC()(v23);
  id v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v18, v8);
LABEL_6:
  objc_msgSend(v19, "setDefaultActionURL:", v25, v45, v46);

  [v19 setCategoryIdentifier:TUNotificationCategoryIdentifierCallRecording];
  sub_1001F6204(0, &qword_100589320);
  id v26 = sub_1002F2F18();
  [v19 setIcon:v26];

  [v19 setShouldIgnoreDoNotDisturb:1];
  uint64_t v27 = sub_1002F2120();
  sub_10036EEF0(v27, v28, v19);
  id v29 = [self triggerWithTimeInterval:0 repeats:1.0];
  sub_1001F6204(0, (unint64_t *)&qword_1005858F8);
  id v30 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = UUID.uuidString.getter();
  uint64_t v33 = v32;
  sub_1001F7664();
  v34();
  id v35 = v19;
  id v36 = v29;
  id v37 = sub_100362954(v31, v33, v35, v29);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v2;
  *(void *)(v38 + 24) = v37;
  aBlock[4] = sub_1002F3478;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100513648;
  uint64_t v39 = _Block_copy(aBlock);
  id v40 = v2;
  id v41 = v37;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v39);

  sub_1001F7664();
  v42();
  sub_1001F7664();
  v43();
  return swift_release();
}

id sub_1002F2F18()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() iconForApplicationIdentifier:v0];

  return v1;
}

uint64_t sub_1002F2F7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_add);
  if (v2)
  {
    swift_retain();
    v2(a2);
    return sub_100208490((uint64_t)v2);
  }
  return result;
}

void sub_1002F2FF8()
{
}

uint64_t sub_1002F30FC()
{
  return type metadata accessor for CallRecordingNotificationProvider();
}

uint64_t type metadata accessor for CallRecordingNotificationProvider()
{
  uint64_t result = qword_100589308;
  if (!qword_100589308) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002F314C()
{
  sub_100254F90();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1002F322C(uint64_t a1, uint64_t a2)
{
  return sub_1002F2200(a1, a2, &OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_add, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_1002F3260(uint64_t a1, uint64_t a2)
{
  return sub_1002F2200(a1, a2, &OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_replace, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_1002F3294(uint64_t a1, uint64_t a2)
{
  return sub_1002F2200(a1, a2, &OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_removeNotification, (uint64_t (*)(uint64_t, uint64_t))sub_100235A1C);
}

uint64_t sub_1002F32C8(uint64_t a1, uint64_t a2)
{
  return sub_1002F2200(a1, a2, &OBJC_IVAR____TtC13callservicesd33CallRecordingNotificationProvider_updateBadgeValue, (uint64_t (*)(uint64_t, uint64_t))sub_100208490);
}

uint64_t sub_1002F3300()
{
  type metadata accessor for Notification();
  sub_1001F75FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v5();

  return _swift_deallocObject(v0, v4 + 8, v3);
}

void sub_1002F3394()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_1002F2694(v2);
}

uint64_t sub_1002F3420(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002F3430()
{
  return swift_release();
}

uint64_t sub_1002F3438()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F3478()
{
  return sub_1002F2F7C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

id sub_1002F3488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(const char **)(v8 + 2240);
  return objc_msgSend(v5, v10, v7, v6, a5, 0);
}

void sub_1002F34AC(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0;
  v2[1] = 0;
}

uint64_t sub_1002F34B8(void *a1)
{
  id v3 = [a1 remoteHandle];
  if (v3)
  {
    unint64_t v4 = v3;
    NSString v5 = [v3 value];
    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v6 = [self suggestedNamesForDestinationID:v5 onlySignificant:1 supportsInfoLookup:0 error:0];

    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10048F550;
    uint64_t v57 = v4;
    id v10 = [v4 value];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    uint64_t v14 = sub_1002F3DE4(v9);
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      BOOL v16 = v15 == 0;
    }
    else
    {
      BOOL v16 = 1;
    }
    uint64_t v63 = v8;
    BOOL v21 = !v16;
    BOOL v62 = !v16;
    char v60 = sub_1002F40B0(a1);
    sub_1002F4210(a1);
    char v64 = v22;
    id v23 = [a1 silencingUserInfo];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v24 = [objc_allocWithZone((Class)NSNumber) initWithBool:v21];
    swift_bridgeObjectRetain();
    objc_msgSend(v23, "__swift_setObject:forKeyedSubscript:", v24, sub_1002F4DA0());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    id v25 = [a1 silencingUserInfo];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v26 = [objc_allocWithZone((Class)NSNumber) initWithBool:v8 != 0];
    swift_bridgeObjectRetain();
    objc_msgSend(v25, "__swift_setObject:forKeyedSubscript:", v26, sub_1002F4DA0());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    id v27 = [a1 silencingUserInfo];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:");
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1002F4DA0();
    sub_1002F4D7C(v29);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    uint64_t v58 = a1;
    id v30 = [a1 silencingUserInfo];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v31 = 1;
    id v32 = [objc_allocWithZone((Class)NSNumber) initWithBool:(v64 & 1) == 0];
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1002F4DA0();
    sub_1002F4D7C(v33);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    if (!v62) {
      char v31 = (v63 != 0) | v60 | v64;
    }
    char v61 = v31;
    id v34 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_10048FF70;
    uint64_t v59 = type metadata accessor for ContactsCallFilter();
    *(void *)(v35 + 56) = v59;
    unint64_t v36 = sub_1002F4C44();
    *(void *)(v35 + 64) = v36;
    *(void *)(v35 + 32) = v1;
    id v37 = v1;
    uint64_t v38 = String.init<A>(reflecting:)();
    uint64_t v40 = v39;
    *(void *)(v35 + 96) = &type metadata for String;
    unint64_t v41 = sub_1001F3B08();
    *(void *)(v35 + 104) = v41;
    *(void *)(v35 + 72) = v38;
    *(void *)(v35 + 80) = v40;
    uint64_t v42 = String.init<A>(reflecting:)();
    *(void *)(v35 + 136) = &type metadata for String;
    *(void *)(v35 + 144) = v41;
    *(void *)(v35 + 112) = v42;
    *(void *)(v35 + 120) = v43;
    uint64_t v44 = String.init<A>(reflecting:)();
    *(void *)(v35 + 176) = &type metadata for String;
    *(void *)(v35 + 184) = v41;
    *(void *)(v35 + 152) = v44;
    *(void *)(v35 + 160) = v45;
    uint64_t v46 = String.init<A>(reflecting:)();
    *(void *)(v35 + 216) = &type metadata for String;
    *(void *)(v35 + 224) = v41;
    *(void *)(v35 + 192) = v46;
    *(void *)(v35 + 200) = v47;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    id v48 = sub_100008DCC();
    uint64_t v49 = sub_1001FCCE4();
    *(_OWORD *)(v49 + 16) = xmmword_10048FB00;
    *(void *)(v49 + 56) = v59;
    *(void *)(v49 + 64) = v36;
    *(void *)(v49 + 32) = v37;
    if (v61)
    {
      sub_1001F6204(0, &qword_10058B660);
      id v50 = v37;
      id v51 = v58;
      uint64_t v52 = String.init<A>(reflecting:)();
      *(void *)(v49 + 96) = &type metadata for String;
      *(void *)(v49 + 104) = v41;
      *(void *)(v49 + 72) = v52;
      *(void *)(v49 + 80) = v53;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      return 0;
    }
    *(void *)(v49 + 96) = sub_1001F6204(0, &qword_10058B660);
    *(void *)(v49 + 104) = sub_1002F4D04();
    *(void *)(v49 + 72) = v58;
    id v55 = v37;
    id v56 = v58;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    id v17 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v18 = sub_1001FCCE4();
    *(_OWORD *)(v18 + 16) = xmmword_10048FB00;
    *(void *)(v18 + 56) = type metadata accessor for ContactsCallFilter();
    *(void *)(v18 + 64) = sub_1002F4C44();
    *(void *)(v18 + 32) = v1;
    *(void *)(v18 + 96) = sub_1001F6204(0, &qword_10058B660);
    *(void *)(v18 + 104) = sub_1002F4D04();
    *(void *)(v18 + 72) = a1;
    id v19 = v1;
    id v20 = a1;
    sub_1002F4DB8();

    swift_bridgeObjectRelease();
  }
  return 1;
}

BOOL sub_1002F3C34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a4) {
    goto LABEL_6;
  }
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10048FB00;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
    *(void *)(v9 + 48) = a3;
    *(void *)(v9 + 56) = a4;
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_6:
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10048F550;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1002F3DE4(v9);
  swift_bridgeObjectRelease();
  if (!v10) {
    return 1;
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease();
  return v11 == 0;
}

uint64_t sub_1002F3DE4(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  sub_1001F6204(0, (unint64_t *)&qword_100584D10);
  swift_bridgeObjectRetain();
  id v2 = sub_1003791B0();
  id v3 = self;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v5 = [v3 predicateForContactsMatchingHandleStrings:isa];

  [v2 setPredicate:v5];
  id v6 = *(void **)&v1[OBJC_IVAR___CSDContactsCallFilter_contactStore];
  id v21 = 0;
  id v7 = [v6 executeFetchRequest:v2 error:&v21];
  if (!v7)
  {
    id v11 = v21;
    uint64_t v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v13 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v14 = sub_1001FCCE4();
    *(_OWORD *)(v14 + 16) = xmmword_10048FB00;
    *(void *)(v14 + 56) = type metadata accessor for ContactsCallFilter();
    *(void *)(v14 + 64) = sub_1002F4C44();
    *(void *)(v14 + 32) = v1;
    id v21 = v12;
    uint64_t v15 = v1;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = v17;
    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = sub_1001F3B08();
    *(void *)(v14 + 72) = v16;
    *(void *)(v14 + 80) = v18;
    os_log(_:dso:log:type:_:)();
    swift_errorRelease();

    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = v7;
  id v9 = v21;
  id v21 = [v8 value];
  sub_1001F081C(&qword_100584D18);
  if (swift_dynamicCast())
  {
    uint64_t v10 = v20;
  }
  else
  {
    sub_1001F081C(&qword_100588780);
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
  }

  return v10;
}

uint64_t sub_1002F40B0(void *a1)
{
  id v3 = [a1 remoteHandle];
  if (v3 && (v4 = v3, id v5 = [v3 tuHandle], v4, v5))
  {
    if ([a1 verificationStatus] == (id)1)
    {
      id v6 = [*(id *)&v1[OBJC_IVAR___CSDContactsCallFilter_appleCareHandles] contains:v5];
    }
    else
    {

      return 0;
    }
  }
  else
  {
    id v7 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v8 = sub_1001FCCE4();
    *(_OWORD *)(v8 + 16) = xmmword_10048FB00;
    *(void *)(v8 + 56) = type metadata accessor for ContactsCallFilter();
    *(void *)(v8 + 64) = sub_1002F4C44();
    *(void *)(v8 + 32) = v1;
    *(void *)(v8 + 96) = sub_1001F6204(0, &qword_10058B660);
    *(void *)(v8 + 104) = sub_1002F4D04();
    *(void *)(v8 + 72) = a1;
    id v9 = v1;
    id v10 = a1;
    sub_1002F4DB8();

    swift_bridgeObjectRelease();
    return 1;
  }
  return (uint64_t)v6;
}

void sub_1002F4210(void *a1)
{
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v3 - 8);
  uint64_t v72 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v66 - v11;
  __chkstk_darwin(v10);
  id v13 = (char *)&v66 - v12;
  uint64_t v79 = v1;
  id v69 = *(id *)&v1[OBJC_IVAR___CSDContactsCallFilter_carrierBundleController];
  id v14 = [v69 serviceProviders];
  uint64_t v68 = sub_1001F6204(0, &qword_100589368);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16) {
    goto LABEL_11;
  }
LABEL_3:
  if (v16 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v67 = a1;
  char v70 = v9;
  uint64_t v71 = v6;
  uint64_t v80 = v5;
  uint64_t v17 = 0;
  unint64_t v75 = v15 & 0xC000000000000001;
  uint64_t v73 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v18 = (void (**)(char *, uint64_t))(v6 + 8);
  long long v74 = xmmword_1004904F0;
  uint64_t v76 = v16;
  unint64_t v77 = v15;
  do
  {
    if (v75) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(v15 + 8 * v17 + 32);
    }
    uint64_t v20 = v19;
    ++v17;
    id v21 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v74;
    *(void *)(v22 + 56) = type metadata accessor for ContactsCallFilter();
    *(void *)(v22 + 64) = sub_1002F4C44();
    id v23 = v79;
    *(void *)(v22 + 32) = v79;
    id v24 = v23;
    id v25 = [v20 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = v80;
    (*v73)(v78, v13, v80);
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v29 = v28;
    (*v18)(v13, v26);
    *(void *)(v22 + 96) = &type metadata for String;
    unint64_t v30 = sub_1001F3B08();
    *(void *)(v22 + 104) = v30;
    *(void *)(v22 + 72) = v27;
    *(void *)(v22 + 80) = v29;
    id v31 = [v20 carrierPhoneNumbers];
    uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v81 = v32;
    sub_1001F081C(&qword_10058B600);
    uint64_t v33 = String.init<A>(reflecting:)();
    *(void *)(v22 + 136) = &type metadata for String;
    *(void *)(v22 + 144) = v30;
    *(void *)(v22 + 112) = v33;
    *(void *)(v22 + 120) = v34;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    unint64_t v15 = v77;
  }
  while (v76 != v17);
  swift_bridgeObjectRelease();
  uint64_t v5 = v80;
  id v9 = v70;
  uint64_t v6 = v71;
  a1 = v67;
LABEL_12:
  id v35 = [a1 localSenderIdentityUUID];
  if (!v35)
  {
    uint64_t v38 = v72;
    sub_1001F0530(v72, 1, 1, v5);
    goto LABEL_27;
  }
  unint64_t v36 = v35;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v37 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v38 = v72;
  v37(v72, v13, v5);
  sub_1001F0530(v38, 0, 1, v5);
  if (sub_1001F758C(v38, 1, v5) == 1)
  {
LABEL_27:
    sub_1002012F4(v38);
    return;
  }
  v37((uint64_t)v9, (char *)v38, v5);
  id v39 = [v69 serviceProviders];
  unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v41);
  *(&v66 - 2) = (uint64_t)v9;
  uint64_t v42 = sub_100225EE4(sub_1002F4C90, (uint64_t)(&v66 - 4), v40);
  swift_bridgeObjectRelease();
  if (v42)
  {
    id v43 = [v42 carrierPhoneNumbers];

    uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v45 = [a1 remoteHandle];
    if (!v45
      || (uint64_t v46 = v45, v47 = [v45 tuHandle], v46, !v47))
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = sub_1002F4D64();
      v63(v62);
      return;
    }
    id v48 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v49 = sub_1001FCCE4();
    *(_OWORD *)(v49 + 16) = xmmword_10048FB00;
    *(void *)(v49 + 56) = type metadata accessor for ContactsCallFilter();
    *(void *)(v49 + 64) = sub_1002F4C44();
    id v50 = v79;
    *(void *)(v49 + 32) = v79;
    *(void *)(v49 + 96) = sub_1001F081C(&qword_10058B600);
    *(void *)(v49 + 104) = sub_1002F4CB0();
    *(void *)(v49 + 72) = v44;
    id v51 = v50;
    swift_bridgeObjectRetain();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v44 + 16);
    if (v52)
    {
      char v70 = v9;
      uint64_t v71 = v6;
      uint64_t v80 = v5;
      swift_bridgeObjectRetain();
      uint64_t v53 = (uint64_t *)(v44 + 40);
      while (1)
      {
        uint64_t v55 = *(v53 - 1);
        uint64_t v54 = *v53;
        swift_bridgeObjectRetain();
        id v56 = [v47 value];
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v59 = v58;

        if (v55 == v57 && v54 == v59)
        {

          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v61) {
          break;
        }
        v53 += 2;
        swift_bridgeObjectRelease();
        if (!--v52)
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_33;
        }
      }

LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
LABEL_33:
  uint64_t v64 = sub_1002F4D64();
  v65(v64);
}

uint64_t sub_1002F4998(id *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

id sub_1002F4AA4()
{
  uint64_t v1 = OBJC_IVAR___CSDContactsCallFilter_contactStore;
  uint64_t v2 = self;
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 storeWithOptions:3];
  uint64_t v4 = OBJC_IVAR___CSDContactsCallFilter_appleCareHandles;
  *(void *)&v3[v4] = [objc_allocWithZone((Class)TUContactsDataProviderAppleCareHandles) init];
  uint64_t v5 = OBJC_IVAR___CSDContactsCallFilter_carrierBundleController;
  *(void *)&v3[v5] = [objc_allocWithZone((Class)CSDCarrierBundleProviderController) init];

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for ContactsCallFilter();
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1002F4B90()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContactsCallFilter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContactsCallFilter()
{
  return self;
}

unint64_t sub_1002F4C44()
{
  unint64_t result = qword_100589370;
  if (!qword_100589370)
  {
    type metadata accessor for ContactsCallFilter();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589370);
  }
  return result;
}

uint64_t sub_1002F4C90(id *a1)
{
  return sub_1002F4998(a1) & 1;
}

unint64_t sub_1002F4CB0()
{
  unint64_t result = qword_100589378;
  if (!qword_100589378)
  {
    sub_1001F08B4(&qword_10058B600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589378);
  }
  return result;
}

unint64_t sub_1002F4D04()
{
  unint64_t result = qword_10058B540;
  if (!qword_10058B540)
  {
    sub_1001F6204(255, &qword_10058B660);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058B540);
  }
  return result;
}

uint64_t sub_1002F4D64()
{
  return v0;
}

id sub_1002F4D7C(uint64_t a1)
{
  uint64_t v5 = *(const char **)(v2 + 3736);
  return objc_msgSend(v1, v5, v3, a1);
}

uint64_t sub_1002F4DA0()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t sub_1002F4DB8()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_1002F4DD8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100202200(v0, qword_100594B98);
  sub_1001F5F88(v0, (uint64_t)qword_100594B98);
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_100594A20;
  return Logger.init(_:)();
}

uint64_t sub_1002F4E64(uint64_t a1)
{
  return sub_1002F4FD0(a1, qword_100594BB0);
}

uint64_t sub_1002F4E90(uint64_t a1)
{
  return sub_1002F5260(a1, qword_100594BC8);
}

uint64_t sub_1002F4EB0(uint64_t a1)
{
  return sub_1002F5270(a1, qword_100594BE0);
}

uint64_t sub_1002F4ED0(uint64_t a1)
{
  return sub_1002F5260(a1, qword_100594BF8);
}

uint64_t sub_1002F4EF0(uint64_t a1)
{
  return sub_1002F5278(a1, qword_100594C10);
}

uint64_t sub_1002F4F08(uint64_t a1)
{
  return sub_1002F5260(a1, qword_100594C28);
}

uint64_t sub_1002F4F28(uint64_t a1)
{
  return sub_1002F5278(a1, qword_100594C40);
}

uint64_t sub_1002F4F40(uint64_t a1)
{
  return sub_1002F5268(a1, qword_100594C58);
}

uint64_t sub_1002F4F68(uint64_t a1)
{
  return sub_1002F5270(a1, qword_100594C70);
}

uint64_t sub_1002F4F88(uint64_t a1)
{
  return sub_1002F5260(a1, qword_100594C88);
}

uint64_t sub_1002F4FA8(uint64_t a1)
{
  return sub_1002F5268(a1, qword_100594CA0);
}

uint64_t sub_1002F4FD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_100202200(v3, a2);
  sub_1001F5F88(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002F5048()
{
  uint64_t result = static os_log_type_t.error.getter();
  static os_log_type_t.errorWithState = result | 0x80;
  return result;
}

char *os_log_type_t.errorWithState.unsafeMutableAddressor()
{
  if (qword_100583A40 != -1) {
    swift_once();
  }
  return &static os_log_type_t.errorWithState;
}

uint64_t static os_log_type_t.errorWithState.getter()
{
  if (qword_100583A40 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static os_log_type_t.errorWithState;
}

uint64_t static os_log_type_t.errorWithState.setter(char a1)
{
  if (qword_100583A40 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static os_log_type_t.errorWithState = a1;
  return result;
}

uint64_t (*static os_log_type_t.errorWithState.modify())()
{
  if (qword_100583A40 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

char *sub_1002F5230(char *__src, char *__dst, uint64_t a3)
{
  if (__dst) {
    return strncpy(__dst, __src, a3 - (void)__dst);
  }
  __break(1u);
  return __src;
}

uint64_t sub_1002F5260(uint64_t a1, uint64_t *a2)
{
  return sub_1002F4FD0(a1, a2);
}

uint64_t sub_1002F5268(uint64_t a1, uint64_t *a2)
{
  return sub_1002F4FD0(a1, a2);
}

uint64_t sub_1002F5270(uint64_t a1, uint64_t *a2)
{
  return sub_1002F4FD0(a1, a2);
}

uint64_t sub_1002F5278(uint64_t a1, uint64_t *a2)
{
  return sub_1002F4FD0(a1, a2);
}

uint64_t sub_1002F5280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedSecret();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  objc_super v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
  if (!v2)
  {
    uint64_t v18 = a2;
    type metadata accessor for SHA256();
    long long v15 = xmmword_100493890;
    long long v17 = xmmword_100493890;
    if (qword_100583A48 != -1) {
      swift_once();
    }
    long long v16 = xmmword_100589380;
    sub_1002F63DC();
    unint64_t v9 = sub_1002105C8();
    uint64_t v12 = sub_1002F6720(v9, (uint64_t)&v17, (uint64_t)&v16, v10, v11, (uint64_t)&type metadata for Data);
    long long v17 = v15;
    if (qword_100583A50 != -1) {
      uint64_t v12 = swift_once();
    }
    long long v16 = xmmword_100589390;
    sub_1002F6720(v12, (uint64_t)&v17, (uint64_t)&v16, v13, v14, (uint64_t)&type metadata for Data);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

void *sub_1002F547C(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1002F54C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1002F5B98(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1002F54F8(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_1005893A0);
  if (swift_dynamicCast())
  {
    sub_100233560(v35, (uint64_t)&v38);
    sub_100204074(&v38, v40);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v35[0] = v37;
    sub_1002018DC((uint64_t)&v38);
    return *(void *)&v35[0];
  }
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_1002F642C((uint64_t)v35);
  uint64_t v2 = v34;
  if ((v34 & 0x1000000000000000) != 0)
  {
LABEL_61:
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v34 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v33;
      uint64_t v39 = v34 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((v33 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    uint64_t v3 = Data._Representation.init(_:)();
    unint64_t v5 = v4;
    if (v4 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = v3;
      *((void *)&v35[0] + 1) = v5;
      return *(void *)&v35[0];
    }
    if ((v34 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  String.UTF8View._foreignCount()();
LABEL_10:
  *(void *)&v35[0] = Data._Representation.init(count:)();
  *((void *)&v35[0] + 1) = v6;
  __chkstk_darwin(*(void *)&v35[0]);
  long long v28[2] = &v33;
  unint64_t v7 = (unint64_t)sub_1002F5D24((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1002F64C4, (uint64_t)v28);
  uint64_t v10 = *((void *)&v35[0] + 1) >> 62;
  uint64_t v11 = v7;
  unint64_t v13 = v12;
  unint64_t v14 = v8;
  uint64_t v2 = BYTE14(v35[0]);
  switch(*((void *)&v35[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v35[0]) - LODWORD(v35[0]);
      if (__OFSUB__(DWORD1(v35[0]), v35[0])) {
        goto LABEL_65;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v9 != v15)
      {
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v2 = *(uint64_t *)&v35[0] >> 32;
          }
          else {
            uint64_t v2 = *(void *)(*(void *)&v35[0] + 24);
          }
        }
LABEL_53:
        if (v2 < v9)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
LABEL_22:
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v37 + 7) = 0;
      *(void *)&long long v37 = 0;
      if (4 * v19 == v8 >> 14) {
        goto LABEL_51;
      }
      unint64_t v29 = v5;
      LOBYTE(v20) = 0;
      uint64_t v21 = (v7 >> 59) & 1;
      if ((v13 & 0x1000000000000000) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4 << v21;
      uint64_t v32 = v13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = v3;
      uint64_t v31 = (v13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v17 = *(void *)(*(void *)&v35[0] + 16);
      uint64_t v16 = *(void *)(*(void *)&v35[0] + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_66;
    case 3:
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v2 = 0;
      goto LABEL_53;
    default:
      uint64_t v15 = BYTE14(v35[0]);
      goto LABEL_16;
  }
  do
  {
    unint64_t v23 = v14;
    if ((v14 & 0xC) == v22) {
      unint64_t v23 = sub_100234A50(v14, v11, v13);
    }
    unint64_t v24 = v23 >> 16;
    if (v23 >> 16 >= v19)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      char v26 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v32;
      char v26 = *((unsigned char *)&v38 + v24);
    }
    else
    {
      uint64_t v25 = v31;
      if ((v11 & 0x1000000000000000) == 0) {
        uint64_t v25 = _StringObject.sharedUTF8.getter();
      }
      char v26 = *(unsigned char *)(v25 + v24);
    }
    if ((v14 & 0xC) == v22)
    {
      unint64_t v14 = sub_100234A50(v14, v11, v13);
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_40:
        unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_45;
      }
    }
    else if ((v13 & 0x1000000000000000) == 0)
    {
      goto LABEL_40;
    }
    if (v19 <= v14 >> 16) {
      goto LABEL_60;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_45:
    *((unsigned char *)&v37 + v20) = v26;
    unsigned int v20 = v20 + 1;
    if ((v20 >> 8)) {
      goto LABEL_59;
    }
    BYTE14(v37) = v20;
    if (v20 == 14)
    {
      uint64_t v38 = v37;
      LODWORD(v39) = DWORD2(v37);
      WORD2(v39) = WORD6(v37);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v20) = 0;
      BYTE14(v37) = 0;
    }
  }
  while (4 * v19 != v14 >> 14);
  uint64_t v3 = v30;
  unint64_t v5 = v29;
  if ((_BYTE)v20)
  {
    uint64_t v38 = v37;
    LODWORD(v39) = DWORD2(v37);
    WORD2(v39) = WORD6(v37);
    Data._Representation.append(contentsOf:)();
    sub_1001FCB18(v3, v5);
    goto LABEL_55;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  sub_1001FCB18(v3, v5);
LABEL_56:
  swift_bridgeObjectRelease();
  return *(void *)&v35[0];
}

uint64_t sub_1002F5A0C(uint64_t a1, unint64_t a2)
{
  v13[3] = &type metadata for Data;
  void v13[4] = &protocol witness table for Data;
  v13[0] = a1;
  v13[1] = a2;
  unint64_t v4 = sub_100204074(v13, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
        JUMPOUT(0x1002F5B88);
      }
      sub_1002F6748();
      sub_1001F7440(v5, v6);
      sub_1002F61E8((int)v5, v5 >> 32, &v12);
      sub_1001F7498(v5, v6);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      sub_1002F6748();
      swift_retain();
      swift_retain();
      sub_1002F61E8(v8, v9, &v12);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      sub_1002F6748();
      uint64_t v7 = 0;
      goto LABEL_7;
    default:
      sub_1002F6748();
      uint64_t v7 = BYTE6(v6);
LABEL_7:
      sub_1002F627C(v7, &v12);
      break;
  }
  sub_1001F7498(a1, a2);
  uint64_t v10 = v12;
  sub_1002018DC((uint64_t)v13);
  return v10;
}

uint64_t sub_1002F5B98(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_100204074(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2 && (v4 = v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = Data.InlineData.init(_:)();
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = Data.LargeSlice.init(_:)();
    }
    else
    {
      uint64_t v6 = Data.InlineSlice.init(_:)();
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_1002018DC((uint64_t)v8);
  return v6;
}

uint64_t sub_1002F5C54()
{
  uint64_t result = sub_1002F54F8(0xD000000000000011, 0x80000001004868C0);
  *(void *)&xmmword_100589380 = result;
  *((void *)&xmmword_100589380 + 1) = v1;
  return result;
}

uint64_t sub_1002F5C90()
{
  uint64_t result = sub_1002F54F8(0xD000000000000012, 0x80000001004868A0);
  *(void *)&xmmword_100589390 = result;
  *((void *)&xmmword_100589390 + 1) = v1;
  return result;
}

void *sub_1002F5CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  _OWORD v5[2] = v6;
  return sub_1002F60CC((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1002F6524, (uint64_t)v5, a1, a2);
}

void *sub_1002F5D24(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_100493890;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_1002F6134((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      uint64_t *v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1002F6134(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *uint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_1002F547C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_1002F547C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *uint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_1002F5FD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1002F6048(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1002F60CC(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_1002F6134(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1002F61E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return sub_1002F5FD0(v7, v13, a3);
}

uint64_t sub_1002F627C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    if (a1 <= 14)
    {
      uint64_t result = Data.InlineData.init(_:)();
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v4 = __DataStorage.init(bytes:length:)();
      if ((unint64_t)a1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = a1;
        unint64_t v6 = v4 | 0x8000000000000000;
      }
      else
      {
        uint64_t result = a1 << 32;
        unint64_t v6 = v4 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = 0xC000000000000000;
  }
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_1002F63DC()
{
  unint64_t result = qword_100584830;
  if (!qword_100584830)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584830);
  }
  return result;
}

uint64_t sub_1002F642C(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_1005893A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1002F648C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = sub_1002F5CCC(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_1002F64C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1002F648C(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1002F64E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002F6048(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002F6524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002F64E0(a1, a2);
}

uint64_t getEnumTagSinglePayload for ConversationLinkCryptoErrorType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConversationLinkCryptoErrorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002F6698);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkCryptoErrorType()
{
  return &type metadata for ConversationLinkCryptoErrorType;
}

unint64_t sub_1002F66D4()
{
  unint64_t result = qword_1005893B0;
  if (!qword_1005893B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005893B0);
  }
  return result;
}

uint64_t sub_1002F6720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)(v6, a2, a3, 32, v6, a6, a6, v7);
}

uint64_t sub_1002F6748()
{
  return sub_1001F7440(v1, v0);
}

uint64_t sub_1002F6760(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  sub_1002E4D1C(v22, a3);
  uint64_t v5 = v22[0];
  uint64_t v23 = v22[1];
  int64_t v6 = v22[3];
  unint64_t v7 = v22[4];
  int64_t v8 = (unint64_t)(v22[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_15;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v12 >= v8) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v6 + 3;
      if (v6 + 3 >= v8) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v6 + 4;
      if (v6 + 4 >= v8) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13)
      {
LABEL_13:
        int64_t v12 = v14;
      }
      else
      {
        int64_t v12 = v6 + 5;
        if (v6 + 5 >= v8) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v23 + 8 * v12);
        if (!v13)
        {
          int64_t v19 = v6 + 6;
          while (v19 < v8)
          {
            unint64_t v13 = *(void *)(v23 + 8 * v19++);
            if (v13)
            {
              int64_t v12 = v19 - 1;
              goto LABEL_14;
            }
          }
LABEL_25:
          swift_release();
          char v20 = 0;
          return v20 & 1;
        }
      }
    }
LABEL_14:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v6 = v12;
LABEL_15:
    uint64_t v15 = (void *)(*(void *)(v5 + 56) + 16 * v11);
    uint64_t v16 = v15[1];
    v21[0] = *v15;
    v21[1] = v16;
    swift_bridgeObjectRetain();
    char v17 = a1(v21);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v20 & 1;
    }
    char v18 = v17;
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      swift_release();
      char v20 = 1;
      return v20 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002F6938(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_1002E4D1C(v18, a3);
  uint64_t v5 = v18[0];
  uint64_t v6 = v18[1];
  int64_t v7 = v18[3];
  unint64_t v8 = v18[4];
  int64_t v9 = (unint64_t)(v18[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_15;
    }
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v7 + 3;
      if (v7 + 3 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v7 + 4;
      if (v7 + 4 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }
      else
      {
        int64_t v13 = v7 + 5;
        if (v7 + 5 >= v9) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v13);
        if (!v14)
        {
          int64_t v16 = v7 + 6;
          while (v16 < v9)
          {
            unint64_t v14 = *(void *)(v6 + 8 * v16++);
            if (v14)
            {
              int64_t v13 = v16 - 1;
              goto LABEL_14;
            }
          }
LABEL_25:
          swift_release();
          char v17 = 0;
          return v17 & 1;
        }
      }
    }
LABEL_14:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v7 = v13;
LABEL_15:
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
    uint64_t result = a1(&v19);
    if (v3)
    {
      swift_release();
      return v17 & 1;
    }
    if (result)
    {
      swift_release();
      char v17 = 1;
      return v17 & 1;
    }
  }
  __break(1u);
  return result;
}

id sub_1002F6AD4()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001F2514();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  sub_1001F2514();
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  id v8 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10021FD54();
  sub_1001F081C(&qword_100585100);
  sub_1001F0860();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  int64_t v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  id v10 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v11 = [objc_allocWithZone((Class)type metadata accessor for ProtectedAppsObserver()) init];
  id v12 = objc_allocWithZone((Class)type metadata accessor for ProcessObserver());
  id v13 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v15 = [v12 initWithBundleIdentifiers:isa queue:v13];

  id v16 = sub_1002F73F0((uint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v15);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v16;
}

uint64_t sub_1002F6DBC(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v12 = 0;
  if ([*(id *)(v2 + OBJC_IVAR___CSDProtectedAppsUtilities_tuFeatureFlags) appProtectionEnabled])
  {
    if (sub_1002F7074(a1, a2)) {
      char v5 = sub_1002F7168() ^ 1;
    }
    else {
      char v5 = 0;
    }
    unsigned __int8 v12 = v5 & 1;
    sub_1001F6204(0, &qword_100584B80);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = static OS_os_log.default.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      v11[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2080;
      swift_bridgeObjectRetain();
      sub_1002344D8(a1, a2, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ProtectedAppsUtilities: shouldBlockCall returning %{BOOL}d for originating call app of Bundle Identifier [%s]. We should block a call only if the originating app is hidden and not foregrounded.", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_1001F6204(0, &qword_100584B80);
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_beginAccess();
  return v12;
}

uint64_t sub_1002F7074(uint64_t a1, uint64_t a2)
{
  sub_100204074((void *)(v2 + OBJC_IVAR___CSDProtectedAppsUtilities_protectedAppsObserver), *(void *)(v2 + OBJC_IVAR___CSDProtectedAppsUtilities_protectedAppsObserver + 24));
  sub_100349264();
  uint64_t v6 = v5;
  uint64_t v7 = v5[2];
  if (!v7) {
    goto LABEL_17;
  }
  BOOL v8 = v5[4] == a1 && v5[5] == a2;
  if (v8 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v7 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    id v10 = v6 + 7;
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      if (*(v10 - 1) == a1 && *v10 == a2) {
        goto LABEL_7;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_7;
      }
      v10 += 2;
      ++v11;
      if (v12 == v7) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002F7168()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1002F71DC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___CSDProtectedAppsUtilities_processObserver);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 fetchCurrentProcessStatesForBundleIdentifier:v4];

  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = 4;
  void v9[2] = &v10;
  char v7 = sub_1002F6938((uint64_t (*)(uint64_t *))sub_1002F75FC, (uint64_t)v9, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v7 & 1;
  return result;
}

id sub_1002F72C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProtectedAppsUtilities();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ProtectedAppsUtilities()
{
  return self;
}

uint64_t sub_1002F738C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1002F71DC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1002F73AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

id sub_1002F73F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = type metadata accessor for ProtectedAppsObserver();
  char v18 = &off_100515A98;
  v16[0] = a2;
  BOOL v8 = (char *)objc_allocWithZone((Class)type metadata accessor for ProtectedAppsUtilities());
  uint64_t v9 = sub_10020EF04((uint64_t)v16, v17);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  id v13 = sub_1002F7518(a1, *v11, a3, a4, v8);
  sub_1002018DC((uint64_t)v16);
  return v13;
}

id sub_1002F7518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  v13[3] = type metadata accessor for ProtectedAppsObserver();
  void v13[4] = &off_100515A98;
  v13[0] = a2;
  *(void *)&a5[OBJC_IVAR___CSDProtectedAppsUtilities_tuFeatureFlags] = a1;
  sub_10020ED28((uint64_t)v13, (uint64_t)&a5[OBJC_IVAR___CSDProtectedAppsUtilities_protectedAppsObserver]);
  *(void *)&a5[OBJC_IVAR___CSDProtectedAppsUtilities_protectedAppsUtilitiesQueue] = a3;
  *(void *)&a5[OBJC_IVAR___CSDProtectedAppsUtilities_processObserver] = a4;
  v12.receiver = a5;
  v12.super_class = (Class)type metadata accessor for ProtectedAppsUtilities();
  id v10 = objc_msgSendSuper2(&v12, "init");
  sub_1002018DC((uint64_t)v13);
  return v10;
}

BOOL sub_1002F75D8(uint64_t *a1, uint64_t *a2)
{
  return sub_1001FD1C8(*a1, *a2);
}

BOOL sub_1002F75FC(uint64_t *a1)
{
  return sub_1002F75D8(a1, *(uint64_t **)(v1 + 16));
}

void destroy for CallAnnouncementDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  objc_super v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for CallAnnouncementDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  NSString v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  id v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for CallAnnouncementDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  NSString v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  id v7 = *(void **)(a2 + 32);
  BOOL v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for CallAnnouncementDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CallAnnouncementDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();

  NSString v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallAnnouncementDescriptor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 42))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallAnnouncementDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallAnnouncementDescriptor()
{
  return &type metadata for CallAnnouncementDescriptor;
}

void sub_1002F7888(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  sub_1002F8360(v3);
  if (v4)
  {
    id v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = [v5 normalizedGenericHandleForValue:v6];
LABEL_5:

    goto LABEL_6;
  }
  id v8 = [v3 handle];
  if (v8)
  {
    NSString v6 = v8;
    id v9 = v3;
    id v7 = [v9 handle];

    goto LABEL_5;
  }
  id v19 = [v3 remoteParticipantHandles];
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100247240();
  uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = (id)sub_100246B10(v20);
  swift_bridgeObjectRelease();
LABEL_6:
  id v10 = [v3 uniqueProxyIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = v3;
  uint64_t v15 = sub_1002F82FC(v14);
  id v16 = [v14 provider];
  unsigned __int8 v17 = [v14 isBlocked];
  if ([v14 isVideo]) {
    unsigned __int8 v18 = 1;
  }
  else {
    unsigned __int8 v18 = [v14 isThirdPartyVideo];
  }

  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v16;
  *(unsigned char *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 41) = v18;
}

uint64_t sub_1002F7A90(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v5 & 1) != 0))
  {
    id v7 = *(void **)(a1 + 16);
    id v8 = *(void **)(a2 + 16);
    if (v7)
    {
      if (!v8 || (sub_1002F7F78(v7, v8) & 1) == 0) {
        goto LABEL_18;
      }
    }
    else if (v8)
    {
      goto LABEL_18;
    }
    id v9 = *(void **)(a1 + 24);
    id v10 = *(void **)(a2 + 24);
    if (v9)
    {
      if (!v10) {
        goto LABEL_18;
      }
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      id v11 = v10;
      id v12 = v9;
      char v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_16:
      sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
      if ((static NSObject.== infix(_:_:)() & 1) != 0
        && ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0)
      {
        char v6 = ((*(unsigned char *)(a1 + 41) & 1) == 0) ^ *(unsigned char *)(a2 + 41);
        return v6 & 1;
      }
      goto LABEL_18;
    }
    if (!v10) {
      goto LABEL_16;
    }
LABEL_18:
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1002F7BC8()
{
  uint64_t v1 = 7104878;
  uint64_t v2 = *(void *)v0;
  id v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  v5._uint64_t countAndFlagsBits = 0x444955556C6C6163;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 16))
  {
    uint64_t v77 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_10058B600);
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  int v10 = swift_bridgeObjectRetain();
  sub_1002F83D0(v10, v11, v12, v13, v14, v15, v16, v17, v71, v77, 27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v18 = v83;
  id v19 = *(void **)(v0 + 24);
  if (v19)
  {
    uint64_t v78 = *(void *)(v0 + 24);
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    id v20 = v19;
    uint64_t v1 = String.init<A>(reflecting:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = (void *)0xE300000000000000;
  }
  v23._uint64_t countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = 0x3D656C646E6168;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v25 = *(id *)(v0 + 32);
  id v26 = [v25 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002F83D0(v27, v28, v29, v30, v31, v32, v33, v34, v72, v78, 112);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = v84;
  v35._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  int v36 = swift_bridgeObjectRelease();
  sub_1002F83EC(v36, v37, v38, v39, v40, v41, v42, v43, v73, v79, 105);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  int v44 = swift_bridgeObjectRetain();
  sub_1002F83D0(v44, v45, v46, v47, v48, v49, v50, v51, v74, v80, v18);
  swift_bridgeObjectRelease();
  int v52 = swift_bridgeObjectRelease();
  char v53 = v85;
  sub_1002F83EC(v52, v54, v55, v56, v57, v58, v59, v60, v75, v81, 105);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  int v61 = swift_bridgeObjectRetain();
  sub_1002F83EC(v61, v62, v63, v64, v65, v66, v67, v68, v76, v82, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v69._uint64_t countAndFlagsBits = 41;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  return *(void *)v86;
}

uint64_t sub_1002F7F78(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  unint64_t v8 = a1 + 7;
  unint64_t v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002F8048(uint64_t a1, uint64_t a2)
{
  return sub_1002F8098(a1, a2, (void (*)(void, BOOL, uint64_t))sub_1002DE19C, (uint64_t)&qword_10058BE00);
}

uint64_t sub_1002F8070(uint64_t a1, uint64_t a2)
{
  return sub_1002F8098(a1, a2, (void (*)(void, BOOL, uint64_t))sub_1002DE19C, (uint64_t)&unk_100589408);
}

uint64_t sub_1002F8098(uint64_t a1, uint64_t a2, void (*a3)(void, BOOL, uint64_t), uint64_t a4)
{
  unint64_t v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 != v10) {
    goto LABEL_24;
  }
  if (v9)
  {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    if (!v8) {
      uint64_t v11 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    uint64_t v12 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0) {
      uint64_t v12 = a2;
    }
    if ((unint64_t)a2 >> 62) {
      uint64_t v13 = v12;
    }
    if (v11 != v13)
    {
      if (v9 < 0) {
        goto LABEL_42;
      }
      unint64_t v25 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0) {
LABEL_43:
      }
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      else {
        id v14 = *(id *)(a1 + 32);
      }
      int v15 = v14;
      a3(0, (a2 & 0xC000000000000001) == 0, a2);
      if ((a2 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(a2 + 32);
      }
      int v17 = v16;
      sub_1001F6204(0, (unint64_t *)a4);
      a4 = static NSObject.== infix(_:_:)();

      if (a4)
      {
        if (v9 != 1)
        {
          unint64_t v8 = 2 - v9;
          uint64_t v20 = 5;
          while (1)
          {
            a3 = (void (*)(void, BOOL, uint64_t))(v20 - 4);
            if (v20 - 4 >= v9)
            {
              __break(1u);
              goto LABEL_39;
            }
            if (v25) {
              id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v21 = *(id *)(a1 + 8 * v20);
            }
            a4 = (uint64_t)v21;
            if ((a2 & 0xC000000000000001) != 0)
            {
              id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if ((unint64_t)a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              id v22 = *(id *)(a2 + 8 * v20);
            }
            Swift::String v23 = v22;
            char v18 = static NSObject.== infix(_:_:)();

            if (v18)
            {
              unint64_t v24 = v8 + v20++;
              if (v24 != 5) {
                continue;
              }
            }
            return v18 & 1;
          }
        }
        goto LABEL_23;
      }
LABEL_24:
      char v18 = 0;
      return v18 & 1;
    }
  }
LABEL_23:
  char v18 = 1;
  return v18 & 1;
}

uint64_t sub_1002F82FC(void *a1)
{
  id v2 = [a1 contactIdentifiers];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1002F8360(void *a1)
{
  id v2 = [a1 callerNameFromNetwork];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1002F83D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v14);
}

void sub_1002F83EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v14);
}

void sub_1002F8408(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1002F847C()
{
  uint64_t v1 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = v0;
  id v5 = [v4 effectiveIdentifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || ([v4 flags] & 1) != 0 && (objc_msgSend(v4, "flags") & 2) == 0) {
    goto LABEL_12;
  }
  if ([v4 flags])
  {
    id v10 = v4;
    if (([v10 flags] & 4) != 0)
    {

      goto LABEL_12;
    }
    unsigned __int8 v11 = [v10 flags];

    if ((v11 & 8) != 0)
    {
LABEL_12:
      unsigned int v16 = [v4 flags];

      return (v16 >> 9) & 1;
    }
  }
  sub_1002FEA10((uint64_t)v3);

  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = 1;
  int v14 = sub_1001F758C((uint64_t)v3, 1, v12);
  sub_1002012F4((uint64_t)v3);
  if (v14 != 1)
  {
    id v15 = v4;
    goto LABEL_12;
  }
  return v13;
}

uint64_t sub_1002F8604()
{
  uint64_t v1 = sub_1001F612C(v0, (SEL *)&selRef_model);
  if (v2)
  {
    return sub_10020E720(v1, v2);
  }
  else if (([v0 flags] & 2) != 0)
  {
    return 6;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1002F8660()
{
  sub_1001F612C(v0, (SEL *)&selRef_model);
  if (!v1) {
    return 0;
  }
  v2._uint64_t countAndFlagsBits = 0x5654656C707041;
  v2._object = (void *)0xE700000000000000;
  Swift::Bool v3 = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1002F86CC(uint64_t a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100252284(v3, a1);
  LOBYTE(a1) = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v6 = *(void (**)(uint64_t))(v1 + qword_1005864B0);
    if (v6)
    {
      uint64_t v7 = swift_retain();
      v6(v7);
      return sub_100208490((uint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_1002F8774(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_100586508);
  *(void *)(v1 + qword_100586508) = a1;
  sub_1002F86CC(v2);

  return swift_bridgeObjectRelease();
}

char *sub_1002F87BC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone((Class)type metadata accessor for CallCenterObserver());
  id v7 = a1;
  id v8 = [v6 init];
  sub_1001F6204(0, &qword_1005858C8);
  id v9 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v10 = sub_100300A74(v7, (uint64_t)v9, v8, a2, objc_allocWithZone(v3));

  return v10;
}

void sub_1002F8880()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1002F88D8();
  }
}

unint64_t sub_1002F88D8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (uint64_t *)((char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v116 = v0;
  id v5 = *(void **)(v0 + qword_1005864E0);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_1005839A0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
LABEL_88:
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v113 = sub_1001F081C(&qword_100584B20);
  uint64_t v7 = swift_allocObject();
  long long v111 = xmmword_10048F550;
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  uint64_t v8 = v116;
  v133[0] = sub_1002FEB74();
  sub_1001F081C(&qword_1005889A8);
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v112 = sub_1001F3B08();
  *(void *)(v7 + 64) = v112;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v118 = &_swiftEmptySetSingleton;
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v8 + qword_1005864C8);
  uint64_t v13 = swift_retain();
  unsigned __int8 v14 = v12(v13);
  swift_release();
  id v15 = *(uint64_t (**)(uint64_t))(v8 + qword_1005864D0);
  uint64_t v16 = swift_retain();
  char v17 = v15(v16);
  swift_release();
  char v18 = *(unsigned char *)(v8 + qword_100586520) ^ 1;
  id v19 = &selRef_performBlock_;
  if ((v18 & 1) != 0 || ((v14 ^ 1) & 1) != 0 || (v17 & 1) == 0)
  {
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_10048FB00;
    LOBYTE(v133[0]) = v18 & 1;
    uint64_t v76 = String.init<A>(reflecting:)();
    unint64_t v77 = v112;
    *(void *)(v75 + 56) = &type metadata for String;
    *(void *)(v75 + 64) = v77;
    *(void *)(v75 + 32) = v76;
    *(void *)(v75 + 40) = v78;
    LOBYTE(v133[0]) = (v14 ^ 1) & 1;
    uint64_t v79 = String.init<A>(reflecting:)();
    *(void *)(v75 + 96) = &type metadata for String;
    *(void *)(v75 + 104) = v77;
    *(void *)(v75 + 72) = v79;
    *(void *)(v75 + 80) = v80;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_56;
  }
  unint64_t result = (unint64_t)sub_1002FEB74();
  unint64_t v21 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v22 = result;
    if (!result) {
      goto LABEL_56;
    }
    goto LABEL_8;
  }
  uint64_t v22 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v22)
  {
LABEL_8:
    if (v22 < 1)
    {
      __break(1u);
      goto LABEL_93;
    }
    uint64_t v23 = 0;
    unint64_t v24 = (uint64_t (**)(uint64_t, uint64_t))(v116 + qword_1005864D8);
    uint64_t v110 = v116 + qword_1005864F8;
    uint64_t v114 = qword_100586518;
    unint64_t v115 = v21 & 0xC000000000000001;
    uint64_t v108 = qword_100586510;
    uint64_t v101 = v22;
    while (1)
    {
      id v25 = v115 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v21 + 8 * v23 + 32);
      id v26 = v25;
      if (*(unsigned char *)(v116 + v114) == 1)
      {
        uint64_t v27 = sub_1001F612C(v25, (SEL *)&selRef_idsDeviceIdentifier);
        if (!v28) {
          break;
        }
        uint64_t v29 = v27;
        uint64_t v30 = v28;
        int v31 = *v24;
        swift_retain();
        int v32 = (void *)v31(v29, v30);
        swift_bridgeObjectRelease();
        swift_release();
        if (!v32) {
          break;
        }
        unsigned int v33 = [v32 canReceiveRelayedGFTCalls];

        if (!v33) {
          break;
        }
      }
      uint64_t v34 = sub_1001F612C(v26, (SEL *)&selRef_idsDeviceIdentifier);
      if (v35)
      {
        uint64_t v36 = v34;
        uint64_t v37 = v35;
        int v38 = *v24;
        swift_retain();
        int v39 = (void *)v38(v36, v37);
        swift_bridgeObjectRelease();
        swift_release();
        if (v39)
        {
          unsigned __int8 v40 = [v39 canReceiveRelayedCalls];

          if ((v40 & 1) == 0)
          {
LABEL_27:

            goto LABEL_28;
          }
        }
      }
      if (sub_1002F8660()) {
        break;
      }
      sub_10020ED28(v110, (uint64_t)v130);
      id v46 = sub_1002F9960(v130);
      sub_1002018DC((uint64_t)v130);
      if (!v46) {
        goto LABEL_27;
      }
      id v47 = v26;
      id v48 = v46;
      sub_100300364((uint64_t)v47, v48, v121);
      sub_10020EF54((uint64_t)v121, (uint64_t)&v122);
      uint64_t v49 = v123;
      if (!v123)
      {
        id v109 = v48;
        static os_log_type_t.error.getter();
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = v111;
        v130[0] = v47;
        sub_1001F6204(0, (unint64_t *)&unk_100588510);
        id v51 = v47;
        uint64_t v52 = String.init<A>(reflecting:)();
        unint64_t v53 = v112;
        *(void *)(v50 + 56) = &type metadata for String;
        *(void *)(v50 + 64) = v53;
        *(void *)(v50 + 32) = v52;
        *(void *)(v50 + 40) = v54;
        os_log(_:dso:log:type:_:)();

        goto LABEL_22;
      }
      char v129 = v127;
      if (v126 != 13)
      {
        uint64_t v103 = v122;
        uint64_t v104 = v124;
        uint64_t v105 = v126;
        uint64_t v106 = v125;
        id v109 = v48;
        int v55 = *(void **)(v116 + v108);
        id v107 = v47;
        id v102 = v128;
        if (!v55)
        {
          id v65 = v128;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_47;
        }
        id v100 = v128;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v56 = [v55 remoteDevice];
        if (!v56)
        {
LABEL_47:
          uint64_t v66 = v49;
          char v67 = v129;
          int v68 = *(void **)(v116 + v108);
          if (v68 && (id v69 = [v68 remoteDestination]) != 0)
          {
            char v70 = v69;
            sub_1001F6204(0, (unint64_t *)&qword_1005861B0);
            id v71 = v102;
            char v72 = static NSObject.== infix(_:_:)();

            id v73 = v71;
            v67 |= v72;
          }
          else
          {
            id v73 = v102;
          }
          goto LABEL_54;
        }
        int v57 = v56;
        uint64_t v98 = sub_1001F612C(v47, (SEL *)&selRef_idsDeviceIdentifier);
        uint64_t v59 = v58;
        id v60 = [v57 uniqueIDOverride];
        if (v60)
        {
          int v61 = v60;
          uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v99 = v62;

          if (v59)
          {
            if (v99)
            {
              if (v98 != v97 || v59 != v99)
              {
                char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                if (v64)
                {
LABEL_53:
                  uint64_t v66 = v49;

                  char v67 = 1;
                  id v73 = v102;
LABEL_54:
                  v133[0] = v103;
                  v133[1] = v66;
                  v133[2] = v104;
                  v133[3] = v106;
                  v133[4] = v105;
                  char v134 = v67 & 1;
                  id v135 = v73;
                  sub_1002DFDF8((uint64_t)v130, (uint64_t)v133);

                  uint64_t v74 = v132;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v22 = v101;
                  goto LABEL_28;
                }
                goto LABEL_47;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_52:

              goto LABEL_53;
            }
LABEL_44:
          }
          else
          {

            if (!v99) {
              goto LABEL_53;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        if (!v59) {
          goto LABEL_52;
        }
        goto LABEL_44;
      }

      sub_100261AA0((uint64_t)v121);
LABEL_28:
      if (v22 == ++v23)
      {
        id v19 = &selRef_performBlock_;
        goto LABEL_56;
      }
    }
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v111;
    v130[0] = v26;
    sub_1001F6204(0, (unint64_t *)&unk_100588510);
    id v42 = v26;
    uint64_t v43 = String.init<A>(reflecting:)();
    unint64_t v44 = v112;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = v44;
    *(void *)(v41 + 32) = v43;
    *(void *)(v41 + 40) = v45;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_56:
  swift_bridgeObjectRelease();
  uint64_t v81 = *(void **)(v116 + qword_100586510);
  if (!v81) {
    return sub_1002F8774((uint64_t)v118);
  }
  unint64_t result = (unint64_t)[v81 v19[436]];
  if (!result) {
    return sub_1002F8774((uint64_t)v118);
  }
  int64_t v82 = 0;
  uint64_t v83 = 1 << v118[32];
  uint64_t v84 = -1;
  if (v83 < 64) {
    uint64_t v84 = ~(-1 << v83);
  }
  char v85 = v118 + 56;
  unint64_t v86 = v84 & *((void *)v118 + 7);
  int64_t v87 = (unint64_t)(v83 + 63) >> 6;
  while (v86)
  {
    unint64_t v88 = __clz(__rbit64(v86));
    v86 &= v86 - 1;
    unint64_t v89 = v88 | (v82 << 6);
LABEL_83:
    if (*(unsigned char *)(*((void *)v118 + 6) + 56 * v89 + 40) == 1)
    {

      return sub_1002F8774((uint64_t)v118);
    }
  }
  int64_t v90 = v82 + 1;
  if (__OFADD__(v82, 1))
  {
    __break(1u);
    goto LABEL_88;
  }
  if (v90 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v90];
  ++v82;
  if (v91) {
    goto LABEL_82;
  }
  int64_t v82 = v90 + 1;
  if (v90 + 1 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v82];
  if (v91) {
    goto LABEL_82;
  }
  int64_t v82 = v90 + 2;
  if (v90 + 2 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v82];
  if (v91) {
    goto LABEL_82;
  }
  int64_t v82 = v90 + 3;
  if (v90 + 3 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v82];
  if (v91) {
    goto LABEL_82;
  }
  int64_t v82 = v90 + 4;
  if (v90 + 4 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v82];
  if (v91) {
    goto LABEL_82;
  }
  int64_t v82 = v90 + 5;
  if (v90 + 5 >= v87) {
    goto LABEL_85;
  }
  unint64_t v91 = *(void *)&v85[8 * v82];
  if (v91)
  {
LABEL_82:
    unint64_t v86 = (v91 - 1) & v91;
    unint64_t v89 = __clz(__rbit64(v91)) + (v82 << 6);
    goto LABEL_83;
  }
  int64_t v92 = v90 + 6;
  if (v92 >= v87)
  {
LABEL_85:
    id v93 = (id)result;
    sub_10020E644(v93, (uint64_t)v119);
    uint64_t v94 = v120;
    v130[0] = v119[0];
    v130[1] = v119[1];
    v130[2] = v119[2];
    v130[3] = v119[3];
    v130[4] = v119[4];
    char v131 = 1;
    uint64_t v132 = v120;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v95 = v94;
    sub_1002DFDF8((uint64_t)v117, (uint64_t)v130);

    uint64_t v96 = (void *)v117[6];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1002F8774((uint64_t)v118);
  }
  unint64_t v91 = *(void *)&v85[8 * v92];
  if (v91)
  {
    int64_t v82 = v92;
    goto LABEL_82;
  }
  while (1)
  {
    int64_t v82 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      break;
    }
    if (v82 >= v87) {
      goto LABEL_85;
    }
    unint64_t v91 = *(void *)&v85[8 * v82];
    ++v92;
    if (v91) {
      goto LABEL_82;
    }
  }
LABEL_93:
  __break(1u);
  return result;
}

void sub_1002F94F8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = objc_msgSend(objc_msgSend(*(id *)(Strong + qword_1005864E8), "callContainer"), "frontmostAudioOrVideoCall");
    swift_unknownObjectRelease();
    if (v2)
    {
      self;
      uint64_t v3 = (void *)swift_dynamicCastObjCClass();
      if (v3) {
        id v4 = v2;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    sub_1002F95D4(v3);
  }
}

uint64_t sub_1002F95D4(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 relayClientTransport];
  uint64_t v22 = v7;
  uint64_t v23 = v4;
  if (a1)
  {
    id v12 = a1;
    if ([v12 isHostedOnCurrentDevice]
      && [v12 hasRelaySupport:2])
    {
      id v13 = [v12 provider];
      unsigned __int8 v14 = [v13 isSystemProvider];
    }
    else
    {
      unsigned __int8 v14 = 0;
    }
    unsigned __int8 v15 = [v12 needsConversationOrVideoRelaySupport];
  }
  else
  {
    unsigned __int8 v15 = 0;
    unsigned __int8 v14 = 0;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  *(unsigned char *)(v16 + 24) = v14;
  *(unsigned char *)(v16 + 25) = v15;
  *(void *)(v16 + 32) = v11;
  aBlock[4] = sub_1003016F8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100513D38;
  char v17 = _Block_copy(aBlock);
  id v18 = v1;
  id v19 = v11;
  static DispatchQoS.unspecified.getter();
  unint64_t v24 = _swiftEmptyArrayStorage;
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  return swift_release();
}

id sub_1002F9960(void *a1)
{
  id v2 = v1;
  uint64_t v4 = sub_1001F612C(v1, (SEL *)&selRef_idsDeviceIdentifier);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    sub_100204074(a1, v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v6, v7, v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_1001F612C(v2, (SEL *)&selRef_publicIdentifier);
  if (v11)
  {
    if (v10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001F6204(0, &qword_1005865E0);
      return sub_1002F9C2C();
    }
  }
  return (id)v10;
}

unint64_t sub_1002F9A5C(uint64_t a1, char a2, char a3, void *a4)
{
  *(unsigned char *)(a1 + qword_100586520) = a2;
  *(unsigned char *)(a1 + qword_100586518) = a3;
  uint64_t v6 = qword_100586510;
  uint64_t v7 = *(void **)(a1 + qword_100586510);
  if (v7)
  {
    if (a4)
    {
      sub_1001F6204(0, &qword_1005865E8);
      id v8 = a4;
      id v9 = v7;
      char v10 = static NSObject.== infix(_:_:)();

      if (v10) {
        return sub_1002F88D8();
      }
    }
  }
  else if (!a4)
  {
    return sub_1002F88D8();
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  if (a4)
  {
    sub_1001F6204(0, &qword_1005865E8);
    id v12 = a4;
    uint64_t v13 = String.init<A>(reflecting:)();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE300000000000000;
    uint64_t v13 = 7104878;
  }
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1001F3B08();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)(a1 + v6);
  *(void *)(a1 + v6) = a4;
  id v17 = a4;

  return sub_1002F88D8();
}

id sub_1002F9C2C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() destinationWithRapportPublicIdentifier:v0];

  return v1;
}

uint64_t sub_1002F9D14()
{
  sub_1001F081C(&qword_1005894B0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1002F9D8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

void *sub_1002F9E50()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100202310();
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR___CSDRouteController_queue);
  void *v1 = v6;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v1, v2);
  if (v6)
  {
    if (!*(void *)(v0 + OBJC_IVAR___CSDRouteController__intelligentRoutingManager)) {
      return _swiftEmptyArrayStorage;
    }
    sub_1002F9F5C();
    char v10 = v9;
    uint64_t v11 = sub_10031B514();

    return (void *)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002F9F5C()
{
  uint64_t v1 = OBJC_IVAR___CSDRouteController__intelligentRoutingManager;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___CSDRouteController__intelligentRoutingManager];
  if (v2) {
    goto LABEL_5;
  }
  sub_1002FA5BC();
  uint64_t v4 = v3;
  id v5 = [objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag()) init];
  uint64_t v6 = (char *)objc_allocWithZone((Class)type metadata accessor for IntelligentRoutingManager());
  id v7 = sub_100300FD0(v4, 0, 0, 0, 0, v5, v6);
  id v8 = *(void **)&v0[v1];
  *(void *)&v0[v1] = v7;

  id v9 = *(void **)&v0[v1];
  if (v9)
  {
    char v10 = v9;
    sub_100300E68(v0, v10);

    uint64_t v11 = *(void **)&v0[v1];
    if (v11)
    {
      v11;
      uint64_t v2 = 0;
LABEL_5:
      id v12 = v2;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1002FA0E0()
{
  return sub_1002545A0(OBJC_IVAR___CSDRouteController_routesDidChangeHandler);
}

uint64_t sub_1002FA1EC()
{
  return sub_1002545A0(OBJC_IVAR___CSDRouteController_pickedRouteDidChangeHandler);
}

uint64_t sub_1002FA2FC()
{
  return sub_1002545A0(OBJC_IVAR___CSDRouteController_routeWasPickedHandler);
}

id sub_1002FA408(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = a3();
  if (v5)
  {
    v9[4] = v5;
    v9[5] = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    void v9[2] = sub_1002FA214;
    void v9[3] = a4;
    id v7 = _Block_copy(v9);
    swift_release();
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_1002FA4B0()
{
  return sub_1002545A0(OBJC_IVAR___CSDRouteController_timedOutPickingRouteHandler);
}

uint64_t sub_1002FA59C(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

void sub_1002FA5BC()
{
  sub_1001FCC38();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100202310();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_100301974();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10021EA1C();
  __chkstk_darwin(v6 - 8);
  sub_1002024D0();
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001FCB74((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_1001FCC08();
}

id sub_1002FA79C(uint64_t a1, void *a2)
{
  swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier] = _swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRouteController__topOfListRoutesUniqueIdentifiers] = _swiftEmptyArrayStorage;
  sub_100301A28(OBJC_IVAR___CSDRouteController_routesDidChangeHandler);
  sub_100301A28(OBJC_IVAR___CSDRouteController_pickedRouteDidChangeHandler);
  sub_100301A28(OBJC_IVAR___CSDRouteController_routeWasPickedHandler);
  sub_100301A28(OBJC_IVAR___CSDRouteController_timedOutPickingRouteHandler);
  uint64_t v5 = &v2[OBJC_IVAR___CSDRouteController_pendingRouteContext];
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = 0;
  sub_100301A28(OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  *(void *)&v2[OBJC_IVAR___CSDRouteController_pendingPickedRouteTimeout] = 30;
  *(void *)&v2[OBJC_IVAR___CSDRouteController__intelligentRoutingManager] = 0;
  *(void *)&v2[OBJC_IVAR___CSDRouteController_currentPickedRoute] = 0;
  *(void *)&v2[OBJC_IVAR___CSDRouteController_queue] = a2;
  *(void *)&v2[OBJC_IVAR___CSDRouteController_routeProviders] = a1;
  v25.receiver = v2;
  v25.super_class = v6;
  id v24 = a2;
  swift_bridgeObjectRetain();
  id v7 = objc_msgSendSuper2(&v25, "init");
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v23 = v7;
  if (v8)
  {
    id v9 = (long long *)(a1 + 32);
    id v10 = v7;
    do
    {
      long long v11 = *v9++;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      *(_OWORD *)(v14 + 24) = v11;
      unint64_t v15 = *(void (**)(void (*)(), uint64_t, uint64_t, void))(*((void *)&v11 + 1) + 24);
      swift_unknownObjectRetain_n();
      swift_retain();
      v15(sub_10030169C, v14, ObjectType, *((void *)&v11 + 1));
      swift_unknownObjectRelease();
      swift_release();
      --v8;
    }
    while (v8);
  }
  else
  {
    id v16 = v7;
  }
  swift_bridgeObjectRelease();
  id v17 = self;
  id v18 = [v17 defaultCenter];
  [v18 addObserver:v23 selector:"handleCallStatusChanged" name:TUCallCenterCallStatusChangedNotification object:0];

  id v19 = [v17 defaultCenter];
  uint64_t v20 = TUCallCenterVideoCallStatusChangedNotification;
  id v21 = v23;
  [v19 addObserver:v21 selector:"handleCallStatusChanged" name:v20 object:0];

  return v21;
}

void sub_1002FAA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    id v9 = *(void **)(Strong + OBJC_IVAR___CSDRouteController_queue);
    *uint64_t v6 = v9;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    id v10 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    if (v9)
    {
      long long v11 = &v8[OBJC_IVAR___CSDRouteController_pendingRouteContext];
      id v12 = *(void **)&v8[OBJC_IVAR___CSDRouteController_pendingRouteContext];
      if (v12)
      {
        if (*((void *)v11 + 1) == a2)
        {
          *(void *)long long v11 = 0;
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = 0;
          sub_1003002B0(v12);
        }
      }
      sub_1002FABF4();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1002FABF4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  id v9 = *(char ***)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v5 = (unint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR___CSDRouteController_queue);
  *(void *)unint64_t v5 = v6;
  ((void (*)(unint64_t, void, uint64_t))v9[13])(v5, enum case for DispatchPredicate.onQueue(_:), v3);
  id v7 = v6;
  uint64_t v8 = _dispatchPreconditionTest(_:)();
  id v10 = v9[1];
  LODWORD(v9) = v9 + 8;
  ((void (*)(unint64_t, uint64_t))v10)(v5, v3);
  if (v8)
  {
    unint64_t v1 = v2 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier;
    swift_beginAccess();
    uint64_t v8 = *(void *)v1;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_1005894A0);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    uint64_t v99 = sub_1002F9E50();
    uint64_t v96 = OBJC_IVAR___CSDRouteController_pendingRouteContext;
    LODWORD(v9) = *(void *)(v2 + OBJC_IVAR___CSDRouteController_pendingRouteContext) != 0;
    unint64_t v11 = sub_1002FCC1C();
    unint64_t v5 = v11;
    if (!(v11 >> 62))
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
LABEL_90:
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v89 = v8;
  uint64_t v97 = v2;
  if (v12)
  {
    uint64_t v8 = v12;
    int v98 = (int)v9;
    id v13 = 0;
    unint64_t v14 = 0;
    unint64_t v101 = v5 & 0xC000000000000001;
    unint64_t v91 = (id *)(v5 + 32);
    uint64_t v92 = v5 & 0xFFFFFFFFFFFFFF8;
    unint64_t v88 = v99 + 9;
    id v100 = (char *)&type metadata for Any + 8;
    id v9 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
    int64_t v90 = (char ***)v1;
    uint64_t v94 = v12;
    id v95 = (id *)v5;
    while (1)
    {
      if (v101)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v14 >= *(void *)(v92 + 16)) {
          goto LABEL_86;
        }
        id v15 = v91[v14];
      }
      id v16 = v15;
      BOOL v17 = __OFADD__(v14++, 1);
      if (v17)
      {
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      [v15 mutableCopy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F6204(0, &qword_1005894A8);
      if (!swift_dynamicCast())
      {

        goto LABEL_49;
      }
      id v18 = v103[0];
      id v19 = [v103[0] v9[81]];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      uint64_t v23 = *(void **)(v2 + v96);
      id v102 = v18;
      if (v23)
      {
        id v24 = [v23 v9[81]];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        BOOL v28 = v20 == v25 && v22 == v27;
        if (v28)
        {
          swift_bridgeObjectRelease_n();
          id v9 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
          id v18 = v102;
LABEL_24:

          id v30 = v16;
          [v18 setCurrentlyPicked:1];
LABEL_27:
          id v13 = v16;
          goto LABEL_28;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v9 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
        id v18 = v102;
        if (v29) {
          goto LABEL_24;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if ((v98 & 1) == 0)
      {
        if (![v18 isCurrentlyPicked])
        {
          int v98 = 0;
          goto LABEL_28;
        }

        id v31 = v16;
        int v98 = 1;
        goto LABEL_27;
      }
      [v18 setCurrentlyPicked:0];
      int v98 = 1;
LABEL_28:
      id v32 = objc_msgSend(v16, v9[81], v88);
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v5 = (unint64_t)v34;

      uint64_t v8 = (uint64_t)v99;
      id v9 = (char **)v99[2];
      if (!v9) {
        goto LABEL_36;
      }
      BOOL v35 = v99[4] == v33 && v99[5] == v5;
      if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v9 == (char **)1) {
          goto LABEL_36;
        }
        BOOL v55 = *(void *)(v8 + 48) == v33 && *(void *)(v8 + 56) == v5;
        if (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v9 != (char **)2)
          {
            id v56 = v88;
            uint64_t v2 = 2;
            while (1)
            {
              unint64_t v1 = (unint64_t)v13;
              int v57 = (char **)(v2 + 1);
              if (__OFADD__(v2, 1)) {
                goto LABEL_89;
              }
              BOOL v58 = *(v56 - 1) == v33 && *v56 == v5;
              if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                uint64_t v8 = 1;
                id v13 = (id)v1;
                unint64_t v1 = (unint64_t)v90;
                goto LABEL_37;
              }
              uint64_t v8 = 0;
              v56 += 2;
              ++v2;
              BOOL v28 = v57 == v9;
              id v13 = (id)v1;
              unint64_t v1 = (unint64_t)v90;
              if (v28) {
                goto LABEL_37;
              }
            }
          }
LABEL_36:
          uint64_t v8 = 0;
          goto LABEL_37;
        }
      }
      uint64_t v8 = 1;
LABEL_37:
      swift_bridgeObjectRelease();
      id v36 = v102;
      [v102 setRecommended:v8];
      [v36 copy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
      if (swift_dynamicCast())
      {
        id v93 = v13;
        id v37 = v103[0];
        id v38 = [v103[0] uniqueIdentifier];
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v40 = v39;

        swift_beginAccess();
        id v41 = v37;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v103[0] = *(id *)v1;
        unint64_t v5 = (unint64_t)v103[0];
        *(void *)unint64_t v1 = 0x8000000000000000;
        unint64_t v43 = sub_100233664();
        uint64_t v45 = *(char **)(v5 + 16);
        BOOL v46 = (v44 & 1) == 0;
        id v9 = (char **)&v45[v46];
        if (__OFADD__(v45, v46)) {
          goto LABEL_87;
        }
        unint64_t v1 = v43;
        uint64_t v2 = v44;
        sub_1001F081C(&qword_1005894C0);
        unint64_t v5 = (unint64_t)v103;
        Swift::Bool v47 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v9);
        id v48 = v102;
        if (v47)
        {
          unint64_t v5 = (unint64_t)v103[0];
          unint64_t v49 = sub_100233664();
          if ((v2 & 1) != (v50 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          unint64_t v1 = v49;
        }
        id v9 = (char **)v103[0];
        if (v2)
        {
          uint64_t v51 = *((void *)v103[0] + 7);

          *(void *)(v51 + 8 * v1) = v41;
        }
        else
        {
          *((void *)v103[0] + (v1 >> 6) + 8) |= 1 << v1;
          uint64_t v52 = (uint64_t *)&v9[6][16 * v1];
          uint64_t *v52 = v8;
          v52[1] = v40;
          *(void *)&v9[7][8 * v1] = v41;
          unint64_t v53 = v9[2];
          BOOL v17 = __OFADD__(v53, 1);
          uint64_t v54 = v53 + 1;
          if (v17) {
            goto LABEL_88;
          }
          void v9[2] = v54;
          swift_bridgeObjectRetain();
        }
        unint64_t v1 = (unint64_t)v90;
        char *v90 = v9;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();

        uint64_t v2 = v97;
        id v13 = v93;
      }
      else
      {

        uint64_t v2 = v97;
      }
      uint64_t v8 = v94;
      unint64_t v5 = (unint64_t)v95;
      id v9 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
LABEL_49:
      if (v14 == v8) {
        goto LABEL_70;
      }
    }
  }
  id v13 = 0;
LABEL_70:
  uint64_t v59 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v60 = swift_bridgeObjectRetain();
  uint64_t v61 = v89;
  sub_1002ED35C(v60, v89);
  char v63 = v62;
  swift_bridgeObjectRelease();
  if (v63)
  {
    swift_bridgeObjectRelease();
LABEL_83:

    return;
  }
  id v64 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_10048FB00;
  uint64_t v66 = sub_1001F081C(&qword_1005894B0);
  *(void *)(v65 + 56) = v66;
  uint64_t v67 = sub_1001FCB74(&qword_1005894B8, &qword_1005894B0);
  *(void *)(v65 + 32) = v61;
  uint64_t v68 = *(void *)v1;
  *(void *)(v65 + 96) = v66;
  *(void *)(v65 + 104) = v67;
  *(void *)(v65 + 64) = v67;
  *(void *)(v65 + 72) = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v69 = *(void *)v1;
  swift_bridgeObjectRetain();
  sub_1002FDA24(v61, v69);
  swift_bridgeObjectRelease();
  uint64_t v70 = v59;
  swift_bridgeObjectRelease();
  uint64_t v71 = v59 + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier;
  char v72 = *(void **)(v71 + 8);
  if (v72)
  {
    uint64_t v73 = v70;
    uint64_t v74 = *(void **)v71;
    swift_bridgeObjectRetain();
    uint64_t v75 = sub_1002FC570((uint64_t)v74, (uint64_t)v72);
    if (v75)
    {
      uint64_t v78 = v75;
      uint64_t v79 = v76;
      uint64_t v80 = v77;
      id v93 = v13;
      if (qword_1005839A0 != -1) {
        swift_once();
      }
      uint64_t v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = xmmword_10048F550;
      v103[1] = v74;
      v103[2] = v72;
      uint64_t v82 = String.init<A>(reflecting:)();
      uint64_t v84 = v83;
      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = sub_1001F3B08();
      *(void *)(v81 + 32) = v82;
      *(void *)(v81 + 40) = v84;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v71 = 0;
      *(void *)(v71 + 8) = 0;
      swift_bridgeObjectRelease();
      uint64_t v70 = v97;
      sub_1002FC898(v78, v79, v80);
      swift_unknownObjectRelease();

      id v13 = v93;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v70 = v73;
    }
  }
  char v85 = *(void (**)(uint64_t))(v70 + OBJC_IVAR___CSDRouteController_routesDidChangeHandler);
  if (v85)
  {
    uint64_t v86 = swift_retain();
    v85(v86);
    sub_100208490((uint64_t)v85);
  }
  if (v13)
  {
    int64_t v87 = *(void (**)(id))(v70 + OBJC_IVAR___CSDRouteController_pickedRouteDidChangeHandler);
    if (v87)
    {
      id v13 = v13;
      sub_1002084D8((uint64_t)v87);
      v87(v13);

      sub_100208490((uint64_t)v87);
    }
    goto LABEL_83;
  }
}

void sub_1002FB684()
{
  sub_1001FCC38();
  unint64_t v11 = v0;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_1003019D8();
  sub_100301974();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100301A00();
  __chkstk_darwin(v3 - 8);
  sub_1001FCC88();
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001FCB74((unint64_t *)&qword_100583B10, &qword_100585100);
  sub_1003019B0();
  uint64_t v4 = sub_100301A34();
  v5(v4);
  uint64_t v6 = (void *)sub_100301988();
  sub_1001F081C(&qword_1005894D8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048FB00;
  sub_1001F081C(&qword_1005894C8);
  id v8 = objc_allocWithZone((Class)RPCompanionLinkClient);
  id v9 = v6;
  *(void *)(v7 + 32) = sub_1002F87BC([v8 init], v9);
  *(void *)(v7 + 40) = &off_10050EFC8;
  type metadata accessor for LocalAudioRouteProvider();
  id v10 = v9;
  *(void *)(v7 + 48) = sub_100333340(v10);
  *(void *)(v7 + 56) = &off_1005152A8;
  objc_allocWithZone(v11);
  sub_1002FA79C(v7, v10);
  sub_1001FCC08();
}

void sub_1002FB910()
{
  sub_1001FCC38();
  id v9 = v0;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_1003019D8();
  sub_100301974();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100301A00();
  __chkstk_darwin(v3 - 8);
  sub_1001FCC88();
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001FCB74((unint64_t *)&qword_100583B10, &qword_100585100);
  sub_1003019B0();
  uint64_t v4 = sub_100301A34();
  v5(v4);
  uint64_t v6 = (void *)sub_100301988();
  sub_1001F081C(&qword_1005894D8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  objc_allocWithZone((Class)type metadata accessor for PairedHostDeviceRouteProvider());
  id v8 = v6;
  *(void *)(v7 + 32) = sub_10031737C((uint64_t)v8);
  *(void *)(v7 + 40) = &off_1005145F8;
  objc_allocWithZone(v9);
  sub_1002FA79C(v7, v8);
  sub_1001FCC08();
}

void sub_1002FBB54()
{
  sub_1001FCC38();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v8);
  sub_1002024D0();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  *(void *)(v9 + 24) = v6;
  *(void *)(v9 + 32) = v4;
  *(unsigned char *)(v9 + 40) = v2;
  v16[4] = sub_1003015F8;
  v16[5] = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_1002C2C88;
  void v16[3] = &unk_100513AB8;
  id v10 = _Block_copy(v16);
  id v11 = v0;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  uint64_t v12 = sub_10021ECA8();
  v13(v12);
  uint64_t v14 = sub_10030195C();
  v15(v14);
  swift_release();
  sub_1001FCC08();
}

void sub_1002FBD60(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v73) = a4;
  uint64_t v75 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchQoS();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v67 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchWallTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v58 - v18;
  uint64_t v20 = (void **)a2;
  uint64_t v21 = a2;
  uint64_t v22 = v75;
  uint64_t v74 = a1;
  uint64_t v23 = sub_1002FC570(v21, v75);
  if (v23)
  {
    uint64_t v73 = v24;
    uint64_t v26 = v23;
    uint64_t v27 = &v74[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier];
    if (*(void *)&v74[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8])
    {
      uint64_t v72 = v25;
      if (qword_1005839A0 != -1) {
        swift_once();
      }
      sub_1001F081C(&qword_100584B20);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_10048FB00;
      uint64_t v29 = *((void *)v27 + 1);
      if (v29)
      {
        aBlock = *(void ***)v27;
        uint64_t v78 = v29;
        swift_bridgeObjectRetain();
        uint64_t v30 = String.init<A>(reflecting:)();
        unint64_t v32 = v31;
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      *(void *)(v28 + 56) = &type metadata for String;
      unint64_t v55 = sub_1001F3B08();
      *(void *)(v28 + 64) = v55;
      *(void *)(v28 + 32) = v30;
      *(void *)(v28 + 40) = v32;
      aBlock = v20;
      uint64_t v78 = v75;
      swift_bridgeObjectRetain();
      uint64_t v56 = String.init<A>(reflecting:)();
      *(void *)(v28 + 96) = &type metadata for String;
      *(void *)(v28 + 104) = v55;
      *(void *)(v28 + 72) = v56;
      *(void *)(v28 + 80) = v57;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0;
      swift_bridgeObjectRelease();
      uint64_t v25 = v72;
    }
    sub_1002FC898(v26, v73, v25);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v60 = v17;
    uint64_t v61 = v12;
    uint64_t v62 = v10;
    char v63 = v19;
    uint64_t v64 = v14;
    uint64_t v65 = v13;
    uint64_t v66 = v9;
    id v33 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_10048FB00;
    *(void *)(v34 + 56) = &type metadata for String;
    unint64_t v59 = sub_1001F3B08();
    *(void *)(v34 + 64) = v59;
    *(void *)(v34 + 32) = v20;
    *(void *)(v34 + 40) = v22;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1002FCC1C();
    *(void *)(v34 + 96) = sub_1001F081C(&qword_100588978);
    *(void *)(v34 + 104) = sub_1001FCB74(&qword_1005894D0, &qword_100588978);
    *(void *)(v34 + 72) = v35;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    if (v73)
    {
      if (qword_1005839A0 != -1) {
        swift_once();
      }
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_10048F550;
      aBlock = v20;
      uint64_t v78 = v22;
      swift_bridgeObjectRetain();
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v38 = v59;
      *(void *)(v36 + 56) = &type metadata for String;
      *(void *)(v36 + 64) = v38;
      *(void *)(v36 + 32) = v37;
      *(void *)(v36 + 40) = v39;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v74;
      id v41 = (void ***)&v74[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier];
      *id v41 = v20;
      v41[1] = (void **)v22;
      swift_bridgeObjectRelease();
      uint64_t v73 = *(void *)&v40[OBJC_IVAR___CSDRouteController_queue];
      swift_bridgeObjectRetain();
      id v42 = v60;
      static DispatchWallTime.now()();
      unint64_t v43 = v61;
      *uint64_t v61 = 30;
      uint64_t v44 = v67;
      uint64_t v45 = v62;
      (*(void (**)(void *, void, uint64_t))(v67 + 104))(v43, enum case for DispatchTimeInterval.seconds(_:), v62);
      BOOL v46 = v63;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v44 + 8))(v43, v45);
      uint64_t v47 = v65;
      id v48 = *(void (**)(char *, uint64_t))(v64 + 8);
      v48(v42, v65);
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v40;
      uint64_t v81 = sub_100301608;
      uint64_t v82 = v49;
      aBlock = _NSConcreteStackBlock;
      uint64_t v78 = 1107296256;
      uint64_t v79 = sub_1002C2C88;
      uint64_t v80 = &unk_100513B08;
      char v50 = _Block_copy(&aBlock);
      uint64_t v51 = v40;
      uint64_t v52 = v66;
      static DispatchQoS.unspecified.getter();
      uint64_t v76 = _swiftEmptyArrayStorage;
      sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
      unint64_t v53 = v69;
      uint64_t v54 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)();
      _Block_release(v50);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v53, v54);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v52, v70);
      v48(v46, v47);
      swift_release();
    }
  }
}

void *sub_1002FC570(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR___CSDRouteController_routeProviders);
  uint64_t v31 = *(void *)(v11 + 16);
  if (v31)
  {
    uint64_t v34 = v11 + 32;
    unint64_t result = (void *)swift_bridgeObjectRetain();
    unint64_t v12 = 0;
    id v33 = result;
    while (v12 < result[2])
    {
      unint64_t v35 = v12;
      uint64_t v13 = (uint64_t *)(v34 + 16 * v12);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t ObjectType = swift_getObjectType();
      BOOL v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
      swift_unknownObjectRetain();
      uint64_t v36 = v14;
      uint64_t v32 = v15;
      unint64_t v18 = v17(ObjectType, v15);
      unint64_t v19 = v18;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v20)
        {
LABEL_7:
          uint64_t v21 = 4;
          while (1)
          {
            unint64_t result = (v19 & 0xC000000000000001) != 0
                   ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                   : *(id *)(v19 + 8 * v21);
            uint64_t v22 = result;
            uint64_t v23 = v21 - 3;
            if (__OFADD__(v21 - 4, 1)) {
              break;
            }
            id v24 = [result uniqueIdentifier];
            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v27 = v26;

            if (v25 == a1 && v27 == v37)
            {
              swift_bridgeObjectRelease();
LABEL_23:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v22;
            }
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v29) {
              goto LABEL_23;
            }

            ++v21;
            if (v23 == v20) {
              goto LABEL_18;
            }
          }
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v20) {
          goto LABEL_7;
        }
      }
LABEL_18:
      unint64_t v12 = v35 + 1;
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      unint64_t result = v33;
      if (v12 == v31)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  return 0;
}

void sub_1002FC898(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = *(void **)&v4[OBJC_IVAR___CSDRouteController_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(a1, ObjectType, a3);
  uint64_t v15 = &v4[OBJC_IVAR___CSDRouteController_pendingRouteContext];
  uint64_t v16 = *(void **)&v4[OBJC_IVAR___CSDRouteController_pendingRouteContext];
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + 1) = a2;
  *((void *)v15 + 2) = a3;
  sub_1003002B0(v16);
  uint64_t v17 = OBJC_IVAR___CSDRouteController_currentPickedRoute;
  unint64_t v18 = *(void **)&v4[OBJC_IVAR___CSDRouteController_currentPickedRoute];
  *(void *)&v4[OBJC_IVAR___CSDRouteController_currentPickedRoute] = a1;
  id v19 = a1;
  swift_unknownObjectRetain();

  if (*(void *)&v4[v17])
  {
    sub_1002F9F5C();
    uint64_t v22 = *(void **)&v4[v17];
    if (v22)
    {
      uint64_t v23 = v21;
      id v24 = v22;
      sub_10031B724();

      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    return;
  }
LABEL_5:
  id v48 = v19;
  sub_1002FABF4(v20);
  uint64_t v25 = *(void *)&v4[OBJC_IVAR___CSDRouteController_routeProviders];
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v45 = ObjectType;
    uint64_t v46 = a3;
    uint64_t v47 = v4;
    swift_bridgeObjectRetain();
    uint64_t v27 = 32;
    uint64_t v49 = a2;
    do
    {
      uint64_t v28 = *(void *)(v25 + v27);
      swift_getObjectType();
      uint64_t v29 = sub_100294EF4(v28);
      if (v29) {
        BOOL v31 = v29 == a2;
      }
      else {
        BOOL v31 = 1;
      }
      if (!v31)
      {
        uint64_t v32 = v30;
        uint64_t v33 = v25;
        uint64_t v34 = swift_getObjectType();
        unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
        swift_unknownObjectRetain();
        uint64_t v36 = v34;
        uint64_t v25 = v33;
        v35(v36, v32);
        a2 = v49;
        swift_unknownObjectRelease();
      }
      v27 += 16;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    a3 = v46;
    uint64_t v4 = v47;
    uint64_t ObjectType = v45;
  }
  type metadata accessor for LocalAudioRouteProvider();
  uint64_t v37 = swift_dynamicCastClass();
  unint64_t v38 = v48;
  if (!v37
    || *(void *)(v37 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) <= 1uLL)
  {
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = v4;
    v39[3] = v38;
    v39[4] = a2;
    v39[5] = a3;
    uint64_t v40 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(a3 + 48);
    id v41 = v38;
    swift_unknownObjectRetain();
    id v42 = v4;
    v40(sub_100300338, v39, ObjectType, a3);
    swift_release();
  }
  unint64_t v43 = *(void (**)(void *))&v4[OBJC_IVAR___CSDRouteController_routeWasPickedHandler];
  if (v43)
  {
    swift_retain();
    v43(v38);
    sub_100208490((uint64_t)v43);
  }
}

uint64_t sub_1002FCC1C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDRouteController_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR___CSDRouteController_routeProviders);
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v9)
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002E4074(0, v9, 0);
      uint64_t v10 = v22;
      uint64_t v11 = (uint64_t *)(v8 + 40);
      do
      {
        uint64_t v12 = *v11;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
        swift_unknownObjectRetain();
        uint64_t v15 = v14(ObjectType, v12);
        swift_unknownObjectRelease();
        uint64_t v22 = v10;
        unint64_t v17 = v10[2];
        unint64_t v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          sub_1002E4074(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v22;
        }
        v10[2] = v17 + 1;
        v10[v17 + 4] = v15;
        v11 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v10[2];
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = 0;
      uint64_t v20 = _swiftEmptyArrayStorage;
      do
      {
        ++v19;
        uint64_t v22 = v20;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1002D2838();
        swift_bridgeObjectRelease();
        uint64_t v20 = v22;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002FCE98(uint64_t result)
{
  uint64_t v1 = (void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  if (*(void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8))
  {
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_10048FB00;
    if (v1[1])
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = String.init<A>(reflecting:)();
      unint64_t v5 = v4;
    }
    else
    {
      unint64_t v5 = 0xE300000000000000;
      uint64_t v3 = 7104878;
    }
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_1001F3B08();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    uint64_t v7 = String.init<A>(reflecting:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    void *v1 = 0;
    v1[1] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002FD06C(uint64_t result)
{
  uint64_t v1 = (void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  if (*(void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8))
  {
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_10048F550;
    if (v1[1])
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = String.init<A>(reflecting:)();
      unint64_t v5 = v4;
    }
    else
    {
      unint64_t v5 = 0xE300000000000000;
      uint64_t v3 = 7104878;
    }
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_1001F3B08();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    void *v1 = 0;
    v1[1] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002FD218(uint64_t a1, unint64_t a2)
{
  sub_1002F9F5C();
  id v4 = v3;
  sub_10031B58C(a2);
}

void sub_1002FD308()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v19 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_1002024D0();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v0;
  *(void *)(v16 + 24) = v8;
  v20[4] = v6;
  void v20[5] = v16;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_1002C2C88;
  v20[3] = v4;
  unint64_t v17 = _Block_copy(v20);
  id v18 = v0;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v19);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_1002FD514(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + OBJC_IVAR___CSDRouteController_routeProviders);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 32;
    do
    {
      uint64_t v6 = *(void *)(v2 + v5);
      swift_getObjectType();
      if (sub_100294EF4(v6))
      {
        swift_unknownObjectRetain();
        sub_100317C18(a2);
        swift_unknownObjectRelease();
      }
      v5 += 16;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002FD680(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v5 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, void *))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = v5 + OBJC_IVAR___CSDRouteController_pendingRouteContext;
  uint64_t v15 = *(void **)(v5 + OBJC_IVAR___CSDRouteController_pendingRouteContext);
  if (!v15) {
    return;
  }
  uint64_t v9 = v15;
  if ([a1 isEqualToRouteIgnoringIsRecommended:v9])
  {
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    a2 = v17;
    id v34 = a1;
    if (!(v17 >> 62))
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v18) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18)
    {
LABEL_6:
      uint64_t v19 = 4;
      while (1)
      {
        if ((a2 & 0xC000000000000001) != 0) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(a2 + 8 * v19);
        }
        uint64_t v21 = v20;
        uint64_t v22 = v19 - 3;
        if (__OFADD__(v19 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        if ([v20 isCurrentlyPicked]) {
          break;
        }

        ++v19;
        if (v22 == v18) {
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease_n();
      sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
      id v23 = v34;
      id v28 = v34;
      id v29 = v21;
      char v30 = static NSObject.== infix(_:_:)();

      if ((v30 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_17;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    uint64_t v21 = 0;
    id v23 = v34;
LABEL_14:
    id v24 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10048F550;
    *(void *)(v25 + 56) = sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
    *(void *)(v25 + 64) = sub_1002617F4();
    *(void *)(v25 + 32) = v23;
    id v26 = v23;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(id))(v5 + OBJC_IVAR___CSDRouteController_timedOutPickingRouteHandler);
    if (v27)
    {
      swift_retain();
      v27(v26);
      sub_100208490((uint64_t)v27);
    }
LABEL_17:
    BOOL v31 = *(void **)v4;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = 0;
    uint64_t v32 = sub_1003002B0(v31);
    sub_1002FABF4(v32);

    uint64_t v9 = v21;
  }
}

uint64_t sub_1002FDA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v13 = a2 + 64;
    uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
    uint64_t v15 = -1;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    unint64_t v16 = v15 & *(void *)(a2 + 64);
    int64_t v17 = (unint64_t)(v14 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v18 = 0;
    uint64_t v46 = _swiftEmptyArrayStorage;
    int64_t v47 = v17;
    uint64_t v48 = v3;
    uint64_t v49 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v18 << 6);
      }
      else
      {
        int64_t v21 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
          break;
        }
        if (v21 >= v17)
        {
LABEL_41:
          swift_release();
          if (*(void *)(v3 + OBJC_IVAR___CSDRouteController__intelligentRoutingManager))
          {
            sub_1002F9F5C();
            unint64_t v43 = v42;
            sub_10031B74C();
          }
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        unint64_t v22 = *(void *)(v13 + 8 * v21);
        ++v18;
        if (!v22)
        {
          int64_t v18 = v21 + 1;
          if (v21 + 1 >= v17) {
            goto LABEL_41;
          }
          unint64_t v22 = *(void *)(v13 + 8 * v18);
          if (!v22)
          {
            int64_t v18 = v21 + 2;
            if (v21 + 2 >= v17) {
              goto LABEL_41;
            }
            unint64_t v22 = *(void *)(v13 + 8 * v18);
            if (!v22)
            {
              int64_t v18 = v21 + 3;
              if (v21 + 3 >= v17) {
                goto LABEL_41;
              }
              unint64_t v22 = *(void *)(v13 + 8 * v18);
              if (!v22)
              {
                int64_t v18 = v21 + 4;
                if (v21 + 4 >= v17) {
                  goto LABEL_41;
                }
                unint64_t v22 = *(void *)(v13 + 8 * v18);
                if (!v22)
                {
                  int64_t v23 = v21 + 5;
                  if (v23 >= v17) {
                    goto LABEL_41;
                  }
                  unint64_t v22 = *(void *)(v13 + 8 * v23);
                  if (!v22)
                  {
                    while (1)
                    {
                      int64_t v18 = v23 + 1;
                      if (__OFADD__(v23, 1)) {
                        goto LABEL_46;
                      }
                      if (v18 >= v17) {
                        goto LABEL_41;
                      }
                      unint64_t v22 = *(void *)(v13 + 8 * v18);
                      ++v23;
                      if (v22) {
                        goto LABEL_24;
                      }
                    }
                  }
                  int64_t v18 = v23;
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
      }
      id v24 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v20);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain();
      if (v27 && (swift_bridgeObjectRetain(), sub_100233664(), char v29 = v28, swift_bridgeObjectRelease(), (v29 & 1) != 0))
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        char v30 = sub_1002FC570(v26, v25);
        if (v30 && (v30, sub_1001F081C(&qword_1005894C8), swift_dynamicCastClass()))
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1003A47C8();
            uint64_t v46 = v40;
          }
          unint64_t v31 = v46[2];
          unint64_t v32 = v31 + 1;
          if (v31 >= v46[3] >> 1)
          {
            unint64_t v45 = v31 + 1;
            sub_1003A47C8();
            unint64_t v32 = v45;
            uint64_t v46 = v41;
          }
          uint64_t v33 = v46;
          v46[2] = v32;
          id v34 = &v33[2 * v31];
          v34[4] = v26;
          v34[5] = v25;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v3 = v48;
        }
        else
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            unint64_t v35 = v49;
          }
          else
          {
            sub_1003A47C8();
            unint64_t v35 = v38;
          }
          unint64_t v36 = v35[2];
          if (v36 >= v35[3] >> 1)
          {
            sub_1003A47C8();
            unint64_t v35 = v39;
          }
          long long v35[2] = v36 + 1;
          uint64_t v49 = v35;
          uint64_t v37 = &v35[2 * v36];
          v37[4] = v26;
          v37[5] = v25;
          uint64_t result = swift_unknownObjectRelease();
          int64_t v17 = v47;
          uint64_t v3 = v48;
        }
      }
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

void sub_1002FDE5C()
{
  unint64_t v1 = OBJC_IVAR___CSDRouteController_currentPickedRoute;
  if (!*(void *)(v0 + OBJC_IVAR___CSDRouteController_currentPickedRoute)) {
    return;
  }
  id v2 = [self sharedInstance];
  id v3 = [v2 currentAudioAndVideoCalls];

  sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_25;
  }
LABEL_4:
  unint64_t v15 = v1;
  char v6 = 0;
  unint64_t v7 = 0;
LABEL_5:
  char v16 = v6;
  unint64_t v1 = v7;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v1 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_23;
      }
      id v8 = *(id *)(v4 + 8 * v1 + 32);
    }
    uint64_t v9 = v8;
    unint64_t v7 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    unsigned int v10 = [v8 isActive];

    if (v10)
    {
      char v6 = 1;
      if (v7 != v5) {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
      unint64_t v11 = v15;
      goto LABEL_17;
    }
    ++v1;
  }
  while (v7 != v5);
  swift_bridgeObjectRelease();
  unint64_t v11 = v15;
  if ((v16 & 1) == 0) {
    return;
  }
LABEL_17:
  sub_1002F9F5C();
  uint64_t v13 = *(void **)(v0 + v11);
  if (v13)
  {
    uint64_t v14 = v12;
    id v17 = v13;
    sub_10031B950();
  }
  else
  {
    __break(1u);
  }
}

void sub_1002FE0EC()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  v14[4] = v4;
  v14[5] = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002C2C88;
  v14[3] = v2;
  id v8 = _Block_copy(v14);
  id v9 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10027AC54();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  uint64_t v10 = sub_10021ECA8();
  v11(v10);
  uint64_t v12 = sub_10030195C();
  v13(v12);
  swift_release();
  sub_1001FCC08();
}

void sub_1002FE358()
{
}

uint64_t type metadata accessor for RouteController()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for RouteController.PendingRouteContext(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for RouteController.PendingRouteContext()
{
  return &type metadata for RouteController.PendingRouteContext;
}

uint64_t sub_1002FE5F0()
{
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1002FE620()
{
}

uint64_t sub_1002FE644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002FE654()
{
  return swift_release();
}

id sub_1002FE65C()
{
  id v1 = [v0 localDevice];

  return v1;
}

void sub_1002FE694(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (a1)
  {
    v7[4] = a1;
    v7[5] = a2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_1002FA214;
    v7[3] = a3;
    id v6 = _Block_copy(v7);
    swift_release();
  }
  else
  {
    id v6 = 0;
  }
  objc_msgSend(v4, *a4, v6);
  _Block_release(v6);
}

void sub_1002FE73C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[4] = a1;
    v4[5] = a2;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 1107296256;
    _OWORD v4[2] = sub_1002FE7E4;
    v4[3] = &unk_100513E50;
    uint64_t v3 = _Block_copy(v4);
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  [v2 setDeviceChangedHandler:v3];
  _Block_release(v3);
}

void sub_1002FE7E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1002FE858(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[4] = a1;
    v4[5] = a2;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 1107296256;
    _OWORD v4[2] = sub_1003629D8;
    v4[3] = &unk_100513D60;
    uint64_t v3 = _Block_copy(v4);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  [v2 activateWithCompletion:v3];
  _Block_release(v3);
}

uint64_t sub_1002FE918()
{
  id v1 = [v0 effectiveIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_1002FE970()
{
  return sub_1001F612C(v0, (SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_1002FE994()
{
  return sub_1001F612C(v0, (SEL *)&selRef_publicIdentifier);
}

uint64_t sub_1002FE9B8()
{
  return sub_1001F612C(v0, (SEL *)&selRef_name);
}

id sub_1002FE9DC()
{
  return [v0 flags];
}

uint64_t sub_1002FE9EC()
{
  return sub_1001F612C(v0, (SEL *)&selRef_model);
}

uint64_t sub_1002FEA10@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 mediaSystemIdentifier];
  if (v3)
  {
    id v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for UUID();

  return sub_1001F0530(a1, v5, 1, v6);
}

uint64_t sub_1002FEA90()
{
  return sub_1001F612C(v0, (SEL *)&selRef_mediaSystemName);
}

uint64_t sub_1002FEAB4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70));
  uint64_t v4 = *v3;
  *id v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

void sub_1002FEAF0()
{
  id v1 = *(void (**)(uint64_t))((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70));
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    sub_100208490((uint64_t)v1);
  }
}

void *sub_1002FEB74()
{
  id v1 = (id *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
  swift_beginAccess();
  id v2 = [*v1 localDevice];
  if (v2)
  {
    id v3 = v2;
    unsigned int v4 = [v2 flags];

    int v5 = (v4 >> 5) & 1;
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = (void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x78));
  swift_beginAccess();
  sub_1002E4D1C(v21, *v6);
  uint64_t v7 = (void *)v21[0];
  uint64_t v8 = v21[1];
  int64_t v9 = v21[3];
  unint64_t v10 = v21[4];
  int64_t v11 = (unint64_t)(v21[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (v10)
  {
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v9 << 6);
LABEL_25:
    id v18 = *(id *)(v7[7] + 8 * v13);
    if ([v18 flags] & v5)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  int64_t v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v14 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v14);
  int64_t v16 = v9 + 1;
  if (v15) {
    goto LABEL_24;
  }
  int64_t v16 = v9 + 2;
  if (v9 + 2 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_24;
  }
  int64_t v16 = v9 + 3;
  if (v9 + 3 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_24;
  }
  int64_t v16 = v9 + 4;
  if (v9 + 4 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_24;
  }
  int64_t v16 = v9 + 5;
  if (v9 + 5 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_24;
  }
  int64_t v16 = v9 + 6;
  if (v9 + 6 >= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_24:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
    goto LABEL_25;
  }
  int64_t v17 = v9 + 7;
  while (v17 < v11)
  {
    unint64_t v15 = *(void *)(v8 + 8 * v17++);
    if (v15)
    {
      int64_t v16 = v17 - 1;
      goto LABEL_24;
    }
  }
LABEL_28:
  swift_release();
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
    || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
LABEL_32:
    unint64_t v20 = sub_100252E00((unint64_t)v7);
    swift_release();
    return v20;
  }
  return v7;
}

void *sub_1002FEE08(void *a1, void *a2)
{
  unsigned int v4 = (void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70));
  void *v4 = 0;
  v4[1] = 0;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x78)) = _swiftEmptyDictionarySingleton;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60)) = a2;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68)) = a1;
  id v5 = a1;
  id v6 = a2;
  v19.receiver = v2;
  v19.super_class = (Class)sub_1001F081C(&qword_1005894E8);
  uint64_t v7 = objc_msgSendSuper2(&v19, "init");
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int64_t v9 = (id *)((char *)v7 + *(void *)((swift_isaMask & *v7) + 0x68));
  swift_beginAccess();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10030173C;
  *(void *)(v10 + 24) = v8;
  int64_t v11 = v7;
  swift_retain();
  sub_1002FE694((uint64_t)sub_100301774, v10, (uint64_t)&unk_100513FB8, (SEL *)&selRef_setLocalDeviceUpdatedHandler_);
  swift_endAccess();
  swift_release();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1003017AC;
  *(void *)(v13 + 24) = v12;
  swift_retain();
  sub_1002FE694((uint64_t)sub_100301898, v13, (uint64_t)&unk_100513F40, (SEL *)&selRef_setDeviceFoundHandler_);
  swift_endAccess();
  swift_release();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003017B4;
  *(void *)(v15 + 24) = v14;
  swift_retain();
  sub_1002FE694((uint64_t)sub_100301898, v15, (uint64_t)&unk_100513EC8, (SEL *)&selRef_setDeviceLostHandler_);
  swift_endAccess();
  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1003017BC;
  *(void *)(v17 + 24) = v16;
  swift_retain();
  sub_1002FE73C((uint64_t)sub_1003017C4, v17);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  objc_msgSend(*v9, "setFlags:", objc_msgSend(*v9, "flags") | 1);
  swift_endAccess();

  return v11;
}

void *sub_1002FF224()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    int64_t v9 = result;
    v12[1] = *(id *)((char *)result + *(void *)((swift_isaMask & *result) + 0x60));
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    aBlock[4] = sub_100301858;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_100514008;
    int64_t v11 = _Block_copy(aBlock);
    v12[0] = v9;
    static DispatchQoS.unspecified.getter();
    _OWORD v12[2] = _swiftEmptyArrayStorage;
    sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v11);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_1002FF538(void *a1)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  uint64_t result = os_log(_:dso:log:type:_:)();
  id v3 = *(void (**)(uint64_t))((char *)a1 + *(void *)((swift_isaMask & *a1) + 0x70));
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    return sub_100208490((uint64_t)v3);
  }
  return result;
}

void sub_1002FF628(void *a1, void *a2)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  sub_1001F6204(0, (unint64_t *)&unk_100588510);
  id v5 = a1;
  uint64_t v6 = String.init<A>(reflecting:)();
  uint64_t v8 = v7;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1001F3B08();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v9 = [v5 effectiveIdentifier];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13
    && (uint64_t v14 = (void *)((char *)a2 + *(void *)((swift_isaMask & *a2) + 0x78)),
        swift_beginAccess(),
        uint64_t v15 = *v14,
        swift_bridgeObjectRetain(),
        uint64_t v16 = (void *)sub_1002231D4(v10, v12, v15),
        swift_bridgeObjectRelease(),
        v16,
        !v16))
  {
    swift_beginAccess();
    sub_10027F904((uint64_t)v5, v10, v12);
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_1002FEAF0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_1002FF84C()
{
  sub_1001FCC38();
  uint64_t v18 = v1;
  uint64_t v3 = v2;
  id v5 = v4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v19 = v7;
  __chkstk_darwin(v8);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_1002024D0();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v11 = (void *)Strong;
    if (sub_1002F847C())
    {
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = v11;
      v20[4] = v3;
      void v20[5] = v12;
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 1107296256;
      v20[2] = sub_1002C2C88;
      v20[3] = v18;
      uint64_t v13 = _Block_copy(v20);
      id v14 = v5;
      id v15 = v11;
      static DispatchQoS.unspecified.getter();
      sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      sub_10027AC54();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v13);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v6);
      uint64_t v16 = sub_10030195C();
      v17(v16);

      swift_release();
    }
    else
    {
    }
  }
  sub_1001FCC08();
}

void sub_1002FFAC8(void *a1, void *a2)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  sub_1001F6204(0, (unint64_t *)&unk_100588510);
  id v5 = a1;
  uint64_t v6 = String.init<A>(reflecting:)();
  uint64_t v8 = v7;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1001F3B08();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v9 = [v5 effectiveIdentifier];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13
    && (id v14 = (void *)((char *)a2 + *(void *)((swift_isaMask & *a2) + 0x78)),
        swift_beginAccess(),
        uint64_t v15 = *v14,
        swift_bridgeObjectRetain(),
        uint64_t v16 = (void *)sub_1002231D4(v10, v12, v15),
        swift_bridgeObjectRelease(),
        v16,
        v16))
  {
    swift_beginAccess();
    uint64_t v17 = (void *)sub_1002CE704(v10, v12);
    swift_endAccess();
    swift_bridgeObjectRelease();

    sub_1002FEAF0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void *sub_1002FFCE8(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v11 = result;
    v15[1] = *(id *)((char *)result + *(void *)((swift_isaMask & *result) + 0x60));
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a1;
    *(void *)(v12 + 24) = v11;
    aBlock[4] = sub_100301834;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_100513EA0;
    uint64_t v13 = _Block_copy(aBlock);
    id v14 = a1;
    v15[0] = v11;
    static DispatchQoS.unspecified.getter();
    v15[2] = _swiftEmptyArrayStorage;
    sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    return (void *)swift_release();
  }
  return result;
}

void sub_100300008(void *a1)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10048F550;
  sub_1001F6204(0, (unint64_t *)&unk_100588510);
  id v3 = a1;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_1001F3B08();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v7 = [v3 effectiveIdentifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    if (sub_1002F847C())
    {
      swift_beginAccess();
      sub_10027F904((uint64_t)v3, v8, v10);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_beginAccess();
      uint64_t v12 = (void *)sub_1002CE704(v8, v10);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    sub_1002FEAF0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_100300224(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (id *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68));
  swift_beginAccess();
  id v6 = *v5;
  sub_1002FE858(a1, a2);
}

void *sub_1003002B0(void *result)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1003002F0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100300338()
{
  sub_1002FD680(*(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100300364@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v31[3] = sub_1001F6204(0, (unint64_t *)&unk_100588510);
  v31[4] = &off_100515448;
  v31[0] = a1;
  if ((sub_1002F847C() & 1) == 0) {
    goto LABEL_11;
  }
  sub_1002FEA10((uint64_t)v8);
  uint64_t v9 = type metadata accessor for UUID();
  int v10 = sub_1001F758C((uint64_t)v8, 1, v9);
  sub_1002012F4((uint64_t)v8);
  if (v10 == 1)
  {
    sub_10020ED28((uint64_t)v31, (uint64_t)v35);
    uint64_t v11 = sub_10020EF04((uint64_t)v35, v37);
    __chkstk_darwin(v11);
    uint64_t v13 = (void **)((char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void **))(v14 + 16))(v13);
    sub_1003006B8(*v13, a2, v32);
    goto LABEL_8;
  }
  unint64_t v15 = sub_1002F8604();
  if (v15 > 0x1B || ((1 << v15) & 0x8400040) == 0)
  {
    sub_10020ED28((uint64_t)v31, (uint64_t)v30);
    sub_1002018DC((uint64_t)v30);
    goto LABEL_11;
  }
  sub_10020ED28((uint64_t)v31, (uint64_t)v30);
  unsigned __int16 v16 = (unsigned __int16)objc_msgSend((id)*sub_100204074(v30, v30[3]), "flags");
  sub_1002018DC((uint64_t)v30);
  if ((v16 & 0x200) == 0)
  {
LABEL_11:

    goto LABEL_12;
  }
  sub_10020ED28((uint64_t)v31, (uint64_t)v35);
  uint64_t v17 = sub_10020EF04((uint64_t)v35, v37);
  __chkstk_darwin(v17);
  uint64_t v19 = (void **)((char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **))(v20 + 16))(v19);
  sub_100300778(*v19, a2, v32);
LABEL_8:
  uint64_t v21 = v32[0];
  uint64_t v22 = v32[1];
  uint64_t v23 = v32[2];
  uint64_t v24 = v32[3];
  uint64_t v25 = v32[4];
  char v26 = v33;
  uint64_t v27 = v34;
  sub_1002018DC((uint64_t)v35);
  sub_10020EF54((uint64_t)v32, (uint64_t)v35);
  if (!v36)
  {
LABEL_12:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    goto LABEL_13;
  }
  uint64_t v28 = v26 & 1;
LABEL_13:
  uint64_t result = sub_1002018DC((uint64_t)v31);
  *a3 = v21;
  a3[1] = v22;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v28;
  a3[6] = v27;
  return result;
}

void sub_1003006B8(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1001F612C(a1, (SEL *)&selRef_name);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = v6;
    id v10 = [a1 effectiveIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    uint64_t v14 = sub_1002F8604();
  }
  else
  {

    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    a2 = 0;
  }
  *a3 = v11;
  a3[1] = v13;
  a3[2] = v9;
  a3[3] = v8;
  a3[4] = v14;
  a3[5] = 0;
  a3[6] = (uint64_t)a2;
}

void sub_100300778(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002FEA10((uint64_t)v8);
  if (sub_1001F758C((uint64_t)v8, 1, v9) == 1)
  {

    sub_1002012F4((uint64_t)v8);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_9:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_14;
  }
  id v24 = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  uint64_t v17 = sub_1001F612C(a1, (SEL *)&selRef_mediaSystemName);
  uint64_t v16 = v18;
  if (!v18)
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_9;
  }
  uint64_t v15 = v17;
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v14 = v19;
  uint64_t v20 = sub_1002F8604();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

  switch(v20)
  {
    case 6:
      uint64_t v21 = 14;
      break;
    case 22:
      uint64_t v21 = 23;
      break;
    case 27:
      uint64_t v21 = 28;
      break;
    default:
      uint64_t v21 = 0;
      break;
  }
  uint64_t v22 = (uint64_t)v24;
LABEL_14:
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = v21;
  a3[5] = 0;
  a3[6] = v22;
}

void *sub_1003009CC()
{
  return sub_1002FF224();
}

void sub_1003009D4()
{
}

void sub_100300A14()
{
}

void *sub_100300A54(void **a1)
{
  return sub_1002FFCE8(*a1);
}

void sub_100300A5C(void **a1)
{
}

void sub_100300A64(void **a1, void *a2)
{
}

void sub_100300A6C(void **a1, void *a2)
{
}

char *sub_100300A74(void *a1, uint64_t a2, void *a3, void *a4, unsigned char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = sub_1001F6204(0, &qword_1005894E0);
  uint64_t v12 = &a5[qword_1005864B0];
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(void *)&a5[qword_100586508] = &_swiftEmptySetSingleton;
  v39[3] = v11;
  v39[4] = &off_10050EF00;
  v39[0] = a2;
  *(void *)&a5[qword_100586510] = 0;
  a5[qword_100586518] = 0;
  a5[qword_100586520] = 1;
  *(void *)&a5[qword_1005864E0] = a4;
  id v13 = objc_allocWithZone((Class)sub_1001F081C(&qword_1005894E8));
  id v14 = a4;
  id v15 = a1;
  uint64_t v16 = a5;
  *(void *)&v16[qword_1005864F0] = sub_1002FEE08(v15, v14);
  sub_10020ED28((uint64_t)v39, (uint64_t)&v16[qword_1005864F8]);
  *(void *)&v16[qword_1005864E8] = a3;
  id v17 = objc_allocWithZone((Class)TUConversationManager);
  swift_unknownObjectRetain();
  id v18 = [v17 init];
  *(void *)&v16[qword_100586500] = v18;
  uint64_t v19 = (void (**)())&v16[qword_1005864B8];
  *uint64_t v19 = sub_10025EF7C;
  v19[1] = 0;
  uint64_t v20 = (void (**)())&v16[qword_1005864C0];
  *uint64_t v20 = sub_10025F1E8;
  v20[1] = 0;
  uint64_t v21 = (id (**)())&v16[qword_1005864C8];
  *uint64_t v21 = sub_10025F40C;
  v21[1] = 0;
  uint64_t v22 = (BOOL (**)())&v16[qword_1005864D0];
  *uint64_t v22 = sub_10025F438;
  v22[1] = 0;
  uint64_t v23 = (id (**)())&v16[qword_1005864D8];
  void *v23 = sub_10025F4D4;
  v23[1] = 0;

  v38.receiver = v16;
  v38.super_class = ObjectType;
  id v24 = (char *)objc_msgSendSuper2(&v38, "init");
  uint64_t v25 = *(void **)&v24[qword_100586500];
  uint64_t v26 = *(void *)&v24[qword_1005864E0];
  uint64_t v27 = v24;
  [v25 addDelegate:v27 queue:v26];
  uint64_t v28 = qword_1005864F0;
  char v29 = *(void **)&v27[qword_1005864F0];
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v31 = v29;
  swift_retain();
  sub_1002FEAB4((uint64_t)sub_1003016A8, v30);

  swift_release();
  id v32 = *(id *)&v27[v28];
  sub_100300224((uint64_t)sub_100260320, 0);

  uint64_t v33 = *(void **)&v27[qword_1005864E8];
  [v33 setTriggers:33];
  uint64_t v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1003016B0;
  aBlock[5] = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002F8408;
  void aBlock[3] = &unk_100513CE8;
  unint64_t v35 = _Block_copy(aBlock);
  swift_release();
  [v33 setCallChanged:v35];

  _Block_release(v35);
  sub_1002018DC((uint64_t)v39);

  return v27;
}

uint64_t sub_100300E68(void *a1, char *a2)
{
  uint64_t v4 = *(NSObject **)&a2[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1003014F8;
  *(void *)(v6 + 24) = v5;
  v11[4] = sub_10021E788;
  v11[5] = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10032062C;
  uint64_t v11[3] = &unk_1005138D8;
  uint64_t v7 = _Block_copy(v11);
  uint64_t v8 = a2;
  id v9 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

char *sub_100300FD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char *a7)
{
  uint64_t v49 = a5;
  uint64_t v51 = a4;
  uint64_t v52 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  id v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_recommendationsObservers;
  id v18 = self;
  uint64_t v19 = a7;
  *(void *)&a7[v17] = [v18 weakObjectsHashTable];
  uint64_t v20 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_featureFlags;
  *(void *)&v19[v20] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_lockStateObserver] = 0;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken] = 0;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession] = 0;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_sessionFailureCount] = 0;
  uint64_t v21 = &v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v22 = &v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager__topOfListRoutesUniqueIdentifiers] = _swiftEmptyArrayStorage;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue] = a1;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_serverBag] = a6;
  id v45 = a1;
  id v44 = a6;

  v55.receiver = v19;
  v55.super_class = ObjectType;
  uint64_t v23 = v52;
  id v24 = (char *)objc_msgSendSuper2(&v55, "init");
  uint64_t v25 = v24;
  uint64_t v43 = a3;
  if (v23)
  {
    uint64_t v26 = (uint64_t *)&v24[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock];
    uint64_t v27 = *(void *)&v24[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock];
    uint64_t *v26 = v23;
    v26[1] = a3;
    uint64_t v28 = v24;
    sub_1002084D8(v23);
  }
  else
  {
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v25;
    uint64_t v30 = (void (**)())&v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock];
    uint64_t v27 = *(void *)&v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock];
    *uint64_t v30 = sub_100301510;
    v30[1] = (void (*)())v29;
    id v31 = v25;
  }
  sub_100208490(v27);
  uint64_t v32 = v49;
  if (v51)
  {
    uint64_t v33 = &v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock];
    uint64_t v34 = *(void *)&v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock];
    *(void *)uint64_t v33 = v51;
    *((void *)v33 + 1) = v32;
    swift_retain();
  }
  else
  {
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v25;
    uint64_t v36 = (void (**)())&v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock];
    uint64_t v34 = *(void *)&v25[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock];
    void *v36 = sub_100301518;
    v36[1] = (void (*)())v35;
    uint64_t v37 = v25;
  }
  sub_100208490(v34);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v25;
  aBlock[4] = sub_100301520;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100513978;
  uint64_t v39 = _Block_copy(aBlock);
  uint64_t v40 = v25;
  static DispatchQoS.unspecified.getter();
  unint64_t v53 = _swiftEmptyArrayStorage;
  sub_1002BD364((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  uint64_t v41 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();

  _Block_release(v39);
  sub_100208490(v51);
  sub_100208490(v52);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v41);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
  swift_release();
  return v40;
}

uint64_t sub_1003014E0()
{
  return sub_100301560((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_1003014F8()
{
  return sub_10031C4AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100301500()
{
  uint64_t v0 = sub_1002544DC();
  return _swift_deallocObject(v0, v1, v2);
}

void sub_100301510()
{
}

void sub_100301518()
{
}

void sub_100301520()
{
  sub_10031C2B0(*(char **)(v0 + 16));
}

uint64_t sub_100301528()
{
  return sub_100301560((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100301540()
{
  return sub_1002FD514(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100301548()
{
  return sub_100301560((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100301560(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  uint64_t v3 = sub_1002544DC();

  return _swift_deallocObject(v3, v4, v5);
}

void sub_1003015A8()
{
  sub_1002FD218(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003015B0()
{
  return sub_1002FD06C(*(void *)(v0 + 16));
}

uint64_t sub_1003015B8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

void sub_1003015F8()
{
  sub_1002FBD60(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_100301608()
{
  return sub_1002FCE98(*(void *)(v0 + 16));
}

uint64_t sub_100301610()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100301640@<X0>(void *a1@<X8>)
{
  return sub_1002F9D8C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10030165C()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10030169C()
{
  sub_1002FAA78(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1003016A8()
{
}

void sub_1003016B0()
{
}

uint64_t sub_1003016B8()
{
  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_1003016F8()
{
  return sub_1002F9A5C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25), *(void **)(v0 + 32));
}

uint64_t sub_10030170C()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100208504();

  return _swift_deallocObject(v0, v1, v2);
}

void *sub_10030173C()
{
  return sub_1003009CC();
}

uint64_t sub_100301744()
{
  swift_release();
  uint64_t v0 = sub_1002544DC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100301774(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

void sub_1003017AC()
{
}

void sub_1003017B4()
{
}

void *sub_1003017BC(void **a1)
{
  return sub_100300A54(a1);
}

uint64_t sub_1003017C4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_1003017FC()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_100301834()
{
  sub_100300A5C((void **)(v0 + 16));
}

void sub_100301840()
{
  sub_100300A64((void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10030184C()
{
  sub_100300A6C((void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100301858()
{
  return sub_1002FF538(*(void **)(v0 + 16));
}

uint64_t sub_10030195C()
{
  return v0;
}

uint64_t sub_100301988()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_1003019B0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1003019D8()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t sub_100301A00()
{
  return type metadata accessor for DispatchQoS();
}

void sub_100301A28(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0;
  v2[1] = 0;
}

uint64_t sub_100301A34()
{
  return v0;
}

void sub_100301A4C(uint64_t a1, uint64_t (*a2)(uint64_t, id, uint64_t, uint64_t))
{
  sub_1002E4D1C(v28, a1);
  uint64_t v3 = v28[0];
  uint64_t v27 = v28[1];
  int64_t v4 = v28[3];
  unint64_t v5 = v28[4];
  int64_t v29 = (unint64_t)(v28[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v26 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v6 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v7 = v6 | (v4 << 6);
      goto LABEL_20;
    }
    int64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v8 >= v29) {
      goto LABEL_29;
    }
    unint64_t v9 = *(void *)(v27 + 8 * v8);
    int64_t v10 = v4 + 1;
    if (!v9)
    {
      int64_t v10 = v4 + 2;
      if (v4 + 2 >= v29) {
        goto LABEL_29;
      }
      unint64_t v9 = *(void *)(v27 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v4 + 3;
        if (v4 + 3 >= v29) {
          goto LABEL_29;
        }
        unint64_t v9 = *(void *)(v27 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v4 + 4;
          if (v4 + 4 >= v29) {
            goto LABEL_29;
          }
          unint64_t v9 = *(void *)(v27 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v4 + 5;
            if (v4 + 5 >= v29) {
              goto LABEL_29;
            }
            unint64_t v9 = *(void *)(v27 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v4 + 6;
              while (v11 < v29)
              {
                unint64_t v9 = *(void *)(v27 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_19;
                }
              }
LABEL_29:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v4 = v10;
LABEL_20:
    uint64_t v12 = *(void *)(*(void *)(v3 + 48) + 8 * v7);
    uint64_t v13 = *(void *)(v3 + 56) + 24 * v7;
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    unsigned int v16 = *(unsigned __int8 *)(v13 + 16);
    if (*(unsigned char *)(v13 + 17)) {
      int v17 = 256;
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = v17 | v16;
    id v19 = v14;
    uint64_t v20 = a2(v12, v19, v15, v18);
    char v22 = v21;

    if ((v22 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A4E1C();
        uint64_t v26 = v24;
      }
      unint64_t v23 = v26[2];
      if (v23 >= v26[3] >> 1)
      {
        sub_1003A4E1C();
        uint64_t v26 = v25;
      }
      v26[2] = v23 + 1;
      v26[v23 + 4] = v20;
    }
  }
  __break(1u);
}

uint64_t sub_100301CA4(uint64_t a1, char *a2)
{
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v23 = v2;
  id v24 = a2;
  uint64_t v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t result = sub_100206F1C(a1);
  if (result < 0 || (unint64_t v10 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    char v22 = v33;

    return (uint64_t)v22;
  }
  uint64_t v11 = a1 + 64;
  uint64_t v27 = &v24[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  uint64_t v28 = a1;
  uint64_t v25 = a1 + 64;
  uint64_t v26 = (void (**)(uint64_t, char *, uint64_t))(v5 + 16);
  uint64_t v12 = (uint64_t)v29;
  while ((*(void *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
  {
    if (v9 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_18;
    }
    uint64_t v31 = v7;
    uint64_t v32 = v9;
    uint64_t v13 = *(void *)(a1 + 56) + 24 * v10;
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    (*v26)(v12, v27, v30);
    id v16 = v14;
    id v17 = [v16 value];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = objc_allocWithZone((Class)IDSGroupSessionActiveParticipant);
    sub_1003051AC(v12, v15, 1, v18, v20, 0, 0xF000000000000000);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    a1 = v28;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized ContiguousArray._endMutation()();
    if ((uint64_t)v10 >= -(-1 << *(unsigned char *)(a1 + 32))) {
      goto LABEL_19;
    }
    uint64_t v11 = v25;
    if ((*(void *)(v25 + 8 * (v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_20;
    }
    if (v32 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_21;
    }
    uint64_t result = _HashTable.occupiedBucket(after:)();
    uint64_t v7 = v31 - 1;
    if (v31 == 1) {
      goto LABEL_14;
    }
    unint64_t v10 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v9 = *(unsigned int *)(a1 + 36);
      if (result < 1 << *(unsigned char *)(a1 + 32)) {
        continue;
      }
    }
    goto LABEL_13;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void sub_100301F7C(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E4D1C(v58, a1);
  int64_t v8 = v58[3];
  unint64_t v9 = v58[4];
  unint64_t v53 = &a3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  id v48 = a3;
  uint64_t v49 = &a3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate];
  uint64_t v50 = v58[1];
  int64_t v56 = (unint64_t)(v58[2] + 64) >> 6;
  uint64_t v57 = v58[0];
  unint64_t v10 = a2 + 56;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  unint64_t v51 = a2 + 56;
  unint64_t v47 = a2;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_15;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v56) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v50 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 3;
      if (v8 + 3 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 4;
      if (v8 + 4 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }
      else
      {
        int64_t v13 = v8 + 5;
        if (v8 + 5 >= v56) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v50 + 8 * v13);
        if (!v14)
        {
          int64_t v45 = v8 + 6;
          while (v45 < v56)
          {
            unint64_t v14 = *(void *)(v50 + 8 * v45++);
            if (v14)
            {
              int64_t v13 = v45 - 1;
              goto LABEL_14;
            }
          }
LABEL_35:
          swift_release();
          sub_100305448(a2);

          return;
        }
      }
    }
LABEL_14:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v8 = v13;
LABEL_15:
    uint64_t v16 = *(void *)(v57 + 56) + 24 * v12;
    id v17 = *(void **)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    uint64_t v20 = *(unsigned __int8 *)(v16 + 17);
    if (a2 < 2) {
      goto LABEL_16;
    }
    if (*(void *)(a2 + 16))
    {
      uint64_t v35 = static Hasher._hash(seed:_:)();
      uint64_t v36 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v37 = v35 & ~v36;
      if ((*(void *)(v10 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v38 = *(void *)(a2 + 48);
        if (*(void *)(v38 + 8 * v37) == v18)
        {
LABEL_16:
          int64_t v59 = v8;
          id v21 = objc_allocWithZone((Class)CSDConversationParticipant);
          id v22 = v17;
          id v23 = sub_1003052D4(v18, v22, 0, 0xC000000000000000);
          [v23 setSpatialPersonaEnabled:v20];
          sub_1001F6204(0, (unint64_t *)&unk_1005895B0);
          id v24 = sub_10028754C(v19);
          [v23 setCapabilities:v24];

          [v23 setAudioVideoMode:2];
          uint64_t v25 = (uint64_t)v54;
          (*v52)(v54, v53, v55);
          id v26 = [v22 value];
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;

          id v30 = objc_allocWithZone((Class)IDSGroupSessionActiveParticipant);
          id v31 = sub_1003051AC(v25, v18, 1, v27, v29, 0, 0xF000000000000000);
          id v32 = [self participantWithCSDConversationParticipant:v23];
          uint64_t v33 = sub_100342308(v32);
          if (v34 >> 60 == 15)
          {
          }
          else
          {
            uint64_t v40 = v33;
            unint64_t v41 = v34;
            uint64_t Strong = swift_unknownObjectWeakLoadStrong();
            if (Strong)
            {
              uint64_t v43 = (void *)Strong;
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              [v43 sessionProvider:v48 didReceiveDataBlob:isa forParticipant:v31];

              sub_1001FCB18(v40, v41);
              a2 = v47;
              swift_unknownObjectRelease();
            }
            else
            {

              sub_1001FCB18(v40, v41);
            }
          }
          unint64_t v10 = v51;
          int64_t v8 = v59;
        }
        else
        {
          uint64_t v39 = ~v36;
          while (1)
          {
            unint64_t v37 = (v37 + 1) & v39;
            if (((*(void *)(v10 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
              break;
            }
            if (*(void *)(v38 + 8 * v37) == v18) {
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  __break(1u);
}

uint64_t sub_100302468()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_clientUUIDString);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1003024BC(uint64_t a1, uint64_t a2)
{
  return sub_100303690(a1, a2, &OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_clientUUIDString);
}

void sub_1003024C8()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  id v23 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001FCCA0();
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupSessionSubscription] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_endedReason] = 0;
  int64_t v13 = &v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_destination];
  *(void *)int64_t v13 = 0;
  *((void *)v13 + 1) = 0xE000000000000000;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID], v8, v9);
  unint64_t v14 = v0;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v18(v1, v9);
  char v19 = (uint64_t *)&v14[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_clientUUIDString];
  *char v19 = v15;
  v19[1] = v17;
  *(void *)&v14[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue] = v5;
  *(void *)&v14[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_simulatedConversationManager] = v3;
  id v20 = v5;
  id v21 = v3;

  v24.receiver = v14;
  v24.super_class = (Class)type metadata accessor for SimulatedIDSGroupSessionProvider();
  id v22 = objc_msgSendSuper2(&v24, "init");
  sub_100285B34();

  swift_bridgeObjectRelease();
  v18(v8, v9);
  sub_1001FCC08();
}

void sub_100302790()
{
  sub_1001FCC38();
  int64_t v4 = v0;
  unint64_t v42 = v5;
  uint64_t v41 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1002024D0();
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_1001F2514();
  uint64_t v13 = v12 - v11;
  unint64_t v14 = (int *)type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  sub_10020233C();
  __chkstk_darwin(v15);
  sub_10028AC3C();
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_10021067C();
  id v20 = *(void **)&v4[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue];
  *(void *)uint64_t v3 = v20;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_5;
  }
  uint64_t v22 = (uint64_t)&v4[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  uint64_t v23 = sub_100284A30();
  sub_10022347C(v22, v23);
  swift_bridgeObjectRelease();
  if (sub_1001F758C(v13, 1, (uint64_t)v14) == 1)
  {
    sub_100235804(v13, (uint64_t *)&unk_100587350);
    goto LABEL_10;
  }
  sub_10028A19C(v13, v1);
  id v24 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v25 = sub_1001FCCB8();
  *(_OWORD *)(v25 + 16) = xmmword_10048F550;
  uint64_t v26 = sub_100303418();
  *(void *)(v25 + 56) = sub_1001F081C(&qword_100589550);
  *(void *)(v25 + 64) = sub_1001FCB74(&qword_100589558, &qword_100589550);
  *(void *)(v25 + 32) = v26;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v1 + v14[6]);
  uint64_t v3 = v4;
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_100301CA4(v27, v3);
  swift_bridgeObjectRelease();
  uint64_t v43 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v22, v41);
  uint64_t v29 = *(void *)(v1 + v14[8]);
  uint64_t v30 = sub_100305458((id *)(v1 + v14[7]));
  uint64_t v32 = v31;
  id v33 = objc_allocWithZone((Class)IDSGroupSessionActiveParticipant);
  sub_1003051AC(v2, v29, 1, v30, v32, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_12;
  }
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v35 = (void *)Strong;
    sub_1001F6204(0, &qword_1005895A8);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v35 sessionProvider:v3 didReceiveActiveParticipants:isa success:1];

    swift_unknownObjectRelease();
  }
  uint64_t v37 = swift_unknownObjectWeakLoadStrong();
  if (v37)
  {
    uint64_t v38 = (void *)v37;
    sub_1001F6204(0, &qword_1005895A8);
    Class v39 = Array._bridgeToObjectiveC()().super.isa;
    [v38 sessionProvider:v3 didReceiveActiveLightweightParticipants:v39 success:1];

    swift_unknownObjectRelease();
  }
  uint64_t v40 = v3;
  swift_bridgeObjectRetain();
  sub_100305484(v42);
  sub_100301F7C(v13, v42, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10028A294(v1);
LABEL_10:
  sub_1001FCC08();
}

unint64_t sub_100302C54()
{
  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10024E44C(v0);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10024E44C(v2);
  swift_bridgeObjectRetain();
  int64_t v4 = sub_100305B54((uint64_t)v1, (uint64_t)v3);
  unint64_t v5 = sub_100305B54((uint64_t)v3, (uint64_t)v1);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_100301A4C(v6, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))sub_100305438);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v5[2];
    swift_bridgeObjectRelease();
    if (!v9 && !*(void *)(v8 + 16))
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  if (v4[2] || *(void *)(v8 + 16))
  {
    unint64_t v10 = sub_10025015C(v8, (uint64_t)v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = 1;
  }
  sub_100302790();
  return sub_100305448(v10);
}

uint64_t sub_100302DBC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + *(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0) + 24));
  if (!*(void *)(v8 + 16)) {
    return 0;
  }
  unint64_t v9 = sub_100233714(a3);
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(void *)(v8 + 56) + 24 * v9;
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  int v14 = *(unsigned __int8 *)(v11 + 16);
  int v15 = a4 & 0x101;
  if (*(unsigned char *)(v11 + 17)) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = v16 | v14;
  id v18 = v12;
  BOOL v19 = sub_1002876B8(a2, a3, v15, (uint64_t)v18, v13, v17);

  if (v19) {
    return 0;
  }
  else {
    return a3;
  }
}

uint64_t sub_100302E90(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupSessionSubscription) = a1;
  return swift_release();
}

void sub_100302EA8()
{
  sub_1001FCC38();
  uint64_t v3 = sub_1001F081C(&qword_100589560);
  uint64_t v4 = sub_100202384(v3);
  __chkstk_darwin(v4);
  sub_1001FCCA0();
  uint64_t v5 = sub_1001F081C(&qword_100589568);
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10021067C();
  sub_1001F081C((uint64_t *)&unk_100589570);
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_100284CC4();
  sub_1001F081C((uint64_t *)&unk_100589690);
  sub_1001FCB74((unint64_t *)&unk_100589580, (uint64_t *)&unk_100589690);
  Publisher.dropFirst(_:)();
  swift_release();
  char v10 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  sub_1001F0530(v1, 1, 1, v11);
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  sub_1001FCB74(&qword_100589590, &qword_100589568);
  sub_100305398();
  id v12 = v10;
  Publisher.receive<A>(on:options:)();
  sub_100235804(v1, &qword_100589560);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1001FCB74(&qword_1005895A0, (uint64_t *)&unk_100589570);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  sub_1001F7664();
  v14();
  sub_100302E90(v13);
  sub_1001FCC08();
}

uint64_t sub_100303194(uint64_t *a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unsigned int v17 = (void *)result;
    uint64_t v18 = result + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
    sub_10022347C(result + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID, v15);
    if (sub_1001F758C((uint64_t)v7, 1, v8) == 1)
    {

      uint64_t v19 = (uint64_t)v7;
      return sub_100235804(v19, (uint64_t *)&unk_100587350);
    }
    sub_10028A19C((uint64_t)v7, (uint64_t)v13);
    sub_10022347C(v18, v14);
    if (sub_1001F758C((uint64_t)v5, 1, v8) == 1)
    {
      sub_10028A294((uint64_t)v13);

      uint64_t v19 = (uint64_t)v5;
      return sub_100235804(v19, (uint64_t *)&unk_100587350);
    }
    sub_10028A19C((uint64_t)v5, (uint64_t)v11);
    sub_100302C54();

    sub_10028A294((uint64_t)v11);
    return sub_10028A294((uint64_t)v13);
  }
  return result;
}

#error "1003034F4: call analysis failed (funcsize=62)"

uint64_t sub_100303540()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_endedReason);
}

id sub_100303568(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t sub_1003035B8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_destination);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_10030360C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);
}

uint64_t sub_100303684(uint64_t a1, uint64_t a2)
{
  return sub_100303690(a1, a2, &OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_destination);
}

uint64_t sub_100303690(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  void *v4 = a1;
  v4[1] = a2;
  return sub_100305510();
}

uint64_t sub_10030370C()
{
  return UUID.uuidString.getter();
}

uint64_t sub_10030376C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1003037DC()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

void sub_10030386C()
{
  sub_1001FCC38();
  uint64_t v3 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1001FCCD0();
  uint64_t v6 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  sub_10020233C();
  __chkstk_darwin(v7);
  sub_1001FCCA0();
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v9 = sub_100202384(v8);
  __chkstk_darwin(v9);
  sub_10021067C();
  id v10 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = sub_1001FCCB8();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v13 = (id)TULoggableStringForObject();

  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1001F3B08();
    *(void *)(v11 + 32) = v14;
    *(void *)(v11 + 40) = v16;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
    uint64_t v18 = sub_100284A30();
    sub_10022347C(v17, v18);
    swift_bridgeObjectRelease();
    if (sub_1001F758C(v2, 1, v6))
    {
      sub_100235804(v2, (uint64_t *)&unk_100587350);
    }
    else
    {
      sub_10028A200(v2, v1);
      sub_100235804(v2, (uint64_t *)&unk_100587350);
      uint64_t v19 = *(void *)(v1 + *(int *)(v6 + 32));
      sub_10028A294(v1);
      sub_100302EA8();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v3;
      *(void *)(v20 + 24) = v19;
      v25[4] = sub_100305390;
      void v25[5] = v20;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 1107296256;
      void v25[2] = sub_1002C2C88;
      v25[3] = &unk_1005140A8;
      id v21 = _Block_copy(v25);
      id v22 = v3;
      static DispatchQoS.unspecified.getter();
      sub_1001F5FE0();
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v21);
      sub_1001F7664();
      v23();
      sub_1001F7664();
      v24();
      swift_release();
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_100303C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100587350);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    sub_1001F081C((uint64_t *)&unk_100586A30);
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 sessionProvider:a1 didJoinGroupWithParticipantIdentifiers:isa localParticipantIdentifier:a2 error:0];

    swift_unknownObjectRelease();
  }
  uint64_t v13 = a1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
  uint64_t v14 = sub_100284A30();
  sub_10022347C(v13, v14);
  swift_bridgeObjectRelease();
  if (sub_1001F758C((uint64_t)v9, 1, v4))
  {
    sub_100235804((uint64_t)v9, (uint64_t *)&unk_100587350);
  }
  else
  {
    sub_10028A200((uint64_t)v9, (uint64_t)v6);
    sub_100235804((uint64_t)v9, (uint64_t *)&unk_100587350);
    char v15 = v6[*(int *)(v4 + 36)];
    sub_10028A294((uint64_t)v6);
    if (v15)
    {
      sub_1002866B0();
      return;
    }
  }
  sub_100302790();
}

void sub_100303EA0()
{
}

void sub_100303F60()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  id v10 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = sub_1001FCCB8();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  *(void *)(v11 + 56) = sub_1001F081C(&qword_100589550);
  *(void *)(v11 + 64) = sub_1001FCB74(&qword_100589558, &qword_100589550);
  *(void *)(v11 + 32) = v2;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID, v3);
  uint64_t v12 = sub_100284C24(v19);
  uint64_t v13 = sub_100359B04(v18);
  uint64_t v15 = v14;
  uint64_t v16 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  if (!sub_1001F758C(v15, 1, v16))
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    *(void *)(v15 + *(int *)(v16 + 20)) = sub_10028608C(v17);
    swift_bridgeObjectRelease();
  }
  ((void (*)(void *, void))v13)(v18, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  v12(v19, 0);
  sub_1002866B0();
  sub_1001FCC08();
}

void sub_1003043B4()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_10028AC3C();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_1002024D0();
  id v4 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = sub_1001FCCB8();
  *(_OWORD *)(v5 + 16) = xmmword_10048F550;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v7 = (id)TULoggableStringForObject();

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1001F3B08();
    *(void *)(v5 + 32) = v8;
    *(void *)(v5 + 40) = v10;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    sub_100302E90(0);
    sub_1002862A8();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v1;
    v16[4] = sub_10030518C;
    v16[5] = v11;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    void v16[2] = sub_1002C2C88;
    void v16[3] = &unk_100514058;
    uint64_t v12 = _Block_copy(v16);
    id v13 = v1;
    static DispatchQoS.unspecified.getter();
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    sub_1001F7664();
    v14();
    sub_1001F7664();
    v15();
    swift_release();
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void *sub_1003046B8(uint64_t a1)
{
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result sessionProvider:a1 didLeaveGroupWithError:0];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10030473C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a1;
  a4(v6);

  return swift_bridgeObjectRelease();
}

void sub_100304848(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  id v7 = sub_1001B1C90();
  sub_1001F081C(&qword_100584B20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F550;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1001F3B08();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v9 = [objc_allocWithZone((Class)type metadata accessor for SimulatedDataCryptor()) init];
  ((void (**)(void, id))a4)[2](a4, v9);

  _Block_release(a4);
}

void sub_100304B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  a5[2](a5, a1);

  _Block_release(a5);
}

uint64_t sub_100304C68()
{
  return sub_100305518();
}

uint64_t sub_100304C8C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities) = a1;
  return sub_100305510();
}

Class sub_100304CB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    v3.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }

  return v3.super.isa;
}

uint64_t sub_100304D24()
{
  return sub_100305518();
}

void sub_100304D48(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a3) {
    uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = a1;
  a4(v6);
}

uint64_t sub_100304DD8(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities) = a1;
  return sub_100305510();
}

void sub_100304ECC()
{
}

id sub_100304F0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedIDSGroupSessionProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100305030()
{
  return type metadata accessor for SimulatedIDSGroupSessionProvider();
}

uint64_t type metadata accessor for SimulatedIDSGroupSessionProvider()
{
  uint64_t result = qword_100589538;
  if (!qword_100589538) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100305080()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100305154()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10030518C()
{
  return sub_1003046B8(*(void *)(v0 + 16));
}

uint64_t sub_100305194(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003051A4()
{
  return swift_release();
}

id sub_1003051AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  v15.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  if (a7 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(a6, a7);
  }
  id v18 = [v8 initWithGroupUUID:v15.super.isa participantIdentifier:a2 isKnown:a3 & 1 participantURI:v16 pushToken:isa];

  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  return v18;
}

id sub_1003052D4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [v4 initWithIdentifier:a1 handle:a2 avcData:isa];
  sub_1001F7498(a3, a4);

  return v10;
}

uint64_t sub_100305358()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100305390()
{
  sub_100303C68(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100305398()
{
  unint64_t result = qword_100589598;
  if (!qword_100589598)
  {
    sub_1001F6204(255, (unint64_t *)&qword_1005850F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589598);
  }
  return result;
}

uint64_t sub_1003053F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100305430(uint64_t *a1)
{
  return sub_100303194(a1);
}

uint64_t sub_100305438(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return sub_100302DBC(a1, a2, a3, a4 & 0x101, *(void *)(v4 + 16));
}

unint64_t sub_100305448(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100305458(id *a1)
{
  id v1 = *a1;

  return sub_100305494(v1);
}

unint64_t sub_100305484(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100305494(void *a1)
{
  id v2 = [a1 idsDestination];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100305510()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100305518()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100305520(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_19:
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v14);
    uint64_t result = a1(&v18);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v12 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_18:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_19;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_17:
    int64_t v12 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1003056A0(uint64_t a1, void (*a2)(char *, char *))
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_1005896A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E4D1C(v23, a1);
  uint64_t v7 = v23[0];
  uint64_t v22 = v23[1];
  int64_t v8 = v23[3];
  unint64_t v9 = v23[4];
  int64_t v24 = (unint64_t)(v23[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v7 + 48);
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v6, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v12, v18);
    uint64_t v19 = *(void *)(v7 + 56);
    uint64_t v20 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_10028A200(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t)&v6[*(int *)(v4 + 48)]);
    a2(v6, &v6[*(int *)(v4 + 48)]);
    uint64_t result = sub_1002E8C30((uint64_t)v6, (uint64_t *)&unk_1005896A0);
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v24) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v22 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v22 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v22 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v24) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v22 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v8 + 6;
              while (v16 < v24)
              {
                unint64_t v14 = *(void *)(v22 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
  }
  __break(1u);
  return result;
}

void sub_100305910(uint64_t a1, void (*a2)(uint64_t, id, uint64_t, uint64_t))
{
  sub_1002E4D1C(v21, a1);
  uint64_t v3 = v21[0];
  uint64_t v20 = v21[1];
  int64_t v4 = v21[3];
  unint64_t v5 = v21[4];
  int64_t v22 = (unint64_t)(v21[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v7 = v6 | (v4 << 6);
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v3 + 48) + 8 * v7);
    uint64_t v13 = *(void *)(v3 + 56) + 24 * v7;
    unint64_t v14 = *(void **)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    unsigned int v16 = *(unsigned __int8 *)(v13 + 16);
    if (*(unsigned char *)(v13 + 17)) {
      int v17 = 256;
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = v17 | v16;
    id v19 = v14;
    a2(v12, v19, v15, v18);

    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v8 >= v22) {
      goto LABEL_24;
    }
    unint64_t v9 = *(void *)(v20 + 8 * v8);
    int64_t v10 = v4 + 1;
    if (!v9)
    {
      int64_t v10 = v4 + 2;
      if (v4 + 2 >= v22) {
        goto LABEL_24;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v4 + 3;
        if (v4 + 3 >= v22) {
          goto LABEL_24;
        }
        unint64_t v9 = *(void *)(v20 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v4 + 4;
          if (v4 + 4 >= v22) {
            goto LABEL_24;
          }
          unint64_t v9 = *(void *)(v20 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v4 + 5;
            if (v4 + 5 >= v22) {
              goto LABEL_24;
            }
            unint64_t v9 = *(void *)(v20 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v4 + 6;
              while (v11 < v22)
              {
                unint64_t v9 = *(void *)(v20 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_24:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v4 = v10;
  }
  __break(1u);
}

void sub_100305AE4(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

void *sub_100305B54(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_100308F40(a1);
    return (void *)a2;
  }
  else
  {
    return sub_1003090B8(a1, a2);
  }
}

id sub_100305BB8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SimulatedIDSService()) init];
  qword_100594CF0 = (uint64_t)result;
  return result;
}

id sub_100305BE8()
{
  if (qword_100583A58 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100594CF0;

  return v0;
}

char *sub_100305C6C()
{
  uint64_t v1 = OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager;
  id v2 = objc_allocWithZone((Class)type metadata accessor for SimulatedConversationManager(0));
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  uint64_t v4 = OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues;
  *(void *)&v3[v4] = [self weakToStrongObjectsMapTable];
  *(void *)&v3[OBJC_IVAR___CSDSimulatedIDSService_groupSessionSubscription] = 0;
  uint64_t v5 = OBJC_IVAR___CSDSimulatedIDSService_idsService;
  id v6 = objc_allocWithZone((Class)IDSService);
  *(void *)&v3[v5] = sub_1003088E4(0x6574616C756D6973, 0xE900000000000064);
  *(void *)&v3[OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account] = 1;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SimulatedIDSService();
  unint64_t v7 = (char *)objc_msgSendSuper2(&v10, "init");
  sub_100284CC4();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1001F081C((uint64_t *)&unk_100589690);
  sub_1001FCB74((unint64_t *)&unk_100589580, (uint64_t *)&unk_100589690);
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();

  swift_release();
  *(void *)&v7[OBJC_IVAR___CSDSimulatedIDSService_groupSessionSubscription] = v8;
  swift_release();
  return v7;
}

void sub_100305E34(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    __chkstk_darwin(Strong);
    uint64_t v5 = sub_1003056A0(v2, (void (*)(char *, char *))sub_1003097A4);
    __chkstk_darwin(v5);
    sub_1003056A0(v1, (void (*)(char *, char *))sub_1003097B0);
  }
}

unint64_t sub_100305F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100587350);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v17 - v14;
  if (*(void *)(a3 + 16) && (unint64_t result = sub_1002337A4(a2), (v16 & 1) != 0))
  {
    sub_10028A200(*(void *)(a3 + 56) + *(void *)(v9 + 72) * result, (uint64_t)v12);
    sub_10028A19C((uint64_t)v12, (uint64_t)v15);
    sub_10028A200(a2, (uint64_t)v7);
    sub_1001F0530((uint64_t)v7, 0, 1, v8);
    sub_100306284((uint64_t)v15, (uint64_t)v7);
    sub_1002E8C30((uint64_t)v7, (uint64_t *)&unk_100587350);
    return sub_10028A294((uint64_t)v15);
  }
  else if ((*(unsigned char *)(a2 + *(int *)(v8 + 36)) & 1) == 0)
  {
    return sub_100306800();
  }
  return result;
}

uint64_t sub_1003060F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100587350);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  if (*(void *)(a4 + 16) && (unint64_t v12 = sub_1002337A4(a2), (v13 & 1) != 0))
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(a4 + 56);
    uint64_t v16 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_10028A200(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, (uint64_t)v11);
    sub_1001F0530((uint64_t)v11, 0, 1, v16);
  }
  else
  {
    uint64_t v17 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
    sub_1001F0530((uint64_t)v11, 1, 1, v17);
    sub_1002E8C30((uint64_t)v11, (uint64_t *)&unk_100587350);
    sub_1001F0530((uint64_t)v9, 1, 1, v17);
    sub_100306284(a2, (uint64_t)v9);
    uint64_t v11 = v9;
  }
  return sub_1002E8C30((uint64_t)v11, (uint64_t *)&unk_100587350);
}

uint64_t sub_100306284(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  __chkstk_darwin(v7);
  sub_100202310();
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100587350);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_1002024D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v4, a1, v11);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_10024E44C(v15);
  sub_1003096B8(a2, (uint64_t)v10);
  if (sub_1001F758C((uint64_t)v10, 1, v7) == 1)
  {
    uint64_t v17 = &_swiftEmptySetSingleton;
  }
  else
  {
    sub_10028A19C((uint64_t)v10, v3);
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_10024E44C(v18);
    sub_10028A294(v3);
  }
  uint64_t v19 = sub_100305B54((uint64_t)v17, (uint64_t)v16);
  uint64_t v20 = swift_bridgeObjectRelease();
  __chkstk_darwin(v20);
  *(void *)&v22[-32] = a1;
  *(void *)&v22[-24] = v4;
  *(void *)&v22[-16] = v2;
  sub_100305520(sub_100309720, (uint64_t)&v22[-48], (uint64_t)v19);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003064A8(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  uint64_t result = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v19 = *(void *)(a2 + *(int *)(result + 24));
  if (*(void *)(v19 + 16))
  {
    uint64_t result = sub_100233714(v17);
    if (v20)
    {
      uint64_t v41 = v4;
      uint64_t v21 = *(void **)(*(void *)(v19 + 56) + 24 * result);
      id v22 = objc_allocWithZone((Class)CSDMessagingConversationParticipantDidLeaveContext);
      id v23 = v21;
      id v24 = [v22 init];
      uint64_t v25 = v24;
      if (v24) {
        [v24 setLeaveReason:0];
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v43, v13);
      uint64_t result = (uint64_t)(id)TUCopyIDSCanonicalAddressForHandle();
      if (result)
      {
        uint64_t v26 = (void *)result;
        id v40 = v23;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        Date.init()();
        if (v25)
        {
          uint64_t v29 = sub_100342308(v25);
          unint64_t v31 = v30;
        }
        else
        {
          uint64_t v29 = 0;
          unint64_t v31 = 0xF000000000000000;
        }
        sub_1001F0530((uint64_t)v9, 1, 1, v13);
        id v32 = objc_allocWithZone((Class)IDSGroupSessionParticipantUpdate);
        id v33 = sub_100308948((uint64_t)v16, 0, v17, v43, v28, 2, 0, 0, (uint64_t)v12, 0, 0xF000000000000000, v29, v31, 0, 0, (uint64_t)v9);
        id v34 = [objc_allocWithZone((Class)IDSMessageContext) init];
        uint64_t v35 = (void *)swift_allocObject();
        uint64_t v36 = v42;
        long long v35[2] = v42;
        v35[3] = v33;
        v35[4] = v34;
        v36;
        id v37 = v33;
        id v38 = v34;
        sub_100307068((uint64_t)sub_100309744, (uint64_t)v35);

        return swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_100306800()
{
  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_100305910(v0, (void (*)(uint64_t, id, uint64_t, uint64_t))sub_100308D80);
  return swift_bridgeObjectRelease();
}

id sub_100306884(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5, char *a6, void *a7)
{
  uint64_t v12 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v12 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  __chkstk_darwin(v14 - 8);
  uint64_t v68 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for UUID();
  uint64_t v16 = *(void (***)(uint64_t, void *, uint64_t))(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v70 = (uint64_t)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &selRef_generatorDescriptor;
  id v19 = [objc_allocWithZone((Class)CSDMessagingConversationParticipantDidJoinContext) init];
  uint64_t v67 = a7;
  if (v19)
  {
    uint64_t v64 = a3;
    uint64_t v65 = a6;
    unint64_t v20 = *(void *)&a5[*(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0) + 20)];
    unint64_t v73 = (unint64_t)_swiftEmptyArrayStorage;
    if (v20 >> 62) {
      goto LABEL_47;
    }
    id v21 = *(id *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    id v22 = v19;
LABEL_4:
    uint64_t v61 = v16;
    uint64_t v62 = a5;
    char v63 = a2;
    if (v21)
    {
      id v60 = v19;
      a2 = 0;
      id v19 = (id)(v20 & 0xC000000000000001);
      unint64_t v71 = v20 + 32;
      uint64_t v16 = (void (**)(uint64_t, void *, uint64_t))&type metadata for String;
      uint64_t v18 = (char **)&protocol witness table for String;
      id v72 = v21;
      while (1)
      {
        if (v19)
        {
          a5 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          a5 = *(char **)(v71 + 8 * (void)a2);
          swift_unknownObjectRetain();
        }
        BOOL v23 = __OFADD__(a2, 1);
        a2 = (char *)a2 + 1;
        if (v23)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          swift_bridgeObjectRetain_n();
          id v59 = v19;
          id v21 = (id)_CocoaArrayWrapper.endIndex.getter();
          goto LABEL_4;
        }
        id v24 = [a5 destinationURIs];
        uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        char v26 = *(unsigned char *)(v25 + 32);
        uint64_t v27 = 1 << v26;
        unint64_t v28 = *(void *)(v25 + 56);
        if (v28)
        {
          uint64_t v29 = 0;
        }
        else
        {
          unsigned int v35 = v26 & 0x3F;
          if (v35 < 7) {
            goto LABEL_32;
          }
          unint64_t v28 = *(void *)(v25 + 64);
          if (v28)
          {
            uint64_t v29 = 1;
          }
          else
          {
            if (v35 < 8) {
              goto LABEL_32;
            }
            unint64_t v28 = *(void *)(v25 + 72);
            if (!v28)
            {
              uint64_t v36 = 10;
              while (v36 - 7 < (unint64_t)(v27 + 63) >> 6)
              {
                unint64_t v28 = *(void *)(v25 + 8 * v36++);
                if (v28)
                {
                  uint64_t v29 = v36 - 8;
                  goto LABEL_12;
                }
              }
LABEL_32:
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_33;
            }
            uint64_t v29 = 2;
          }
        }
LABEL_12:
        unint64_t v30 = __clz(__rbit64(v28));
        uint64_t v31 = v30 + (v29 << 6);
        if (v31 == v27) {
          goto LABEL_32;
        }
        if (v31 < 0 || v31 >= v27) {
          goto LABEL_45;
        }
        if (((*(void *)(v25 + 56 + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
          goto LABEL_46;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        NSString v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v33 = (id)TUHandleForIDSCanonicalAddress();

        if (v33)
        {
          id v34 = [objc_allocWithZone((Class)TUConversationMember) initWithHandle:v33];
          swift_unknownObjectRelease();

          id v21 = v72;
          if (v34)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          swift_unknownObjectRelease();
          id v21 = v72;
        }
LABEL_33:
        if (a2 == v21)
        {
          swift_bridgeObjectRelease();
          id v37 = (void *)v73;
          id v19 = v60;
          uint64_t v18 = &selRef_generatorDescriptor;
          goto LABEL_36;
        }
      }
    }
    swift_bridgeObjectRelease();
    id v37 = _swiftEmptyArrayStorage;
LABEL_36:
    swift_bridgeObjectRelease();
    sub_10024E278((unint64_t)v37);
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setTuConversationMembers:isa];

    [v19 setVideo:1];
    [v19 setVideoEnabled:1];
    a3 = v64;
    a6 = v65;
    a5 = v62;
    uint64_t v16 = v61;
  }
  id v39 = [objc_allocWithZone((Class)CSDMessagingConversationMessage) v18[363]];
  id v40 = v39;
  if (v39) {
    [v39 setAvMode:2];
  }
  objc_msgSend(v19, "setMessage:", v40, v60);
  v16[2](v70, a5, v69);
  char v41 = *a6;
  id result = (id)TUCopyIDSCanonicalAddressForHandle();
  if (result)
  {
    uint64_t v43 = result;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    Date.init()();
    id v72 = v40;
    uint64_t v47 = a3;
    if (v19)
    {
      uint64_t v48 = sub_100342308(v19);
      unint64_t v50 = v49;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v50 = 0xF000000000000000;
    }
    uint64_t v51 = v66;
    sub_1001F0530(v66, 1, 1, v69);
    id v52 = objc_allocWithZone((Class)IDSGroupSessionParticipantUpdate);
    id v53 = sub_100308948(v70, v41, v47, v44, v46, 1, 0, 0, v68, 0, 0xF000000000000000, v48, v50, 0, 0, v51);
    id v54 = [objc_allocWithZone((Class)IDSMessageContext) init];
    *a6 = 0;
    uint64_t v55 = (void *)swift_allocObject();
    int64_t v56 = v67;
    v55[2] = v67;
    v55[3] = v53;
    v55[4] = v54;
    v56;
    id v57 = v53;
    id v58 = v54;
    sub_100307068((uint64_t)sub_1003097BC, (uint64_t)v55);

    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100306FB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t)[a1 respondsToSelector:"service:account:receivedGroupSessionParticipantUpdate:context:"];
  if (result)
  {
    uint64_t v9 = *(void *)(a2 + OBJC_IVAR___CSDSimulatedIDSService_idsService);
    swift_unknownObjectRetain();
    id v10 = sub_100307580();
    [a1 service:v9 account:v10 receivedGroupSessionParticipantUpdate:a3 context:a4];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100307068(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1001FCCD0();
  type metadata accessor for NSFastEnumerationIterator();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v23 = OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues;
  uint64_t v24 = v2;
  id v7 = [*(id *)(v2 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) keyEnumerator];
  NSEnumerator.makeIterator()();

  NSFastEnumerationIterator.next()();
  if (v32)
  {
    uint64_t v8 = (uint64_t *)&unk_100589670;
    do
    {
      sub_1001F75B4(&v31, &aBlock);
      sub_1001F081C(v8);
      if (swift_dynamicCast())
      {
        uint64_t v9 = v30;
        id v10 = [*(id *)(v24 + v23) objectForKey:v30];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = (void *)swift_allocObject();
          _OWORD v12[2] = a1;
          id v12[3] = a2;
          v12[4] = v9;
          unint64_t v28 = sub_100308D38;
          uint64_t v29 = v12;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          char v26 = sub_1002C2C88;
          uint64_t v27 = &unk_100514120;
          uint64_t v13 = v3;
          uint64_t v14 = v8;
          uint64_t v15 = _Block_copy(&aBlock);
          swift_retain();
          swift_unknownObjectRetain();
          static DispatchQoS.unspecified.getter();
          unint64_t v30 = _swiftEmptyArrayStorage;
          sub_1001F5FE0();
          sub_1001F081C((uint64_t *)&unk_100584B00);
          sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          uint64_t v16 = v15;
          uint64_t v8 = v14;
          uint64_t v3 = v13;
          _Block_release(v16);
          swift_unknownObjectRelease();

          sub_1001F7664();
          v17();
          sub_1001F7664();
          v18();
          swift_release();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      NSFastEnumerationIterator.next()();
    }
    while (v32);
  }
  sub_1001F7664();
  return v19();
}

uint64_t sub_100307488()
{
  return swift_unknownObjectRetain();
}

id sub_100307580()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account;
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account);
  id v10 = v9;
  if (v9 == (void *)1)
  {
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager)
                    + OBJC_IVAR___CSDSimulatedConversationManager_localCallerID);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    UUID.init()();
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    id v17 = objc_allocWithZone((Class)IDSAccount);
    id v10 = sub_100308BFC(v12, v13, v14, v16, 0x6574616C756D6973, 0xE900000000000064);
    uint64_t v18 = *(void **)(v1 + v8);
    *(void *)(v1 + v8) = v10;
    id v19 = v10;
    sub_100308CD8(v18);
  }
  sub_100308CE8(v9);
  return v10;
}

void sub_10030773C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account);
  *(void *)(v1 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account) = a1;
  sub_100308CD8(v2);
}

uint64_t sub_1003077B4()
{
  sub_10030796C();
  sub_100252B78();
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_100307854()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1003078B8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager)
                 + OBJC_IVAR___CSDSimulatedConversationManager_localCallerID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10030796C()
{
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  uint64_t v2 = (void *)(*(void *)(v0 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager)
                + OBJC_IVAR___CSDSimulatedConversationManager_localCallerID);
  uint64_t v3 = v2[1];
  *(void *)(inited + 32) = *v2;
  *(void *)(inited + 40) = v3;
  swift_bridgeObjectRetain();
  return sub_1002DF568(inited);
}

id sub_100307B00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) setObject:a2 forKey:a1];
}

id sub_100307BA4(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) removeObjectForKey:a1];
}

void sub_100308040(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  a3[2](a3, 0);

  _Block_release(a3);
}

void sub_100308110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v12 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v12 - 8);
  sub_100202310();
  UUID.init(uuidString:)();
  uint64_t v13 = type metadata accessor for UUID();
  if (sub_1001F758C(v10, 1, v13) == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = *(void **)(v9 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager);
    id v15 = objc_allocWithZone((Class)type metadata accessor for SimulatedIDSGroupSessionProvider());
    swift_bridgeObjectRetain();
    id v16 = a9;
    id v17 = a7;
    id v18 = v14;
    sub_1003024C8();
  }
}

id sub_100308334()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SimulatedIDSService()
{
  return self;
}

void sub_100308678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class, void))a5)[2](a5, isa, 0);

  _Block_release(a5);
}

void sub_100308788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void, void))
{
  a8[2](a8, 1, 0);

  _Block_release(a8);
}

id sub_1003088E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithService:v3];

  return v4;
}

id sub_100308948(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  v17.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v19.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v36 = a1;
  if (a11 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(a10, a11);
  }
  if (a13 >> 60 == 15)
  {
    Class v21 = 0;
  }
  else
  {
    Class v21 = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(a12, a13);
  }
  if (a14)
  {
    sub_1001F6204(0, (unint64_t *)&unk_100589680);
    v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a15)
    {
LABEL_9:
      v23.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
    v22.super.Class isa = 0;
    if (a15) {
      goto LABEL_9;
    }
  }
  v23.super.Class isa = 0;
LABEL_12:
  uint64_t v24 = type metadata accessor for UUID();
  Class v25 = 0;
  if (sub_1001F758C(a16, 1, v24) != 1)
  {
    Class v25 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a16, v24);
  }
  LOBYTE(v29) = a8 & 1;
  id v26 = [v33 initWithGroupUUID:v17.super.isa isInitiator:a2 & 1 participantIdentifier:a3 participantDestinationID:v18 participantUpdateType:a6 participantUpdateSubtype:a7 fromServer:v29 serverDate:v19.super.isa participantData:isa clientContextData:v21 members:v22.super.isa participantIDs:v23.super.isa relaySessionID:v25];

  uint64_t v27 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a9, v27);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v36, v24);
  return v26;
}

id sub_100308BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v10 = 0;
    if (a6) {
      goto LABEL_4;
    }
LABEL_7:
    NSString v11 = 0;
    goto LABEL_8;
  }
  NSString v9 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_7;
  }
LABEL_4:
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_8:
  id v12 = [v6 initWithLoginID:v9 uniqueID:v10 serviceName:v11];

  return v12;
}

void sub_100308CD8(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_100308CE8(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_100308CF8()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100308D38()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100308D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100308D78()
{
  return swift_release();
}

id sub_100308D80(uint64_t a1, void *a2, uint64_t a3, __int16 a4)
{
  return sub_100306884(a1, a2, a3, a4 & 0x101, *(char **)(v4 + 16), *(char **)(v4 + 24), *(void **)(v4 + 32));
}

uint64_t sub_100308D94(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100377734(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_100308F40(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t result = sub_10037771C(*(void *)(*(void *)(v2 + 48) + 8 * i));
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

void *sub_1003090B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v34[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_100206FA0();
                    return (void *)v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v35[0] = a1;
    v35[1] = v6;
    long long v35[2] = v34[0];
    v35[3] = v4;
    v35[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      uint64_t v27 = (char *)v34 - v26;
      memcpy((char *)v34 - v26, (const void *)(v2 + 56), v24);
      sub_10030945C((uint64_t)v27, v23, v2, v21, v35);
      uint64_t v29 = v28;
      swift_release();
      sub_100206FA0();
      return (void *)v29;
    }
    else
    {
      unint64_t v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v2 + 56), v24);
      sub_10030945C((uint64_t)v30, v23, v2, v21, v35);
      uint64_t v32 = v31;
      swift_release();
      sub_100206FA0();
      swift_slowDealloc();
      return (void *)v32;
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
}

void sub_10030945C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    int64_t v11 = a5[3];
    unint64_t v12 = a5[4];
    if (!v12) {
      break;
    }
    uint64_t v13 = (v12 - 1) & v12;
    unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
LABEL_14:
    uint64_t v21 = *(void *)(*(void *)(*a5 + 48) + 8 * v14);
    a5[3] = v11;
    a5[4] = v13;
    uint64_t v22 = static Hasher._hash(seed:_:)();
    uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1 << v24;
    if (((1 << v24) & *(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v27 = *(void *)(a3 + 48);
      if (*(void *)(v27 + 8 * v24) == v21)
      {
LABEL_21:
        uint64_t v30 = *(void *)(a1 + 8 * v25);
        *(void *)(a1 + 8 * v25) = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v9--, 1)) {
            goto LABEL_36;
          }
          if (!v9) {
            return;
          }
        }
      }
      else
      {
        for (unint64_t i = v24 + 1; ; unint64_t i = v29 + 1)
        {
          unint64_t v29 = i & ~v23;
          if (((*(void *)(v10 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v29) == v21)
          {
            unint64_t v25 = v29 >> 6;
            uint64_t v26 = 1 << v29;
            goto LABEL_21;
          }
        }
      }
    }
  }
  int64_t v15 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    int64_t v16 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v17 = a5[3];
    if (v15 >= v16) {
      goto LABEL_34;
    }
    uint64_t v18 = a5[1];
    unint64_t v19 = *(void *)(v18 + 8 * v15);
    if (v19) {
      goto LABEL_13;
    }
    int64_t v20 = v11 + 2;
    int64_t v17 = v11 + 1;
    if (v11 + 2 >= v16) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v20);
    if (!v19)
    {
      int64_t v17 = v11 + 2;
      if (v11 + 3 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * (v11 + 3));
      if (v19)
      {
        int64_t v15 = v11 + 3;
        goto LABEL_13;
      }
      int64_t v20 = v11 + 4;
      int64_t v17 = v11 + 3;
      if (v11 + 4 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v20);
      if (!v19)
      {
        int64_t v15 = v11 + 5;
        int64_t v17 = v11 + 4;
        if (v11 + 5 >= v16) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v18 + 8 * v15);
        if (!v19)
        {
          int64_t v32 = v11 + 6;
          while (v32 < v16)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v32++);
            if (v19)
            {
              int64_t v15 = v32 - 1;
              goto LABEL_13;
            }
          }
          int64_t v17 = v16 - 1;
LABEL_34:
          a5[3] = v17;
          a5[4] = 0;
          swift_retain();
          sub_1002E54B4();
          return;
        }
        goto LABEL_13;
      }
    }
    int64_t v15 = v20;
LABEL_13:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    int64_t v11 = v15;
    goto LABEL_14;
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1003096B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100587350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100309720(uint64_t *a1)
{
  return sub_1003064A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100309744(void *a1)
{
  return sub_100306FB0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100309764()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10030979C(uint64_t *a1)
{
}

unint64_t sub_1003097A4(uint64_t a1, uint64_t a2)
{
  return sub_100305F34(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1003097B0(uint64_t a1, uint64_t a2)
{
  return sub_1003060F0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1003097CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a3 + 8))();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    while (1)
    {
      sub_10020ED28(v5, (uint64_t)v24);
      sub_100204074(v24, v24[3]);
      uint64_t v6 = sub_100309ACC();
      uint64_t v8 = v7(v6);
      uint64_t v10 = v9;
      if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
      {
        swift_bridgeObjectRelease_n();
        sub_10020ED28((uint64_t)v24, (uint64_t)v23);
        goto LABEL_17;
      }
      char v13 = sub_100309AEC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10020ED28((uint64_t)v24, (uint64_t)v23);
      if (v13) {
        goto LABEL_17;
      }
      sub_100204074(v23, v23[3]);
      uint64_t v14 = sub_100309ACC();
      uint64_t v16 = v15(v14);
      uint64_t v18 = v17;
      if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
        break;
      }
      char v21 = sub_100309AEC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)v23);
      if (v21) {
        goto LABEL_18;
      }
      sub_1002018DC((uint64_t)v24);
      v5 += 40;
      if (!--v4) {
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_17:
    sub_1002018DC((uint64_t)v23);
LABEL_18:
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v24);
    return 1;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_10030996C()
{
  return sub_100309990();
}

uint64_t sub_100309990()
{
  id v1 = [v0 bundleIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_1003099E8(uint64_t a1)
{
  id v2 = [v1 entriesForContact:a1];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100309A8C();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_10025043C();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100309A68(uint64_t a1)
{
  return sub_1003099E8(a1);
}

unint64_t sub_100309A8C()
{
  unint64_t result = qword_1005861D0;
  if (!qword_1005861D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005861D0);
  }
  return result;
}

uint64_t sub_100309ACC()
{
  return v0;
}

uint64_t sub_100309AEC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id sub_100309B14(void *a1)
{
  swift_getObjectType();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 init];
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v9 = v7;
  objc_msgSend(v9, "setDeviceFamily:", objc_msgSend(ObjCClassFromMetadata, "currentDeviceFamily"));
  UUID.init()();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  [v9 setWindowUUID:isa];

  sub_100202D8C();
  Class v11 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  [a1 contentRect];
  id v16 = objc_msgSend(self, "valueWithRect:", v12, v13, v14, v15);
  [a1 pointPixelScale];
  Class v17 = Float._bridgeToObjectiveC()().super.super.isa;
  [v9 setResolutionAttributesWithContentScale:v11 contentRect:v16 displayScale:v17];

  id v18 = [a1 contentType];
  if (v18)
  {
    if (v18 == (id)1)
    {
      [v9 setStyle:2];
    }
    else
    {
      if (qword_1005839E0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_1001F5F88(v19, (uint64_t)qword_100594B98);
      id v20 = a1;
      char v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        id v28 = [v20 contentType];
        uint64_t v24 = String.init<A>(reflecting:)();
        id v28 = (id)sub_1002344D8(v24, v25, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unknown AVCScreenCaptureAttributesContentType: %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  else
  {
    [v9 setStyle:3];
  }
  objc_msgSend(v9, "setWindowed:", objc_msgSend(v9, "style") == (id)3);
  [a1 displayID];
  Class v26 = UInt32._bridgeToObjectiveC()().super.super.isa;
  [v9 setDisplayID:v26];

  return v9;
}

id sub_100309F78(void *a1)
{
  objc_allocWithZone((Class)NSUserDefaults);
  id v3 = v1;
  id v4 = sub_100204C3C(0xD000000000000017, 0x8000000100487660);
  if (!v4) {
    id v4 = [self standardUserDefaults];
  }
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 stringForKey:v6];

  if (v7)
  {
    unint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    unint64_t v8 = 0xD00000000000004BLL;
    uint64_t v10 = 0x8000000100487680;
  }
  swift_getObjectType();

  id v11 = sub_10030A0FC(a1, v8, v10);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v11;
}

id sub_10030A0FC(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  unint64_t v8 = &v7[OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat];
  *(void *)unint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  v11.receiver = v7;
  v11.super_class = v3;
  id v9 = objc_msgSendSuper2(&v11, "initWithQueue:", a1);

  return v9;
}

uint64_t sub_10030A170(void *a1)
{
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[a1 remoteHandle];
  if (result)
  {
    id v7 = (void *)result;
    id v8 = [(id)result value];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    void v16[2] = v9;
    void v16[3] = v11;
    uint64_t v12 = *(void *)(v1 + OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat);
    uint64_t v13 = *(void *)(v1 + OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat + 8);
    v16[0] = v12;
    v16[1] = v13;
    uint64_t v14 = type metadata accessor for Locale();
    sub_1001F0530((uint64_t)v5, 1, 1, v14);
    sub_10030A394();
    swift_bridgeObjectRetain();
    StringProtocol.range<A>(of:options:range:locale:)();
    LOBYTE(v13) = v15;
    sub_10030A3E0((uint64_t)v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      [a1 setFilteredOutReason:9];
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DemoModeCallFilter()
{
  return self;
}

unint64_t sub_10030A394()
{
  unint64_t result = qword_10058B080;
  if (!qword_10058B080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058B080);
  }
  return result;
}

uint64_t sub_10030A3E0(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_10058BB70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10030A440(uint64_t a1, uint64_t a2)
{
  unint64_t isEscapingClosureAtFileLocation = (unint64_t)v2;
  uint64_t v6 = sub_1002393DC();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = sub_1002393DC();
  *(void *)(v7 + 16) = sub_10030A7D8;
  *(void *)(v7 + 24) = v6;
  unint64_t v25 = sub_100239094;
  uint64_t v26 = v7;
  char v21 = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = sub_10039E628;
  uint64_t v24 = &unk_100514230;
  id v8 = _Block_copy(&v21);
  swift_retain();
  swift_release();
  id v9 = [v2 callPassingTest:v8];
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (!v9)
  {
LABEL_6:
    uint64_t v13 = sub_1002393DC();
    *(void *)(v13 + 16) = a1;
    *(void *)(v13 + 24) = a2;
    uint64_t v14 = sub_1002393DC();
    *(void *)(v14 + 16) = sub_10030A950;
    *(void *)(v14 + 24) = v13;
    unint64_t v25 = sub_10030A980;
    uint64_t v26 = v14;
    char v21 = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    uint64_t v23 = sub_10039E628;
    uint64_t v24 = &unk_1005142A8;
    char v15 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    id v16 = [(id)isEscapingClosureAtFileLocation bargeCallsPassingTest:v15];
    _Block_release(v15);
    unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_1002F1DE0();
      unint64_t isEscapingClosureAtFileLocation = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(isEscapingClosureAtFileLocation >> 62))
      {
        if (*(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_9:
          sub_1002DE19C(0, (isEscapingClosureAtFileLocation & 0xC000000000000001) == 0, isEscapingClosureAtFileLocation);
          if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(isEscapingClosureAtFileLocation + 32);
          }
          id v18 = v17;
          swift_bridgeObjectRelease();
          self;
          uint64_t v11 = swift_dynamicCastObjCClass();
          swift_release();
          if (!v11) {

          }
          goto LABEL_17;
        }
LABEL_16:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v11 = 0;
LABEL_17:
        uint64_t v12 = sub_10030A950;
        goto LABEL_18;
      }
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {

    goto LABEL_6;
  }
  uint64_t v11 = v10;
  swift_release();
  uint64_t v12 = 0;
LABEL_18:
  sub_100208490((uint64_t)v12);
  return v11;
}

uint64_t sub_10030A7D8(void *a1)
{
  return sub_10030A818(a1, *(uint64_t (**)(uint64_t))(v1 + 16)) & 1;
}

uint64_t sub_10030A800(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10030A810()
{
  return swift_release();
}

uint64_t sub_10030A818(void *a1, uint64_t (*a2)(uint64_t))
{
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = a1;
    char v7 = a2(v5);

    return v7 & 1;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    id v9 = [a1 description];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10030A950(void *a1)
{
  return sub_10030A818(a1, *(uint64_t (**)(uint64_t))(v1 + 16)) & 1;
}

id sub_10030A9B8()
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned __int8 v4 = sub_10030B0D8(v2, v3, v1, (SEL *)&selRef_cellularDataEnabledForBundleId_);

    return (id)(v4 & 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10030AA2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TinCanIDSProviderDelegateCapabilities();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10030AA84()
{
  return sub_10030B024(type metadata accessor for TinCanIDSProviderDelegateCapabilities);
}

uint64_t type metadata accessor for TinCanIDSProviderDelegateCapabilities()
{
  return self;
}

id sub_10030AAC0()
{
  return sub_10030AFA8((uint64_t)FTNetworkSupport_ptr, (SEL *)&selRef_wiFiActiveAndReachable);
}

id sub_10030AAD4()
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    id v2 = (id)TUPreferredFaceTimeBundleIdentifier();
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    LOBYTE(v2) = sub_10030B0D8(v3, v5, v1, (SEL *)&selRef_wifiAllowedForBundleId_);
    return (id)(v2 & 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10030AB68()
{
  return sub_10030AFA8((uint64_t)FTNetworkSupport_ptr, (SEL *)&selRef_dataActiveAndReachable);
}

id sub_10030AB7C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v27 = v2;
  __chkstk_darwin(v3);
  sub_1001F2514();
  uint64_t v6 = v5 - v4;
  uint64_t v26 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1001F2514();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_1001F2514();
  uint64_t v19 = v18 - v17;
  v29.receiver = v0;
  v29.super_class = (Class)type metadata accessor for IDSProviderDelegateCapabilities();
  id v20 = objc_msgSendSuper2(&v29, "init");
  sub_1001F07DC();
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v19, enum case for DispatchQoS.QoSClass.background(_:), v13);
  id v21 = v20;
  uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v13);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  aBlock[4] = sub_10030B0B8;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_1005142F8;
  uint64_t v24 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v6, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v26);
  swift_release();
  return v21;
}

uint64_t sub_10030AE48(void *a1)
{
  id v2 = sub_10030AAD4();
  return (*(uint64_t (**)(id))((swift_isaMask & *a1) + 0x68))(v2);
}

id sub_10030AF94()
{
  return sub_10030AFA8((uint64_t)FTDeviceSupport_ptr, (SEL *)&selRef_nonWifiFaceTimeAvailable);
}

id sub_10030AFA8(uint64_t a1, SEL *a2)
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result *a2];

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10030B00C()
{
  return sub_10030B024(type metadata accessor for IDSProviderDelegateCapabilities);
}

id sub_10030B024(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for IDSProviderDelegateCapabilities()
{
  return self;
}

uint64_t sub_10030B080()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10030B0B8()
{
  return sub_10030AE48(*(void **)(v0 + 16));
}

uint64_t sub_10030B0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10030B0D0()
{
  return swift_release();
}

id sub_10030B0D8(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a3, *a4, v6);

  return v7;
}

id sub_10030B134()
{
  swift_getObjectType();
  id result = [self sharedInstance];
  if (result)
  {
    id v1 = sub_10030B1B0(result);
    swift_deallocPartialClassInstance();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10030B1B0(void *a1)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1002DFAA0((unint64_t)_swiftEmptyArrayStorage);
    objc_super v3 = v7;
  }
  else
  {
    objc_super v3 = &_swiftEmptySetSingleton;
  }
  uint64_t v4 = (char *)objc_allocWithZone(v1);
  *(void *)&v4[OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences] = v3;
  v8.receiver = v4;
  v8.super_class = v1;
  id v5 = objc_msgSendSuper2(&v8, "init");

  return v5;
}

void sub_10030B274(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v26 = *(void *)(a2 + 16);
    if (v26)
    {
      uint64_t v4 = a2 + 32;
      id v5 = a3;
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      uint64_t v25 = a2 + 32;
LABEL_4:
      id v7 = (uint64_t *)(v4 + 16 * v6);
      uint64_t v8 = *v7;
      char v28 = *((unsigned char *)v7 + 8);
      if ((*v7 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        sub_10030BB0C();
        sub_10030BB4C();
        Set.Iterator.init(_cocoa:)();
        uint64_t v8 = v32;
        uint64_t v30 = v33;
        uint64_t v9 = v34;
        int64_t v10 = v35;
        unint64_t v11 = v36;
      }
      else
      {
        uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
        uint64_t v30 = v8 + 56;
        uint64_t v9 = ~v12;
        uint64_t v13 = -v12;
        if (v13 < 64) {
          uint64_t v14 = ~(-1 << v13);
        }
        else {
          uint64_t v14 = -1;
        }
        unint64_t v11 = v14 & *(void *)(v8 + 56);
        swift_bridgeObjectRetain();
        int64_t v10 = 0;
      }
      uint64_t v27 = v6 + 1;
      int64_t v15 = (unint64_t)(v9 + 64) >> 6;
      while (1)
      {
        int64_t v16 = v10;
        if (v8 < 0)
        {
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_38;
          }
          sub_10030BB0C();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v19 = v31;
          swift_unknownObjectRelease();
          if (!v31) {
            goto LABEL_38;
          }
        }
        else
        {
          if (v11)
          {
            unint64_t v17 = __clz(__rbit64(v11));
            v11 &= v11 - 1;
            unint64_t v18 = v17 | (v10 << 6);
          }
          else
          {
            int64_t v20 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              return;
            }
            if (v20 >= v15) {
              goto LABEL_38;
            }
            unint64_t v21 = *(void *)(v30 + 8 * v20);
            ++v10;
            if (!v21)
            {
              int64_t v10 = v16 + 2;
              if (v16 + 2 >= v15) {
                goto LABEL_38;
              }
              unint64_t v21 = *(void *)(v30 + 8 * v10);
              if (!v21)
              {
                int64_t v10 = v16 + 3;
                if (v16 + 3 >= v15) {
                  goto LABEL_38;
                }
                unint64_t v21 = *(void *)(v30 + 8 * v10);
                if (!v21)
                {
                  int64_t v10 = v16 + 4;
                  if (v16 + 4 >= v15) {
                    goto LABEL_38;
                  }
                  unint64_t v21 = *(void *)(v30 + 8 * v10);
                  if (!v21)
                  {
                    int64_t v22 = v16 + 5;
                    while (v22 < v15)
                    {
                      unint64_t v21 = *(void *)(v30 + 8 * v22++);
                      if (v21)
                      {
                        int64_t v10 = v22 - 1;
                        goto LABEL_30;
                      }
                    }
LABEL_38:
                    uint64_t v4 = v25;
                    uint64_t v6 = v27;
                    sub_100206FA0();
                    if (v27 != v26) {
                      goto LABEL_4;
                    }

LABEL_43:
                    swift_bridgeObjectRelease();
                    return;
                  }
                }
              }
            }
LABEL_30:
            unint64_t v11 = (v21 - 1) & v21;
            unint64_t v18 = __clz(__rbit64(v21)) + (v10 << 6);
          }
          id v19 = *(id *)(*(void *)(v8 + 48) + 8 * v18);
          if (!v19) {
            goto LABEL_38;
          }
        }
        id v23 = [v19 handleType];
        if (v23 == [v5 type])
        {
          if ([v19 notificationStyles])
          {

            goto LABEL_42;
          }
          unint64_t v24 = (unint64_t)[v19 notificationStyles];

          if ((a1 & ~v24) == 0)
          {

            sub_100206FA0();
            goto LABEL_43;
          }
          if ((v28 & 1) == 0)
          {

LABEL_42:
            sub_100206FA0();
            goto LABEL_43;
          }
        }
        else
        {
        }
      }
    }
  }
}

uint64_t sub_10030B674(void *a1, void *a2, uint64_t a3)
{
  sub_1001F081C(&qword_1005897C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048FB00;
  *(void *)(inited + 32) = *(void *)(v3 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(unsigned char *)(inited + 40) = 0;
  swift_bridgeObjectRetain();
  id v8 = [a1 invitationPreferences];
  sub_10030BB0C();
  sub_10030BB4C();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(inited + 48) = v9;
  *(unsigned char *)(inited + 56) = 0;
  sub_10030B274(a3, inited, a2);
  LOBYTE(a2) = v10;
  swift_setDeallocating();
  sub_100252A6C();
  return a2 & 1;
}

uint64_t sub_10030B7D0(void *a1, void *a2, uint64_t a3)
{
  sub_1001F081C(&qword_1005897C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1004904F0;
  *(void *)(inited + 32) = *(void *)(v3 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(unsigned char *)(inited + 40) = 0;
  *(void *)(inited + 48) = a3;
  *(unsigned char *)(inited + 56) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = [a1 invitationPreferences];
  sub_10030BB0C();
  sub_10030BB4C();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(inited + 64) = v9;
  *(unsigned char *)(inited + 72) = 0;
  sub_10030B274(4, inited, a2);
  LOBYTE(a2) = v10;
  swift_setDeallocating();
  sub_100252A6C();
  return a2 & 1;
}

BOOL sub_10030B980(void *a1, void *a2)
{
  sub_1001F081C(&qword_1005897C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048FB00;
  *(void *)(inited + 32) = *(void *)(v2 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(unsigned char *)(inited + 40) = 0;
  swift_bridgeObjectRetain();
  id v6 = [a1 invitationPreferences];
  sub_10030BB0C();
  sub_10030BB4C();
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(inited + 48) = v7;
  *(unsigned char *)(inited + 56) = 0;
  sub_10030B274(8, inited, a2);
  LOBYTE(a2) = v8;
  swift_setDeallocating();
  sub_100252A6C();
  return (a2 & 1) == 0;
}

uint64_t type metadata accessor for ConversationInvitationResolver()
{
  return self;
}

unint64_t sub_10030BB0C()
{
  unint64_t result = qword_100585948;
  if (!qword_100585948)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100585948);
  }
  return result;
}

unint64_t sub_10030BB4C()
{
  unint64_t result = qword_100585950;
  if (!qword_100585950)
  {
    sub_10030BB0C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585950);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConversationInvitationResolver.InvitationPreferencesPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030BC68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationInvitationResolver.InvitationPreferencesPriority()
{
  return &type metadata for ConversationInvitationResolver.InvitationPreferencesPriority;
}

unint64_t sub_10030BCA4()
{
  unint64_t result = qword_1005897C8;
  if (!qword_1005897C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005897C8);
  }
  return result;
}

void *sub_10030BCF0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession();
    sub_1003120EC((unint64_t *)&qword_100589830, (void (*)(uint64_t))&type metadata accessor for ActivitySession);
    unint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v32;
    uint64_t v37 = v33;
    uint64_t v5 = v34;
    int64_t v6 = v35;
    unint64_t v7 = v36;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & v9;
    unint64_t result = (void *)swift_bridgeObjectRetain();
    int64_t v6 = 0;
  }
  int64_t v28 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v13 = (v7 - 1) & v7;
      unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v15 = v6;
      goto LABEL_29;
    }
    int64_t v18 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v18 >= v28) {
      goto LABEL_42;
    }
    unint64_t v19 = *(void *)(v37 + 8 * v18);
    int64_t v15 = v6 + 1;
    if (!v19)
    {
      int64_t v15 = v6 + 2;
      if (v6 + 2 >= v28) {
        goto LABEL_42;
      }
      unint64_t v19 = *(void *)(v37 + 8 * v15);
      if (!v19)
      {
        int64_t v15 = v6 + 3;
        if (v6 + 3 >= v28) {
          goto LABEL_42;
        }
        unint64_t v19 = *(void *)(v37 + 8 * v15);
        if (!v19)
        {
          int64_t v15 = v6 + 4;
          if (v6 + 4 >= v28) {
            goto LABEL_42;
          }
          unint64_t v19 = *(void *)(v37 + 8 * v15);
          if (!v19)
          {
            int64_t v15 = v6 + 5;
            if (v6 + 5 >= v28) {
              goto LABEL_42;
            }
            unint64_t v19 = *(void *)(v37 + 8 * v15);
            if (!v19)
            {
              int64_t v20 = v6 + 6;
              while (v20 < v28)
              {
                unint64_t v19 = *(void *)(v37 + 8 * v20++);
                if (v19)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_28;
                }
              }
LABEL_42:
              sub_100206FA0();

              return v12;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_29:
    id v17 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
    if (!v17) {
      goto LABEL_42;
    }
    while (1)
    {
      id v21 = [self activitySessionWithCSDConversationActivitySession:v17 fromConversation:a2 forStorage:1];
      int64_t v22 = (void *)dispatch thunk of ActivitySession.activity.getter();
      id v23 = [v22 originator];

      if (!v23)
      {
        unint64_t result = [v21 activity];
        if (!result) {
          goto LABEL_44;
        }
        unint64_t v24 = result;
        [result setOriginatorHandle:0];
      }
      uint64_t v30 = sub_1001F6204(0, &qword_100589820);
      *(void *)&long long v29 = v21;

      if (v30)
      {
        sub_1001F75B4(&v29, v31);
        sub_1001F75B4(v31, &v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4ECC();
          uint64_t v12 = v26;
        }
        unint64_t v25 = v12[2];
        if (v25 >= v12[3] >> 1)
        {
          sub_1003A4ECC();
          uint64_t v12 = v27;
        }
        _OWORD v12[2] = v25 + 1;
        unint64_t result = sub_1001F75B4(&v29, &v12[4 * v25 + 4]);
      }
      else
      {
        unint64_t result = (void *)sub_10021E23C((uint64_t)&v29, (uint64_t *)&unk_100584CA0);
      }
      int64_t v6 = v15;
      unint64_t v7 = v13;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v16 = __CocoaSet.Iterator.next()();
      if (v16)
      {
        *(void *)&long long v29 = v16;
        type metadata accessor for ActivitySession();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v17 = *(id *)&v31[0];
        swift_unknownObjectRelease();
        int64_t v15 = v6;
        uint64_t v13 = v7;
        if (v17) {
          continue;
        }
      }
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_10030C130(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&qword_100588540);
    sub_100210D5C((unint64_t *)&qword_100586D48, (unint64_t *)&qword_100588540);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v32 = v28;
    uint64_t v4 = v29;
    int64_t v3 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v32 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & v7;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v23 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v3 << 6);
      int64_t v13 = v3;
      goto LABEL_29;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v23) {
      goto LABEL_39;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    int64_t v13 = v3 + 1;
    if (!v17)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v23) {
        goto LABEL_39;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v23) {
          goto LABEL_39;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v23) {
            goto LABEL_39;
          }
          unint64_t v17 = *(void *)(v32 + 8 * v13);
          if (!v17)
          {
            int64_t v13 = v3 + 5;
            if (v3 + 5 >= v23) {
              goto LABEL_39;
            }
            unint64_t v17 = *(void *)(v32 + 8 * v13);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v23)
              {
                unint64_t v17 = *(void *)(v32 + 8 * v18++);
                if (v17)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_39:
              sub_100206FA0();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    id v15 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_39;
    }
    while (1)
    {
      id v19 = [self participantWithCSDConversationParticipant:v15];
      uint64_t v25 = sub_1001F6204(0, &qword_100589818);
      *(void *)&long long v24 = v19;

      if (v25)
      {
        sub_1001F75B4(&v24, v26);
        sub_1001F75B4(v26, &v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4ECC();
          uint64_t v10 = v21;
        }
        unint64_t v20 = v10[2];
        if (v20 >= v10[3] >> 1)
        {
          sub_1003A4ECC();
          uint64_t v10 = v22;
        }
        v10[2] = v20 + 1;
        uint64_t result = (uint64_t)sub_1001F75B4(&v24, &v10[4 * v20 + 4]);
      }
      else
      {
        uint64_t result = sub_10021E23C((uint64_t)&v24, (uint64_t *)&unk_100584CA0);
      }
      int64_t v3 = v13;
      unint64_t v5 = v11;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = __CocoaSet.Iterator.next()();
      if (v14)
      {
        *(void *)&long long v24 = v14;
        sub_1001F6204(0, (unint64_t *)&qword_100588540);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = *(id *)&v26[0];
        swift_unknownObjectRelease();
        int64_t v13 = v3;
        uint64_t v11 = v5;
        if (v15) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10030C500(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v32 = v28;
    uint64_t v4 = v29;
    int64_t v3 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v32 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & v7;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v23 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v3 << 6);
      int64_t v13 = v3;
      goto LABEL_29;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v23) {
      goto LABEL_39;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    int64_t v13 = v3 + 1;
    if (!v17)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v23) {
        goto LABEL_39;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v23) {
          goto LABEL_39;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v23) {
            goto LABEL_39;
          }
          unint64_t v17 = *(void *)(v32 + 8 * v13);
          if (!v17)
          {
            int64_t v13 = v3 + 5;
            if (v3 + 5 >= v23) {
              goto LABEL_39;
            }
            unint64_t v17 = *(void *)(v32 + 8 * v13);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v23)
              {
                unint64_t v17 = *(void *)(v32 + 8 * v18++);
                if (v17)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_39:
              sub_100206FA0();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    id v15 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_39;
    }
    while (1)
    {
      id v19 = [self memberWithTUConversationMember:v15];
      uint64_t v25 = sub_1001F6204(0, &qword_100588918);
      *(void *)&long long v24 = v19;

      if (v25)
      {
        sub_1001F75B4(&v24, v26);
        sub_1001F75B4(v26, &v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4ECC();
          uint64_t v10 = v21;
        }
        unint64_t v20 = v10[2];
        if (v20 >= v10[3] >> 1)
        {
          sub_1003A4ECC();
          uint64_t v10 = v22;
        }
        v10[2] = v20 + 1;
        uint64_t result = (uint64_t)sub_1001F75B4(&v24, &v10[4 * v20 + 4]);
      }
      else
      {
        uint64_t result = sub_10021E23C((uint64_t)&v24, (uint64_t *)&unk_100584CA0);
      }
      int64_t v3 = v13;
      unint64_t v5 = v11;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = __CocoaSet.Iterator.next()();
      if (v14)
      {
        *(void *)&long long v24 = v14;
        sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = *(id *)&v26[0];
        swift_unknownObjectRelease();
        int64_t v13 = v3;
        uint64_t v11 = v5;
        if (v15) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10030C8D0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v32 = v28;
    uint64_t v4 = v29;
    int64_t v3 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v32 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & v7;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  int64_t v23 = (unint64_t)(v4 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v3 << 6);
      int64_t v13 = v3;
      goto LABEL_29;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v23) {
      goto LABEL_41;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    int64_t v13 = v3 + 1;
    if (!v17)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v23) {
        goto LABEL_41;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v23) {
          goto LABEL_41;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v23) {
            goto LABEL_41;
          }
          unint64_t v17 = *(void *)(v32 + 8 * v13);
          if (!v17)
          {
            int64_t v13 = v3 + 5;
            if (v3 + 5 >= v23) {
              goto LABEL_41;
            }
            unint64_t v17 = *(void *)(v32 + 8 * v13);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v23)
              {
                unint64_t v17 = *(void *)(v32 + 8 * v18++);
                if (v17)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_41:
              sub_100206FA0();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    id v15 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_41;
    }
    while (1)
    {
      id v19 = [self memberWithTUConversationMember:v15];
      if ([v15 validationSource] == (id)1) {
        [v19 setValidationSource:1];
      }
      uint64_t v25 = sub_1001F6204(0, &qword_100588918);
      *(void *)&long long v24 = v19;

      if (v25)
      {
        sub_1001F75B4(&v24, v26);
        sub_1001F75B4(v26, &v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4ECC();
          uint64_t v10 = v21;
        }
        unint64_t v20 = v10[2];
        if (v20 >= v10[3] >> 1)
        {
          sub_1003A4ECC();
          uint64_t v10 = v22;
        }
        v10[2] = v20 + 1;
        uint64_t result = (uint64_t)sub_1001F75B4(&v24, &v10[4 * v20 + 4]);
      }
      else
      {
        uint64_t result = sub_10021E23C((uint64_t)&v24, (uint64_t *)&unk_100584CA0);
      }
      int64_t v3 = v13;
      unint64_t v5 = v11;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = __CocoaSet.Iterator.next()();
      if (v14)
      {
        *(void *)&long long v24 = v14;
        sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = *(id *)&v26[0];
        swift_unknownObjectRelease();
        int64_t v13 = v3;
        uint64_t v11 = v5;
        if (v15) {
          continue;
        }
      }
      goto LABEL_41;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10030CCD0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v28;
    uint64_t v33 = v29;
    uint64_t v4 = v30;
    int64_t v3 = v31;
    unint64_t v5 = v32;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v33 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & v7;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v24 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v3 << 6);
      int64_t v13 = v3;
      goto LABEL_29;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v24) {
      goto LABEL_42;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v16);
    int64_t v13 = v3 + 1;
    if (!v17)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v24) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v33 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v24) {
          goto LABEL_42;
        }
        unint64_t v17 = *(void *)(v33 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v24) {
            goto LABEL_42;
          }
          unint64_t v17 = *(void *)(v33 + 8 * v13);
          if (!v17)
          {
            int64_t v13 = v3 + 5;
            if (v3 + 5 >= v24) {
              goto LABEL_42;
            }
            unint64_t v17 = *(void *)(v33 + 8 * v13);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v24)
              {
                unint64_t v17 = *(void *)(v33 + 8 * v18++);
                if (v17)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_42:
              sub_100206FA0();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    id v15 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_42;
    }
    while (1)
    {
      id v19 = [self handleWithTUHandle:v15];
      if (v19)
      {
        id v20 = v19;
        *((void *)&v26 + 1) = sub_1001F6204(0, &qword_100589828);
        *(void *)&long long v25 = v20;
      }
      else
      {
        long long v25 = 0u;
        long long v26 = 0u;
      }

      if (*((void *)&v26 + 1))
      {
        sub_1001F75B4(&v25, v27);
        sub_1001F75B4(v27, &v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4ECC();
          uint64_t v10 = v22;
        }
        unint64_t v21 = v10[2];
        if (v21 >= v10[3] >> 1)
        {
          sub_1003A4ECC();
          uint64_t v10 = v23;
        }
        v10[2] = v21 + 1;
        uint64_t result = (uint64_t)sub_1001F75B4(&v25, &v10[4 * v21 + 4]);
      }
      else
      {
        uint64_t result = sub_10021E23C((uint64_t)&v25, (uint64_t *)&unk_100584CA0);
      }
      int64_t v3 = v13;
      unint64_t v5 = v11;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = __CocoaSet.Iterator.next()();
      if (v14)
      {
        *(void *)&long long v25 = v14;
        sub_1001F6204(0, (unint64_t *)&unk_100586E00);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = *(id *)&v27[0];
        swift_unknownObjectRelease();
        int64_t v13 = v3;
        uint64_t v11 = v5;
        if (v15) {
          continue;
        }
      }
      goto LABEL_42;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10030D0B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_10030D198()
{
  uint64_t v2 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100202310();
  strcpy((char *)v12, "conversation-");
  HIWORD(v12[1]) = -4864;
  id v6 = [v0 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v12[0];
}

void sub_10030D29C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v6 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v70 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001FCC20();
  id v13 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if (v13)
  {
    v70[0] = v13;
    v70[1] = v0;
    id v14 = v13;
    id v15 = [v2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    id v19 = *(void (**)(void))(v11 + 8);
    sub_1003122CC();
    v19();
    sub_100311FF8(v16, v18, v14, (SEL *)&selRef_setUUIDString_);
    id v20 = [v2 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    sub_1003122CC();
    v19();
    sub_100311FF8(v21, v23, v14, (SEL *)&selRef_setGroupUUIDString_);
    id v24 = [v2 messagesGroupUUID];
    if (v24)
    {
      long long v25 = v24;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v26 = 1;
    }
    sub_1001F0530((uint64_t)v6, v26, 1, v9);
    sub_10021E124((uint64_t)v6, (uint64_t)v8);
    if (sub_1001F758C((uint64_t)v8, 1, v9) == 1)
    {
      sub_10021E23C((uint64_t)v8, (uint64_t *)&unk_100585580);
      NSString v27 = 0;
    }
    else
    {
      UUID.uuidString.getter();
      sub_1003122CC();
      v19();
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v14 setMessagesGroupUUIDString:v27];

    sub_1001F6204(0, &qword_10058AA40);
    id v28 = [v2 activitySessions];
    type metadata accessor for ActivitySession();
    sub_1003120EC((unint64_t *)&qword_100589830, (void (*)(uint64_t))&type metadata accessor for ActivitySession);
    uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v30 = v2;
    sub_10030BCF0(v29, v30);
    swift_bridgeObjectRelease();
    id v31 = sub_100339408();
    [v14 setActivitySessions:v31];

    id v32 = [v30 stagedActivitySession];
    if (v32)
    {
      uint64_t v33 = v32;
      id v34 = [self activitySessionWithTUConversationActivitySession:v32 fromConversation:v30 forStorage:1];
      [v14 setStagedActivitySession:v34];
    }
    unint64_t v35 = (unint64_t)[v30 avMode];
    if (v35 >> 31)
    {
      __break(1u);
    }
    else
    {
      [v14 setAvMode:v35];
      id v36 = [v30 localMember];
      id v37 = [self memberWithTUConversationMember:v36];

      [v14 setLocalMember:v37];
      objc_msgSend(v14, "setLocallyCreated:", objc_msgSend(v30, "isLocallyCreated"));
      id v38 = [v30 initiator];
      id v39 = [self handleWithTUHandle:v38];

      [v14 setInitiator:v39];
      id v40 = [v30 activeRemoteParticipants];
      sub_1001F6204(0, (unint64_t *)&qword_100588540);
      sub_100210D5C((unint64_t *)&qword_100586D48, (unint64_t *)&qword_100588540);
      uint64_t v41 = sub_1003122F4();

      sub_10030C130(v41);
      swift_bridgeObjectRelease();
      id v42 = sub_100339408();
      [v14 setActiveRemoteParticipants:v42];

      id v43 = [v30 activeLightweightParticipants];
      uint64_t v44 = sub_1003122F4();

      sub_10030C130(v44);
      swift_bridgeObjectRelease();
      id v45 = sub_100339408();
      [v14 setActiveLightweightParticipants:v45];

      id v46 = [v30 remoteMembers];
      sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
      uint64_t v47 = sub_1003122F4();

      sub_10030C500(v47);
      swift_bridgeObjectRelease();
      id v48 = sub_100339408();
      [v14 setRemoteMembers:v48];

      id v49 = [v30 lightweightMembers];
      uint64_t v50 = sub_1003122F4();

      sub_10030C8D0(v50);
      swift_bridgeObjectRelease();
      id v51 = sub_100339408();
      [v14 setLightweightMembers:v51];

      id v52 = [v30 otherInvitedHandles];
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
      uint64_t v53 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10030CCD0(v53);
      swift_bridgeObjectRelease();
      id v54 = sub_100339408();
      [v14 setOtherInvitedHandles:v54];

      id v55 = [v30 report];
      id v56 = [objc_allocWithZone((Class)CSDMessagingConversationReport) initWithTUConversationReport:v55];

      [v14 setReportData:v56];
      id v57 = [v30 link];
      if (v57)
      {
        id v58 = v57;
        id v59 = [self linkWithTUConversationLink:v57 includeGroupUUID:1];
        [v14 setLink:v59];
      }
      id v60 = [v30 provider];
      id v61 = [v60 identifier];

      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      sub_100311FF8(v62, v64, v14, (SEL *)&selRef_setConversationProviderIdentifier_);
      if ([v14 hasUUIDString]
        && [v14 hasGroupUUIDString]
        && [v14 hasLocalMember])
      {
        unsigned int v65 = [v14 hasInitiator];

        if (v65)
        {

          goto LABEL_22;
        }
      }
      else
      {
      }
      if (qword_1005839A0 == -1)
      {
LABEL_21:
        static os_log_type_t.error.getter();
        sub_1001F081C(&qword_100584B20);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_10048F550;
        id v71 = v14;
        uint64_t v67 = sub_1002747A0((uint64_t)&v71);
        uint64_t v69 = v68;

        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = sub_1001F3B08();
        *(void *)(v66 + 32) = v67;
        *(void *)(v66 + 40) = v69;
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    swift_once();
    goto LABEL_21;
  }

LABEL_22:
  sub_1001FCC08();
}

void sub_10030DC9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver);
  *(void *)(v1 + OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver) = a1;
}

id sub_10030DCB0(void *a1, void *a2, char *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)&a3[OBJC_IVAR___CSDConversationPersistenceController_storage];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  *(void *)&a3[OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver] = 0;
  *(void *)&a3[OBJC_IVAR___CSDConversationPersistenceController_queue] = a1;
  sub_1001F6204(0, (unint64_t *)&qword_100584DB0);
  id v13 = a3;
  id v14 = a1;
  sub_1002045FC(aBlock);
  swift_beginAccess();
  sub_10027D36C((uint64_t)aBlock, v12);
  swift_endAccess();

  id v15 = (objc_class *)type metadata accessor for ConversationPersistenceController();
  v34.receiver = v13;
  v34.super_class = v15;
  id v16 = objc_msgSendSuper2(&v34, "init");
  uint64_t v17 = (uint64_t)v16 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  sub_10021E3D8(v17, (uint64_t)aBlock, &qword_100586EF8);
  if (v31)
  {

    sub_10021E23C((uint64_t)aBlock, &qword_100586EF8);
  }
  else
  {
    id v18 = v16;
    sub_10021E23C((uint64_t)aBlock, &qword_100586EF8);
    id v19 = (void *)swift_allocObject();
    v19[2] = a2;
    v19[3] = v14;
    uint64_t v19[4] = v18;
    void v19[5] = sub_10027B1D4;
    void v19[6] = 0;
    id v32 = sub_1003121F4;
    uint64_t v33 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    id v31 = &unk_100514540;
    id v20 = _Block_copy(aBlock);
    id v21 = a2;
    id v22 = v14;
    id v23 = v18;
    static DispatchQoS.unspecified.getter();
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_1003120EC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
    swift_release();
  }
  return v16;
}

void sub_10030E0A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    id v8 = a1;
  }
  else {
    id v8 = [objc_allocWithZone((Class)CSDDeviceLockStateObserver) initWithQueue:a2];
  }
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a4;
  v10[4] = a5;
  v14[4] = sub_100312274;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002C2C88;
  v14[3] = &unk_1005145B8;
  uint64_t v11 = _Block_copy(v14);
  id v12 = a1;
  swift_retain();
  swift_release();
  [v8 performBlockAfterFirstUnlock:v11];
  _Block_release(v11);
  id v13 = v8;
  sub_10030DC9C((uint64_t)v8);
}

void sub_10030E200(uint64_t a1, void (*a2)(void *__return_ptr))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    a2(v6);
    uint64_t v5 = (uint64_t)v4 + OBJC_IVAR___CSDConversationPersistenceController_storage;
    swift_beginAccess();
    sub_10027D36C((uint64_t)v6, v5);
    swift_endAccess();
  }
}

id sub_10030E2A0(void *a1)
{
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationPersistenceController());
  id v3 = sub_10030DCB0(a1, 0, v2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

void sub_10030E324()
{
}

uint64_t sub_10030E34C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t result = TUSimulatedModeEnabled();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)[a1 isFromStorage];
    if ((result & 1) == 0)
    {
      id v12 = [a1 remoteMembers];
      sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
      sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = sub_10039E66C(v13);
      uint64_t result = swift_bridgeObjectRelease();
      if (v14 >= 2)
      {
        sub_1001F6204(0, &qword_100589810);
        id v15 = a1;
        sub_10030D29C();
        if (v16)
        {
          uint64_t v17 = v16;
          if (qword_1005839A0 != -1) {
            swift_once();
          }
          sub_1001F081C(&qword_100584B20);
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = xmmword_10048F550;
          id v19 = [v15 UUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
          uint64_t v20 = String.init<A>(reflecting:)();
          uint64_t v22 = v21;
          (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
          *(void *)(v18 + 56) = &type metadata for String;
          *(void *)(v18 + 64) = sub_1001F3B08();
          *(void *)(v18 + 32) = v20;
          *(void *)(v18 + 40) = v22;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();
          uint64_t v23 = a2 + OBJC_IVAR___CSDConversationPersistenceController_storage;
          swift_beginAccess();
          sub_10021E3D8(v23, (uint64_t)v42, &qword_100586EF8);
          if (v43)
          {
            sub_10020ED28((uint64_t)v42, (uint64_t)v39);
            sub_10021E23C((uint64_t)v42, &qword_100586EF8);
            uint64_t v24 = v40;
            uint64_t v25 = v41;
            sub_100204074(v39, v40);
            uint64_t v26 = sub_100342308(v17);
            if (v27 >> 60 == 15)
            {
              long long v37 = 0u;
              long long v38 = 0u;
            }
            else
            {
              *((void *)&v38 + 1) = &type metadata for Data;
              *(void *)&long long v37 = v26;
              *((void *)&v37 + 1) = v27;
            }
            uint64_t v33 = sub_10030D198();
            (*(void (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(&v37, v33, v34, v24, v25);
            swift_bridgeObjectRelease();
            sub_10021E23C((uint64_t)&v37, (uint64_t *)&unk_100584CA0);
            sub_1002018DC((uint64_t)v39);
          }
          else
          {
            sub_10021E23C((uint64_t)v42, &qword_100586EF8);
          }
          sub_10030D198();
          sub_1003110EC();
          swift_bridgeObjectRelease();
          sub_10021E3D8(v23, (uint64_t)v42, &qword_100586EF8);
          if (v43)
          {
            sub_10020ED28((uint64_t)v42, (uint64_t)v39);
            sub_10021E23C((uint64_t)v42, &qword_100586EF8);
            uint64_t v35 = v40;
            uint64_t v36 = v41;
            sub_100204074(v39, v40);
            (*(void (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);

            return sub_1002018DC((uint64_t)v39);
          }
          else
          {

            return sub_10021E23C((uint64_t)v42, &qword_100586EF8);
          }
        }
        else
        {
          if (qword_1005839A0 != -1) {
            swift_once();
          }
          static os_log_type_t.error.getter();
          sub_1001F081C(&qword_100584B20);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_10048F550;
          id v29 = [v15 UUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
          uint64_t v30 = String.init<A>(reflecting:)();
          uint64_t v32 = v31;
          (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
          *(void *)(v28 + 56) = &type metadata for String;
          *(void *)(v28 + 64) = sub_1001F3B08();
          *(void *)(v28 + 32) = v30;
          *(void *)(v28 + 40) = v32;
          os_log(_:dso:log:type:_:)();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

void sub_10030E96C()
{
}

void sub_10030E994()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  id v8 = v7;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v20 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_1002024D0();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v8;
  *(void *)(v16 + 24) = v0;
  v21[4] = v6;
  void v21[5] = v16;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  void v21[2] = sub_1002C2C88;
  v21[3] = v4;
  uint64_t v17 = _Block_copy(v21);
  id v18 = v8;
  id v19 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1003120EC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v20);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10030EB78(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - v9;
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  id v12 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v13 = String.init<A>(reflecting:)();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1001F3B08();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = a2 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  sub_10021E3D8(v16, (uint64_t)v28, &qword_100586EF8);
  if (v29)
  {
    sub_10020ED28((uint64_t)v28, (uint64_t)v25);
    sub_10021E23C((uint64_t)v28, &qword_100586EF8);
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    sub_100204074(v25, v26);
    memset(v24, 0, sizeof(v24));
    uint64_t v19 = sub_10030D198();
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8))(v24, v19, v20, v17, v18);
    swift_bridgeObjectRelease();
    sub_10021E23C((uint64_t)v24, (uint64_t *)&unk_100584CA0);
    sub_1002018DC((uint64_t)v25);
  }
  else
  {
    sub_10021E23C((uint64_t)v28, &qword_100586EF8);
  }
  sub_10030D198();
  sub_10031149C();
  swift_bridgeObjectRelease();
  sub_10021E3D8(v16, (uint64_t)v28, &qword_100586EF8);
  if (!v29) {
    return sub_10021E23C((uint64_t)v28, &qword_100586EF8);
  }
  sub_10020ED28((uint64_t)v28, (uint64_t)v25);
  sub_10021E23C((uint64_t)v28, &qword_100586EF8);
  uint64_t v21 = v26;
  uint64_t v22 = v27;
  sub_100204074(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  return sub_1002018DC((uint64_t)v25);
}

void sub_10030EF68()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_1002024D0();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  v10[4] = sub_100312094;
  v10[5] = v3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1002C2C88;
  v10[3] = &unk_100514428;
  uint64_t v4 = _Block_copy(v10);
  id v5 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1003120EC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v4);
  uint64_t v6 = sub_10026B774();
  v7(v6);
  uint64_t v8 = sub_10026B75C();
  v9(v8);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10030F158(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  sub_10021E3D8(v1, (uint64_t)v19, &qword_100586EF8);
  if (!v20) {
    return sub_10021E23C((uint64_t)v19, &qword_100586EF8);
  }
  sub_10020ED28((uint64_t)v19, (uint64_t)v16);
  sub_10021E23C((uint64_t)v19, &qword_100586EF8);
  uint64_t v2 = v17;
  uint64_t v3 = v18;
  sub_100204074(v16, v17);
  uint64_t v4 = sub_1001F081C(&qword_10058B600);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(v15, v4, 0xD00000000000001ALL, 0x8000000100487880, v4, v2, v3);
  uint64_t v5 = *(void *)&v15[0];
  uint64_t result = sub_1002018DC((uint64_t)v16);
  if (!v5) {
    return result;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      sub_10021E3D8(v1, (uint64_t)v19, &qword_100586EF8);
      if (v20)
      {
        sub_10020ED28((uint64_t)v19, (uint64_t)v16);
        swift_bridgeObjectRetain();
        sub_10021E23C((uint64_t)v19, &qword_100586EF8);
        uint64_t v11 = v17;
        uint64_t v12 = v18;
        sub_100204074(v16, v17);
        memset(v15, 0, sizeof(v15));
        (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(v15, v10, v9, v11, v12);
        sub_10021E23C((uint64_t)v15, (uint64_t *)&unk_100584CA0);
        sub_1002018DC((uint64_t)v16);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_10021E23C((uint64_t)v19, &qword_100586EF8);
      }
      v8 += 2;
      sub_10031149C();
      swift_bridgeObjectRelease();
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_10021E3D8(v1, (uint64_t)v19, &qword_100586EF8);
  if (!v20) {
    return sub_10021E23C((uint64_t)v19, &qword_100586EF8);
  }
  sub_10020ED28((uint64_t)v19, (uint64_t)v16);
  sub_10021E23C((uint64_t)v19, &qword_100586EF8);
  uint64_t v13 = v17;
  uint64_t v14 = v18;
  sub_100204074(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  return sub_1002018DC((uint64_t)v16);
}

void sub_10030F438()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v0;
  v7[3] = v4;
  v7[4] = v2;
  v14[4] = sub_100311FD4;
  v14[5] = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002C2C88;
  v14[3] = &unk_1005143D8;
  uint64_t v8 = _Block_copy(v14);
  id v9 = v0;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_1003120EC((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  uint64_t v10 = sub_10026B774();
  v11(v10);
  uint64_t v12 = sub_10026B75C();
  v13(v12);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10030F614(uint64_t a1, void (*a2)(char *, char *, char *, void, id, id, void *, void *, unint64_t, unint64_t, id, id, void *, uint64_t, unint64_t, void *, uint64_t, BOOL), uint64_t a3)
{
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v9 = (char *)v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v136 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v136 - v13;
  uint64_t v157 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v157 - 8);
  uint64_t v16 = __chkstk_darwin(v157);
  id v154 = (char *)v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v155 = (char *)v136 - v18;
  sub_100311834();
  uint64_t v19 = a1 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  uint64_t v162 = v19;
  sub_10021E3D8(v19, (uint64_t)&v168, &qword_100586EF8);
  if (!v170) {
    return sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
  }
  sub_10020ED28((uint64_t)&v168, (uint64_t)&v165);
  sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
  uint64_t v20 = v166;
  uint64_t v21 = v167;
  sub_100204074(&v165, v166);
  uint64_t v22 = sub_1001F081C(&qword_10058B600);
  (*(void (**)(long long *__return_ptr, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(&v163, v22, 0xD00000000000001ALL, 0x8000000100487880, v22, v20, v21);
  uint64_t v23 = v163;
  uint64_t result = sub_1002018DC((uint64_t)&v165);
  if (!v23) {
    return result;
  }
  uint64_t v161 = *(void *)(v23 + 16);
  if (!v161) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v153 = v14;
  id v151 = v12;
  uint64_t v149 = v9;
  uint64_t v147 = a2;
  uint64_t v148 = a3;
  unint64_t v25 = 0;
  uint64_t v160 = v23 + 32;
  uint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v150 = (void (**)(char *, uint64_t))(v15 + 8);
  long long v158 = xmmword_10048F550;
  uint64_t v159 = v23;
  while (1)
  {
    if (v25 >= *(void *)(v23 + 16))
    {
      __break(1u);
LABEL_165:
      __break(1u);
      goto LABEL_166;
    }
    uint64_t v26 = (void *)(v160 + 16 * v25);
    uint64_t v27 = (void *)*v26;
    uint64_t v28 = v26[1];
    sub_10021E3D8(v162, (uint64_t)&v168, &qword_100586EF8);
    if (!v170)
    {
      swift_bridgeObjectRetain();
      sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
      goto LABEL_20;
    }
    sub_10020ED28((uint64_t)&v168, (uint64_t)&v165);
    swift_bridgeObjectRetain();
    sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
    uint64_t v29 = v166;
    uint64_t v30 = v167;
    sub_100204074(&v165, v166);
    uint64_t v31 = v29;
    uint64_t v32 = v157;
    (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, void *, uint64_t, uint64_t))(v30 + 16))(&v163, &type metadata for Data, v27, v28, &type metadata for Data, v31, v30);
    long long v33 = v163;
    sub_1002018DC((uint64_t)&v165);
    if (*((void *)&v33 + 1) >> 60 != 15) {
      break;
    }
LABEL_20:
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v158;
    unint64_t v168 = (unint64_t)v27;
    uint64_t v169 = v28;
    uint64_t v42 = String.init<A>(reflecting:)();
    uint64_t v44 = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1001F3B08();
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 40) = v44;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v23 = v159;
LABEL_55:
    if (++v25 == v161) {
      return swift_bridgeObjectRelease();
    }
  }
  id v34 = objc_allocWithZone((Class)CSDMessagingConversation);
  sub_1001F7440(v33, *((unint64_t *)&v33 + 1));
  long long v156 = v33;
  id v35 = sub_1001FC93C(v33, *((unint64_t *)&v33 + 1));
  if (!v35)
  {
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v158;
    unint64_t v168 = (unint64_t)v27;
    uint64_t v169 = v28;
    swift_bridgeObjectRetain();
    uint64_t v46 = String.init<A>(reflecting:)();
    uint64_t v48 = v47;
    *(void *)(v45 + 56) = &type metadata for String;
    *(void *)(v45 + 64) = sub_1001F3B08();
    *(void *)(v45 + 32) = v46;
    *(void *)(v45 + 40) = v48;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    sub_10021E3D8(v162, (uint64_t)&v168, &qword_100586EF8);
    if (v170)
    {
      sub_10020ED28((uint64_t)&v168, (uint64_t)&v165);
      sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
      uint64_t v49 = v166;
      uint64_t v50 = v167;
      sub_100204074(&v165, v166);
      long long v163 = 0u;
      long long v164 = 0u;
      (*(void (**)(long long *, void *, uint64_t, uint64_t, uint64_t))(v50 + 8))(&v163, v27, v28, v49, v50);
      sub_10021E23C((uint64_t)&v163, (uint64_t *)&unk_100584CA0);
      sub_1002018DC((uint64_t)&v165);
    }
    else
    {
      sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
    }
    uint64_t v23 = v159;
    unint64_t v51 = *((void *)&v156 + 1);
    uint64_t v52 = v156;
    sub_10031149C();
    uint64_t v53 = v52;
    unint64_t v54 = v51;
    goto LABEL_54;
  }
  uint64_t v36 = v35;
  if (![v35 hasUUIDString]
    || ![v36 hasGroupUUIDString]
    || ![v36 hasLocalMember]
    || ![v36 hasInitiator])
  {
    goto LABEL_48;
  }
  sub_1001F612C(v36, (SEL *)&selRef_uUIDString);
  if (!v37) {
    goto LABEL_170;
  }
  uint64_t v38 = (uint64_t)v153;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (sub_1001F758C(v38, 1, v32) == 1) {
    goto LABEL_18;
  }
  id v39 = *v152;
  (*v152)(v155, v38, v32);
  sub_1001F612C(v36, (SEL *)&selRef_groupUUIDString);
  if (!v40) {
    goto LABEL_171;
  }
  uint64_t v38 = (uint64_t)v151;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (sub_1001F758C(v38, 1, v32) == 1)
  {
    (*v150)(v155, v32);
LABEL_18:
    sub_10021E23C(v38, (uint64_t *)&unk_100585580);
    goto LABEL_48;
  }
  v39(v154, v38, v32);
  id v55 = [v36 localMember];
  if (!v55) {
    goto LABEL_172;
  }
  id v56 = v55;
  id v57 = [v55 tuConversationMember];

  if (!v57) {
    goto LABEL_47;
  }
  id v58 = [v36 initiator];
  if (!v58) {
    goto LABEL_173;
  }
  id v59 = v58;
  id v60 = [v58 tuHandle];

  if (!v60) {
    goto LABEL_46;
  }
  id v61 = [v36 remoteMembers];
  if (!v61
    || (uint64_t v62 = v61,
        unint64_t v168 = 0,
        id v146 = (void *)sub_1001F6204(0, &qword_100588918),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
        v62,
        (unint64_t v143 = (void *)v168) == 0))
  {

LABEL_46:
LABEL_47:
    id v71 = *v150;
    (*v150)(v154, v32);
    v71(v155, v32);
LABEL_48:
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = v158;
    unint64_t v168 = (unint64_t)v36;
    sub_1001F6204(0, &qword_100589810);
    id v73 = v36;
    uint64_t v74 = String.init<A>(reflecting:)();
    uint64_t v76 = v75;
    *(void *)(v72 + 56) = &type metadata for String;
    *(void *)(v72 + 64) = sub_1001F3B08();
    *(void *)(v72 + 32) = v74;
    *(void *)(v72 + 40) = v76;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    sub_10021E3D8(v162, (uint64_t)&v168, &qword_100586EF8);
    if (v170)
    {
      sub_10020ED28((uint64_t)&v168, (uint64_t)&v165);
      sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
      uint64_t v77 = v166;
      uint64_t v78 = v167;
      sub_100204074(&v165, v166);
      long long v163 = 0u;
      long long v164 = 0u;
      (*(void (**)(long long *, void *, uint64_t, uint64_t, uint64_t))(v78 + 8))(&v163, v27, v28, v77, v78);
      sub_10021E23C((uint64_t)&v163, (uint64_t *)&unk_100584CA0);
      sub_1002018DC((uint64_t)&v165);
    }
    else
    {
      sub_10021E23C((uint64_t)&v168, &qword_100586EF8);
    }
    uint64_t v23 = v159;
    sub_10031149C();

    unsigned long long v79 = v156;
    unint64_t v54 = v79 >> 64;
    uint64_t v53 = v79;
LABEL_54:
    sub_1001FCB18(v53, v54);
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  id v142 = v60;
  id v63 = [v36 activeRemoteParticipants];
  if (!v63
    || (uint64_t v64 = v63,
        unint64_t v168 = 0,
        unint64_t v144 = sub_1001F6204(0, &qword_100589818),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
        v64,
        !v168))
  {
    swift_bridgeObjectRelease();

    goto LABEL_46;
  }
  unint64_t v145 = v168;
  swift_bridgeObjectRelease();
  id v65 = [v36 lightweightMembers];
  if (!v65
    || (uint64_t v66 = v65,
        unint64_t v168 = 0,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
        v66,
        (unint64_t v67 = v168) == 0))
  {
    swift_bridgeObjectRelease();
    unint64_t v67 = (unint64_t)_swiftEmptyArrayStorage;
  }
  id v68 = [v36 activeLightweightParticipants];
  unint64_t v69 = (unint64_t)v143;
  id v141 = v57;
  if (v68
    && (uint64_t v70 = v68, v168 = 0, static Array._conditionallyBridgeFromObjectiveC(_:result:)(), v70, v168))
  {
    id v146 = (void *)v168;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v146 = _swiftEmptyArrayStorage;
  }
  sub_1001F612C(v36, (SEL *)&selRef_messagesGroupUUIDString);
  uint64_t v81 = v80;
  swift_bridgeObjectRelease();
  if (v81)
  {
    sub_1001F612C(v36, (SEL *)&selRef_messagesGroupUUIDString);
    if (!v82) {
      goto LABEL_174;
    }
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001F0530((uint64_t)v149, 1, 1, v32);
  }
  unsigned int v140 = [v36 locallyCreated];
  unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v83 = (unint64_t)v146;
  if (v69 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v83 = (unint64_t)v146;
    uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
    if (!v84) {
      goto LABEL_76;
    }
LABEL_64:
    uint64_t v138 = (void *)v67;
    if (v84 < 1) {
      goto LABEL_165;
    }
    uint64_t v85 = 0;
    unint64_t v144 = v69 & 0xC000000000000001;
    do
    {
      if (v144) {
        id v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v86 = *(id *)(v69 + 8 * v85 + 32);
      }
      int64_t v87 = v86;
      id v88 = [v86 tuConversationMember];

      if (v88)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
          uint64_t v139 = *(void **)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v85;
    }
    while (v84 != v85);
    swift_bridgeObjectRelease();
    uint64_t v139 = (void *)v168;
    unint64_t v83 = (unint64_t)v146;
    unint64_t v67 = (unint64_t)v138;
  }
  else
  {
    uint64_t v84 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v84) {
      goto LABEL_64;
    }
LABEL_76:
    swift_bridgeObjectRelease();
    uint64_t v139 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v67 >> 62))
  {
    uint64_t v89 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v89) {
      goto LABEL_79;
    }
LABEL_96:
    swift_bridgeObjectRelease();
    unint64_t v143 = _swiftEmptyArrayStorage;
LABEL_97:
    swift_bridgeObjectRelease();
    unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
    if (v145 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v83 = (unint64_t)v146;
      uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
      if (!v94) {
        goto LABEL_111;
      }
LABEL_99:
      unint64_t v95 = v145;
      if (v94 < 1) {
        goto LABEL_167;
      }
      uint64_t v96 = 0;
      unint64_t v97 = v145 & 0xC000000000000001;
      do
      {
        if (v97) {
          id v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v98 = *(id *)(v95 + 8 * v96 + 32);
        }
        uint64_t v99 = v98;
        id v100 = [v98 csdConversationParticipant];

        if (v100)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            unint64_t v144 = *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v96;
        unint64_t v95 = v145;
      }
      while (v94 != v96);
      swift_bridgeObjectRelease();
      unint64_t v101 = (void *)v168;
      unint64_t v83 = (unint64_t)v146;
    }
    else
    {
      uint64_t v94 = *(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v94) {
        goto LABEL_99;
      }
LABEL_111:
      swift_bridgeObjectRelease();
      unint64_t v101 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
    if (v83 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v83 = (unint64_t)v146;
      uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v102 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v138 = v101;
    if (v102)
    {
      if (v102 < 1) {
        goto LABEL_168;
      }
      uint64_t v103 = 0;
      unint64_t v104 = v83 & 0xC000000000000001;
      do
      {
        if (v104) {
          id v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v105 = *(id *)(v83 + 8 * v103 + 32);
        }
        uint64_t v106 = v105;
        id v107 = [v105 csdConversationParticipant];

        if (v107)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            unint64_t v145 = *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v103;
        unint64_t v83 = (unint64_t)v146;
      }
      while (v102 != v103);
      swift_bridgeObjectRelease();
      uint64_t v108 = (void *)v168;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v108 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    id v109 = [v36 otherInvitedHandles];
    if (v109
      && (uint64_t v110 = v109,
          unint64_t v168 = 0,
          sub_1001F6204(0, &qword_100589828),
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
          v110,
          (unint64_t v111 = v168) != 0))
    {
      unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
      id v146 = (void *)v111;
      if (v111 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v111 = (unint64_t)v146;
        uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
        if (!v112) {
          goto LABEL_145;
        }
LABEL_131:
        unint64_t v144 = (unint64_t)v108;
        if (v112 < 1) {
          goto LABEL_169;
        }
        uint64_t v113 = 0;
        unint64_t v114 = v111 & 0xC000000000000001;
        do
        {
          if (v114) {
            id v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v115 = *(id *)(v111 + 8 * v113 + 32);
          }
          uint64_t v116 = v115;
          id v117 = [v115 tuHandle];

          if (v117)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            {
              unint64_t v145 = *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v113;
          unint64_t v111 = (unint64_t)v146;
        }
        while (v112 != v113);
        swift_bridgeObjectRelease();
        unint64_t v145 = v168;
      }
      else
      {
        uint64_t v112 = *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v112) {
          goto LABEL_131;
        }
LABEL_145:
        swift_bridgeObjectRelease();
        unint64_t v145 = (unint64_t)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v145 = (unint64_t)_swiftEmptyArrayStorage;
    }
    if ([v36 hasReportData])
    {
      id v118 = [v36 reportData];
      if (!v118) {
        goto LABEL_175;
      }
      Class v119 = v118;
      id v137 = [v118 tuConversationReport];
    }
    else
    {
      id v137 = [objc_allocWithZone((Class)TUConversationReport) init];
    }
    id v120 = [v36 tuConversationLink];
    id v121 = [v36 activitySessions];
    if (v121)
    {
      uint64_t v122 = v121;
      unint64_t v168 = 0;
      sub_1001F6204(0, &qword_100589820);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();

      uint64_t v123 = (void *)v168;
      if (!v168) {
        uint64_t v123 = _swiftEmptyArrayStorage;
      }
      id v146 = v123;
    }
    else
    {
      id v146 = _swiftEmptyArrayStorage;
    }
    uint64_t v124 = sub_1001F612C(v36, (SEL *)&selRef_conversationProviderIdentifier);
    unint64_t v126 = v125;
    unsigned int v127 = [v36 hasAvMode];
    unint64_t v144 = v126;
    if (v127)
    {
      unsigned int v128 = [v36 avMode];
      if ((v128 & 0x80000000) != 0) {
        goto LABEL_176;
      }
      uint64_t v129 = v128;
    }
    else
    {
      uint64_t v129 = 2;
    }
    unint64_t v168 = (unint64_t)v138;
    sub_1002D2850();
    unint64_t v130 = v168;
    v136[1] = v168;
    uint64_t v138 = [v36 stagedActivitySession];
    uint64_t v134 = v129;
    BOOL v135 = v129 == 0;
    char v131 = v137;
    id v132 = v142;
    v147(v155, v154, v149, v140, v141, v142, v139, v143, v145, v130, v120, v137, v146, v124, v144, v138, v134, v135);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001FCB18(v156, *((unint64_t *)&v156 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10021E23C((uint64_t)v149, (uint64_t *)&unk_100585580);
    uint64_t v133 = *v150;
    (*v150)(v154, v32);
    v133(v155, v32);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  unint64_t v83 = (unint64_t)v146;
  uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
  if (!v89) {
    goto LABEL_96;
  }
LABEL_79:
  if (v89 >= 1)
  {
    uint64_t v90 = 0;
    unint64_t v144 = v67 & 0xC000000000000001;
    unint64_t v143 = (void *)v89;
    while (1)
    {
      if (v144) {
        id v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v91 = *(id *)(v67 + 8 * v90 + 32);
      }
      uint64_t v92 = v91;
      id v93 = [v91 tuConversationMember];
      if ([v92 hasValidationSource]
        && [v92 validationSource] == 1)
      {
        if (v93)
        {
          [v93 setValidationSource:1];

LABEL_89:
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v89 = (uint64_t)v143;
          goto LABEL_92;
        }
      }
      else
      {

        if (v93) {
          goto LABEL_89;
        }
      }
LABEL_92:
      if (v89 == ++v90)
      {
        swift_bridgeObjectRelease();
        unint64_t v143 = (void *)v168;
        unint64_t v83 = (unint64_t)v146;
        goto LABEL_97;
      }
    }
  }
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100310E40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  int v41 = a4;
  uint64_t v40 = a19;
  NSString v20 = a15;
  uint64_t v36 = a10;
  uint64_t v37 = a13;
  uint64_t v21 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v38 = UUID._bridgeToObjectiveC()().super.isa;
  sub_10021E3D8(a3, (uint64_t)v23, (uint64_t *)&unk_100585580);
  uint64_t v24 = type metadata accessor for UUID();
  Class v25 = 0;
  if (sub_1001F758C((uint64_t)v23, 1, v24) != 1)
  {
    Class v25 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  }
  uint64_t v35 = a12;
  uint64_t v33 = a16;
  uint64_t v34 = a11;
  sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
  v26.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  v28.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001F6204(0, (unint64_t *)&qword_100588540);
  v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001F6204(0, &qword_100589820);
  v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a15) {
    NSString v20 = String._bridgeToObjectiveC()();
  }
  Class v32 = v38;
  Class v31 = isa;
  (*(void (**)(uint64_t, Class, Class, Class, void, uint64_t, uint64_t, Class, Class, Class, Class, uint64_t, uint64_t, Class, NSString, uint64_t, uint64_t, uint64_t))(v40 + 16))(v40, isa, v38, v25, v41 & 1, v42, v43, v26.super.isa, v27.super.isa, v28.super.isa, v29.super.isa, v34, v35, v30.super.isa, v20, v33, a17, a18);
}

void sub_1003110EC()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1002024D0();
  uint64_t v10 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  void *v1 = v10;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v1, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  sub_10021E3D8(v6, (uint64_t)v25, &qword_100586EF8);
  if (v26)
  {
    sub_1003122DC();
    sub_10021E23C((uint64_t)v25, &qword_100586EF8);
    sub_100204074(v23, v24);
    sub_1001F081C(&qword_10058B600);
    sub_1003122AC();
    v12();
    uint64_t v0 = (void *)v22[0];
    sub_1002018DC((uint64_t)v23);
    if (v22[0]) {
      goto LABEL_7;
    }
  }
  else
  {
    sub_10021E23C((uint64_t)v25, &qword_100586EF8);
  }
  swift_bridgeObjectRelease();
  uint64_t v0 = _swiftEmptyArrayStorage;
LABEL_7:
  if (sub_10039E4D0(v5, v3, v0)) {
    goto LABEL_14;
  }
  if (qword_1005839A0 != -1) {
    goto LABEL_19;
  }
LABEL_9:
  sub_1001F081C(&qword_100584B20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10048F550;
  v25[0] = v5;
  v25[1] = v3;
  swift_bridgeObjectRetain();
  uint64_t v14 = String.init<A>(reflecting:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_1001F3B08();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1003A47C8();
    uint64_t v0 = v20;
  }
  unint64_t v17 = v0[2];
  if (v17 >= v0[3] >> 1)
  {
    sub_1003A47C8();
    uint64_t v0 = v21;
  }
  v0[2] = v17 + 1;
  uint64_t v18 = &v0[2 * v17];
  void v18[4] = v5;
  void v18[5] = v3;
LABEL_14:
  sub_10021E3D8(v6, (uint64_t)v25, &qword_100586EF8);
  if (v26)
  {
    sub_1003122DC();
    sub_10021E23C((uint64_t)v25, &qword_100586EF8);
    sub_100204074(v23, v24);
    v22[3] = sub_1001F081C(&qword_10058B600);
    v22[0] = v0;
    sub_10031230C();
    v19();
    sub_10021E23C((uint64_t)v22, (uint64_t *)&unk_100584CA0);
    sub_1002018DC((uint64_t)v23);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10021E23C((uint64_t)v25, &qword_100586EF8);
  }
  sub_1001FCC08();
}

void sub_10031149C()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100202310();
  id v11 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  void *v1 = v11;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  unint64_t v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v1, v7);
  if (v13)
  {
    uint64_t v7 = (uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage;
    swift_beginAccess();
    sub_10021E3D8(v7, (uint64_t)v31, &qword_100586EF8);
    if (!v32) {
      goto LABEL_13;
    }
    sub_1003122DC();
    sub_10021E23C((uint64_t)v31, &qword_100586EF8);
    uint64_t v14 = v29;
    uint64_t v15 = v30;
    sub_100204074(v28, v29);
    uint64_t v1 = (void *)sub_1001F081C(&qword_10058B600);
    unint64_t v2 = (unint64_t)"ersistenceController";
    (*(void (**)(void *__return_ptr, void *, unint64_t, unint64_t, void *, uint64_t, uint64_t))(v15 + 16))(v27, v1, 0xD00000000000001ALL, 0x8000000100487880, v1, v14, v15);
    uint64_t v0 = (void *)v27[0];
    sub_1002018DC((uint64_t)v28);
    if (!v0)
    {
LABEL_14:
      sub_1001FCC08();
      return;
    }
    uint64_t v16 = sub_10030D0B0(v6, v4, v0);
    if (v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    unint64_t v13 = v16;
    if (qword_1005839A0 == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  sub_1001F081C(&qword_100584B20);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10048F550;
  v31[0] = v6;
  v31[1] = v4;
  swift_bridgeObjectRetain();
  uint64_t v19 = String.init<A>(reflecting:)();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1001F3B08();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1003A6004();
    uint64_t v0 = v26;
  }
  unint64_t v22 = v0[2];
  if (v13 < v22)
  {
    unint64_t v23 = v22 - 1;
    sub_1002DE1C4((char *)&v0[2 * v13 + 6], v22 - 1 - v13, (char *)&v0[2 * v13 + 4]);
    v0[2] = v23;
    swift_bridgeObjectRelease();
    sub_10021E3D8(v7, (uint64_t)v31, &qword_100586EF8);
    if (v32)
    {
      sub_1003122DC();
      sub_10021E23C((uint64_t)v31, &qword_100586EF8);
      uint64_t v24 = v29;
      uint64_t v25 = v30;
      sub_100204074(v28, v29);
      v27[3] = v1;
      v27[0] = v0;
      (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v25 + 8))(v27, 0xD00000000000001ALL, v2 | 0x8000000000000000, v24, v25);
      sub_10021E23C((uint64_t)v27, (uint64_t *)&unk_100584CA0);
      sub_1002018DC((uint64_t)v28);
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
LABEL_13:
    sub_10021E23C((uint64_t)v31, &qword_100586EF8);
    goto LABEL_14;
  }
  __break(1u);
}

void sub_100311834()
{
  sub_1001FCC38();
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1001FCC20();
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  void *v0 = v5;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v0, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v0, v1);
  if ((v5 & 1) == 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v7 = (uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess();
  uint64_t v42 = v7;
  sub_10021E3D8(v7, (uint64_t)v49, &qword_100586EF8);
  if (!v50) {
    goto LABEL_36;
  }
  sub_100312320();
  sub_10021E23C((uint64_t)v49, &qword_100586EF8);
  sub_100204074(v46, v47);
  uint64_t v8 = sub_1001F081C(&qword_10058B600);
  sub_1003122AC();
  v9();
  uint64_t v10 = v43;
  sub_1002018DC((uint64_t)v46);
  if (!v43)
  {
LABEL_37:
    sub_1001FCC08();
    return;
  }
  uint64_t v41 = v8;
  uint64_t v51 = v43;
  uint64_t v11 = *(void *)(v43 + 16);
  if (!v11)
  {
    uint64_t v13 = 0;
    unint64_t v20 = 0;
LABEL_33:
    sub_100311E94(v13, v20);
    sub_10021E3D8(v42, (uint64_t)v49, &qword_100586EF8);
    if (v50)
    {
      sub_100312320();
      sub_10021E23C((uint64_t)v49, &qword_100586EF8);
      sub_100204074(v46, v47);
      uint64_t v45 = v41;
      uint64_t v43 = v51;
      sub_10031230C();
      v39();
      sub_10021E23C((uint64_t)&v43, (uint64_t *)&unk_100584CA0);
      sub_1002018DC((uint64_t)v46);
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
LABEL_36:
    sub_10021E23C((uint64_t)v49, &qword_100586EF8);
    goto LABEL_37;
  }
  uint64_t v40 = v0;
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = *(void *)(v10 + v12 + 32);
    uint64_t v15 = *(void *)(v10 + v12 + 40);
    sub_10021E3D8(v42, (uint64_t)v49, &qword_100586EF8);
    if (!v50)
    {
      sub_10021E23C((uint64_t)v49, &qword_100586EF8);
      swift_bridgeObjectRelease();

      goto LABEL_13;
    }
    sub_100312320();
    swift_bridgeObjectRetain();
    sub_10021E23C((uint64_t)v49, &qword_100586EF8);
    uint64_t v17 = v47;
    uint64_t v16 = v48;
    sub_100204074(v46, v47);
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v16 + 16))(&v43, &type metadata for Data, v14, v15, &type metadata for Data, v17, v16);
    uint64_t v18 = v43;
    unint64_t v19 = v44;
    sub_1002018DC((uint64_t)v46);
    if (v19 >> 60 == 15) {
      break;
    }
    sub_1001FCB18(v18, v19);
    swift_bridgeObjectRelease();
    ++v13;
    v12 += 16;
    if (v11 == v13)
    {
      swift_bridgeObjectRelease();

      uint64_t v13 = *(void *)(v10 + 16);
      unint64_t v20 = v13;
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_13:
  unint64_t v20 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_46;
  }
  unint64_t v21 = *(void *)(v10 + 16);
  if (v20 != v21)
  {
    while (v20 < v21)
    {
      uint64_t v22 = v10 + v12;
      uint64_t v23 = *(void *)(v10 + v12 + 48);
      uint64_t v24 = *(void *)(v10 + v12 + 56);
      sub_10021E3D8(v42, (uint64_t)v49, &qword_100586EF8);
      if (v50)
      {
        sub_100312320();
        swift_bridgeObjectRetain();
        sub_10021E23C((uint64_t)v49, &qword_100586EF8);
        uint64_t v26 = v47;
        uint64_t v25 = v48;
        sub_100204074(v46, v47);
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v25 + 16))(&v43, &type metadata for Data, v23, v24, &type metadata for Data, v26, v25);
        uint64_t v27 = v43;
        unint64_t v28 = v44;
        sub_1002018DC((uint64_t)v46);
        sub_1001FCB18(v27, v28);
        swift_bridgeObjectRelease();
        if (v28 >> 60 != 15)
        {
          if (v20 != v13)
          {
            if (v13 < 0) {
              goto LABEL_41;
            }
            unint64_t v29 = *(void *)(v10 + 16);
            if (v13 >= v29) {
              goto LABEL_42;
            }
            if (v20 >= v29) {
              goto LABEL_43;
            }
            uint64_t v30 = (uint64_t *)(v10 + 32 + 16 * v13);
            uint64_t v32 = *v30;
            uint64_t v31 = v30[1];
            uint64_t v34 = *(void *)(v22 + 48);
            uint64_t v33 = *(void *)(v22 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1003A6004();
              uint64_t v10 = v38;
            }
            uint64_t v35 = v10 + 16 * v13;
            *(void *)(v35 + 32) = v34;
            *(void *)(v35 + 40) = v33;
            swift_bridgeObjectRelease();
            if (v20 >= *(void *)(v10 + 16)) {
              goto LABEL_44;
            }
            uint64_t v36 = v10 + v12;
            *(void *)(v36 + 48) = v32;
            *(void *)(v36 + 56) = v31;
            swift_bridgeObjectRelease();
          }
          if (__OFADD__(v13++, 1)) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        sub_10021E23C((uint64_t)v49, &qword_100586EF8);
      }
      ++v20;
      unint64_t v21 = *(void *)(v10 + 16);
      v12 += 16;
      if (v20 == v21)
      {
        uint64_t v51 = v10;
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_32:
  if ((uint64_t)v20 >= v13) {
    goto LABEL_33;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
}

void sub_100311D98()
{
}

id sub_100311DD8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationPersistenceController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationPersistenceController()
{
  return self;
}

uint64_t sub_100311E94(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_1003A47C8();
    uint64_t v4 = v9;
  }
  uint64_t v10 = (char *)(v4 + 32 + 16 * v6);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = (uint64_t)sub_1002DE1C4((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    *objc_super v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_100311F94()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100311FD4()
{
  return sub_10030F614(*(void *)(v0 + 16), *(void (**)(char *, char *, char *, void, id, id, void *, void *, unint64_t, unint64_t, id, id, void *, uint64_t, unint64_t, void *, uint64_t, BOOL))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100311FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100311FF0()
{
  return swift_release();
}

void sub_100311FF8(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

uint64_t sub_100312064()
{
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100312094()
{
  return sub_10030F158(*(void *)(v0 + 16));
}

uint64_t sub_10031209C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003120DC()
{
  return sub_10030EB78(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003120E4()
{
  return sub_10030E34C(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003120EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100312134()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

__n128 sub_100312164(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100310E40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, *(void *)(v18 + 16));
  return result;
}

uint64_t sub_1003121A4()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1003121F4()
{
  sub_10030E0A0(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100312204()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100208504();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100312234()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100312274()
{
  sub_10030E200(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_1003122DC()
{
  return sub_10020ED28(v0 - 120, v0 - 184);
}

uint64_t sub_1003122F4()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100312320()
{
  return sub_10020ED28(v0 - 136, v0 - 200);
}

void sub_100312338(uint64_t a1)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    sub_100210D5C((unint64_t *)&qword_1005858C0, (unint64_t *)&unk_1005888A0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v42;
    uint64_t v38 = v43;
    uint64_t v1 = v44;
    int64_t v3 = v45;
    unint64_t v4 = v46;
  }
  else
  {
    uint64_t v38 = a1 + 56;
    sub_100312DDC();
    unint64_t v4 = v5 & v6;
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v37 = (unint64_t)(v1 + 64) >> 6;
  while (v2 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_48;
    }
    sub_1001F6204(0, (unint64_t *)&unk_1005888A0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v10 = v41;
    swift_unknownObjectRelease();
    int64_t v9 = v3;
    uint64_t v7 = v4;
    if (!v41) {
      goto LABEL_48;
    }
LABEL_28:
    uint64_t v39 = v7;
    id v14 = [v10 handles];
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    sub_100210D5C((unint64_t *)&qword_100585920, (unint64_t *)&unk_100586E00);
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v16 = v15 & 0xC000000000000001;
    uint64_t v40 = v10;
    if ((v15 & 0xC000000000000001) != 0)
    {
      uint64_t v17 = __CocoaSet.startIndex.getter();
      uint64_t v19 = v18;
      uint64_t v20 = __CocoaSet.endIndex.getter();
      int64_t v21 = v9;
      uint64_t v22 = v2;
      uint64_t v24 = v23;
      char v25 = static __CocoaSet.Index.== infix(_:_:)();
      uint64_t v26 = v24;
      uint64_t v2 = v22;
      int64_t v9 = v21;
      sub_10023561C(v20, v26, 1);
      uint64_t v27 = v17;
      unint64_t v28 = v39;
      if (v25) {
        goto LABEL_43;
      }
    }
    else
    {
      char v29 = *(unsigned char *)(v15 + 32);
      uint64_t v17 = 1 << v29;
      unint64_t v30 = *(void *)(v15 + 56);
      if (v30)
      {
        uint64_t v31 = 0;
        unint64_t v28 = v39;
      }
      else
      {
        unint64_t v28 = v39;
        if ((v29 & 0x3Fu) < 7) {
          goto LABEL_42;
        }
        unint64_t v30 = *(void *)(v15 + 64);
        if (!v30)
        {
          uint64_t v35 = 9;
          while (v35 - 7 < (unint64_t)(v17 + 63) >> 6)
          {
            unint64_t v30 = *(void *)(v15 + 8 * v35++);
            if (v30)
            {
              uint64_t v31 = v35 - 8;
              goto LABEL_33;
            }
          }
LABEL_42:
          uint64_t v19 = *(unsigned int *)(v15 + 36);
LABEL_43:
          sub_10023561C(v17, v19, v16 != 0);
          uint64_t v34 = 0;
          goto LABEL_44;
        }
        uint64_t v31 = 1;
      }
LABEL_33:
      uint64_t v27 = __clz(__rbit64(v30)) + (v31 << 6);
      uint64_t v19 = *(unsigned int *)(v15 + 36);
      if (v27 == v17) {
        goto LABEL_43;
      }
    }
    char v32 = v16 != 0;
    sub_100247358(v27, v19, v16 != 0, v15);
    uint64_t v34 = v33;
    sub_10023561C(v27, v19, v32);
LABEL_44:
    swift_bridgeObjectRelease();
    id v36 = [self handleWithTUHandle:v34];

    int64_t v3 = v9;
    unint64_t v4 = v28;
    if (v36)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v3 = v9;
      unint64_t v4 = v28;
    }
  }
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v9 = v3;
LABEL_27:
    id v10 = *(id *)(*(void *)(v2 + 48) + 8 * v8);
    if (!v10) {
      goto LABEL_48;
    }
    goto LABEL_28;
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v37) {
      goto LABEL_48;
    }
    unint64_t v12 = *(void *)(v38 + 8 * v11);
    int64_t v9 = v3 + 1;
    if (!v12)
    {
      int64_t v9 = v3 + 2;
      if (v3 + 2 >= v37) {
        goto LABEL_48;
      }
      unint64_t v12 = *(void *)(v38 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v3 + 3;
        if (v3 + 3 >= v37) {
          goto LABEL_48;
        }
        unint64_t v12 = *(void *)(v38 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v3 + 4;
          if (v3 + 4 >= v37) {
            goto LABEL_48;
          }
          unint64_t v12 = *(void *)(v38 + 8 * v9);
          if (!v12)
          {
            int64_t v9 = v3 + 5;
            if (v3 + 5 >= v37) {
              goto LABEL_48;
            }
            unint64_t v12 = *(void *)(v38 + 8 * v9);
            if (!v12)
            {
              int64_t v13 = v3 + 6;
              while (v13 < v37)
              {
                unint64_t v12 = *(void *)(v38 + 8 * v13++);
                if (v12)
                {
                  int64_t v9 = v13 - 1;
                  goto LABEL_26;
                }
              }
LABEL_48:
              sub_100206FA0();
              return;
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v7 = (v12 - 1) & v12;
    unint64_t v8 = __clz(__rbit64(v12)) + (v9 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t sub_100312858(uint64_t a1)
{
  sub_100312338(a1);
  uint64_t v2 = sub_10024E030(v1);
  sub_1003128B8(v2);
  char v4 = v3;
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_1003128B8(uint64_t a1)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1001F6204(0, (unint64_t *)&unk_100586190);
    sub_100210D5C((unint64_t *)&unk_100585430, (unint64_t *)&unk_100586190);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v21;
    uint64_t v19 = v22;
    uint64_t v1 = v23;
    int64_t v3 = v24;
    unint64_t v4 = v25;
  }
  else
  {
    uint64_t v19 = a1 + 56;
    sub_100312DDC();
    unint64_t v4 = v5 & v6;
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v18 = (unint64_t)(v1 + 64) >> 6;
  while (1)
  {
    int64_t v7 = v3;
    if (v2 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_29;
      }
      sub_1001F6204(0, (unint64_t *)&unk_100586190);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v10 = v20;
      swift_unknownObjectRelease();
      if (!v20) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }
    if (!v4) {
      break;
    }
    unint64_t v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v9 = v8 | (v3 << 6);
LABEL_25:
    id v10 = *(id *)(*(void *)(v2 + 48) + 8 * v9);
    if (!v10) {
      goto LABEL_29;
    }
LABEL_26:
    NSString v14 = [v10 value];
    if (!v14)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = self;
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = [v15 allowCallForDestinationID:v14 providerIdentifier:v16];

    LODWORD(v16) = [v17 isFromBlockList];
    if (v16) {
      goto LABEL_29;
    }
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v18) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v19 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v7 + 2;
      if (v7 + 2 >= v18) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v19 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v7 + 3;
        if (v7 + 3 >= v18) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v19 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v7 + 4;
          if (v7 + 4 >= v18) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v19 + 8 * v3);
          if (!v12)
          {
            int64_t v13 = v7 + 5;
            while (v13 < v18)
            {
              unint64_t v12 = *(void *)(v19 + 8 * v13++);
              if (v12)
              {
                int64_t v3 = v13 - 1;
                goto LABEL_24;
              }
            }
LABEL_29:
            sub_100206FA0();
            return;
          }
        }
      }
    }
LABEL_24:
    unint64_t v4 = (v12 - 1) & v12;
    unint64_t v9 = __clz(__rbit64(v12)) + (v3 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t type metadata accessor for BlocklistUtilities()
{
  return self;
}

uint64_t sub_100312DF4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    int64_t v7 = (void *)a2[1];
    unint64_t v8 = (void *)a2[2];
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[5];
    id v10 = v7;
    id v11 = v8;
    if (v9 == 1)
    {
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v4 + 33) = *(_OWORD *)((char *)a2 + 33);
    }
    else
    {
      *(unsigned char *)(v4 + 24) = *((unsigned char *)a2 + 24);
      *(_DWORD *)(v4 + 28) = *((_DWORD *)a2 + 7);
      *(void *)(v4 + 32) = a2[4];
      *(void *)(v4 + 40) = v9;
      *(unsigned char *)(v4 + 48) = *((unsigned char *)a2 + 48);
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(v4 + 49) = *((unsigned char *)a2 + 49);
    *(_DWORD *)(v4 + 50) = *(_DWORD *)((char *)a2 + 50);
    *(unsigned char *)(v4 + 54) = *((unsigned char *)a2 + 54);
    *(_WORD *)(v4 + 55) = *(_WORD *)((char *)a2 + 55);
    *(void *)(v4 + 64) = a2[8];
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 13);
    *(unsigned char *)(v4 + 120) = *((unsigned char *)a2 + 120);
    uint64_t v13 = a2[16];
    uint64_t v14 = a2[17];
    *(_WORD *)(v4 + 144) = *((_WORD *)a2 + 72);
    *(_DWORD *)(v4 + 148) = *((_DWORD *)a2 + 37);
    *(unsigned char *)(v4 + 152) = *((unsigned char *)a2 + 152);
    uint64_t v15 = a3[5];
    NSString v16 = (void *)(v4 + v15);
    id v17 = (char *)a2 + v15;
    *(void *)(v4 + 128) = v13;
    *(void *)(v4 + 136) = v14;
    uint64_t v18 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_1001F758C((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = sub_1001F081C(&qword_100584C70);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v16, v17, v20);
      sub_1001F0530((uint64_t)v16, 0, 1, v18);
    }
    uint64_t v21 = a3[6];
    uint64_t v22 = v4 + v21;
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = *(void *)(v23 + 8);
    if (v24)
    {
      *(void *)uint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v24;
      unint64_t v25 = *(void **)(v23 + 24);
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
      *(void *)(v22 + 24) = v25;
      uint64_t v26 = *(void **)(v23 + 32);
      *(void *)(v22 + 32) = v26;
      *(_WORD *)(v22 + 40) = *(_WORD *)(v23 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v27 = v25;
      id v28 = v26;
    }
    else
    {
      long long v29 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 16) = v29;
      *(_OWORD *)(v22 + 26) = *(_OWORD *)(v23 + 26);
    }
    uint64_t v30 = a3[7];
    uint64_t v31 = (void *)(v4 + v30);
    char v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = (int *)type metadata accessor for RingtoneDescriptor();
    if (sub_1001F758C((uint64_t)v32, 1, (uint64_t)v33))
    {
      uint64_t v34 = sub_1001F081C((uint64_t *)&unk_10058A130);
      memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v35 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v35;
      uint64_t v36 = v33[5];
      int64_t v37 = (char *)v31 + v36;
      uint64_t v38 = (char *)v32 + v36;
      uint64_t v39 = type metadata accessor for URL();
      swift_bridgeObjectRetain();
      if (sub_1001F758C((uint64_t)v38, 1, v39))
      {
        uint64_t v40 = sub_1001F081C(&qword_1005878F0);
        memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
        sub_1001F0530((uint64_t)v37, 0, 1, v39);
      }
      uint64_t v41 = v33[6];
      uint64_t v42 = (void *)((char *)v31 + v41);
      uint64_t v43 = (void *)((char *)v32 + v41);
      uint64_t v44 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v44;
      *((unsigned char *)v31 + v33[7]) = *((unsigned char *)v32 + v33[7]);
      swift_bridgeObjectRetain();
      sub_1001F0530((uint64_t)v31, 0, 1, (uint64_t)v33);
    }
    uint64_t v45 = a3[8];
    unint64_t v46 = (void *)(v4 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = sub_1001F081C(&qword_100585A40);
    if (sub_1001F758C((uint64_t)v47, 2, v48))
    {
      uint64_t v49 = type metadata accessor for SoundDescriptorAction();
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      uint64_t v50 = (void *)v47[1];
      *unint64_t v46 = *v47;
      v46[1] = v50;
      *((unsigned char *)v46 + 16) = *((unsigned char *)v47 + 16);
      void v46[3] = v47[3];
      uint64_t v51 = type metadata accessor for SoundDescriptor();
      uint64_t v52 = *(int *)(v51 + 32);
      __dst = (char *)v46 + v52;
      uint64_t v53 = (char *)v47 + v52;
      uint64_t v54 = type metadata accessor for UUID();
      id v55 = v50;
      if (sub_1001F758C((uint64_t)v53, 1, v54))
      {
        uint64_t v56 = sub_1001F081C((uint64_t *)&unk_100585580);
        memcpy(__dst, v53, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(__dst, v53, v54);
        sub_1001F0530((uint64_t)__dst, 0, 1, v54);
      }
      *((unsigned char *)v46 + *(int *)(v51 + 36)) = *((unsigned char *)v47 + *(int *)(v51 + 36));
      sub_1001F0530((uint64_t)v46, 0, 2, v48);
    }
    uint64_t v57 = a3[10];
    *(unsigned char *)(v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v58 = v4 + v57;
    uint64_t v59 = (uint64_t)a2 + v57;
    *(void *)uint64_t v58 = *(void *)v59;
    *(_WORD *)(v58 + 8) = *(_WORD *)(v59 + 8);
    *(unsigned char *)(v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  }
  return v4;
}

uint64_t sub_100313358(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  if (!sub_1001F758C(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = a1 + a2[6];
  if (*(void *)(v7 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for RingtoneDescriptor();
  if (!sub_1001F758C(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v8 + *(int *)(v9 + 20);
    uint64_t v11 = type metadata accessor for URL();
    if (!sub_1001F758C(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = a1 + a2[8];
  uint64_t v13 = sub_1001F081C(&qword_100585A40);
  uint64_t result = sub_1001F758C(v12, 2, v13);
  if (!result)
  {

    uint64_t v15 = v12 + *(int *)(type metadata accessor for SoundDescriptor() + 32);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t result = sub_1001F758C(v15, 1, v16);
    if (!result)
    {
      id v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
      return v17(v15, v16);
    }
  }
  return result;
}

uint64_t sub_10031358C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  id v9 = v6;
  id v10 = v7;
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a2 + 50);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 55);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v13 = a3[5];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = v12;
  uint64_t v16 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_1001F758C((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = sub_1001F081C(&qword_100584C70);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 16))(v14, v15, v18);
    sub_1001F0530((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v19 = a3[6];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(v21 + 8);
  if (v22)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    *(void *)(v20 + 8) = v22;
    uint64_t v23 = *(void **)(v21 + 24);
    *(void *)(v20 + 16) = *(void *)(v21 + 16);
    *(void *)(v20 + 24) = v23;
    uint64_t v24 = *(void **)(v21 + 32);
    *(void *)(v20 + 32) = v24;
    *(_WORD *)(v20 + 40) = *(_WORD *)(v21 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v25 = v23;
    id v26 = v24;
  }
  else
  {
    long long v27 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v27;
    *(_OWORD *)(v20 + 26) = *(_OWORD *)(v21 + 26);
  }
  uint64_t v28 = a3[7];
  long long v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = (int *)type metadata accessor for RingtoneDescriptor();
  if (sub_1001F758C((uint64_t)v30, 1, (uint64_t)v31))
  {
    uint64_t v32 = sub_1001F081C((uint64_t *)&unk_10058A130);
    memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    uint64_t v33 = v30[1];
    *long long v29 = *v30;
    v29[1] = v33;
    uint64_t v34 = v31[5];
    uint64_t v35 = (char *)v29 + v34;
    uint64_t v36 = (char *)v30 + v34;
    uint64_t v37 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (sub_1001F758C((uint64_t)v36, 1, v37))
    {
      uint64_t v38 = sub_1001F081C(&qword_1005878F0);
      memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
      sub_1001F0530((uint64_t)v35, 0, 1, v37);
    }
    uint64_t v39 = v31[6];
    uint64_t v40 = (void *)((char *)v29 + v39);
    uint64_t v41 = (void *)((char *)v30 + v39);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    *((unsigned char *)v29 + v31[7]) = *((unsigned char *)v30 + v31[7]);
    swift_bridgeObjectRetain();
    sub_1001F0530((uint64_t)v29, 0, 1, (uint64_t)v31);
  }
  uint64_t v43 = a3[8];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (void *)(a2 + v43);
  uint64_t v46 = sub_1001F081C(&qword_100585A40);
  if (sub_1001F758C((uint64_t)v45, 2, v46))
  {
    uint64_t v47 = type metadata accessor for SoundDescriptorAction();
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    uint64_t v48 = (void *)v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v48;
    *((unsigned char *)v44 + 16) = *((unsigned char *)v45 + 16);
    uint64_t v44[3] = v45[3];
    uint64_t v49 = type metadata accessor for SoundDescriptor();
    uint64_t v50 = *(int *)(v49 + 32);
    __dst = (char *)v44 + v50;
    uint64_t v51 = (char *)v45 + v50;
    uint64_t v52 = type metadata accessor for UUID();
    id v53 = v48;
    if (sub_1001F758C((uint64_t)v51, 1, v52))
    {
      uint64_t v54 = sub_1001F081C((uint64_t *)&unk_100585580);
      memcpy(__dst, v51, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(__dst, v51, v52);
      sub_1001F0530((uint64_t)__dst, 0, 1, v52);
    }
    *((unsigned char *)v44 + *(int *)(v49 + 36)) = *((unsigned char *)v45 + *(int *)(v49 + 36));
    sub_1001F0530((uint64_t)v44, 0, 2, v46);
  }
  uint64_t v55 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_WORD *)(v56 + 8) = *(_WORD *)(v57 + 8);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100313AA0(uint64_t a1, int *a2, int *a3)
{
  int v6 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v6;
  uint64_t v7 = (void *)*((void *)a2 + 1);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a1 + 16);
  uint64_t v11 = (void *)*((void *)a2 + 2);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  uint64_t v13 = (long long *)(a1 + 24);
  uint64_t v14 = (long long *)(a2 + 6);
  uint64_t v15 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40) == 1)
  {
    if (v15 == 1)
    {
      long long v16 = *v14;
      *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)a2 + 33);
      *uint64_t v13 = v16;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(_DWORD *)(a1 + 28) = a2[7];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      swift_bridgeObjectRetain();
    }
  }
  else if (v15 == 1)
  {
    sub_100314508(a1 + 24);
    long long v17 = *(_OWORD *)((char *)a2 + 33);
    *uint64_t v13 = *v14;
    *(_OWORD *)(a1 + 33) = v17;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(_DWORD *)(a1 + 28) = a2[7];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  }
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  *(unsigned char *)(a1 + 50) = *((unsigned char *)a2 + 50);
  *(unsigned char *)(a1 + 51) = *((unsigned char *)a2 + 51);
  *(unsigned char *)(a1 + 52) = *((unsigned char *)a2 + 52);
  *(unsigned char *)(a1 + 53) = *((unsigned char *)a2 + 53);
  *(unsigned char *)(a1 + 54) = *((unsigned char *)a2 + 54);
  *(unsigned char *)(a1 + 55) = *((unsigned char *)a2 + 55);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  uint64_t v18 = *((void *)a2 + 10);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 80) = v18;
  long long v19 = *(_OWORD *)(a2 + 22);
  long long v20 = *(_OWORD *)(a2 + 26);
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v20;
  *(_OWORD *)(a1 + 88) = v19;
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  *(unsigned char *)(a1 + 145) = *((unsigned char *)a2 + 145);
  int v21 = a2[37];
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(_DWORD *)(a1 + 148) = v21;
  uint64_t v22 = a3[5];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  int v26 = sub_1001F758C((uint64_t)v23, 1, v25);
  int v27 = sub_1001F758C((uint64_t)v24, 1, v25);
  if (v26)
  {
    if (!v27)
    {
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v23, v24, v28);
      sub_1001F0530((uint64_t)v23, 0, 1, v25);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v27)
  {
    sub_100316CF0((uint64_t)v23, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
LABEL_13:
    uint64_t v29 = sub_1001F081C(&qword_100584C70);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v47 = type metadata accessor for UUID();
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v47 - 8) + 24))(v23, v24, v47);
LABEL_14:
  uint64_t v30 = a3[6];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(void *)(a1 + v30 + 8);
  uint64_t v34 = *(void *)((char *)a2 + v30 + 8);
  if (v33)
  {
    if (v34)
    {
      *(void *)uint64_t v31 = *(void *)v32;
      *(void *)(v31 + 8) = *((void *)v32 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v31 + 16) = *((void *)v32 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void **)(v31 + 24);
      uint64_t v36 = (void *)*((void *)v32 + 3);
      *(void *)(v31 + 24) = v36;
      id v37 = v36;

      uint64_t v38 = (void *)*((void *)v32 + 4);
      uint64_t v39 = *(void **)(v31 + 32);
      *(void *)(v31 + 32) = v38;
      id v40 = v38;

      *(unsigned char *)(v31 + 40) = *((unsigned char *)v32 + 40);
      *(unsigned char *)(v31 + 41) = *((unsigned char *)v32 + 41);
    }
    else
    {
      sub_10031455C(v31);
      long long v45 = *(long long *)((char *)v32 + 26);
      long long v46 = v32[1];
      *(_OWORD *)uint64_t v31 = *v32;
      *(_OWORD *)(v31 + 16) = v46;
      *(_OWORD *)(v31 + 26) = v45;
    }
  }
  else if (v34)
  {
    *(void *)uint64_t v31 = *(void *)v32;
    *(void *)(v31 + 8) = *((void *)v32 + 1);
    *(void *)(v31 + 16) = *((void *)v32 + 2);
    uint64_t v41 = (void *)*((void *)v32 + 3);
    *(void *)(v31 + 24) = v41;
    uint64_t v42 = (void *)*((void *)v32 + 4);
    *(void *)(v31 + 32) = v42;
    *(unsigned char *)(v31 + 40) = *((unsigned char *)v32 + 40);
    *(unsigned char *)(v31 + 41) = *((unsigned char *)v32 + 41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v48 = *v32;
    long long v49 = v32[1];
    *(_OWORD *)(v31 + 26) = *(long long *)((char *)v32 + 26);
    *(_OWORD *)uint64_t v31 = v48;
    *(_OWORD *)(v31 + 16) = v49;
  }
  uint64_t v50 = a3[7];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  id v53 = (int *)type metadata accessor for RingtoneDescriptor();
  int v54 = sub_1001F758C((uint64_t)v51, 1, (uint64_t)v53);
  int v55 = sub_1001F758C((uint64_t)v52, 1, (uint64_t)v53);
  if (!v54)
  {
    if (v55)
    {
      sub_100316CF0((uint64_t)v51, (void (*)(void))type metadata accessor for RingtoneDescriptor);
      goto LABEL_28;
    }
    *uint64_t v51 = *v52;
    v51[1] = v52[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v62 = v53[5];
    id v63 = (char *)v51 + v62;
    uint64_t v64 = (char *)v52 + v62;
    uint64_t v65 = type metadata accessor for URL();
    int v66 = sub_1001F758C((uint64_t)v63, 1, v65);
    int v67 = sub_1001F758C((uint64_t)v64, 1, v65);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
        sub_1001F0530((uint64_t)v63, 0, 1, v65);
LABEL_37:
        uint64_t v73 = v53[6];
        uint64_t v74 = (void *)((char *)v51 + v73);
        uint64_t v75 = (void *)((char *)v52 + v73);
        *uint64_t v74 = *v75;
        v74[1] = v75[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((unsigned char *)v51 + v53[7]) = *((unsigned char *)v52 + v53[7]);
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v71 = *(void *)(v65 - 8);
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v63, v64, v65);
        goto LABEL_37;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v63, v65);
    }
    uint64_t v72 = sub_1001F081C(&qword_1005878F0);
    memcpy(v63, v64, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_37;
  }
  if (v55)
  {
LABEL_28:
    uint64_t v61 = sub_1001F081C((uint64_t *)&unk_10058A130);
    memcpy(v51, v52, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_38;
  }
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  uint64_t v56 = v53[5];
  uint64_t v57 = (char *)v51 + v56;
  uint64_t v58 = (char *)v52 + v56;
  uint64_t v59 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (sub_1001F758C((uint64_t)v58, 1, v59))
  {
    uint64_t v60 = sub_1001F081C(&qword_1005878F0);
    memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
    sub_1001F0530((uint64_t)v57, 0, 1, v59);
  }
  uint64_t v68 = v53[6];
  unint64_t v69 = (void *)((char *)v51 + v68);
  uint64_t v70 = (void *)((char *)v52 + v68);
  void *v69 = *v70;
  v69[1] = v70[1];
  *((unsigned char *)v51 + v53[7]) = *((unsigned char *)v52 + v53[7]);
  swift_bridgeObjectRetain();
  sub_1001F0530((uint64_t)v51, 0, 1, (uint64_t)v53);
LABEL_38:
  uint64_t v76 = a3[8];
  uint64_t v77 = a1 + v76;
  uint64_t v78 = (uint64_t)a2 + v76;
  uint64_t v79 = sub_1001F081C(&qword_100585A40);
  int v80 = sub_1001F758C(v77, 2, v79);
  int v81 = sub_1001F758C(v78, 2, v79);
  if (!v80)
  {
    if (v81)
    {
      sub_1002392A8(v77, &qword_100585A40);
      goto LABEL_44;
    }
    *(void *)uint64_t v77 = *(void *)v78;
    uint64_t v90 = *(void **)(v78 + 8);
    id v91 = *(void **)(v77 + 8);
    *(void *)(v77 + 8) = v90;
    id v92 = v90;

    *(unsigned char *)(v77 + 16) = *(unsigned char *)(v78 + 16);
    *(void *)(v77 + 24) = *(void *)(v78 + 24);
    uint64_t v93 = type metadata accessor for SoundDescriptor();
    uint64_t v94 = *(int *)(v93 + 32);
    unint64_t v95 = (void *)(v77 + v94);
    uint64_t v96 = (const void *)(v78 + v94);
    uint64_t v97 = type metadata accessor for UUID();
    int v98 = sub_1001F758C((uint64_t)v95, 1, v97);
    int v99 = sub_1001F758C((uint64_t)v96, 1, v97);
    if (v98)
    {
      if (!v99)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
        sub_1001F0530((uint64_t)v95, 0, 1, v97);
LABEL_53:
        *(unsigned char *)(v77 + *(int *)(v93 + 36)) = *(unsigned char *)(v78 + *(int *)(v93 + 36));
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v100 = *(void *)(v97 - 8);
      if (!v99)
      {
        (*(void (**)(void *, const void *, uint64_t))(v100 + 24))(v95, v96, v97);
        goto LABEL_53;
      }
      (*(void (**)(void *, uint64_t))(v100 + 8))(v95, v97);
    }
    uint64_t v101 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v95, v96, *(void *)(*(void *)(v101 - 8) + 64));
    goto LABEL_53;
  }
  if (v81)
  {
LABEL_44:
    uint64_t v89 = type metadata accessor for SoundDescriptorAction();
    memcpy((void *)v77, (const void *)v78, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_54;
  }
  *(void *)uint64_t v77 = *(void *)v78;
  uint64_t v82 = *(void **)(v78 + 8);
  *(void *)(v77 + 8) = v82;
  *(unsigned char *)(v77 + 16) = *(unsigned char *)(v78 + 16);
  *(void *)(v77 + 24) = *(void *)(v78 + 24);
  uint64_t v83 = type metadata accessor for SoundDescriptor();
  uint64_t v84 = *(int *)(v83 + 32);
  __dst = (void *)(v77 + v84);
  uint64_t v85 = (const void *)(v78 + v84);
  uint64_t v86 = type metadata accessor for UUID();
  id v87 = v82;
  if (sub_1001F758C((uint64_t)v85, 1, v86))
  {
    uint64_t v88 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(__dst, v85, *(void *)(*(void *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(__dst, v85, v86);
    sub_1001F0530((uint64_t)__dst, 0, 1, v86);
  }
  *(unsigned char *)(v77 + *(int *)(v83 + 36)) = *(unsigned char *)(v78 + *(int *)(v83 + 36));
  sub_1001F0530(v77, 0, 2, v79);
LABEL_54:
  *(unsigned char *)(a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v102 = a3[10];
  uint64_t v103 = a1 + v102;
  unint64_t v104 = (uint64_t *)((char *)a2 + v102);
  uint64_t v105 = *v104;
  *(_WORD *)(v103 + 8) = *((_WORD *)v104 + 4);
  *(void *)uint64_t v103 = v105;
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100314508(uint64_t a1)
{
  return a1;
}

uint64_t sub_10031455C(uint64_t a1)
{
  return a1;
}

char *sub_1003145B0(char *a1, char *a2, int *a3)
{
  memcpy(a1, a2, 0x99uLL);
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  if (sub_1001F758C((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_1001F081C(&qword_100584C70);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    sub_1001F0530((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  long long v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *(_OWORD *)(v14 + 26) = *(_OWORD *)(v15 + 26);
  long long v17 = &a1[v13];
  uint64_t v18 = &a2[v13];
  long long v19 = (int *)type metadata accessor for RingtoneDescriptor();
  if (sub_1001F758C((uint64_t)v18, 1, (uint64_t)v19))
  {
    uint64_t v20 = sub_1001F081C((uint64_t *)&unk_10058A130);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *(_OWORD *)long long v17 = *(_OWORD *)v18;
    uint64_t v21 = v19[5];
    uint64_t v22 = &v17[v21];
    uint64_t v23 = &v18[v21];
    uint64_t v24 = type metadata accessor for URL();
    if (sub_1001F758C((uint64_t)v23, 1, v24))
    {
      uint64_t v25 = sub_1001F081C(&qword_1005878F0);
      memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      sub_1001F0530((uint64_t)v22, 0, 1, v24);
    }
    *(_OWORD *)&v17[v19[6]] = *(_OWORD *)&v18[v19[6]];
    v17[v19[7]] = v18[v19[7]];
    sub_1001F0530((uint64_t)v17, 0, 1, (uint64_t)v19);
  }
  uint64_t v26 = a3[8];
  int v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = sub_1001F081C(&qword_100585A40);
  if (sub_1001F758C((uint64_t)v28, 2, v29))
  {
    uint64_t v30 = type metadata accessor for SoundDescriptorAction();
    memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v31 = *((void *)v28 + 1);
    *(void *)int v27 = *(void *)v28;
    *((void *)v27 + 1) = v31;
    v27[16] = v28[16];
    *((void *)v27 + 3) = *((void *)v28 + 3);
    uint64_t v32 = type metadata accessor for SoundDescriptor();
    uint64_t v33 = *(int *)(v32 + 32);
    uint64_t v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    uint64_t v36 = type metadata accessor for UUID();
    if (sub_1001F758C((uint64_t)v35, 1, v36))
    {
      uint64_t v37 = sub_1001F081C((uint64_t *)&unk_100585580);
      memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
      sub_1001F0530((uint64_t)v34, 0, 1, v36);
    }
    v27[*(int *)(v32 + 36)] = v28[*(int *)(v32 + 36)];
    sub_1001F0530((uint64_t)v27, 0, 2, v29);
  }
  uint64_t v38 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v39 = &a1[v38];
  id v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((_WORD *)v39 + 4) = *((_WORD *)v40 + 4);
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t sub_100314970(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  if (*(void *)(a1 + 40) == 1) {
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8 == 1)
  {
    sub_100314508(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    goto LABEL_6;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
LABEL_6:
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 55);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_unknownObjectRelease();
  *(void *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v12 = a3[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  int v16 = sub_1001F758C((uint64_t)v13, 1, v15);
  int v17 = sub_1001F758C((uint64_t)v14, 1, v15);
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v13, v14, v18);
      sub_1001F0530((uint64_t)v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v17)
  {
    sub_100316CF0((uint64_t)v13, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
LABEL_11:
    uint64_t v19 = sub_1001F081C(&qword_100584C70);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v39 = type metadata accessor for UUID();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v39 - 8) + 40))(v13, v14, v39);
LABEL_12:
  uint64_t v20 = a3[6];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  if (*(void *)(a1 + v20 + 8))
  {
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      *(void *)(v21 + 8) = v23;
      swift_bridgeObjectRelease();
      *(void *)(v21 + 16) = *(void *)(v22 + 16);
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void **)(v21 + 24);
      *(void *)(v21 + 24) = *(void *)(v22 + 24);

      uint64_t v25 = *(void **)(v21 + 32);
      *(void *)(v21 + 32) = *(void *)(v22 + 32);

      *(unsigned char *)(v21 + 40) = *(unsigned char *)(v22 + 40);
      *(unsigned char *)(v21 + 41) = *(unsigned char *)(v22 + 41);
      goto LABEL_17;
    }
    sub_10031455C(v21);
  }
  long long v26 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v26;
  *(_OWORD *)(v21 + 26) = *(_OWORD *)(v22 + 26);
LABEL_17:
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = (int *)type metadata accessor for RingtoneDescriptor();
  int v31 = sub_1001F758C((uint64_t)v28, 1, (uint64_t)v30);
  int v32 = sub_1001F758C((uint64_t)v29, 1, (uint64_t)v30);
  if (!v31)
  {
    if (v32)
    {
      sub_100316CF0((uint64_t)v28, (void (*)(void))type metadata accessor for RingtoneDescriptor);
      goto LABEL_23;
    }
    uint64_t v40 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v40;
    swift_bridgeObjectRelease();
    uint64_t v41 = v30[5];
    uint64_t v42 = (char *)v28 + v41;
    id v43 = (char *)v29 + v41;
    uint64_t v44 = type metadata accessor for URL();
    int v45 = sub_1001F758C((uint64_t)v42, 1, v44);
    int v46 = sub_1001F758C((uint64_t)v43, 1, v44);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
        sub_1001F0530((uint64_t)v42, 0, 1, v44);
LABEL_33:
        uint64_t v49 = v30[6];
        uint64_t v50 = (void *)((char *)v28 + v49);
        uint64_t v51 = (void *)((char *)v29 + v49);
        uint64_t v53 = *v51;
        uint64_t v52 = v51[1];
        void *v50 = v53;
        v50[1] = v52;
        swift_bridgeObjectRelease();
        *((unsigned char *)v28 + v30[7]) = *((unsigned char *)v29 + v30[7]);
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v47 = *(void *)(v44 - 8);
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 40))(v42, v43, v44);
        goto LABEL_33;
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v44);
    }
    uint64_t v48 = sub_1001F081C(&qword_1005878F0);
    memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_33;
  }
  if (v32)
  {
LABEL_23:
    uint64_t v38 = sub_1001F081C((uint64_t *)&unk_10058A130);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_34;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  uint64_t v33 = v30[5];
  uint64_t v34 = (char *)v28 + v33;
  uint64_t v35 = (char *)v29 + v33;
  uint64_t v36 = type metadata accessor for URL();
  if (sub_1001F758C((uint64_t)v35, 1, v36))
  {
    uint64_t v37 = sub_1001F081C(&qword_1005878F0);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
    sub_1001F0530((uint64_t)v34, 0, 1, v36);
  }
  *(_OWORD *)((char *)v28 + v30[6]) = *(_OWORD *)((char *)v29 + v30[6]);
  *((unsigned char *)v28 + v30[7]) = *((unsigned char *)v29 + v30[7]);
  sub_1001F0530((uint64_t)v28, 0, 1, (uint64_t)v30);
LABEL_34:
  uint64_t v54 = a3[8];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  uint64_t v57 = sub_1001F081C(&qword_100585A40);
  int v58 = sub_1001F758C(v55, 2, v57);
  int v59 = sub_1001F758C(v56, 2, v57);
  if (!v58)
  {
    if (v59)
    {
      sub_1002392A8(v55, &qword_100585A40);
      goto LABEL_40;
    }
    uint64_t v68 = *(void *)(v56 + 8);
    unint64_t v69 = *(void **)(v55 + 8);
    *(void *)uint64_t v55 = *(void *)v56;
    *(void *)(v55 + 8) = v68;

    *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
    *(void *)(v55 + 24) = *(void *)(v56 + 24);
    uint64_t v70 = type metadata accessor for SoundDescriptor();
    uint64_t v71 = *(int *)(v70 + 32);
    uint64_t v72 = (void *)(v55 + v71);
    uint64_t v73 = (const void *)(v56 + v71);
    uint64_t v74 = type metadata accessor for UUID();
    int v75 = sub_1001F758C((uint64_t)v72, 1, v74);
    int v76 = sub_1001F758C((uint64_t)v73, 1, v74);
    if (v75)
    {
      if (!v76)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v74 - 8) + 32))(v72, v73, v74);
        sub_1001F0530((uint64_t)v72, 0, 1, v74);
LABEL_49:
        *(unsigned char *)(v55 + *(int *)(v70 + 36)) = *(unsigned char *)(v56 + *(int *)(v70 + 36));
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v77 = *(void *)(v74 - 8);
      if (!v76)
      {
        (*(void (**)(void *, const void *, uint64_t))(v77 + 40))(v72, v73, v74);
        goto LABEL_49;
      }
      (*(void (**)(void *, uint64_t))(v77 + 8))(v72, v74);
    }
    uint64_t v78 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v72, v73, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_49;
  }
  if (v59)
  {
LABEL_40:
    uint64_t v67 = type metadata accessor for SoundDescriptorAction();
    memcpy((void *)v55, (const void *)v56, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_50;
  }
  uint64_t v60 = *(void *)(v56 + 8);
  *(void *)uint64_t v55 = *(void *)v56;
  *(void *)(v55 + 8) = v60;
  *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
  *(void *)(v55 + 24) = *(void *)(v56 + 24);
  uint64_t v61 = type metadata accessor for SoundDescriptor();
  uint64_t v62 = *(int *)(v61 + 32);
  id v63 = (void *)(v55 + v62);
  uint64_t v64 = (const void *)(v56 + v62);
  uint64_t v65 = type metadata accessor for UUID();
  if (sub_1001F758C((uint64_t)v64, 1, v65))
  {
    uint64_t v66 = sub_1001F081C((uint64_t *)&unk_100585580);
    memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
    sub_1001F0530((uint64_t)v63, 0, 1, v65);
  }
  *(unsigned char *)(v55 + *(int *)(v61 + 36)) = *(unsigned char *)(v56 + *(int *)(v61 + 36));
  sub_1001F0530(v55, 0, 2, v57);
LABEL_50:
  uint64_t v79 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v80 = a1 + v79;
  uint64_t v81 = a2 + v79;
  *(void *)uint64_t v80 = *(void *)v81;
  *(_WORD *)(v80 + 8) = *(_WORD *)(v81 + 8);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100315260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100315274);
}

uint64_t sub_100315274(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1001F081C(&qword_100584C70);
    sub_100274480();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }
    else
    {
      sub_1001F081C((uint64_t *)&unk_10058A130);
      sub_100274480();
      if (*(_DWORD *)(v13 + 84) == a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }
      else
      {
        uint64_t v10 = type metadata accessor for SoundDescriptorAction();
        uint64_t v11 = a3[8];
      }
    }
    return sub_1001F758C(a1 + v11, a2, v10);
  }
}

uint64_t sub_10031534C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100315360);
}

uint64_t sub_100315360(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1001F081C(&qword_100584C70);
    sub_100274480();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }
    else
    {
      sub_1001F081C((uint64_t *)&unk_10058A130);
      sub_100274480();
      if (*(_DWORD *)(v13 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }
      else
      {
        uint64_t v10 = type metadata accessor for SoundDescriptorAction();
        uint64_t v11 = a4[8];
      }
    }
    return sub_1001F0530(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AudioDescriptor()
{
  uint64_t result = qword_1005898B8;
  if (!qword_1005898B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10031547C()
{
  sub_1003155E4(319, &qword_1005898C8, (void (*)(uint64_t))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  if (v0 <= 0x3F)
  {
    sub_1003155E4(319, (unint64_t *)&unk_1005898D0, (void (*)(uint64_t))type metadata accessor for RingtoneDescriptor);
    if (v1 <= 0x3F)
    {
      type metadata accessor for SoundDescriptorAction();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1003155E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100315638(uint64_t a1, uint64_t a2)
{
  uint64_t v143 = type metadata accessor for RingtoneDescriptor();
  sub_10020233C();
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  uint64_t v140 = v5;
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_10058A130);
  __chkstk_darwin(v6 - 8);
  sub_1001FCCD0();
  uint64_t v141 = v7;
  uint64_t v142 = sub_1001F081C(&qword_100589918);
  sub_10020233C();
  __chkstk_darwin(v8);
  sub_1001FCCD0();
  uint64_t v144 = v9;
  uint64_t v149 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  sub_10020233C();
  __chkstk_darwin(v10);
  sub_1001FCCD0();
  uint64_t v145 = v11;
  uint64_t v12 = sub_1001F081C(&qword_100584C70);
  __chkstk_darwin(v12 - 8);
  sub_1001FCCD0();
  id v146 = v13;
  uint64_t v147 = sub_1001F081C(&qword_100589920);
  sub_10020233C();
  __chkstk_darwin(v14);
  sub_1001FCCD0();
  uint64_t v148 = (void *)v15;
  uint64_t v150 = (int *)type metadata accessor for AudioDescriptor();
  sub_10020233C();
  __chkstk_darwin(v16);
  uint64_t v152 = (uint64_t)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B8138();
  __chkstk_darwin(v18);
  sub_10026B98C();
  uint64_t v151 = v19;
  sub_1002B8138();
  __chkstk_darwin(v20);
  sub_10026B98C();
  uint64_t v156 = v21;
  sub_1002B8138();
  __chkstk_darwin(v22);
  sub_10026B98C();
  uint64_t v155 = v23;
  sub_1002B8138();
  __chkstk_darwin(v24);
  sub_10026B98C();
  uint64_t v154 = v25;
  sub_1002B8138();
  __chkstk_darwin(v26);
  sub_10026B98C();
  uint64_t v153 = v27;
  sub_1002B8138();
  __chkstk_darwin(v28);
  sub_10026B98C();
  uint64_t v163 = v29;
  sub_1002B8138();
  __chkstk_darwin(v30);
  sub_10026B98C();
  uint64_t v157 = v31;
  sub_1002B8138();
  __chkstk_darwin(v32);
  sub_10026B98C();
  uint64_t v159 = (uint64_t (*)())v33;
  sub_1002B8138();
  __chkstk_darwin(v34);
  sub_10026B98C();
  uint64_t v160 = v35;
  sub_1002B8138();
  __chkstk_darwin(v36);
  sub_10026B98C();
  uint64_t v161 = v37;
  sub_1002B8138();
  __chkstk_darwin(v38);
  sub_10026B98C();
  uint64_t v162 = v39;
  sub_1002B8138();
  uint64_t v41 = __chkstk_darwin(v40);
  id v43 = (char *)&v135 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  int v46 = (char *)&v135 - v45;
  uint64_t v47 = __chkstk_darwin(v44);
  uint64_t v49 = (char *)&v135 - v48;
  __chkstk_darwin(v47);
  uint64_t v51 = (char *)&v135 - v50;
  sub_100316DA8(a1, (uint64_t)&v135 - v50, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316DA8(a2, (uint64_t)v49, (void (*)(void))type metadata accessor for AudioDescriptor);
  memcpy(v170, v51, 0x99uLL);
  memcpy(__dst, v49, 0x99uLL);
  char v52 = sub_10034AFC8((uint64_t)v170, (uint64_t)__dst);
  uint64_t v53 = (uint64_t)v51;
  uint64_t v54 = (void *)a2;
  sub_100316CF0(v53, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0((uint64_t)v49, (void (*)(void))type metadata accessor for AudioDescriptor);
  uint64_t v158 = a1;
  sub_100316DA8(a1, (uint64_t)v46, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316DA8(a2, (uint64_t)v43, (void (*)(void))type metadata accessor for AudioDescriptor);
  if ((v52 & 1) == 0)
  {
    uint64_t v61 = type metadata accessor for AudioDescriptor;
    sub_100316CF0((uint64_t)v43, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0((uint64_t)v46, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v63 = v158;
    uint64_t v66 = v159;
    uint64_t v64 = v162;
    uint64_t v65 = v163;
    uint64_t v67 = v160;
LABEL_9:
    sub_100316DA8(v63, v64, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316E28();
LABEL_10:
    sub_100316CF0((uint64_t)v61, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v64, (void (*)(void))type metadata accessor for AudioDescriptor);
LABEL_11:
    sub_100316DA8(v63, v67, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316DA8((uint64_t)v54, (uint64_t)v66, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v70 = v157;
LABEL_12:
    sub_100316CF0((uint64_t)v66, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v67, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v72 = v153;
    uint64_t v71 = v154;
LABEL_13:
    sub_100316DA8(v63, v70, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316DA8((uint64_t)v54, v65, (void (*)(void))type metadata accessor for AudioDescriptor);
LABEL_14:
    sub_100316CF0(v65, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v70, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316DA8(v63, v72, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316DA8((uint64_t)v54, v71, (void (*)(void))type metadata accessor for AudioDescriptor);
LABEL_15:
    sub_100316CF0(v71, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v72, (void (*)(void))type metadata accessor for AudioDescriptor);
    goto LABEL_16;
  }
  uint64_t v55 = v150[5];
  uint64_t v56 = (uint64_t)&v43[v55];
  uint64_t v57 = (uint64_t)v148;
  uint64_t v58 = (uint64_t)v148 + *(int *)(v147 + 48);
  sub_100201830((uint64_t)&v46[v55], (uint64_t)v148, &qword_100584C70);
  sub_100201830(v56, v58, &qword_100584C70);
  uint64_t v59 = v149;
  if (sub_1001F758C(v57, 1, v149) == 1)
  {
    uint64_t v60 = v57;
    uint64_t v61 = type metadata accessor for AudioDescriptor;
    sub_100316CF0((uint64_t)v43, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0((uint64_t)v46, (void (*)(void))type metadata accessor for AudioDescriptor);
    int v62 = sub_1001F758C(v58, 1, v59);
    uint64_t v63 = v158;
    uint64_t v64 = v162;
    uint64_t v65 = v163;
    if (v62 == 1)
    {
      sub_1002392A8(v60, &qword_100584C70);
      sub_100316DA8(v63, v64, (void (*)(void))type metadata accessor for AudioDescriptor);
      sub_100316E28();
      goto LABEL_22;
    }
    goto LABEL_8;
  }
  uint64_t v68 = v146;
  sub_100201830(v57, (uint64_t)v146, &qword_100584C70);
  int v69 = sub_1001F758C(v58, 1, v59);
  uint64_t v60 = v57;
  uint64_t v63 = v158;
  uint64_t v65 = v163;
  if (v69 == 1)
  {
    uint64_t v61 = type metadata accessor for AudioDescriptor;
    sub_100316CF0((uint64_t)v43, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0((uint64_t)v46, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0((uint64_t)v68, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
    uint64_t v64 = v162;
LABEL_8:
    sub_1002392A8(v60, &qword_100589920);
    uint64_t v66 = v159;
    uint64_t v67 = v160;
    goto LABEL_9;
  }
  uint64_t v77 = v58;
  uint64_t v78 = v145;
  sub_100316D48(v77, v145, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  LODWORD(v149) = static UUID.== infix(_:_:)();
  uint64_t v61 = v68;
  sub_100316CF0(v78, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  sub_100316CF0((uint64_t)v43, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0((uint64_t)v46, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0((uint64_t)v68, (void (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  sub_1002392A8(v60, &qword_100584C70);
  uint64_t v64 = v162;
  sub_100316DA8(v63, v162, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316E28();
  uint64_t v66 = v159;
  uint64_t v67 = v160;
  if ((v149 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_22:
  uint64_t v79 = v150[6];
  uint64_t v80 = *(void *)(v64 + v79);
  uint64_t v148 = v54;
  uint64_t v149 = v80;
  uint64_t v54 = *(void **)(v64 + v79 + 8);
  uint64_t v81 = *(void *)(v64 + v79 + 16);
  uint64_t v82 = *(void **)(v64 + v79 + 24);
  uint64_t v66 = *(uint64_t (**)())(v64 + v79 + 32);
  int v83 = *(unsigned __int16 *)(v64 + v79 + 40);
  uint64_t v84 = (char *)v61 + v79;
  uint64_t v85 = *(void *)v84;
  uint64_t v86 = *((void *)v84 + 1);
  uint64_t v88 = *((void *)v84 + 2);
  id v87 = (void *)*((void *)v84 + 3);
  uint64_t v89 = (uint64_t (*)())*((void *)v84 + 4);
  unsigned __int16 v90 = *((_WORD *)v84 + 20);
  LODWORD(v147) = v90;
  uint64_t v145 = v85;
  id v146 = v89;
  if (!v54)
  {
    int v139 = v83;
    uint64_t v136 = v88;
    id v137 = v87;
    sub_100294F94(v85, v86, v88, v87, v89);
    uint64_t v66 = type metadata accessor for AudioDescriptor;
    sub_100316CF0((uint64_t)v61, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v64, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v99 = v149;
    if (!v86)
    {
      sub_100316E94(v149, 0, v81);
      uint64_t v67 = v160;
      sub_100316DA8(v63, v160, (void (*)(void))type metadata accessor for AudioDescriptor);
      sub_100316E54();
      uint64_t v65 = v163;
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  uint64_t v138 = v81;
  if (!v86)
  {
    uint64_t v136 = v88;
    id v137 = v87;
    uint64_t v106 = v66;
    id v107 = v82;
    uint64_t v108 = v106;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v109 = v107;
    uint64_t v110 = v108;
    uint64_t v63 = v158;
    sub_100316CF0(v161, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v162, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v99 = v149;
    sub_100316E94(v149, (uint64_t)v54, v138);
LABEL_32:
    sub_100316E94(v99, (uint64_t)v54, v81);
    sub_1002BD990(v145, v86, v136, v137, v146);
    uint64_t v54 = v148;
    uint64_t v65 = v163;
    uint64_t v66 = v159;
    uint64_t v67 = v160;
    goto LABEL_11;
  }
  v166[0] = v149;
  v166[1] = v54;
  v166[2] = v81;
  v166[3] = v82;
  uint64_t v91 = v81;
  v166[4] = v66;
  __int16 v167 = v83 & 0x101;
  int v139 = v83;
  v168[0] = v85;
  v168[1] = v86;
  v168[2] = v88;
  v168[3] = v87;
  v168[4] = v89;
  __int16 v169 = v90 & 0x101;
  uint64_t v92 = v85;
  uint64_t v93 = (uint64_t)v54;
  id v137 = v54;
  uint64_t v54 = (void *)v88;
  uint64_t v135 = v86;
  uint64_t v94 = v87;
  unint64_t v95 = v89;
  sub_100294F94(v149, v93, v91, v82, v66);
  sub_100294F94(v92, v86, (uint64_t)v54, v94, v95);
  uint64_t v96 = v149;
  uint64_t v97 = (uint64_t)v137;
  uint64_t v98 = v138;
  sub_100294F94(v149, (uint64_t)v137, v138, v82, v66);
  LODWORD(v158) = sub_1002F7A90((uint64_t)v166, (uint64_t)v168);
  sub_1002BD990(v145, v135, (uint64_t)v54, v94, v146);
  sub_1002BD990(v96, v97, v98, v82, v66);
  sub_100316CF0(v161, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0(v162, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_1002BD990(v96, v97, v98, v82, v66);
  uint64_t v67 = v160;
  sub_100316DA8(v63, v160, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316E54();
  uint64_t v70 = v157;
  uint64_t v65 = v163;
  if ((v158 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_28:
  uint64_t v100 = v150[7];
  uint64_t v101 = (uint64_t)v66 + v100;
  uint64_t v102 = v144;
  uint64_t v103 = v144 + *(int *)(v142 + 48);
  sub_100201830(v67 + v100, v144, (uint64_t *)&unk_10058A130);
  sub_100201830(v101, v103, (uint64_t *)&unk_10058A130);
  uint64_t v104 = v143;
  if (sub_1001F758C(v102, 1, v143) == 1)
  {
    sub_100316CF0((uint64_t)v66, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v67, (void (*)(void))type metadata accessor for AudioDescriptor);
    int v105 = sub_1001F758C(v103, 1, v104);
    uint64_t v72 = v153;
    uint64_t v71 = v154;
    uint64_t v70 = v157;
    if (v105 == 1)
    {
      sub_1002392A8(v144, (uint64_t *)&unk_10058A130);
      sub_100316DA8(v63, v70, (void (*)(void))type metadata accessor for AudioDescriptor);
      sub_100316DA8((uint64_t)v54, v65, (void (*)(void))type metadata accessor for AudioDescriptor);
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  uint64_t v111 = v141;
  sub_100201830(v102, v141, (uint64_t *)&unk_10058A130);
  int v112 = sub_1001F758C(v103, 1, v104);
  uint64_t v113 = v102;
  uint64_t v72 = v153;
  uint64_t v71 = v154;
  if (v112 == 1)
  {
    sub_100316CF0((uint64_t)v159, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v160, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v111, (void (*)(void))type metadata accessor for RingtoneDescriptor);
    uint64_t v70 = v157;
LABEL_35:
    sub_1002392A8(v144, &qword_100589918);
    goto LABEL_13;
  }
  uint64_t v114 = v140;
  sub_100316D48(v103, v140, (void (*)(void))type metadata accessor for RingtoneDescriptor);
  LODWORD(v163) = sub_10031A174(v111, v114);
  sub_100316CF0(v114, (void (*)(void))type metadata accessor for RingtoneDescriptor);
  sub_100316CF0((uint64_t)v159, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0(v160, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0(v111, (void (*)(void))type metadata accessor for RingtoneDescriptor);
  sub_1002392A8(v113, (uint64_t *)&unk_10058A130);
  uint64_t v70 = v157;
  sub_100316DA8(v63, v157, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316DA8((uint64_t)v54, v65, (void (*)(void))type metadata accessor for AudioDescriptor);
  if ((v163 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_37:
  id v115 = v150;
  char v116 = sub_10028BF10(v70 + v150[8], v65 + v150[8]);
  sub_100316CF0(v65, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316CF0(v70, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316DA8(v63, v72, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_100316DA8((uint64_t)v54, v71, (void (*)(void))type metadata accessor for AudioDescriptor);
  if ((v116 & 1) == 0) {
    goto LABEL_15;
  }
  char v117 = *(unsigned char *)(v72 + v115[9]);
  sub_100316CF0(v72, (void (*)(void))type metadata accessor for AudioDescriptor);
  char v118 = *(unsigned char *)(v71 + v115[9]);
  sub_100316CF0(v71, (void (*)(void))type metadata accessor for AudioDescriptor);
  if ((v117 & 1) == 0)
  {
    if ((v118 & 1) == 0) {
      goto LABEL_42;
    }
LABEL_16:
    uint64_t v73 = v155;
    sub_100316DA8(v63, v155, (void (*)(void))type metadata accessor for AudioDescriptor);
    uint64_t v74 = v156;
    sub_100316DA8((uint64_t)v54, v156, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v74, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v73, (void (*)(void))type metadata accessor for AudioDescriptor);
    goto LABEL_17;
  }
  if ((v118 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_42:
  uint64_t v119 = v155;
  sub_100316DA8(v63, v155, (void (*)(void))type metadata accessor for AudioDescriptor);
  id v120 = v115;
  uint64_t v121 = v156;
  sub_100316DA8((uint64_t)v54, v156, (void (*)(void))type metadata accessor for AudioDescriptor);
  uint64_t v122 = v119 + v120[10];
  uint64_t v71 = *(void *)v122;
  uint64_t v123 = *(unsigned __int16 *)(v122 + 8);
  sub_100316CF0(v119, (void (*)(void))type metadata accessor for AudioDescriptor);
  uint64_t v124 = v120;
  uint64_t v125 = v121 + v120[10];
  uint64_t v126 = *(void *)v125;
  uint64_t v127 = *(unsigned __int16 *)(v125 + 8);
  sub_100316CF0(v121, (void (*)(void))type metadata accessor for AudioDescriptor);
  if (v71 == 3)
  {
    if (v126 == 3)
    {
      uint64_t v75 = v151;
      sub_100316DA8(v63, v151, (void (*)(void))type metadata accessor for AudioDescriptor);
      sub_100316EB0();
      goto LABEL_47;
    }
    goto LABEL_17;
  }
  if (v126 == 3)
  {
LABEL_17:
    uint64_t v75 = v151;
    sub_100316DA8(v63, v151, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316EB0();
LABEL_18:
    sub_100316CF0(v71, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100316CF0(v75, (void (*)(void))type metadata accessor for AudioDescriptor);
    return 0;
  }
  *((void *)&v129 + 1) = v123;
  *(void *)&long long v129 = v71;
  uint64_t v128 = v129 >> 32;
  *((void *)&v129 + 1) = v127;
  *(void *)&long long v129 = v126;
  LOBYTE(v164) = v71;
  HIDWORD(v164) = v128;
  LOBYTE(v165) = BYTE4(v128);
  HIBYTE(v165) = BYTE1(v123) & 1;
  unint64_t v130 = v164;
  __int16 v131 = v165;
  LOBYTE(v164) = v126;
  HIDWORD(v164) = HIDWORD(v126);
  LOBYTE(v165) = (unint64_t)(v129 >> 32) >> 32;
  HIBYTE(v165) = BYTE1(v127) & 1;
  char v132 = sub_100202844(v130, v131, v164, v165);
  uint64_t v75 = v151;
  sub_100316DA8(v63, v151, (void (*)(void))type metadata accessor for AudioDescriptor);
  uint64_t v71 = v152;
  sub_100316DA8((uint64_t)v54, v152, (void (*)(void))type metadata accessor for AudioDescriptor);
  if ((v132 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_47:
  char v133 = *(unsigned char *)(v75 + v124[11]);
  sub_100316CF0(v75, (void (*)(void))type metadata accessor for AudioDescriptor);
  char v134 = *(unsigned char *)(v71 + v124[11]);
  sub_100316CF0(v71, (void (*)(void))type metadata accessor for AudioDescriptor);
  if (v133)
  {
    if (v134) {
      return 1;
    }
  }
  else if ((v134 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

unint64_t sub_1003167CC()
{
  unint64_t v1 = v0;
  type metadata accessor for SoundDescriptorAction();
  sub_10020233C();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = 0xD000000000000010;
  unint64_t v45 = 0x8000000100487BF0;
  v46[0] = 0;
  v46[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0xD000000000000018;
  v43._object = (void *)0x8000000100487C10;
  memcpy(v46, v0, 0x99uLL);
  memcpy(v42, v0, 0x99uLL);
  sub_10023C3D8((uint64_t)v46);
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_100316E48();
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000023);
  uint64_t v7 = (int *)type metadata accessor for AudioDescriptor();
  v8._uint64_t countAndFlagsBits = sub_1001FD154((uint64_t)&v0[v7[5]]);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  String.append(_:)(v42[0]);
  swift_bridgeObjectRelease();
  sub_100316E48();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v43._object = (void *)0x8000000100487C60;
  uint64_t v9 = &v0[v7[6]];
  uint64_t v10 = (void *)*((void *)v9 + 1);
  if (v10)
  {
    __int16 v11 = *((_WORD *)v9 + 20);
    uint64_t v12 = (void *)*((void *)v9 + 3);
    uint64_t v13 = (void *)*((void *)v9 + 4);
    uint64_t v14 = *((void *)v9 + 2);
    v42[0]._uint64_t countAndFlagsBits = *(void *)v9;
    v42[0]._object = v10;
    v42[1]._uint64_t countAndFlagsBits = v14;
    v42[1]._object = v12;
    v42[2]._uint64_t countAndFlagsBits = (uint64_t)v13;
    LOWORD(v42[2]._object) = v11 & 0x101;
    id v15 = v12;
    id v16 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = String.init<A>(reflecting:)();
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0xE300000000000000;
    uint64_t v17 = sub_10026B7CC();
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 32;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_100316E48();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000014);
  v22._uint64_t countAndFlagsBits = sub_1001FD188((uint64_t)&v1[v7[7]]);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  String.append(_:)(v42[0]);
  swift_bridgeObjectRelease();
  sub_100316E48();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000017);
  sub_100316DA8((uint64_t)&v1[v7[8]], (uint64_t)v4, (void (*)(void))type metadata accessor for SoundDescriptorAction);
  v23._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  sub_100316E78();
  swift_bridgeObjectRelease();
  sub_100316E48();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000015);
  if (v1[v7[9]])
  {
    unint64_t v24 = 0xE300000000000000;
    uint64_t v25 = sub_10026B7CC();
  }
  else
  {
    uint64_t v25 = String.init<A>(reflecting:)();
    unint64_t v24 = v26;
  }
  unint64_t v27 = v24;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  sub_100316E78();
  swift_bridgeObjectRelease();
  v42[0]._uint64_t countAndFlagsBits = 0;
  v42[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000016);
  uint64_t v28 = &v1[v7[10]];
  uint64_t v29 = *(void *)v28;
  if (*(void *)v28 == 3)
  {
    unint64_t v30 = 0xE300000000000000;
    uint64_t v31 = sub_10026B7CC();
  }
  else
  {
    *((void *)&v32 + 1) = *((unsigned __int16 *)v28 + 4);
    *(void *)&long long v32 = *(void *)v28;
    LOBYTE(v43._countAndFlagsBits) = *(void *)v28;
    HIDWORD(v43._countAndFlagsBits) = HIDWORD(v29);
    LOBYTE(v43._object) = (unint64_t)(v32 >> 32) >> 32;
    BYTE1(v43._object) = BYTE9(v32) & 1;
    uint64_t v31 = String.init<A>(reflecting:)();
    unint64_t v30 = v33;
  }
  unint64_t v34 = v30;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  sub_100316E78();
  swift_bridgeObjectRelease();
  v42[0]._uint64_t countAndFlagsBits = 0;
  v42[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  sub_100316E18(0xD000000000000019);
  if (v1[v7[11]])
  {
    unint64_t v35 = 0xE300000000000000;
    uint64_t v36 = sub_10026B7CC();
  }
  else
  {
    uint64_t v36 = String.init<A>(reflecting:)();
    unint64_t v35 = v37;
  }
  unint64_t v38 = v35;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease();
  sub_100316DFC();
  String.append(_:)(v42[0]);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 41;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  return v44;
}

uint64_t sub_100316CF0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10020233C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100316D48(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_100316DA8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10020233C();
  uint64_t v4 = sub_100202610();
  v5(v4);
  return a2;
}

void sub_100316DFC()
{
  uint64_t v1 = 32;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_100316E18(uint64_t a1@<X8>)
{
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_100316E28()
{
  uint64_t v4 = *(void *)(v0 + 208);
  return sub_100316DA8(v2, v4, v1);
}

void sub_100316E48()
{
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = v1;
}

uint64_t sub_100316E54()
{
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 192);
  return sub_100316DA8(v3, v4, v1);
}

void sub_100316E78()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_100316E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002BD990(a1, a2, a3, v3, v4);
}

uint64_t sub_100316EB0()
{
  uint64_t v4 = *(void *)(v0 + 136);
  return sub_100316DA8(v2, v4, v1);
}

uint64_t sub_100316ED0(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      unint64_t v19 = v5;
      id v7 = [v5 uniqueIdentifier];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      id v11 = [a2 uniqueIdentifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v8 == v12 && v10 == v14)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_17:
        uint64_t v3 = (uint64_t)v19;
        swift_bridgeObjectRelease();
        return v3;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16)
      {

        goto LABEL_17;
      }

      if (v6 == v3)
      {

        swift_bridgeObjectRelease();
        return 0;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1003170A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1001F2514();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *(void *)(v6 - v5) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v6 - v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  if (v8) {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_100317198(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

uint64_t sub_1003171B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = *(void (**)(uint64_t))(v1
                                         + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
    if (v10)
    {
      sub_1002084D8((uint64_t)v10);
      uint64_t v11 = swift_bridgeObjectRetain();
      char v12 = sub_1002F8048(v11, a1);
      uint64_t v13 = swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        v10(v13);
      }
      return sub_100208490((uint64_t)v10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100317334(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes) = a1;
  sub_1003171B8(v2);

  return swift_bridgeObjectRelease();
}

id sub_10031737C(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

void sub_1003173F0(void *a1)
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100235BE8();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *uint64_t v2 = v5;
  uint64_t v6 = sub_100317DD0();
  v7(v6);
  id v8 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = sub_100317DB4();
  v10(v9);
  if (v5)
  {
    if (qword_1005839A0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  unint64_t v12 = sub_1002ED90C();
  *(void *)(v11 + 56) = v12;
  uint64_t v13 = sub_100317BD0((unint64_t *)&qword_1005865B0, (void (*)(uint64_t))sub_1002ED90C);
  *(void *)(v11 + 64) = v13;
  *(void *)(v11 + 32) = a1;
  id v14 = a1;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes;
  id v16 = v14;
  unint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = (void *)sub_100316ED0(v17, v16);
  swift_bridgeObjectRelease();

  if (!v18)
  {
    static os_log_type_t.error.getter();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10048FB00;
    *(void *)(v19 + 56) = v12;
    *(void *)(v19 + 64) = v13;
    *(void *)(v19 + 32) = v16;
    uint64_t v20 = *(void *)(v1 + v15);
    *(void *)(v19 + 96) = sub_1001F081C(&qword_100588978);
    *(void *)(v19 + 104) = sub_1001FCB74(&qword_1005894D0, &qword_100588978);
    *(void *)(v19 + 72) = v20;
    id v21 = v16;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100317698(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  sub_1001FCCD0();
  uint64_t v45 = v5;
  uint64_t v46 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v44 = v6;
  __chkstk_darwin(v7);
  sub_1001FCCD0();
  uint64_t v43 = v8;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v15 = (uint64_t *)(v14 - v13);
  uint64_t v42 = type metadata accessor for DispatchWallTime();
  sub_1001F6398();
  uint64_t v17 = v16;
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::String v23 = (char *)v39 - v22;
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_1001F2514();
  uint64_t v30 = v29 - v28;
  uint64_t v31 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *(void *)(v29 - v28) = v31;
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v29 - v28, enum case for DispatchPredicate.onQueue(_:), v24);
  v39[1] = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v30, v24);
  if (v31)
  {
    static DispatchWallTime.now()();
    *uint64_t v15 = TUTransferTimeout();
    (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v15, enum case for DispatchTimeInterval.seconds(_:), v9);
    + infix(_:_:)();
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v15, v9);
    v39[0] = *(void *)(v17 + 8);
    uint64_t v33 = v41;
    uint64_t v34 = v42;
    ((void (*)(char *, uint64_t))v39[0])(v21, v42);
    aBlock[4] = v40;
    aBlock[5] = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_100514630;
    unint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v36 = v43;
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_100317BD0((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    uint64_t v37 = v45;
    uint64_t v38 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)();
    _Block_release(v35);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v46);
    ((void (*)(char *, uint64_t))v39[0])(v23, v34);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100317AE4()
{
}

uint64_t type metadata accessor for PairedHostDeviceRouteProvider()
{
  return self;
}

uint64_t sub_100317BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100317BC8()
{
  return swift_release();
}

uint64_t sub_100317BD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100317C18(uint64_t a1)
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100235BE8();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *uint64_t v2 = v5;
  uint64_t v6 = sub_100317DD0();
  v7(v6);
  id v8 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = sub_100317DB4();
  v10(v9);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_1005839A0 != -1) {
LABEL_5:
  }
    swift_once();
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  *(void *)(v11 + 56) = sub_1001F081C(&qword_100588978);
  *(void *)(v11 + 64) = sub_1001FCB74(&qword_1005894D0, &qword_100588978);
  *(void *)(v11 + 32) = a1;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_bridgeObjectRetain();
  return sub_100317334(v12);
}

uint64_t sub_100317DB4()
{
  return v0;
}

uint64_t sub_100317DD0()
{
  return v0;
}

void sub_100317DEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id sub_100317E64()
{
  if (qword_100583A68 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100594D00;

  return v0;
}

NSString sub_100317EC0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100594CF8 = (uint64_t)result;
  return result;
}

NSString sub_100317EF8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100594D00 = (uint64_t)result;
  return result;
}

id sub_100317F58(void *a1)
{
  objc_allocWithZone((Class)type metadata accessor for ApplicationInstallationObserver());
  uint64_t v3 = v1;
  id v4 = a1;
  *(void *)&v3[OBJC_IVAR___CSDCallRecordingLaunchService_applicationInstallationObserver] = sub_1002CA9F8(v4);

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for CallRecordingLaunchService();
  id v5 = objc_msgSendSuper2(&v7, "init");

  return v5;
}

id sub_100317FE4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingLaunchService_applicationInstallationObserver);
  NSString v2 = sub_1003191C0();
  id v3 = [v1 applicationRecordWithBundleID:v2];

  return v3;
}

id sub_100318044()
{
  id v0 = [objc_allocWithZone((Class)_LSOpenConfiguration) init];
  sub_1001F081C(&qword_1005899A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  *(unsigned char *)(inited + 48) = 1;
  Dictionary.init(dictionaryLiteral:)();
  sub_1003940B8();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  sub_100319098(v4, v0);
  return v0;
}

id sub_100318110()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingLaunchService_applicationInstallationObserver);
  NSString v2 = sub_1003191C0();
  id v3 = [v1 isApplicationInstalledWithBundleID:v2];

  return v3;
}

uint64_t sub_100318168(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Notification();
  sub_10026C880();
  __chkstk_darwin(v3);
  sub_100235BE8();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100318B60(v4, a2);
  if (qword_100583A60 != -1) {
    swift_once();
  }
  id v5 = (id)qword_100594CF8;
  sub_10025C67C();
  if (v6) {
    sub_1001F6204(0, (unint64_t *)&qword_100588810);
  }
  sub_1003191E0();
  sub_10031917C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10026B774();
  return v8(v7);
}

uint64_t sub_1003182AC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Notification();
  sub_10026C880();
  __chkstk_darwin(v3);
  sub_100235BE8();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100318B60(v4, a2);
  if (qword_100583A68 != -1) {
    swift_once();
  }
  id v5 = (id)qword_100594D00;
  sub_10025C9BC();
  if (v6) {
    sub_1001F6204(0, (unint64_t *)&qword_100588810);
  }
  sub_1003191E0();
  sub_10031917C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10026B774();
  return v8(v7);
}

void sub_1003183F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = sub_100317FE4();
  if (v4)
  {
    id v5 = v4;
    sub_1001F6204(0, &qword_100589998);
    swift_bridgeObjectRetain();
    id v6 = sub_100318888();
    if (a3) {
      v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    else {
      v7.super.Class isa = 0;
    }
    [v6 setUserInfo:v7.super.isa];

    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1001F5F88(v11, (uint64_t)qword_100594C58);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (a3)
      {
        swift_bridgeObjectRetain();
        sub_1001F081C((uint64_t *)&unk_100585020);
        uint64_t v15 = String.init<A>(reflecting:)();
        unint64_t v17 = v16;
      }
      else
      {
        unint64_t v17 = 0xE300000000000000;
        uint64_t v15 = 7104878;
      }
      sub_1002344D8(v15, v17, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Launching notes with user info %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v18 = [self defaultWorkspace];
    if (v18)
    {
      uint64_t v19 = v18;
      type metadata accessor for CallRecordingLaunchService();
      id v20 = v6;
      id v21 = v5;
      id v22 = sub_100318044();
      aBlock[4] = (uint64_t)sub_1003188FC;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100317DEC;
      void aBlock[3] = (uint64_t)&unk_100514678;
      Swift::String v23 = _Block_copy(aBlock);
      [v19 openUserActivity:v20 usingApplicationRecord:v21 configuration:v22 completionHandler:v23];
      _Block_release(v23);

      id v24 = [self defaultCenter];
      Class isa = Notification._bridgeToObjectiveC()().super.isa;
      [v24 postNotification:isa];
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_1001F5F88(v8, (uint64_t)qword_100594C58);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Could not launch Notes because we don't have the application record", v10, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_100318888()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithActivityType:v1];

  return v2;
}

void sub_1003188FC(uint64_t a1, uint64_t a2)
{
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594C58);
  swift_errorRetain();
  swift_errorRetain();
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = String.init<A>(reflecting:)();
    sub_1002344D8(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    if (a2)
    {
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v8 = String.init<A>(reflecting:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 7104878;
    }
    sub_1002344D8(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Opened user activity for call recording note success: %s %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100318B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001F081C(&qword_100584B40);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = Dictionary.init(dictionaryLiteral:)();
  *(void *)&long long v27 = 0xD000000000000015;
  *((void *)&v27 + 1) = 0x8000000100487EB0;
  AnyHashable.init<A>(_:)();
  UUID.init(uuidString:)();
  uint64_t v12 = type metadata accessor for UUID();
  sub_1003191A0((uint64_t)v11);
  uint64_t v26 = v6;
  if (v13)
  {
    sub_10021E23C((uint64_t)v11, (uint64_t *)&unk_100585580);
    long long v27 = 0u;
    long long v28 = 0u;
  }
  else
  {
    sub_100319148();
    sub_100319118();
    (*(void (**)(void))(v14 + 32))();
  }
  sub_100319160();
  *(void *)&long long v27 = 0xD000000000000014;
  *((void *)&v27 + 1) = 0x8000000100487ED0;
  sub_100319128();
  uint64_t v15 = a2 + OBJC_IVAR___CSDCallRecordingSession_uuid;
  sub_100319148();
  sub_100319118();
  unint64_t v17 = *(void (**)(void))(v16 + 16);
  v17();
  sub_1002C2704((uint64_t)&v27, (uint64_t)v29);
  *(void *)&long long v27 = 0xD000000000000014;
  *((void *)&v27 + 1) = 0x8000000100487EF0;
  sub_100319128();
  id v18 = sub_100319148();
  ((void (*)(uint64_t *, uint64_t, uint64_t))v17)(v18, v15, v12);
  sub_1002C2704((uint64_t)&v27, (uint64_t)v29);
  *(void *)&long long v27 = 0xD000000000000014;
  *((void *)&v27 + 1) = 0x8000000100487F10;
  sub_100319128();
  uint64_t v19 = a2 + OBJC_IVAR___CSDCallRecordingSession_dateStartedRecording;
  swift_beginAccess();
  sub_100319018(v19, (uint64_t)v8);
  type metadata accessor for Date();
  sub_1003191A0((uint64_t)v8);
  if (v13)
  {
    sub_10021E23C((uint64_t)v8, &qword_100584B40);
    long long v27 = 0u;
    long long v28 = 0u;
  }
  else
  {
    sub_100319148();
    sub_100319118();
    (*(void (**)(void))(v20 + 32))();
  }
  uint64_t v21 = (uint64_t)v26;
  sub_100319160();
  *(void *)&long long v27 = 0xD000000000000012;
  *((void *)&v27 + 1) = 0x8000000100487F30;
  AnyHashable.init<A>(_:)();
  uint64_t v22 = a2 + OBJC_IVAR___CSDCallRecordingSession_dateEndedRecording;
  swift_beginAccess();
  sub_100319018(v22, v21);
  sub_1003191A0(v21);
  if (v13)
  {
    sub_10021E23C(v21, &qword_100584B40);
    long long v27 = 0u;
    long long v28 = 0u;
  }
  else
  {
    sub_100319148();
    sub_100319118();
    (*(void (**)(void))(v23 + 32))();
  }
  sub_100319160();
  return v30;
}

void sub_100318F70()
{
}

id sub_100318FB0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallRecordingLaunchService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CallRecordingLaunchService()
{
  return self;
}

uint64_t sub_100319018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100584B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100319080(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100319090()
{
  return swift_release();
}

void sub_100319098(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setFrontBoardOptions:isa];
}

uint64_t sub_100319128()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t *sub_100319148()
{
  *(void *)(v1 - 136) = v0;
  return sub_1002044D8((uint64_t *)(v1 - 160));
}

uint64_t sub_100319160()
{
  return sub_1002C2704(v0 - 160, v0 - 128);
}

void sub_10031917C()
{
  sub_1003183F0(v2, v0, v1);
}

uint64_t sub_1003191A0(uint64_t a1)
{
  return sub_1001F758C(a1, 1, v1);
}

NSString sub_1003191C0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1003191E0()
{
  return Notification.init(name:object:userInfo:)(v0, v1 - 112, 0);
}

id sub_100319200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10029AC90(a1, (uint64_t)v12);
  if (sub_1001F758C((uint64_t)v12, 1, v13) == 1) {
    return (id)sub_10029ACF8((uint64_t)v12);
  }
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  id result = [self sharedInstance];
  if (result)
  {
    id v18 = result;
    sub_1001F081C(&qword_100585F08);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1004904F0;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v20;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = v13;
    uint64_t v21 = sub_1002044D8((uint64_t *)(inited + 72));
    (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 16))(v21, v16, v13);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v22;
    sub_100319588();
    *(void *)(inited + 168) = &type metadata for String;
    uint64_t v23 = v28;
    *(void *)(inited + 144) = v27;
    *(void *)(inited + 152) = v23;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v24;
    swift_bridgeObjectRetain();
    sub_100319588();
    *(void *)(inited + 240) = &type metadata for String;
    uint64_t v25 = v30;
    *(void *)(inited + 216) = v29;
    *(void *)(inited + 224) = v25;
    swift_bridgeObjectRetain();
    uint64_t v26 = Dictionary.init(dictionaryLiteral:)();
    sub_1003194F8(v26, 0x200000000000, v18);

    return (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AnsweringMachineRTTHelper()
{
  return self;
}

void sub_1003194F8(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a3 sendMessageWithPayload:isa andIdentifier:a2];
}

uint64_t sub_100319588()
{
  return AnyHashable.init<A>(_:)();
}

void *sub_1003195A8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (sub_1001F758C((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_1001F081C(&qword_1005878F0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_1001F0530((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)((char *)v4 + v14);
    unint64_t v17 = (void *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100319710(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  if (!sub_1001F758C(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1003197B8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (sub_1001F758C((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_1001F081C(&qword_1005878F0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_1001F0530((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1003198D0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int v10 = sub_1001F758C((uint64_t)v7, 1, v9);
  int v11 = sub_1001F758C((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_1001F081C(&qword_1005878F0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_1001F0530((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

_OWORD *sub_100319A90(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (sub_1001F758C((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_1001F081C(&qword_1005878F0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_1001F0530((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

void *sub_100319B8C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int v11 = sub_1001F758C((uint64_t)v8, 1, v10);
  int v12 = sub_1001F758C((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_1001F081C(&qword_1005878F0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_1001F0530((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  unint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_100319D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100319D40);
}

uint64_t sub_100319D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_1001F081C(&qword_1005878F0);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    return sub_1001F758C(v10, a2, v9);
  }
}

uint64_t sub_100319DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100319DEC);
}

uint64_t sub_100319DEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_1001F081C(&qword_1005878F0);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_1001F0530(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RingtoneDescriptor()
{
  uint64_t result = qword_100589AA0;
  if (!qword_100589AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100319EB8()
{
  sub_100319F5C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100319F5C()
{
  if (!qword_100589AB0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100589AB0);
    }
  }
}

uint64_t sub_100319FB4@<X0>(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for RingtoneDescriptor();
  uint64_t v10 = (uint64_t)a3 + v9[5];
  uint64_t v11 = type metadata accessor for URL();
  sub_1001F0530(v10, 1, 1, v11);
  int v12 = (void *)((char *)a3 + v9[6]);
  *int v12 = 0;
  v12[1] = 0;
  uint64_t v13 = v9[7];
  *((unsigned char *)a3 + v13) = 0;
  id v14 = a1;
  uint64_t v15 = (void *)sub_1002F82FC(v14);
  int v24 = a2;
  if (v15)
  {
    if (v15[2])
    {
      uint64_t v16 = v15[4];
      uint64_t v17 = v15[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
LABEL_6:
  *a3 = v16;
  a3[1] = v17;
  id v18 = [v14 provider];
  id v19 = [v18 ringtoneSoundURL];

  if (v19)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = 0;
  }
  else
  {

    uint64_t v20 = 1;
  }
  char v21 = v24;
  sub_1001F0530((uint64_t)v8, v20, 1, v11);
  sub_10031AC74((uint64_t)v8, v10);
  uint64_t result = swift_bridgeObjectRelease();
  *int v12 = 0;
  v12[1] = 0;
  *((unsigned char *)a3 + v13) = v21 & 1;
  return result;
}

uint64_t sub_10031A174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  uint64_t v65 = v5;
  uint64_t v6 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v6 - 8);
  sub_1001FCCD0();
  uint64_t v66 = v7;
  uint64_t v8 = sub_1001F081C(&qword_100589AE8);
  sub_10020233C();
  __chkstk_darwin(v9);
  uint64_t v11 = &v63[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v69 = type metadata accessor for RingtoneDescriptor();
  sub_10020233C();
  __chkstk_darwin(v12);
  uint64_t v73 = &v63[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002B8138();
  __chkstk_darwin(v14);
  uint64_t v72 = &v63[-v15];
  sub_1002B8138();
  __chkstk_darwin(v16);
  uint64_t v70 = &v63[-v17];
  sub_1002B8138();
  __chkstk_darwin(v18);
  uint64_t v71 = &v63[-v19];
  sub_1002B8138();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = &v63[-v22];
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = &v63[-v25];
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = &v63[-v28];
  __chkstk_darwin(v27);
  uint64_t v31 = &v63[-v30];
  sub_10031AB64(a1, (uint64_t)&v63[-v30]);
  sub_10031AB64(a2, (uint64_t)v29);
  uint64_t v32 = v31[1];
  uint64_t v33 = v29[1];
  if (!v32)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v29);
    sub_10031ABC8((uint64_t)v31);
    if (!v33) {
      goto LABEL_15;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_10031AD08();
    sub_10031ACEC();
    goto LABEL_13;
  }
  if (!v33)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v29);
    sub_10031ABC8((uint64_t)v31);
    goto LABEL_12;
  }
  if (*v31 == *v29 && v32 == v33)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v29);
    sub_10031ABC8((uint64_t)v31);
    swift_bridgeObjectRelease();
LABEL_15:
    sub_10031AD08();
    sub_10031ACEC();
    goto LABEL_16;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_10031ABC8((uint64_t)v29);
  sub_10031ABC8((uint64_t)v31);
  swift_bridgeObjectRelease();
  sub_10031AD08();
  sub_10031ACEC();
  if ((v35 & 1) == 0)
  {
LABEL_13:
    sub_10031ABC8((uint64_t)v23);
    sub_10031ABC8((uint64_t)v26);
    uint64_t v37 = (uint64_t)v72;
    uint64_t v36 = (uint64_t)v73;
    uint64_t v38 = v71;
LABEL_22:
    uint64_t v45 = v70;
    sub_10031AB64((uint64_t)v31, (uint64_t)v38);
    sub_10031AB64(v32, (uint64_t)v45);
LABEL_23:
    sub_10031ABC8((uint64_t)v45);
    sub_10031ABC8((uint64_t)v38);
LABEL_24:
    sub_10031AB64((uint64_t)v31, v37);
    sub_10031AB64(v32, v36);
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v39 = v69;
  uint64_t v40 = *(int *)(v69 + 20);
  uint64_t v41 = (uint64_t)&v23[v40];
  uint64_t v42 = (uint64_t)&v11[*(int *)(v8 + 48)];
  sub_10029AC90((uint64_t)&v26[v40], (uint64_t)v11);
  sub_10029AC90(v41, v42);
  uint64_t v43 = v68;
  if (sub_1001F758C((uint64_t)v11, 1, v68) == 1)
  {
    sub_10031ABC8((uint64_t)v23);
    sub_10031ABC8((uint64_t)v26);
    int v44 = sub_1001F758C(v42, 1, v43);
    uint64_t v38 = v71;
    if (v44 == 1)
    {
      sub_1002392A8((uint64_t)v11, &qword_1005878F0);
      sub_10031AB64((uint64_t)v31, (uint64_t)v38);
      uint64_t v45 = v70;
      sub_10031AB64(v32, (uint64_t)v70);
      uint64_t v37 = (uint64_t)v72;
      uint64_t v36 = (uint64_t)v73;
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  uint64_t v46 = v66;
  sub_10029AC90((uint64_t)v11, v66);
  if (sub_1001F758C(v42, 1, v43) == 1)
  {
    sub_10031ABC8((uint64_t)v23);
    sub_10031ABC8((uint64_t)v26);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v46, v43);
    uint64_t v38 = v71;
LABEL_21:
    sub_1002392A8((uint64_t)v11, &qword_100589AE8);
    uint64_t v37 = (uint64_t)v72;
    uint64_t v36 = (uint64_t)v73;
    goto LABEL_22;
  }
  uint64_t v49 = v67;
  uint64_t v50 = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v65, v42, v43);
  sub_10031AC24();
  int v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v51 = v46;
  char v52 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  uint64_t v53 = v50;
  uint64_t v39 = v69;
  v52(v53, v43);
  sub_10031ABC8((uint64_t)v23);
  sub_10031ABC8((uint64_t)v26);
  v52(v51, v43);
  sub_1002392A8((uint64_t)v11, &qword_1005878F0);
  uint64_t v38 = v71;
  sub_10031AB64((uint64_t)v31, (uint64_t)v71);
  uint64_t v45 = v70;
  sub_10031AB64(v32, (uint64_t)v70);
  uint64_t v37 = (uint64_t)v72;
  uint64_t v36 = (uint64_t)v73;
  if ((v64 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_28:
  uint64_t v54 = *(int *)(v39 + 24);
  uint64_t v55 = &v38[v54];
  uint64_t v56 = *(void *)&v38[v54 + 8];
  uint64_t v57 = &v45[v54];
  uint64_t v58 = v57[1];
  if (!v56)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v45);
    sub_10031ABC8((uint64_t)v38);
    if (!v58)
    {
LABEL_41:
      sub_10031AB64((uint64_t)v31, v37);
      sub_10031AB64(v32, v36);
LABEL_42:
      char v61 = *(unsigned char *)(v37 + *(int *)(v39 + 28));
      sub_10031ABC8(v37);
      char v62 = *(unsigned char *)(v36 + *(int *)(v39 + 28));
      sub_10031ABC8(v36);
      char v47 = v61 ^ v62 ^ 1;
      return v47 & 1;
    }
    goto LABEL_39;
  }
  if (!v58)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v45);
    sub_10031ABC8((uint64_t)v38);
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (*v55 == *v57 && v56 == v58)
  {
    swift_bridgeObjectRetain();
    sub_10031ABC8((uint64_t)v45);
    sub_10031ABC8((uint64_t)v38);
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_10031ABC8((uint64_t)v45);
  sub_10031ABC8((uint64_t)v38);
  swift_bridgeObjectRelease();
  sub_10031AB64((uint64_t)v31, v37);
  sub_10031AB64(v32, v36);
  if (v60) {
    goto LABEL_42;
  }
LABEL_25:
  sub_10031ABC8(v36);
  sub_10031ABC8(v37);
  char v47 = 0;
  return v47 & 1;
}

unint64_t sub_10031A860()
{
  uint64_t v1 = 7104878;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = String.init<A>(reflecting:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  sub_10031ACDC();
  v6._object = (void *)0x8000000100487FB0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  sub_10031ACDC();
  uint64_t v7 = type metadata accessor for RingtoneDescriptor();
  v8._uint64_t countAndFlagsBits = sub_1001FCDEC(v0 + *(int *)(v7 + 20));
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  sub_10031ACDC();
  if (*(void *)(v0 + *(int *)(v7 + 24) + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = String.init<A>(reflecting:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = (void *)0xE300000000000000;
  }
  v12._uint64_t countAndFlagsBits = v1;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  sub_10031ACDC();
  v14._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10024DF40();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t sub_10031AB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RingtoneDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10031ABC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RingtoneDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10031AC24()
{
  unint64_t result = qword_100589AF0;
  if (!qword_100589AF0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589AF0);
  }
  return result;
}

uint64_t sub_10031AC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_1005878F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10031ACEC()
{
  return sub_10031AB64(v1, v0);
}

uint64_t sub_10031AD08()
{
  return sub_10031AB64(v0, v1);
}

uint64_t sub_10031AD58()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDIDSPendingChat_isVideo);
}

id sub_10031AD9C()
{
  return sub_10031B50C(OBJC_IVAR___CSDIDSPendingChat_handle);
}

id sub_10031ADA8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Swift::String v8 = &v3[OBJC_IVAR___CSDIDSPendingChat_uuid];
  uint64_t v9 = type metadata accessor for UUID();
  sub_100274480();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  v3[OBJC_IVAR___CSDIDSPendingChat_isVideo] = a2;
  *(void *)&v3[OBJC_IVAR___CSDIDSPendingChat_handle] = a3;
  v14.receiver = v3;
  v14.super_class = ObjectType;
  id v12 = objc_msgSendSuper2(&v14, "init");
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v9);
  return v12;
}

void sub_10031AF30()
{
}

uint64_t sub_10031AF88()
{
  return type metadata accessor for IDSPendingChat(0);
}

uint64_t type metadata accessor for IDSPendingChat(uint64_t a1)
{
  return sub_10028A058(a1, (uint64_t *)&unk_100589B20);
}

uint64_t sub_10031AFB0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Class sub_10031B064(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031B158(a3, (uint64_t)v7);
  v8.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  return v8.super.isa;
}

uint64_t sub_10031B158@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

id sub_10031B1FC()
{
  return sub_10031B50C(OBJC_IVAR___CSDGroupIDSPendingChat_handle);
}

id sub_10031B208(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = &v2[OBJC_IVAR___CSDGroupIDSPendingChat_uuid];
  uint64_t v7 = type metadata accessor for UUID();
  sub_100274480();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v2[OBJC_IVAR___CSDGroupIDSPendingChat_handle] = a2;
  v12.receiver = v2;
  v12.super_class = ObjectType;
  id v10 = objc_msgSendSuper2(&v12, "init");
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
  return v10;
}

void sub_10031B370()
{
}

void sub_10031B3C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a1 + *a3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = *(void **)(a1 + *a4);
}

uint64_t sub_10031B448()
{
  return type metadata accessor for GroupIDSPendingChat(0);
}

uint64_t type metadata accessor for GroupIDSPendingChat(uint64_t a1)
{
  return sub_10028A058(a1, qword_100589B58);
}

uint64_t sub_10031B470()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_10031B50C@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(v1 + a1);
}

uint64_t sub_10031B514()
{
  sub_1001F081C(&qword_10058B600);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_10031B58C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result)
    {
LABEL_3:
      if (v2 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v2; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(a1 + 8 * i + 32);
        }
        uint64_t v6 = v5;
        if ([v5 status] == 6)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_21;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_18;
  }
LABEL_16:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0) {
    goto LABEL_21;
  }
  uint64_t v7 = _swiftEmptyArrayStorage[2];
LABEL_18:
  swift_release();

  return sub_10031CA88(v7 != 0);
}

void sub_10031B724()
{
}

void sub_10031B74C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v2;
  v7[4] = v0;
  v14[4] = sub_10031F738;
  v14[5] = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002C2C88;
  v14[3] = &unk_1005148F8;
  uint64_t v8 = _Block_copy(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  uint64_t v10 = sub_10021ECA8();
  v11(v10);
  uint64_t v12 = sub_10030195C();
  v13(v12);
  swift_release();
  sub_1001FCC08();
}

void sub_10031B950()
{
}

void sub_10031B978()
{
  sub_1001FCC38();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v20 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_1002024D0();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v0;
  *(void *)(v16 + 24) = v8;
  v21[4] = v6;
  void v21[5] = v16;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  void v21[2] = sub_1002C2C88;
  v21[3] = v4;
  uint64_t v17 = _Block_copy(v21);
  id v18 = v0;
  id v19 = v8;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v20);
  swift_release();
  sub_1001FCC08();
}

void sub_10031BBB0()
{
}

void sub_10031BBD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue];
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (![*(id *)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_featureFlags] intelligentRoutingEnabled])
  {
    if (qword_1005839A0 == -1)
    {
LABEL_8:
      static os_log_type_t.error.getter();
LABEL_9:
      os_log(_:dso:log:type:_:)();
      return;
    }
LABEL_26:
    swift_once();
    goto LABEL_8;
  }
  if (*(void *)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession])
  {
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    static os_log_type_t.info.getter();
    goto LABEL_9;
  }
  id v8 = objc_msgSend(self, "tu_defaults");
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 objectForKey:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  sub_100202CC4((uint64_t)v28, (uint64_t)aBlock);
  if (v25)
  {
    if (swift_dynamicCast())
    {
      uint64_t v12 = v23[2];
      unint64_t v11 = v23[3];
      sub_1001F6204(0, &qword_100589CB8);
      sub_1001F6204(0, &qword_100589CC0);
      uint64_t v13 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      uint64_t v21 = v13;
      if (v13)
      {
        if (qword_1005839A0 != -1) {
          swift_once();
        }
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        sub_1001F7498(v12, v11);
        uint64_t v22 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken];
        *(void *)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken] = v21;
      }
      else
      {
        sub_1001F7498(v12, v11);
      }
    }
  }
  else
  {
    sub_100202D2C((uint64_t)aBlock);
  }
  uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken];
  if (v14)
  {
    id v15 = v14;
    sub_10031D158(v15);
  }
  else
  {
    id v16 = [objc_allocWithZone((Class)IRServiceParameters) initWithServicePackage:0];
    uint64_t v17 = self;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v1;
    uint64_t v26 = sub_10031F694;
    uint64_t v27 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002031C0;
    uint64_t v25 = &unk_100514858;
    id v19 = _Block_copy(aBlock);
    uint64_t v20 = v1;
    swift_release();
    [v17 createServiceWithParameters:v16 reply:v19];
    _Block_release(v19);
  }
}

void sub_10031C0C8()
{
}

void sub_10031C0EC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    sub_1001F6204(0, &qword_100584B80);
    id v7 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    id v8 = objc_msgSend(self, "tu_defaults");
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setValue:0 forKey:v9];
  }
  else
  {
    __break(1u);
  }
}

void sub_10031C2B0(char *a1)
{
  id v2 = [objc_allocWithZone((Class)CSDDeviceLockStateObserver) initWithQueue:*(void *)&a1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue]];
  uint64_t v3 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_lockStateObserver;
  uint64_t v4 = *(void **)&a1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_lockStateObserver];
  *(void *)&a1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_lockStateObserver] = v2;

  uint64_t v5 = *(void **)&a1[v3];
  if (v5)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    v10[4] = sub_10031F68C;
    v10[5] = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1002C2C88;
    v10[3] = &unk_100514808;
    id v7 = _Block_copy(v10);
    id v8 = v5;
    NSString v9 = a1;
    swift_release();
    [v8 performBlockAfterFirstUnlock:v7];
    _Block_release(v7);
  }
}

uint64_t sub_10031C3D8(uint64_t a1)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  uint64_t result = os_log(_:dso:log:type:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(a1
                                      + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock);
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    return sub_100208490((uint64_t)v3);
  }
  return result;
}

id sub_10031C4AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_recommendationsObservers) addObject:a2];
}

void sub_10031C4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v29[2] = &_swiftEmptySetSingleton;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_1001F6204(0, &qword_100589CA0);
    swift_bridgeObjectRetain();
    id v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      swift_bridgeObjectRetain_n();
      id v10 = sub_10031C7E0();
      sub_10031F534(v8, v9, v10);
      sub_1002E03E8((uint64_t)v29, (uint64_t)v10);

      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    sub_1001F6204(0, &qword_100589CA0);
    swift_bridgeObjectRetain();
    uint64_t v12 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      id v13 = sub_10031C7E0();
      sub_1002E03E8((uint64_t)v29, (uint64_t)v13);

      v12 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048FB00;
  sub_1001F6204(0, &qword_100589CA0);
  sub_100210D5C((unint64_t *)&unk_100589CD0, &qword_100589CA0);
  swift_bridgeObjectRetain();
  id v15 = (void *)Set.description.getter();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v29[0] = v15;
  v29[1] = v17;
  uint64_t v18 = String.init<A>(reflecting:)();
  uint64_t v20 = v19;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v21 = sub_1001F3B08();
  *(void *)(v14 + 64) = v21;
  *(void *)(v14 + 32) = v18;
  *(void *)(v14 + 40) = v20;
  uint64_t v22 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession;
  v29[0] = *(id *)(a3 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession);
  id v23 = v29[0];
  sub_1001F081C((uint64_t *)&unk_100589CA8);
  uint64_t v24 = String.init<A>(describing:)();
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v21;
  *(void *)(v14 + 72) = v24;
  *(void *)(v14 + 80) = v25;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(a3 + v22);
  if (v26)
  {
    id v27 = v26;
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v27 updateCandidates:isa];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id sub_10031C7E0()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithCandidateIdentifier:v1];

  return v2;
}

uint64_t sub_10031C854(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone((Class)IRMediaEvent) initWithEventType:a3 eventSubType:0];
  uint64_t v6 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession;
  id v7 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession);
  if (v7)
  {
    sub_1001F6204(0, &qword_100589CA0);
    id v8 = v7;
    id v9 = [a2 uniqueIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v10 = sub_10031C7E0();
    [v8 addEvent:v5 forCandidate:v10];
  }
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048FB00;
  id v12 = v5;
  id v13 = [v12 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = String.init<A>(reflecting:)();
  uint64_t v16 = v15;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v17 = sub_1001F3B08();
  *(void *)(v11 + 64) = v17;
  *(void *)(v11 + 32) = v14;
  *(void *)(v11 + 40) = v16;
  id v18 = *(id *)(a1 + v6);
  sub_1001F081C((uint64_t *)&unk_100589CA8);
  uint64_t v19 = String.init<A>(describing:)();
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v17;
  *(void *)(v11 + 72) = v19;
  *(void *)(v11 + 80) = v20;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10031CA88(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)&v1[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_10031F5C8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100514768;
  id v12 = _Block_copy(aBlock);
  id v13 = v1;
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_10031CD90(uint64_t a1, id a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession;
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession);
  if (v3)
  {
    id v6 = v3;
    id v7 = [v6 configuration];
    if (v7)
    {
      id v19 = v7;
      id v8 = [v7 mode];
      sub_1001F6204(0, &qword_100584B80);
      uint64_t v9 = static OS_os_log.default.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      BOOL v11 = os_log_type_enabled(v9, v10);
      if (v8 != a2)
      {
        if (v11)
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315138;
          type metadata accessor for IRConfigurationUpdateMode(0);
          uint64_t v16 = String.init<A>(reflecting:)();
          sub_1002344D8(v16, v17, &v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting IRSession mode to %s", v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        [v19 setMode:a2];
        id v18 = *(void **)(a1 + v2);
        if (!v18) {
          goto LABEL_13;
        }
        uint64_t v9 = v18;
        [v9 runWithConfiguration:v19];
LABEL_12:

LABEL_13:
        return;
      }
      if (v11)
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)id v12 = 136315138;
        type metadata accessor for IRConfigurationUpdateMode(0);
        uint64_t v13 = String.init<A>(reflecting:)();
        sub_1002344D8(v13, v14, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "IRSession mode is already %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_12;
      }
    }
    else
    {
      sub_1001F6204(0, &qword_100584B80);
      id v19 = (id)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
    }
  }
  else
  {
    sub_1001F6204(0, &qword_100584B80);
    id v19 = (id)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

uint64_t sub_10031D158(id a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (id *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once();
    goto LABEL_6;
  }
  a1 = [objc_allocWithZone((Class)IRConfiguration) initWithServiceToken:a1];
  [a1 setMode:0];
  id v10 = [objc_allocWithZone((Class)IRSession) init];
  uint64_t v9 = OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession;
  BOOL v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession) = v10;

  id v12 = *(void **)(v1 + v9);
  if (v12)
  {
    [v12 setDelegate:v1];
    uint64_t v13 = *(void **)(v1 + v9);
    if (v13) {
      [v13 runWithConfiguration:a1];
    }
  }
  if (qword_1005839A0 != -1) {
    goto LABEL_8;
  }
LABEL_6:
  sub_1001F081C(&qword_100584B20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10048FB00;
  v25[0] = *(id *)(v1 + v9);
  id v15 = v25[0];
  sub_1001F081C((uint64_t *)&unk_100589CA8);
  v25[0] = (id)String.init<A>(describing:)();
  v25[1] = v16;
  uint64_t v17 = String.init<A>(reflecting:)();
  uint64_t v19 = v18;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v20 = sub_1001F3B08();
  *(void *)(v14 + 64) = v20;
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  v25[0] = *(id *)(v1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken);
  id v21 = v25[0];
  sub_1001F081C(&qword_100589CC8);
  uint64_t v22 = String.init<A>(describing:)();
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v20;
  *(void *)(v14 + 72) = v22;
  *(void *)(v14 + 80) = v23;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10031D428(void *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&a3[OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_queue];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a1;
  v14[4] = a3;
  aBlock[4] = sub_10031F6E4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_1005148A8;
  id v15 = _Block_copy(aBlock);
  swift_errorRetain();
  id v16 = a1;
  uint64_t v17 = a3;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_10031D6D4(void *a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_10048F550;
    id v23 = a1;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v5 = String.init<A>(reflecting:)();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_1001F3B08();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else if (a2)
  {
    uint64_t v10 = self;
    id v23 = 0;
    id v11 = a2;
    id v12 = [v10 archivedDataWithRootObject:v11 requiringSecureCoding:1 error:&v23];
    id v13 = v23;
    if (v12)
    {
      uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      id v17 = objc_msgSend(self, "tu_defaults");
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v19 = String._bridgeToObjectiveC()();
      [v17 setValue:isa forKey:v19];

      sub_1001F7498(v14, v16);
    }
    else
    {
      unint64_t v20 = v13;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    id v21 = *(void **)(a3 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken);
    *(void *)(a3 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken) = a2;
    id v22 = v11;

    sub_10031D158(v22);
  }
}

void sub_10031D96C()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_1002024D0();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v0;
  v12[4] = sub_10031ECDC;
  v12[5] = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_1002C2C88;
  id v12[3] = &unk_100514718;
  uint64_t v6 = _Block_copy(v12);
  swift_bridgeObjectRetain();
  id v7 = v0;
  static DispatchQoS.unspecified.getter();
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EB34();
  sub_10026B9AC();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v6);
  uint64_t v8 = sub_10021ECA8();
  v9(v8);
  uint64_t v10 = sub_10030195C();
  v11(v10);
  swift_release();
  sub_1001FCC08();
}

void sub_10031DB38(uint64_t a1, uint64_t a2)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  *(void *)(v4 + 56) = sub_1001F081C(&qword_100589C68);
  *(void *)(v4 + 64) = sub_1001FCB74((unint64_t *)&unk_100589C70, &qword_100589C68);
  *(void *)(v4 + 32) = a1;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  *(void *)(a2 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_sessionFailureCount) = 0;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = (void *)sub_1002231D4(v5, v6, a1);
  swift_bridgeObjectRelease();
  uint64_t v8 = &off_100589000;
  uint64_t v9 = a2;
  if (v7)
  {
    uint64_t v55 = a2;
    uint64_t v10 = v7;
    id v11 = [v7 candidateResults];
    sub_1001F6204(0, (unint64_t *)&unk_100585D90);
    sub_100210D5C(&qword_100589C90, (unint64_t *)&unk_100585D90);
    uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    Swift::Int v13 = sub_10031ECE4(v12, a1);
    uint64_t v14 = sub_10039E66C(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v54 = v10;
      char v61 = _swiftEmptyArrayStorage;
      sub_1002E3EC4();
      unint64_t v56 = v13 & 0xC000000000000001;
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v16 = __CocoaSet.startIndex.getter();
        char v18 = 1;
      }
      else
      {
        uint64_t v16 = sub_100261A1C(v13);
        char v18 = v20 & 1;
      }
      uint64_t v58 = v16;
      uint64_t v59 = v17;
      char v60 = v18;
      if (v15 < 0) {
        goto LABEL_35;
      }
      do
      {
        uint64_t v22 = v58;
        uint64_t v21 = v59;
        char v23 = v60;
        Swift::Int v24 = v13;
        sub_100247648(v58, v59, v60, v13);
        uint64_t v26 = v25;
        id v27 = [v25 candidate];
        id v28 = [v27 candidateIdentifier];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;

        uint64_t v32 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002E3EC4();
          uint64_t v32 = v61;
        }
        unint64_t v33 = v32[2];
        if (v33 >= v32[3] >> 1)
        {
          sub_1002E3EC4();
          uint64_t v32 = v61;
        }
        v32[2] = v33 + 1;
        uint64_t v34 = &v32[2 * v33];
        v34[4] = v29;
        v34[5] = v31;
        if (v56)
        {
          if ((v23 & 1) == 0) {
            goto LABEL_36;
          }
          Swift::Int v13 = v24;
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          uint64_t v8 = &off_100589000;
          sub_1001F081C(&qword_100589C98);
          uint64_t v40 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v40(v57, 0);
        }
        else
        {
          Swift::Int v13 = v24;
          uint64_t v35 = sub_100261934(v22);
          uint64_t v37 = v36;
          char v39 = v38;
          sub_10023561C(v22, v21, v23);
          uint64_t v58 = v35;
          uint64_t v59 = v37;
          char v60 = v39 & 1;
          uint64_t v8 = &off_100589000;
        }
        --v15;
      }
      while (v15);
      sub_10023561C(v58, v59, v60);
      swift_release();

      NSString v19 = v61;
    }
    else
    {
      swift_release();

      NSString v19 = _swiftEmptyArrayStorage;
    }
    uint64_t v9 = v55;
    *(void *)((char *)v8[376] + v55) = v19;
    swift_bridgeObjectRelease();
  }
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10048FB00;
  uint64_t v42 = (char *)v8[376];
  v57[0] = *(void *)&v42[v9];
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_10058B600);
  uint64_t v43 = String.init<A>(reflecting:)();
  uint64_t v45 = v44;
  *(void *)(v41 + 56) = &type metadata for String;
  unint64_t v46 = sub_1001F3B08();
  *(void *)(v41 + 64) = v46;
  *(void *)(v41 + 32) = v43;
  *(void *)(v41 + 40) = v45;
  v57[0] = *(void *)(*(void *)&v42[v9] + 16);
  uint64_t v47 = String.init<A>(reflecting:)();
  *(void *)(v41 + 96) = &type metadata for String;
  *(void *)(v41 + 104) = v46;
  *(void *)(v41 + 72) = v47;
  *(void *)(v41 + 80) = v48;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v49 = [*(id *)(v9 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_recommendationsObservers) allObjects];
  sub_1001F081C((uint64_t *)&unk_100589C80);
  unint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_25;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v51) {
    goto LABEL_31;
  }
LABEL_25:
  if (v51 >= 1)
  {
    for (uint64_t i = 0; i != v51; ++i)
    {
      if ((v50 & 0xC000000000000001) != 0)
      {
        uint64_t v53 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v53 = *(void **)(v50 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v53 didUpdateRouteRecommendations];
      swift_unknownObjectRelease();
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10031E1F0(void *a1)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10048FB00;
  sub_1001F6204(0, &qword_100589C58);
  id v3 = a1;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v7 = sub_1001F3B08();
  *(void *)(v2 + 64) = v7;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v6;
  type metadata accessor for IRSessionSuspensionReason(0);
  uint64_t v8 = String.init<A>(reflecting:)();
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v7;
  *(void *)(v2 + 72) = v8;
  *(void *)(v2 + 80) = v9;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10031E3A4(void *a1, uint64_t a2, char a3)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1004904F0;
  type metadata accessor for IRSessionSuspensionReason(0);
  uint64_t v6 = String.init<A>(reflecting:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_1001F3B08();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  sub_1001F6204(0, &qword_100589C58);
  id v10 = a1;
  uint64_t v11 = String.init<A>(reflecting:)();
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 72) = v11;
  *(void *)(v5 + 80) = v12;
  uint64_t v13 = 0x6C6C697473;
  if (a3) {
    uint64_t v13 = 0x65676E6F6C206F6ELL;
  }
  unint64_t v14 = 0xE500000000000000;
  if (a3) {
    unint64_t v14 = 0xE900000000000072;
  }
  *(void *)(v5 + 136) = &type metadata for String;
  *(void *)(v5 + 144) = v9;
  *(void *)(v5 + 112) = v13;
  *(void *)(v5 + 120) = v14;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

void sub_10031E5A0()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v21 = v5;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002024D0();
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10048F550;
  v23[0] = v3;
  swift_errorRetain();
  sub_1001F081C((uint64_t *)&unk_100585FE0);
  uint64_t v13 = String.init<A>(reflecting:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1001F3B08();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v0;
  *(void *)(v16 + 24) = v3;
  void v23[4] = sub_10031EC84;
  void v23[5] = v16;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  os_log_t v23[2] = sub_1002C2C88;
  void v23[3] = &unk_1005146C8;
  uint64_t v17 = _Block_copy(v23);
  swift_errorRetain();
  id v18 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v20);
  swift_release();
  sub_1001FCC08();
}

void sub_10031E8A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken);
  *(void *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irServiceToken) = 0;

  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession);
  *(void *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_irSession) = 0;

  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_sessionFailureCount);
  unint64_t v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  *(void *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_sessionFailureCount) = v5;
  id v6 = [*(id *)(a1 + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_serverBag) maxIRSessionRetries];
  if ((v5 & 0x8000000000000000) == 0 && v5 >= (unint64_t)v6)
  {
    if (qword_1005839A0 == -1)
    {
LABEL_5:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_5;
  }
  swift_errorRetain();
  sub_1001F081C((uint64_t *)&unk_100585FE0);
  sub_1001F6204(0, &qword_100589C50);
  if (swift_dynamicCast())
  {
    if ([v11 code] == (id)-12889)
    {
      uint64_t v7 = *(void (**)(uint64_t))(a1
                                          + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_resetTokenBlock);
      if (v7)
      {
        uint64_t v8 = swift_retain();
        v7(v8);
        sub_100208490((uint64_t)v7);
      }
    }
  }
  uint64_t v9 = *(void (**)(uint64_t))(a1
                                      + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager_intelligentRoutingInitializationBlock);
  if (v9)
  {
    uint64_t v10 = swift_retain();
    v9(v10);
    sub_100208490((uint64_t)v9);
  }
}

void sub_10031EB14()
{
}

uint64_t type metadata accessor for IntelligentRoutingManager()
{
  return self;
}

uint64_t sub_10031EC4C()
{
  swift_errorRelease();
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10031EC84()
{
  sub_10031E8A4(*(void *)(v0 + 16));
}

uint64_t sub_10031EC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10031EC9C()
{
  return swift_release();
}

uint64_t sub_10031ECA4()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10031ECDC()
{
  sub_10031DB38(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

Swift::Int sub_10031ECE4(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)sub_10031F050(a1, a2);
    swift_bridgeObjectRelease();
    return (Swift::Int)v4;
  }
  uint64_t v4 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    swift_release();
    return (Swift::Int)v4;
  }
  sub_1001F6204(0, (unint64_t *)&unk_100585D90);
  unint64_t v5 = &selRef_setActiveRequestsByTransactionID_;
  while (1)
  {
    id v6 = v5;
    swift_dynamicCast();
    if (qword_1005839A0 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_10048F550;
    *(void *)(v7 + 56) = sub_1001F081C(&qword_100589C68);
    *(void *)(v7 + 64) = sub_1001FCB74((unint64_t *)&unk_100589C70, &qword_100589C68);
    *(void *)(v7 + 32) = a2;
    swift_bridgeObjectRetain();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    unint64_t v5 = v6;
    if ([v18 v6[510]] == (id)2
      || [v18 v6[510]] == (id)3
      || [v18 v6[510]] == (id)4)
    {
      break;
    }

LABEL_21:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v4 = &_swiftEmptySetSingleton;
      goto LABEL_25;
    }
  }
  if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
    sub_1002E16D0();
  }
  Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
  uint64_t v9 = (char *)&_swiftEmptySetSingleton + 56;
  uint64_t v10 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
  unint64_t v11 = result & ~v10;
  unint64_t v12 = v11 >> 6;
  if (((-1 << v11) & ~*((void *)&_swiftEmptySetSingleton + (v11 >> 6) + 7)) != 0)
  {
    unint64_t v13 = __clz(__rbit64((-1 << v11) & ~*((void *)&_swiftEmptySetSingleton + (v11 >> 6) + 7))) | v11 & 0x7FFFFFFFFFFFFFC0;
LABEL_20:
    *(void *)&v9[(v13 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v13;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v13) = v18;
    ++*((void *)&_swiftEmptySetSingleton + 2);
    unint64_t v5 = v6;
    goto LABEL_21;
  }
  char v14 = 0;
  unint64_t v15 = (unint64_t)(63 - v10) >> 6;
  while (++v12 != v15 || (v14 & 1) == 0)
  {
    BOOL v16 = v12 == v15;
    if (v12 == v15) {
      unint64_t v12 = 0;
    }
    v14 |= v16;
    uint64_t v17 = *(void *)&v9[8 * v12];
    if (v17 != -1)
    {
      unint64_t v13 = __clz(__rbit64(~v17)) + (v12 << 6);
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10031F050(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (uint64_t *)((char *)&v15 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1002DF3E4(0, v7, v9);
    swift_bridgeObjectRetain();
    sub_10031F224((uint64_t)v9, v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    sub_1002DF3E4(0, v7, v12);
    swift_bridgeObjectRetain();
    sub_10031F224((uint64_t)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v11;
}

void sub_10031F224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = 0;
  int64_t v5 = 0;
  uint64_t v8 = *(void *)(a3 + 56);
  uint64_t v6 = a3 + 56;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v6 - 24);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v7;
  uint64_t v24 = v6;
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    unint64_t v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_20:
    uint64_t v17 = qword_1005839A0;
    id v18 = *(id *)(*(void *)(a3 + 48) + 8 * v13);
    if (v17 != -1) {
      swift_once();
    }
    sub_1001F081C(&qword_100584B20);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10048F550;
    *(void *)(v19 + 56) = sub_1001F081C(&qword_100589C68);
    *(void *)(v19 + 64) = sub_1001FCB74((unint64_t *)&unk_100589C70, &qword_100589C68);
    *(void *)(v19 + 32) = a4;
    swift_bridgeObjectRetain();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if ([v18 classification] == (id)2 || objc_msgSend(v18, "classification") == (id)3)
    {

LABEL_27:
      *(void *)(a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v23++, 1)) {
        goto LABEL_33;
      }
    }
    else
    {
      id v20 = [v18 classification];

      if (v20 == (id)4) {
        goto LABEL_27;
      }
    }
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v14 >= v25) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v24 + 8 * v14);
  ++v5;
  if (v15) {
    goto LABEL_19;
  }
  int64_t v5 = v14 + 1;
  if (v14 + 1 >= v25) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v24 + 8 * v5);
  if (v15) {
    goto LABEL_19;
  }
  int64_t v5 = v14 + 2;
  if (v14 + 2 >= v25) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v24 + 8 * v5);
  if (v15)
  {
LABEL_19:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_20;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v25)
  {
LABEL_30:
    swift_retain();
    sub_1002E567C();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v15 = *(void *)(v24 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v25) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

void sub_10031F534(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setRapportIdentifier:v4];
}

uint64_t sub_10031F598()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10031F5C8()
{
  sub_10031CD90(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_10031F5D0@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16)
                  + OBJC_IVAR____TtC13callservicesd25IntelligentRoutingManager__topOfListRoutesUniqueIdentifiers);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10031F5FC()
{
  uint64_t v1 = sub_1002544DC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10031F634()
{
  return sub_10031C854(*(void *)(v0 + 16), *(void **)(v0 + 24), 0);
}

uint64_t sub_10031F654()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10031F68C()
{
  return sub_10031C3D8(*(void *)(v0 + 16));
}

uint64_t sub_10031F694(void *a1, uint64_t a2)
{
  return sub_10031D428(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_10031F69C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10031F6E4()
{
  sub_10031D6D4(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10031F6F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10031F738()
{
  sub_10031C4C8(v0[2], v0[3], v0[4]);
}

uint64_t sub_10031F744()
{
  return sub_10031C854(*(void *)(v0 + 16), *(void **)(v0 + 24), 5);
}

id sub_10031F7AC(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 isEqualToHandle:a2];

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v9 = 0;
LABEL_14:

  swift_bridgeObjectRelease();
  return v9;
}

void sub_10031F8B4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession();
    sub_1003205A0();
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v24;
    uint64_t v22 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  if (v6 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
    goto LABEL_24;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 < v21)
    {
      unint64_t v18 = *(void *)(v22 + 8 * v16);
      if (v18)
      {
LABEL_23:
        uint64_t v14 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
LABEL_24:
        for (i = *(id *)(*(void *)(v6 + 48) + 8 * v15); i; uint64_t v14 = v9)
        {
          id v29 = i;
          sub_10031FF7C(&v29, a2, (uint64_t)a3);

          if (v4) {
            break;
          }
          int64_t v8 = v16;
          unint64_t v9 = v14;
          if ((v6 & 0x8000000000000000) == 0) {
            goto LABEL_8;
          }
LABEL_10:
          if (!__CocoaSet.Iterator.next()()) {
            break;
          }
          type metadata accessor for ActivitySession();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id i = v29;
          swift_unknownObjectRelease();
          int64_t v16 = v8;
        }
        goto LABEL_34;
      }
      int64_t v19 = v8 + 2;
      if (v8 + 2 < v21)
      {
        unint64_t v18 = *(void *)(v22 + 8 * v19);
        if (v18) {
          goto LABEL_22;
        }
        int64_t v19 = v8 + 3;
        if (v8 + 3 >= v21) {
          goto LABEL_34;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v19);
        if (v18)
        {
LABEL_22:
          int64_t v16 = v19;
          goto LABEL_23;
        }
        int64_t v19 = v8 + 4;
        if (v8 + 4 < v21)
        {
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v16 = v8 + 5;
          if (v8 + 5 < v21)
          {
            unint64_t v18 = *(void *)(v22 + 8 * v16);
            if (!v18)
            {
              int64_t v20 = v8 + 6;
              while (v20 < v21)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v20++);
                if (v18)
                {
                  int64_t v16 = v20 - 1;
                  goto LABEL_23;
                }
              }
              goto LABEL_34;
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_34:
    sub_100206FA0();

    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t sub_10031FBA0()
{
  return dispatch thunk of ActivitySessionManager.requestTopicTermination(withTopicName:)();
}

id sub_10031FBC4(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v8[3] = type metadata accessor for ActivitySessionManager();
  v8[4] = &off_100514970;
  v8[0] = a1;
  id v3 = objc_allocWithZone(ObjectType);
  sub_10020ED28((uint64_t)v8, (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider);
  v7.receiver = v3;
  v7.super_class = ObjectType;
  id v4 = a1;
  id v5 = objc_msgSendSuper2(&v7, "init");
  sub_1002018DC((uint64_t)v8);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_10031FCB0(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  id v4 = [a1 activeRemoteParticipants];
  sub_1001F6204(0, (unint64_t *)&qword_100588540);
  sub_100320540();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = sub_10039E66C(v5);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_16:
    id v30 = [v3 activitySessions];
    type metadata accessor for ActivitySession();
    sub_1003205A0();
    uint64_t v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    sub_10031F8B4(v31, (unint64_t)v11, v2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v6;
  char v38 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v10 = 1;
  }
  else
  {
    uint64_t result = sub_100261A1C(v5);
    char v10 = v12 & 1;
  }
  uint64_t v35 = result;
  uint64_t v36 = v9;
  char v37 = v10;
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v32 = v3;
    unint64_t v33 = v2;
    do
    {
      uint64_t v13 = v35;
      uint64_t v14 = v36;
      char v15 = v37;
      uint64_t v16 = sub_1003205F0();
      sub_100247634(v16, v17, v18, v19);
      int64_t v21 = v20;
      id v22 = [v20 handle];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v5 & 0xC000000000000001) != 0)
      {
        if ((v15 & 1) == 0) {
          goto LABEL_18;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1001F081C(&qword_100586D50);
        id v29 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v29(v34, 0);
      }
      else
      {
        uint64_t v23 = sub_1003205F0();
        uint64_t v24 = sub_100261934(v23);
        uint64_t v26 = v25;
        char v28 = v27;
        sub_10023561C(v13, v14, v15);
        uint64_t v35 = v24;
        uint64_t v36 = v26;
        char v37 = v28 & 1;
      }
      --v7;
    }
    while (v7);
    sub_10023561C(v35, v36, v37);
    uint64_t v11 = v38;
    swift_bridgeObjectRelease();
    id v3 = v32;
    uint64_t v2 = v33;
    goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_10031FF7C(id *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [*a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = UUID.uuidString.getter();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = (void *)dispatch thunk of ActivitySession.activity.getter();
  id v14 = [v13 originator];

  if (!v14)
  {
    swift_bridgeObjectRelease();
    return;
  }
  char v15 = (void *)dispatch thunk of ActivitySession.activity.getter();
  id v16 = [v15 metadata];

  if (!v16 || (id v17 = [v16 lifetimePolicy], v16, v17 != (id)1))
  {
    swift_bridgeObjectRelease();

    return;
  }
  id v18 = v14;
  unsigned int v19 = sub_10031F7AC(a2, v18);
  if (qword_100583A30 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1001F5F88(v20, (uint64_t)qword_100594C88);
  id v21 = v18;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v22 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v47 = v42;
    *(_DWORD *)uint64_t v26 = 136315906;
    unsigned int v43 = v19;
    uint64_t v46 = (uint64_t)v22;
    sub_1001F6204(0, (unint64_t *)&unk_100586E00);
    int v41 = v25;
    id v27 = v22;
    os_log_t v40 = v23;
    id v28 = v22;
    id v29 = v27;
    uint64_t v44 = a3;
    uint64_t v30 = String.init<A>(reflecting:)();
    uint64_t v46 = sub_1002344D8(v30, v31, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v22 = v28;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1002344D8(v45, v12, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v46 = a2;
    swift_bridgeObjectRetain();
    sub_1001F081C(&qword_100587338);
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v46 = sub_1002344D8(v32, v33, &v47);
    char v34 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a3 = v44;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 1024;
    LODWORD(v46) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v35 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v41, "Originator %s in conversation for activity %s with handles %s? %{BOOL}d", (uint8_t *)v26, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v34) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  if ((v19 & 1) == 0)
  {
LABEL_12:
    uint64_t v36 = (void *)(a3
                   + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider);
    uint64_t v37 = *(void *)(a3
                    + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider
                    + 24);
    uint64_t v38 = *(void *)(a3
                    + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider
                    + 32);
    sub_100204074(v36, v37);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v38 + 8))(v45, v12, v37, v38);
  }
LABEL_13:
  swift_bridgeObjectRelease();
}

void sub_1003204CC()
{
}

uint64_t type metadata accessor for CSDActivitySessionParticipantMonitor()
{
  return self;
}

unint64_t sub_100320540()
{
  unint64_t result = qword_100586D48;
  if (!qword_100586D48)
  {
    sub_1001F6204(255, (unint64_t *)&qword_100588540);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100586D48);
  }
  return result;
}

unint64_t sub_1003205A0()
{
  unint64_t result = qword_100589830;
  if (!qword_100589830)
  {
    type metadata accessor for ActivitySession();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589830);
  }
  return result;
}

uint64_t sub_1003205F0()
{
  return v0;
}

uint64_t sub_100320604(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10032062C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100320654(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v12 = *(NSObject **)(v5 + 32);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a1;
  void v13[4] = a3;
  void v13[5] = a4;
  v13[6] = a5;
  v13[7] = v6;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100321DF0;
  *(void *)(v14 + 24) = v13;
  v20[4] = sub_100321E4C;
  void v20[5] = v14;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_10032062C;
  v20[3] = &unk_100514AD0;
  char v15 = _Block_copy(v20);
  id v16 = a2;
  id v17 = a1;
  id v18 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v12) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003207E8(void *a1, id a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v91 = a6;
  uint64_t v88 = a4;
  uint64_t v83 = type metadata accessor for DispatchTimeInterval();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (unint64_t *)((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v81 = (char *)&v77 - v15;
  uint64_t v86 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v86);
  id v87 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_1001F5F88(v17, (uint64_t)qword_100594C10);
  id v18 = a1;
  unsigned int v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v89 = v14;
  uint64_t v90 = a5;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    id v79 = a2;
    uint64_t v23 = (uint8_t *)v22;
    os_log_type_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 138412290;
    aBlock[0] = v18;
    int v25 = a3;
    id v26 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v24 = v18;

    a3 = v25;
    a5 = v90;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "LMI decryption failed so caching and triggering link recovery %@", v23, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v79;
    swift_slowDealloc();
  }
  else
  {
  }
  id v27 = v18;
  id v28 = a2;
  id v29 = a3;
  swift_retain();
  uint64_t v30 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
  id v31 = [v27 value];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  uint64_t v35 = v91;
  swift_beginAccess();
  uint64_t v36 = *(void *)(v35 + 16);
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_100223128(v32, v34, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v79 = v29;
  id v78 = v28;
  if (!v37)
  {
    id v45 = [v27 value];
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    sub_1001F081C(&qword_100589E30);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_10048F550;
    *(void *)(v49 + 32) = v28;
    *(void *)(v49 + 40) = v27;
    uint64_t v50 = v88;
    *(void *)(v49 + 48) = v29;
    *(void *)(v49 + 56) = v50;
    *(void *)(v49 + 64) = a5;
    swift_beginAccess();
    id v51 = v27;
    id v52 = v28;
    id v53 = v29;
    swift_retain();
    sub_10027FB94(v49, v46, v48);
    swift_endAccess();
    goto LABEL_12;
  }
  id v38 = v27;
  id v39 = v28;
  id v40 = v29;
  uint64_t v41 = a5;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v42 = *(void *)(v37 + 16);
    if (v42 >= *(void *)(v37 + 24) >> 1)
    {
      sub_1003A4F7C();
      uint64_t v37 = v76;
    }
    *(void *)(v37 + 16) = v42 + 1;
    unsigned int v43 = (void *)(v37 + 40 * v42);
    v43[4] = v39;
    v43[5] = v38;
    uint64_t v44 = v88;
    v43[6] = v40;
    v43[7] = v44;
    v43[8] = v41;
LABEL_12:
    id v40 = v89;
    swift_bridgeObjectRelease();
    uint64_t v54 = swift_allocObject();
    uint64_t v55 = v91;
    *(void *)(v54 + 16) = v91;
    *(void *)(v54 + 24) = v27;
    aBlock[4] = sub_100321E44;
    aBlock[5] = v54;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_100514B20;
    _Block_copy(aBlock);
    uint64_t v92 = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    id v27 = v27;
    swift_retain();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    DispatchWorkItem.init(flags:block:)();
    swift_release();
    unint64_t v56 = v30;
    id v57 = [v27 v30[235]];
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    swift_beginAccess();
    uint64_t v30 = *(char ***)(v55 + 24);
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_100223684(v58, v60, (uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v61)
    {
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    id v62 = [v27 v56[235]];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v39 = v64;

    swift_beginAccess();
    uint64_t v65 = swift_retain();
    sub_10027FB74(v65, v63, (uint64_t)v39);
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v66 = v91;
    id v38 = *(id *)(v91 + 32);
    static DispatchTime.now()();
    unint64_t v67 = (unint64_t)[*(id *)(v66 + 40) letMeInRequestRecoveryTimeout];
    uint64_t v41 = v90;
    if ((v67 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_17:
    sub_1003A4F7C();
    uint64_t v37 = v75;
  }
  uint64_t v68 = v80;
  unint64_t *v80 = v67;
  uint64_t v69 = v82;
  uint64_t v70 = v83;
  (*(void (**)(unint64_t *, void, uint64_t))(v82 + 104))(v68, enum case for DispatchTimeInterval.seconds(_:), v83);
  uint64_t v71 = v81;
  + infix(_:_:)();
  (*(void (**)(unint64_t *, uint64_t))(v69 + 8))(v68, v70);
  uint64_t v72 = v85;
  uint64_t v73 = *(void (**)(id, uint64_t))(v84 + 8);
  v73(v40, v85);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();

  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v73)(v71, v72);
}

uint64_t sub_100321018(uint64_t a1, void *a2)
{
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594C10);
  swift_retain_n();
  id v5 = a2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v5 value];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    swift_beginAccess();
    uint64_t v13 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100223128(v10, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v34 = v14;
      sub_1001F081C((uint64_t *)&unk_100588500);
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    uint64_t v34 = sub_1002344D8(v15, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalidating LMI link recovery for cached LMI: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  id v18 = [v5 value];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_100223128(v19, v21, v22);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v23)
  {
    id v25 = [v5 value];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    swift_beginAccess();
    sub_1002CEA80(v26, v28);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v29 = [v5 value];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    swift_beginAccess();
    sub_1002CEA60(v30, v32);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    swift_beginAccess();
    sub_100321CD0(a1 + 48, (uint64_t)v33);
    if (v33[3])
    {
      sub_100321D38((uint64_t)v33);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return sub_100321D38((uint64_t)v33);
    }
  }
  return result;
}

uint64_t sub_100321414(uint64_t a1)
{
  id v3 = *(NSObject **)(v1 + 32);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_100321C84;
  *(void *)(v5 + 24) = v4;
  v8[4] = sub_100321C90;
  void v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  _OWORD v8[2] = sub_10032062C;
  v8[3] = &unk_100514A58;
  uint64_t v6 = _Block_copy(v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10032157C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_29:
    return swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_29;
  }
LABEL_3:
  if (v4 >= 1)
  {
    unint64_t v6 = a1 & 0xC000000000000001;
    swift_beginAccess();
    uint64_t v22 = (uint64_t *)(a2 + 24);
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v7 = 0;
    while (1)
    {
      if (v6) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      id v9 = v8;
      id v10 = objc_msgSend(v8, "pseudonym", v21);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(*(void *)(a2 + 16) + 16))
      {
        swift_bridgeObjectRetain();
        sub_100233664();
        if (v11)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v12 = [v9 pseudonym];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v13 = *v22;
          if (*(void *)(*v22 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v14 = sub_100233664();
            if (v15)
            {
              uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
              swift_retain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (qword_100583A08 != -1) {
                swift_once();
              }
              uint64_t v17 = type metadata accessor for Logger();
              sub_1001F5F88(v17, (uint64_t)qword_100594C10);
              id v18 = Logger.logObject.getter();
              os_log_type_t v19 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v18, v19))
              {
                uint64_t v20 = (uint8_t *)swift_slowAlloc();
                uint64_t v21 = v16;
                *(_WORD *)uint64_t v20 = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, v19, "Acquired link, proceeding to decrypt cached LMI", v20, 2u);
                swift_slowDealloc();
              }

              dispatch thunk of DispatchWorkItem.cancel()();
              sub_100321CD0(a2 + 48, (uint64_t)v24);
              if (v25)
              {
                sub_10020ED28((uint64_t)v24, (uint64_t)v23);
                sub_100321D38((uint64_t)v24);
                sub_100204074(v23, v23[3]);
                sub_1002B3D94();
                swift_bridgeObjectRelease();
                swift_release();

                sub_1002018DC((uint64_t)v23);
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();

                sub_100321D38((uint64_t)v24);
              }
              goto LABEL_24;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();

LABEL_24:
          unint64_t v6 = a1 & 0xC000000000000001;
          goto LABEL_25;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
LABEL_25:
      if (v4 == ++v7) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100321964()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  sub_100321D38(v0 + 48);
  return v0;
}

uint64_t sub_1003219A4()
{
  sub_100321964();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LetMeInRecoveryManager()
{
  return self;
}

uint64_t destroy for CachedLetMeInRequest(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = (id)v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  long long v10 = *(void **)(a2 + 16);
  char v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v13;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedLetMeInRequest(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedLetMeInRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedLetMeInRequest()
{
  return &type metadata for CachedLetMeInRequest;
}

uint64_t sub_100321C44()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100321C84()
{
  return sub_10032157C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100321C90()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100321CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100321CC8()
{
  return swift_release();
}

uint64_t sub_100321CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100587AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100321D38(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100587AA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100321D98()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100321DF0()
{
  return sub_1003207E8(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_100321E04()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100321E44()
{
  return sub_100321018(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100321E60(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v8 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  id v5 = a1;
  NSArray.makeIterator()();

  sub_1003259E0(&qword_100589E88, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  while (v13)
  {
    sub_1001F75B4(&v12, v11);
    sub_100201880((uint64_t)v11, (uint64_t)v9);
    sub_1001F6204(0, &qword_100588918);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v10 = 0;
    }
    sub_1002018DC((uint64_t)v11);
    if (v10)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v4, v2);
  return v14;
}

unint64_t sub_100322094(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_1003220A4(uint64_t result)
{
  return result;
}

Swift::Int sub_1003220AC()
{
  return sub_1002EFC64(*v0);
}

Swift::Int sub_1003220B4(uint64_t a1)
{
  return sub_1002EFE84(a1, *v1);
}

unint64_t sub_1003220BC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100322094(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003220E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003220A4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100322114(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100325B7C();
  unint64_t v5 = sub_1002B7E88();

  return Error<>._code.getter(a1, a2, v4, v5);
}

unint64_t sub_10032216C(char a1)
{
  unint64_t result = 0xD00000000000003BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD000000000000029;
      break;
    case 4:
      unint64_t result = 0xD000000000000023;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100322218()
{
  return sub_10032216C(*v0);
}

id sub_100322220(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = sub_100325654([objc_allocWithZone((Class)TUVouchingEnablementImpl) init], a1, objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

void sub_1003222E0(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v157 = (void *)type metadata accessor for Logger();
  uint64_t v6 = *(v157 - 1);
  uint64_t v7 = __chkstk_darwin(v157);
  uint64_t v153 = (char *)v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v152 = (char *)v126 - v10;
  __chkstk_darwin(v9);
  uint64_t v154 = (char *)v126 - v11;
  uint64_t v156 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v155 = (char *)v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v150 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v149 = (char *)v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  uint64_t v151 = a2;
  uint64_t v21 = *(void **)(a2 + OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_vouchingEnablement);
  _Block_copy(a3);
  if (![v21 isEnabled])
  {
    (*((void (**)(const void *, void *))a3 + 2))(a3, a1);
    swift_release();
    _Block_release(a3);
    return;
  }
  int v139 = v17;
  uint64_t v140 = v18;
  uint64_t v22 = sub_100325390(a1, (SEL *)&selRef_clientContextData);
  os_log_type_t v24 = "synchronousConversationsForBundleIdentifier" + 32;
  if (v23 >> 60 == 15) {
    goto LABEL_14;
  }
  uint64_t v134 = v15;
  uint64_t v25 = v22;
  unint64_t v26 = v23;
  id v27 = objc_allocWithZone((Class)CSDMessagingConversationParticipantDidJoinContext);
  sub_1001F7440(v25, v26);
  uint64_t v137 = v25;
  unint64_t v138 = v26;
  id v28 = sub_1001FC93C(v25, v26);
  if (!v28)
  {
LABEL_13:
    sub_1001FCB18(v137, v138);
    os_log_type_t v24 = "eIdentifier";
LABEL_14:
    if (qword_1005839F0 != -1) {
LABEL_71:
    }
      swift_once();
    sub_1001F5F88((uint64_t)v157, (uint64_t)qword_100594BC8);
    id v40 = a1;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unsigned int v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      uint64_t v45 = *((void *)v24 + 206);
      uint64_t v141 = a3;
      *(_DWORD *)unsigned int v43 = v45;
      id aBlock = (uint64_t)v40;
      id v46 = v40;
      a3 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v40;

      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to identify context from participant update %@.", v43, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*((void (**)(const void *, id))a3 + 2))(a3, v40);
    swift_release();
    uint64_t v47 = a3;
    goto LABEL_19;
  }
  id v29 = v28;
  if ((sub_100323618() & 1) == 0)
  {

    goto LABEL_13;
  }
  uint64_t v129 = v14;
  if (qword_1005839F0 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_1001F5F88((uint64_t)v157, (uint64_t)qword_100594BC8);
  id v31 = v29;
  uint64_t v144 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v135 = a1;
  uint64_t v141 = a3;
  if (v34)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v148 = v32;
    uint64_t v37 = (void *)v36;
    *(_DWORD *)uint64_t v35 = 138412290;
    id v146 = v35 + 4;
    uint64_t v147 = v35;
    id aBlock = (uint64_t)v31;
    id v38 = v31;
    a1 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v37 = v29;

    id v39 = v148;
    _os_log_impl((void *)&_mh_execute_header, v148, v33, "Starting sanitization of %@.", v147, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v130 = v20;
  dispatch_group_t v132 = dispatch_group_create();
  id v128 = v31;
  unint64_t v48 = (unint64_t)sub_100323874();
  unint64_t v49 = v48;
  a3 = v157;
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    if (v50) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }
  uint64_t v50 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v50)
  {
LABEL_69:
    swift_bridgeObjectRelease();
    uint64_t v115 = swift_allocObject();
    swift_unknownObjectWeakInit();
    char v116 = (void *)swift_allocObject();
    char v117 = v128;
    v116[2] = v115;
    v116[3] = v117;
    uint64_t v118 = v130;
    v116[4] = sub_10027E488;
    v116[5] = v118;
    v116[6] = a1;
    v116[7] = v49;
    uint64_t v163 = sub_10032558C;
    unint64_t v164 = v116;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v160 = 1107296256;
    uint64_t v161 = sub_1002C2C88;
    uint64_t v162 = &unk_100514BC0;
    uint64_t v119 = _Block_copy(&aBlock);
    id v120 = v117;
    swift_retain();
    swift_retain();
    id v121 = a1;
    uint64_t v122 = v149;
    static DispatchQoS.unspecified.getter();
    uint64_t v158 = _swiftEmptyArrayStorage;
    sub_1003259E0((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    uint64_t v123 = v139;
    uint64_t v124 = v129;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    dispatch_group_t v125 = v132;
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v119);

    sub_1001FCB18(v137, v138);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v123, v124);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v122, v140);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v47 = v141;
LABEL_19:
    _Block_release(v47);
    return;
  }
LABEL_23:
  uint64_t v127 = OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_voucherManager;
  uint64_t v136 = (void (**)(char *, uint64_t))(v12 + 8);
  id v52 = (uint8_t *)(v49 & 0xC000000000000001);
  v126[1] = &v161;
  uint64_t v143 = (void (**)(char *, uint64_t, const void *))(v6 + 16);
  uint64_t v142 = (void (**)(void, void))(v6 + 8);
  uint64_t v53 = 4;
  *(void *)&long long v51 = 136315138;
  long long v133 = v51;
  __int16 v131 = (char *)&type metadata for Any + 8;
  id v146 = (uint8_t *)v49;
  uint64_t v145 = v50;
  uint64_t v147 = (uint8_t *)(v49 & 0xC000000000000001);
  while (1)
  {
    if (v52) {
      uint64_t v54 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v54 = *(id *)(v49 + 8 * v53);
    }
    uint64_t v55 = v54;
    os_log_type_t v24 = (char *)(v53 - 3);
    if (__OFADD__(v53 - 4, 1))
    {
      __break(1u);
      goto LABEL_71;
    }
    id v56 = [v54 associationVoucher];
    if (!v56
      || (id v57 = v56,
          uint64_t v58 = [v56 tuVoucher],
          v57,
          !v58))
    {
      [v55 setAssociationVoucher:0];
      if ([v55 validationSource] == 2) {
        [v55 setValidationSource:0];
      }
      goto LABEL_68;
    }
    id v59 = [v58 data];
    uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v62 = v61;

    id v63 = objc_allocWithZone((Class)CSDMessagingMemberAssociationClaim);
    int v64 = sub_1001FC93C(v60, v62);
    if (!v64) {
      break;
    }
    uint64_t v148 = v64;
    uint64_t v65 = sub_1003253F0(v64);
    uint64_t v67 = v66;
    uint64_t v68 = a1;
    id v69 = [a1 groupUUID];
    uint64_t v70 = v155;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v71 = UUID.uuidString.getter();
    uint64_t v73 = v72;
    (*v136)(v70, v156);
    if (!v67)
    {
      swift_bridgeObjectRelease();
LABEL_45:
      uint64_t v84 = v153;
      uint64_t v85 = (uint64_t)v157;
      (*v143)(v153, v144, v157);
      uint64_t v77 = v55;
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = swift_slowAlloc();
        id aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = v133;
        id v89 = [v77 handle];
        id v52 = v147;
        if (!v89) {
          goto LABEL_76;
        }
        uint64_t v90 = sub_100325454(v89);
        if (!v91) {
          goto LABEL_77;
        }
        *(void *)(v88 + 4) = sub_1002344D8(v90, v91, &aBlock);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Dropping association voucher for member %s that makes claim for different conversation.", (uint8_t *)v88, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v92 = *v142;
        uint64_t v93 = v153;
LABEL_63:
        a3 = v157;
        v92(v93, v157);
        a1 = v135;
      }
      else
      {
        a1 = v68;

        (*v142)(v84, v85);
        a3 = (const void *)v85;
        id v52 = v147;
      }
      goto LABEL_65;
    }
    if (v65 == v71 && v67 == v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v75 & 1) == 0) {
        goto LABEL_45;
      }
    }
    id v94 = [v55 tuConversationMember];
    a1 = v68;
    id v52 = v147;
    if (!v94) {
      goto LABEL_59;
    }
    unint64_t v95 = v94;
    id v96 = [v58 handle];
    id v97 = [v95 handle];
    unsigned int v98 = [v96 isEqualToHandle:v97];

    if (!v98)
    {

LABEL_59:
      uint64_t v106 = v152;
      uint64_t v107 = (uint64_t)v157;
      (*v143)(v152, v144, v157);
      uint64_t v77 = v55;
      uint64_t v108 = Logger.logObject.getter();
      os_log_type_t v109 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v110 = swift_slowAlloc();
        id aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v110 = v133;
        id v111 = [v77 handle];
        if (!v111) {
          goto LABEL_78;
        }
        uint64_t v112 = sub_100325454(v111);
        if (!v113) {
          goto LABEL_79;
        }
        *(void *)(v110 + 4) = sub_1002344D8(v112, v113, &aBlock);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "Dropping association voucher for member %s because the voucher is for a different handle.", (uint8_t *)v110, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v92 = *v142;
        uint64_t v93 = v152;
        goto LABEL_63;
      }

      (*v142)(v106, v107);
      a3 = (const void *)v107;
LABEL_65:
      [v77 setAssociationVoucher:0];
      unsigned int v114 = [v77 validationSource];
      unint64_t v49 = (unint64_t)v146;
      uint64_t v50 = v145;
      if (v114 == 2) {
        [v77 setValidationSource:0];
      }

      uint64_t v55 = v148;
      goto LABEL_68;
    }
    dispatch_group_t v99 = v132;
    dispatch_group_enter(v132);
    uint64_t v100 = *(void **)(v151 + v127);
    uint64_t v101 = (void *)swift_allocObject();
    v101[2] = v95;
    v101[3] = v55;
    v101[4] = v99;
    uint64_t v163 = sub_1003255FC;
    unint64_t v164 = v101;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v160 = 1107296256;
    uint64_t v161 = sub_100317DEC;
    uint64_t v162 = &unk_100514C10;
    uint64_t v102 = _Block_copy(&aBlock);
    uint64_t v103 = v55;
    uint64_t v55 = v95;
    uint64_t v104 = v99;
    id v52 = v147;
    swift_release();
    [v100 verify:v58 completion:v102];
    _Block_release(v102);

    a1 = v135;
    a3 = v157;
    unint64_t v49 = (unint64_t)v146;
    uint64_t v50 = v145;
LABEL_68:

    ++v53;
    if (v24 == (char *)v50) {
      goto LABEL_69;
    }
  }
  uint64_t v76 = v154;
  (*v143)(v154, v144, a3);
  uint64_t v77 = v55;
  id v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v78, v79))
  {

    (*v142)(v76, a3);
LABEL_54:
    [v77 setAssociationVoucher:0];
    unsigned int v105 = [v77 validationSource];
    unint64_t v49 = (unint64_t)v146;
    id v52 = v147;
    uint64_t v50 = v145;
    if (v105 == 2) {
      [v77 setValidationSource:0];
    }

    uint64_t v55 = v58;
    goto LABEL_68;
  }
  uint64_t v80 = swift_slowAlloc();
  id aBlock = swift_slowAlloc();
  *(_DWORD *)uint64_t v80 = v133;
  id v81 = [v77 handle];
  if (v81)
  {
    uint64_t v82 = sub_100325454(v81);
    if (!v83) {
      goto LABEL_75;
    }
    *(void *)(v80 + 4) = sub_1002344D8(v82, v83, &aBlock);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Dropping association voucher for member %s that does not have an association claim as its payload.", (uint8_t *)v80, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v157;
    (*v142)(v154, v157);
    goto LABEL_54;
  }
  _Block_release(v141);

  __break(1u);
LABEL_75:
  _Block_release(v141);

  __break(1u);
LABEL_76:
  _Block_release(v141);

  __break(1u);
LABEL_77:
  _Block_release(v141);

  __break(1u);
LABEL_78:
  _Block_release(v141);

  __break(1u);
LABEL_79:
  _Block_release(v141);

  __break(1u);
}

unint64_t sub_100323618()
{
  unint64_t v1 = (unint64_t)[v0 participantUpdateType];
  if (v1 < 5) {
    return v1 & 1;
  }
  if (qword_1005839F0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001F5F88(v3, (uint64_t)qword_100594BC8);
  id v4 = v0;
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    [v4 participantUpdateType];
    type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(0);
    uint64_t v8 = String.init<A>(reflecting:)();
    sub_1002344D8(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unknown participant update type: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

id sub_100323800(void *a1)
{
  [a1 setAssociationVoucher:0];
  id result = [a1 validationSource];
  if (result == 2)
  {
    return [a1 setValidationSource:0];
  }
  return result;
}

void *sub_100323874()
{
  unint64_t v1 = v0;
  id v2 = [v0 members];
  if (v2)
  {
    id v3 = v2;
    id v4 = (void *)sub_100321E60(v3);
  }
  else
  {
    id v4 = _swiftEmptyArrayStorage;
  }
  id v5 = [v1 lightweightMembers];
  if (v5)
  {
    id v6 = v5;
    sub_100321E60(v6);
  }
  sub_1002D2868();
  uint64_t v7 = v4;
  id v8 = [v1 message];
  if (v8)
  {
    unint64_t v9 = v8;
    id v10 = [v8 addedMembers];

    if (v10)
    {
      id v11 = v10;
      sub_100321E60(v11);
    }
  }
  sub_1002D2868();
  id v12 = [v1 message];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v12 lightweightMembers];

    if (v14)
    {
      id v15 = v14;
      sub_100321E60(v15);
    }
  }
  sub_1002D2868();
  id v16 = [v1 message];
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = [v16 removedMembers];

    if (v18)
    {
      id v19 = v18;
      sub_100321E60(v19);
    }
  }
  sub_1002D2868();
  return v7;
}

void sub_100323AA8(char a1, uint64_t a2, void *a3, void *a4, NSObject *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1005839F0 != -1) {
      swift_once();
    }
    sub_1001F5F88(v10, (uint64_t)qword_100594BC8);
    id v14 = a3;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v37 = (v17 + 4);
      id v18 = [v14 handle];
      id v19 = a5;
      id v20 = [v18 value];

      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      a5 = v19;
      uint64_t v38 = sub_1002344D8(v21, v23, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Verified voucher on member %s.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_15;
  }
  if (qword_1005839F0 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_1001F5F88(v10, (uint64_t)qword_100594BC8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, v10);
  id v25 = a4;
  swift_errorRetain();
  id v26 = v25;
  swift_errorRetain();
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v27, v28))
  {

    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_14;
  }
  uint64_t v37 = a5;
  uint64_t v29 = swift_slowAlloc();
  uint64_t v30 = swift_slowAlloc();
  uint64_t v39 = v30;
  *(_DWORD *)uint64_t v29 = 136315394;
  id v31 = [v26 handle];
  if (v31)
  {
    uint64_t v36 = v30;
    uint64_t v32 = sub_100325454(v31);
    if (v33)
    {
      uint64_t v38 = sub_1002344D8(v32, v33, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v38 = a2;
      swift_errorRetain();
      sub_1001F081C(&qword_100587D10);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v38 = sub_1002344D8(v34, v35, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to validate verified voucher on member %s with error %s.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      a5 = v37;
LABEL_14:
      sub_100323800(v26);
LABEL_15:
      dispatch_group_leave(a5);
      return;
    }
  }
  else
  {
    swift_errorRelease();

    __break(1u);
  }
  swift_errorRelease();

  __break(1u);
}

void sub_100323FB4(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, unint64_t a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1005839F0 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_1001F5F88(v67, (uint64_t)qword_100594BC8);
    uint64_t v68 = a2;
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 138412290;
      uint64_t v107 = v68;
      uint64_t v73 = a3;
      uint64_t v74 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v68;

      a3 = v73;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Could not finish sanitization of %@. Self was deallocated", v71, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v69 = v68;
    }

    uint64_t v75 = sub_100325390(v68, (SEL *)&selRef_data);
    unint64_t v77 = v76;
    id v78 = sub_100324E14(v75, v76);
    sub_1001FCB18(v75, v77);
    a3(v78);
    goto LABEL_83;
  }
  id v97 = (void (*)(id))a3;
  unsigned int v98 = (void *)Strong;
  unint64_t v101 = a6 >> 62;
  if (a6 >> 62)
  {
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_77;
  }
  uint64_t v9 = *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
  {
LABEL_77:
    swift_bridgeObjectRelease();
    if (qword_1005839F0 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_1001F5F88(v79, (uint64_t)qword_100594BC8);
    uint64_t v80 = a2;
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v83 = 138412290;
      uint64_t v107 = v80;
      uint64_t v85 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v84 = v80;

      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Finished sanitization of %@.", v83, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v81 = v80;
    }

    uint64_t v86 = sub_100325390(v80, (SEL *)&selRef_data);
    unint64_t v88 = v87;
    id v78 = sub_100324E14(v86, v87);
    sub_1001FCB18(v86, v88);
    v97(v78);

LABEL_83:
    return;
  }
LABEL_4:
  uint64_t v10 = 0;
  unint64_t v106 = a6 & 0xC000000000000001;
  unint64_t v11 = a6 + 32;
  uint64_t v96 = a6 & 0xFFFFFFFFFFFFFF8;
  uint64_t v12 = &selRef_sessionProvider_receivedSessionMessageFromID_withData_;
  uint64_t v13 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
  unint64_t v105 = a6;
  uint64_t v99 = v9;
  unint64_t v100 = a6 + 32;
  while (1)
  {
    if (v106) {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v14 = *(id *)(v11 + 8 * v10);
    }
    id v15 = v14;
    if (__OFADD__(v10++, 1))
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    id v17 = [v14 handle];
    if (!v17) {
      break;
    }
    id v18 = v17;
    id v19 = [v17 tuHandle];

    if (!v19) {
      goto LABEL_20;
    }
    id v20 = [v15 associationVoucher];
    if (!v20) {
      goto LABEL_19;
    }
    uint64_t v21 = v20;
    id v22 = [v20 tuVoucher];

    if (!v22) {
      goto LABEL_19;
    }
    uint64_t v103 = v22;
    id v23 = [v22 unsafeData];
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    id v27 = objc_allocWithZone((Class)CSDMessagingMemberAssociationClaim);
    id v28 = sub_1001FC93C(v24, v26);
    if (!v28
      || (uint64_t v29 = v28,
          id v30 = [v28 tuAssociationForHandle:v19],
          v29,
          !v30))
    {

      uint64_t v12 = &selRef_sessionProvider_receivedSessionMessageFromID_withData_;
      uint64_t v13 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
      id v19 = v22;
LABEL_19:

LABEL_20:
      objc_msgSend(v15, v12[68], 0, v89);
      if ([v15 v13[233]] == 2) {
        [v15 setValidationSource:0];
      }

      goto LABEL_23;
    }
    uint64_t v104 = v30;
    if (v101)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      if (v31)
      {
LABEL_26:
        uint64_t v32 = 4;
        while (1)
        {
          if (v106) {
            id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v33 = *(id *)(a6 + 8 * v32);
          }
          uint64_t v34 = v33;
          a6 = v32 - 3;
          if (__OFADD__(v32 - 4, 1))
          {
            __break(1u);
            goto LABEL_75;
          }
          id v35 = [v33 handle];
          if (!v35) {
            break;
          }
          uint64_t v36 = v35;
          id v37 = [v35 tuHandle];

          if (v37)
          {
            id v38 = [v104 handle];
            unsigned int v39 = [v38 isEqualToHandle:v37];

            if (v39)
            {
              a6 = v105;
              swift_bridgeObjectRelease();
              id v41 = [v15 tuConversationMember];
              if (v41)
              {
                os_log_type_t v42 = v41;
                unsigned int v43 = [v34 tuConversationMember];
                unint64_t v11 = v100;
                uint64_t v12 = &selRef_sessionProvider_receivedSessionMessageFromID_withData_;
                uint64_t v13 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
                if (v43)
                {
                  os_log_t v94 = v43;
                  unint64_t v95 = v42;
                  uint64_t v44 = sub_100324F34(v104, v42, v43);
                  if (!v44)
                  {
                    [v15 setValidationSource:2];

                    uint64_t v9 = v99;
                    goto LABEL_23;
                  }
                  uint64_t v45 = v44;
                  [v15 setAssociationVoucher:0];
                  if ([v15 validationSource] == 2) {
                    [v15 setValidationSource:0];
                  }
                  uint64_t v46 = v45;
                  if (qword_1005839F0 != -1) {
                    swift_once();
                  }
                  uint64_t v47 = type metadata accessor for Logger();
                  sub_1001F5F88(v47, (uint64_t)qword_100594BC8);
                  id v48 = v19;
                  swift_errorRetain();
                  id v49 = v48;
                  swift_errorRetain();
                  uint64_t v50 = Logger.logObject.getter();
                  os_log_type_t v51 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v50, v51))
                  {
                    log = v50;
                    uint64_t v52 = swift_slowAlloc();
                    uint64_t v90 = (void *)swift_slowAlloc();
                    uint64_t v107 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v52 = 138412546;
                    uint64_t v89 = v46;
                    id v53 = v49;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    void *v90 = v19;

                    *(_WORD *)(v52 + 12) = 2080;
                    swift_errorRetain();
                    sub_1001F081C(&qword_100587D10);
                    uint64_t v54 = String.init<A>(describing:)();
                    sub_1002344D8(v54, v55, (uint64_t *)&v107);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    swift_errorRelease();
                    swift_errorRelease();
                    _os_log_impl((void *)&_mh_execute_header, log, v51, "Failed to validate association for member: %@ with error: %s", (uint8_t *)v52, 0x16u);
                    sub_1001F081C(&qword_100585900);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    swift_errorRelease();
                    id v56 = v53;
                    goto LABEL_61;
                  }

                  swift_errorRelease();
                  swift_errorRelease();
                  swift_errorRelease();

LABEL_67:
                  uint64_t v9 = v99;
                  uint64_t v12 = &selRef_sessionProvider_receivedSessionMessageFromID_withData_;
                  uint64_t v13 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
                  goto LABEL_23;
                }
                [v34 setAssociationVoucher:0];
                if ([v34 validationSource] == 2) {
                  [v34 setValidationSource:0];
                }
                if (qword_1005839F0 != -1) {
                  swift_once();
                }
                uint64_t v62 = type metadata accessor for Logger();
                sub_1001F5F88(v62, (uint64_t)qword_100594BC8);
                id v63 = v34;
                int v64 = Logger.logObject.getter();
                os_log_type_t v65 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v64, v65))
                {
                  uint64_t v66 = (uint8_t *)swift_slowAlloc();
                  uint64_t v93 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v66 = 138412290;
                  uint64_t v107 = v63;
                  uint64_t v92 = v63;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *uint64_t v93 = v63;

                  _os_log_impl((void *)&_mh_execute_header, v64, v65, "Could not create TUConversationMember for other associated member: %@", v66, 0xCu);
                  sub_1001F081C(&qword_100585900);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

LABEL_60:
                  id v56 = v103;
LABEL_61:

                  goto LABEL_67;
                }
              }
              else
              {
                [v15 setAssociationVoucher:0];
                unint64_t v11 = v100;
                if ([v15 validationSource] == 2) {
                  [v15 setValidationSource:0];
                }
                if (qword_1005839F0 != -1) {
                  swift_once();
                }
                uint64_t v57 = type metadata accessor for Logger();
                sub_1001F5F88(v57, (uint64_t)qword_100594BC8);
                id v15 = v15;
                uint64_t v58 = Logger.logObject.getter();
                os_log_type_t v59 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v58, v59))
                {
                  uint64_t v60 = swift_slowAlloc();
                  unint64_t v61 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v60 = 138412290;
                  *(void *)(v60 + 4) = v15;
                  *unint64_t v61 = v15;

                  _os_log_impl((void *)&_mh_execute_header, v58, v59, "Could not create TUConversationMember for member: %@", (uint8_t *)v60, 0xCu);
                  sub_1001F081C(&qword_100585900);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  goto LABEL_60;
                }
              }
              goto LABEL_67;
            }
          }

          ++v32;
          BOOL v40 = a6 == v31;
          a6 = v105;
          if (v40) {
            goto LABEL_36;
          }
        }
        __break(1u);
        break;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v96 + 16);
      swift_bridgeObjectRetain();
      if (v31) {
        goto LABEL_26;
      }
    }
LABEL_36:
    swift_bridgeObjectRelease();
    uint64_t v12 = &selRef_sessionProvider_receivedSessionMessageFromID_withData_;
    [v15 setAssociationVoucher:0];
    uint64_t v13 = &selRef_transferFileAtSandboxExtendedURL_toDestinations_withMetadata_fromMember_;
    if ([v15 validationSource] == 2) {
      [v15 setValidationSource:0];
    }

    uint64_t v9 = v99;
    unint64_t v11 = v100;
LABEL_23:
    if (v10 == v9) {
      goto LABEL_77;
    }
  }
  __break(1u);
}

id sub_100324E14(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  id v6 = [v3 dictionaryRepresentation];
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = v7;
  *(void *)&long long v9 = 0xD000000000000034;
  *((void *)&v9 + 1) = 0x8000000100488930;
  AnyHashable.init<A>(_:)();
  if (a2 >> 60 == 15)
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  else
  {
    *((void *)&v10 + 1) = &type metadata for Data;
    *(void *)&long long v9 = a1;
    *((void *)&v9 + 1) = a2;
  }
  sub_100249550(a1, a2);
  sub_1002C2704((uint64_t)&v9, (uint64_t)v11);
  sub_1001F6204(0, &qword_100589E80);
  return sub_1003252FC();
}

uint64_t sub_100324F34(void *a1, void *a2, id a3)
{
  id v6 = [a3 association];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [a1 handle];
    id v9 = [a3 handle];
    unsigned int v10 = [v8 isEqualToHandle:v9];

    if (v10
      && (id v11 = [v7 handle],
          id v12 = [a2 handle],
          unsigned int v13 = [v11 isEqualToHandle:v12],
          v11,
          v12,
          v13))
    {
      id v14 = [a1 handle];
      id v15 = [v7 handle];
      unsigned __int8 v16 = [v14 isEqualToHandle:v15];

      if (v16)
      {
        sub_100325608();
        uint64_t v18 = swift_allocError();
        char v19 = 3;
      }
      else if (([a1 isPrimary] & 1) != 0 || objc_msgSend(v7, "isPrimary"))
      {
        if (([a2 isLightweightMember] & 1) == 0
          || ([a3 isLightweightMember] & 1) == 0)
        {

          return 0;
        }
        sub_100325608();
        uint64_t v18 = swift_allocError();
        char v19 = 4;
      }
      else
      {
        sub_100325608();
        uint64_t v18 = swift_allocError();
        char v19 = 2;
      }
    }
    else
    {
      sub_100325608();
      uint64_t v18 = swift_allocError();
      char v19 = 1;
    }
    char *v17 = v19;
  }
  else
  {
    sub_100325608();
    uint64_t v18 = swift_allocError();
    *id v20 = 0;
  }
  return v18;
}

void sub_10032523C()
{
}

uint64_t type metadata accessor for ParticipantUpdateSanitizerImpl()
{
  return self;
}

id sub_1003252FC()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithDictionaryRepresentation:isa];

  return v2;
}

uint64_t sub_100325384(void *a1)
{
  return sub_100325390(a1, (SEL *)&selRef_data);
}

uint64_t sub_100325390(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1003253F0(void *a1)
{
  id v1 = [a1 conversationGroupUUIDString];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100325454(void *a1)
{
  id v2 = [a1 value];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1003254C4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003254FC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100325534()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10032558C()
{
  sub_100323FB4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10032559C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003255AC()
{
  return swift_release();
}

uint64_t sub_1003255B4()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1003255FC(char a1, uint64_t a2)
{
  sub_100323AA8(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(NSObject **)(v2 + 32));
}

unint64_t sub_100325608()
{
  unint64_t result = qword_100589E78;
  if (!qword_100589E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589E78);
  }
  return result;
}

id sub_100325654(void *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = a2;
  uint64_t v21 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = qword_1005839F0;
  unsigned int v10 = a3;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100594BC8);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Initializing ParticipantUpdateSanitizer.", v14, 2u);
    swift_slowDealloc();
  }

  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  static DispatchQoS.unspecified.getter();
  unint64_t v25 = _swiftEmptyArrayStorage;
  sub_1003259E0((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_10020A70C((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  *(void *)&v10[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_completionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v15 = v21;
  *(void *)&v10[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_vouchingEnablement] = v21;
  *(void *)&v10[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_voucherManager] = v23;
  id v16 = v15;
  swift_unknownObjectRetain();

  v24.receiver = v10;
  v24.super_class = ObjectType;
  id v17 = objc_msgSendSuper2(&v24, "init");

  swift_unknownObjectRelease();
  return v17;
}

uint64_t sub_1003259E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticipantUpdateSanitizerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100325AF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantUpdateSanitizerError()
{
  return &type metadata for ParticipantUpdateSanitizerError;
}

unint64_t sub_100325B30()
{
  unint64_t result = qword_100589E90;
  if (!qword_100589E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589E90);
  }
  return result;
}

unint64_t sub_100325B7C()
{
  unint64_t result = qword_100589E98;
  if (!qword_100589E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100589E98);
  }
  return result;
}

uint64_t sub_100325BD0@<X0>(uint64_t a1@<X8>)
{
  sub_1003423E8(v1);
  if (v3 >> 60 == 15)
  {
    uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement();
    return sub_1001F0530(a1, 1, 1, v4);
  }
  else
  {
    return sub_1002E89CC(a1);
  }
}

uint64_t sub_100325C98()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100325D44(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
  *unint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100325D84()
{
  return *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version);
}

uint64_t sub_100325DBC(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version) = result;
  return result;
}

id sub_100325DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = &v3[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = a2;
  *(void *)&v3[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for GeneratorDescriptor();
  return objc_msgSendSuper2(&v6, "init");
}

BOOL sub_100325E50(uint64_t a1)
{
  sub_100204CE0(a1, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for GeneratorDescriptor();
    if (swift_dynamicCast())
    {
      BOOL v2 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier) == *(void *)&v6[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier]
        && *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8) == *(void *)&v6[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version);
        uint64_t v4 = *(void *)&v6[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];

        return v3 == v4;
      }
    }
  }
  else
  {
    sub_100202D2C((uint64_t)v7);
  }
  return 0;
}

Swift::Int sub_100325FC8()
{
  Hasher.init()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version));
  memcpy(__dst, v2, sizeof(__dst));
  return Hasher.finalize()();
}

void sub_100326058()
{
}

id sub_100326098()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GeneratorDescriptor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GeneratorDescriptor()
{
  return self;
}

uint64_t sub_100326104(void *a1, uint64_t a2, int a3)
{
  int v32 = a3;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for AudioDescriptor();
  __chkstk_darwin(v5);
  uint64_t v31 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1001F081C(&qword_10058A128);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  unsigned int v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1001F081C(&qword_100584C80);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  id v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v30 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v30 - v19;
  __chkstk_darwin(v18);
  id v22 = (char *)&v30 - v21;
  uint64_t v23 = v3 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor;
  swift_beginAccess();
  sub_1003292AC(v23, (uint64_t)v22);
  uint64_t v24 = v33;
  uint64_t v33 = v3;
  sub_100327730(a1, v24, (uint64_t)v20);
  uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1003292AC((uint64_t)v22, (uint64_t)v10);
  sub_1003292AC((uint64_t)v20, v25);
  if (sub_1001F758C((uint64_t)v10, 1, v5) == 1)
  {
    if (sub_1001F758C(v25, 1, v5) == 1)
    {
      sub_1002392A8((uint64_t)v10, &qword_100584C80);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_1003292AC((uint64_t)v10, (uint64_t)v17);
  if (sub_1001F758C(v25, 1, v5) == 1)
  {
    sub_1003294FC((uint64_t)v17, (void (*)(void))type metadata accessor for AudioDescriptor);
LABEL_6:
    sub_1002392A8((uint64_t)v10, &qword_10058A128);
    goto LABEL_9;
  }
  uint64_t v26 = v31;
  sub_10032944C(v25, v31, (void (*)(void))type metadata accessor for AudioDescriptor);
  char v27 = sub_100315638((uint64_t)v17, v26);
  sub_1003294FC(v26, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_1003294FC((uint64_t)v17, (void (*)(void))type metadata accessor for AudioDescriptor);
  sub_1002392A8((uint64_t)v10, &qword_100584C80);
  if (v27)
  {
LABEL_8:
    if ((v32 & 1) == 0) {
      goto LABEL_11;
    }
  }
LABEL_9:
  sub_1003292AC((uint64_t)v20, (uint64_t)v14);
  swift_beginAccess();
  sub_1003295C4((uint64_t)v14, v23, &qword_100584C80);
  swift_endAccess();
  id v28 = *(void (**)(char *, char *, void))(v33
                                                      + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  if (v28)
  {
    swift_retain();
    v28(v22, v20, v32 & 1);
    sub_100208490((uint64_t)v28);
  }
LABEL_11:
  sub_1002392A8((uint64_t)v20, &qword_100584C80);
  return sub_1002392A8((uint64_t)v22, &qword_100584C80);
}

id sub_1003264B0()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v1 = [objc_allocWithZone((Class)CSDTTYProviderObserver) init];
  id v2 = [self sharedAudioSystemController];
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result deviceType];

    unsigned __int8 v6 = sub_100326884();
    id v7 = [self sharedInstance];
    id v8 = [v7 queue];

    id result = [self sharedInstance];
    if (v2)
    {
      uint64_t v9 = result;
      id v10 = objc_allocWithZone((Class)TUFeatureFlags);
      id v11 = v2;
      id v12 = [v10 init];
      uint64_t v13 = swift_allocObject();
      uint64_t v14 = sub_100329678(v0, v1, v6 & 1, v5 == (id)7, v8, v9, (uint64_t)v11, v12, v13);

      return (id)v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10032666C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v1 = sub_1001B1BF8();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    sub_1003268E8(0);
    return swift_release();
  }
  return result;
}

uint64_t sub_10032670C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = *(void **)(result + 16);
    *id v7 = v9;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
    id v10 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    if (v9)
    {
      id v11 = a1;
      sub_100326104(a1, a2, 0);

      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

id sub_100326884()
{
  id result = [self sharedInstance];
  if (result)
  {
    id v1 = result;
    id v2 = [result deviceType];

    return (id)(v2 != (id)7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003268E8(int a1)
{
  int v22 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10028AC3C();
  uint64_t v23 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_10021067C();
  id v17 = *(void **)(v1 + 16);
  *uint64_t v3 = v17;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v3, enum case for DispatchPredicate.notOnQueue(_:), v13);
  id v21 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v3, v13);
  if (v17)
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v1;
    *(unsigned char *)(v19 + 24) = v22 & 1;
    aBlock[4] = sub_100329288;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    void aBlock[3] = &unk_100514D08;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v23);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100326B98(uint64_t a1, int a2)
{
  return sub_100326104(0, 0, a2);
}

uint64_t sub_100326BC8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (a1)
    {
      id v11 = a1;
      if ((sub_100326D44() & 1) == 0)
      {

        a1 = 0;
      }
    }
    uint64_t v12 = sub_100326E0C(*(void **)(v2 + 24), *(void **)(v2 + 32), a1, *(unsigned char *)(v2 + 88));

    return (uint64_t)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100326D44()
{
  if ([v0 status] != 6) {
    return 0;
  }
  [v0 callDuration];
  if (v1 <= 0.0
    && ([v0 isOutgoing] & 1) == 0
    && [v0 disconnectedReason] != 14)
  {
    return 0;
  }
  if ([v0 hasAudioFinished]) {
    return 0;
  }
  id v3 = [v0 provider];
  id v2 = [v3 isSystemProvider];

  return v2;
}

void *sub_100326E0C(void *a1, void *a2, void *a3, unsigned __int8 a4)
{
  id v5 = [a1 callContainer];
  swift_getObjectType();
  uint64_t v6 = (void *)sub_10030A440((uint64_t)sub_100327350, 0);
  swift_unknownObjectRelease();
  id v7 = sub_100329C6C();
  swift_getObjectType();
  uint64_t v8 = (void *)sub_10030A440((uint64_t)sub_100327400, 0);
  swift_unknownObjectRelease();
  id v9 = sub_100329C6C();
  swift_getObjectType();
  uint64_t v10 = (void *)sub_10030A440((uint64_t)sub_1003274B4, 0);
  swift_unknownObjectRelease();
  id v11 = sub_100329C6C();
  swift_getObjectType();
  uint64_t v12 = (void *)sub_10030A440((uint64_t)sub_100327514, 0);
  swift_unknownObjectRelease();
  id v13 = sub_100329C6C();
  swift_getObjectType();
  uint64_t v14 = (void *)sub_10030A440((uint64_t)sub_100327578, 0);
  swift_unknownObjectRelease();
  id v15 = sub_100329C6C();
  swift_getObjectType();
  uint64_t v16 = (void *)sub_10030A440((uint64_t)sub_1003275C4, 0);
  swift_unknownObjectRelease();
  id v17 = sub_100329C6C();
  swift_getObjectType();
  BOOL v40 = (void *)sub_10030A440((uint64_t)sub_100327614, 0);
  swift_unknownObjectRelease();
  id v18 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v20 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v21 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v22 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v23 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  int v24 = a4;
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v25 = v16;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v24 == 2)
  {
    if ((sub_100326884() & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if ((v24 & 1) == 0)
  {
    goto LABEL_20;
  }
  id v26 = v40;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100329C50();
  if (v19) {
    sub_100329C2C();
  }
  sub_100329C60();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_20:
  id v27 = a3;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v28 = _swiftEmptyArrayStorage[2];
  if (!v28)
  {
LABEL_26:

    swift_bridgeObjectRelease();
LABEL_32:

    uint64_t v33 = 0;
    uint64_t v34 = v40;
    goto LABEL_33;
  }
  uint64_t v29 = 0;
  while (1)
  {
    uint64_t v30 = (void *)_swiftEmptyArrayStorage[v29 + 4];
    if (v30) {
      break;
    }
    if (v28 == ++v29) {
      goto LABEL_26;
    }
  }
  id v31 = v30;
  swift_bridgeObjectRelease();
  id v32 = v31;
  if (([v32 isEndpointOnCurrentDevice] & 1) == 0
    || [v32 status] != 4
    && [v32 isTTY]
    && [a2 transportMethod] == (id)2)
  {

    id v25 = v23;
    id v23 = v22;
    id v22 = v21;
    id v21 = v20;
    id v20 = v18;
    goto LABEL_32;
  }
  id v36 = v32;
  unsigned int v37 = [v36 isScreening];

  if (v37) {
    uint64_t v34 = v36;
  }
  else {
    uint64_t v34 = v40;
  }
  if (v37) {
    uint64_t v33 = v40;
  }
  else {
    uint64_t v33 = v30;
  }
LABEL_33:

  return v33;
}

id sub_100327350(void *a1)
{
  id v2 = [a1 provider];
  unsigned int v3 = [v2 isSystemProvider];

  if (v3 && [a1 status] == 1)
  {
    id result = [a1 isConnecting];
    if (!result) {
      return result;
    }
    if (([a1 isConnected] & 1) == 0) {
      return [a1 isVideo];
    }
  }
  return 0;
}

id sub_100327400(void *a1)
{
  id v2 = [a1 provider];
  unsigned int v3 = [v2 isSystemProvider];

  if (v3 && [a1 status] == 1)
  {
    id result = [a1 isConnecting];
    if (!result) {
      return result;
    }
    if (([a1 isConnected] & 1) == 0) {
      return (id)([a1 isVideo] ^ 1);
    }
  }
  return 0;
}

id sub_1003274B4(void *a1)
{
  if ([a1 status] != 1) {
    return 0;
  }
  id result = [a1 isConnected];
  if (result) {
    return [a1 isVideo];
  }
  return result;
}

id sub_100327514(void *a1)
{
  if ([a1 status] != 1) {
    return 0;
  }
  id result = [a1 isConnected];
  if (result) {
    return (id)([a1 isVideo] ^ 1);
  }
  return result;
}

id sub_100327578(void *a1)
{
  if ([a1 status] == 3) {
    return [a1 hasStartedOutgoing];
  }
  else {
    return 0;
  }
}

uint64_t sub_1003275C4(void *a1)
{
  if ([a1 status] == 2) {
    return [a1 isPTT] ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100327614()
{
  return sub_10032763C() & 1;
}

uint64_t sub_10032763C()
{
  id v1 = [v0 provider];
  unsigned int v2 = [v1 supportsCurrentPlatform];

  if (!v2) {
    return 0;
  }
  if ([v0 status] == 4) {
    return 1;
  }
  id v4 = [v0 provider];
  unsigned __int8 v5 = [v4 isSystemProvider];

  if ((v5 & 1) != 0 || [v0 status] != 1) {
    return 0;
  }
  uint64_t result = (uint64_t)[v0 isConnecting];
  if (result) {
    return [v0 isConnected] ^ 1;
  }
  return result;
}

uint64_t sub_100327730@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  uint64_t v247 = a2;
  id v249 = a1;
  uint64_t v8 = sub_1001F081C(&qword_100584B40);
  uint64_t v9 = sub_100202384(v8);
  __chkstk_darwin(v9);
  sub_10021067C();
  uint64_t v10 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v231 = v11;
  __chkstk_darwin(v12);
  sub_1001FCCD0();
  uint64_t v230 = v13;
  uint64_t v14 = type metadata accessor for SoundDescriptor();
  uint64_t v15 = sub_100202384(v14);
  __chkstk_darwin(v15);
  sub_1001F7650();
  v233 = (_DWORD *)v16;
  sub_1002B8138();
  __chkstk_darwin(v17);
  id v235 = (char *)&v218 - v18;
  sub_1002B8138();
  __chkstk_darwin(v19);
  uint64_t v237 = (char *)&v218 - v20;
  sub_1002B8138();
  __chkstk_darwin(v21);
  uint64_t v236 = (uint64_t *)((char *)&v218 - v22);
  sub_1002B8138();
  __chkstk_darwin(v23);
  uint64_t v239 = (uint64_t *)((char *)&v218 - v24);
  uint64_t v25 = type metadata accessor for SoundDescriptorAction();
  uint64_t v26 = sub_100202384(v25);
  __chkstk_darwin(v26);
  sub_1001F7650();
  uint64_t v242 = v27;
  sub_1002B8138();
  __chkstk_darwin(v28);
  uint64_t v241 = (uint64_t)&v218 - v29;
  uint64_t v30 = sub_1001F081C((uint64_t *)&unk_10058A130);
  uint64_t v31 = sub_100202384(v30);
  __chkstk_darwin(v31);
  sub_1001FCCD0();
  *(void *)&long long v232 = v32;
  uint64_t v33 = sub_1001F081C(&qword_100584C70);
  uint64_t v34 = sub_100202384(v33);
  __chkstk_darwin(v34);
  sub_10028AC3C();
  id v248 = (int *)type metadata accessor for AudioDescriptor();
  sub_10020233C();
  __chkstk_darwin(v35);
  sub_1001F7650();
  uint64_t v243 = v36;
  sub_1002B8138();
  __chkstk_darwin(v37);
  v245 = (char *)&v218 - v38;
  uint64_t v39 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v41 = v40;
  __chkstk_darwin(v42);
  uint64_t v44 = (_OWORD **)((char *)&v218 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = (void *)v6[2];
  *uint64_t v44 = v45;
  (*(void (**)(void *, void, uint64_t))(v41 + 104))(v44, enum case for DispatchPredicate.onQueue(_:), v39);
  id v46 = v45;
  LOBYTE(v45) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v41 + 8))(v44, v39);
  if ((v45 & 1) == 0)
  {
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v240 = v4;
  uint64_t v238 = v10;
  uint64_t v234 = v5;
  uint64_t v47 = (void *)v6[12];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if ([v47 dualSIMRingtoneEnabled])
  {
    id v50 = v249;
    if (v249)
    {
      id v51 = [v249 ringtoneSubscriptionIdentifier];
      if (v51)
      {
        uint64_t v52 = v51;
        id v53 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = xmmword_10048F550;
        *(void *)(v54 + 56) = sub_1001F6204(0, (unint64_t *)&qword_10058B4C0);
        *(void *)(v54 + 64) = sub_100329618();
        *(void *)(v54 + 32) = v52;
        id v55 = v52;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v49 = v56;
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
    }
  }
  else
  {
    id v50 = v249;
  }
  uint64_t v57 = sub_100326BC8(v50);
  if (!v57)
  {
    swift_bridgeObjectRelease();
    uint64_t v64 = a3;
    return sub_1001F0530(v64, 1, 1, (uint64_t)v248);
  }
  uint64_t v58 = (void *)v57;
  os_log_type_t v59 = (void *)v6[10];
  unsigned int v60 = [v59 hasInEarRouteInTipiWithCompanionWatch];
  uint64_t v244 = a3;
  if (v60)
  {
    id v61 = [v58 provider];
    unsigned __int8 v62 = [v61 isSystemProvider];

    char v63 = v62 ^ 1;
  }
  else
  {
    char v63 = 0;
  }
  id v246 = v58;
  sub_10034B3A4(v246, v63, (uint64_t)v255);
  sub_100329314((uint64_t)v255, (uint64_t)v254);
  sub_100329314((uint64_t)v255, (uint64_t)&v260);
  if (sub_10024DF14((uint64_t)&v260) == 1)
  {
    swift_bridgeObjectRelease();
    if (qword_100583A18 == -1)
    {
LABEL_15:
      uint64_t v65 = type metadata accessor for Logger();
      sub_1001F5F88(v65, (uint64_t)qword_100594C40);
      id v66 = v246;
      uint64_t v67 = (void *)Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (sub_1002CA9A8(v68))
      {
        sub_100329C84();
        __dst[0] = sub_100329CA0();
        sub_100329CFC(4.8149e-34);
        id v69 = [v66 uniqueProxyIdentifier];
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v72 = v71;

        uint64_t v252 = v70;
        uint64_t v253 = v72;
        uint64_t v73 = String.init<A>(reflecting:)();
        uint64_t v75 = sub_1002344D8(v73, v74, __dst);
        sub_100329CD8(v75);

        swift_bridgeObjectRelease();
        sub_100298880((void *)&_mh_execute_header, v76, v77, "Unable to create interruption descriptor for call with proxy identifier %s");
        sub_1002466B8();
        sub_1001F63CC();
        sub_1001F63CC();

LABEL_34:
        uint64_t v64 = v244;
        return sub_1001F0530(v64, 1, 1, (uint64_t)v248);
      }

LABEL_33:
      goto LABEL_34;
    }
LABEL_110:
    swift_once();
    goto LABEL_15;
  }
  uint64_t v78 = v261;
  uint64_t v79 = v260;
  unsigned __int8 v265 = v262;
  memcpy(__dst, v263, 0x93uLL);
  if ([v47 nonInterruptingCalls])
  {
    if ([v246 status] == 4
      && ([v246 hasAudioInterruption] & 1) == 0)
    {
      uint64_t v81 = v6[8];
      uint64_t v80 = v6[9];
      sub_100204074(v6 + 5, v81);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v80 + 48))(v81, v80))
      {
        swift_bridgeObjectRelease();
        if (qword_100583A18 != -1) {
          swift_once();
        }
        uint64_t v82 = type metadata accessor for Logger();
        sub_1001F5F88(v82, (uint64_t)qword_100594C40);
        id v66 = v246;
        unint64_t v83 = (void *)Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.default.getter();
        if (sub_1002CA9A8(v84))
        {
          sub_100329C84();
          *(void *)&v256[0] = sub_100329CA0();
          sub_100329CFC(4.8149e-34);
          id v85 = [v66 uniqueProxyIdentifier];
          uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v88 = v87;

          uint64_t v252 = v86;
          uint64_t v253 = v88;
          uint64_t v89 = String.init<A>(reflecting:)();
          uint64_t v91 = sub_1002344D8(v89, v90, (uint64_t *)v256);
          sub_100329CD8(v91);

          swift_bridgeObjectRelease();
          sub_100298880((void *)&_mh_execute_header, v92, v93, "Other session requested no ringtone interruption, ending currentDescriptor(context:) method for call with unique proxy identifier %s");
          sub_1002466B8();
          sub_1001F63CC();
          sub_1001F63CC();

          sub_10032937C((uint64_t)v255);
        }
        else
        {

          sub_10032937C((uint64_t)v255);
        }
        goto LABEL_33;
      }
    }
  }
  id v220 = v59;
  id v221 = v47;
  uint64_t v229 = v6;
  uint64_t v94 = v79 | (v78 << 32);
  unint64_t v95 = v248;
  uint64_t v96 = (uint64_t)v245;
  uint64_t v97 = (uint64_t)&v245[v248[5]];
  uint64_t v98 = type metadata accessor for AudioInterruptionDeferredEndDescriptor();
  sub_1001F0530(v97, 1, 1, v98);
  uint64_t v99 = (_OWORD *)(v96 + v95[6]);
  *(_OWORD *)((char *)v99 + 26) = 0u;
  *uint64_t v99 = 0u;
  v99[1] = 0u;
  os_log_type_t v218 = v99;
  uint64_t v100 = v96 + v95[7];
  uint64_t v101 = type metadata accessor for RingtoneDescriptor();
  uint64_t v219 = v100;
  *(void *)&long long v222 = v101;
  sub_1001F0530(v100, 1, 1, v101);
  uint64_t v102 = v96 + v95[8];
  uint64_t v226 = sub_1001F081C(&qword_100585A40);
  uint64_t v227 = v102;
  sub_1001F0530(v102, 1, 2, v226);
  uint64_t v103 = v95[9];
  uint64_t v223 = v94;
  uint64_t v224 = v103;
  *(unsigned char *)(v96 + v103) = 1;
  uint64_t v104 = v96 + v95[10];
  *(void *)uint64_t v104 = 3;
  uint64_t v225 = (uint64_t *)v104;
  *(_WORD *)(v104 + 8) = 0;
  uint64_t v228 = v95[11];
  *(unsigned char *)(v96 + v228) = 1;
  *(unsigned char *)(v96 + 4) = BYTE4(v94);
  *(_DWORD *)uint64_t v96 = v94;
  *(unsigned char *)(v96 + 5) = v265;
  memcpy((void *)(v96 + 6), __dst, 0x93uLL);
  sub_100329314((uint64_t)v254, (uint64_t)&v252);
  sub_10023C3D8((uint64_t)&v252);
  if (sub_100326D44())
  {
    id v105 = [v246 uniqueProxyIdentifierUUID];
    uint64_t v106 = v240;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100329D48();
    sub_1001F0530(v107, v108, v109, v98);
    sub_1003295C4(v106, v97, &qword_100584C70);
  }
  uint64_t v110 = v229;
  LODWORD(v240) = *((unsigned __int8 *)v229 + 88);
  id v111 = v249;
  if (v240 != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v115 = v244;
LABEL_37:
    char v117 = v246;
    goto LABEL_39;
  }
  uint64_t v112 = v246;
  id v113 = [v246 provider];
  unsigned __int8 v114 = [v113 supportsRinging];

  uint64_t v115 = v244;
  if ((v114 & 1) == 0 || [v112 status] != 4)
  {
    swift_bridgeObjectRelease();
    char v117 = v112;
    goto LABEL_39;
  }
  if ([v112 shouldSuppressRingtone]) {
    goto LABEL_76;
  }
  if ([v220 hasInEarRouteInTipiWithAndSmartRoutedToCompanionWatch])
  {
    uint64_t v151 = v246;
    id v152 = [v246 provider];
    int v153 = [v152 isSystemProvider];
  }
  else
  {
    int v153 = 0;
    uint64_t v151 = v246;
  }
  id v156 = v151;
  uint64_t v157 = v232;
  sub_100319FB4(v156, v153, (void *)v232);
  sub_100329D48();
  sub_1001F0530(v158, v159, v160, v222);
  uint64_t v161 = v219;
  sub_1003295C4(v157, v219, (uint64_t *)&unk_10058A130);
  if ([v221 dualSIMRingtoneEnabled])
  {
    if (!v49) {
      goto LABEL_69;
    }
    uint64_t v162 = v222;
    if (!sub_1001F758C(v161, 1, v222))
    {
      v217 = (uint64_t *)(v161 + *(int *)(v162 + 24));
      uint64_t *v217 = v48;
      v217[1] = v49;
    }
  }
  swift_bridgeObjectRelease();
LABEL_69:
  id v163 = v156;
  uint64_t v164 = sub_100329554(v163);
  uint64_t v166 = v165;
  uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v166)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  BOOL v169 = v164 == v167 && v166 == v168;
  char v117 = v246;
  if (v169)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v170 & 1) == 0) {
      goto LABEL_39;
    }
  }
  sub_1002F7888(v163, (uint64_t)v256);
  long long v232 = v256[0];
  long long v222 = v256[1];
  uint64_t v212 = v257;
  if (v259) {
    __int16 v213 = 256;
  }
  else {
    __int16 v213 = 0;
  }
  __int16 v214 = v213 | v258;
  unint64_t v215 = v218;
  sub_1002BD990(*(void *)v218, *((void *)v218 + 1), *((void *)v218 + 2), *((void **)v218 + 3), *((void **)v218 + 4));
  long long v216 = v222;
  *unint64_t v215 = v232;
  v215[1] = v216;
  *((void *)v215 + 4) = v212;
  *((_WORD *)v215 + 20) = v214;
LABEL_39:
  if (!v111) {
    goto LABEL_79;
  }
  id v118 = v111;
  uint64_t v119 = v241;
  sub_100236000(v118, v247, v241);
  uint64_t v120 = v227;
  sub_1003293E8(v119, v227);
  uint64_t v121 = v120;
  uint64_t v122 = v242;
  sub_1003294A4(v121, v242, (void (*)(void))type metadata accessor for SoundDescriptorAction);
  if (sub_1001F758C(v122, 2, v226))
  {

    uint64_t v123 = type metadata accessor for SoundDescriptorAction;
    uint64_t v124 = (void *)v122;
LABEL_42:
    sub_1003294FC((uint64_t)v124, (void (*)(void))v123);
    goto LABEL_79;
  }
  dispatch_group_t v125 = v239;
  sub_10032944C(v122, (uint64_t)v239, (void (*)(void))type metadata accessor for SoundDescriptor);
  uint64_t v126 = *v125;
  uint64_t v127 = v236;
  sub_1003294A4((uint64_t)v125, (uint64_t)v236, (void (*)(void))type metadata accessor for SoundDescriptor);
  if (v126 == 8)
  {
    sub_1003294FC((uint64_t)v127, (void (*)(void))type metadata accessor for SoundDescriptor);
    id v128 = (uint64_t *)v237;
    sub_100329D10((uint64_t)v125);
LABEL_46:
    sub_1003294FC((uint64_t)v128, (void (*)(void))type metadata accessor for SoundDescriptor);
    uint64_t v130 = (uint64_t *)v235;
    sub_100329D10((uint64_t)v125);
LABEL_47:
    sub_1003294FC((uint64_t)v130, (void (*)(void))type metadata accessor for SoundDescriptor);
    goto LABEL_48;
  }
  uint64_t v129 = *v127;
  sub_1003294FC((uint64_t)v127, (void (*)(void))type metadata accessor for SoundDescriptor);
  id v128 = (uint64_t *)v237;
  sub_100329D10((uint64_t)v125);
  if (v129 == 9) {
    goto LABEL_46;
  }
  uint64_t v154 = *v128;
  sub_1003294FC((uint64_t)v128, (void (*)(void))type metadata accessor for SoundDescriptor);
  uint64_t v130 = (uint64_t *)v235;
  sub_100329D10((uint64_t)v125);
  if (v154 == 13) {
    goto LABEL_47;
  }
  uint64_t v155 = *v130;
  sub_1003294FC((uint64_t)v130, (void (*)(void))type metadata accessor for SoundDescriptor);
  if (v155 != 17)
  {
    sub_1003294FC((uint64_t)v125, (void (*)(void))type metadata accessor for SoundDescriptor);

    goto LABEL_79;
  }
LABEL_48:
  uint64_t v131 = *v125;
  dispatch_group_t v132 = v125;
  uint64_t v133 = (uint64_t)v110 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundType;
  if (sub_100328DEC(*(void *)((char *)v110 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundType), *((unsigned char *)v110 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundType + 8), v131))
  {
    uint64_t v134 = (uint64_t)v110 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate;
    swift_beginAccess();
    uint64_t v135 = v238;
    if (sub_1001F758C(v134, 1, v238)) {
      goto LABEL_51;
    }
    uint64_t v137 = v230;
    uint64_t v136 = v231;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v231 + 16))(v230, v134, v135);
    Date.timeIntervalSinceNow.getter();
    double v139 = v138;
    uint64_t v140 = v137;
    uint64_t v115 = v244;
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v140, v135);
    if (fabs(v139) < 2.0)
    {
LABEL_51:
      uint64_t v141 = v227;
      sub_1003294FC(v227, (void (*)(void))type metadata accessor for SoundDescriptorAction);
      sub_1001F0530(v141, 1, 2, v226);
      if (qword_100583A18 != -1) {
        swift_once();
      }
      uint64_t v142 = type metadata accessor for Logger();
      sub_1001F5F88(v142, (uint64_t)qword_100594C40);
      uint64_t v143 = v239;
      uint64_t v144 = v233;
      sub_1003294A4((uint64_t)v239, (uint64_t)v233, (void (*)(void))type metadata accessor for SoundDescriptor);
      uint64_t v145 = (void *)Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.default.getter();
      if (sub_1002CA9A8(v146))
      {
        sub_100329C84();
        v250[0] = sub_100329CA0();
        _DWORD *v144 = 136315138;
        uint64_t v251 = *(void *)v144;
        type metadata accessor for TUCallSoundPlayerSoundType(0);
        uint64_t v147 = String.init<A>(reflecting:)();
        uint64_t v251 = sub_1002344D8(v147, v148, v250);
        uint64_t v115 = v244;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        char v117 = v246;
        swift_bridgeObjectRelease();
        sub_1003294FC((uint64_t)v144, (void (*)(void))type metadata accessor for SoundDescriptor);
        sub_100298880((void *)&_mh_execute_header, v149, v150, "Not playing sound %s because the same sound was played less than 2s ago");
        sub_1002466B8();
        uint64_t v96 = (uint64_t)v245;
        sub_1001F63CC();
        sub_1001F63CC();

        uint64_t v124 = v239;
      }
      else
      {

        sub_1003294FC((uint64_t)v144, (void (*)(void))type metadata accessor for SoundDescriptor);
        uint64_t v124 = v143;
      }
      uint64_t v123 = type metadata accessor for SoundDescriptor;
      goto LABEL_42;
    }
    dispatch_group_t v132 = v239;
    uint64_t v131 = *v239;
  }
  *(void *)uint64_t v133 = v131;
  *(unsigned char *)(v133 + 8) = 0;
  uint64_t v171 = v234;
  Date.init()();

  sub_1003294FC((uint64_t)v132, (void (*)(void))type metadata accessor for SoundDescriptor);
  sub_100329D48();
  sub_1001F0530(v172, v173, v174, v238);
  uint64_t v175 = (uint64_t)v110 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate;
  swift_beginAccess();
  sub_1003295C4(v171, v175, &qword_100584B40);
  swift_endAccess();
LABEL_79:
  if ([v117 wantsHoldMusic]
    && [v117 status] == 1
    && [v117 isConnected])
  {
    *(unsigned char *)(v96 + v224) = 0;
  }
  id v176 = [v117 recordingSession];
  if (v176)
  {
    uint64_t v177 = v176;
    if (([v176 recordingState] == 2
       || [v177 recordingState] == 4
       || [v177 recordingState] == 3
       && ([v177 isRedisclosing] & 1) != 0)
      && (self, (uint64_t v178 = (void *)swift_dynamicCastObjCClass()) != 0)
      && ([v178 isInjectingAudio] & 1) != 0)
    {
      LOBYTE(v250[0]) = v265;
      uint64_t v179 = sub_100202788(v177, v223 & 0xFFFFFFFFFFLL | ((unint64_t)v265 << 40));
      unsigned int v180 = v225;
      *uint64_t v225 = v179;
      *((_WORD *)v180 + 4) = v181;
    }
    else
    {
    }
  }
  if ([v117 status] == 1 || objc_msgSend(v117, "status") == 3) {
    *(unsigned char *)(v96 + v228) = 0;
  }
  uint64_t v182 = v243;
  sub_1003294A4(v96, v243, (void (*)(void))type metadata accessor for AudioDescriptor);
  char v183 = sub_100328E34(v117, v182);
  sub_1003294FC(v182, (void (*)(void))type metadata accessor for AudioDescriptor);
  if (v183)
  {
    int v184 = *(unsigned __int8 *)(v96 + v224);
    uint64_t v185 = *(unsigned __int8 *)v225;
    if (qword_100583A18 != -1) {
      swift_once();
    }
    uint64_t v186 = type metadata accessor for Logger();
    sub_1001F5F88(v186, (uint64_t)qword_100594C40);
    id v187 = v117;
    swift_retain_n();
    id v188 = v187;
    v189 = Logger.logObject.getter();
    os_log_type_t v190 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v189, v190))
    {
      LODWORD(v246) = v184 ^ 1;
      LODWORD(v247) = v185 != 3;
      uint64_t v191 = swift_slowAlloc();
      id v249 = (id)swift_slowAlloc();
      uint64_t v251 = (uint64_t)v249;
      *(_DWORD *)uint64_t v191 = 136316162;
      id v192 = [v188 uniqueProxyIdentifier];
      uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v195 = v194;

      v250[0] = v193;
      v250[1] = v195;
      uint64_t v196 = String.init<A>(reflecting:)();
      v250[0] = sub_1002344D8(v196, v197, &v251);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v191 + 12) = 2080;
      LOBYTE(v250[0]) = v240;
      uint64_t v198 = String.init<A>(reflecting:)();
      v250[0] = sub_1002344D8(v198, v199, &v251);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v191 + 22) = 2080;
      LOBYTE(v250[0]) = [v188 shouldSuppressRingtone];
      uint64_t v200 = sub_100329CBC();
      uint64_t v202 = sub_1002344D8(v200, v201, &v251);
      sub_100329D28(v202);

      swift_bridgeObjectRelease();
      *(_WORD *)(v191 + 32) = 2080;
      LOBYTE(v250[0]) = (_BYTE)v246;
      uint64_t v203 = sub_100329CBC();
      uint64_t v205 = sub_1002344D8(v203, v204, &v251);
      sub_100329D28(v205);
      swift_bridgeObjectRelease();
      *(_WORD *)(v191 + 42) = 2080;
      LOBYTE(v250[0]) = v247;
      uint64_t v206 = sub_100329CBC();
      v250[0] = sub_1002344D8(v206, v207, &v251);
      uint64_t v115 = v244;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v189, v190, "Not creating interruption for call with upi:%s, deviceSupportsRingtone: %s shouldSuppressRingtone: %s  holdMusicDescriptor: %s  hasDisclosureDescriptor: %s", (uint8_t *)v191, 0x34u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();

      sub_10032937C((uint64_t)v255);
    }
    else
    {

      sub_10032937C((uint64_t)v255);
      swift_release_n();
    }
    sub_1001F0530(v115, 1, 1, (uint64_t)v248);
    uint64_t v211 = (uint64_t)v245;
  }
  else
  {

    sub_10032937C((uint64_t)v255);
    sub_1003294A4(v96, v115, (void (*)(void))type metadata accessor for AudioDescriptor);
    sub_100329D48();
    sub_1001F0530(v208, v209, v210, (uint64_t)v248);
    uint64_t v211 = v96;
  }
  return sub_1003294FC(v211, (void (*)(void))type metadata accessor for AudioDescriptor);
}

uint64_t sub_100328DEC(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0 && a3 == a1) {
    return 1;
  }
  if (a3 == 17) {
    return (a2 & 1) == 0 && a1 == 13;
  }
  return a3 == 13 && (a2 & 1) == 0 && a1 == 17;
}

unint64_t sub_100328E34(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AudioDescriptor();
  __chkstk_darwin(v5);
  id v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 88) == 1 && [a1 status] == 4)
  {
    unint64_t v8 = (unint64_t)[a1 shouldSuppressRingtone];
    sub_1003294A4(a2, (uint64_t)v7, (void (*)(void))type metadata accessor for AudioDescriptor);
    if (v8) {
      unint64_t v8 = v7[*(int *)(v5 + 36)];
    }
  }
  else
  {
    sub_1003294A4(a2, (uint64_t)v7, (void (*)(void))type metadata accessor for AudioDescriptor);
    unint64_t v8 = 0;
  }
  sub_1003294FC((uint64_t)v7, (void (*)(void))type metadata accessor for AudioDescriptor);
  return v8;
}

uint64_t sub_100328F64()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1002018DC(v0 + 40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1002392A8(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate, &qword_100584B40);
  swift_release();
  sub_1002392A8(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor, &qword_100584C80);
  sub_100208490(*(void *)(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler));
  return v0;
}

uint64_t sub_100329000()
{
  sub_100328F64();

  return swift_deallocClassInstance();
}

uint64_t sub_100329058()
{
  return type metadata accessor for AudioResolver();
}

uint64_t type metadata accessor for AudioResolver()
{
  uint64_t result = qword_100589F10;
  if (!qword_100589F10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1003290A8()
{
  sub_1003291FC(319, (unint64_t *)&qword_100589F20, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_1003291FC(319, (unint64_t *)&unk_100589F28, (void (*)(uint64_t))type metadata accessor for AudioDescriptor);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1003291FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100329250()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100329288()
{
  return sub_100326B98(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100329294(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003292A4()
{
  return swift_release();
}

uint64_t sub_1003292AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100584C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100329314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_10058A140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032937C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003293E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032944C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return a2;
}

uint64_t sub_1003294A4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return a2;
}

uint64_t sub_1003294FC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10020233C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100329554(void *a1)
{
  id v2 = [a1 announceProviderIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1003295C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  uint64_t v4 = sub_10026B93C();
  v5(v4);
  return a2;
}

unint64_t sub_100329618()
{
  unint64_t result = qword_10058A150;
  if (!qword_10058A150)
  {
    sub_1001F6204(255, (unint64_t *)&qword_10058B4C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058A150);
  }
  return result;
}

uint64_t sub_100329678(void *a1, void *a2, char a3, char a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  v48[3] = sub_1001F6204(0, &qword_10058A158);
  v48[4] = &off_100510028;
  v48[0] = a7;
  uint64_t v17 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate;
  uint64_t v18 = type metadata accessor for Date();
  sub_1001F0530(v17, 1, 1, v18);
  uint64_t v19 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundType;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor;
  uint64_t v21 = type metadata accessor for AudioDescriptor();
  sub_1001F0530(v20, 1, 1, v21);
  uint64_t v22 = (void *)(a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  *uint64_t v22 = 0;
  v22[1] = 0;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  *(unsigned char *)(a9 + 88) = a3;
  *(void *)(a9 + 96) = a8;
  *(void *)(a9 + 16) = a5;
  sub_10020ED28((uint64_t)v48, a9 + 40);
  *(void *)(a9 + 80) = a6;
  type metadata accessor for SoundDescriptorActionResolver();
  uint64_t v23 = swift_allocObject();
  sub_1001F6204(0, (unint64_t *)&qword_10058A160);
  sub_1002CFF14();
  id v24 = a1;
  id v40 = a2;
  id v41 = a8;
  id v25 = a5;
  id v26 = a6;
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v28 = 0;
  *(void *)(v23 + 32) = v27;
  *(void *)(v23 + 16) = v24;
  *(unsigned char *)(v23 + 24) = a4;
  *(void *)(a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_soundDescriptorActionResolver) = v23;
  uint64_t v29 = &stru_100000020;
  do
  {
    uint64_t v30 = *(uint64_t *)((char *)&off_10050AFB0 + v29);
    if ((v30 & ~v28) == 0) {
      uint64_t v30 = 0;
    }
    v28 |= v30;
    v29 += 8;
  }
  while (v29 != 224);
  [*(id *)(a9 + 24) setTriggers:v28];
  uint64_t v31 = *(void **)(a9 + 24);
  objc_msgSend(v31, "setTriggers:", (unint64_t)objc_msgSend(v31, "triggers") | 0x40000000);
  objc_msgSend(v31, "setTriggers:", (unint64_t)objc_msgSend(v31, "triggers") | 0x600000);
  id v32 = [self defaultCenter];
  uint64_t v33 = swift_allocObject();
  swift_weakInit();
  id v46 = sub_100329AC0;
  uint64_t v47 = v33;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  uint64_t v44 = sub_10028E9A0;
  uint64_t v45 = &unk_100514D58;
  uint64_t v34 = _Block_copy(&aBlock);
  swift_release();
  id v35 = [v32 addObserverForName:@"CSDRouteManagerRoutesChangedNotification" object:0 queue:0 usingBlock:v34];
  _Block_release(v34);
  swift_unknownObjectRelease();

  uint64_t v36 = *(void **)(a9 + 24);
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  id v46 = sub_100329AC8;
  uint64_t v47 = v37;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  uint64_t v44 = sub_1002F8408;
  uint64_t v45 = &unk_100514D80;
  uint64_t v38 = _Block_copy(&aBlock);
  swift_release();
  [v36 setCallChanged:v38];
  _Block_release(v38);

  sub_1002018DC((uint64_t)v48);
  return a9;
}

uint64_t sub_100329A88()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100329AC0()
{
  return sub_10032666C();
}

uint64_t sub_100329AC8(void *a1, uint64_t a2)
{
  return sub_10032670C(a1, a2);
}

void *initializeBufferWithCopyOfBuffer for AudioResolver.Context(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for AudioResolver.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AudioResolver.Context(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioResolver.Context(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioResolver.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResolver.Context()
{
  return &type metadata for AudioResolver.Context;
}

uint64_t sub_100329C2C()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100329C60()
{
  return v0;
}

id sub_100329C6C()
{
  uint64_t v3 = *(const char **)(v1 + 416);
  return [v0 v3];
}

uint64_t sub_100329C84()
{
  return swift_slowAlloc();
}

uint64_t sub_100329CA0()
{
  return swift_slowAlloc();
}

uint64_t sub_100329CBC()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_100329CD8(uint64_t a1)
{
  *(void *)(v1 + 336) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100329CFC(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v1 + 272) = v2 + 1;
}

uint64_t sub_100329D10(uint64_t a1)
{
  return sub_1003294A4(a1, v2, v1);
}

uint64_t sub_100329D28(uint64_t a1)
{
  *(void *)(v1 + 304) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_100329D88()
{
  return [self isFaceTimePhotosAvailable];
}

uint64_t type metadata accessor for FaceTimeIDSProviderDelegateCapabilities()
{
  return self;
}

uint64_t sub_100329DFC()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100329EAC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10058A200;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t sub_100329F2C()
{
  sub_100329EAC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Cache()
{
  return sub_1001F919C();
}

uint64_t sub_100329F9C()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10032A068(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v7 + 64) + v10;
  int v13 = *(_DWORD *)(v7 + 80) | v10;
  uint64_t v14 = v13;
  int v15 = v13 & 0x100000;
  if (v14 > 7
    || v15 != 0
    || (v12 & (unint64_t)~v11) + *(void *)(*(void *)(v8 - 8) + 64) > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v19 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v19, ((unint64_t)a2 + v12) & v19, v8);
  }
  return a1;
}

uint64_t sub_10032A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t sub_10032A27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10032A334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10032A3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10032A4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10032A55C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10 <= v9) {
    unsigned int v11 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v6;
  uint64_t v15 = *(void *)(*(void *)(v6 - 8) + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v16 = (v15 & ~v12) + v13;
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((a2 - v11 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v19 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v9 >= v10)
        {
          uint64_t v23 = (uint64_t)a1;
          uint64_t v7 = v14;
        }
        else
        {
          uint64_t v23 = ((unint64_t)a1 + v15) & ~v12;
          uint64_t v9 = v10;
        }
        return sub_1001F758C(v23, v9, v7);
      }
      return 0;
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_24;
  }
LABEL_14:
  int v20 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v20 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v21 = v16;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v11 + (v22 | v20) + 1;
}

void sub_10032A784(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(unsigned int *)(*(void *)(v8 - 8) + 84);
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= v9) {
    unsigned int v13 = *(_DWORD *)(*(void *)(v8 - 8) + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v11 + 64);
  char v17 = 8 * v16;
  if (a3 <= v13)
  {
    int v18 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v16 < 4)
    {
      int v20 = (v19 >> v17) + 1;
      if (v16)
      {
        int v22 = v19 & ~(-1 << v17);
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v16] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v20;
        return;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v16] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x10032AA24);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = (uint64_t)a1;
          uint64_t v24 = a2;
          uint64_t v10 = v8;
        }
        else
        {
          uint64_t v23 = (unint64_t)&a1[v15] & ~v14;
          uint64_t v24 = a2;
          uint64_t v9 = v12;
        }
        sub_1001F0530(v23, v24, v9, v10);
      }
      return;
  }
}

uint64_t type metadata accessor for Cache.CacheItem()
{
  return sub_1001F919C();
}

id sub_10032AA64(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithConfiguration:a1 callSource:a2];

  return v4;
}

uint64_t sub_10032AAC0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = sub_100206F1C(v1);
    int v6 = v5;
    uint64_t result = sub_1001F6204(0, (unint64_t *)&unk_100586190);
    if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v1 + 32))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v7 = v1 + 64;
      uint64_t v10 = v1;
      while ((*(void *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) != 0)
      {
        if (v6 != *(_DWORD *)(v1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v11 = v2;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        id v8 = sub_10032B868(2);
        id v9 = objc_allocWithZone((Class)CXLabeledHandle);
        sub_10032CFD0(v8);
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v1 = v10;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if (v4 >= -(-1 << *(unsigned char *)(v10 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(v10 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        --v2;
        if (v11 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        uint64_t v4 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(v10 + 36);
          if (result < 1 << *(unsigned char *)(v10 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

double sub_10032ACD8()
{
  double result = sub_10032AD18(1.5);
  qword_10058A310 = *(void *)&result;
  return result;
}

float sub_10032AD18(float a1)
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, "tu_defaults");
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10021E23C((uint64_t)v10, (uint64_t *)&unk_100584CA0);
    id v6 = [v2 standardUserDefaults];
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 floatForKey:v7];
    a1 = v8;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    sub_10021E23C((uint64_t)v10, (uint64_t *)&unk_100584CA0);
  }
  return a1;
}

double sub_10032AE54()
{
  double result = sub_10032AD18(0.5);
  qword_10058A318 = *(void *)&result;
  return result;
}

uint64_t sub_10032AE94()
{
  uint64_t result = sub_10032AEEC(0xD00000000000001FLL, 0x8000000100488EB0, 0x313639383034312BLL);
  qword_10058A320 = result;
  *(void *)algn_10058A328 = v1;
  return result;
}

uint64_t sub_10032AEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = self;
  id v5 = objc_msgSend(v4, "tu_defaults");
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10021E23C((uint64_t)v12, (uint64_t *)&unk_100584CA0);
    id v8 = [v4 standardUserDefaults];
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 stringForKey:v9];

    if (v10)
    {
      a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    sub_10021E23C((uint64_t)v12, (uint64_t *)&unk_100584CA0);
    swift_bridgeObjectRetain();
  }
  return a3;
}

char *sub_10032B064(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue;
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  id v5 = v1;
  *(void *)&v1[v4] = static OS_dispatch_queue.main.getter();
  *(_DWORD *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingAudioCallNotifyToken] = 0;
  *(_DWORD *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingVideoCallNotifyToken] = 0;
  sub_1001F6204(0, (unint64_t *)&unk_100584AF0);
  swift_getObjectType();
  id v6 = sub_10032B1B0();
  id v7 = a1;
  id v8 = sub_10032AA64(v6, v7);
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider] = v8;
  id v9 = v8;

  v14.receiver = v5;
  v14.super_class = ObjectType;
  id v10 = (char *)objc_msgSendSuper2(&v14, "init");
  uint64_t v11 = *(void *)&v10[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  uint64_t v12 = v10;
  [v9 setDelegate:v12 queue:v11];
  sub_10032B314();

  return v12;
}

id sub_10032B1B0()
{
  id v0 = [objc_allocWithZone((Class)CXProviderConfiguration) init];
  [v0 setMaximumCallGroups:1];
  [v0 setMaximumCallsPerCallGroup:1];
  [v0 setSupportsAudioOnly:1];
  [v0 setSupportsVideo:1];
  [v0 setIncludesCallsInRecents:0];
  sub_1002DF400((uint64_t)&off_10050B208);
  CXProviderConfiguration.supportedHandleTypes.setter();
  sub_10032B52C();
  sub_1001F6204(0, (unint64_t *)&unk_100586190);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setEmergencyHandles:isa];

  sub_10032B75C();
  sub_1001F6204(0, &qword_10058A380);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setEmergencyLabeledHandles:v2];

  return v0;
}

void sub_10032B314()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingAudioCallNotifyToken);
  swift_beginAccess();
  Class v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = sub_10032CF2C;
  uint64_t v13 = v3;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_1001F33E0;
  uint64_t v11 = &unk_100515000;
  uint64_t v4 = _Block_copy(&aBlock);
  swift_release();
  notify_register_dispatch("triggerIncomingSuperboxAudioCall", v1, v2, v4);
  swift_endAccess();
  _Block_release(v4);
  id v5 = (int *)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingVideoCallNotifyToken);
  swift_beginAccess();
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = sub_10032CFB0;
  uint64_t v13 = v6;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_1001F33E0;
  uint64_t v11 = &unk_100515028;
  id v7 = _Block_copy(&aBlock);
  swift_release();
  notify_register_dispatch("triggerIncomingSuperboxVideoCall", v5, v2, v7);
  swift_endAccess();
  _Block_release(v7);
}

void *sub_10032B52C()
{
  id v0 = objc_msgSend(self, "tu_defaults");
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 arrayForKey:v1];

  if (v2
    && (uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        uint64_t v4 = sub_100370F00(v3),
        swift_bridgeObjectRelease(),
        v4))
  {
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_1001F6204(0, (unint64_t *)&unk_100586190);
      uint64_t v6 = v4 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_10032B868(2);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v6 += 16;
        --v5;
      }
      while (v5);
      id v7 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    sub_1001F081C((uint64_t *)&unk_100584DD0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100490020;
    sub_1001F6204(0, (unint64_t *)&unk_100586190);
    *(void *)(v8 + 32) = sub_10032B868(2);
    *(void *)(v8 + 40) = sub_10032B868(2);
    specialized Array._endMutation()();
    return (void *)v8;
  }
  return v7;
}

void *sub_10032B75C()
{
  id v0 = objc_msgSend(self, "tu_defaults");
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dictionaryForKey:v1];

  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = sub_10032B8E4(v3);
  swift_bridgeObjectRelease();
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_10032AAC0(v4);
  swift_bridgeObjectRelease();
  return (void *)v5;
}

id sub_10032B868(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithType:a1 value:v3];

  return v4;
}

unint64_t sub_10032B8E4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1001F081C(&qword_10058A388);
    id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    id v2 = _swiftEmptyDictionarySingleton;
  }
  sub_1002E4D1C(v35, a1);
  uint64_t v3 = v35[0];
  int64_t v4 = v35[3];
  unint64_t v5 = v35[4];
  int64_t v28 = (unint64_t)(v35[2] + 64) >> 6;
  uint64_t v29 = v35[1];
  uint64_t v6 = &v34;
  unint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = (v5 - 1) & v5;
  unint64_t v9 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v9 = __clz(__rbit64(v12)) + (i << 6))
  {
    objc_super v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    sub_100201880(*(void *)(v3 + 56) + 32 * v9, (uint64_t)v6);
    v33[0] = v16;
    v33[1] = v15;
    sub_100201880((uint64_t)v6, (uint64_t)v32);
    swift_bridgeObjectRetain_n();
    sub_10021E23C((uint64_t)v33, (uint64_t *)&unk_10058A390);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100206FA0();
      swift_release();
      return 0;
    }
    unint64_t result = sub_100233664();
    unint64_t v17 = result;
    if (v18)
    {
      unsigned int v19 = v6;
      uint64_t v20 = v3;
      unsigned int v21 = (void *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unsigned int v21 = v16;
      v21[1] = v15;
      int v22 = (void *)(v2[7] + 16 * v17);
      unint64_t result = swift_bridgeObjectRelease();
      *int v22 = v30;
      v22[1] = v31;
      uint64_t v3 = v20;
      uint64_t v6 = v19;
      goto LABEL_28;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v23 = (void *)(v2[6] + 16 * result);
    void *v23 = v16;
    v23[1] = v15;
    uint64_t v24 = (void *)(v2[7] + 16 * result);
    *uint64_t v24 = v30;
    v24[1] = v31;
    uint64_t v25 = v2[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v2[2] = v27;
LABEL_28:
    int64_t v4 = i;
    unint64_t v5 = v8;
    if (v8) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_35;
    }
    if (v11 >= v28) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t i = v4 + 1;
    if (!v12)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v28) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * i);
      if (!v12)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v28) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * i);
        if (!v12)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v28) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * i);
          if (!v12)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v28) {
              goto LABEL_31;
            }
            unint64_t v12 = *(void *)(v29 + 8 * i);
            if (!v12)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v28)
              {
                unint64_t v12 = *(void *)(v29 + 8 * v13++);
                if (v12)
                {
                  int64_t i = v13 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_100206FA0();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v12 - 1) & v12;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void sub_10032BC24()
{
}

uint64_t type metadata accessor for CSDSuperboxProviderDelegate()
{
  return self;
}

uint64_t sub_10032BCD4(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v31 = v6;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  __chkstk_darwin(v11);
  sub_1002024D0();
  uint64_t v13 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  unsigned int v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unsigned int v21 = (char *)v28 - v20;
  [a2 fulfill];
  v28[1] = *(void *)&v2[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  static DispatchTime.now()();
  if (qword_100583A70 != -1) {
    swift_once();
  }
  + infix(_:_:)();
  int v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v19, v13);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v2;
  *(void *)(v23 + 24) = a2;
  aBlock[4] = sub_10032CEEC;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100514FB0;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v2;
  id v26 = a2;
  static DispatchQoS.unspecified.getter();
  id v32 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v10, v5);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v3, v30);
  v22(v21, v13);
  return swift_release();
}

uint64_t sub_10032BFD8(char *a1, void *a2)
{
  v19[0] = a2;
  v19[1] = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)&a1[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider];
  id v13 = [a2 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  static Date.now.getter();
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v12 reportOutgoingCallWithUUID:isa startedConnectingAtDate:v16];

  id v17 = [v19[0] callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10032C204((uint64_t)v11);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, v8);
}

uint64_t sub_10032C204(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  id v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  Class v16 = (char *)&v25 - v15;
  uint64_t v27 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  static DispatchTime.now()();
  if (qword_100583A78 != -1) {
    swift_once();
  }
  + infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v14, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, v9, v6);
  aBlock[4] = sub_10032CE30;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100514F60;
  unsigned int v19 = _Block_copy(aBlock);
  uint64_t v20 = v1;
  unsigned int v21 = v26;
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  int v22 = v31;
  uint64_t v23 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  v25(v16, v10);
  return swift_release();
}

void sub_10032C6D4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  if (qword_100583A80 != -1) {
    swift_once();
  }
  id v11 = objc_allocWithZone((Class)CXCallUpdate);
  swift_bridgeObjectRetain();
  id v12 = [v11 init];
  [v12 setUsingBaseband:1];
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v13 destinationIdIsPhoneNumber];

  if (v14) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 3;
  }
  sub_1001F6204(0, (unint64_t *)&unk_100586190);
  id v16 = sub_10032B868(v15);
  [v12 setRemoteHandle:v16];

  sub_100311FF8(0xD00000000000001FLL, 0x8000000100488E90, v12, (SEL *)&selRef_setAudioCategory_);
  id v18 = sub_10032D060(v17, "setSupportsHolding:");
  id v19 = sub_10032D060((uint64_t)v18, "setSupportsGrouping:");
  id v20 = sub_10032D060((uint64_t)v19, "setSupportsDTMF:");
  id v21 = sub_10032D060((uint64_t)v20, "setSupportsUnambiguousMultiPartyState:");
  id v22 = sub_10032D060((uint64_t)v21, "setSupportsAddCall:");
  sub_10032D060((uint64_t)v22, "setSupportsSendingToVoicemail:");
  sub_100311FF8(29557, 0xE200000000000000, v12, (SEL *)&selRef_setISOCountryCode_);
  sub_10032D060(v23, "setSupportsTTYWithVoice:");
  [v12 setHasVideo:a1 & 1];
  uint64_t v24 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  UUID.init()();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  aBlock[4] = ScreenSharingActivityManager.carPlayDidDisconnect();
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003629D8;
  void aBlock[3] = &unk_100515050;
  id v26 = _Block_copy(aBlock);
  [v24 reportNewIncomingCallWithUUID:isa update:v12 completion:v26];
  _Block_release(v26);
}

uint64_t sub_10032C9CC(uint64_t a1, void *a2)
{
  uint64_t v23 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1002024D0();
  [a2 fulfill];
  unsigned int v14 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  id v15 = [a2 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v17 = *(void (**)(uint64_t))(v12 + 8);
  uint64_t v18 = sub_10032D078();
  v17(v18);
  static Date.now.getter();
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v23);
  [v14 reportOutgoingCallWithUUID:isa startedConnectingAtDate:v19];

  id v20 = [a2 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10032C204(v3);
  uint64_t v21 = sub_10032D078();
  return ((uint64_t (*)(uint64_t))v17)(v21);
}

id sub_10032CBF8(int a1, id a2)
{
  return [a2 fulfill];
}

void sub_10032CC7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  static Date.now.getter();
  Class v8 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v6 reportOutgoingCallWithUUID:isa connectedAtDate:v8];
}

uint64_t sub_10032CD8C()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

void sub_10032CE30()
{
  type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 + 16);

  sub_10032CC7C(v1);
}

uint64_t sub_10032CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10032CEA4()
{
  return swift_release();
}

uint64_t sub_10032CEAC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10032CEEC()
{
  return sub_10032BFD8(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10032CEF4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10032CF2C(uint64_t a1)
{
  sub_10032CF4C(a1, v1, 0);
}

void sub_10032CF4C(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (TUShouldCreateSuperboxProvider()) {
      sub_10032C6D4(a3 & 1);
    }
  }
}

void sub_10032CFB0(uint64_t a1)
{
  sub_10032CF4C(a1, v1, 1);
}

id sub_10032CFD0(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 initWithHandle:a1 label:v3];

  return v4;
}

id sub_10032D060(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_10032D078()
{
  return v0;
}

unint64_t sub_10032D08C()
{
  return 0xD000000000000015;
}

id sub_10032D0F8(void *a1, void *a2)
{
  type metadata accessor for DisclosureController();
  swift_allocObject();
  uint64_t v4 = sub_1002EBB30();
  id v5 = objc_allocWithZone((Class)type metadata accessor for RecordingProvider());
  id v6 = a1;
  id v7 = sub_1003509F0(v6);
  id v8 = objc_allocWithZone((Class)type metadata accessor for CallRecordingLaunchService());
  id v9 = v6;
  id v10 = sub_100317F58(v9);
  type metadata accessor for DisclosureDataSource();
  id v11 = v9;
  id v12 = a2;
  sub_10023DC78();
  id v14 = sub_100332734(v11, v4, (uint64_t)v7, (uint64_t)v10, v13, [objc_allocWithZone((Class)TUFeatureFlags) init], v12);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v14;
}

void sub_10032D260(void *a1)
{
  uint64_t v4 = v1;
  id v6 = (void *)type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_100235BE8();
  id v8 = *(void **)(v4 + OBJC_IVAR___CSDCallRecordingController_queue);
  *(void *)uint64_t v2 = v8;
  sub_100235D68();
  v9();
  id v10 = v8;
  _dispatchPreconditionTest(_:)();
  uint64_t v11 = sub_100317DB4();
  v12(v11);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
LABEL_11:
    uint64_t v17 = type metadata accessor for Logger();
    sub_1001F5F88(v17, (uint64_t)qword_100594C58);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_100210730((void *)&_mh_execute_header, v20, v21, "Recording not allowed because disclosure cannot be heard on the remote side.");
      sub_1001F63CC();
    }

    id v22 = [self sharedInstance];
    [v22 disconnectCall:v6 withReason:50];

    *(unsigned char *)(v4 + v3) = 1;
    return;
  }
  if ([a1 object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_100273CB0((uint64_t)v24, (uint64_t)v25, (uint64_t *)&unk_100584CA0);
  if (!v26)
  {
    sub_1002392A8((uint64_t)v25, (uint64_t *)&unk_100584CA0);
    return;
  }
  sub_1001F6204(0, (unint64_t *)&qword_10058A480);
  if (sub_100332F78())
  {
    id v6 = v23;
    unsigned __int8 v13 = [v23 isUnderlyingLinksConnected];
    uint64_t v3 = OBJC_IVAR___CSDCallRecordingController_underlyingLinksConnected;
    *(unsigned char *)(v4 + OBJC_IVAR___CSDCallRecordingController_underlyingLinksConnected) = v13;
    id v14 = *(char **)(v4 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
    if (!v14
      || (v13 & 1) != 0
      || (id v15 = &v14[OBJC_IVAR___CSDCallRecordingSession_stateMachine], swift_beginAccess(), *v15 != 3))
    {

      return;
    }
    uint64_t v16 = qword_100583A20;
    uint64_t v2 = v14;
    if (v16 == -1) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
}

void sub_10032D584(void *a1)
{
  uint64_t v3 = v1;
  id v5 = (void *)type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_100235BE8();
  uint64_t v7 = *(void **)(v3 + OBJC_IVAR___CSDCallRecordingController_queue);
  *(void *)uint64_t v2 = v7;
  sub_100235D68();
  v8();
  id v9 = v7;
  _dispatchPreconditionTest(_:)();
  uint64_t v10 = sub_100317DB4();
  v11(v10);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if ([a1 object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v34, 0, sizeof(v34));
  }
  sub_100273CB0((uint64_t)v34, (uint64_t)v35, (uint64_t *)&unk_100584CA0);
  if (!v36)
  {
    sub_1002392A8((uint64_t)v35, (uint64_t *)&unk_100584CA0);
    return;
  }
  sub_1001F6204(0, (unint64_t *)&qword_10058A480);
  if (sub_100332F78())
  {
    id v5 = v33;
    id v12 = *(char **)(v3 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
    if (!v12)
    {
LABEL_34:

      return;
    }
    uint64_t v13 = *(void *)&v12[OBJC_IVAR___CSDCallRecordingSession_callUUID];
    uint64_t v14 = *(void *)&v12[OBJC_IVAR___CSDCallRecordingSession_callUUID + 8];
    uint64_t v2 = v12;
    swift_bridgeObjectRetain();
    id v15 = [v33 uniqueProxyIdentifier];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v13 == v16 && v14 == v18) {
      char v20 = 1;
    }
    else {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v21 = [v33 status] == 2
       || [v33 status] == 1
       || [v33 status] == 3;
    id v22 = [v33 recordingSession];
    if (!v22 || (v22, ([v33 isRecordingAllowed] & 1) != 0))
    {
      if (!v21 || (v20 & 1) != 0)
      {

        return;
      }
      if (qword_100583A20 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_1001F5F88(v29, (uint64_t)qword_100594C58);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      int v28 = 2;
      if (!os_log_type_enabled(v24, v30)) {
        goto LABEL_33;
      }
      uint64_t v31 = (uint8_t *)sub_100246544();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v30, "Ending call recording session because another call went active", v31, 2u);
      goto LABEL_31;
    }
    if (qword_100583A20 == -1)
    {
LABEL_25:
      uint64_t v23 = type metadata accessor for Logger();
      sub_1001F5F88(v23, (uint64_t)qword_100594C58);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v24, v25))
      {
        int v28 = 1;
        goto LABEL_33;
      }
      *(_WORD *)sub_100246544() = 0;
      sub_100210730((void *)&_mh_execute_header, v26, v27, "Ending call recording session because recording is no longer allowed based on the call properties");
      int v28 = 1;
LABEL_31:
      sub_1001F63CC();
LABEL_33:

      id v32 = [objc_allocWithZone((Class)TUCallStopRecordingRequest) initWithCall:v5];
      sub_10032D9A4(v32, v5, v28, v3);

      goto LABEL_34;
    }
LABEL_37:
    swift_once();
    goto LABEL_25;
  }
}

void sub_10032D9A4(void *a1, void *a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)(a4 + OBJC_IVAR___CSDCallRecordingController_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_1001F5F88(v15, (uint64_t)qword_100594C58);
  id v17 = a1;
  id v18 = a2;
  os_log_type_t v19 = v17;
  char v20 = v18;
  BOOL v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v43 = a4;
    os_log_type_t v25 = (void *)v24;
    *(_DWORD *)uint64_t v23 = 138412546;
    int v42 = (int)v5;
    uint64_t v44 = v19;
    v41[1] = v16;
    uint64_t v26 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v19;

    *(_WORD *)(v23 + 12) = 2112;
    uint64_t v44 = v20;
    id v5 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25[1] = v20;

    LOBYTE(v5) = v42;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Requested to STOP recording using request %@ for call %@", (uint8_t *)v23, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    a4 = v43;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    BOOL v21 = v19;
  }

  uint64_t v27 = *(void **)(a4 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v27)
  {
    id v28 = v27;
    uint64_t v29 = sub_10025D978((char)v5);
    NSString v30 = String._bridgeToObjectiveC()();
    sub_1001B1D50(v30);

    sub_100204074((void *)(a4 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(a4 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
    sub_1002EC838();
    sub_100330340((uint64_t)v29, v28);

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v19;
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      id v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412290;
      uint64_t v44 = v31;
      uint64_t v36 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Cannot stop recording using %@ because no session exists", v34, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v32 = v31;
    }

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
    id v40 = objc_allocWithZone((Class)NSError);
  }
}

void sub_10032DF54(void *a1, void *a2, int a3, uint64_t a4, void (**a5)(void, void))
{
  int v49 = a3;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = *(void **)(a4 + OBJC_IVAR___CSDCallRecordingController_queue);
  *id v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_1001F5F88(v16, (uint64_t)qword_100594C58);
  id v18 = a1;
  id v19 = a2;
  char v20 = v18;
  BOOL v21 = v19;
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v48 = a5;
    uint64_t v26 = (void *)v25;
    *(_DWORD *)uint64_t v24 = 138412546;
    id v50 = v20;
    uint64_t v46 = v17;
    uint64_t v27 = v20;
    uint64_t v47 = a4;
    id v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v26 = v20;

    *(_WORD *)(v24 + 12) = 2112;
    id v50 = v21;
    uint64_t v29 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v26[1] = v21;

    a4 = v47;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Requested to STOP recording using request %@ for call %@", (uint8_t *)v24, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    a5 = v48;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v22 = v20;
  }

  NSString v30 = *(void **)(a4 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v30)
  {
    id v31 = v30;
    id v32 = sub_10025D978(v49);
    NSString v33 = String._bridgeToObjectiveC()();
    sub_1001B1D50(v33);

    sub_100204074((void *)(a4 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(a4 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
    sub_1002EC838();
    sub_100330340((uint64_t)v32, v31);
    swift_bridgeObjectRelease();
    a5[2](a5, 0);
  }
  else
  {
    uint64_t v34 = v20;
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      id v50 = v34;
      uint64_t v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cannot stop recording using %@ because no session exists", v37, 0xCu);
      sub_1001F081C(&qword_100585900);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v35 = v34;
    }

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
    id v43 = objc_allocWithZone((Class)NSError);
    id v44 = sub_100332398(v40, v42, 3, 0);
    uint64_t v45 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a5)[2](a5, v45);
  }
  _Block_release(a5);
}

void sub_10032E5D0(void *a1, void *a2, char *a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)&a3[OBJC_IVAR___CSDCallRecordingController_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  _Block_copy(a4);
  _Block_copy(a4);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (![*(id *)&a3[OBJC_IVAR___CSDCallRecordingController_featureFlags] callRecordingEnabled])
  {
    if (qword_100583A20 == -1)
    {
LABEL_6:
      uint64_t v17 = type metadata accessor for Logger();
      sub_1001F5F88(v17, (uint64_t)qword_100594C58);
      id v18 = a1;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        BOOL v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v43 = (uint64_t)v18;
        uint64_t v44 = v22;
        *(_DWORD *)BOOL v21 = 136315138;
        sub_1001F6204(0, (unint64_t *)&unk_10058A490);
        id v23 = v18;
        uint64_t v24 = String.init<A>(reflecting:)();
        uint64_t v43 = sub_1002344D8(v24, v25, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Call recording feature flag is not enabled, dropping %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
      id v29 = objc_allocWithZone((Class)NSError);
      id v30 = sub_100332398(v26, v28, 2, 0);
      id v31 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a4)[2](a4, v31);

      goto LABEL_13;
    }
LABEL_21:
    swift_once();
    goto LABEL_6;
  }
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    char v15 = (void *)v14;
    _Block_copy(a4);
    id v16 = a1;
    sub_10032EB78(v15, a2, a3, a4);
LABEL_12:

    goto LABEL_13;
  }
  self;
  uint64_t v32 = swift_dynamicCastObjCClass();
  if (v32)
  {
    NSString v33 = (void *)v32;
    _Block_copy(a4);
    id v16 = a1;
    sub_10032DF54(v33, a2, 0, (uint64_t)a3, a4);
    goto LABEL_12;
  }
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_1001F5F88(v34, (uint64_t)qword_100594C58);
  id v35 = a1;
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v43 = (uint64_t)v35;
    uint64_t v44 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    sub_1001F6204(0, (unint64_t *)&unk_10058A490);
    id v40 = v35;
    uint64_t v41 = String.init<A>(reflecting:)();
    uint64_t v43 = sub_1002344D8(v41, v42, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unhandled call recording request %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  a4[2](a4, 0);
LABEL_13:
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
}

void sub_10032EB78(void *a1, void *a2, char *a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v127 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v126 = (char *)v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (void *)((char *)v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  uint64_t v129 = a3;
  char v15 = *(void **)&a3[OBJC_IVAR___CSDCallRecordingController_queue];
  *id v13 = v15;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  _Block_copy(a4);
  _Block_copy(a4);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v17)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_1001F5F88(v18, (uint64_t)qword_100594C58);
  id v20 = a1;
  id v21 = a2;
  uint64_t v22 = v20;
  id v23 = v21;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v125 = v8;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v124 = a4;
    uint64_t v28 = v27;
    id v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412546;
    v123[1] = v19;
    uint64_t v130 = v22;
    uint64_t v128 = v14;
    id v30 = v22;
    id v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v29 = v30;

    *(_WORD *)(v28 + 12) = 2112;
    uint64_t v130 = v23;
    uint64_t v32 = v23;
    uint64_t v14 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v23;

    uint64_t v22 = v30;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Requested to START recording using request %@ for call %@", (uint8_t *)v28, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v124;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v24 = v22;
  }

  uint64_t v33 = OBJC_IVAR___CSDCallRecordingController_underlyingLinksConnected;
  uint64_t v34 = v129;
  if (v129[OBJC_IVAR___CSDCallRecordingController_underlyingLinksConnected] == 1)
  {
    id v35 = [v23 recordingAllowedError];
    if (v35)
    {
      id v36 = v35;
      os_log_type_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v128 = v14;
        uint64_t v130 = v40;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v134 = (uint64_t)v36;
        swift_errorRetain();
        sub_1001F081C((uint64_t *)&unk_100585FE0);
        uint64_t v41 = String.init<A>(reflecting:)();
        uint64_t v134 = sub_1002344D8(v41, v42, (uint64_t *)&v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Recording not allowed with error %s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v65 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a4)[2](a4, v65);
      swift_release();

      goto LABEL_25;
    }
    id v53 = &v34[OBJC_IVAR___CSDCallRecordingController_disclosureDataSource];
    swift_beginAccess();
    sub_100204074(v53, *((void *)v53 + 3));
    if (sub_10023E8A8() & 1) != 0 && (sub_10023FF44())
    {
      uint64_t v128 = v14;
      uint64_t v54 = a4;
      uint64_t v55 = OBJC_IVAR___CSDCallRecordingController_recordingSession;
      if (*(void *)&v34[OBJC_IVAR___CSDCallRecordingController_recordingSession])
      {
        uint64_t v56 = v34;
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
          uint64_t v130 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v59 = 136315138;
          unsigned int v60 = *(void **)&v34[v55];
          if (v60)
          {
            uint64_t v133 = (uint64_t)v60;
            type metadata accessor for CallRecordingSession();
            id v61 = v60;
            uint64_t v62 = String.init<A>(reflecting:)();
            unint64_t v64 = v63;
          }
          else
          {
            unint64_t v64 = 0xE300000000000000;
            uint64_t v62 = 7104878;
          }
          uint64_t v133 = sub_1002344D8(v62, v64, (uint64_t *)&v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Recording not allowed because a recording is already in-progress %s", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v96 = v95;
        objc_allocWithZone((Class)NSError);
        uint64_t v91 = v94;
        uint64_t v92 = v96;
        uint64_t v93 = 100;
      }
      else
      {
        self;
        uint64_t v75 = swift_dynamicCastObjCClass();
        if (v75)
        {
          uint64_t v76 = (void *)v75;
          sub_100204074(&v34[OBJC_IVAR___CSDCallRecordingController_clientLaunchService], *(void *)&v34[OBJC_IVAR___CSDCallRecordingController_clientLaunchService + 24]);
          uint64_t v77 = v23;
          if (sub_100318110())
          {
            id v78 = objc_allocWithZone((Class)type metadata accessor for CallRecordingSession());
            uint64_t v79 = v22;
            uint64_t v80 = v77;
            sub_10025C178();
            uint64_t v81 = *(void **)&v34[v55];
            *(void *)&v34[v55] = v82;

            unint64_t v83 = *(void **)&v34[v55];
            os_log_type_t v84 = v80;
            if (v83)
            {
              id v85 = v83;
              sub_10025C67C();
              uint64_t v87 = v86;
            }
            else
            {
              uint64_t v87 = 0;
            }
            [v76 setRecordingSession:v87];

            uint64_t v106 = (void *)swift_allocObject();
            v106[2] = v34;
            v106[3] = v76;
            uint64_t v107 = v34;
            uint64_t v108 = v128;
            v106[4] = sub_1003324D8;
            v106[5] = v108;
            uint64_t v98 = v80;
            id v109 = v107;
            swift_retain();
            if (TUCaptionsLoggingEnabled())
            {
              uint64_t v133 = Dictionary.init(dictionaryLiteral:)();
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v124 = (void (**)(void, void))v109;
              uint64_t v110 = sub_100274858(0xD00000000000001BLL, (void *)0x8000000100489050);
              dispatch_group_t v132 = &type metadata for String;
              uint64_t v130 = v110;
              uint64_t v131 = v111;
              uint64_t v129 = v98;
              sub_1002C2414((uint64_t)&v130);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v112 = sub_100274858(0xD000000000000021, (void *)0x8000000100489070);
              dispatch_group_t v132 = &type metadata for String;
              uint64_t v130 = v112;
              uint64_t v131 = v113;
              sub_1002C2414((uint64_t)&v130);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              unsigned __int8 v114 = sub_100274858(0xD00000000000001DLL, (void *)0x80000001004890A0);
              dispatch_group_t v132 = &type metadata for String;
              uint64_t v130 = v114;
              uint64_t v131 = v115;
              sub_1002C2414((uint64_t)&v130);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              char v116 = sub_100274858(0x656C776F6E6B6341, (void *)0xEB00000000656764);
              dispatch_group_t v132 = &type metadata for String;
              uint64_t v130 = v116;
              uint64_t v131 = v117;
              sub_1002C2414((uint64_t)&v130);
              sub_1001F6204(0, &qword_100588070);
              id v118 = (void *)static IMUserNotificationCenter.shared.getter();
              uint64_t v119 = v126;
              UUID.init()();
              UUID.uuidString.getter();
              (*(void (**)(char *, uint64_t))(v127 + 8))(v119, v125);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v120 = (void *)swift_allocObject();
              uint64_t v121 = v124;
              v120[2] = v124;
              v120[3] = sub_100332528;
              v120[4] = v106;
              id v122 = v121;
              swift_retain();
              IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

              swift_release();
              goto LABEL_39;
            }
            _Block_copy(v54);
            sub_10032FA68((uint64_t)v109, v76, v54);
            swift_release();
            swift_release();
LABEL_38:

LABEL_39:
            _Block_release(v54);
            unint64_t v74 = v54;
            goto LABEL_26;
          }
          uint64_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v99, v100))
          {
            uint64_t v101 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v101 = 0;
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Recording not allowed because notes is not installed", v101, 2u);
            swift_slowDealloc();
          }

          uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v104 = v103;
          id v105 = objc_allocWithZone((Class)NSError);
          id v97 = sub_100332398(v102, v104, 12, 0);
          uint64_t v98 = (char *)_convertErrorToNSError(_:)();
          ((void (**)(void, char *))v54)[2](v54, v98);
          swift_release();

LABEL_37:
          goto LABEL_38;
        }
        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v90 = v89;
        objc_allocWithZone((Class)NSError);
        uint64_t v91 = v88;
        uint64_t v92 = v90;
        uint64_t v93 = 9;
      }
      id v97 = sub_100332398(v91, v92, v93, 0);
      uint64_t v98 = (char *)_convertErrorToNSError(_:)();
      ((void (**)(void, char *))a4)[2](a4, v98);
      swift_release();
      goto LABEL_37;
    }
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v66, v67))
    {
      os_log_type_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Disclosure files do not exist! Not allowing recording", v68, 2u);
      swift_slowDealloc();
    }

    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
    objc_allocWithZone((Class)NSError);
    uint64_t v50 = v69;
    uint64_t v51 = v71;
    uint64_t v52 = 151;
  }
  else
  {
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Recording not allowed because disclosure cannot be heard on the remote side.", v45, 2u);
      swift_slowDealloc();
    }

    id v46 = [self sharedInstance];
    [v46 disconnectCall:v23 withReason:50];

    v34[v33] = 1;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;
    objc_allocWithZone((Class)NSError);
    uint64_t v50 = v47;
    uint64_t v51 = v49;
    uint64_t v52 = 5;
  }
  id v72 = sub_100332398(v50, v51, v52, 0);
  uint64_t v73 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a4)[2](a4, v73);
  swift_release();

LABEL_25:
  _Block_release(a4);
  unint64_t v74 = a4;
LABEL_26:
  _Block_release(v74);
}

void sub_10032FA68(uint64_t a1, void *a2, void (**a3)(void, void))
{
  NSString v6 = String._bridgeToObjectiveC()();
  sub_1001B1D50(v6);

  uint64_t v7 = *(void **)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v7)
  {
    id v8 = v7;
    sub_10025D240();
    sub_100204074((void *)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider), *(void *)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider + 24));
    sub_100350B48(v8);
    sub_100204074((void *)(a1 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(a1 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
    sub_1002EC190(a2);
    a3[2](a3, 0);
  }

  _Block_release(a3);
}

void sub_10032FC90(uint64_t a1, void *a2, void (*a3)(void))
{
  NSString v6 = String._bridgeToObjectiveC()();
  sub_1001B1D50(v6);

  uint64_t v7 = *(void **)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v7)
  {
    id v8 = v7;
    sub_10025D240();
    sub_100204074((void *)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider), *(void *)(a1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider + 24));
    sub_100350B48(v8);
    sub_100204074((void *)(a1 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(a1 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
    sub_1002EC190(a2);
    a3(0);
  }
}

uint64_t sub_10032FEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  id v15[3] = a3;
  v15[4] = a4;
  aBlock[4] = sub_1003325B8;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_1005151B0;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_10033015C(uint64_t a1, uint64_t (*a2)(void))
{
  if (a1)
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1001F5F88(v3, (uint64_t)qword_100594C58);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      NSString v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "User chose to continue with transcription logging enabled", v6, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1001F5F88(v7, (uint64_t)qword_100594C58);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "User asked to disable transcript logging", v10, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = objc_msgSend(self, "tu_defaults");
    [v4 setBool:0 forKey:TUCaptionsLoggingEnabledKey];
  }

  return a2();
}

uint64_t sub_100330340(uint64_t result, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      sub_1003303C4(*(unsigned char *)(v6 + v7 + 32), a2);
      if (v3) {
        break;
      }
    }
    while (v4 - 1 != v7++);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1003303C4(char a1, void *a2)
{
  switch(a1)
  {
    case 1:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (!Strong) {
        goto LABEL_11;
      }
      os_log_type_t v5 = (void *)Strong;
      self;
      uint64_t v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        uint64_t v7 = (void *)v6;
        sub_100204074((void *)(v2 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(v2 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
        sub_1002EC1D8(v7);
      }
      else
      {

LABEL_11:
        sub_10025DF9C();
        swift_allocError();
        swift_willThrow();
      }
      return;
    case 2:
      uint64_t v8 = (void *)swift_unknownObjectWeakLoadStrong();
      if (v8)
      {
        os_log_type_t v9 = v8;
        [v8 setRecordingSession:0];
      }
      uint64_t v10 = *(void **)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
      *(void *)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingSession) = 0;

      return;
    case 3:
      sub_100204074((void *)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingProvider), *(void *)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingProvider + 24));
      sub_100351278();
      return;
    case 4:
      return;
    default:
      sub_100204074((void *)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingProvider), *(void *)(v2 + OBJC_IVAR___CSDCallRecordingController_recordingProvider + 24));
      sub_10035371C(a2);
      return;
  }
}

void sub_100330544()
{
}

uint64_t type metadata accessor for CallRecordingController()
{
  return self;
}

void sub_100330654(void *a1)
{
  if ([a1 object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v38, 0, sizeof(v38));
  }
  sub_100273CB0((uint64_t)v38, (uint64_t)v39, (uint64_t *)&unk_100584CA0);
  if (!v39[3])
  {
    sub_1002392A8((uint64_t)v39, (uint64_t *)&unk_100584CA0);
    goto LABEL_11;
  }
  sub_1001F6204(0, (unint64_t *)&qword_10058A480);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    if (qword_100583A20 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_1001F5F88(v8, (uint64_t)qword_100594C58);
    uint64_t Strong = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (sub_100332E80(v10))
    {
      uint64_t v11 = (_WORD *)sub_100246544();
      sub_100332EC0(v11);
      sub_100332E60((void *)&_mh_execute_header, v12, v13, "No call is on media tokens changed notification");
      sub_1001F63CC();
    }
    goto LABEL_38;
  }
  if (qword_100583A20 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C58);
  uint64_t v3 = v37;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    id v36 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    v39[0] = v3;
    uint64_t v7 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v36 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleMediaTokensChanged %@", v6, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    uint64_t v4 = v3;
  }

  uint64_t v14 = *(void **)(v1 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v14)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    char v15 = v14;
    if (!Strong)
    {
LABEL_24:
      BOOL v26 = (void *)Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (sub_100246418(v27))
      {
        *(_WORD *)sub_100246544() = 0;
        sub_100332FD8((void *)&_mh_execute_header, v28, v29, "Currently recording call is not the call which just changed media tokens. Not updating recording");
        sub_1001F63CC();

LABEL_32:
        uint64_t Strong = v15;
        goto LABEL_38;
      }

LABEL_37:
      uint64_t Strong = v3;
      goto LABEL_38;
    }
    id v16 = [Strong uniqueProxyIdentifier];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    id v20 = [v3 uniqueProxyIdentifier];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    if (v17 == v21 && v19 == v23)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {

        goto LABEL_24;
      }
    }
    uint64_t v32 = (unsigned __int8 *)v15 + OBJC_IVAR___CSDCallRecordingSession_stateMachine;
    swift_beginAccess();
    if (*v32 - 2 >= 6)
    {
      sub_100204074((void *)(v1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider), *(void *)(v1 + OBJC_IVAR___CSDCallRecordingController_recordingProvider + 24));
      sub_1003546F0();

      goto LABEL_38;
    }
    BOOL v26 = (void *)Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (sub_100246418(v33))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_100332FD8((void *)&_mh_execute_header, v34, v35, "Not recording");
      sub_1001F63CC();

      goto LABEL_32;
    }

LABEL_36:
    goto LABEL_37;
  }
  uint64_t Strong = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(Strong, v30)) {
    goto LABEL_36;
  }
  id v31 = (uint8_t *)sub_100246544();
  *(_WORD *)id v31 = 0;
  _os_log_impl((void *)&_mh_execute_header, Strong, v30, "No recording session so not updating tokens", v31, 2u);
  sub_1001F63CC();

LABEL_38:
}

void sub_100330BC0()
{
  sub_100332F04();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_100202310();
  sub_100332F6C(OBJC_IVAR___CSDCallRecordingController_queue);
  uint64_t v4 = sub_100332E44();
  v5(v4);
  id v6 = v2;
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = sub_100332E28();
  v8(v7);
  if (v2)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C58);
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (sub_100246418(v11))
  {
    uint64_t v12 = (_WORD *)sub_100246544();
    sub_100332E9C(v12);
    sub_100332EA8((void *)&_mh_execute_header, v10, v1, "recurring disclosure timer triggered");
    sub_1001F63CC();
  }

  uint64_t v13 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v13)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      char v15 = (void *)Strong;
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (v16)
      {
        uint64_t v17 = (void *)v16;
        id v18 = v13;
        sub_10025D398();
        sub_100332F98(OBJC_IVAR___CSDCallRecordingController_disclosureController);
        sub_1002EC1E4(v17);

        goto LABEL_12;
      }
    }
  }
  char v15 = (void *)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (sub_100332E80(v19))
  {
    id v20 = (_WORD *)sub_100246544();
    sub_100332EC0(v20);
    sub_100332E60((void *)&_mh_execute_header, v21, v22, "recurring disclosure timer triggered, but we aren't tracking a recording session");
    sub_1001F63CC();
  }
LABEL_12:
}

void sub_100330E14()
{
  sub_100332F04();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_100202310();
  sub_100332F6C(OBJC_IVAR___CSDCallRecordingController_queue);
  uint64_t v4 = sub_100332E44();
  v5(v4);
  id v6 = v2;
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = sub_100332E28();
  v8(v7);
  if (v2)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C58);
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (sub_100246418(v11))
  {
    uint64_t v12 = (_WORD *)sub_100246544();
    sub_100332E9C(v12);
    sub_100332EA8((void *)&_mh_execute_header, v10, v1, "Recording start disclosure finished");
    sub_1001F63CC();
  }

  uint64_t v13 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v13)
  {
    id v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    sub_1001B1D50(v15);

    sub_10025D2EC();
    sub_100332F98(OBJC_IVAR___CSDCallRecordingController_recordingProvider);
    sub_1003518E0();
  }
  else
  {
    id v14 = (id)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (sub_100332E80(v16))
    {
      uint64_t v17 = (_WORD *)sub_100246544();
      sub_100332EC0(v17);
      sub_100332E60((void *)&_mh_execute_header, v18, v19, "Start disclosure finished, but we aren't tracking a recording session");
      sub_1001F63CC();
    }
  }
}

void sub_100331044()
{
  sub_100332F04();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_100202310();
  sub_100332F6C(OBJC_IVAR___CSDCallRecordingController_queue);
  uint64_t v4 = sub_100332E44();
  v5(v4);
  id v6 = v2;
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = sub_100332E28();
  v8(v7);
  if (v2)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C58);
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (sub_100246418(v11))
  {
    uint64_t v12 = (_WORD *)sub_100246544();
    sub_100332E9C(v12);
    sub_100332EA8((void *)&_mh_execute_header, v10, v1, "recurring disclosure finished");
    sub_1001F63CC();
  }

  uint64_t v13 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v13)
  {
    id v14 = v13;
    sub_10025D46C();
    sub_100204074((void *)(v0 + OBJC_IVAR___CSDCallRecordingController_disclosureController), *(void *)(v0 + OBJC_IVAR___CSDCallRecordingController_disclosureController + 24));
    sub_1002EC2FC(*(void *)&v14[OBJC_IVAR___CSDCallRecordingSession_recurringDisclosureCount] != 0);
  }
  else
  {
    id v14 = (char *)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (sub_100332E80(v15))
    {
      os_log_type_t v16 = (_WORD *)sub_100246544();
      sub_100332EC0(v16);
      sub_100332E60((void *)&_mh_execute_header, v17, v18, "recurring disclosure finished, but we aren't tracking a recording session");
      sub_1001F63CC();
    }
  }
}

void sub_100331270()
{
  sub_100332F04();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  sub_100332F6C(OBJC_IVAR___CSDCallRecordingController_queue);
  uint64_t v3 = sub_100332E44();
  v4(v3);
  id v5 = v1;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_100332E28();
  v7(v6);
  if (v1)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = (void *)sub_100332F40(v8, (uint64_t)qword_100594C58);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (sub_100246418(v10))
  {
    *(_WORD *)sub_100246544() = 0;
    sub_100332FB8((void *)&_mh_execute_header, v11, v12, "Recording stop disclosure finished");
    sub_1001F63CC();
  }

  uint64_t v13 = OBJC_IVAR___CSDCallRecordingController_recordingSession;
  id v14 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v14)
  {
    id v15 = v14;
    sub_10025DEE4();

    if (*(void *)(v0 + v13))
    {
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v17 = Strong;
        [Strong setRecordingSession:0];
      }
    }
  }
  uint64_t v18 = *(void **)(v0 + v13);
  *(void *)(v0 + v13) = 0;
}

void sub_100331464(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = v3;
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v9 - 8);
  sub_10026B830();
  uint64_t v10 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100332EE8();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v14);
  sub_100235BE8();
  id v15 = *(void **)(v3 + OBJC_IVAR___CSDCallRecordingController_queue);
  void *v4 = v15;
  sub_100235D68();
  v16();
  id v17 = v15;
  _dispatchPreconditionTest(_:)();
  uint64_t v18 = sub_100332ECC();
  v19(v18);
  if (v15)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100332F40(v20, (uint64_t)qword_100594C58);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    *(_WORD *)sub_100246544() = 0;
    sub_100332FF8((void *)&_mh_execute_header, v23, v24, "Recording updated");
    sub_1001F63CC();
  }

  char v25 = *(void **)(v7 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v25)
  {
    sub_1002EA1D0(a2, v5);
    if (sub_1001F758C(v5, 1, v10) == 1)
    {
      id v26 = v25;
      sub_1002392A8(v5, (uint64_t *)&unk_100585580);
      id v27 = a3;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v30 = 136315138;
        if (a3)
        {
          sub_1001F6204(0, &qword_100589C50);
          id v31 = v27;
          uint64_t v32 = String.init<A>(reflecting:)();
          unint64_t v34 = v33;
        }
        else
        {
          unint64_t v34 = 0xE300000000000000;
          uint64_t v32 = 7104878;
        }
        uint64_t v40 = sub_1002344D8(v32, v34, &v43);
        sub_100332F1C(v40);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "No UUID returned when starting recording! error %s", v30, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
      }
      uint64_t v41 = sub_10025D978(1);
      sub_100330340((uint64_t)v41, v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v6, v5, v10);
      id v39 = v25;
      sub_10025D734();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v6, v10);
    }
  }
  else
  {
    uint64_t v35 = (void *)Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.fault.getter();
    if (sub_10026B89C(v36))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_100246944((void *)&_mh_execute_header, v37, v38, "No recording session active, but got callback recordingUpdated! This should not be possible");
      sub_1001F63CC();
    }
  }
}

void sub_1003318D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2;
  uint64_t v9 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v9 - 8);
  sub_100332EE8();
  uint64_t v10 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v40 = v11;
  __chkstk_darwin(v12);
  sub_10026B830();
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v13);
  sub_100235BE8();
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR___CSDCallRecordingController_queue);
  *uint64_t v3 = v14;
  sub_100235D68();
  v15();
  id v16 = v14;
  _dispatchPreconditionTest(_:)();
  uint64_t v17 = sub_100332ECC();
  v18(v17);
  if (v14)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_100332F40(v19, (uint64_t)qword_100594C58);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    *(_WORD *)sub_100246544() = 0;
    sub_100332FF8((void *)&_mh_execute_header, v22, v23, "Recording started");
    sub_1001F63CC();
  }

  uint64_t v24 = *(void **)(v6 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v24)
  {
    sub_1002EA1D0(a1, v5);
    if (sub_1001F758C(v5, 1, v10) == 1)
    {
      id v25 = v24;
      sub_1002392A8(v5, (uint64_t *)&unk_100585580);
      swift_errorRetain();
      swift_errorRetain();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        if (a2)
        {
          swift_errorRetain();
          sub_1001F081C((uint64_t *)&unk_100585FE0);
          uint64_t v29 = String.init<A>(reflecting:)();
          unint64_t v31 = v30;
        }
        else
        {
          unint64_t v31 = 0xE300000000000000;
          uint64_t v29 = 7104878;
        }
        uint64_t v38 = sub_1002344D8(v29, v31, &v41);
        sub_100332F1C(v38);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No UUID returned when starting recording! error %s", v28, 0xCu);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      id v39 = sub_10025D978(1);
      sub_100330340((uint64_t)v39, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v4, v5, v10);
      id v36 = v24;
      sub_10025D520();
      sub_100204074((void *)(v6 + OBJC_IVAR___CSDCallRecordingController_clientLaunchService), *(void *)(v6 + OBJC_IVAR___CSDCallRecordingController_clientLaunchService + 24));
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      sub_100318168((uint64_t)Strong, (uint64_t)v36);

      sub_100332F98(OBJC_IVAR___CSDCallRecordingController_disclosureController);
      sub_1002EC2FC(0);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v4, v10);
    }
  }
  else
  {
    uint64_t v32 = (void *)Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.fault.getter();
    if (sub_10026B89C(v33))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_100246944((void *)&_mh_execute_header, v34, v35, "No recording session active, but got callback recordingDidStart! THis should not be possible");
      sub_1001F63CC();
    }
  }
}

void sub_100331DFC()
{
  sub_100332F04();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  sub_100332F6C(OBJC_IVAR___CSDCallRecordingController_queue);
  uint64_t v3 = sub_100332E44();
  v4(v3);
  id v5 = v1;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_100332E28();
  v7(v6);
  if (v1)
  {
    if (qword_100583A20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = (void *)sub_100332F40(v8, (uint64_t)qword_100594C58);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (sub_100246418(v10))
  {
    *(_WORD *)sub_100246544() = 0;
    sub_100332FB8((void *)&_mh_execute_header, v11, v12, "Recording ended");
    sub_1001F63CC();
  }

  uint64_t v13 = *(void **)(v0 + OBJC_IVAR___CSDCallRecordingController_recordingSession);
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = sub_10025DE1C();
    sub_1003303C4(v15, v14);
    sub_100204074((void *)(v0 + OBJC_IVAR___CSDCallRecordingController_clientLaunchService), *(void *)(v0 + OBJC_IVAR___CSDCallRecordingController_clientLaunchService + 24));
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    sub_1003182AC((uint64_t)Strong, (uint64_t)v14);
  }
  else
  {
    uint64_t Strong = (void *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (sub_10026B89C(v16))
    {
      *(_WORD *)sub_100246544() = 0;
      sub_100246944((void *)&_mh_execute_header, v17, v18, "Recording ended callback, but we aren't tracking a recording session");
      sub_1001F63CC();
    }
  }
}

uint64_t sub_100332030()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_100332480;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_1005150E8;
  os_log_type_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_100332298(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisclosureDataSource();
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___CSDCallRecordingController_queue);
  id v4 = *(id *)(a1 + OBJC_IVAR___CSDCallRecordingController_speechAssetManager);
  id v5 = v3;
  sub_10023DC78();
  uint64_t v10 = v2;
  id v11 = &off_10050E320;
  *(void *)&long long v9 = v6;
  uint64_t v7 = a1 + OBJC_IVAR___CSDCallRecordingController_disclosureDataSource;
  swift_beginAccess();
  sub_1002018DC(v7);
  sub_100233560(&v9, v7);
  return swift_endAccess();
}

id sub_100332398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

uint64_t sub_100332448()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332480()
{
  return sub_100332298(*(void *)(v0 + 16));
}

uint64_t sub_100332488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100332498()
{
  return swift_release();
}

uint64_t sub_1003324A0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1003324D8(uint64_t a1)
{
  sub_100359CD8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1003324E0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100332528()
{
  sub_10032FC90(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100332534()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100332574(uint64_t a1)
{
  return sub_10032FEDC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100332580()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003325B8()
{
  return sub_10033015C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1003325C4(void *a1, void *a2, uint64_t a3)
{
  id v12[3] = type metadata accessor for CallRecordingController();
  v12[4] = &off_100515098;
  v12[0] = a1;
  sub_10020ED28((uint64_t)v12, (uint64_t)v11);
  sub_100273CB0((uint64_t)v11, (uint64_t)v10, &qword_10058A4A0);
  swift_beginAccess();
  id v6 = a1;
  sub_10025E1D8((uint64_t)v10, a3 + 16, &qword_10058A4A0);
  swift_endAccess();
  NSString v7 = *(void **)(a3 + 56);
  *(void *)(a3 + 56) = a2;
  id v8 = a2;

  return sub_1002018DC((uint64_t)v12);
}

uint64_t sub_100332688(void *a1, void *a2, uint64_t a3)
{
  uint64_t v11[3] = type metadata accessor for CallRecordingController();
  v11[4] = &off_100515078;
  v11[0] = a1;
  sub_10020ED28((uint64_t)v11, (uint64_t)v10);
  uint64_t v6 = a3 + OBJC_IVAR____TtC13callservicesd17RecordingProvider_delegate;
  swift_beginAccess();
  id v7 = a1;
  sub_10025E1D8((uint64_t)v10, v6, &qword_10058B030);
  swift_endAccess();
  id v8 = a2;
  sub_100350934((uint64_t)a2);
  return sub_1002018DC((uint64_t)v11);
}

id sub_100332734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v43 = type metadata accessor for DisclosureController();
  os_log_type_t v44 = &off_100513070;
  v42[0] = a2;
  uint64_t v40 = type metadata accessor for RecordingProvider();
  uint64_t v41 = &off_100515FE8;
  v39[0] = a3;
  uint64_t v37 = type metadata accessor for CallRecordingLaunchService();
  uint64_t v38 = &off_100514658;
  v36[0] = a4;
  uint64_t v34 = type metadata accessor for DisclosureDataSource();
  uint64_t v35 = &off_10050E320;
  v33[0] = a5;
  id v14 = objc_allocWithZone((Class)type metadata accessor for CallRecordingController());
  uint64_t v15 = sub_10020EF04((uint64_t)v42, v43);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_10020EF04((uint64_t)v39, v40);
  __chkstk_darwin(v19);
  os_log_type_t v21 = (void *)((char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10020EF04((uint64_t)v36, v37);
  __chkstk_darwin(v23);
  id v25 = (void *)((char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_10020EF04((uint64_t)v33, v34);
  __chkstk_darwin(v27);
  uint64_t v29 = (void *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  id v31 = sub_100332AAC(a1, *v17, *v21, *v25, *v29, a6, a7, v14);
  sub_1002018DC((uint64_t)v33);
  sub_1002018DC((uint64_t)v36);
  sub_1002018DC((uint64_t)v39);
  sub_1002018DC((uint64_t)v42);
  return v31;
}

id sub_100332AAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, unsigned char *a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v40 = type metadata accessor for DisclosureController();
  uint64_t v41 = &off_100513070;
  v39[0] = a2;
  uint64_t v37 = type metadata accessor for RecordingProvider();
  uint64_t v38 = &off_100515FE8;
  v36[0] = a3;
  v35[3] = type metadata accessor for CallRecordingLaunchService();
  v35[4] = &off_100514658;
  v35[0] = a4;
  uint64_t v17 = type metadata accessor for DisclosureDataSource();
  a8[OBJC_IVAR___CSDCallRecordingController_underlyingLinksConnected] = 1;
  v34[3] = v17;
  v34[4] = &off_10050E320;
  *(void *)&a8[OBJC_IVAR___CSDCallRecordingController_recordingSession] = 0;
  v34[0] = a5;
  *(void *)&a8[OBJC_IVAR___CSDCallRecordingController_queue] = a1;
  *(void *)&a8[OBJC_IVAR___CSDCallRecordingController_featureFlags] = a6;
  sub_10020ED28((uint64_t)v39, (uint64_t)&a8[OBJC_IVAR___CSDCallRecordingController_disclosureController]);
  sub_10020ED28((uint64_t)v36, (uint64_t)&a8[OBJC_IVAR___CSDCallRecordingController_recordingProvider]);
  sub_10020ED28((uint64_t)v35, (uint64_t)&a8[OBJC_IVAR___CSDCallRecordingController_clientLaunchService]);
  sub_10020ED28((uint64_t)v34, (uint64_t)&a8[OBJC_IVAR___CSDCallRecordingController_disclosureDataSource]);
  *(void *)&a8[OBJC_IVAR___CSDCallRecordingController_speechAssetManager] = a7;
  v33.receiver = a8;
  v33.super_class = ObjectType;
  id v18 = a1;
  id v19 = a6;
  id v20 = a7;
  id v21 = objc_msgSendSuper2(&v33, "init");
  uint64_t v22 = *sub_100204074(v36, v37);
  id v23 = v21;
  sub_100332688(v23, v18, v22);

  uint64_t v24 = *sub_100204074(v39, v40);
  id v25 = v23;
  sub_1003325C4(v25, v18, v24);

  uint64_t v26 = self;
  id v27 = objc_msgSend(v26, "defaultCenter", v33.receiver, v33.super_class, v34[0]);
  [v27 addObserver:v25 selector:"handleCurrentLocaleDidChange" name:NSCurrentLocaleDidChangeNotification object:0];

  id v28 = [v26 defaultCenter];
  [v28 addObserver:v25 selector:"handleRecordingStatusChangedWithNotification:" name:TUCallCenterCallStatusChangedNotification object:0];

  id v29 = [v26 defaultCenter];
  [v29 addObserver:v25 selector:"handleRecordingStatusChangedWithNotification:" name:TUCallRecordingAvailabilityChangedNotification object:0];

  id v30 = [v26 defaultCenter];
  [v30 addObserver:v25 selector:"handleMediaTokensChangedWithNotification:" name:TUCallMediaTokensChangedNotification object:0];

  id v31 = [v26 defaultCenter];
  [v31 addObserver:v25 selector:"handleCallUnderlyingLinksConnectionChangedWithNotification:" name:@"CSDCallUnderlyingLinksConnectionChangedNotification" object:0];

  sub_1002018DC((uint64_t)v34);
  sub_1002018DC((uint64_t)v35);
  sub_1002018DC((uint64_t)v36);
  sub_1002018DC((uint64_t)v39);
  return v25;
}

uint64_t sub_100332E28()
{
  return v0;
}

uint64_t sub_100332E44()
{
  return v0;
}

void sub_100332E60(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v6, v4, a4, v5, 2u);
}

BOOL sub_100332E80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *sub_100332E9C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void sub_100332EA8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

_WORD *sub_100332EC0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100332ECC()
{
  return v0;
}

uint64_t sub_100332EE8()
{
  return 0;
}

uint64_t sub_100332F04()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t sub_100332F1C(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100332F40(uint64_t a1, uint64_t a2)
{
  sub_1001F5F88(a1, a2);
  return Logger.logObject.getter();
}

void sub_100332F6C(uint64_t a1@<X8>)
{
  *uint64_t v2 = *(void *)(v1 + a1);
}

uint64_t sub_100332F78()
{
  return swift_dynamicCast();
}

void *sub_100332F98@<X0>(uint64_t a1@<X8>)
{
  return sub_100204074((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
}

void sub_100332FB8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_100332FD8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

void sub_100332FF8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100333018(uint64_t result)
{
  if ((unint64_t)(result - 6) < 0xFFFFFFFFFFFFFFFBLL) {
    return 0;
  }
  return result;
}

uint64_t sub_10033302C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100333018(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

unint64_t sub_100333060(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 0xD000000000000016;
  switch(v1)
  {
    case 0:
    case 4:
      return result;
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x10033311CLL);
  }
  return result;
}

uint64_t sub_100333148(uint64_t a1)
{
  uint64_t result = 0xD000000000000018;
  if (a1)
  {
    if (a1 == 2)
    {
      return 0xD00000000000001CLL;
    }
    else if (a1 == 1)
    {
      return 0xD000000000000027;
    }
    else
    {
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
    }
  }
  return result;
}

id sub_1003331E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  a4(a3);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t type metadata accessor for RTCConnectionSetup()
{
  return self;
}

ValueMetadata *type metadata accessor for RTCConnectionSetupEventType()
{
  return &type metadata for RTCConnectionSetupEventType;
}

ValueMetadata *type metadata accessor for RTCConnectionSetupKey()
{
  return &type metadata for RTCConnectionSetupKey;
}

unint64_t sub_1003332A4()
{
  unint64_t result = qword_10058A4D0;
  if (!qword_10058A4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058A4D0);
  }
  return result;
}

unint64_t sub_1003332F4()
{
  unint64_t result = qword_10058A4D8;
  if (!qword_10058A4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058A4D8);
  }
  return result;
}

char *sub_100333340(void *a1)
{
  id v3 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v4 = [self sharedAudioSystemController];
  unint64_t result = (char *)[self defaultCenter];
  if (v4)
  {
    os_log_type_t v6 = result;
    uint64_t v7 = (char *)objc_allocWithZone(v1);
    return sub_100336880((uint64_t)v4, v3, v6, a1, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100333408()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  if (v1 >> 62)
  {
    sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
    swift_bridgeObjectRetain();
    uint64_t v2 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
    uint64_t v2 = v1;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1003334C0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler);
  *id v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

void sub_1003334E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return;
  }
  id v10 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10048F550;
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  *(void *)(v11 + 56) = sub_1001F081C(&qword_10058A5B8);
  *(void *)(v11 + 64) = sub_1001FCB74((unint64_t *)&unk_10058A5C0, &qword_10058A5B8);
  *(void *)(v11 + 32) = v12;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v13 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute;
  if (*(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute))
  {
    id v14 = sub_100333800();
    uint64_t v15 = *(void **)(v2 + v13);
    if (v14)
    {
      uint64_t v16 = v14;
      if (v15)
      {
        sub_1001F6204(0, &qword_100589408);
        id v17 = v15;
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_13;
        }
      }
      else
      {
      }
LABEL_10:
      id v19 = sub_100333800();
      char v20 = sub_1003338FC(v19);

      if (v20)
      {
        uint64_t v21 = swift_bridgeObjectRetain();
        char v22 = sub_1002F8070(v21, a1);
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          id v23 = sub_1001B1BF8();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          uint64_t v24 = *(void **)(v2 + v13);
          *(void *)(v2 + v13) = 0;
        }
      }
      goto LABEL_13;
    }
    if (v15) {
      goto LABEL_10;
    }
  }
LABEL_13:
  id v25 = *(void (**)(uint64_t))(v2
                                       + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler);
  if (v25)
  {
    uint64_t v26 = swift_retain();
    v25(v26);
    sub_100208490((uint64_t)v25);
  }
}

void *sub_100333800()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  if (v1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      if ([v4 isCurrentlyPicked])
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1003338FC(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  if (([v1 isBluetooth] & 1) != 0
    || ([v1 isWiredHeadset] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = (uint64_t)[v1 isWiredHeadphones];
  }

  return v2;
}

uint64_t sub_100333974(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes) = a1;
  sub_1003334E0(v2);

  return swift_bridgeObjectRelease();
}

BOOL sub_1003339E4()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) == 1;
}

void sub_1003339FC()
{
  sub_1001FCC38();
  uint64_t v2 = v0;
  id v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100235BE8();
  id v9 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  void *v1 = v9;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v1, v5);
  if (v9)
  {
    id v11 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v12 = sub_1001FCCB8();
    *(_OWORD *)(v12 + 16) = xmmword_10048F550;
    uint64_t v13 = sub_1001F6204(0, (unint64_t *)&qword_10058BE00);
    *(void *)(v12 + 56) = v13;
    uint64_t v14 = sub_1001FCAC8((unint64_t *)&qword_1005865B0, (unint64_t *)&qword_10058BE00);
    *(void *)(v12 + 64) = v14;
    *(void *)(v12 + 32) = v4;
    id v15 = v4;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v16 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes;
    id v17 = v15;
    unint64_t v18 = swift_bridgeObjectRetain();
    id v19 = (void *)sub_100316ED0(v18, v17);
    swift_bridgeObjectRelease();
    if (v19)
    {
      uint64_t v20 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24);
      uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32);
      sub_100204074((void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider), v20);
      (*(void (**)(void *, uint64_t, uint64_t))(v21 + 40))(v19, v20, v21);
      uint64_t v26 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState;
      if (*(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState))
      {
        uint64_t v27 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
        *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = v19;
      }
      else
      {
        id v28 = sub_1001B1BF8();
        uint64_t v29 = sub_1001FCCB8();
        *(_OWORD *)(v29 + 16) = xmmword_10048F550;
        *(void *)(v29 + 56) = sub_1001F6204(0, &qword_100589408);
        *(void *)(v29 + 64) = sub_1001FCAC8((unint64_t *)&unk_10058A5D0, &qword_100589408);
        *(void *)(v29 + 32) = v19;
        id v30 = v19;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        id v31 = *(void **)(v2 + v26);
        *(void *)(v2 + v26) = v19;
        sub_100336600(v31);
      }
    }
    else
    {
      id v22 = sub_1001B1BF8();
      static os_log_type_t.error.getter();
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_10048FB00;
      *(void *)(v23 + 56) = v13;
      *(void *)(v23 + 64) = v14;
      *(void *)(v23 + 32) = v17;
      uint64_t v24 = *(void *)(v2 + v16);
      *(void *)(v23 + 96) = sub_1001F081C(&qword_10058A5B8);
      *(void *)(v23 + 104) = sub_1001FCB74((unint64_t *)&unk_10058A5C0, &qword_10058A5B8);
      *(void *)(v23 + 72) = v24;
      id v25 = v17;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_100333EBC()
{
  sub_1001FCC38();
  uint64_t v37 = v1;
  uint64_t v35 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v41 = v4;
  uint64_t v42 = v3;
  __chkstk_darwin(v3);
  sub_1001FCCD0();
  uint64_t v39 = v5;
  uint64_t v40 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v38 = v6;
  __chkstk_darwin(v7);
  sub_100336B08(v8, v34[0]);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = type metadata accessor for DispatchWallTime();
  sub_1001F6398();
  uint64_t v16 = v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v22 = (char *)v34 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  id v28 = (uint64_t *)((char *)v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *id v28 = v29;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v23);
  v34[1] = (uint64_t)v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v23);
  if (v29)
  {
    static DispatchWallTime.now()();
    *uint64_t v14 = 5;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchTimeInterval.seconds(_:), v9);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v9);
    v34[0] = *(void *)(v16 + 8);
    uint64_t v30 = v36;
    ((void (*)(char *, uint64_t))v34[0])(v20, v36);
    v44[4] = v35;
    v44[5] = v37;
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 1107296256;
    v44[2] = sub_1002C2C88;
    uint64_t v44[3] = &unk_1005152E0;
    id v31 = _Block_copy(v44);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)();
    _Block_release(v31);
    sub_1001F7664();
    v32();
    sub_1001F7664();
    v33();
    ((void (*)(char *, uint64_t))v34[0])(v22, v30);
    swift_release();
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1003342CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider);
    uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24);
    uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32);
    sub_100204074((void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider), v10);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11))
    {
      swift_getObjectType();
      uint64_t v12 = v9[3];
      uint64_t v13 = v9[4];
      sub_100204074(v9, v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    }
    else
    {
      uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8);
      if (v15)
      {
        uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
        uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode);
        uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_100334714(v16, v15, v17, v18);
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        return sub_100333974(v19);
      }
      swift_getObjectType();
      uint64_t v20 = v9[3];
      uint64_t v21 = v9[4];
      sub_100204074(v9, v20);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
    }
    uint64_t v19 = (uint64_t)sub_100334524(v14);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void *sub_100334524(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1001F6204(0, &qword_100589408);
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = *(void *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain_n();
      id v6 = sub_100335620();
      if (v6)
      {
        id v7 = v6;
        swift_bridgeObjectRelease();
        id v8 = v7;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        id v9 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_10048F550;
        *(void *)(v10 + 56) = sub_1001F081C((uint64_t *)&unk_100586DF0);
        *(void *)(v10 + 64) = sub_1001FCB74((unint64_t *)&qword_100584BB0, (uint64_t *)&unk_100586DF0);
        *(void *)(v10 + 32) = v5;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100334714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = _swiftEmptyArrayStorage;
    dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
    uint64_t v28 = a2;
    uint64_t v29 = a4;
    uint64_t v20 = *(void *)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24];
    uint64_t v19 = *(void *)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32];
    uint64_t v27 = sub_100204074(&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider], v20);
    uint64_t v21 = (void *)swift_allocObject();
    void v21[2] = v17;
    v21[3] = v4;
    v21[4] = v18;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, Swift::Int (*)(uint64_t), void *, uint64_t, uint64_t))(v19 + 32);
    swift_retain();
    uint64_t v22 = v4;
    uint64_t v23 = v18;
    v26(a1, v28, a3, v29, sub_100336748, v21, v20, v19);
    swift_release();
    OS_dispatch_semaphore.wait()();

    swift_beginAccess();
    uint64_t v24 = *(void *)(v17 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10033495C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (a1)
  {
    unsigned int v9 = [a1 hasAudioInterruption];
    uint64_t v10 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState;
    uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState);
    if (v9)
    {
      if ((unint64_t)v11 >= 2)
      {
        id v12 = v11;
        id v13 = sub_1001B1BF8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_10048F550;
        *(void *)(v14 + 56) = sub_1001F6204(0, &qword_100589408);
        *(void *)(v14 + 64) = sub_1001FCAC8((unint64_t *)&unk_10058A5D0, &qword_100589408);
        *(void *)(v14 + 32) = v12;
        id v15 = v12;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        sub_1003339FC();
        sub_100336600(v11);
        uint64_t v11 = *(void **)(v1 + v10);
      }
      *(void *)(v1 + v10) = 1;
    }
    else
    {
      if (v11 != (void *)1) {
        return;
      }
      *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) = 0;
    }
  }
  else
  {
    uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState);
    *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) = 0;
  }
  sub_100336600(v11);
}

Swift::Int sub_100334BAC(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  uint64_t v4 = sub_100334524(a1);
  swift_beginAccess();
  *(void *)(a2 + 16) = v4;
  swift_bridgeObjectRelease();
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_100334C2C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v7 = sub_1001F612C(a1, (SEL *)&selRef_audioCategory);
    uint64_t v32 = v8;
    uint64_t v33 = v7;
    uint64_t v9 = sub_1001F612C(a1, (SEL *)&selRef_audioMode);
    uint64_t v30 = v10;
    uint64_t v31 = v9;
    unsigned __int8 v11 = [a1 hasAudioInterruption];
  }
  else
  {
    unsigned __int8 v11 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  id v12 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10048FB00;
  if (a1)
  {
    aBlock[0] = a1;
    sub_1001F6204(0, (unint64_t *)&qword_10058A480);
    id v14 = a1;
    uint64_t v15 = String.init<A>(reflecting:)();
    unint64_t v17 = v16;
  }
  else
  {
    unint64_t v17 = 0xE300000000000000;
    uint64_t v15 = 7104878;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1001F3B08();
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  LOBYTE(aBlock[0]) = v11;
  uint64_t v19 = String.init<A>(reflecting:)();
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 72) = v19;
  *(void *)(v13 + 80) = v20;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a1;
  v21[3] = v1;
  uint64_t v22 = v32;
  v21[4] = v33;
  void v21[5] = v22;
  uint64_t v23 = v30;
  void v21[6] = v31;
  v21[7] = v23;
  aBlock[4] = sub_1003366A0;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  void aBlock[3] = &unk_100515380;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = a1;
  id v26 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  uint64_t v27 = v35;
  uint64_t v28 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v36);
  return swift_release();
}

void sub_10033502C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1)
  {
    id v12 = *(void **)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
    *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = 0;
  }
  sub_10033495C(a1);
  char v13 = 0;
  id v14 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
  uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8);
  if (v15 && a4)
  {
    if (*v14 == a3 && v15 == a4) {
      char v17 = 1;
    }
    else {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    char v13 = v17 ^ 1;
  }
  unint64_t v18 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode);
  uint64_t v19 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
  uint64_t v68 = a3;
  if (v19 && a6 && (*v18 == a5 ? (BOOL v20 = v19 == a6) : (BOOL v20 = 0), !v20))
  {
    if (!(v13 & 1 | ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)))
    {
LABEL_19:
      id v21 = sub_1001B1BF8();
      sub_1001F081C(&qword_100584B20);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_10048FAF0;
      id v66 = v21;
      if (v14[1])
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = String.init<A>(reflecting:)();
        unint64_t v25 = v24;
      }
      else
      {
        unint64_t v25 = 0xE300000000000000;
        uint64_t v23 = 7104878;
      }
      *(void *)(v22 + 56) = &type metadata for String;
      unint64_t v34 = sub_1001F3B08();
      *(void *)(v22 + 64) = v34;
      *(void *)(v22 + 32) = v23;
      *(void *)(v22 + 40) = v25;
      if (a4)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = String.init<A>(reflecting:)();
      }
      else
      {
        unint64_t v36 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }
      *(void *)(v22 + 96) = &type metadata for String;
      *(void *)(v22 + 104) = v34;
      *(void *)(v22 + 72) = v35;
      *(void *)(v22 + 80) = v36;
      if (v18[1])
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = String.init<A>(reflecting:)();
      }
      else
      {
        unint64_t v41 = 0xE300000000000000;
        uint64_t v40 = 7104878;
      }
      *(void *)(v22 + 136) = &type metadata for String;
      *(void *)(v22 + 144) = v34;
      *(void *)(v22 + 112) = v40;
      *(void *)(v22 + 120) = v41;
      if (a6)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = String.init<A>(reflecting:)();
      }
      else
      {
        unint64_t v46 = 0xE300000000000000;
        uint64_t v45 = 7104878;
      }
      *(void *)(v22 + 176) = &type metadata for String;
      *(void *)(v22 + 184) = v34;
      *(void *)(v22 + 152) = v45;
      *(void *)(v22 + 160) = v46;
      static os_log_type_t.default.getter();
      uint64_t v49 = v66;
      os_log(_:dso:log:type:_:)();
      char v50 = 0;
      goto LABEL_49;
    }
  }
  else if ((v13 & 1) == 0)
  {
    goto LABEL_19;
  }
  id v26 = sub_100333800();
  char v27 = sub_1003338FC(v26);

  id v28 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1004914A0;
  id v67 = v28;
  uint64_t v65 = a5;
  char v30 = v27;
  if (v14[1])
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = String.init<A>(reflecting:)();
    unint64_t v33 = v32;
  }
  else
  {
    unint64_t v33 = 0xE300000000000000;
    uint64_t v31 = 7104878;
  }
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v37 = sub_1001F3B08();
  *(void *)(v29 + 64) = v37;
  *(void *)(v29 + 32) = v31;
  *(void *)(v29 + 40) = v33;
  if (a4)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v38 = 7104878;
  }
  char v42 = v30;
  a5 = v65;
  *(void *)(v29 + 96) = &type metadata for String;
  *(void *)(v29 + 104) = v37;
  *(void *)(v29 + 72) = v38;
  *(void *)(v29 + 80) = v39;
  if (v18[1])
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v44 = 0xE300000000000000;
    uint64_t v43 = 7104878;
  }
  *(void *)(v29 + 136) = &type metadata for String;
  *(void *)(v29 + 144) = v37;
  *(void *)(v29 + 112) = v43;
  *(void *)(v29 + 120) = v44;
  if (a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v48 = 0xE300000000000000;
    uint64_t v47 = 7104878;
  }
  char v50 = v42 ^ 1;
  *(void *)(v29 + 176) = &type metadata for String;
  *(void *)(v29 + 184) = v37;
  *(void *)(v29 + 152) = v47;
  *(void *)(v29 + 160) = v48;
  if (sub_100333800())
  {
    sub_1001F6204(0, &qword_100589408);
    uint64_t v51 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v52 = 0xE300000000000000;
    uint64_t v51 = 7104878;
  }
  *(void *)(v29 + 216) = &type metadata for String;
  *(void *)(v29 + 224) = v37;
  *(void *)(v29 + 192) = v51;
  *(void *)(v29 + 200) = v52;
  uint64_t v53 = String.init<A>(reflecting:)();
  *(void *)(v29 + 256) = &type metadata for String;
  *(void *)(v29 + 264) = v37;
  *(void *)(v29 + 232) = v53;
  *(void *)(v29 + 240) = v54;
  static os_log_type_t.default.getter();
  uint64_t v49 = v67;
  os_log(_:dso:log:type:_:)();
LABEL_49:

  swift_bridgeObjectRelease();
  *id v14 = v68;
  v14[1] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void *v18 = a5;
  v18[1] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1003342CC();
  uint64_t v55 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute;
  uint64_t v56 = *(void **)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
  if (v56 && (v50 & 1) != 0)
  {
    id v57 = v56;
    id v58 = sub_1001B1BF8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_10048F550;
    unsigned int v60 = *(void **)(a2 + v55);
    if (v60)
    {
      sub_1001F6204(0, &qword_100589408);
      id v61 = v60;
      uint64_t v62 = String.init<A>(reflecting:)();
      unint64_t v64 = v63;
    }
    else
    {
      unint64_t v64 = 0xE300000000000000;
      uint64_t v62 = 7104878;
    }
    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = sub_1001F3B08();
    *(void *)(v59 + 32) = v62;
    *(void *)(v59 + 40) = v64;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    sub_1003339FC();
  }
}

id sub_100335620()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithDictionary:isa];

  return v2;
}

void sub_1003356A8()
{
  sub_1001FCC38();
  uint64_t v29 = v1;
  char v30 = v0;
  uint64_t v2 = v1;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v35 = v3;
  __chkstk_darwin(v4);
  sub_1001FCCD0();
  uint64_t v31 = v5;
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  sub_100336B08(v8, v28);
  uint64_t v9 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v11 = v10;
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v14);
  id v15 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v16 = sub_1001FCCB8();
  *(_OWORD *)(v16 + 16) = xmmword_10048F550;
  char v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v9);
  uint64_t v18 = String.init<A>(reflecting:)();
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1001F3B08();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v21 = v30;
  v17((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
  unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v23 + v22, (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)(v23 + ((v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  v37[4] = sub_1003367F4;
  v37[5] = v23;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 1107296256;
  v37[2] = sub_1002C2C88;
  uint64_t v37[3] = &unk_100515420;
  unint64_t v24 = _Block_copy(v37);
  id v25 = v21;
  static DispatchQoS.unspecified.getter();
  unint64_t v36 = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  sub_1001F7664();
  v26();
  sub_1001F7664();
  v27();
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100335A14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3) {
    return sub_1003342CC();
  }
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
  if (!*(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8)) {
    goto LABEL_7;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v6;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v19, v4, &v20);
  sub_100234D14((uint64_t)v19);
  if (v21)
  {
    if (swift_dynamicCast())
    {
      uint64_t v7 = *v5;
      uint64_t v8 = v5[1];
      swift_bridgeObjectRetain();
      BOOL v9 = sub_100335C34(v7, v8, v15, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v9) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    sub_100202D2C((uint64_t)&v20);
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v10;
  AnyHashable.init<A>(_:)();
  sub_1002232D0((uint64_t)v19, v4, &v20);
  swift_bridgeObjectRelease();
  sub_100234D14((uint64_t)v19);
  if (!v21)
  {
    sub_100202D2C((uint64_t)&v20);
    return sub_1003342CC();
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_1003342CC();
  }
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  if (*(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode) == v16 && v11 == v18)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return sub_1003342CC();
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v13) {
    return sub_1003342CC();
  }
  return result;
}

BOOL sub_100335C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return !a4;
  }
  if (!a4) {
    return 0;
  }
  BOOL v9 = a1 == a3 && a2 == a4;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  uint64_t v10 = v4 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider;
  sub_10020ED28(v4 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider, (uint64_t)v17);
  sub_100204074(v17, v18);
  uint64_t DynamicType = swift_getDynamicType();
  uint64_t v12 = v19;
  sub_1002018DC((uint64_t)v17);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, a2, DynamicType, v12) & 1) == 0) {
    return 0;
  }
  sub_10020ED28(v10, (uint64_t)v17);
  sub_100204074(v17, v18);
  uint64_t v13 = 1;
  uint64_t v14 = swift_getDynamicType();
  uint64_t v15 = v19;
  sub_1002018DC((uint64_t)v17);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a3, a4, v14, v15) & 1) == 0) {
    return 0;
  }
  return v13;
}

void sub_100335DB0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1002024D0();
  id v7 = sub_1001B1BF8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v8 = sub_1001FCCB8();
  *(_OWORD *)(v8 + 16) = xmmword_10048F550;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1001F3B08();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)sub_100335EEC();
  sub_100334C2C(v12);
}

uint64_t sub_100335EEC()
{
  type metadata accessor for AudioResolver();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver);
  uint64_t result = (uint64_t)sub_100326E0C(v1, *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_ttyProviderObserver), 0, 2u);
  if (!result)
  {
    id v3 = objc_msgSend(objc_msgSend(v1, "callContainer"), "frontmostCall");
    swift_unknownObjectRelease();
    if (v3
      || (id v3 = objc_msgSend(objc_msgSend(v1, "callContainer"), "currentVideoCall"),
          swift_unknownObjectRelease(),
          v3))
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100336004(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = type metadata accessor for Notification();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1002024D0();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a1;
  a4(v4);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v4, v7);
}

void sub_1003360BC()
{
}

uint64_t type metadata accessor for LocalAudioRouteProvider()
{
  return self;
}

void sub_100336208()
{
  sub_1001FCC38();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100235BE8();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1002024D0();
  id v11 = (void *)sub_100335EEC();

  if (!v11)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v0;
    v15[4] = sub_100336648;
    v15[5] = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    void v15[2] = sub_1002C2C88;
    id v15[3] = &unk_100515330;
    uint64_t v13 = _Block_copy(v15);
    id v14 = v0;
    static DispatchQoS.unspecified.getter();
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
    swift_release();
  }
  sub_1001FCC08();
}

void sub_100336428(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
  *(void *)(a1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = 0;
}

void *initializeBufferWithCopyOfBuffer for LocalAudioRouteProvider.CallAudioInterruptionState(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for LocalAudioRouteProvider.CallAudioInterruptionState(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for LocalAudioRouteProvider.CallAudioInterruptionState(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for LocalAudioRouteProvider.CallAudioInterruptionState(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for LocalAudioRouteProvider.CallAudioInterruptionState()
{
  return &type metadata for LocalAudioRouteProvider.CallAudioInterruptionState;
}

uint64_t sub_1003365E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003365F8()
{
  return swift_release();
}

void sub_100336600(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t sub_100336610()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100336648()
{
  sub_100336428(*(void *)(v0 + 16));
}

uint64_t sub_100336650()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1003366A0()
{
  sub_10033502C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1003366B0(void *a1)
{
  return sub_1001F612C(a1, (SEL *)&selRef_audioCategory);
}

uint64_t sub_1003366BC(void *a1)
{
  return sub_1001F612C(a1, (SEL *)&selRef_audioMode);
}

uint64_t sub_1003366C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100336700()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

Swift::Int sub_100336748(uint64_t a1)
{
  return sub_100334BAC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100336754()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(*(void *)(v1 - 8) + 64) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F7664();
  v5();

  return _swift_deallocObject(v0, v4 + 8, v3);
}

uint64_t sub_1003367F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100335A14(v0 + v2, v3);
}

char *sub_100336880(uint64_t a1, void *a2, void *a3, void *a4, char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = sub_1001F6204(0, &qword_10058A158);
  uint64_t v12 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes] = _swiftEmptyArrayStorage;
  v27[3] = v11;
  void v27[4] = &off_100510028;
  uint64_t v13 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  id v14 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode];
  *(void *)id v14 = 0;
  *((void *)v14 + 1) = 0;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute] = 0;
  v27[0] = a1;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState] = 0;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue] = a4;
  sub_10020ED28((uint64_t)v27, (uint64_t)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider]);
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver] = a2;
  id v15 = objc_allocWithZone((Class)CSDTTYProviderObserver);
  uint64_t v16 = a5;
  id v17 = a4;
  id v18 = a2;
  id v19 = [v15 init];
  *(void *)&v16[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_ttyProviderObserver] = v19;

  v26.receiver = v16;
  v26.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v26, "init");
  sub_10020ED28((uint64_t)v20 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider, (uint64_t)v25);
  uint64_t v21 = (char *)v20;
  sub_1001F081C((uint64_t *)&unk_10058A5E0);
  if (swift_dynamicCast())
  {
    [v24 setDelegate:v21];
  }
  unint64_t v22 = *(void **)&v21[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver];
  [v22 setTriggers:3073];
  [v22 setDelegate:v21];
  [a3 addObserver:v21 selector:"audioRouteInformationChangedWithNotification:" name:TUAudioSystemAudioPickableRoutesChanged object:0];
  [a3 addObserver:v21 selector:"audioInterruptionPropertiesChangedWithNotification:" name:@"CSDCallAudioInterruptionPropertiesChangedNotification" object:0];

  sub_1002018DC((uint64_t)v27);
  return v21;
}

uint64_t sub_100336B08@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void sub_100336B28(uint64_t a1, double a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100584B40);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v57 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v50 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v51 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)v50 - v14;
  __chkstk_darwin(v13);
  id v17 = (char *)v50 - v16;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100337398();
    sub_1003373D8();
    Set.Iterator.init(_cocoa:)();
    a1 = v62;
    uint64_t v55 = v63;
    uint64_t v18 = v64;
    int64_t v19 = v65;
    unint64_t v20 = v66;
  }
  else
  {
    uint64_t v21 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v55 = a1 + 56;
    uint64_t v23 = ~v21;
    uint64_t v24 = -v21;
    if (v24 < 64) {
      uint64_t v25 = ~(-1 << v24);
    }
    else {
      uint64_t v25 = -1;
    }
    unint64_t v20 = v25 & v22;
    swift_bridgeObjectRetain();
    uint64_t v18 = v23;
    int64_t v19 = 0;
  }
  v50[1] = v18;
  uint64_t v53 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v54 = (unint64_t)(v18 + 64) >> 6;
  id v58 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  unint64_t v52 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v26 = a1;
  uint64_t v56 = a1;
  if (a1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v20)
  {
    uint64_t v60 = (v20 - 1) & v20;
    unint64_t v27 = __clz(__rbit64(v20)) | (v19 << 6);
    int64_t v28 = v19;
    goto LABEL_29;
  }
  int64_t v31 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v31 < v54)
    {
      unint64_t v32 = *(void *)(v55 + 8 * v31);
      int64_t v28 = v19 + 1;
      if (v32) {
        goto LABEL_28;
      }
      int64_t v28 = v19 + 2;
      if (v19 + 2 >= v54) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)(v55 + 8 * v28);
      if (v32) {
        goto LABEL_28;
      }
      int64_t v28 = v19 + 3;
      if (v19 + 3 >= v54) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)(v55 + 8 * v28);
      if (v32) {
        goto LABEL_28;
      }
      int64_t v28 = v19 + 4;
      if (v19 + 4 >= v54) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)(v55 + 8 * v28);
      if (v32)
      {
LABEL_28:
        uint64_t v60 = (v32 - 1) & v32;
        unint64_t v27 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_29:
        id v30 = *(id *)(*(void *)(v26 + 48) + 8 * v27);
        if (v30)
        {
          while (1)
          {
            id v34 = [v30 recordingEndedDate];
            if (v34)
            {
              uint64_t v35 = v34;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v36 = *v59;
              (*v59)(v8, v15, v9);
              sub_1001F0530((uint64_t)v8, 0, 1, v9);
              int v37 = sub_1001F758C((uint64_t)v8, 1, v9);
              uint64_t v38 = (uint64_t)v57;
              if (v37 != 1)
              {
                v36(v17, v8, v9);
                goto LABEL_35;
              }
            }
            else
            {
              sub_1001F0530((uint64_t)v8, 1, 1, v9);
              uint64_t v38 = (uint64_t)v57;
            }
            static Date.now.getter();
            sub_100337428((uint64_t)v8);
LABEL_35:
            id v39 = [v30 recordingStartedDate];
            if (!v39)
            {
              sub_1001F0530(v38, 1, 1, v9);
LABEL_39:
              (*v58)(v17, v9);
              sub_100337428(v38);

              a2 = 0.0;
              goto LABEL_40;
            }
            uint64_t v40 = v39;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v41 = *v59;
            (*v59)((char *)v38, v15, v9);
            sub_1001F0530(v38, 0, 1, v9);
            if (sub_1001F758C(v38, 1, v9) == 1) {
              goto LABEL_39;
            }
            char v42 = v17;
            uint64_t v43 = v15;
            unint64_t v44 = v8;
            uint64_t v45 = v51;
            v41(v51, (char *)v38, v9);
            Date.timeIntervalSince(_:)();
            double v47 = v46;
            unint64_t v48 = *v58;
            uint64_t v49 = v45;
            uint64_t v8 = v44;
            id v15 = v43;
            id v17 = v42;
            uint64_t v26 = v56;
            (*v58)(v49, v9);
            v48(v17, v9);

            a2 = a2 + v47;
LABEL_40:
            int64_t v19 = v28;
            unint64_t v20 = v60;
            if ((v26 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            uint64_t v29 = __CocoaSet.Iterator.next()();
            if (v29)
            {
              uint64_t v61 = v29;
              sub_100337398();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v30 = v67;
              swift_unknownObjectRelease();
              int64_t v28 = v19;
              uint64_t v60 = v20;
              uint64_t v26 = v56;
              if (v30) {
                continue;
              }
            }
            goto LABEL_42;
          }
        }
        goto LABEL_42;
      }
      int64_t v28 = v19 + 5;
      if (v19 + 5 < v54)
      {
        unint64_t v32 = *(void *)(v55 + 8 * v28);
        if (!v32)
        {
          int64_t v33 = v19 + 6;
          do
          {
            if (v33 >= v54) {
              goto LABEL_42;
            }
            unint64_t v32 = *(void *)(v55 + 8 * v33++);
          }
          while (!v32);
          int64_t v28 = v33 - 1;
        }
        goto LABEL_28;
      }
    }
LABEL_42:
    sub_100206FA0();
    return;
  }
  __break(1u);
}

void *sub_100337130(uint64_t a1, uint64_t a2)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_1002DFABC((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v5 = &_swiftEmptySetSingleton;
  }
  v2[3] = a2;
  v2[4] = v5;
  v2[2] = a1;
  return v2;
}

BOOL sub_1003371A0(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  char v4 = sub_100370D10(a1, v3);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
    swift_beginAccess();
    sub_1002E0404((uint64_t)&v6, (uint64_t)a1);
    swift_endAccess();
  }
  return (v4 & 1) == 0;
}

uint64_t sub_100337250()
{
  sub_100337488();
  uint64_t v1 = *(void *)(v0 + 32);
  if ((v1 & 0xC000000000000001) == 0) {
    return *(void *)(v1 + 16);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = __CocoaSet.count.getter();
  swift_bridgeObjectRelease();
  return v2;
}

double sub_1003372B8()
{
  sub_100337488();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_100336B28(v0, 0.0);
  double v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100337318()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100337340()
{
  sub_100337318();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CallRecordingTracker()
{
  return self;
}

unint64_t sub_100337398()
{
  unint64_t result = qword_100588810;
  if (!qword_100588810)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100588810);
  }
  return result;
}

unint64_t sub_1003373D8()
{
  unint64_t result = qword_10058A6C8;
  if (!qword_10058A6C8)
  {
    sub_100337398();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058A6C8);
  }
  return result;
}

uint64_t sub_100337428(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C(&qword_100584B40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100337488()
{
  return swift_beginAccess();
}

_UNKNOWN **sub_1003374A8()
{
  return &off_100515448;
}

uint64_t sub_1003374B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v5 - 8);
  id v57 = &v52[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001F75C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v61 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002B8138();
  __chkstk_darwin(v11);
  sub_10026B98C();
  uint64_t v60 = v12;
  sub_1002B8138();
  __chkstk_darwin(v13);
  sub_10026B98C();
  uint64_t v55 = v14;
  sub_1002B8138();
  __chkstk_darwin(v15);
  sub_10026B98C();
  uint64_t v58 = v16;
  sub_1002B8138();
  __chkstk_darwin(v17);
  sub_10026B98C();
  uint64_t v62 = v18;
  sub_1002B8138();
  __chkstk_darwin(v19);
  sub_10026B98C();
  uint64_t v59 = v20;
  sub_1002B8138();
  uint64_t v22 = __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  uint64_t v24 = v8 + 16;
  uint64_t v23 = *(void (**)(void))(v8 + 16);
  sub_1001F7610();
  v23();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v64 = a2;
  uint64_t v26 = v25(a1, a2);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if ((v28 & 0x2000000000000000) != 0) {
    uint64_t v29 = HIBYTE(v28) & 0xF;
  }
  else {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v32 = *(void (**)(void))(v8 + 8);
  uint64_t v30 = v8 + 8;
  int64_t v31 = v32;
  sub_10024636C();
  v32();
  sub_1001F7610();
  v23();
  uint64_t v63 = v24;
  if (!v29)
  {
    sub_10024636C();
    v31();
    sub_1001F7610();
    v23();
    uint64_t v37 = v2;
    uint64_t v35 = v31;
    uint64_t v38 = v60;
    id v39 = v61;
    uint64_t v30 = v37;
    goto LABEL_16;
  }
  uint64_t v56 = v2;
  int64_t v33 = *(uint64_t (**)(void))(v64 + 40);
  sub_100338500();
  char v34 = v33();
  sub_1001F7610();
  v23();
  if ((v34 & 1) == 0)
  {
    sub_10024636C();
    v31();
    sub_10024636C();
    v31();
    sub_1003384E4();
    v23();
    uint64_t v35 = v31;
    unint64_t v36 = v33;
    goto LABEL_9;
  }
  sub_100338500();
  int v53 = v33();
  sub_10024636C();
  v31();
  sub_10024636C();
  v31();
  unint64_t v36 = v33;
  sub_1003384E4();
  v23();
  uint64_t v35 = v31;
  uint64_t v38 = v60;
  id v39 = v61;
  if ((v53 & 2) == 0)
  {
LABEL_16:
    sub_1003384A0();
    v35();
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v38, v30, a1);
    unint64_t v41 = v35;
    goto LABEL_17;
  }
LABEL_9:
  int64_t v54 = v35;
  sub_100338500();
  char v40 = v36();
  sub_10033850C();
  v23();
  if ((v40 & 1) == 0)
  {
    uint64_t v59 = v36;
    unint64_t v41 = v54;
    sub_10026B7C0();
    v41();
    sub_1003384A0();
    v41();
    uint64_t v42 = sub_1003384C4();
    ((void (*)(uint64_t))v23)(v42);
    id v39 = v61;
    goto LABEL_13;
  }
  sub_100338500();
  char v43 = v36();
  sub_10033850C();
  v23();
  if ((v43 & 4) != 0)
  {
    uint64_t v35 = v54;
    sub_10026B7C0();
    v35();
    sub_1003384A0();
    v35();
    id v39 = v61;
    uint64_t v38 = v60;
    goto LABEL_16;
  }
  uint64_t v59 = v36;
  sub_100338500();
  char v44 = v36();
  unint64_t v41 = v54;
  sub_10026B7C0();
  v41();
  sub_1003384A0();
  v41();
  sub_1003384A0();
  v41();
  uint64_t v45 = sub_1003384C4();
  ((void (*)(uint64_t))v23)(v45);
  id v39 = v61;
  if ((v44 & 8) != 0)
  {
LABEL_17:
    sub_1003384A0();
    v41();
    ((void (*)(unsigned char *, uint64_t, uint64_t))v23)(v39, v30, a1);
    unsigned int v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 40))(a1, v64);
    goto LABEL_18;
  }
LABEL_13:
  double v46 = v23;
  uint64_t v47 = (uint64_t)v57;
  (*(void (**)(uint64_t))(v64 + 56))(a1);
  sub_1003384A0();
  v41();
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v49 = 1;
  LODWORD(v62) = sub_1001F758C(v47, 1, v48);
  sub_1002012F4(v47);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v46)(v39, v30, a1);
  if (v62 != 1)
  {
    unsigned int v50 = ((uint64_t (*)(uint64_t, uint64_t))v59)(a1, v64);
LABEL_18:
    uint64_t v49 = (v50 >> 9) & 1;
  }
  sub_1003384A0();
  v41();
  return v49;
}

id sub_100337A2C@<X0>(void *a1@<X8>)
{
  id result = sub_1002FE65C();
  *a1 = result;
  return result;
}

id sub_100337A58()
{
  return sub_100337A7C();
}

id sub_100337A7C()
{
  return [v0 invalidate];
}

uint64_t sub_100337A8C()
{
  return sub_1002FE918();
}

uint64_t sub_100337AB0()
{
  return sub_1002FE970();
}

uint64_t sub_100337AD4()
{
  return sub_1002FE994();
}

uint64_t sub_100337AF8()
{
  return sub_1002FE9B8();
}

id sub_100337B1C()
{
  return sub_1002FE9DC();
}

uint64_t sub_100337B40()
{
  return sub_1002FE9EC();
}

uint64_t sub_100337B64@<X0>(uint64_t a1@<X8>)
{
  return sub_1002FEA10(a1);
}

uint64_t sub_100337B88()
{
  return sub_1002FEA90();
}

uint64_t sub_100337BAC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100337C68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_isaMask & *v1;
  char v4 = (char *)v1 + *(void *)(v3 + 0x68);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_100337D1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100337D84(uint64_t a1)
{
  uint64_t v2 = *(void *)((swift_isaMask & *v1) + 0x50);
  __chkstk_darwin(a1);
  char v4 = (char *)&v20 - v3;
  uint64_t v6 = *(void *)(v5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  sub_1001F75C4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v20 - v12;
  sub_100337C68((uint64_t)v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v2, v6);
  sub_10026B7C0();
  v14();
  if (sub_1001F758C((uint64_t)v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    LOBYTE(v8) = 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v13, AssociatedTypeWitness);
    LODWORD(v8) = (v16 >> 5) & 1;
  }
  sub_100337D1C();
  uint64_t v17 = Dictionary.values.getter();
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v21 = v17;
  __chkstk_darwin(v18);
  *(&v20 - 4) = v2;
  *(&v20 - 3) = v6;
  *((unsigned char *)&v20 - 16) = v8;
  type metadata accessor for Dictionary.Values();
  swift_getWitnessTable();
  uint64_t v21 = Sequence.filter(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

uint64_t sub_1003380EC(uint64_t a1, char a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v5 = swift_checkMetadataState();
  return ((v4(v5, AssociatedConformanceWitness) & 1) == 0) | ((a2 & 1) == 0);
}

id sub_1003381B4()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)(swift_isaMask & *(void *)v0);
  uint64_t v3 = v2[10];
  sub_1001F75C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = &v1[v2[13]];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v9, v3);
  (*(void (**)(uint64_t, void))(v2[11] + 160))(v3, v2[11]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  uint64_t v10 = (objc_class *)type metadata accessor for NearbyDeviceMonitor();
  v13.receiver = v1;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, "dealloc");
}

id sub_100338314(void *a1)
{
  id v1 = a1;
  return sub_1003381B4();
}

uint64_t sub_10033833C(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;

  sub_1003384B0();
  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(&a1[*(void *)(v3 + 104)]);
  sub_1003384B0();
  sub_100208490(*(void *)&a1[*(void *)(v4 + 112)]);
  sub_1003384B0();

  return swift_bridgeObjectRelease();
}

void sub_100338424()
{
}

void sub_100338454()
{
}

uint64_t type metadata accessor for NearbyDeviceMonitor()
{
  return sub_1001F919C();
}

uint64_t sub_10033847C(uint64_t a1)
{
  return sub_1003380EC(a1, *(unsigned char *)(v1 + 32)) & 1;
}

uint64_t sub_1003384C4()
{
  return *(void *)(v0 - 120);
}

void *sub_100338520(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      sub_10033EC5C();
      uint64_t v8 = v7;

      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v3;
      if (v6 == v2) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_100338680(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 tuHandle];

      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v3;
      if (v6 == v2) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100338800(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_100206F1C(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v13 = v2;
        uint64_t v8 = v7;
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
        swift_bridgeObjectRetain();
        sub_100325DCC(v10, v11, v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v2 = v13 - 1;
        if (v13 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1003389C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = _swiftEmptyDictionarySingleton;
  uint64_t v56 = _swiftEmptyDictionarySingleton;
  sub_1002E4D1C(v52, a1);
  uint64_t v4 = v52[0];
  uint64_t v5 = v52[1];
  unint64_t v6 = v55;
  uint64_t v47 = v53;
  int64_t v50 = (unint64_t)(v53 + 64) >> 6;
  int64_t v51 = v54;
  uint64_t result = swift_bridgeObjectRetain();
  for (i = v5; ; uint64_t v5 = i)
  {
    while (1)
    {
      if (v6)
      {
        unint64_t v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v9 = v8 | (v51 << 6);
      }
      else
      {
        int64_t v10 = v51 + 1;
        if (__OFADD__(v51, 1))
        {
          __break(1u);
          goto LABEL_56;
        }
        if (v10 >= v50) {
          goto LABEL_54;
        }
        unint64_t v11 = *(void *)(v5 + 8 * v10);
        int64_t v12 = v51 + 1;
        if (!v11)
        {
          int64_t v12 = v51 + 2;
          if (v51 + 2 >= v50) {
            goto LABEL_54;
          }
          unint64_t v11 = *(void *)(v5 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v51 + 3;
            if (v51 + 3 >= v50) {
              goto LABEL_54;
            }
            unint64_t v11 = *(void *)(v5 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v51 + 4;
              if (v51 + 4 >= v50) {
                goto LABEL_54;
              }
              unint64_t v11 = *(void *)(v5 + 8 * v12);
              if (!v11)
              {
                int64_t v12 = v51 + 5;
                if (v51 + 5 >= v50) {
                  goto LABEL_54;
                }
                unint64_t v11 = *(void *)(v5 + 8 * v12);
                if (!v11)
                {
                  int64_t v13 = v51 + 6;
                  while (v13 < v50)
                  {
                    unint64_t v11 = *(void *)(v5 + 8 * v13++);
                    if (v11)
                    {
                      int64_t v12 = v13 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_54:
                  sub_100206FA0();
                  return (uint64_t)v3;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v6 = (v11 - 1) & v11;
        unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
        int64_t v51 = v12;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      unint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v9);
      if (!(v17 >> 62)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v18 = result;
      if (result) {
        goto LABEL_24;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
    }
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v18) {
      goto LABEL_22;
    }
LABEL_24:
    uint64_t v49 = v3;
    unint64_t v19 = v17 & 0xC000000000000001;
    if ((v17 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_57;
      }
      uint64_t result = (uint64_t)*(id *)(v17 + 32);
    }
    uint64_t v20 = (char *)result;
    if (v18 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v18 < 2) {
        goto LABEL_58;
      }
      double v46 = v2;
      sub_1002DE19C(1, v19 == 0, v17);
      uint64_t v27 = v18 - 1;
      sub_1002DE19C(v27, v19 == 0, v17);
      uint64_t v28 = 0;
      do
      {
        if (v19) {
          uint64_t v29 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v29 = (char *)*(id *)(v17 + 8 * v28 + 40);
        }
        uint64_t v30 = *(void *)&v20[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        uint64_t v31 = *(void *)&v29[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        BOOL v32 = v30 < v31;
        if (v30 >= v31) {
          int64_t v33 = v29;
        }
        else {
          int64_t v33 = v20;
        }
        if (v32) {
          uint64_t v20 = v29;
        }

        ++v28;
      }
      while (v27 != v28);
      swift_bridgeObjectRelease();
      uint64_t v2 = v46;
    }
    uint64_t v3 = v49;
    unint64_t v34 = v49[2];
    if (v49[3] <= v34)
    {
      sub_100280750(v34 + 1, 1, v21, v22, v23, v24, v25, v26, v45, v46, v47, i, (int)v49, SBYTE4(v49));
      uint64_t v3 = v56;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v35 = v3 + 8;
    uint64_t v36 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~v3[(v37 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v39 = __clz(__rbit64((-1 << v37) & ~v3[(v37 >> 6) + 8])) | v37 & 0x7FFFFFFFFFFFFFC0;
LABEL_52:
    *(void *)((char *)v35 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    char v44 = (void *)(v3[6] + 16 * v39);
    *char v44 = v15;
    v44[1] = v16;
    *(void *)(v3[7] + 8 * v39) = v20;
    ++v3[2];
    uint64_t result = swift_bridgeObjectRelease();
  }
  char v40 = 0;
  unint64_t v41 = (unint64_t)(63 - v36) >> 6;
  while (++v38 != v41 || (v40 & 1) == 0)
  {
    BOOL v42 = v38 == v41;
    if (v38 == v41) {
      unint64_t v38 = 0;
    }
    v40 |= v42;
    uint64_t v43 = v35[v38];
    if (v43 != -1)
    {
      unint64_t v39 = __clz(__rbit64(~v43)) + (v38 << 6);
      goto LABEL_52;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_100338DDC(unint64_t a1, void *a2, char a3, uint64_t a4)
{
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_24;
  }
LABEL_3:
  for (uint64_t i = 4; ; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(a1 + 8 * i);
    }
    unint64_t v9 = v8;
    if (__OFADD__(i - 4, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (a2) {
      [a2 addGeneratorDescriptors:v8];
    }
    if ((a3 & 1) == 0) {
      goto LABEL_18;
    }
    sub_1002B4C14(v9, (SEL *)&selRef_generatorID);
    if (!v10) {
      break;
    }
    if (*(void *)(a4 + 16) && (unint64_t v11 = sub_100233664(), (v12 & 1) != 0))
    {
      uint64_t v13 = *(void *)(*(void *)(a4 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      if (v13 < 0) {
        goto LABEL_27;
      }
      if (a2)
      {
LABEL_16:
        sub_1001F6204(0, &qword_10058AA68);
        id v14 = sub_10033B74C(v13);
        [a2 addGenerateDescriptorInfos:v14];

        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = 0;
      if (a2) {
        goto LABEL_16;
      }
    }
LABEL_18:

LABEL_19:
    if (i - 3 == v6)
    {

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_27:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100339000(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100339060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&__src[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  __src[0] = 0;
  id v10 = [v8 dataWithPropertyList:isa format:200 options:0 error:__src];

  id v11 = __src[0];
  if (!v10)
  {
    uint64_t v20 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)v10;
  }
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = Data.count.getter();
  BOOL v16 = __OFADD__(v15, 200);
  size_t v17 = v15 + 200;
  if (v16) {
    __break(1u);
  }
  uint64_t v18 = malloc(v17);
  if (!v18)
  {
    LODWORD(__src[0]) = 12;
    sub_100341F9C((uint64_t)_swiftEmptyArrayStorage);
    sub_100342698(&qword_10058AA28, (void (*)(uint64_t))&type metadata accessor for POSIXError);
    _BridgedStoredNSError.init(_:userInfo:)();
    POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow();
    sub_1001F7498(v12, v14);
    return (uint64_t)v10;
  }
  id v10 = v18;
  bzero((char *)__src + 4, 0xC4uLL);
  LODWORD(__src[0]) = 1;
  sub_100342520(a1, a2, (char *)&__src[17], (uint64_t)&v24);
  unint64_t v19 = Data.count.getter();
  if ((v19 & 0x8000000000000000) == 0 && !HIDWORD(v19))
  {
    HIDWORD(__src[0]) = v19;
    memcpy(v10, __src, 0xC8uLL);
    Data.count.getter();
    Data.copyBytes(to:count:)();
    sub_1001F7498(v12, v14);
    return (uint64_t)v10;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100339408()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithArray:isa];

  return v2;
}

double sub_100339480(uint64_t a1, char a2)
{
  return sub_1003394B0(a2);
}

double sub_1003394B0(char a1)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_1003426E0((uint64_t)v21, (uint64_t)v22, (uint64_t *)&unk_100584CA0);
  if (v22[3])
  {
    if (swift_dynamicCast())
    {
      double v5 = *(double *)&v20;
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_1001F5F88(v6, (uint64_t)qword_100594C10);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        unint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v9 = 134217984;
        v22[0] = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "ConversationLinkSync: randomCheckInInterval: defaults overriding {overrideInterval: %f)}", v9, 0xCu);
        swift_slowDealloc();
      }

      return v5;
    }
  }
  else
  {
    sub_1002392A8((uint64_t)v22, (uint64_t *)&unk_100584CA0);
  }
  if (a1)
  {
    if (a1 == 1)
    {
      double v10 = 1.0;
      double v11 = 4.0;
    }
    else
    {
      double v11 = 40.0;
      double v10 = 20.0;
    }
    sub_100342288(v10, v11);
    double v5 = v12;
  }
  else
  {
    double v5 = 0.01;
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1001F5F88(v13, (uint64_t)qword_100594C10);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218242;
    *(double *)uint64_t v21 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    LOBYTE(v21[0]) = a1;
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)&v21[0] = sub_1002344D8(v17, v18, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "ConversationLinkSync: randomCheckInInterval: calculated {interval: %f, scheduleMode: %s}", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v5;
}

id *sub_10033985C()
{
  os_state_remove_handler();
  sub_100222678((uint64_t)(v0 + 2));
  sub_1002018DC((uint64_t)(v0 + 4));

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_1003398C4()
{
  sub_10033985C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationLinkSyncManager()
{
  return self;
}

uint64_t sub_10033991C()
{
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10048F550;
  *(void *)(v0 + 32) = sub_10037B4E8(v0);
  *(void *)(v0 + 40) = v1;
  sub_1003399A8();

  return swift_bridgeObjectRelease();
}

void sub_1003399A8()
{
}

void sub_1003399D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

void sub_1003399FC()
{
}

void sub_100339A24()
{
  sub_1001FCC38();
  uint64_t v19 = v3;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v20 = sub_10021EA1C();
  sub_1001F6398();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_1002024D0();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v0;
  *(void *)(v17 + 24) = v9;
  *(unsigned char *)(v17 + 32) = v7;
  v21[4] = v5;
  void v21[5] = v17;
  v21[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v21[2] = sub_1002C2C88;
  v21[3] = v19;
  unint64_t v18 = _Block_copy(v21);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_100342698((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v20);
  swift_release();
  sub_1001FCC08();
}

void sub_100339C1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

void sub_100339C48()
{
  sub_1001FCC38();
  char v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v3);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_100342CDC();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  *(unsigned char *)(v5 + 24) = v2;
  v11[4] = sub_10034281C;
  void v11[5] = v5;
  v11[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v11[2] = sub_1002C2C88;
  uint64_t v11[3] = &unk_1005156E0;
  char v6 = _Block_copy(v11);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_100342698((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B7D8();
  sub_100261C0C();
  _Block_release(v6);
  uint64_t v7 = sub_10026B774();
  v8(v7);
  uint64_t v9 = sub_10026B75C();
  v10(v9);
  swift_release();
  sub_1001FCC08();
}

void sub_100339E04(uint64_t a1, unsigned int a2)
{
}

void sub_100339E34()
{
  sub_1001FCC38();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v1);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100342CDC();
  v8[4] = sub_1003427DC;
  uint64_t v9 = v0;
  v8[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v8[2] = sub_1002C2C88;
  v8[3] = &unk_100515690;
  uint64_t v3 = _Block_copy(v8);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_100342698((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B7D8();
  sub_100261C0C();
  _Block_release(v3);
  uint64_t v4 = sub_10026B774();
  v5(v4);
  uint64_t v6 = sub_10026B75C();
  v7(v6);
  swift_release();
  sub_1001FCC08();
}

void sub_100339FD0(uint64_t a1)
{
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001F5F88(v2, (uint64_t)qword_100594C10);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ConversationLinkSync: scheduleCheckInIfNeeded called", v5, 2u);
    swift_slowDealloc();
  }

  sub_10033C7C0((char)[*(id *)(*(void *)(a1 + 72)+ OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) hasActiveAccounts]);
}

void sub_10033A0D4()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v4);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_1002024D0();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v3;
  v12[4] = sub_1003427D4;
  void v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  _OWORD v12[2] = sub_1002C2C88;
  id v12[3] = &unk_100515668;
  uint64_t v7 = _Block_copy(v12);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_100342698((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  sub_10026B804();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v7);
  uint64_t v8 = sub_10026B774();
  v9(v8);
  uint64_t v10 = sub_10026B75C();
  v11(v10);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_10033A2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100247BCC();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    sub_1002344D8(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_1002344D8(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ConversationLinkSync: scheduleRecover called {deviceDestinations: %s, pseudonyms: %s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_10033F2C0(a2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10033A53C@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v114 = (void *)(v3 + 32);
  uint64_t v4 = (void **)sub_100204074((void *)(v3 + 32), *(void *)(v3 + 56));
  unint64_t v5 = (unint64_t)sub_100205140(*v4);
  unint64_t v6 = v5;
  unint64_t v116 = v5 >> 62;
  if (v5 >> 62) {
    goto LABEL_97;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v124 = v6;
    if (!v7) {
      break;
    }
    unint64_t v119 = v6 & 0xC000000000000001;
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    uint64_t v9 = 4;
    uint64_t v117 = v7;
    while (1)
    {
      unint64_t v10 = v119
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v6 + 8 * v9);
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      uint64_t v122 = v9 - 3;
      uint64_t v11 = *(void *)&v10[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
      uint64_t v12 = *(void *)&v10[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      unint64_t v13 = v10;
      uint64_t v14 = *(void *)&v10[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v125 = v8;
      sub_100233664();
      sub_100342D28();
      Swift::Int v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        goto LABEL_90;
      }
      unint64_t v6 = v16;
      char v21 = v17;
      sub_1001F081C(&qword_10058A9F8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v20))
      {
        unint64_t v22 = sub_100233664();
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_110;
        }
        unint64_t v6 = v22;
      }
      uint64_t v8 = v125;
      if (v21)
      {
        *(void *)(v125[7] + 8 * v6) = v14;
      }
      else
      {
        sub_100342C00((uint64_t)&v125[v6 >> 6]);
        uint64_t v24 = (void *)(v8[6] + 16 * v6);
        *uint64_t v24 = v11;
        v24[1] = v12;
        *(void *)(v8[7] + 8 * v6) = v14;
        uint64_t v25 = v8[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_93;
        }
        _OWORD v8[2] = v27;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v9;
      unint64_t v6 = v124;
      if (v122 == v117) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    sub_100342ED8();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v28 = (void **)[a2 generateDescriptorInfos];
  unint64_t v29 = a1 >> 62;
  if (v28)
  {
    uint64_t v30 = v28;
    id v31 = [v28 count];
    if (v29)
    {
LABEL_101:
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v31 == (id)v32)
    {
      int64_t v33 = (void **)sub_100204074(v114, *(void *)(v115 + 56));
      uint64_t v34 = sub_100205F08(*v33);

      goto LABEL_27;
    }
  }
  uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
LABEL_27:
  uint64_t v120 = v34;
  uint64_t v128 = &_swiftEmptySetSingleton;
  if (v116)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_29;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    unint64_t v37 = _swiftEmptyArrayStorage;
    goto LABEL_41;
  }
  uint64_t v35 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v35) {
    goto LABEL_40;
  }
LABEL_29:
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_1002E3EC4();
  if (v35 < 0)
  {
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v36 = 0;
  unint64_t v37 = v125;
  unint64_t v38 = v6 & 0xC000000000000001;
  do
  {
    if (v35 == v36) {
      goto LABEL_91;
    }
    if (v38) {
      unint64_t v39 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      unint64_t v39 = (char *)*(id *)(v6 + 8 * v36 + 32);
    }
    char v40 = v39;
    uint64_t v42 = *(void *)&v39[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
    uint64_t v41 = *(void *)&v39[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
    swift_bridgeObjectRetain();

    uint64_t v125 = v37;
    unint64_t v43 = v37[2];
    if (v43 >= v37[3] >> 1)
    {
      sub_1002E3EC4();
      unint64_t v37 = v125;
    }
    ++v36;
    v37[2] = v43 + 1;
    char v44 = &v37[2 * v43];
    v44[4] = v42;
    v44[5] = v41;
    unint64_t v6 = v124;
  }
  while (v35 != v36);
  swift_bridgeObjectRelease();
LABEL_41:
  uint64_t v45 = sub_10024DF84((uint64_t)v37);
  uint64_t v126 = &_swiftEmptySetSingleton;
  uint64_t v127 = v45;
  uint64_t v46 = v120;
  if (v29)
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_43;
    }
  }
  else
  {
    unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_43:
      uint64_t v47 = 0;
      unint64_t v48 = a1 & 0xC000000000000001;
      uint64_t v49 = &selRef_generatorDescriptor;
      unsigned __int8 v114 = &_swiftEmptyDictionarySingleton;
      unint64_t v115 = a1 & 0xC000000000000001;
      uint64_t v123 = &_swiftEmptyDictionarySingleton;
      unint64_t v116 = v6;
      while (1)
      {
        if (v48) {
          id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v50 = *(id *)(a1 + 8 * v47 + 32);
        }
        int64_t v51 = v50;
        if (__OFADD__(v47, 1)) {
          goto LABEL_92;
        }
        unint64_t v124 = v47 + 1;
        sub_100342C64();
        if (!v52) {
          goto LABEL_103;
        }
        if (!v8[2]) {
          break;
        }
        unint64_t v53 = sub_100233664();
        if ((v54 & 1) == 0) {
          break;
        }
        uint64_t v55 = *(void *)(v8[7] + 8 * v53);
        swift_bridgeObjectRelease();
        if (v55 >= [v51 v49[4]])
        {
          if (v55 > [v51 v49[4]])
          {
            uint64_t v72 = sub_100342C64();
            if (!v73) {
              goto LABEL_108;
            }
            uint64_t v74 = v72;
            unint64_t v6 = v73;
            unsigned int v118 = [v51 v49[4]];
            char v75 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v125 = v114;
            uint64_t v76 = v74;
            sub_100233664();
            sub_100342D28();
            id v31 = (id)(v79 + v80);
            if (__OFADD__(v79, v80)) {
              goto LABEL_95;
            }
            unint64_t v81 = v77;
            unint64_t v29 = v78;
            sub_1001F081C(&qword_10058A9F8);
            uint64_t v30 = &v125;
            Swift::Bool v82 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v75, (Swift::Int)v31);
            uint64_t v49 = &selRef_generatorDescriptor;
            if (v82)
            {
              uint64_t v30 = (void **)v125;
              unint64_t v83 = sub_100233664();
              if ((v29 & 1) != (v84 & 1)) {
                goto LABEL_110;
              }
              unint64_t v81 = v83;
            }
            id v85 = v125;
            unsigned __int8 v114 = v125;
            if (v29)
            {
              *(void *)(v125[7] + 8 * v81) = v118;
              uint64_t v46 = v120;
            }
            else
            {
              v125[(v81 >> 6) + 8] |= 1 << v81;
              uint64_t v90 = (uint64_t *)(v85[6] + 16 * v81);
              uint64_t *v90 = v76;
              v90[1] = v6;
              *(void *)(v85[7] + 8 * v81) = v118;
              uint64_t v91 = v85[2];
              BOOL v26 = __OFADD__(v91, 1);
              uint64_t v92 = v91 + 1;
              uint64_t v46 = v120;
              if (v26)
              {
                __break(1u);
                goto LABEL_101;
              }
              v85[2] = v92;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v48 = a1 & 0xC000000000000001;
            unint64_t v6 = v116;
          }
        }
        else
        {
          uint64_t v56 = sub_100342C64();
          if (!v57) {
            goto LABEL_107;
          }
          uint64_t v58 = v56;
          unint64_t v6 = v57;
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v125 = v123;
          sub_100233664();
          sub_100342D28();
          Swift::Int v64 = v62 + v63;
          if (__OFADD__(v62, v63)) {
            goto LABEL_94;
          }
          unint64_t v65 = v60;
          char v66 = v61;
          sub_1001F081C(&qword_10058A9F8);
          Swift::Bool v67 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v59, v64);
          uint64_t v49 = &selRef_generatorDescriptor;
          if (v67)
          {
            unint64_t v68 = sub_100233664();
            if ((v66 & 1) != (v69 & 1)) {
              goto LABEL_110;
            }
            unint64_t v65 = v68;
          }
          uint64_t v123 = v125;
          if (v66)
          {
            *(void *)(v125[7] + 8 * v65) = v55;
          }
          else
          {
            sub_100342C00((uint64_t)&v125[v65 >> 6]);
            uint64_t v87 = (uint64_t *)(v86[6] + 16 * v65);
            uint64_t *v87 = v58;
            v87[1] = v6;
            *(void *)(v86[7] + 8 * v65) = v55;
            uint64_t v88 = v86[2];
            BOOL v26 = __OFADD__(v88, 1);
            uint64_t v89 = v88 + 1;
            if (v26) {
              goto LABEL_96;
            }
            v86[2] = v89;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v46 = v120;
          unint64_t v48 = a1 & 0xC000000000000001;
          unint64_t v6 = v116;
        }
        sub_100342C64();
        if (!v93) {
          goto LABEL_106;
        }
        if (!*(void *)(v46 + 16)) {
          goto LABEL_83;
        }
        unint64_t v94 = sub_100233664();
        if ((v95 & 1) == 0) {
          goto LABEL_83;
        }
        unint64_t v96 = *(void *)(*(void *)(v46 + 56) + 8 * v94);
        swift_bridgeObjectRelease();
        id v97 = [a2 generateDescriptorInfosAtIndex:v47];
        if (v97)
        {
          id v98 = v97;
          if ([v98 hasGenerateDescriptorVersionSum])
          {
            id v99 = [v98 generateDescriptorVersionSum];
            if ((v96 & 0x8000000000000000) != 0 || (id)v96 != v99)
            {
              uint64_t v102 = sub_100342C64();
              if (!v103) {
                goto LABEL_109;
              }
              sub_1002DFB58((uint64_t *)&v125, v102, v103);

              goto LABEL_83;
            }
          }
        }
LABEL_84:
        uint64_t v100 = sub_100342C64();
        if (!v101) {
          goto LABEL_104;
        }
        sub_100377734(v100, v101);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        ++v47;
        if (v124 == v6) {
          goto LABEL_99;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v70 = sub_100342C64();
      if (!v71) {
        goto LABEL_105;
      }
      sub_1002DFB58((uint64_t *)&v125, v70, v71);
LABEL_83:
      swift_bridgeObjectRelease();
      goto LABEL_84;
    }
  }
LABEL_99:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v104 = swift_bridgeObjectRetain();
  uint64_t v105 = sub_100338800(v104);
  swift_bridgeObjectRelease();
  uint64_t v106 = swift_bridgeObjectRetain();
  uint64_t v107 = sub_100338800(v106);
  swift_bridgeObjectRelease();
  sub_100342BCC();
  uint64_t v108 = v127;
  uint64_t v109 = (uint64_t)v128;
  uint64_t v110 = (uint64_t)v126;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v108;
  a3[1] = v109;
  a3[2] = v110;
  a3[3] = v105;
  a3[4] = v107;
  return result;
}

void sub_10033AEFC()
{
  uint64_t v1 = (void **)sub_100204074((void *)(v0 + 32), *(void *)(v0 + 56));
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  *(void *)(inited + 32) = sub_10037B4E8();
  *(void *)(inited + 40) = v3;
  unint64_t v4 = (unint64_t)sub_1002063DC(inited, *v1);
  swift_setDeallocating();
  sub_100252A30();
  if (!(v4 >> 62))
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  sub_100342F54();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1002DE19C(0, (v4 & 0xC000000000000001) == 0, v4);
  if ((v4 & 0xC000000000000001) != 0) {
    unint64_t v5 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    unint64_t v5 = (char *)*(id *)(v4 + 32);
  }
  unint64_t v6 = v5;
  uint64_t v7 = swift_bridgeObjectRelease();
  uint64_t v8 = sub_10037B930(v7);
  uint64_t v9 = *(void *)&v6[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
  if (v8 >= v9)
  {

    return;
  }
  if (__OFADD__(v9, 10))
  {
    __break(1u);
  }
  else
  {
    sub_10037B9C0(v9 + 10);
    if (qword_100583A08 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  uint64_t v10 = type metadata accessor for Logger();
  sub_1002B84A0(v10, (uint64_t)qword_100594C10);
  uint64_t v11 = v6;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (sub_1002CA9A8(v13))
  {
    uint64_t v14 = sub_100235B88();
    *(_DWORD *)uint64_t v14 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)inited, "ConversationLinkSync: scheduleCheckIn validation check failed, fixing local version {localVersion: %ld, localLatest.version: %ld}", (uint8_t *)v14, 0x16u);
    sub_1001F63CC();
  }
  else
  {
  }
}

void sub_10033B154(uint64_t a1, char a2, unsigned int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100247BCC();
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain();
  sub_100342EF0();
  swift_bridgeObjectRetain();
  sub_100342EF0();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = sub_100202470();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    unsigned int v21 = a3;
    uint64_t v13 = String.init<A>(reflecting:)();
    sub_1002344D8(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v15 = Set.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_1002344D8(v15, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100342D8C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    sub_100342EF0();
    uint64_t v18 = String.init<A>(reflecting:)();
    sub_1002344D8(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v21;
    swift_bridgeObjectRelease();
    sub_100342748(a1);
    sub_100342748(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "ConversationLinkSync: scheduleCheckIn called {scheduleMode: %s, deviceDestinations: %s, type: %s}", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
    sub_100342D8C();
    sub_100342748(a1);
    sub_100342748(a1);
  }

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v4;
  *(void *)(v20 + 24) = a1;
  *(unsigned char *)(v20 + 32) = a2;
  sub_100342EF0();
  swift_retain();
  sub_10020B5C8(v8, 2, a3, (uint64_t)sub_1003427A0, v20);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10033AEFC();
}

void sub_10033B474(uint64_t a1, char a2)
{
  id v5 = [objc_allocWithZone((Class)CSDMessagingLinkSyncCheckInMessage) init];
  if (a1 == 1)
  {
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
    if (v5) {
      [v5 setShouldCheckAllGenerators:1];
    }
  }
  else
  {
    uint64_t v8 = (void **)sub_100204074((void *)(v2 + 32), *(void *)(v2 + 56));
    if (a1) {
      uint64_t v9 = sub_1002063DC(a1, *v8);
    }
    else {
      uint64_t v9 = sub_100205140(*v8);
    }
    unint64_t v6 = (unint64_t)v9;
    if (v5) {
      [v5 setShouldCheckAllGenerators:a1 == 0];
    }
    if (a2)
    {
      os_log_type_t v11 = (void **)sub_100204074((void *)(v2 + 32), *(void *)(v2 + 56));
      uint64_t v10 = sub_100205F08(*v11);
    }
    else
    {
      uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v7 = v10;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (!(v6 >> 62))
  {
    uint64_t v13 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_15;
    }
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    sub_100254544();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_27;
  }
LABEL_15:
  uint64_t v14 = self;
  if (v13 >= 1)
  {
    uint64_t v15 = (void *)v14;
    uint64_t v21 = v12;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v6 + 8 * i + 32);
      }
      uint64_t v18 = v17;
      id v19 = objc_msgSend(v15, "generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:", v17, v21);

      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v20 = v5;
    swift_bridgeObjectRetain();
    sub_100338DDC((unint64_t)_swiftEmptyArrayStorage, v5, v21 != 0, v7);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
}

id sub_10033B74C(uint64_t a1)
{
  id result = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if (result)
  {
    id v3 = result;
    [result setGenerateDescriptorVersionSum:a1];
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10033B7A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8 = [objc_allocWithZone((Class)CSDMessagingLinkSyncMessage) init];
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 setType:2];
    id v10 = v9;
    sub_10033B474(a3, a4);
    uint64_t v12 = v11;
    [v10 setCheckInMessage:v11];

    uint64_t v13 = sub_100342308(v10);
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0xF000000000000000;
  }
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10048F550;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1002DF568(inited);
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1002B84A0(v18, (uint64_t)qword_100594C10);
  id v19 = v9;
  sub_100342ED8();
  id v20 = v19;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  uint64_t v40 = v13;
  unint64_t v41 = v15;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = sub_100235B88();
    uint64_t v24 = (void *)sub_100235BB8();
    uint64_t v42 = sub_100202470();
    *(_DWORD *)uint64_t v23 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v25 = Set.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    sub_1002344D8(v25, v27, &v42);
    sub_100342B8C();
    sub_100342BB4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2112;
    if (v9) {
      id v28 = v20;
    }
    sub_100342F94();
    *uint64_t v24 = v9;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "ConversationLinkSync: Performing check in {dest: %s, message: %@}", (uint8_t *)v23, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    uint64_t v13 = v40;
    unint64_t v15 = v41;
  }
  else
  {

    sub_100342BB4();
  }
  if (v15 >> 60 == 15) {
    __break(1u);
  }
  sub_1001F7440(v13, v15);
  sub_100247DB4(v13, v15, v17);
  sub_1001FCB18(v13, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = (void *)Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_100342CB0(v30))
  {
    uint64_t v31 = sub_100235B88();
    uint64_t v42 = sub_10026B9C0();
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v32 = Set.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    sub_1002344D8(v32, v34, &v42);
    sub_100342B8C();
    sub_100342BB4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_100342FB4();
    sub_1002344D8(v35, v36, v37);
    sub_100342FF0();
    swift_bridgeObjectRelease_n();
    sub_100342E24((void *)&_mh_execute_header, v38, v39, "ConversationLinkSync: Sent check in {to: %s, idsIdentifier: %s}");
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    sub_1001FCB18(v40, v41);
  }
  else
  {

    sub_1001FCB18(v13, v15);
    sub_100342FC0();
    sub_100342BB4();
  }
}

void sub_10033BDFC(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = [a1 generatorDescriptors];
  if (!v5)
  {
    sub_1001F6204(0, &qword_10058AA40);
    id v5 = (id)NSArray.init(arrayLiteral:)();
  }
  uint64_t v14 = 0;
  sub_1001F6204(0, &qword_10058AA60);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1001F5F88(v6, (uint64_t)qword_100594C10);
  sub_100342E0C();
  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (sub_1002CA9A8(v8))
  {
    unint64_t v9 = a3;
    id v10 = (_DWORD *)sub_100235B18();
    uint64_t v14 = sub_100202470();
    _DWORD *v10 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1002344D8(a2, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100298880((void *)&_mh_execute_header, v11, v12, "ConversationLinkSync: Processing check in, unable to convert descriptors -- dropping {from: %s}");
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

BOOL sub_10033C6E0()
{
  if (*(void *)(*v0 + 16) || *(void *)(v0[1] + 16)) {
    return 0;
  }
  unint64_t v1 = v0[3];
  unint64_t v7 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    sub_1002B73AC((uint64_t)&v7);
    if (v4) {
      return 0;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v2 = v0[4];
  unint64_t v6 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    sub_1002B73AC((uint64_t)&v6);
    if (v5) {
      return 0;
    }
  }
  else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  return *(void *)(v0[2] + 16) == 0;
}

void sub_10033C7C0(char a1)
{
  unint64_t v2 = self;
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v20, 0, sizeof(v20));
  }
  sub_1003426E0((uint64_t)v20, (uint64_t)v21, (uint64_t *)&unk_100584CA0);
  if (v22)
  {
    if (swift_dynamicCast())
    {
      int v6 = v19;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1002392A8((uint64_t)v21, (uint64_t *)&unk_100584CA0);
  }
  int v6 = 0;
LABEL_9:
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1001F5F88(v7, (uint64_t)qword_100594C10);
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (sub_1002497A8(v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109376;
    v21[0] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 1024;
    v21[0] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v4, "ConversationLinkSync: checkAccountStateForCheckIn called {activeAccounts: %{BOOL}d, lastAccountsChangedState: %{BOOL}d}", (uint8_t *)v10, 0xEu);
    sub_1001F63CC();
  }

  if (v6 != (a1 & 1))
  {
    if ((a1 & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v11 = *(void *)(sub_100247BCC() + 16);
    swift_bridgeObjectRelease();
    if (v11) {
      sub_10033B154(0, 0, 2u);
    }
    uint64_t v12 = *(void *)(sub_100247BCC() + 16);
    swift_bridgeObjectRelease();
    if (v12)
    {
      swift_retain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 67109376;
        v21[0] = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 8) = 1024;
        uint64_t v16 = *(void *)(sub_100247BCC() + 16);
        swift_release();
        swift_bridgeObjectRelease();
        v21[0] = v16 == 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "ConversationLinkSync: missing devices, waiting until devices appear {activeAccounts: %{BOOL}d, interactor.deviceDestinations.isEmpty: %{BOOL}d}", (uint8_t *)v15, 0xEu);
        sub_1001F63CC();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
LABEL_20:
      id v17 = [v2 standardUserDefaults];
      NSString v18 = String._bridgeToObjectiveC()();
      [v17 setBool:a1 & 1 forKey:v18];
    }
  }
}

void sub_10033CBA0()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  v2[4] = sub_100342688;
  v2[5] = v0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_100339000;
  v2[3] = &unk_1005155C8;
  unint64_t v1 = _Block_copy(v2);
  swift_release();
  xpc_activity_register("ConversationLinkCheckInActivity", XPC_ACTIVITY_CHECK_IN, v1);
  _Block_release(v1);
}

void sub_10033CC84(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_1001F5F88(v21, (uint64_t)qword_100594C10);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = a2;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "ConversationLinkSync: check in activity fired", v24, 2u);
      a2 = v29;
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v26 = *(id *)(Strong + 120);
      swift_release();
      aBlock[4] = (uint64_t)sub_100342690;
      aBlock[5] = a2;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1002C2C88;
      void aBlock[3] = (uint64_t)&unk_1005155F0;
      unint64_t v27 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      os_log_type_t v30 = _swiftEmptyArrayStorage;
      sub_100342698((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1001F081C((uint64_t *)&unk_100584B00);
      sub_1001F6030();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_release();
    }
  }
  else if (!state)
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_int64(empty, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_7_DAYS);
    xpc_object_t v14 = xpc_activity_copy_criteria(a1);
    if (v14)
    {
      if (!xpc_equal(v14, empty)) {
        xpc_activity_set_criteria(a1, empty);
      }
      swift_unknownObjectRelease();
    }
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1001F5F88(v15, (uint64_t)qword_100594C10);
    swift_unknownObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      NSString v18 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)NSString v18 = 136315138;
      uint64_t v32 = (uint64_t)empty;
      swift_unknownObjectRetain();
      sub_1001F081C(&qword_100588250);
      uint64_t v19 = String.init<A>(reflecting:)();
      uint64_t v32 = sub_1002344D8(v19, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ConversationLinkSync: check in activity scheduled {criteria: %s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t sub_10033D240()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10033B154(0, 1, 2u);
    return swift_release();
  }
  return result;
}

uint64_t sub_10033D2A4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = a1[4];
  uint64_t v78 = v9;
  uint64_t v76 = v9;
  uint64_t v71 = v5;
  if (a4)
  {
    uint64_t v77 = *a1;
    uint64_t v10 = v77;
    uint64_t v11 = *(void *)(v77 + 16);
    if (v11)
    {
      sub_1002B7380((uint64_t)&v78);
      sub_1002B7380((uint64_t)&v77);
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v12 = sub_100261A1C(v10);
      int v14 = v13;
      do
      {
        if (v12 < 0 || v12 >= 1 << *(unsigned char *)(v10 + 32))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (((*(void *)(v10 + 56 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          goto LABEL_50;
        }
        if (*(_DWORD *)(v10 + 36) != v14) {
          goto LABEL_51;
        }
        uint64_t v15 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v12);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
        swift_bridgeObjectRetain();
        sub_100325DCC(v16, v17, 0);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v18 = sub_100261934(v12);
        uint64_t v12 = v18;
        int v14 = v19;
        --v11;
      }
      while (v11);
      sub_10023561C(v18, v19, v20 & 1);
      sub_1002B73AC((uint64_t)&v77);
      uint64_t v6 = a3;
      uint64_t v7 = a2;
      uint64_t v8 = a1;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_1002D1EE8();
    uint64_t v9 = v76;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = v8[2];
  if (!*(void *)(v21 + 16))
  {
LABEL_47:
    Swift::Int v64 = (void **)sub_100204074((void *)(v5 + 32), *(void *)(v5 + 56));
    unint64_t v65 = sub_100206028(v9, *v64);
    swift_bridgeObjectRelease();
    sub_1001F081C((uint64_t *)&unk_100585280);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10048F550;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v6;
    swift_bridgeObjectRetain();
    uint64_t v67 = sub_1002DF568(inited);
    sub_10033D890((unint64_t)v65, v67);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v22 = swift_bridgeObjectRetain();
  os_log_type_t v23 = sub_100205520(v22);
  uint64_t v24 = sub_1003389C8((uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v21 + 56;
  uint64_t v26 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  uint64_t v28 = v27 & *(void *)(v21 + 56);
  int64_t v74 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (v28)
  {
    sub_100342E64();
    unint64_t v31 = v30 | (v29 << 6);
LABEL_33:
    uint64_t v35 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    id v38 = objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
    swift_bridgeObjectRetain_n();
    id v39 = sub_100325DCC(v36, v37, 0);
    if (v39)
    {
      id v43 = v39;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v75 = (void *)v24;
      sub_100233664();
      char v72 = v45;
      sub_100342D28();
      Swift::Int v49 = v47 + v48;
      if (__OFADD__(v47, v48)) {
        goto LABEL_53;
      }
      unint64_t v50 = v46;
      sub_1001F081C(&qword_10058AA58);
      Swift::Bool v51 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      uint64_t v25 = v21 + 56;
      if (v51)
      {
        unint64_t v52 = sub_100233664();
        if ((v72 & 1) != (v53 & 1)) {
          goto LABEL_55;
        }
        unint64_t v50 = v52;
      }
      uint64_t v24 = (uint64_t)v75;
      if (v72)
      {
        uint64_t v54 = v75[7];

        *(void *)(v54 + 8 * v50) = v43;
      }
      else
      {
        sub_100342C00((uint64_t)&v75[v50 >> 6]);
        char v59 = (uint64_t *)(v75[6] + 16 * v50);
        uint64_t *v59 = v36;
        v59[1] = v37;
        *(void *)(v75[7] + 8 * v50) = v43;
        uint64_t v60 = v75[2];
        BOOL v61 = __OFADD__(v60, 1);
        uint64_t v62 = v60 + 1;
        if (v61) {
          goto LABEL_54;
        }
        v75[2] = v62;
        swift_bridgeObjectRetain();
      }
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v40 = sub_100233664();
      char v42 = v41;
      swift_bridgeObjectRelease();
      if (v42)
      {
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v56 = *(void *)(v24 + 24);
        sub_1001F081C(&qword_10058AA58);
        Swift::Bool v57 = v55;
        uint64_t v25 = v21 + 56;
        _NativeDictionary.ensureUnique(isUnique:capacity:)(v57, v56);
        swift_bridgeObjectRelease();
        uint64_t v58 = *(void **)(*(void *)(v24 + 56) + 8 * v40);
        _NativeDictionary._delete(at:)();

        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
    }
  }
  int64_t v32 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v32 >= v74) {
    goto LABEL_46;
  }
  unint64_t v33 = *(void *)(v25 + 8 * v32);
  ++v29;
  if (v33) {
    goto LABEL_32;
  }
  int64_t v29 = v32 + 1;
  if (v32 + 1 >= v74) {
    goto LABEL_46;
  }
  unint64_t v33 = *(void *)(v25 + 8 * v29);
  if (v33) {
    goto LABEL_32;
  }
  int64_t v29 = v32 + 2;
  if (v32 + 2 >= v74) {
    goto LABEL_46;
  }
  unint64_t v33 = *(void *)(v25 + 8 * v29);
  if (v33)
  {
LABEL_32:
    uint64_t v28 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v29 << 6);
    goto LABEL_33;
  }
  int64_t v34 = v32 + 3;
  if (v34 >= v74)
  {
LABEL_46:
    swift_release();
    swift_bridgeObjectRetain();
    sub_100252CA0();
    uint64_t v9 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = a3;
    uint64_t v5 = v71;
    uint64_t v7 = a2;
    goto LABEL_47;
  }
  unint64_t v33 = *(void *)(v25 + 8 * v34);
  if (v33)
  {
    int64_t v29 = v34;
    goto LABEL_32;
  }
  while (1)
  {
    int64_t v29 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v29 >= v74) {
      goto LABEL_46;
    }
    unint64_t v33 = *(void *)(v25 + 8 * v29);
    ++v34;
    if (v33) {
      goto LABEL_32;
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10033D890(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 >= 1)
  {
    id v6 = [objc_allocWithZone((Class)CSDMessagingLinkSyncUpdateMessage) init];
    uint64_t v46 = a2;
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v7) {
        goto LABEL_16;
      }
    }
    sub_1001F6204(0, (unint64_t *)&unk_10058AA48);
    if (v7 < 1)
    {
      __break(1u);
      goto LABEL_31;
    }
    for (uint64_t i = 0; i != v7; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * i + 32);
      }
      id v10 = v9;
      sub_10033E004();
      uint64_t v12 = v11;
      if (v6)
      {
        id v13 = v6;
        [v13 addLink:v12];
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
    id v14 = [objc_allocWithZone((Class)CSDMessagingLinkSyncMessage) init];
    id v43 = v14;
    if (v14)
    {
      uint64_t v15 = v14;
      [v14 setType:1];
      [v15 setUpdateMessage:v6];
      uint64_t v16 = sub_100342308(v15);
      unint64_t v18 = v17;
    }
    else
    {
      [0 setUpdateMessage:v6];
      uint64_t v16 = 0;
      unint64_t v18 = 0xF000000000000000;
    }
    uint64_t v19 = v46;
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1001F5F88(v20, (uint64_t)qword_100594C10);
    swift_bridgeObjectRetain_n();
    sub_100342E0C();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    uint64_t v44 = v16;
    unint64_t v45 = v18;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = sub_100235B88();
      v47[0] = sub_10026B9C0();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v24 = Set.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      sub_1002344D8(v24, v26, v47);
      sub_100342C10();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100342BCC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      swift_bridgeObjectRetain();
      uint64_t v27 = Array.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      sub_1002344D8(v27, v29, v47);
      unint64_t v18 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100342FC0();
      uint64_t v19 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ConversationLinkSync: Sending link update {to: %s, linksToSend: %s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      sub_100342FC0();
      sub_100342BCC();
    }
    if (v18 >> 60 != 15)
    {
      uint64_t v30 = sub_100342E44();
      sub_1001F7440(v30, v31);
      uint64_t v32 = sub_100342E44();
      id v34 = sub_100247DB4(v32, v33, v19);
      unint64_t v36 = v35;
      sub_1001FCB18(v16, v18);
      sub_100342E0C();
      swift_bridgeObjectRetain();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = sub_100235B88();
        v47[0] = sub_10026B9C0();
        *(_DWORD *)uint64_t v39 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v40 = Set.description.getter();
        unint64_t v42 = v41;
        swift_bridgeObjectRelease();
        sub_1002344D8(v40, v42, v47);
        sub_100342C10();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100342BCC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_1002344D8((uint64_t)v34, v36, v47);
        sub_100342F74();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "ConversationLinkSync: Sent link update {to: %s, idsIdentifier: %s}", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        sub_1001FCB18(v44, v45);
      }
      else
      {

        sub_1001FCB18(v16, v18);
        sub_100342FC0();
        sub_100342BCC();
      }
      return;
    }
LABEL_31:
    __break(1u);
  }
}

void sub_10033E004()
{
  sub_1001FCC38();
  unint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v91 = v3;
  int64_t v92 = v2;
  __chkstk_darwin(v2);
  uint64_t v89 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v5 - 8);
  sub_10024672C();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v93 = v13;
  __chkstk_darwin(v14);
  sub_10024672C();
  uint64_t v88 = v15 - v16;
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v88 - v19;
  id v21 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if (!v21)
  {
LABEL_51:
    __break(1u);
    return;
  }
  id v22 = v21;
  id v23 = [v1 pseudonym];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = sub_100342FB4();
  sub_100311FF8(v24, v25, v22, v26);
  id v27 = [v1 publicKey];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = sub_100342FB4();
  unint64_t v94 = v22;
  sub_100342374(v28, v29, v22);
  id v90 = v1;
  sub_10034246C(v1, (SEL *)&selRef_privateKey);
  if (v30 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v32 = sub_100342FB4();
    sub_1001FCB18(v32, v33);
  }
  [v94 setPrivateKey:isa];

  id v34 = v90;
  id v35 = [v90 creationDate];
  uint64_t v36 = v93;
  if (v35)
  {
    uint64_t v37 = v35;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v38 = *(void (**)(void))(v36 + 32);
    sub_100342CCC();
    v38();
    sub_100342E78((uint64_t)v11, 0);
    sub_100342F20((uint64_t)v11);
    if (!v39)
    {
      sub_100342CCC();
      v38();
      Date.timeIntervalSince1970.getter();
      objc_msgSend(v94, "setCreationDateEpochTime:");
      (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v12);
      goto LABEL_10;
    }
  }
  else
  {
    sub_100342E78((uint64_t)v11, 1);
  }
  sub_1002392A8((uint64_t)v11, &qword_100584B40);
LABEL_10:
  id v40 = [v34 expirationDate];
  if (!v40)
  {
    sub_100342E78(v8, 1);
    unint64_t v45 = v91;
    int64_t v44 = v92;
    uint64_t v46 = v89;
    goto LABEL_14;
  }
  unint64_t v41 = v40;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v42 = *(void (**)(void))(v36 + 32);
  sub_100342CCC();
  v42();
  sub_100342E78(v8, 0);
  sub_100342F20(v8);
  uint64_t v43 = v36;
  unint64_t v45 = v91;
  int64_t v44 = v92;
  uint64_t v46 = v89;
  if (v39)
  {
LABEL_14:
    sub_1002392A8(v8, &qword_100584B40);
    goto LABEL_15;
  }
  uint64_t v47 = v88;
  sub_100342CCC();
  v42();
  Date.timeIntervalSince1970.getter();
  objc_msgSend(v94, "setPseudonymExpirationDateEpochTime:");
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v12);
LABEL_15:
  id v48 = [v34 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  v45[1](v46, v44);
  uint64_t v49 = sub_100235AE0();
  unint64_t v50 = v94;
  sub_100311FF8(v49, v51, v94, v52);
  objc_msgSend(v50, "setIsActivated:", objc_msgSend(v34, "isActivated"));
  id v53 = [v34 originator];
  id v54 = [v53 identifier];

  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;

  id v58 = [v34 originator];
  id v59 = [v58 revision];

  id v60 = objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
  id v61 = sub_100325DCC(v55, v57, (uint64_t)v59);
  id v62 = [self generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:v61];

  [v50 setGeneratorDescriptor:v62];
  id v63 = [v34 originator];
  id v64 = [v63 handle];

  unint64_t v65 = self;
  id v66 = [v65 handleWithTUHandle:v64];

  [v50 setOriginatorHandle:v66];
  uint64_t v67 = sub_1003423F4(v34);
  if (v67)
  {
    uint64_t v68 = v67;
    if ((v67 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      sub_1001F6204(0, (unint64_t *)&unk_100586E00);
      sub_100247240();
      sub_100235AE0();
      Set.Iterator.init(_cocoa:)();
      uint64_t v68 = v97;
      uint64_t v93 = v98;
      uint64_t v69 = v99;
      int64_t v70 = v100;
      unint64_t v71 = v101;
    }
    else
    {
      int64_t v70 = 0;
      uint64_t v72 = -1 << *(unsigned char *)(v67 + 32);
      uint64_t v73 = *(void *)(v67 + 56);
      uint64_t v93 = v67 + 56;
      uint64_t v69 = ~v72;
      uint64_t v74 = -v72;
      if (v74 < 64) {
        uint64_t v75 = ~(-1 << v74);
      }
      else {
        uint64_t v75 = -1;
      }
      unint64_t v71 = v75 & v73;
    }
    uint64_t v89 = (char *)v69;
    int64_t v92 = (unint64_t)(v69 + 64) >> 6;
    uint64_t v91 = (void (**)(char *, int64_t))((char *)&type metadata for Swift.AnyObject + 8);
    if (v68 < 0) {
      goto LABEL_25;
    }
    while (1)
    {
      if (v71)
      {
        uint64_t v76 = (v71 - 1) & v71;
        unint64_t v77 = __clz(__rbit64(v71)) | (v70 << 6);
        int64_t v78 = v70;
      }
      else
      {
        int64_t v81 = v70 + 1;
        if (__OFADD__(v70, 1))
        {
          __break(1u);
          goto LABEL_51;
        }
        if (v81 >= v92) {
          goto LABEL_45;
        }
        unint64_t v82 = *(void *)(v93 + 8 * v81);
        int64_t v78 = v70 + 1;
        if (!v82)
        {
          int64_t v78 = v70 + 2;
          if (v70 + 2 >= v92) {
            goto LABEL_45;
          }
          unint64_t v82 = *(void *)(v93 + 8 * v78);
          if (!v82)
          {
            int64_t v78 = v70 + 3;
            if (v70 + 3 >= v92) {
              goto LABEL_45;
            }
            unint64_t v82 = *(void *)(v93 + 8 * v78);
            if (!v82)
            {
              int64_t v78 = v70 + 4;
              if (v70 + 4 >= v92) {
                goto LABEL_45;
              }
              unint64_t v82 = *(void *)(v93 + 8 * v78);
              if (!v82)
              {
                int64_t v83 = v70 + 5;
                while (v83 < v92)
                {
                  unint64_t v82 = *(void *)(v93 + 8 * v83++);
                  if (v82)
                  {
                    int64_t v78 = v83 - 1;
                    goto LABEL_41;
                  }
                }
LABEL_45:
                sub_100206FA0();
                id v34 = v90;
                break;
              }
            }
          }
        }
LABEL_41:
        uint64_t v76 = (v82 - 1) & v82;
        unint64_t v77 = __clz(__rbit64(v82)) + (v78 << 6);
      }
      id v80 = *(id *)(*(void *)(v68 + 48) + 8 * v77);
      if (!v80) {
        goto LABEL_45;
      }
      while (1)
      {
        id v84 = [v65 handleWithTUHandle:v80];
        [v94 addInvitedHandles:v84];

        int64_t v70 = v78;
        unint64_t v71 = v76;
        if ((v68 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_25:
        uint64_t v79 = __CocoaSet.Iterator.next()();
        if (v79)
        {
          uint64_t v95 = v79;
          sub_1001F6204(0, (unint64_t *)&unk_100586E00);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v80 = v96;
          swift_unknownObjectRelease();
          int64_t v78 = v70;
          uint64_t v76 = v71;
          if (v80) {
            continue;
          }
        }
        goto LABEL_45;
      }
    }
  }
  sub_1002B4C14(v34, (SEL *)&selRef_name);
  if (v85)
  {
    NSString v86 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v86 = 0;
  }
  uint64_t v87 = v94;
  [v94 setLinkName:v86];

  sub_1001FCC08();
}

#error "10033EBE8: call analysis failed (funcsize=208)"

void sub_10033EC5C()
{
  sub_1001FCC38();
  uint64_t v1 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10024672C();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v70 - v9;
  uint64_t v11 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v84 = v15;
  __chkstk_darwin(v16);
  sub_10024672C();
  uint64_t v19 = v17 - v18;
  __chkstk_darwin(v20);
  id v22 = (char *)v70 - v21;
  uint64_t v23 = sub_1002B4C14(v0, (SEL *)&selRef_pseudonym);
  if (!v24) {
    goto LABEL_14;
  }
  uint64_t v25 = v24;
  uint64_t v83 = v23;
  uint64_t v26 = sub_10034246C(v0, (SEL *)&selRef_publicKey);
  if (v27 >> 60 == 15)
  {
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    sub_1001FCC08();
    return;
  }
  uint64_t v79 = v10;
  uint64_t v28 = v7;
  uint64_t v81 = v26;
  unint64_t v82 = v27;
  uint64_t v77 = v3;
  id v29 = [v0 originatorHandle];
  if (!v29)
  {
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v30 = v29;
  id v31 = [v29 tuHandle];

  id v80 = v31;
  if (!v31)
  {
LABEL_12:
    sub_1001FCB18(v81, v82);
    goto LABEL_13;
  }
  uint64_t v76 = v1;
  id v32 = [v0 generatorDescriptor];
  if (!v32)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v33 = v32;
  id v34 = (char *)[v32 csdConversationLinkGeneratorDescriptor];

  int64_t v78 = v34;
  if (!v34)
  {

    goto LABEL_12;
  }
  uint64_t v35 = v28;
  sub_1002B4C14(v0, (SEL *)&selRef_groupUUIDString);
  if (v36)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    sub_100342F20((uint64_t)v13);
    if (v37)
    {

      sub_1001FCB18(v81, v82);
      swift_bridgeObjectRelease();
      sub_1002392A8((uint64_t)v13, (uint64_t *)&unk_100585580);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v22, v13, v14);
      uint64_t v72 = sub_10034246C(v0, (SEL *)&selRef_privateKey);
      unint64_t v74 = v38;
      [v0 creationDateEpochTime];
      Date.init(timeIntervalSince1970:)();
      [v0 pseudonymExpirationDateEpochTime];
      Date.init(timeIntervalSince1970:)();
      unsigned int v71 = [v0 isActivated];
      id v39 = [v0 invitedHandles];
      if (v39
        && (id v40 = v39,
            unint64_t v85 = 0,
            sub_1001F6204(0, &qword_100589828),
            static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
            v40,
            v85))
      {
        unint64_t v41 = sub_100338680(v85);
        swift_bridgeObjectRelease();
        uint64_t v42 = sub_10024E2A8((unint64_t)v41);
      }
      else
      {
        uint64_t v42 = 0;
      }
      v70[1] = sub_1002B4C14(v0, (SEL *)&selRef_linkName);
      uint64_t v75 = v43;
      uint64_t v44 = *(void *)&v78[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
      uint64_t v45 = *(void *)&v78[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      uint64_t v46 = *(void *)&v78[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
      id v47 = objc_allocWithZone((Class)TUConversationLinkOriginator);
      swift_bridgeObjectRetain();
      id v80 = v80;
      id v48 = sub_100341F28(v44, v45, v46, v80);
      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v19, v22, v14);
      objc_allocWithZone((Class)TUMutableConversationLinkDescriptor);
      id v49 = v48;
      uint64_t v51 = v81;
      unint64_t v50 = v82;
      sub_100249550(v81, v82);
      id v73 = v49;
      uint64_t v52 = (uint64_t)sub_100341E38(v19, v49, v83, v25, v51, v50);
      id v53 = (void *)v52;
      unint64_t v54 = v74;
      if (v74 >> 60 == 15)
      {
        Class isa = 0;
        uint64_t v56 = v77;
        uint64_t v57 = v72;
      }
      else
      {
        uint64_t v57 = v72;
        sub_1001F7440(v72, v74);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v52 = sub_1001FCB18(v57, v54);
        uint64_t v56 = v77;
      }
      uint64_t v58 = v71;
      sub_100342DB4(v52, "setPrivateKey:");

      if (v42)
      {
        sub_1001F6204(0, (unint64_t *)&unk_100586E00);
        sub_100247240();
        v60.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
        uint64_t v59 = swift_bridgeObjectRelease();
      }
      else
      {
        v60.super.Class isa = 0;
      }
      sub_100342DB4(v59, "setInvitedHandles:");

      id v61 = v79;
      Class v62 = Date._bridgeToObjectiveC()().super.isa;
      sub_100342DB4((uint64_t)v62, "setCreationDate:");

      Class v63 = Date._bridgeToObjectiveC()().super.isa;
      sub_100342DB4((uint64_t)v63, "setExpirationDate:");

      id v64 = [v53 setActivated:v58];
      if (v75)
      {
        NSString v65 = String._bridgeToObjectiveC()();
        id v64 = (id)swift_bridgeObjectRelease();
      }
      else
      {
        NSString v65 = 0;
      }
      sub_100342DB4((uint64_t)v64, "setName:");

      sub_1001FCB18(v57, v54);
      sub_1001FCB18(v81, v82);

      id v66 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      uint64_t v67 = v76;
      v66(v35, v76);
      v66((uint64_t)v61, v67);
      uint64_t v68 = sub_100342E44();
      v69(v68);
    }
    goto LABEL_14;
  }
LABEL_31:
  __break(1u);
}

void sub_10033F2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)(v2 + 88);
    uint64_t v5 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = &selRef_initWithEventType_eventSubType_;
    NSString v65 = v4;
    do
    {
      uint64_t v8 = *(v5 - 1);
      unint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      unsigned int v11 = objc_msgSend(v4, v7[27], v10);

      if (v11)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100342DE8();
          uint64_t v6 = v22;
        }
        unint64_t v13 = v6[2];
        unint64_t v12 = v6[3];
        if (v13 >= v12 >> 1)
        {
          sub_100342E90(v12);
          sub_1003A47C8();
          uint64_t v6 = v23;
        }
        void v6[2] = v13 + 1;
        uint64_t v14 = &v6[2 * v13];
        v14[4] = v8;
        v14[5] = v9;
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v4 noteItem:v15];
      }
      else
      {
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_1001F5F88(v16, (uint64_t)qword_100594C10);
        swift_bridgeObjectRetain();
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = v6;
          uint64_t v20 = v7;
          uint64_t v21 = sub_100235B18();
          uint64_t v68 = sub_100202470();
          *(_DWORD *)uint64_t v21 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v21 + 4) = sub_1002344D8(v8, v9, &v68);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "ConversationLinkSync: Excluding pseudonym from recover message as it is at rate limit {pseudonym: %s}", (uint8_t *)v21, 0xCu);
          swift_arrayDestroy();
          sub_1001F63CC();
          uint64_t v7 = v20;
          uint64_t v6 = v19;
          uint64_t v4 = v65;
          sub_1001F63CC();
        }
        else
        {

          sub_100342D8C();
        }
      }
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    if (v6[2])
    {
      id v24 = [objc_allocWithZone((Class)CSDMessagingLinkSyncRecoverMessage) init];
      if (v24)
      {
        sub_1001F6204(0, &qword_10058AA40);
        id v25 = v24;
        uint64_t v26 = swift_bridgeObjectRetain();
        sub_1002501DC(v26);
        swift_bridgeObjectRelease();
        id v27 = sub_100339408();
        [v25 setPseudonyms:v27];
      }
      id v28 = [objc_allocWithZone((Class)CSDMessagingLinkSyncMessage) init];
      id v29 = v28;
      uint64_t v30 = a2;
      if (v28)
      {
        [v28 setType:3];
        [v29 setRecoverMessage:v24];
        uint64_t v31 = sub_100342308(v29);
        unint64_t v33 = v32;
      }
      else
      {
        [0 setRecoverMessage:v24];
        uint64_t v31 = 0;
        unint64_t v33 = 0xF000000000000000;
      }
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_1002B84A0(v43, (uint64_t)qword_100594C10);
      id v44 = v24;
      sub_100342ED8();
      id v45 = v44;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      Class v63 = v29;
      unint64_t v66 = v33;
      uint64_t v67 = v45;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = sub_100235B88();
        id v49 = (void *)sub_100235BB8();
        uint64_t v68 = sub_100202470();
        *(_DWORD *)uint64_t v48 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v50 = Set.description.getter();
        unint64_t v52 = v51;
        swift_bridgeObjectRelease();
        sub_1002344D8(v50, v52, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100342BB4();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2112;
        if (v24 && (id v53 = [v67 pseudonyms]) != 0)
        {
          id v54 = v53;
          sub_100342F40();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
        }
        else
        {
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v54 = 0;
        }
        unint64_t v33 = v66;
        *id v49 = v54;

        _os_log_impl((void *)&_mh_execute_header, v46, v47, "ConversationLinkSync: Sending recover {to: %s, pseudonyms: %@}", (uint8_t *)v48, 0x16u);
        sub_1001F081C(&qword_100585900);
        swift_arrayDestroy();
        sub_1001F63CC();
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        uint64_t v30 = a2;
      }
      else
      {

        sub_100342BB4();
      }
      if (v33 >> 60 == 15)
      {
        __break(1u);
        return;
      }
      sub_1001F7440(v31, v33);
      swift_bridgeObjectRelease();
      id v55 = sub_100247DB4(v31, v33, v30);
      unint64_t v57 = v56;
      sub_1001FCB18(v31, v33);
      sub_100342ED8();
      swift_bridgeObjectRetain();
      uint64_t v58 = (void *)Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (sub_100342CB0(v59))
      {
        uint64_t v60 = sub_100235B88();
        uint64_t v68 = sub_10026B9C0();
        *(_DWORD *)uint64_t v60 = 136315394;
        swift_bridgeObjectRetain();
        Set.description.getter();
        sub_100342EB8();
        sub_1002344D8(v30, v33, &v68);
        sub_100342C7C();
        sub_100342C98();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_1002344D8((uint64_t)v55, v57, &v68);
        sub_100342C7C();
        swift_bridgeObjectRelease_n();
        sub_100342E24((void *)&_mh_execute_header, v61, v62, "ConversationLinkSync: Sent recover {to: %s, idsIdentifier: %s}");
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        sub_1001FCB18(v31, v66);
        return;
      }

      sub_1001FCB18(v31, v33);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_1002B84A0(v34, (uint64_t)qword_100594C10);
      swift_bridgeObjectRetain_n();
      uint64_t v35 = (void *)Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (sub_100342BE4(v36))
      {
        char v37 = (_DWORD *)sub_100235B18();
        uint64_t v68 = sub_100202470();
        _DWORD *v37 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v38 = Array.description.getter();
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        sub_1002344D8(v38, v40, &v68);
        sub_100342F40();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_100249830((void *)&_mh_execute_header, v41, v42, "ConversationLinkSync: No pseudonyms remain after rate limiting, not sending message {pseudonyms: %s}");
        swift_arrayDestroy();
        sub_1001F63CC();
        sub_1001F63CC();

        return;
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

void sub_10033FD40(void *a1, uint64_t a2, unint64_t a3)
{
  id v7 = [a1 pseudonyms];
  if (v7)
  {
    uint64_t v8 = v7;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_1001F5F88(v9, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain_n();
  id v15 = a1;
  NSString v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_1002497A8(v11))
  {
    uint64_t v12 = sub_100235B88();
    unint64_t v13 = (void *)sub_100235BB8();
    v16[0] = sub_100202470();
    *(_DWORD *)uint64_t v12 = 138412546;
    uint64_t v17 = (uint64_t)v15;
    id v14 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v13 = v15;

    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_1002344D8(a2, a3, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v3, "ConversationLinkSync: No pseudonyms found in recover -- dropping {recover: %@, from: %s}", (uint8_t *)v12, 0x16u);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {

    sub_100342FD8();
  }
}

void sub_1003407C0()
{
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  v4[4] = sub_100342500;
  v4[5] = v1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  _OWORD v4[2] = sub_100340A38;
  v4[3] = &unk_1005155A0;
  uint64_t v2 = _Block_copy(v4);
  swift_release();
  uint64_t v3 = os_state_add_handler();
  _Block_release(v2);
  *(void *)(v0 + 128) = v3;
}

uint64_t sub_10034089C(uint64_t a1)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 3)
  {
    swift_release();
    return 0;
  }
  sub_1003410BC(1);
  uint64_t v3 = sub_100339060(0xD000000000000020, 0x8000000100489970);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100340A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

void sub_100340A88(char a1)
{
  int64_t v48 = 0;
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  uint64_t v45 = sub_1003410BC(a1) + 64;
  sub_100342D74();
  unint64_t v3 = v2 & v1;
  int64_t v46 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v47 = v5;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v49 = (v3 - 1) & v3;
  unint64_t v6 = __clz(__rbit64(v3)) | (v48 << 6);
LABEL_3:
  uint64_t v7 = *(void *)(v47 + 56);
  uint64_t v8 = (uint64_t *)(*(void *)(v47 + 48) + 16 * v6);
  uint64_t v9 = (void *)v8[1];
  v60._uint64_t countAndFlagsBits = *v8;
  v60._object = v9;
  sub_100201880(v7 + 32 * v6, (uint64_t)v61);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1003426E0((uint64_t)&v60, (uint64_t)&v62, (uint64_t *)&unk_100587020);
    unint64_t v13 = v63;
    if (!v63)
    {
      swift_release();
      return;
    }
    uint64_t v14 = v62;
    sub_1001F75B4(&v64, v59);
    v60._uint64_t countAndFlagsBits = v14;
    v60._object = v13;
    v15._uint64_t countAndFlagsBits = 2618;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    sub_100201880((uint64_t)v59, (uint64_t)&v60);
    sub_1001F081C(&qword_10058AA20);
    if (!swift_dynamicCast()) {
      break;
    }
    uint64_t v16 = *(void *)(v57._countAndFlagsBits + 16);
    if (v16)
    {
      uint64_t v17 = 0;
      do
      {
        ++v17;
        v60._uint64_t countAndFlagsBits = 2105376;
        v60._object = (void *)0xE300000000000000;
        swift_bridgeObjectRetain();
        uint64_t v18 = Array.description.getter();
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        v21._uint64_t countAndFlagsBits = v18;
        v21._object = v20;
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        sub_100342F08();
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
      }
      while (v16 != v17);
    }
LABEL_59:
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)v59);
    unint64_t v3 = v49;
    if (v49) {
      goto LABEL_2;
    }
LABEL_4:
    int64_t v10 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      goto LABEL_65;
    }
    if (v10 < v46)
    {
      unint64_t v11 = *(void *)(v45 + 8 * v10);
      if (v11) {
        goto LABEL_7;
      }
      int64_t v12 = v48 + 2;
      ++v48;
      if (v10 + 1 < v46)
      {
        unint64_t v11 = *(void *)(v45 + 8 * v12);
        if (v11) {
          goto LABEL_10;
        }
        int64_t v48 = v10 + 1;
        if (v10 + 2 < v46)
        {
          unint64_t v11 = *(void *)(v45 + 8 * (v10 + 2));
          if (v11)
          {
            v10 += 2;
            goto LABEL_7;
          }
          int64_t v12 = v10 + 3;
          int64_t v48 = v10 + 2;
          if (v10 + 3 < v46)
          {
            unint64_t v11 = *(void *)(v45 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v10 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_66;
                }
                if (v10 >= v46)
                {
                  int64_t v48 = v46 - 1;
                  goto LABEL_21;
                }
                unint64_t v11 = *(void *)(v45 + 8 * v10);
                ++v12;
                if (v11) {
                  goto LABEL_7;
                }
              }
            }
LABEL_10:
            int64_t v10 = v12;
LABEL_7:
            int64_t v48 = v10;
            uint64_t v49 = (v11 - 1) & v11;
            unint64_t v6 = __clz(__rbit64(v11)) + (v10 << 6);
            goto LABEL_3;
          }
        }
      }
    }
LABEL_21:
    uint64_t v49 = 0;
    memset(v61, 0, sizeof(v61));
    Swift::String v60 = (Swift::String)0;
  }
  sub_100201880((uint64_t)v59, (uint64_t)&v60);
  sub_1001F081C((uint64_t *)&unk_10058AA10);
  if (!swift_dynamicCast())
  {
    v57._uint64_t countAndFlagsBits = 2105376;
    v57._object = (void *)0xE300000000000000;
    sub_100201880((uint64_t)v59, (uint64_t)&v60);
    v44._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    sub_100342F08();
    String.append(_:)(v57);
    goto LABEL_59;
  }
  uint64_t countAndFlagsBits = v57._countAndFlagsBits;
  uint64_t v52 = *(void *)(v57._countAndFlagsBits + 16);
  if (!v52) {
    goto LABEL_59;
  }
  unint64_t v23 = 0;
  uint64_t v50 = v57._countAndFlagsBits;
  uint64_t v51 = v57._countAndFlagsBits + 32;
LABEL_31:
  if (v23 >= *(void *)(countAndFlagsBits + 16)) {
    goto LABEL_63;
  }
  uint64_t v24 = *(void *)(v51 + 8 * v23);
  unint64_t v53 = v23 + 1;
  swift_bridgeObjectRetain();
  sub_100342F08();
  int64_t v25 = 0;
  uint64_t v54 = v24 + 64;
  sub_100342D74();
  uint64_t v28 = v27 & v26;
  int64_t v30 = (unint64_t)(v29 + 63) >> 6;
  if ((v27 & v26) != 0)
  {
LABEL_33:
    sub_100342E64();
    unint64_t v32 = v31 | (v25 << 6);
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v36 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v36 < v30)
    {
      unint64_t v37 = *(void *)(v54 + 8 * v36);
      if (v37) {
        goto LABEL_38;
      }
      int64_t v38 = v25 + 2;
      ++v25;
      if (v36 + 1 < v30)
      {
        unint64_t v37 = *(void *)(v54 + 8 * v38);
        if (v37) {
          goto LABEL_41;
        }
        int64_t v25 = v36 + 1;
        if (v36 + 2 < v30)
        {
          unint64_t v37 = *(void *)(v54 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
            goto LABEL_38;
          }
          int64_t v38 = v36 + 3;
          int64_t v25 = v36 + 2;
          if (v36 + 3 < v30)
          {
            unint64_t v37 = *(void *)(v54 + 8 * v38);
            if (!v37)
            {
              while (1)
              {
                int64_t v36 = v38 + 1;
                if (__OFADD__(v38, 1)) {
                  goto LABEL_64;
                }
                if (v36 >= v30)
                {
                  int64_t v25 = v30 - 1;
                  goto LABEL_52;
                }
                unint64_t v37 = *(void *)(v54 + 8 * v36);
                ++v38;
                if (v37) {
                  goto LABEL_38;
                }
              }
            }
LABEL_41:
            int64_t v36 = v38;
LABEL_38:
            uint64_t v28 = (v37 - 1) & v37;
            unint64_t v32 = __clz(__rbit64(v37)) + (v36 << 6);
            int64_t v25 = v36;
LABEL_34:
            uint64_t v33 = *(void *)(v24 + 56);
            uint64_t v34 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v32);
            uint64_t v35 = (void *)v34[1];
            v57._uint64_t countAndFlagsBits = *v34;
            v57._object = v35;
            sub_100201880(v33 + 32 * v32, (uint64_t)v58);
            swift_bridgeObjectRetain();
            goto LABEL_53;
          }
        }
      }
    }
LABEL_52:
    uint64_t v28 = 0;
    memset(v58, 0, sizeof(v58));
    Swift::String v57 = (Swift::String)0;
LABEL_53:
    sub_1003426E0((uint64_t)&v57, (uint64_t)&v60, (uint64_t *)&unk_100587020);
    object = v60._object;
    if (!v60._object)
    {
      swift_release();
      unint64_t v23 = v53;
      uint64_t countAndFlagsBits = v50;
      if (v53 == v52) {
        goto LABEL_59;
      }
      goto LABEL_31;
    }
    uint64_t v40 = v60._countAndFlagsBits;
    sub_1001F75B4(v61, &v57);
    v56._uint64_t countAndFlagsBits = 2105376;
    v56._object = (void *)0xE300000000000000;
    v41._uint64_t countAndFlagsBits = v40;
    v41._object = object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 540949792;
    v42._object = (void *)0xE400000000000000;
    String.append(_:)(v42);
    sub_100201880((uint64_t)&v57, (uint64_t)v55);
    v43._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    sub_100342F08();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    sub_1002018DC((uint64_t)&v57);
    if (v28) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

uint64_t sub_1003410BC(char a1)
{
  uint64_t v99 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v89 = v1;
  id v90 = (void *)(v1 + 32);
  uint64_t v2 = (void **)sub_100204074((void *)(v1 + 32), *(void *)(v1 + 56));
  unint64_t v3 = (unint64_t)sub_100205140(*v2);
  uint64_t isUniquelyReferenced_nonNull_native = v3;
  if (v3 >> 62)
  {
LABEL_21:
    sub_100342F54();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      unint64_t v94 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      unint64_t v6 = _swiftEmptyDictionarySingleton;
      uint64_t v7 = 4;
      uint64_t v92 = isUniquelyReferenced_nonNull_native;
      id v91 = (id)v5;
      do
      {
        if (v94) {
          uint64_t v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v8 = (char *)*(id *)(isUniquelyReferenced_nonNull_native + 8 * v7);
        }
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        id v96 = (id)(v7 - 3);
        uint64_t v9 = *(void *)&v8[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
        uint64_t v10 = *(void *)&v8[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
        unint64_t v11 = v8;
        uint64_t v12 = *(void *)&v8[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v100[0] = v6;
        sub_100233664();
        sub_100342D28();
        Swift::Int v17 = v15 + v16;
        if (__OFADD__(v15, v16)) {
          goto LABEL_19;
        }
        unint64_t v18 = v13;
        char v19 = v14;
        sub_1001F081C(&qword_10058A9F8);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v17))
        {
          unint64_t v20 = sub_100233664();
          if ((v19 & 1) != (v21 & 1))
          {
LABEL_62:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v18 = v20;
        }
        unint64_t v6 = v100[0];
        if (v19)
        {
          *(void *)(*((void *)v100[0] + 7) + 8 * v18) = v12;
        }
        else
        {
          sub_100342C00((uint64_t)v100[0] + 8 * (v18 >> 6));
          id v22 = (void *)(*((void *)v100[0] + 6) + 16 * v18);
          *id v22 = v9;
          v22[1] = v10;
          *(void *)(v6[7] + 8 * v18) = v12;
          uint64_t v23 = v6[2];
          BOOL v24 = __OFADD__(v23, 1);
          uint64_t v25 = v23 + 1;
          if (v24) {
            goto LABEL_20;
          }
          void v6[2] = v25;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v7;
        uint64_t isUniquelyReferenced_nonNull_native = v92;
      }
      while (v96 != v91);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = (char **)sub_1001F081C(&qword_10058AA00);
  uint64_t v27 = sub_100342CF8();
  sub_10037B4E8(v27);
  v100[1] = v28;
  uint64_t v29 = sub_100342C28();
  unint64_t v101 = &type metadata for Int;
  v100[0] = (id)sub_10037B930(v29);
  sub_100342C28();
  int64_t v30 = (void **)sub_100204074(v90, *(void *)(v89 + 56));
  uint64_t v31 = (void *)sub_100205F08(*v30);
  unint64_t v101 = v26;
  v100[0] = v31;
  sub_100342C28();
  sub_10020ED28((uint64_t)v90, (uint64_t)v100);
  sub_1001F081C(&qword_10058AA08);
  if (swift_dynamicCast())
  {
    unint64_t v32 = (unint64_t)v98;
    v100[0] = 0;
    id v33 = [v98 conversationLinkDescriptorsWithPredicate:0 limit:0 offset:0 error:v100];
    id v34 = v100[0];
    if (v33)
    {
      uint64_t v35 = v33;
      sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
      unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = v34;

      if (v36 >> 62) {
        goto LABEL_54;
      }
      uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v38)
      {
        unint64_t v84 = v32;
        unint64_t v85 = v26;
        if (v38 < 1) {
          __break(1u);
        }
        uint64_t v39 = 0;
        unint64_t v93 = v36 & 0xC000000000000001;
        uint64_t v40 = (char **)_swiftEmptyArrayStorage;
        Swift::String v41 = _swiftEmptyDictionarySingleton;
        uint64_t v26 = &selRef_isUnknownAddress_normalizedAddress_forBundleIdentifier_;
        unint64_t v88 = v36;
        uint64_t v87 = v38;
        while (1)
        {
          if (v93) {
            id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v42 = *(id *)(v36 + 8 * v39 + 32);
          }
          Swift::String v43 = v42;
          sub_1001F081C(&qword_100584B90);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1004904F0;
          *(void *)(inited + 32) = 0x796E6F6475657370;
          *(void *)(inited + 40) = 0xE90000000000006DLL;
          id v45 = [v43 pseudonym];
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v47;

          *(void *)(inited + 48) = v46;
          *(void *)(inited + 56) = v48;
          *(void *)(inited + 72) = &type metadata for String;
          *(void *)(inited + 80) = 0xD000000000000012;
          *(void *)(inited + 88) = 0x80000001004898C0;
          id v49 = [v43 v26[413]];
          id v50 = [v49 revision];

          *(void *)(inited + 96) = v50;
          *(void *)(inited + 120) = &type metadata for Int;
          *(void *)(inited + 128) = 0xD000000000000014;
          *(void *)(inited + 136) = 0x80000001004898E0;
          id v97 = v43;
          id v51 = [v43 v26[413]];
          id v52 = [v51 identifier];

          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          *(void *)(inited + 168) = &type metadata for String;
          *(void *)(inited + 144) = v53;
          *(void *)(inited + 152) = v55;
          uint64_t v56 = Dictionary.init(dictionaryLiteral:)();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1003A4CE4();
            uint64_t v40 = v80;
          }
          unint64_t v58 = (unint64_t)v40[2];
          unint64_t v57 = (unint64_t)v40[3];
          if (v58 >= v57 >> 1)
          {
            sub_100342E90(v57);
            sub_1003A4CE4();
            uint64_t v40 = v81;
          }
          v40[2] = (char *)(v58 + 1);
          v40[v58 + 4] = (char *)v56;
          id v59 = objc_msgSend(v43, v26[413], v84);
          id v60 = [v59 identifier];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v95 = v39;
          if (!v41[2]) {
            goto LABEL_38;
          }
          unint64_t v61 = sub_100233664();
          if (v62) {
            unint64_t v32 = *(void *)(v41[7] + 8 * v61);
          }
          else {
LABEL_38:
          }
            unint64_t v32 = 0;
          swift_bridgeObjectRelease();
          id v63 = [v43 v26[413]];
          id v64 = [v63 identifier];

          unint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v66 = v65;

          unint64_t v67 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            break;
          }
          uint64_t v26 = v40;
          char v68 = swift_isUniquelyReferenced_nonNull_native();
          v100[0] = v41;
          sub_100233664();
          sub_100342D28();
          Swift::Int v73 = v71 + v72;
          if (__OFADD__(v71, v72)) {
            goto LABEL_52;
          }
          unint64_t v32 = v69;
          char v74 = v70;
          sub_1001F081C(&qword_10058A9F8);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v68, v73))
          {
            unint64_t v75 = sub_100233664();
            if ((v74 & 1) != (v76 & 1)) {
              goto LABEL_62;
            }
            unint64_t v32 = v75;
          }
          Swift::String v41 = v100[0];
          if (v74)
          {
            *(void *)(*((void *)v100[0] + 7) + 8 * v32) = v67;
          }
          else
          {
            sub_100342C00((uint64_t)v100[0] + 8 * (v32 >> 6));
            uint64_t v77 = (unint64_t *)(v41[6] + 16 * v32);
            *uint64_t v77 = v36;
            v77[1] = v66;
            *(void *)(v41[7] + 8 * v32) = v67;
            uint64_t v78 = v41[2];
            BOOL v24 = __OFADD__(v78, 1);
            uint64_t v79 = v78 + 1;
            if (v24) {
              goto LABEL_53;
            }
            void v41[2] = v79;
            swift_bridgeObjectRetain();
          }
          uint64_t v39 = v95 + 1;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v36 = v88;
          uint64_t v26 = &selRef_isUnknownAddress_normalizedAddress_forBundleIdentifier_;
          if (v87 == v95 + 1)
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v26 = v85;
            goto LABEL_57;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v82 = v100[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_unknownObjectRelease();
      swift_errorRelease();
    }
  }
  uint64_t v40 = (char **)_swiftEmptyArrayStorage;
  Swift::String v41 = _swiftEmptyDictionarySingleton;
LABEL_57:
  if (a1)
  {
    unint64_t v101 = (void *)sub_1001F081C((uint64_t *)&unk_10058AA10);
    v100[0] = v40;
    sub_1002C2414((uint64_t)v100);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v101 = v26;
  v100[0] = v41;
  swift_bridgeObjectRetain();
  sub_100342CF8();
  swift_bridgeObjectRelease();
  return v99;
}

void sub_100341A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v4 + 104);
  sub_1002022F8();
  uint64_t v8 = sub_10022307C(*(void *)(v7 + 40));
  sub_10020CA64(v8);
  if (v8)
  {
    if (qword_100583A08 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1001F5F88(v9, (uint64_t)qword_100594C10);
    sub_100342E0C();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (sub_1002497A8(v11))
    {
      uint64_t v12 = (uint8_t *)sub_100235B18();
      uint64_t v16 = sub_100202470();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      sub_1002344D8(v13, v15, &v16);
      sub_100342EA4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100342BCC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v3, "ConversationLinkSync: devices changed making sure we send a check in to them as well {deviceDestinations: %s}", v12, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {

      sub_100342BCC();
    }
    swift_retain();
    sub_10020B5C8(a2, 1, 2u, (uint64_t)sub_100341C58, v4);
    swift_release();
  }
  else
  {
    sub_10033C7C0((char)[*(id *)(a1 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) hasActiveAccounts]);
  }
}

void sub_100341C2C(uint64_t a1, uint64_t a2)
{
}

void sub_100341C58(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100341C60()
{
  _StringGuts.grow(_:)(181);
  sub_100342D58(0xD000000000000029, (uint64_t)"<CheckInDiff; remoteMissingIdentifiers = ");
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100342D58(0xD00000000000001CLL, (uint64_t)"; localMissingIdentifiers = ");
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100342D34((uint64_t)"; localDescriptorsBehindRemote = ");
  type metadata accessor for GeneratorDescriptor();
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100342D34((uint64_t)"; remoteDescriptorsBehindLocal = ");
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100342D58(0xD000000000000023, (uint64_t)"; differingVersionSumIdentifiers = ");
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

id sub_100341E38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100342E44();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  id v15 = [v7 initWithGroupUUID:isa originator:a2 pseudonym:v13 publicKey:v14];

  sub_1001F7498(a5, a6);
  type metadata accessor for UUID();
  sub_10020233C();
  (*(void (**)(uint64_t))(v16 + 8))(a1);
  return v15;
}

id sub_100341F28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v4 initWithIdentifier:v7 revision:a3 handle:a4];

  return v8;
}

unint64_t sub_100341F9C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    Swift::String v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1001F081C(&qword_10058AA30);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  Swift::String v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100342620(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1003420C8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    os_log_type_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *os_log_type_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1001F75B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1003420C8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100342140(a1, a2, v4);
}

unint64_t sub_100342140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

void sub_100342288(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0) {
    sub_1002EC9A4(0x20000000000001);
  }
  else {
    __break(1u);
  }
}

uint64_t sub_100342308(void *a1)
{
  id v2 = [a1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100235AE0();
}

void sub_100342374(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001F7498(a1, a2);
  [a3 setPublicKey:isa];
}

uint64_t sub_1003423E8(void *a1)
{
  return sub_10034246C(a1, (SEL *)&selRef_privateKey);
}

uint64_t sub_1003423F4(void *a1)
{
  id v1 = [a1 invitedHandles];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  sub_1001F6204(0, (unint64_t *)&unk_100586E00);
  sub_100247240();
  sub_100235AE0();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10034246C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100235AE0();
}

uint64_t sub_1003424C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100342500(uint64_t a1)
{
  return sub_10034089C(a1);
}

uint64_t sub_100342508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100342518()
{
  return swift_release();
}

char *sub_100342520(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    return (char *)_StringGuts._slowWithCString<A>(_:)();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    *(void *)__src = a1;
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = __src;
  }
  else if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
  }
  return sub_1002F5230(v6, __dst, a4);
}

char *sub_100342604(char *a1)
{
  return sub_1002F5230(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100342620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_10058AA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100342688(_xpc_activity_s *a1)
{
  sub_10033CC84(a1, v1);
}

uint64_t sub_100342690()
{
  return sub_10033D240();
}

uint64_t sub_100342698(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003426E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  uint64_t v4 = sub_100235AE0();
  v5(v4);
  return a2;
}

uint64_t sub_100342738(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100342748(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100342758()
{
  swift_release();
  if (*(void *)(v0 + 24) != 1) {
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 33, 7);
}

void sub_1003427A0(uint64_t a1, uint64_t a2)
{
  sub_10033B7A4(a1, a2, *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
}

uint64_t sub_1003427CC()
{
  return sub_10034283C(32);
}

uint64_t sub_1003427D4()
{
  return sub_10033A2B0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1003427DC()
{
  sub_100339FD0(v0);
}

uint64_t sub_1003427E4()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10034281C()
{
  sub_100339E04(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

void sub_10034282C()
{
  sub_100339C1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_10034283C(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_100342888()
{
  sub_1003399D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

unint64_t destroy for ConversationLinkSyncManager.CheckInType(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s13callservicesd27ConversationLinkSyncManagerC11CheckInTypeOwCP_0(uint64_t a1, unint64_t *a2)
{
  LODWORD(v3) = -1;
  if (*a2 < 0xFFFFFFFF) {
    unint64_t v3 = *a2;
  }
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  if ((int)v3 - 1 < 0) {
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for ConversationLinkSyncManager.CheckInType(unint64_t *a1, unint64_t *a2)
{
  LODWORD(v4) = -1;
  if (*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    unint64_t v5 = *a1;
  }
  int v6 = v5 - 1;
  unint64_t v7 = *a2;
  if (*a2 < 0xFFFFFFFF) {
    unint64_t v4 = *a2;
  }
  int v8 = v4 - 1;
  if (v6 < 0)
  {
    if (v8 < 0)
    {
      *a1 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    unint64_t v9 = *a2;
    *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
    *a1 = v9;
    return a1;
  }
  *a1 = v7;
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithTake for ConversationLinkSyncManager.CheckInType(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void *)a1;
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (*a2 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *(void *)a1 = *a2;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  *(void *)a1 = *a2;
LABEL_9:
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationLinkSyncManager.CheckInType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConversationLinkSyncManager.CheckInType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100342AF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100342B18(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    uint64_t v2 = a2 - 0x7FFFFFFF;
    *(unsigned char *)(result + 8) = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = a2;
  }
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkSyncManager.CheckInType()
{
  return &type metadata for ConversationLinkSyncManager.CheckInType;
}

uint64_t sub_100342B8C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100342BB4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100342BCC()
{
  return swift_bridgeObjectRelease_n();
}

BOOL sub_100342BE4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100342C00(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t sub_100342C28()
{
  return sub_1002C2414(v0 - 136);
}

uint64_t sub_100342C48()
{
  return swift_arrayDestroy();
}

uint64_t sub_100342C64()
{
  return sub_1002B4C14(v0, v1);
}

uint64_t sub_100342C7C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100342C98()
{
  return swift_bridgeObjectRelease_n();
}

BOOL sub_100342CB0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100342CF8()
{
  return sub_1002C2414(v0 - 136);
}

uint64_t sub_100342D20()
{
  return sub_10034283C(33);
}

void sub_100342D34(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000021;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void sub_100342D58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100342D8C()
{
  return swift_bridgeObjectRelease_n();
}

id sub_100342DB4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

BOOL sub_100342DCC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100342DE8()
{
  sub_1003A47C8();
}

uint64_t sub_100342E0C()
{
  return swift_bridgeObjectRetain_n();
}

void sub_100342E24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_100342E44()
{
  return v0;
}

uint64_t sub_100342E78(uint64_t a1, uint64_t a2)
{
  return sub_1001F0530(a1, a2, 1, v2);
}

BOOL sub_100342E90@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100342EB8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100342ED8()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100342EF0()
{
  return sub_100342738(v0);
}

void sub_100342F08()
{
  uint64_t v1 = 10;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100342F20(uint64_t a1)
{
  return sub_1001F758C(a1, 1, v1);
}

uint64_t sub_100342F54()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100342F74()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100342F94()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100342FB4()
{
  return v0;
}

uint64_t sub_100342FC0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100342FD8()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100342FF0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100343010(uint64_t a1)
{
  sub_1002E4D1C(v27, a1);
  uint64_t v1 = v27[0];
  uint64_t v17 = v27[1];
  int64_t v2 = v27[3];
  unint64_t v3 = v27[4];
  int64_t v28 = (unint64_t)(v27[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v3)
    {
      unint64_t v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v6 = v5 | (v2 << 6);
      goto LABEL_20;
    }
    int64_t v7 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v7 >= v28) {
      goto LABEL_27;
    }
    unint64_t v8 = *(void *)(v17 + 8 * v7);
    int64_t v9 = v2 + 1;
    if (!v8)
    {
      int64_t v9 = v2 + 2;
      if (v2 + 2 >= v28) {
        goto LABEL_27;
      }
      unint64_t v8 = *(void *)(v17 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v2 + 3;
        if (v2 + 3 >= v28) {
          goto LABEL_27;
        }
        unint64_t v8 = *(void *)(v17 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v2 + 4;
          if (v2 + 4 >= v28) {
            goto LABEL_27;
          }
          unint64_t v8 = *(void *)(v17 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v2 + 5;
            if (v2 + 5 >= v28) {
              goto LABEL_27;
            }
            unint64_t v8 = *(void *)(v17 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v2 + 6;
              while (v10 < v28)
              {
                unint64_t v8 = *(void *)(v17 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v2 = v9;
LABEL_20:
    sub_1002353DC(*(void *)(v1 + 48) + 40 * v6, (uint64_t)__src);
    sub_100201880(*(void *)(v1 + 56) + 32 * v6, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1002353DC((uint64_t)__dst, (uint64_t)&v18);
    sub_100201880((uint64_t)&__dst[40], (uint64_t)v21);
    long long v22 = v18;
    long long v23 = v19;
    uint64_t v24 = v20;
    sub_1002018DC((uint64_t)v21);
    sub_10021E23C((uint64_t)__dst, &qword_10058AAF0);
    if (*((void *)&v23 + 1))
    {
      long long v18 = v22;
      long long v19 = v23;
      uint64_t v20 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A5074();
        uint64_t v4 = v15;
      }
      unint64_t v11 = v4[2];
      if (v11 >= v4[3] >> 1)
      {
        sub_1003A5074();
        uint64_t v4 = v16;
      }
      _OWORD v4[2] = v11 + 1;
      uint64_t v12 = &v4[5 * v11];
      long long v13 = v18;
      long long v14 = v19;
      v12[8] = v20;
      *((_OWORD *)v12 + 2) = v13;
      *((_OWORD *)v12 + 3) = v14;
    }
    else
    {
      sub_10021E23C((uint64_t)&v22, &qword_10058AAF8);
    }
  }
  __break(1u);
}

void *sub_1003432C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v17 = v2;
  uint64_t v5 = swift_bridgeObjectRetain() + 40;
  unint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    if (!a2)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      swift_bridgeObjectRetain();
LABEL_12:
      sub_10021E23C((uint64_t)&v15, (uint64_t *)&unk_100584CA0);
LABEL_13:
      v14[0] = 0;
      goto LABEL_14;
    }
    swift_bridgeObjectRetain_n();
    AnyHashable.init<A>(_:)();
    if (*(void *)(a2 + 16) && (unint64_t v7 = sub_1002336D0((uint64_t)v14), (v8 & 1) != 0))
    {
      sub_100201880(*(void *)(a2 + 56) + 32 * v7, (uint64_t)&v15);
    }
    else
    {
      long long v15 = 0u;
      long long v16 = 0u;
    }
    sub_100234D14((uint64_t)v14);
    if (!*((void *)&v16 + 1)) {
      goto LABEL_12;
    }
    sub_1001F081C(&qword_1005888D8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_13;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v9 = v14[0];
    if (v14[0])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A50A8();
        unint64_t v6 = v11;
      }
      unint64_t v10 = v6[2];
      if (v10 >= v6[3] >> 1)
      {
        sub_1003A50A8();
        unint64_t v6 = v12;
      }
      void v6[2] = v10 + 1;
      v6[v10 + 4] = v9;
    }
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}