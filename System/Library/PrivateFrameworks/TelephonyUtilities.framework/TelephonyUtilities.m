void sub_100007F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t vars8;

  v5 = [*(id *)(a1 + 32) state];
  v2 = [v5 publiclyAccessibleCopy];
  v3 = *(void *)(*(void *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100007F98(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = objc_opt_class();
    id v8 = [*(id *)(a1 + 32) pairedHostDeviceProvidersByIdentifier];
    objc_msgSend(v4, "_providersByIdentifierByFilteringForRemoteClientsFromProvidersByIdentifier:");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v8 = [v3 pairedHostDeviceProvidersByIdentifier];
    id v5 = [v8 copy];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100008030(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = objc_opt_class();
    id v8 = [*(id *)(a1 + 32) localProvidersByIdentifier];
    objc_msgSend(v4, "_providersByIdentifierByFilteringForRemoteClientsFromProvidersByIdentifier:");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v8 = [v3 localProvidersByIdentifier];
    id v5 = [v8 copy];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000080C8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _providersByIdentifierForRemoteClients:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100008224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000085AC(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  v11 = a3;
  v12 = a4;
  if ([v9 isEntitledForCapability:v10])
  {
    v11[2](v11);
  }
  else
  {
    if (a5)
    {
      v13 = +[NSString stringWithFormat:@"Entitlement check: In %s, client %@ lacks capability '%@'", a5, v9, v10];
      v14 = sub_100008DCC();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_1003AF9B0((uint64_t)v13, v14);
      }
    }
    if (v12) {
      v12[2](v12);
    }
  }
}

void sub_1000089A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008C7C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) _xpcClientForConnection:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(v2 + 16) + 8) + 24) = [*(id *)v2 isClientAllowed:v3];
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) + 8) + 24);
  id v5 = sub_100008DCC();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = [*(id *)v2 machServiceName];
      int v8 = 138412546;
      id v9 = v7;
      __int16 v10 = 2112;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accepting XPC client for %@: %@", (uint8_t *)&v8, 0x16u);
    }
    [*(id *)(a1 + 32) addClient:v3];
    [*(id *)(a1 + 40) resume];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003B2624((id *)v2, (uint64_t)v3, v6);
    }
  }
}

id sub_100008DCC()
{
  if (qword_10058C510 != -1) {
    dispatch_once(&qword_10058C510, &stru_100509AD0);
  }
  v0 = (void *)qword_10058C508;

  return v0;
}

uint64_t sub_10000A020(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadString();
      v19 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v18;
    }
    else if (v12 == 2)
    {
      char v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      *(unsigned char *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
        v22 |= (unint64_t)(v24 & 0x7F) << v20;
        if ((v24 & 0x80) == 0) {
          goto LABEL_42;
        }
        v20 += 7;
        BOOL v9 = v21++ >= 9;
        if (v9)
        {
          uint64_t v22 = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v22 = 0;
      }
LABEL_44:
      *(void *)(a1 + 8) = v22;
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_38;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_40:
      *(_DWORD *)(a1 + 24) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10000A9EC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = PBReaderReadString();
      if (v17) {
        [(id)a1 addPseudonym:v17];
      }
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_32;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_10000B390(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 16;
LABEL_21:
        uint64_t v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadData();
    uint64_t v13 = 8;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10000D280(CSDMessagingConversationLink *self, SEL a2)
{
  v7.receiver = self;
  v7.super_class = (Class)CSDMessagingConversationLink;
  uint64_t v3 = [(CSDMessagingConversationLink *)&v7 description];
  char v4 = [(CSDMessagingConversationLink *)self dictionaryRepresentation];
  unsigned int v5 = +[NSString stringWithFormat:@"%@ %@", v3, v4];

  return v5;
}

uint64_t sub_10000D6F0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 80;
        goto LABEL_46;
      case 2u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 88;
        goto LABEL_46;
      case 3u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 72;
        goto LABEL_46;
      case 4u:
        char v16 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addInvitedHandles:v16];
        goto LABEL_29;
      case 5u:
        *(unsigned char *)(a1 + 100) |= 1u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v18 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v18 = 0;
        }
        uint64_t v33 = 8;
        goto LABEL_66;
      case 6u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 32;
        goto LABEL_46;
      case 7u:
        char v16 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 64), v16);
LABEL_29:
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v16, a2) & 1) == 0) {
          goto LABEL_69;
        }
        goto LABEL_44;
      case 8u:
        *(unsigned char *)(a1 + 100) |= 2u;
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v18 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v18 = 0;
        }
        uint64_t v33 = 16;
LABEL_66:
        *(void *)(a1 + v33) = v18;
        goto LABEL_67;
      case 9u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 100) |= 8u;
        while (2)
        {
          uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v10 = v21++ >= 9;
              if (v10)
              {
                uint64_t v22 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_57:
        *(unsigned char *)(a1 + 96) = v22 != 0;
        goto LABEL_67;
      case 0xAu:
        char v16 = objc_alloc_init(CSDMessagingConversationLinkGeneratorDescriptor);
        objc_storeStrong((id *)(a1 + 24), v16);
        if PBReaderPlaceMark() && (sub_100146304((uint64_t)v16, a2))
        {
LABEL_44:
          PBReaderRecallMark();

LABEL_67:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_69:

        return 0;
      case 0xBu:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 56;
LABEL_46:
        v26 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_67;
      case 0xCu:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 100) |= 4u;
        while (2)
        {
          uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v10 = v28++ >= 9;
              if (v10)
              {
                LODWORD(v29) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v29) = 0;
        }
LABEL_61:
        *(_DWORD *)(a1 + 48) = v29;
        goto LABEL_67;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_67;
    }
  }
}

void sub_10000F794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000F7B4(uint64_t a1, void *a2)
{
  activity = a2;
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained sendDualSIMRingtoneMetrics];
  }
  else
  {
    if (state) {
      goto LABEL_6;
    }
    id WeakRetained = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(WeakRetained, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(WeakRetained, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(WeakRetained, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(WeakRetained, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_activity_set_criteria(activity, WeakRetained);
  }

LABEL_6:
}

id sub_10000F8AC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received _TLTonePreferencesDidChangeNotification", v5, 2u);
  }

  return [a2 handleTLTonePreferencesDidChangeNotification];
}

void sub_100010798(uint64_t a1)
{
  v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v23 = "-[CSDDualSIMRingtoneHelper sendDualSIMRingtoneMetrics]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s: Logging dual SIM metric event", buf, 0xCu);
  }

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) subscriptionsInUse];
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v3)
  {
    id v4 = v3;
    int v5 = 0;
    uint64_t v6 = *(void *)v19;
    uint64_t v7 = &stru_100517F40;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v2);
        }
        char v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if (([v9 isSimHidden] & 1) == 0
          && ([v9 isSimDataOnly] & 1) == 0)
        {
          BOOL v10 = [v9 labelID];
          int v11 = [@"TLAlertTopicIncomingCall" stringByAppendingString:v10];
          uint64_t v12 = +[TLToneManager sharedToneManager];
          uint64_t v13 = [v12 currentToneIdentifierForAlertType:*(void *)(*(void *)(a1 + 32) + 48) topic:v11];

          if ([(__CFString *)v7 length])
          {
            v5 |= [(__CFString *)v7 isEqualToString:v13];
          }
          else
          {
            uint64_t v14 = v13;

            uint64_t v7 = v14;
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v4);
  }
  else
  {
    LOBYTE(v5) = 0;
    uint64_t v7 = &stru_100517F40;
  }

  unint64_t v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    char v16 = +[NSNumber numberWithBool:v5 & 1];
    *(_DWORD *)buf = 136315394;
    uint64_t v23 = "-[CSDDualSIMRingtoneHelper sendDualSIMRingtoneMetrics]_block_invoke";
    __int16 v24 = 2112;
    char v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: Logging dual SIM metric event hasDifferentRingtones:%@", buf, 0x16u);
  }
  +[CSDAnalyticsReporter sendDualSIMRingtoneStateEvent:v5 & 1];
}

void sub_100010BF4(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 40)) initWithQueue:*(void *)(a1 + 32)];
  uint64_t v2 = (void *)qword_10058C1A0;
  qword_10058C1A0 = (uint64_t)v1;
}

id sub_100010F20(uint64_t a1)
{
  return [*(id *)(a1 + 32) endTransactionIfNecessaryForObject:*(void *)(a1 + 32)];
}

void sub_100011404(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) object];
  unsigned int v2 = [v4 state];
  id v3 = *(void **)(a1 + 40);
  if (v2 == 5) {
    [v3 endTransactionIfNecessaryForObject:v4];
  }
  else {
    [v3 beginTransactionIfNecessaryForObject:v4 withReason:@"handleSessionStateChanged"];
  }
}

void sub_10001159C(id a1)
{
  off_10058C1B0 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

CSDAVConferenceProvider *__cdecl sub_100011CD4(id a1, NSUUID *a2, OS_dispatch_queue *a3)
{
  id v4 = a3;
  int v5 = a2;
  uint64_t v6 = [[CSDAVConferenceProvider alloc] initWithClientUUID:v5 serialQueue:v4];

  return v6;
}

void sub_100011EE0(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 12);
  id v3 = sub_100008DCC();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2 != 1)
  {
    if (v4)
    {
      int v35 = *(_DWORD *)(*(void *)(a1 + 32) + 12);
      *(_DWORD *)buf = 67109120;
      LODWORD(v39) = v35;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[WARN] Attempted to prepare conference which has already started preparing (state=%d)", buf, 8u);
    }
    goto LABEL_14;
  }
  if (v4)
  {
    int v5 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Preparing conference with configuration: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 32) setState:2];
  [*(id *)(a1 + 32) setConfiguration:*(void *)(a1 + 40)];
  uint64_t v6 = [*(id *)(a1 + 32) conferenceProviderCreationBlock];
  uint64_t v7 = [*(id *)(a1 + 32) configuration];
  unint64_t v8 = [v7 clientUUID];
  char v9 = [*(id *)(a1 + 32) queue];
  BOOL v10 = ((void (**)(void, void *, void *))v6)[2](v6, v8, v9);
  [*(id *)(a1 + 32) setConferenceProvider:v10];

  int v11 = [*(id *)(a1 + 32) conferenceProvider];

  if (!v11)
  {
    v36 = sub_100008DCC();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_1003A66B0(v36);
    }
    goto LABEL_19;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = [v12 conferenceProvider];
  [v13 setDelegate:v12];

  id v14 = [*(id *)(a1 + 40) deviceRole];
  unint64_t v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Initializing new callID with device role %d", buf, 8u);
  }

  char v16 = [*(id *)(a1 + 32) conferenceProvider];
  unint64_t v17 = [*(id *)(a1 + 40) reportingHierarchyToken];
  unsigned int v18 = [v16 initializeNewCallWithDeviceRole:v14 reportingHierarchyToken:v17];

  if (!v18)
  {
    v36 = sub_100008DCC();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_1003A66F4((int)v14, v36);
    }
LABEL_19:

    [*(id *)(a1 + 32) _setEndedWithReason:1 error:0];
    return;
  }
  unsigned int v19 = [*(id *)(a1 + 40) requiresInviteDictionary];
  long long v20 = *(void **)(a1 + 32);
  if (v19)
  {
    long long v21 = [v20 conferenceProvider];
    [*(id *)(a1 + 40) localPortraitAspectRatio];
    double v23 = v22;
    double v25 = v24;
    [*(id *)(a1 + 40) localLandscapeAspectRatio];
    objc_msgSend(v21, "setLocalPortraitAspectRatio:localLandscapeAspectRatio:", v23, v25, v26, v27);

    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_100012358;
    v37[3] = &unk_100504FB8;
    v37[4] = *(void *)(a1 + 32);
    id v3 = objc_retainBlock(v37);
    unsigned int v28 = sub_100008DCC();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = [*(id *)(a1 + 40) remoteInviteDictionary];
      *(_DWORD *)buf = 138412290;
      v39 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Fetching local invite dictionary using remote invite dictionary %@", buf, 0xCu);
    }
    uint64_t v30 = [*(id *)(a1 + 32) conferenceProvider];
    unint64_t v31 = [*(id *)(a1 + 32) conferenceProvider];
    id v32 = [v31 callID];
    uint64_t v33 = [*(id *)(a1 + 40) remoteInviteDictionary];
    v34 = [*(id *)(a1 + 32) queue];
    [v30 inviteDictionaryForCallID:v32 remoteInviteDictionary:v33 nonCellularCandidateTimeout:v3 block:v34 queue:0.0];

LABEL_14:
    return;
  }
  [v20 setState:3];
  [*(id *)(a1 + 32) _sendDelegateFinishedPreparing];
}

void sub_100012358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100008DCC();
  unint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003A676C();
    }

    [*(id *)(a1 + 32) _setEndedWithReason:4 error:v6];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fetched local invite dictionary: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) setLocalInviteDictionary:v5];
    [*(id *)(a1 + 32) setState:3];
    [*(id *)(a1 + 32) _sendDelegateFinishedPreparing];
  }
}

void sub_1000125CC(uint64_t a1)
{
  int v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) conferenceProvider];

  if (!v3)
  {
    uint64_t v13 = sub_100008DCC();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_WORD *)buf = 0;
    id v14 = "[WARN] Conference does not exist";
    unint64_t v15 = v13;
    uint32_t v16 = 2;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    goto LABEL_20;
  }
  if (*((_DWORD *)*v2 + 3) != 3)
  {
    uint64_t v13 = sub_100008DCC();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = *((_DWORD *)*v2 + 3);
    *(_DWORD *)buf = 67109120;
    LODWORD(v32) = v17;
    id v14 = "[WARN] Attempted to start conference which has not been prepared (state=%d)";
    unint64_t v15 = v13;
    uint32_t v16 = 8;
    goto LABEL_11;
  }
  [*v2 setState:4];
  unsigned int v4 = [*(id *)(a1 + 40) type];
  if (v4 == 1)
  {
    unsigned int v18 = [*(id *)(a1 + 32) conferenceProvider];
    unsigned int v19 = [*(id *)(a1 + 32) configuration];
    id v20 = [v19 isCaller];
    long long v21 = [*(id *)(a1 + 32) configuration];
    double v22 = [v21 capabilities];
    id v23 = [*(id *)(a1 + 40) socket];
    id v30 = 0;
    LODWORD(v20) = [v18 startConnectionAsCaller:v20 capabilities:v22 socket:v23 error:&v30];
    uint64_t v13 = v30;

    if (v20) {
      goto LABEL_13;
    }
LABEL_17:
    unsigned int v28 = sub_100008DCC();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1003A67E8(v2, (uint64_t)v13, v28);
    }

    [*v2 _setEndedWithReason:1 error:v13];
    goto LABEL_20;
  }
  if (v4 != 2)
  {
    uint64_t v13 = 0;
    goto LABEL_17;
  }
  id v5 = [*(id *)(a1 + 32) conferenceProvider];
  id v6 = [*(id *)(a1 + 32) configuration];
  id v7 = [v6 isCaller];
  unint64_t v8 = [*(id *)(a1 + 32) configuration];
  int v9 = [v8 remoteInviteDictionary];
  id v10 = [*(id *)(a1 + 32) configuration];
  int v11 = [v10 capabilities];
  uint64_t v12 = [*(id *)(a1 + 40) destination];
  id v29 = 0;
  LOBYTE(v7) = [v5 startConnectionAsCaller:v7 remoteInviteDictionary:v9 capabilities:v11 destination:v12 error:&v29];
  uint64_t v13 = v29;

  if ((v7 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  double v24 = sub_100008DCC();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    double v25 = [*v2 configuration];
    double v26 = +[NSDate date];
    [v26 timeIntervalSince1970];
    *(_DWORD *)buf = 138412546;
    id v32 = v25;
    __int16 v33 = 2048;
    uint64_t v34 = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Successfully started connection with configuration=%@ (timestamp: %f)", buf, 0x16u);
  }
  [*v2 _setUpDidStartTimeout];
LABEL_20:
}

id sub_1000129DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stop];
}

id sub_100012C14(uint64_t a1)
{
  int v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) conferenceProvider];
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling stop on conference %@", (uint8_t *)&v6, 0xCu);
  }
  unsigned int v4 = [*(id *)(a1 + 32) conferenceProvider];
  [v4 stop];

  return [*(id *)(a1 + 32) setCapturingLocalVideo:0];
}

void sub_100012D80(uint64_t a1)
{
  int v2 = *(int **)(a1 + 32);
  if (v2[3] > 3)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(void **)(a1 + 32);
      int v7 = 138412290;
      unint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Attempted to cancel a conference that has already started connecting: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    [v2 setState:6];
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = [*(id *)(a1 + 32) conferenceProvider];
      int v7 = 138412290;
      unint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Calling cancel on conference %@", (uint8_t *)&v7, 0xCu);
    }
    id v5 = [*(id *)(a1 + 32) conferenceProvider];
    [v5 cancel];
  }
}

void sub_100012F78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conferenceProvider];
  [v2 sendData:*(void *)(a1 + 40)];
}

void sub_1000130A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conferenceProvider];
  [v2 setPeerReportingIdentifier:*(void *)(a1 + 40) sessionIdentifier:*(void *)(a1 + 48)];
}

void sub_1000132EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013304(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013314(uint64_t a1)
{
}

void sub_10001331C(uint64_t a1)
{
}

void sub_100013434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001344C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) configuration];
  uint64_t v2 = [v5 remoteInviteDictionary];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100013568(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) configuration];
    unsigned int v4 = [v3 remoteInviteDictionary];
    uint64_t v5 = *(void *)(a1 + 40);
    int v8 = 138412546;
    int v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting remote invite dictionary from %@ to %@", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = [*(id *)(a1 + 32) configuration];
  [v7 setRemoteInviteDictionary:v6];
}

void sub_100013724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001373C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conferenceProvider];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 callID];
}

void sub_100013858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013870(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) configuration];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isCaller];
}

void sub_100013964(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) configuration];
    unsigned int v4 = [v3 isCaller];
    int v5 = *(unsigned __int8 *)(a1 + 40);
    v8[0] = 67109376;
    v8[1] = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting caller from %d to %d", (uint8_t *)v8, 0xEu);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
  int v7 = [*(id *)(a1 + 32) configuration];
  [v7 setCaller:v6];
}

void sub_100013B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013B74(uint64_t a1)
{
}

void sub_100013D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013D28(uint64_t a1)
{
}

void sub_100013EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013EDC(uint64_t a1)
{
}

void sub_100014038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014050(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 12);
  return result;
}

void sub_100014258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014270(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 96);
  return result;
}

void sub_100014344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001435C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isMuted];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100014460(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isMuted];
  if (*(unsigned __int8 *)(a1 + 40) != result)
  {
    uint64_t v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 40);
      int v5 = [*(id *)(a1 + 32) conferenceProvider];
      v8[0] = 67109378;
      v8[1] = v4;
      __int16 v9 = 2112;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting microphoneMuted to %d for %@", (uint8_t *)v8, 0x12u);
    }
    uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
    int v7 = [*(id *)(a1 + 32) conferenceProvider];
    [v7 setMicrophoneMuted:v6];

    return [*(id *)(a1 + 32) _sendDelegateMutedChanged];
  }
  return result;
}

void sub_10001462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100014644(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isSendingAudio];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10001476C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) conferenceProvider];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    unsigned int v4 = [*(id *)(a1 + 32) _isSendingAudio];
    int v5 = *(unsigned __int8 *)(a1 + 40);

    if (v5 != v4)
    {
      uint64_t v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int8 *)(a1 + 40);
        v10[0] = 67109120;
        v10[1] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting sendingAudio to %d", (uint8_t *)v10, 8u);
      }

      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
      __int16 v9 = [*(id *)(a1 + 32) conferenceProvider];
      [v9 setAudioPaused:v8];
    }
  }
}

void sub_100014934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001494C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isSendingAudio];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100014A74(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) conferenceProvider];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    unsigned int v4 = [*(id *)(a1 + 32) _isSendingAudioData];
    int v5 = *(unsigned __int8 *)(a1 + 40);

    if (v5 != v4)
    {
      uint64_t v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int8 *)(a1 + 40);
        v10[0] = 67109120;
        v10[1] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting sendingAudioData to %d", (uint8_t *)v10, 8u);
      }

      uint64_t v8 = *(unsigned __int8 *)(a1 + 40);
      __int16 v9 = [*(id *)(a1 + 32) conferenceProvider];
      [v9 setSendingAudio:v8];
    }
  }
}

void sub_100014C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014C4C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_100014D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100014D38(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isSendingVideo];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100014EA8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _isSendingVideo];
  uint64_t v3 = *(int **)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != v2)
  {
    uint64_t v17 = [v3 conferenceProvider];
    if (v17)
    {
      unsigned int v18 = (void *)v17;
      unsigned int v19 = [*(id *)(a1 + 32) _isSendingVideoExpected];

      if (!v19)
      {
        id v20 = sub_100008DCC();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v21 = *(unsigned char *)(a1 + 40) == 0;
          int v26 = 67109120;
          BOOL v27 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Setting conferenceProvider videoPaused to %d", (uint8_t *)&v26, 8u);
        }

        BOOL v22 = *(unsigned char *)(a1 + 40) == 0;
        id v23 = [*(id *)(a1 + 32) conferenceProvider];
        [v23 setVideoPaused:v22];
      }
    }
    double v24 = sub_100008DCC();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(unsigned __int8 *)(a1 + 40);
      int v26 = 67109120;
      BOOL v27 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Setting sendingVideo to %d", (uint8_t *)&v26, 8u);
    }

    uint32_t v16 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
    [*(id *)(a1 + 32) setSendingVideoExpected:v16];
    goto LABEL_15;
  }
  if (v3[3] <= 3)
  {
    unsigned int v4 = [v3 configuration];
    int v5 = [v4 capabilities];
    unsigned int v6 = [v5 isVideoPausedToStart];
    int v7 = *(unsigned __int8 *)(a1 + 40);

    if (v7 == v6)
    {
      uint64_t v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v9 = *(_DWORD **)(a1 + 32);
        int v10 = v9[3];
        uint64_t v11 = [v9 configuration];
        uint64_t v12 = [v11 capabilities];
        unsigned int v13 = [v12 isVideoPausedToStart];
        BOOL v14 = *(unsigned char *)(a1 + 40) == 0;
        int v26 = 67109632;
        BOOL v27 = v10;
        __int16 v28 = 1024;
        unsigned int v29 = v13;
        __int16 v30 = 1024;
        BOOL v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "State is %d, updating isVideoPausedToStart from %d to %d", (uint8_t *)&v26, 0x14u);
      }
      unint64_t v15 = [*(id *)(a1 + 32) configuration];
      uint32_t v16 = [v15 capabilities];

      [v16 setIsVideoPausedToStart:*(unsigned char *)(a1 + 40) == 0];
      [*(id *)(a1 + 32) updateCapabilities:v16];
LABEL_15:
    }
  }
}

void sub_100015278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100015290(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _isSendingVideoExpected];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001545C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) configuration];
    unsigned int v4 = [v3 capabilities];
    uint64_t v5 = *(void *)(a1 + 40);
    int v10 = 138412546;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating capabilities from: %@ to %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = [*(id *)(a1 + 32) configuration];
  [v7 setCapabilities:v6];

  uint64_t v8 = [*(id *)(a1 + 32) conferenceProvider];

  if (v8)
  {
    __int16 v9 = [*(id *)(a1 + 32) conferenceProvider];
    [v9 updateCapabilities:*(void *)(a1 + 40)];
  }
}

void sub_10001564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015664(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

void sub_10001575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100015774(uint64_t a1)
{
  __n128 result = *(__n128 *)(*(void *)(a1 + 32) + 136);
  *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = result;
  return result;
}

void sub_100015824(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) conferenceProvider];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    BOOL v4 = NSEqualSizes(*(NSSize *)(*(void *)(a1 + 32) + 136), *(NSSize *)(a1 + 40));

    if (!v4)
    {
      uint64_t v5 = sub_100008DCC();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = NSStringFromSize(*(NSSize *)(*(void *)(a1 + 32) + 136));
        int v7 = NSStringFromSize(*(NSSize *)(a1 + 40));
        int v9 = 138412546;
        int v10 = v6;
        __int16 v11 = 2112;
        __int16 v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting remoteVideoPresentationSize from %@ to %@", (uint8_t *)&v9, 0x16u);
      }
      *(_OWORD *)(*(void *)(a1 + 32) + 136) = *(_OWORD *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 32) conferenceProvider];
      objc_msgSend(v8, "setRemoteVideoPresentationSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
    }
  }
}

void sub_100015A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015A48(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 16);
  return result;
}

void sub_100015AF4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) conferenceProvider];
  if (v2)
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
    int v4 = *(_DWORD *)(a1 + 40);

    if (v3 != v4)
    {
      uint64_t v5 = sub_100008DCC();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
        int v7 = *(_DWORD *)(a1 + 40);
        v9[0] = 67109376;
        v9[1] = v6;
        __int16 v10 = 1024;
        int v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting remoteVideoPresentationState from %d to %d", (uint8_t *)v9, 0xEu);
      }

      *(_DWORD *)(*(void *)(a1 + 32) + 16) = *(_DWORD *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 32) conferenceProvider];
      [v8 setRemoteVideoPresentationState:*(unsigned int *)(a1 + 40)];
    }
  }
}

void *sub_100015CC4(void *result)
{
  if (*(int *)(result[4] + 12) <= 4)
  {
    id v1 = result;
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1003A691C(v2);
    }

    int v3 = [(id)v1[4] conferenceProvider];
    [v3 stop];

    return [(id)v1[4] _setEndedWithReason:3 error:0];
  }
  return result;
}

void sub_100015E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100015E1C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) configuration];
  uint64_t v2 = [v3 capabilities];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 deviceRole];
}

void sub_100015F20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) configuration];
  id v3 = [v2 capabilities];
  unsigned int v4 = [v3 deviceRole];
  int v5 = *(_DWORD *)(a1 + 40);

  if (v4 != v5)
  {
    int v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = [*(id *)(a1 + 32) configuration];
      uint64_t v8 = [v7 capabilities];
      unsigned int v9 = [v8 deviceRole];
      int v10 = *(_DWORD *)(a1 + 40);
      v17[0] = 67109376;
      v17[1] = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating device role from %d to %d", (uint8_t *)v17, 0xEu);
    }
    uint64_t v11 = *(unsigned int *)(a1 + 40);
    __int16 v12 = [*(id *)(a1 + 32) configuration];
    uint64_t v13 = [v12 capabilities];
    [v13 setDeviceRole:v11];

    BOOL v14 = [*(id *)(a1 + 32) conferenceProvider];
    unint64_t v15 = [*(id *)(a1 + 32) configuration];
    uint32_t v16 = [v15 capabilities];
    [v14 updateCapabilities:v16];
  }
}

id sub_10001614C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCapturingLocalVideo:1];
}

id sub_1000161EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCapturingLocalVideo:0];
}

void sub_10001632C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conferenceFinishedPreparing:*(void *)(a1 + 32)];
  }
}

void sub_100016400(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conferenceStarted:*(void *)(a1 + 32)];
  }
}

void sub_100016504(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) endedWithReason:*(void *)(a1 + 48) error:*(void *)(a1 + 40)];
  }
}

void sub_1000165DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 connectionClosedForConference:*(void *)(a1 + 32)];
  }
}

void sub_1000166B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 mutedChangedForConference:*(void *)(a1 + 32)];
  }
}

void sub_100016784(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 sendingAudioChangedForConference:*(void *)(a1 + 32)];
  }
}

void sub_100016858(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 receivedFirstRemoteFrameForConference:*(void *)(a1 + 32)];
  }
}

void sub_10001692C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 remoteVideoPausedForConference:*(void *)(a1 + 32)];
  }
}

void sub_100016A04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) remoteMediaStalled:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_100016B04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) inputFrequencyLevelChangedTo:*(void *)(a1 + 40)];
  }
}

void sub_100016C00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) outputFrequencyLevelChangedTo:*(void *)(a1 + 40)];
  }
}

void sub_100016CD8(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v2) = *(_DWORD *)(a1 + 40);
    [v3 conference:*(void *)(a1 + 32) inputLevelChangedTo:v2];
  }
}

void sub_100016DB4(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v2) = *(_DWORD *)(a1 + 40);
    [v3 conference:*(void *)(a1 + 32) outputLevelChangedTo:v2];
  }
}

void sub_100016E8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) changedBytesOfDataUsed:*(void *)(a1 + 40)];
  }
}

void sub_100016F90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 conference:*(void *)(a1 + 32) didReceiveData:*(void *)(a1 + 40) forCallID:*(void *)(a1 + 48)];
  }
}

void sub_10001713C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v20 = 138412802;
    uint64_t v21 = v4;
    __int16 v22 = 1024;
    int v23 = v3;
    __int16 v24 = 2112;
    uint64_t v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conference=%@ didStartSession=%d error=%@", (uint8_t *)&v20, 0x1Cu);
  }

  if (*(unsigned char *)(a1 + 48) && !*(void *)(a1 + 40))
  {
    int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 12);
    BOOL v14 = sub_100008DCC();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v13 > 4)
    {
      if (v15)
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] Session is already past Connected state, not sending delegate started", (uint8_t *)&v20, 2u);
      }
    }
    else
    {
      if (v15)
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully started session", (uint8_t *)&v20, 2u);
      }

      [*(id *)(a1 + 32) setState:5];
      BOOL v14 = [*(id *)(a1 + 32) _isSendingVideoExpected];
      if (v14)
      {
        uint32_t v16 = sub_100008DCC();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = [v14 BOOLValue];
          int v20 = 67109120;
          LODWORD(v21) = v17 ^ 1;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Session is connected, setting videoPaused to expected value: %d", (uint8_t *)&v20, 8u);
        }

        uint64_t v18 = [v14 BOOLValue] ^ 1;
        int v19 = [*(id *)(a1 + 32) conferenceProvider];
        [v19 setVideoPaused:v18];
      }
      [*(id *)(a1 + 32) _sendDelegateStarted];
    }
  }
  else
  {
    int v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003A6960(a1, v6, v7, v8, v9, v10, v11, v12);
    }

    [*(id *)(a1 + 32) _setEndedWithReason:5 error:*(void *)(a1 + 40)];
  }
}

void sub_100017460(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(char **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    __int16 v24 = v3;
    __int16 v25 = 2112;
    uint64_t v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "didStopError=%@ callMetadata=%@", buf, 0x16u);
  }

  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v22 = 0;
  id v7 = [v5 _endedReasonForDidStopError:v6 error:&v22];
  id v8 = v22;
  if (v8)
  {
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1003A69D0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  uint32_t v16 = *(void **)(a1 + 40);
  if (v16)
  {
    unsigned int v17 = [v16 objectForKeyedSubscript:AVConferenceSessionSentBytes];
    uint64_t v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:AVConferenceSessionReceivedBytes];
    int v19 = (char *)[v17 integerValue];
    int v20 = &v19[(void)[v18 integerValue]];
    uint64_t v21 = sub_100008DCC();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      __int16 v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Sending delegate bytesOfDataUsageChanged: %ld", buf, 0xCu);
    }

    [*(id *)(a1 + 48) _sendDelegateBytesOfDataUsageChanged:v20];
  }
  [*(id *)(a1 + 48) _stop];
  [*(id *)(a1 + 48) _setEndedWithReason:v7 error:v8];
}

id sub_1000176DC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "", v4, 2u);
  }

  return [*(id *)(a1 + 32) _sendDelegateConnectionClosed];
}

id sub_100017808(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendDelegateInputFrequencyLevelChanged:*(void *)(a1 + 40)];
}

id sub_1000178CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendDelegateOutputFrequencyLevelChanged:*(void *)(a1 + 40)];
}

id sub_100017970(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  return _[*(id *)(a1 + 32) _sendDelegateInputLevelChanged:a2];
}

id sub_100017A18(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  return _[*(id *)(a1 + 32) _sendDelegateOutputLevelChanged:a2];
}

id sub_100017AE4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "didPauseAudio=%d error=%@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _sendDelegateSendingAudioChanged];
}

void sub_100017C60(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    int v13 = 67109378;
    int v14 = v3;
    __int16 v15 = 2112;
    uint32_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "didPauseVideo=%d error=%@", (uint8_t *)&v13, 0x12u);
  }

  uint64_t v5 = *(int **)(a1 + 40);
  if (v5[3] > 4)
  {
    uint64_t v8 = [v5 _isSendingVideoExpected];
    uint64_t v6 = v8;
    if (!*(void *)(a1 + 32)
      && v8
      && *(unsigned __int8 *)(a1 + 48) == [v8 BOOLValue])
    {
      uint64_t v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int8 *)(a1 + 48);
        int v13 = 67109378;
        int v14 = v10;
        __int16 v15 = 2112;
        uint32_t v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Video was set to didPauseVideo: %d sendingVideoExpected: %@. Setting sendingVideo to sendingVideoExpected", (uint8_t *)&v13, 0x12u);
      }

      uint64_t v11 = [v6 BOOLValue] ^ 1;
      uint64_t v12 = [*(id *)(a1 + 40) conferenceProvider];
      [v12 setVideoPaused:v11];
    }
    else
    {
      [*(id *)(a1 + 40) setSendingVideoExpected:0];
    }
  }
  else
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 40) + 12);
      int v13 = 67109120;
      int v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Not setting sendingVideoExpected to nil since our state is %d", (uint8_t *)&v13, 8u);
    }
  }
}

id sub_100017ED8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "", v4, 2u);
  }

  [*(id *)(a1 + 32) setHasReceivedFirstRemoteFrame:1];
  return [*(id *)(a1 + 32) _sendDelegateReceivedFirstRemoteFrame];
}

id sub_100017FF0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "remoteVideoPaused=%d", (uint8_t *)v5, 8u);
  }

  [*(id *)(a1 + 32) setRemoteVideoPaused:*(unsigned __int8 *)(a1 + 40)];
  return [*(id *)(a1 + 32) _sendDelegateRemoteVideoPaused];
}

id sub_100018144(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "remoteMediaStalled=%d", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 32) _sendDelegateRemoteMediaStalled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000182AC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1003A6A3C(a1, v2, v3, v4, v5, v6, v7, v8);
  }

  return [*(id *)(a1 + 40) _setEndedWithReason:6 error:0];
}

id sub_1000183C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendDelegateReceivedData:*(void *)(a1 + 40) forCallID:*(void *)(a1 + 48)];
}

void sub_100018748(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000188BC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100018950(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100018A3C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100018BB8(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 providerByIdentifier];
  [v4 channelProviderManagerDataSource:v2 didChangeProviderByIdentifier:v3];
}

void sub_100018DE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100019D34(CSDMessagingConversationParticipant *self, SEL a2)
{
  v7.receiver = self;
  v7.super_class = (Class)CSDMessagingConversationParticipant;
  uint64_t v3 = [(CSDMessagingConversationParticipant *)&v7 description];
  id v4 = [(CSDMessagingConversationParticipant *)self dictionaryRepresentation];
  uint64_t v5 = +[NSString stringWithFormat:@"%@ %@", v3, v4];

  return v5;
}

uint64_t sub_10001A534(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 0x40u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_198;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_200;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_198:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_200:
        uint64_t v130 = 76;
        goto LABEL_294;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(_DWORD *)(a1 + 104) |= 1u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_204;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_204:
        *(void *)(a1 + 8) = v20;
        goto LABEL_295;
      case 3u:
        int v23 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 40), v23);
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_297;
        }
        goto LABEL_103;
      case 4u:
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 32;
        goto LABEL_133;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(_DWORD *)(a1 + 104) |= 0x2000u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_208;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_208:
        BOOL v131 = v28 != 0;
        uint64_t v132 = 92;
        goto LABEL_289;
      case 6u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(_DWORD *)(a1 + 104) |= 0x10000u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                uint64_t v33 = 0;
                goto LABEL_212;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v33 = 0;
        }
LABEL_212:
        BOOL v131 = v33 != 0;
        uint64_t v132 = 95;
        goto LABEL_289;
      case 7u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(_DWORD *)(a1 + 104) |= 0x800u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              BOOL v9 = v37++ >= 9;
              if (v9)
              {
                uint64_t v38 = 0;
                goto LABEL_216;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v38 = 0;
        }
LABEL_216:
        BOOL v131 = v38 != 0;
        uint64_t v132 = 90;
        goto LABEL_289;
      case 8u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(_DWORD *)(a1 + 104) |= 0x4000u;
        while (2)
        {
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 == -1 || v44 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 1;
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              BOOL v9 = v42++ >= 9;
              if (v9)
              {
                uint64_t v43 = 0;
                goto LABEL_220;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v43 = 0;
        }
LABEL_220:
        BOOL v131 = v43 != 0;
        uint64_t v132 = 93;
        goto LABEL_289;
      case 9u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_DWORD *)(a1 + 104) |= 0x1000u;
        while (2)
        {
          unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 == -1 || v49 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
            v48 |= (unint64_t)(v50 & 0x7F) << v46;
            if (v50 < 0)
            {
              v46 += 7;
              BOOL v9 = v47++ >= 9;
              if (v9)
              {
                uint64_t v48 = 0;
                goto LABEL_224;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v48 = 0;
        }
LABEL_224:
        BOOL v131 = v48 != 0;
        uint64_t v132 = 91;
        goto LABEL_289;
      case 0xAu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 0x10u;
        while (2)
        {
          unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 == -1 || v53 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
            v14 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              BOOL v9 = v52++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_228;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_228:
        uint64_t v130 = 68;
        goto LABEL_294;
      case 0xBu:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 4u;
        while (2)
        {
          unint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v57 == -1 || v57 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57 + 1;
            v14 |= (unint64_t)(v58 & 0x7F) << v55;
            if (v58 < 0)
            {
              v55 += 7;
              BOOL v9 = v56++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_232;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_232:
        uint64_t v130 = 48;
        goto LABEL_294;
      case 0xCu:
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        *(_DWORD *)(a1 + 104) |= 0x400u;
        while (2)
        {
          unint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v62 == -1 || v62 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if (v63 < 0)
            {
              v59 += 7;
              BOOL v9 = v60++ >= 9;
              if (v9)
              {
                uint64_t v61 = 0;
                goto LABEL_236;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v61 = 0;
        }
LABEL_236:
        BOOL v131 = v61 != 0;
        uint64_t v132 = 89;
        goto LABEL_289;
      case 0xDu:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0;
        *(_DWORD *)(a1 + 104) |= 0x200u;
        while (2)
        {
          unint64_t v67 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v67 == -1 || v67 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v68 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67 + 1;
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if (v68 < 0)
            {
              v64 += 7;
              BOOL v9 = v65++ >= 9;
              if (v9)
              {
                uint64_t v66 = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v66 = 0;
        }
LABEL_240:
        BOOL v131 = v66 != 0;
        uint64_t v132 = 88;
        goto LABEL_289;
      case 0xEu:
        int v23 = objc_alloc_init(CSDMessagingConversationParticipantAssociation);
        objc_storeStrong((id *)(a1 + 16), v23);
        if PBReaderPlaceMark() && (sub_10000A020((uint64_t)v23, a2))
        {
LABEL_103:
          PBReaderRecallMark();

LABEL_295:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_297:

        return 0;
      case 0xFu:
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        *(_DWORD *)(a1 + 104) |= 0x40000u;
        while (2)
        {
          unint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v72 == -1 || v72 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72 + 1;
            v71 |= (unint64_t)(v73 & 0x7F) << v69;
            if (v73 < 0)
            {
              v69 += 7;
              BOOL v9 = v70++ >= 9;
              if (v9)
              {
                uint64_t v71 = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v71 = 0;
        }
LABEL_244:
        BOOL v131 = v71 != 0;
        uint64_t v132 = 97;
        goto LABEL_289;
      case 0x10u:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 2u;
        while (2)
        {
          unint64_t v76 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v76 == -1 || v76 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v77 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76 + 1;
            v14 |= (unint64_t)(v77 & 0x7F) << v74;
            if (v77 < 0)
            {
              v74 += 7;
              BOOL v9 = v75++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_248:
        uint64_t v130 = 24;
        goto LABEL_294;
      case 0x11u:
        char v78 = 0;
        unsigned int v79 = 0;
        uint64_t v80 = 0;
        *(_DWORD *)(a1 + 104) |= 0x400000u;
        while (2)
        {
          unint64_t v81 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v81 == -1 || v81 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v82 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81 + 1;
            v80 |= (unint64_t)(v82 & 0x7F) << v78;
            if (v82 < 0)
            {
              v78 += 7;
              BOOL v9 = v79++ >= 9;
              if (v9)
              {
                uint64_t v80 = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v80 = 0;
        }
LABEL_252:
        BOOL v131 = v80 != 0;
        uint64_t v132 = 101;
        goto LABEL_289;
      case 0x12u:
        char v83 = 0;
        unsigned int v84 = 0;
        uint64_t v85 = 0;
        *(_DWORD *)(a1 + 104) |= 0x100000u;
        while (2)
        {
          unint64_t v86 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v86 == -1 || v86 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v87 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v86);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v86 + 1;
            v85 |= (unint64_t)(v87 & 0x7F) << v83;
            if (v87 < 0)
            {
              v83 += 7;
              BOOL v9 = v84++ >= 9;
              if (v9)
              {
                uint64_t v85 = 0;
                goto LABEL_256;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v85 = 0;
        }
LABEL_256:
        BOOL v131 = v85 != 0;
        uint64_t v132 = 99;
        goto LABEL_289;
      case 0x13u:
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 56;
LABEL_133:
        v88 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_295;
      case 0x14u:
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v91 = 0;
        *(_DWORD *)(a1 + 104) |= 0x20000u;
        while (2)
        {
          unint64_t v92 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v92 == -1 || v92 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v93 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v92);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v92 + 1;
            v91 |= (unint64_t)(v93 & 0x7F) << v89;
            if (v93 < 0)
            {
              v89 += 7;
              BOOL v9 = v90++ >= 9;
              if (v9)
              {
                uint64_t v91 = 0;
                goto LABEL_260;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v91 = 0;
        }
LABEL_260:
        BOOL v131 = v91 != 0;
        uint64_t v132 = 96;
        goto LABEL_289;
      case 0x15u:
        char v94 = 0;
        unsigned int v95 = 0;
        uint64_t v96 = 0;
        *(_DWORD *)(a1 + 104) |= 0x80000u;
        while (2)
        {
          unint64_t v97 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v97 == -1 || v97 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v98 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v97);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v97 + 1;
            v96 |= (unint64_t)(v98 & 0x7F) << v94;
            if (v98 < 0)
            {
              v94 += 7;
              BOOL v9 = v95++ >= 9;
              if (v9)
              {
                uint64_t v96 = 0;
                goto LABEL_264;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v96 = 0;
        }
LABEL_264:
        BOOL v131 = v96 != 0;
        uint64_t v132 = 98;
        goto LABEL_289;
      case 0x16u:
        char v99 = 0;
        unsigned int v100 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 0x100u;
        while (2)
        {
          unint64_t v101 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v101 == -1 || v101 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v102 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v101);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v101 + 1;
            v14 |= (unint64_t)(v102 & 0x7F) << v99;
            if (v102 < 0)
            {
              v99 += 7;
              BOOL v9 = v100++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_268;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_268:
        uint64_t v130 = 84;
        goto LABEL_294;
      case 0x17u:
        char v103 = 0;
        unsigned int v104 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 0x80u;
        while (2)
        {
          unint64_t v105 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v105 == -1 || v105 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v106 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v105);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v105 + 1;
            v14 |= (unint64_t)(v106 & 0x7F) << v103;
            if (v106 < 0)
            {
              v103 += 7;
              BOOL v9 = v104++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_272;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_272:
        uint64_t v130 = 80;
        goto LABEL_294;
      case 0x18u:
        char v107 = 0;
        unsigned int v108 = 0;
        uint64_t v109 = 0;
        *(_DWORD *)(a1 + 104) |= 0x200000u;
        while (2)
        {
          unint64_t v110 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v110 == -1 || v110 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v111 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v110);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v110 + 1;
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if (v111 < 0)
            {
              v107 += 7;
              BOOL v9 = v108++ >= 9;
              if (v9)
              {
                uint64_t v109 = 0;
                goto LABEL_276;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v109 = 0;
        }
LABEL_276:
        BOOL v131 = v109 != 0;
        uint64_t v132 = 100;
        goto LABEL_289;
      case 0x19u:
        char v112 = 0;
        unsigned int v113 = 0;
        uint64_t v114 = 0;
        *(_DWORD *)(a1 + 104) |= 0x800000u;
        while (2)
        {
          unint64_t v115 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v115 == -1 || v115 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v116 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v115);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v115 + 1;
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if (v116 < 0)
            {
              v112 += 7;
              BOOL v9 = v113++ >= 9;
              if (v9)
              {
                uint64_t v114 = 0;
                goto LABEL_280;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v114 = 0;
        }
LABEL_280:
        BOOL v131 = v114 != 0;
        uint64_t v132 = 102;
        goto LABEL_289;
      case 0x1Au:
        char v117 = 0;
        unsigned int v118 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 0x20u;
        while (2)
        {
          unint64_t v119 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v119 == -1 || v119 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v120 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v119);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v119 + 1;
            v14 |= (unint64_t)(v120 & 0x7F) << v117;
            if (v120 < 0)
            {
              v117 += 7;
              BOOL v9 = v118++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_284;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_284:
        uint64_t v130 = 72;
        goto LABEL_294;
      case 0x1Bu:
        char v121 = 0;
        unsigned int v122 = 0;
        uint64_t v123 = 0;
        *(_DWORD *)(a1 + 104) |= 0x8000u;
        while (2)
        {
          unint64_t v124 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v124 == -1 || v124 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v125 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v124);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v124 + 1;
            v123 |= (unint64_t)(v125 & 0x7F) << v121;
            if (v125 < 0)
            {
              v121 += 7;
              BOOL v9 = v122++ >= 9;
              if (v9)
              {
                uint64_t v123 = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v123 = 0;
        }
LABEL_288:
        BOOL v131 = v123 != 0;
        uint64_t v132 = 94;
LABEL_289:
        *(unsigned char *)(a1 + v132) = v131;
        goto LABEL_295;
      case 0x1Cu:
        char v126 = 0;
        unsigned int v127 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 104) |= 8u;
        while (2)
        {
          unint64_t v128 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v128 == -1 || v128 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v129 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v128);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v128 + 1;
            v14 |= (unint64_t)(v129 & 0x7F) << v126;
            if (v129 < 0)
            {
              v126 += 7;
              BOOL v9 = v127++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_293;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_293:
        uint64_t v130 = 64;
LABEL_294:
        *(_DWORD *)(a1 + v130) = v14;
        goto LABEL_295;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_295;
    }
  }
}

void sub_10001D9E4(uint64_t a1)
{
  id v2 = [CSDUserActivityManager alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  char v8 = objc_alloc_init(CSDUserActivityCommunicator);
  char v4 = +[TUCallCenter sharedInstance];
  id v5 = objc_alloc_init((Class)TUFeatureFlags);
  unint64_t v6 = [(CSDUserActivityManager *)v2 initWithQueue:v3 activityCommunicator:v8 callCenter:v4 featureFlags:v5];
  unint64_t v7 = (void *)qword_10058C1C0;
  qword_10058C1C0 = (uint64_t)v6;
}

BOOL sub_10001E8E8(id a1, TUCall *a2)
{
  id v2 = a2;
  if ([(TUCall *)v2 status] == 4) {
    unsigned int v3 = [(TUCall *)v2 shouldSuppressRingtone] ^ 1;
  }
  else {
    LOBYTE(v3) = 0;
  }

  return v3;
}

id sub_10001EA48(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 callGroupUUID];
  char v4 = [*(id *)(a1 + 32) groupUUID];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_100020C04(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 5)
  {
    uint64_t v24 = [*(id *)(a1 + 40) featureFlags];
    unsigned int v25 = [v24 conversationHandoffEnabled];

    if (v25)
    {
      char v26 = *(void **)(a1 + 32);
      if (v26)
      {
        int v23 = objc_msgSend(v26, "tu_handoffEligibility");
        [v23 setOriginatingDeviceType:*(void *)(a1 + 48)];
        if (v23)
        {
          unsigned int v27 = +[NSNotificationCenter defaultCenter];
          [v27 postNotificationName:@"CSDUserActivityConversationHandoffRecommendationChangedNotification" object:v23 userInfo:0];
        }
        else
        {
          uint64_t v28 = sub_100008DCC();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            *(void *)unsigned int v37 = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[WARN] User activity manager could not parse eligibility from dynamicIdentifier %@", buf, 0xCu);
          }
        }
      }
      else
      {
        int v23 = sub_100008DCC();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[WARN] Cannot process received broadcast for conversation handoff activity type because it did not have a dynamic identifier set.", buf, 2u);
        }
      }
      goto LABEL_18;
    }
  }
  else if (v2 == 3)
  {
    char v30 = [*(id *)(a1 + 32) componentsSeparatedByString:@"."];
    unsigned int v3 = [v30 lastObject];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    char v4 = [*(id *)(a1 + 40) callCenter];
    id v5 = [v4 audioAndVideoCallsWithStatus:4];

    id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v33;
      char v31 = v3;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v33 != v8) {
            objc_enumerationMutation(v5);
          }
          int v10 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v11 = [v10 handle];
          char v12 = [v11 value];
          unsigned int v13 = [v12 isEqualToString:v3];

          uint64_t v14 = sub_100008DCC();
          BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            if (v15)
            {
              int v16 = *(_DWORD *)(a1 + 56);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)unsigned int v37 = v16;
              *(_WORD *)&v37[4] = 2112;
              *(void *)&v37[6] = v3;
              __int16 v38 = 2112;
              unint64_t v39 = v10;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@", buf, 0x1Cu);
            }

            [v10 suppressRingtoneDueToRemoteSuppression];
          }
          else
          {
            if (v15)
            {
              id v17 = v7;
              uint64_t v18 = v8;
              unsigned int v19 = v5;
              int v20 = *(_DWORD *)(a1 + 56);
              unint64_t v21 = [v10 handle];
              char v22 = [v21 value];
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)unsigned int v37 = v20;
              id v5 = v19;
              uint64_t v8 = v18;
              id v7 = v17;
              unsigned int v3 = v31;
              *(_WORD *)&v37[4] = 2112;
              *(void *)&v37[6] = v31;
              __int16 v38 = 2112;
              unint64_t v39 = v22;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)", buf, 0x1Cu);
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v7);
    }

    int v23 = v30;
LABEL_18:
  }
}

void sub_100021050(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 5)
  {
    id v1 = [*(id *)(a1 + 32) featureFlags];
    unsigned int v2 = [v1 conversationHandoffEnabled];

    if (v2)
    {
      id v3 = +[NSNotificationCenter defaultCenter];
      [v3 postNotificationName:@"CSDUserActivityConversationHandoffRecommendationChangedNotification" object:0];
    }
  }
}

void sub_10002204C(id a1, NSString *a2, double a3)
{
  char v4 = a2;
  id v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412546;
    id v7 = v4;
    __int16 v8 = 2048;
    double v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling ADClientSetValueForDistributionKey() with key %@ and value %f", (uint8_t *)&v6, 0x16u);
  }

  if (qword_10058C1D8 != -1) {
    dispatch_once(&qword_10058C1D8, &stru_100505230);
  }
  off_10058C1D0(v4, a3);
}

void sub_10002214C(id a1)
{
  off_10058C1D0 = (uint64_t (*)(void, double))CUTWeakLinkSymbol();
}

void sub_100022984(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_1000229C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = [WeakRetained queue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100022B10;
    v8[3] = &unk_100504F10;
    id v9 = v3;
    id v10 = v6;
    dispatch_async(v7, v8);
  }
}

id sub_100022B10(uint64_t a1)
{
  BOOL v2 = (unint64_t)[*(id *)(a1 + 32) orientation] < 3;
  id v3 = *(void **)(a1 + 40);

  return _[v3 setInterfaceOrientationPortrait:v2];
}

id sub_100022B54(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "addDelegate:");
}

id sub_100022B60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = [WeakRetained voiceOverObserver];
  id v3 = [v2 isEnabled];

  return v3;
}

id sub_100022BB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = [WeakRetained voiceOverObserver];
  id v3 = [v2 shouldRouteToSpeakerWithProximity];

  return v3;
}

id sub_100022C00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = [WeakRetained voiceOverObserver];
  id v3 = [v2 isBrailleScreenInputEnabled];

  return v3;
}

void sub_100022C50(id a1, int a2)
{
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Asking BackBoard to set the proximity detection mode to (%u).", (uint8_t *)v4, 8u);
  }

  BKSHIDServicesRequestProximityDetectionMode();
}

BOOL sub_100023394(id a1, TUCall *a2)
{
  BOOL v2 = a2;
  if ([(TUCall *)v2 isVideo]) {
    BOOL v3 = [(TUCall *)v2 status] == 3 || [(TUCall *)v2 status] == 1;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

BOOL sub_1000233F8(id a1, TUCall *a2)
{
  BOOL v2 = a2;
  if (([(TUCall *)v2 isScreening] & 1) != 0
    || ![(TUCall *)v2 isEndpointOnCurrentDevice]
    || ([(TUCall *)v2 isRTT] & 1) != 0
    || ([(TUCall *)v2 isTTY] & 1) != 0)
  {
    BOOL v3 = 0;
  }
  else
  {
    uint64_t v5 = [(TUCall *)v2 provider];
    if ([v5 supportsCurrentPlatform]) {
      BOOL v3 = [(TUCall *)v2 status] == 1
    }
        || [(TUCall *)v2 status] == 2
        || [(TUCall *)v2 status] == 5
        || [(TUCall *)v2 status] == 3;
    else {
      BOOL v3 = 0;
    }
  }
  return v3;
}

BOOL sub_1000237EC(id a1, TUCall *a2)
{
  BOOL v2 = a2;
  BOOL v3 = ([(TUCall *)v2 isScreening] & 1) == 0
    && ([(TUCall *)v2 isVideo] & 1) == 0
    && ([(TUCall *)v2 status] == 1
     || [(TUCall *)v2 status] == 2
     || [(TUCall *)v2 status] == 5
     || [(TUCall *)v2 status] == 3);

  return v3;
}

id sub_100023A64(uint64_t a1)
{
  BOOL v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating proximity sensor state; audio routes changed.",
      v4,
      2u);
  }

  return [*(id *)(a1 + 32) updateProximitySensorState];
}

id sub_100023CA4(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    BOOL v3 = [v1 conferenceID];
    if ([v3 hasPrefix:@"ConferenceID:"])
    {
      uint64_t v4 = [v3 substringFromIndex:objc_msgSend(@"ConferenceID:", "length")];

      BOOL v3 = (void *)v4;
    }
    if ([v3 length])
    {
      uint64_t v5 = v3;
    }
    else
    {
      int v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [v2 conferenceID];
        __int16 v8 = [v2 GUID];
        int v11 = 138412802;
        id v12 = v2;
        __int16 v13 = 2112;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        int v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.", (uint8_t *)&v11, 0x20u);
      }
      uint64_t v5 = [v2 GUID];

      if (![v5 length])
      {
        id v9 = sub_100008DCC();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1003A6BAC(v9);
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

char *sub_100023E60(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 dataUploaded];
  BOOL v3 = (char *)[v2 integerValue];
  uint64_t v4 = [v1 dataDownloaded];

  uint64_t v5 = &v3[(void)[v4 integerValue]];
  return v5;
}

BOOL sub_10002543C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__participantIdentifier;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0;
            uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__participantIdentifier;
            goto LABEL_40;
          }
        }
        uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__participantIdentifier;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_40:
        *(void *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 24) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__audioPriority;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0;
        uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__audioPriority;
        goto LABEL_40;
      }
    }
    uint64_t v18 = &OBJC_IVAR___CSDMessagingParticipantProminenceEntry__audioPriority;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

IMAccount *__cdecl sub_100025B10(id a1, CXStartCallAction *a2)
{
  if ([(CXStartCallAction *)a2 isVideo]) {
    +[IMService facetimeService];
  }
  else {
  BOOL v2 = +[IMService callService];
  }
  if (qword_10058C208 != -1) {
    dispatch_once(&qword_10058C208, &stru_100505380);
  }
  BOOL v3 = off_10058C200(v2);

  return (IMAccount *)v3;
}

void sub_100025BB4(id a1)
{
  off_10058C200 = (uint64_t (*)(void))IMWeakLinkSymbol();
}

id sub_100026C24(uint64_t a1)
{
  BOOL v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling endChatWithReason on chat %@ with reason %ld", (uint8_t *)&v6, 0x16u);
  }

  return [*(id *)(a1 + 32) endChatWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_100026E44(id *a1)
{
  BOOL v2 = a1 + 4;
  id v3 = [a1[4] isVideo];
  id v4 = objc_alloc_init((Class)TUCallProviderManager);
  unsigned int v5 = [v2[1] imAccountForActionBlock];
  int v6 = ((void (**)(void, id))v5)[2](v5, *v2);

  if (v6 && [v6 isRegistered])
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v50 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Using account %@", buf, 0xCu);
    }

    __int16 v8 = [*v2 handle];
    uint64_t v9 = [v8 value];
    int v10 = [v6 imHandleWithID:v9];

    int v11 = [v10 ID];
    id v12 = [v11 length];

    if (v12)
    {
      unsigned int v42 = v4;
      id v13 = objc_alloc((Class)CUTWeakLinkClass());
      unint64_t v53 = v10;
      uint64_t v14 = +[NSArray arrayWithObjects:&v53 count:1];
      id v15 = [*v2 isRelay];
      char v16 = [*v2 callUUID];
      BOOL v17 = [v16 UUIDString];
      id v18 = [v13 initOutgoingTo:v14 isVideo:v3 isRelayed:v15 GUID:v17];

      if (v18)
      {
        [v18 setConnectionTimeoutTime:(double)TUConnectionTimeoutForCallService()];
        id v4 = v42;
        char v19 = [v42 faceTimeProvider];
        [a1[4] isUpgrade];
        [v18 setInvitationTimeoutTime:(double)TUOutgoingInvitationTimeoutForCallProviderAndIsUpgrade()];

        id v20 = a1[5];
        [a1[4] localLandscapeAspectRatio];
        double v22 = v21;
        double v24 = v23;
        [a1[4] localPortraitAspectRatio];
        objc_msgSend(v20, "_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:", v18, v22, v24, v25, v26);
        unsigned int v27 = sub_100008DCC();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = [v18 otherIMHandle];
          id v29 = a1[6];
          *(_DWORD *)buf = 138412546;
          id v50 = v28;
          __int16 v51 = 2112;
          id v52 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Inviting handle %@ excluding push tokens %@", buf, 0x16u);
        }
        char v30 = [v18 otherIMHandle];
        [v18 invite:v30 additionalPeers:&__NSArray0__struct excludingPushTokens:a1[6]];

        char v31 = sub_100008DCC();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v50 = v18;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Registering imav chat %@", buf, 0xCu);
        }

        [a1[5] registerChat:v18];
        long long v32 = [a1[5] queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100027334;
        block[3] = &unk_1005053A8;
        id v44 = a1[4];
        id v45 = a1[7];
        id v46 = v18;
        id v33 = a1[6];
        id v34 = a1[5];
        id v47 = v33;
        id v48 = v34;
        long long v35 = v18;
        dispatch_async(v32, block);
      }
      else
      {
        long long v35 = sub_100008DCC();
        id v4 = v42;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_1003A6CF0(v2);
        }
      }
    }
    else
    {
      long long v35 = sub_100008DCC();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_1003A6C5C(v2);
      }
    }
  }
  else
  {
    int v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1003A6BF0((uint64_t)v6, v10, v36, v37, v38, v39, v40, v41);
    }
  }
}

void sub_100027334(uint64_t a1)
{
  if (![*(id *)(a1 + 32) isComplete]
    || (BOOL v2 = *(void **)(a1 + 40)) != 0 && ([v2 isComplete] & 1) == 0)
  {
    id v5 = [objc_alloc((Class)CXCallUpdate) initWithIMAVChat:*(void *)(a1 + 48)];
    if (![*(id *)(a1 + 56) count]) {
      [v5 setFaceTimeTransportType:1];
    }
    id v3 = [*(id *)(a1 + 64) provider];
    id v4 = [*(id *)(a1 + 32) callUUID];
    [v3 reportCallWithUUID:v4 updated:v5];

    [*(id *)(a1 + 32) fulfill];
    [*(id *)(a1 + 40) fulfill];
  }
}

id sub_100027C3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestPendingInvites];
}

void sub_100027DA4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) state];
  switch(v2)
  {
    case 5u:
      [*(id *)(a1 + 40) _updateProviderForEndedChat:*(void *)(a1 + 32)];
      if ([*(id *)(a1 + 32) endedError])
      {
        uint64_t v7 = 1;
      }
      else
      {
        if (qword_10058C268 != -1) {
          dispatch_once(&qword_10058C268, &stru_1005053F0);
        }
        __int16 v8 = ((void (*)(id))off_10058C260)([*(id *)(a1 + 32) endedReason]);
        uint64_t v7 = -1;
        switch([*(id *)(a1 + 32) endedReason])
        {
          case 1u:
            if ([*(id *)(a1 + 32) isCaller]) {
              uint64_t v7 = -1;
            }
            else {
              uint64_t v7 = 2;
            }
            break;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 9u:
            int v10 = sub_100008DCC();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              int v22 = 138412290;
              double v23 = v8;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Using call ended reason remote hangup because ended reason is %@", (uint8_t *)&v22, 0xCu);
            }

            uint64_t v7 = 2;
            break;
          case 6u:
          case 7u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Cu:
          case 0x1Eu:
            uint64_t v9 = sub_100008DCC();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              int v22 = 138412290;
              double v23 = v8;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Using call ended reason failed because ended reason is %@", (uint8_t *)&v22, 0xCu);
            }

            uint64_t v7 = 1;
            break;
          case 0x15u:
          case 0x16u:
            int v11 = sub_100008DCC();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              int v22 = 138412290;
              double v23 = v8;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using call ended reason unanswered because ended reason is %@", (uint8_t *)&v22, 0xCu);
            }

            uint64_t v7 = 3;
            break;
          case 0x1Bu:
            id v12 = sub_100008DCC();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              int v22 = 138412290;
              double v23 = v8;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Using call ended reason answered elsewhere because ended reason is %@", (uint8_t *)&v22, 0xCu);
            }

            uint64_t v7 = 4;
            break;
          case 0x1Du:
            id v13 = sub_100008DCC();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int v22 = 138412290;
              double v23 = v8;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Using call ended reason declined elsewhere because ended reason is %@", (uint8_t *)&v22, 0xCu);
            }

            uint64_t v7 = 5;
            break;
          default:
            break;
        }
      }
      uint64_t v14 = [*(id *)(a1 + 40) faceTimeDemuxerDelegate];
      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = *(id *)(a1 + 32);
      id v17 = objc_alloc((Class)NSUUID);
      id v18 = [v16 GUID];

      id v19 = [v17 initWithUUIDString:v18];
      id v20 = [*(id *)(a1 + 32) dateEnded];
      double v21 = [*(id *)(a1 + 40) failureContextForChat:*(void *)(a1 + 32)];
      [v14 providerDelegate:v15 callWithUUID:v19 endedAtDate:v20 withReason:v7 failureContext:v21];

      break;
    case 4u:
      if (([*(id *)(a1 + 32) isVideo] & 1) == 0)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v5 = *(void **)(a1 + 40);
        [v5 _updateProviderForConnectedChat:v6];
      }
      break;
    case 3u:
      uint64_t v4 = *(void *)(a1 + 32);
      id v3 = *(void **)(a1 + 40);
      _[v3 _updateProviderForConnectingChat:v4];
      break;
  }
}

void sub_100028250(id a1)
{
  off_10058C260 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_100028D68(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isLocalParticipant] & 1) == 0)
  {
    unsigned int v2 = *(void **)(a1 + 40);
    id v3 = [*(id *)(a1 + 32) avChat];
    [v2 _updateProviderForConnectedChat:v3];
  }
}

void sub_100028F14(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) provider];
  unsigned int v2 = [*(id *)(a1 + 40) avChat];
  id v3 = objc_alloc((Class)NSUUID);
  uint64_t v4 = [v2 GUID];
  id v5 = [v3 initWithUUIDString:v4];

  [v6 reportOutgoingCallWithUUID:v5 sentInvitationAtDate:0];
}

void sub_100029124(id *a1)
{
  if ([a1[4] isVideo])
  {
    id v7 = objc_alloc_init((Class)CXCallUpdate);
    objc_msgSend(v7, "setVideoStreamToken:", objc_msgSend(a1[5], "_activeCallID"));
    unsigned int v2 = [a1[6] provider];
    id v3 = a1[4];
    id v4 = objc_alloc((Class)NSUUID);
    id v5 = [v3 GUID];

    id v6 = [v4 initWithUUIDString:v5];
    [v2 reportCallWithUUID:v6 updated:v7];
  }
}

void sub_100029368(uint64_t a1)
{
  id v8 = objc_alloc_init((Class)CXCallUpdate);
  unsigned int v2 = sub_100023CA4(*(void **)(a1 + 32));
  [v8 setCrossDeviceIdentifier:v2];

  id v3 = [*(id *)(a1 + 40) provider];
  id v4 = *(id *)(a1 + 32);
  id v5 = objc_alloc((Class)NSUUID);
  id v6 = [v4 GUID];

  id v7 = [v5 initWithUUIDString:v6];
  [v3 reportCallWithUUID:v7 updated:v8];
}

void sub_10002958C(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) provider];
  id v2 = *(id *)(a1 + 40);
  id v3 = objc_alloc((Class)NSUUID);
  id v4 = [v2 GUID];

  id v5 = [v3 initWithUUIDString:v4];
  id v6 = sub_100023CA4(*(void **)(a1 + 40));
  [v7 reportCallWithUUID:v5 crossDeviceIdentifier:v6 changedBytesOfDataUsed:sub_100023E60(*(void **)(a1 + 40))];
}

void sub_1000297A0(uint64_t a1)
{
  id v7 = objc_alloc_init((Class)CXCallUpdate);
  objc_msgSend(v7, "setMayRequireBreakBeforeMake:", objc_msgSend(*(id *)(a1 + 32), "mayRequireBreakBeforeMake"));
  id v2 = [*(id *)(a1 + 40) provider];
  id v3 = *(id *)(a1 + 32);
  id v4 = objc_alloc((Class)NSUUID);
  id v5 = [v3 GUID];

  id v6 = [v4 initWithUUIDString:v5];
  [v2 reportCallWithUUID:v6 updated:v7];
}

void sub_10002992C(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) object];
  id v2 = [*(id *)(a1 + 40) provider];
  id v3 = [v8 avChat];
  id v4 = objc_alloc((Class)NSUUID);
  id v5 = [v3 GUID];
  id v6 = [v4 initWithUUIDString:v5];

  id v7 = [v8 inFrequencyLevel];
  [v2 reportCallWithUUID:v6 changedFrequencyData:v7 forDirection:2];
}

void sub_100029ABC(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) object];
  id v2 = [*(id *)(a1 + 40) provider];
  id v3 = [v8 avChat];
  id v4 = objc_alloc((Class)NSUUID);
  id v5 = [v3 GUID];
  id v6 = [v4 initWithUUIDString:v5];

  id v7 = [v8 outFrequencyLevel];
  [v2 reportCallWithUUID:v6 changedFrequencyData:v7 forDirection:1];
}

void sub_100029CC8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)CXCallUpdate) initWithIMAVChat:*(void *)(a1 + 32)];
  [v2 setFaceTimeTransportType:1];
  id v3 = [*(id *)(a1 + 40) provider];
  id v4 = *(id *)(a1 + 32);
  id v5 = objc_alloc((Class)NSUUID);
  id v6 = [v4 GUID];

  id v7 = [v5 initWithUUIDString:v6];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100029DF4;
  v10[3] = &unk_100505418;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v11 = v8;
  uint64_t v12 = v9;
  [v3 reportNewIncomingCallWithUUID:v7 update:v2 completion:v10];
}

void sub_100029DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100029EA8;
  block[3] = &unk_100504FE0;
  id v6 = *(id *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = *(void *)(a1 + 40);
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100029EA8(uint64_t a1)
{
  [*(id *)(a1 + 32) isVideo];
  [*(id *)(a1 + 32) setConnectionTimeoutTime:(double)TUConnectionTimeoutForCallService()];
  [*(id *)(a1 + 32) setInvitationTimeoutTime:(double)TUIncomingInvitationTimeout()];
  if (*(void *)(a1 + 40))
  {
    id v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
      int v8 = 138412546;
      uint64_t v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@", (uint8_t *)&v8, 0x16u);
    }

    return [*(id *)(a1 + 32) declineInvitationWithResponse:11];
  }
  else
  {
    id v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    return [v6 registerChat:v7];
  }
}

void sub_10002A100(uint64_t a1)
{
  [*(id *)(a1 + 32) _setUpListeners];
  id v2 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002A198;
  block[3] = &unk_100504EC0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_10002A198(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) providerDidBegin];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) providerDidBegin];
    v3[2]();
  }
}

id sub_10002A3EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) endChat];
}

id sub_10002A5A4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  [*(id *)(a1 + 40) localLandscapeAspectRatio];
  double v4 = v3;
  double v6 = v5;
  [*(id *)(a1 + 40) localPortraitAspectRatio];
  objc_msgSend(v2, "_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:", *(void *)(a1 + 48), v4, v6, v7, v8);
  if ([*(id *)(a1 + 40) downgradeToAudio]) {
    [*(id *)(a1 + 48) setIsSendingVideo:0];
  }
  uint64_t v9 = sub_100008DCC();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling acceptInvitation on chat %@", (uint8_t *)&v12, 0xCu);
  }

  return [*(id *)(a1 + 48) acceptInvitation];
}

id sub_10002A854(uint64_t a1)
{
  return _[*(id *)(a1 + 32) endChat];
}

id sub_10002AA1C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setIsSendingAudio with %d for chat %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 32) setIsSendingAudio:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10002AC50(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) isSendingVideo];
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setIsSendingVideo with %d for chat %@", (uint8_t *)v6, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "setIsSendingVideo:", objc_msgSend(*(id *)(a1 + 32), "isSendingVideo"));
}

id sub_10002AFF8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) videoPresentationSize];
    unsigned int v3 = NSStringFromSize(v11);
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setRemoteVideoPresentationSize with %@ for call %@", (uint8_t *)&v7, 0x16u);
  }
  double v5 = *(void **)(a1 + 40);
  [*(id *)(a1 + 32) videoPresentationSize];
  return objc_msgSend(v5, "setRemoteVideoPresentationSize:");
}

id sub_10002B250(id *a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [a1[4] videoPresentationState];
    id v4 = a1[5];
    int v6 = 134218242;
    id v7 = v3;
    __int16 v8 = 2112;
    id v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setRemoteVideoPresentationState with %ld for chat %@", (uint8_t *)&v6, 0x16u);
  }

  return objc_msgSend(a1[5], "setRemoteVideoPresentationState:", objc_msgSend(a1[6], "IMAVChatRemoteVideoPresentationStateFromCXVideoPresentationState:", objc_msgSend(a1[4], "videoPresentationState")));
}

id sub_10002B4A8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) isRelaying];
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setRelayed with %d for chat %@", (uint8_t *)v6, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "setRelayed:", objc_msgSend(*(id *)(a1 + 32), "isRelaying"));
}

id sub_10002B6E8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) isMuted];
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling setMuted with %d for chat %@", (uint8_t *)v6, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "setMute:", objc_msgSend(*(id *)(a1 + 32), "isMuted"));
}

void sub_10002B8D0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10002BAC0(uint64_t a1)
{
  id v2 = +[TUCallHistoryControllerXPCClient callHistoryControllerClientXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 32) setRemoteObjectInterface:v2];

  unsigned int v3 = +[TUCallHistoryControllerXPCClient callHistoryControllerServerXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 32) setExportedInterface:v3];

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "setExportedObject:");
  [*(id *)(*(void *)(a1 + 32) + 32) setRequiredConnectionCapability:@"access-calls"];
  [*(id *)(*(void *)(a1 + 32) + 32) setInterruptionHandler:&stru_100505458];
  [*(id *)(*(void *)(a1 + 32) + 32) setInvalidationHandler:&stru_100505478];
  uint64_t v4 = [*(id *)(a1 + 32) clientManager];
  double v5 = [v4 asynchronousExportedObjectProxy];
  +[TUCallHistoryControllerXPCClient setAsynchronousServer:v5];

  id v7 = [*(id *)(a1 + 32) clientManager];
  int v6 = [v7 synchronousExportedObjectProxy];
  +[TUCallHistoryControllerXPCClient setSynchronousServer:v6];
}

void sub_10002BBF8(id a1, CSDClient *a2)
{
  id v2 = a2;
  unsigned int v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    double v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10002BCA4(id a1, CSDClient *a2)
{
  id v2 = a2;
  unsigned int v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    double v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@ for CSDCallHistoryControllerXPCServer", (uint8_t *)&v4, 0xCu);
  }
}

id sub_10002BD50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.callhistorycontroller"];

  notify_register_check("CSDCallHistoryControllerClientsShouldConnectNotification", (int *)(*(void *)(a1 + 32) + 8));
  notify_set_state(*(_DWORD *)(*(void *)(a1 + 32) + 8), 0);
  unsigned int v3 = *(void **)(a1 + 32);

  return [v3 notifyClientsToConnectIfNecessary];
}

void sub_10002BF28(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 invalidate];
}

void sub_10002C0B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10002C1C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10002C2C8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "recent calls deleted: %@", (uint8_t *)&v5, 0xCu);
  }

  int v4 = [*(id *)(a1 + 40) callHistoryController];
  [v4 recentCallsDeleted:*(void *)(a1 + 32)];
}

void sub_10002C414(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "All recent calls deleted", v4, 2u);
  }

  uint64_t v3 = [*(id *)(a1 + 32) callHistoryController];
  [v3 allCallHistoryDeleted];
}

void sub_10002D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location)
{
  objc_destroyWeak(v55);
  objc_destroyWeak(v54);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CSDAVCSession *sub_10002D5F8(uint64_t a1, void *a2, void *a3, void *a4, char a5, unsigned int a6, void *a7)
{
  uint64_t v10 = (id *)(a1 + 32);
  id v11 = a7;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  id WeakRetained = objc_loadWeakRetained(v10);
  id v16 = [WeakRetained queue];
  dispatch_assert_queue_V2(v16);

  id v17 = [WeakRetained reportingHierarchyToken];
  id v18 = +[RTCReporting newHierarchyTokenFromParentToken:v17];
  [WeakRetained setReportingHierarchySubToken:v18];

  id v19 = [WeakRetained provider];
  if ([v19 isDefaultProvider])
  {
    id v20 = 0;
  }
  else
  {
    double v21 = [WeakRetained provider];
    id v20 = [v21 identifier];
  }
  int v22 = [CSDAVCSession alloc];
  double v23 = [WeakRetained reportingHierarchySubToken];
  id v24 = [WeakRetained avMode];
  double v25 = [WeakRetained ABTestConfiguration];
  LOBYTE(v28) = a5;
  double v26 = [(CSDAVCSession *)v22 initWithTransportToken:v14 delegate:v13 queue:v12 reportingHierarchyToken:v23 oneToOneModeEnabled:a6 avMode:v24 videoEnabled:v28 report:v11 serviceName:v20 ABTestConfiguration:v25];

  return v26;
}

id sub_10002D7B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_alloc((Class)TUVideoDeviceController);
  uint64_t v3 = [WeakRetained queue];
  id v4 = [v2 initWithSerialQueue:v3];

  return v4;
}

NSData *__cdecl sub_10002D82C(id a1)
{
  return 0;
}

void sub_100032860(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (v3)
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003A6ED0();
    }
  }
  TUOpenURL();
}

void sub_100033814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
}

void sub_100033830(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained activeRemoteParticipantsByIdentifier];
  id v4 = [v3 count];

  if ((unint64_t)v4 >= 2)
  {
    int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] GreenTea device leaving handoff conversation after timeout", v8, 2u);
    }

    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = +[CSDConversationLeaveContext greenTeaLeaveContext];
    [v6 leaveUsingContext:v7];
  }
}

id sub_100036B48(uint64_t a1, void *a2)
{
  id v3 = [a2 handle];
  id v4 = [v3 isEquivalentToHandle:*(void *)(a1 + 32)];

  return v4;
}

void sub_10003743C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == (id)3)
  {
    id v1 = +[TUCallCenter sharedInstance];
    id v3 = [v1 frontmostAudioOrVideoCall];

    if (v3)
    {
      id v2 = +[NSNotificationCenter defaultCenter];
      [v2 postNotificationName:TUCallCenterPendingMemberAddedNotification object:v3];
    }
  }
}

void sub_1000387E0(uint64_t a1, int a2)
{
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    uint64_t v6 = *(void *)(a1 + 32);
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    CFStringRef v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Session dismissal alert for activitySessionUUID %@ success: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100038B40(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User chose to take no action", v5, 2u);
  }

  id v3 = *(void **)(a1 + 32);
  id v4 = [v3 audioRoutePolicyManager];
  objc_msgSend(v3, "updateScreenEnabledForRemoteParticipants:", objc_msgSend(v4, "sharePlaySupported"));
}

void sub_10003A244(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003A330;
  block[3] = &unk_1005055D0;
  id v9 = v3;
  id v5 = a1[5];
  id v6 = a1[4];
  id v10 = v5;
  id v11 = v6;
  BOOL v13 = v3 != 0;
  id v12 = a1[6];
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10003A330(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    [*(id *)(a1 + 40) updateApplicationState:1];
  }
  id v2 = [*(id *)(a1 + 48) delegate];
  [v2 conversation:*(void *)(a1 + 48) appLaunchState:*(void *)(a1 + 64) forActivitySession:*(void *)(a1 + 56)];
}

void sub_10003A39C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Launched pip for activity %@ error %@", (uint8_t *)&v7, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10003C39C(uint64_t a1, void *a2)
{
  id v3 = [a2 handle];
  id v4 = [*(id *)(a1 + 32) handle];
  id v5 = [v3 isEquivalentToHandle:v4];

  return v5;
}

id sub_10003C60C(uint64_t a1, void *a2)
{
  id v3 = [a2 handle];
  id v4 = [*(id *)(a1 + 32) handle];
  id v5 = [v3 isEquivalentToHandle:v4];

  return v5;
}

void sub_10003FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003FD64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained state];
    id v5 = sub_100008DCC();
    uint64_t v6 = v5;
    if (v4 == (id)4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Timed out waiting for session to stop after %@, moving to waiting state and cleaning up.", buf, 0xCu);
      }

      +[CSDCrashReporter simulateCrashReportWithFormat:@"Timed out waiting for sessions to end in leaving state (left conversation for reason: %@). Please file a bug on [TelephonyUtilities | New Bugs] so we can direct it to the appropriate team.", *(void *)(a1 + 32)];
      [v3 setState:0];
      [v3 setAvcSession:0];
      [v3 setAvcSessionInProgress:0];
      [v3 _reportConversationFailedWithProviderEndedReason:501];
      uint64_t v6 = [v3 delegate];
      [v6 conversationChanged:v3];
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_1003A7308(v3);
    }

    [v3 setTimeoutBlock:0];
  }
}

void sub_1000402D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100040304(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained activeParticipantDestinationsByIdentifier];
    if ((unint64_t)[v3 count] <= 1)
    {
    }
    else
    {
      id v4 = [v2 activeRemoteParticipants];
      id v5 = [v4 count];

      if (!v5)
      {
        uint64_t v6 = sub_100008DCC();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = [v2 activeParticipantDestinationsByIdentifier];
          int v8 = 138412290;
          uint64_t v9 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_endCallIfNecessary: The participant couldn't add any active participants in the session, end call,  activeParticipantDestinationsByIdentifier: %@", (uint8_t *)&v8, 0xCu);
        }
        [v2 _reportConversationFailedWithProviderEndedReason:533];
        [v2 leave];
      }
    }
    [v2 setNoConversationParticipantTimeoutBlock:0];
  }
}

void sub_100040A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100040A84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v3 = [WeakRetained pendingRemoteMembers];
  id v33 = [v3 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (!v33)
  {
LABEL_23:

    goto LABEL_24;
  }
  char v29 = 0;
  uint64_t v32 = *(void *)v35;
  char v30 = WeakRetained;
  id obj = v3;
  do
  {
    id v4 = 0;
    do
    {
      if (*(void *)v35 != v32) {
        objc_enumerationMutation(obj);
      }
      id v5 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v4);
      uint64_t v6 = [v5 handle];
      if (!v6) {
        goto LABEL_10;
      }
      uint64_t v7 = (void *)v6;
      int v8 = [WeakRetained remoteMemberHandles];
      uint64_t v9 = [v5 handle];
      if ([v8 containsObject:v9])
      {

LABEL_10:
        uint64_t v15 = sub_100008DCC();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = [WeakRetained remoteMembers];
          *(_DWORD *)buf = 138412546;
          uint64_t v39 = v5;
          __int16 v40 = 2112;
          uint64_t v41 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "link based call, member: %@ is already added to remoteMembers: %@", buf, 0x16u);
        }
        id v17 = [WeakRetained pendingMemberHandles];
        id v18 = [v5 handle];
        unsigned int v19 = [v17 containsObject:v18];

        if (v19)
        {
          id v20 = +[NSSet setWithObject:v5];
          [WeakRetained removePendingMembers:v20 triggeredLocally:1];
        }
        [v2 addObject:v5];
        goto LABEL_15;
      }
      [WeakRetained localMember];
      v11 = id v10 = v2;
      id v12 = [v11 handle];
      BOOL v13 = [v5 handle];
      unsigned __int8 v14 = [v12 isEquivalentToHandle:v13];

      id v2 = v10;
      id WeakRetained = v30;

      if (v14) {
        goto LABEL_10;
      }
      double v21 = sub_100008DCC();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = [v30 remoteMemberHandles];
        *(_DWORD *)buf = 138412546;
        uint64_t v39 = v5;
        __int16 v40 = 2112;
        uint64_t v41 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "link based call, show up LMI request UI for %@, remoteHandles: %@", buf, 0x16u);
      }
      double v23 = +[NSSet setWithObject:v5];
      char v29 = 1;
      [v30 addPendingMembers:v23 triggeredLocally:1];

LABEL_15:
      id v4 = (char *)v4 + 1;
    }
    while (v33 != v4);
    id v24 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
    id v33 = v24;
  }
  while (v24);

  if (v29)
  {
    id v3 = +[CSDReportingController sharedInstance];
    double v25 = [WeakRetained tuConversation];
    [v3 remoteMemberNotInMemberListForConversation:v25];

    goto LABEL_23;
  }
LABEL_24:
  double v26 = [WeakRetained pendingRemoteMembers];
  [v26 minusSet:v2];

  unsigned int v27 = sub_100008DCC();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = [WeakRetained pendingRemoteMembers];
    *(_DWORD *)buf = 138412290;
    uint64_t v39 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "updated pendingRemoteMembers: %@", buf, 0xCu);
  }
  [WeakRetained setLetMeInRequestUINotificationBlock:0];
}

void sub_10004115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100041178(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = [WeakRetained activeParticipantDestinationsByIdentifier];
    uint64_t v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

    uint64_t v7 = [v4 activeRemoteParticipantsByIdentifier];
    int v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 32)];
    if (v8)
    {
    }
    else
    {
      uint64_t v9 = [v4 inflightAVCBlobRecoveryBlocksByIdentifier];
      id v10 = [v9 objectForKeyedSubscript:*(void *)(a1 + 32)];

      if (!v10 && v6)
      {
        id v11 = +[CSDReportingController sharedInstance];
        id v12 = [v4 tuConversation];
        [v11 avcBlobRecoveryStartedForConversation:v12];

        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000413A4;
        block[3] = &unk_100505558;
        objc_copyWeak(&v20, v2);
        void block[4] = *(void *)(a1 + 32);
        dispatch_block_t v13 = dispatch_block_create((dispatch_block_flags_t)0, block);
        unsigned __int8 v14 = [v4 delegate];
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        _DWORD v17[2] = sub_1000414DC;
        v17[3] = &unk_1005056C0;
        uint64_t v15 = *(void *)(a1 + 32);
        v17[4] = v4;
        v17[5] = v15;
        id v16 = v13;
        id v18 = v16;
        [v14 conversation:v4 requestBlobRecoveryForParticipantDestination:v6 completion:v17];

        objc_destroyWeak(&v20);
      }
    }
  }
}

void sub_100041390(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000413A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = +[CSDReportingController sharedInstance];
    id v4 = [WeakRetained tuConversation];
    [v3 avcBlobRecoveryTimedOutForConversation:v4];

    id v5 = [WeakRetained activeRemoteParticipantsByIdentifier];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)(a1 + 32);
    int v8 = [v5 objectForKeyedSubscript:v7];
    if (v8)
    {
    }
    else
    {
      uint64_t v9 = [WeakRetained activeParticipantDestinationsByIdentifier];
      id v10 = [v9 objectForKeyedSubscript:*v6];

      if (v10)
      {
        id v11 = sub_100008DCC();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1003A738C((uint64_t)v6, v11, v12, v13, v14, v15, v16, v17);
        }

        [WeakRetained _reportConversationFailedWithProviderEndedReason:500];
        [WeakRetained leave];
      }
    }
    id v18 = [WeakRetained inflightAVCBlobRecoveryBlocksByIdentifier];
    [v18 setObject:0 forKeyedSubscript:*v6];
  }
}

void sub_1000414DC(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) inflightAVCBlobRecoveryBlocksByIdentifier];
    id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v4)
    {
      id v5 = sub_100008DCC();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v16 = 138412290;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Replacing existing recovery timeout for participant with identifier %@", (uint8_t *)&v16, 0xCu);
      }

      uint64_t v7 = [*(id *)(a1 + 32) inflightAVCBlobRecoveryBlocksByIdentifier];
      int v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 40)];
      dispatch_block_cancel(v8);
    }
    id v9 = objc_retainBlock(*(id *)(a1 + 48));
    id v10 = [*(id *)(a1 + 32) inflightAVCBlobRecoveryBlocksByIdentifier];
    [v10 setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];

    id v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v16 = 138412290;
      uint64_t v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Setting up AVC blob recovery timeout for participant with identifier %@", (uint8_t *)&v16, 0xCu);
    }

    uint64_t v13 = [*(id *)(a1 + 32) serverBag];
    dispatch_time_t v14 = dispatch_time(0, 1000000000 * (void)[v13 AVCBlobRecoveryTimeout]);
    uint64_t v15 = [*(id *)(a1 + 32) queue];
    dispatch_after(v14, v15, *(dispatch_block_t *)(a1 + 48));
  }
}

void sub_100041B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100041BA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained serverProvidedParticipantIdentifiers];
    if (v3)
    {
      id v4 = (void *)v3;
      id v5 = [v2 serverProvidedLightweightParticipantIdentifiers];

      if (v5)
      {
        id v6 = objc_alloc_init((Class)NSMutableSet);
        uint64_t v7 = [v2 serverProvidedParticipantIdentifiers];
        [v6 unionSet:v7];

        int v8 = [v2 serverProvidedLightweightParticipantIdentifiers];
        [v6 unionSet:v8];

        id v9 = objc_alloc_init((Class)NSMutableSet);
        id v10 = [v2 activeRemoteParticipants];
        [v9 unionSet:v10];

        id v11 = [v2 activeLightweightParticipants];
        [v9 unionSet:v11];

        uint64_t v12 = sub_100008DCC();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v32 = v6;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Pruning remote participants as necessary, current server identifiers: %@", buf, 0xCu);
        }

        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v13 = v9;
        id v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v27;
          do
          {
            for (i = 0; i != v15; i = (char *)i + 1)
            {
              if (*(void *)v27 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = *(void **)(*((void *)&v26 + 1) + 8 * i);
              unsigned int v19 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v18 identifier]);
              unsigned __int8 v20 = [v6 containsObject:v19];

              if ((v20 & 1) == 0)
              {
                double v21 = [v2 activeRemoteParticipants];
                if ([v21 containsObject:v18]
                  && [*(id *)(a1 + 32) isOneToOneModeEnabled])
                {
                  id v22 = [*(id *)(a1 + 32) state];

                  if (v22 == (id)3)
                  {
                    double v23 = sub_100008DCC();
                    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Joined in oneToOneMode, do not prune remote participant", buf, 2u);
                    }
                    goto LABEL_19;
                  }
                }
                else
                {
                }
                id v24 = [v18 identifier];
                double v23 = [v18 handle];
                [v2 removeParticipantWithIdentifier:v24 fromHandle:v23 withReason:0];
LABEL_19:

                continue;
              }
            }
            id v15 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
          }
          while (v15);
        }
      }
    }
    [v2 setWaitingToPruneParticipants:0];
  }
}

void sub_10004204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004206C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained setServerProvidedParticipantIdentifiers:0];
    [v3 setServerProvidedLightweightParticipantIdentifiers:0];
    id v2 = [v3 idsSession];
    [v2 requestActiveParticipants];

    [v3 setParticipantRefreshBlock:0];
    id WeakRetained = v3;
  }
}

void sub_100042F24(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_100042F4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Delayed downgrade triggered, checking if we're still eligible", v3, 2u);
  }

  [WeakRetained setDowngradeToOneToOneAfterDelayBlock:0];
  [WeakRetained switchBackToOneToOneIfPossibleUsingDelay:0];
}

void sub_1000450D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
}

void sub_1000450F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v3 = [*(id *)(a1 + 32) pendingConversationParticipantsByIdentifier];
    id v4 = [v3 objectForKey:*(void *)(a1 + 40)];

    id v5 = [*(id *)(a1 + 32) activeParticipantDestinationsByIdentifier];
    id v6 = [v5 objectForKey:*(void *)(a1 + 40)];

    if (v4 && v6)
    {
      [*(id *)(a1 + 32) addActiveParticipant:*(void *)(a1 + 48)];
      uint64_t v7 = [*(id *)(a1 + 32) pendingConversationParticipantsByIdentifier];
      [v7 removeObjectForKey:*(void *)(a1 + 40)];
    }
    else
    {
      int v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v9 = @"YES";
        uint64_t v10 = *(void *)(a1 + 40);
        if (v4) {
          CFStringRef v11 = @"YES";
        }
        else {
          CFStringRef v11 = @"NO";
        }
        int v12 = 138412802;
        uint64_t v13 = v10;
        __int16 v14 = 2112;
        if (!v6) {
          CFStringRef v9 = @"NO";
        }
        CFStringRef v15 = v11;
        __int16 v16 = 2112;
        CFStringRef v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not adding the participant: %@, participantPendingToBeAdded: %@, participantIsInActiveList: %@", (uint8_t *)&v12, 0x20u);
      }
    }
  }
}

id sub_10004757C(uint64_t a1, void *a2)
{
  id v3 = [a2 handle];
  id v4 = [*(id *)(a1 + 32) handle];
  id v5 = [v3 isEquivalentToHandle:v4];

  return v5;
}

id sub_100047F20(uint64_t a1, void *a2)
{
  id v3 = [a2 handle];
  id v4 = [v3 isEquivalentToHandle:*(void *)(a1 + 32)];

  return v4;
}

void sub_10004C00C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v3 = @"YES";
    }
    else {
      CFStringRef v3 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "sharePlayAllowedStateChanged: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 32) updateScreenEnabledForRemoteParticipants:*(unsigned __int8 *)(a1 + 40)];
  if (!*(unsigned char *)(a1 + 40) && [*(id *)(a1 + 32) isScreenEnabled])
  {
    id v4 = [*(id *)(a1 + 32) tuConversation];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v5 = [v4 activitySessions];
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v19;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          CFStringRef v11 = [v10 activity];
          unsigned __int8 v12 = [v11 isScreenSharingActivity];

          if (v12)
          {
            id v13 = v10;
            __int16 v14 = [v13 activity];

            if (v14)
            {
              CFStringRef v15 = *(void **)(a1 + 32);
              v16[0] = _NSConcreteStackBlock;
              v16[1] = 3221225472;
              v16[2] = sub_10004C268;
              v16[3] = &unk_100504F10;
              v16[4] = v15;
              id v13 = v13;
              id v17 = v13;
              [v15 postUserNotificationForUnsupportedScreenSharingActivity:v14 alternateReponseHandler:v16];
            }
            goto LABEL_19;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    id v13 = 0;
    __int16 v14 = 0;
LABEL_19:
  }
}

void sub_10004C268(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping screen on local device since route does not support share play", buf, 2u);
  }

  CFStringRef v3 = *(void **)(a1 + 32);
  id v4 = +[TUCallScreenShareAttributes defaultAttributes];
  [v3 setScreenEnabled:0 attributes:v4];

  id v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Leaving activity session for screen sharing since route does not support share play", v8, 2u);
  }

  id v6 = [*(id *)(a1 + 32) activitySessionManager];
  id v7 = [*(id *)(a1 + 40) UUID];
  [v6 leaveActivitySessionWithUUID:v7];
}

void sub_10004C54C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![v3 response])
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "user requested to switch to speaker route", buf, 2u);
    }

    id v5 = [*(id *)(a1 + 32) audioRoutePolicyManager];
    [v5 switchToSpeakerRouteIfNecessary];
  }
  if ([v3 response] == (id)1)
  {
    id v6 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004C674;
    block[3] = &unk_100505738;
    id v8 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }
}

uint64_t sub_10004C674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004CEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) remoteParticipantForIdentifier:a2];
  id v4 = (id)v3;
  if (!v3) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v3);
}

void sub_10004E648(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10004E68C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_10004E6A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10004E768(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithName:@"com.apple.private.alloy.phonecontinuity"];
  uint64_t v2 = (void *)qword_10058C270;
  qword_10058C270 = (uint64_t)v1;
}

BOOL sub_10004EE30(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsHolding;
            goto LABEL_76;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0;
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsHolding;
            goto LABEL_79;
          }
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsHolding;
        goto LABEL_77;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 4u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsGrouping;
            goto LABEL_76;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v14 |= (unint64_t)(v22 & 0x7F) << v19;
          if (v22 < 0)
          {
            v19 += 7;
            BOOL v17 = v20++ > 8;
            if (v17)
            {
              uint64_t v14 = 0;
              long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsGrouping;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsGrouping;
        goto LABEL_77;
      case 3u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 0x40u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUngrouping;
            goto LABEL_76;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
          v14 |= (unint64_t)(v34 & 0x7F) << v31;
          if (v34 < 0)
          {
            v31 += 7;
            BOOL v17 = v32++ > 8;
            if (v17)
            {
              uint64_t v14 = 0;
              long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUngrouping;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUngrouping;
        goto LABEL_77;
      case 4u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsDTMF;
            goto LABEL_76;
          }
          char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
          v14 |= (unint64_t)(v38 & 0x7F) << v35;
          if (v38 < 0)
          {
            v35 += 7;
            BOOL v17 = v36++ > 8;
            if (v17)
            {
              uint64_t v14 = 0;
              long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsDTMF;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsDTMF;
        goto LABEL_77;
      case 6u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 0x20u;
        while (2)
        {
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUnambiguousMultiPartyState;
            goto LABEL_76;
          }
          char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
          v14 |= (unint64_t)(v42 & 0x7F) << v39;
          if (v42 < 0)
          {
            v39 += 7;
            BOOL v17 = v40++ > 8;
            if (v17)
            {
              uint64_t v14 = 0;
              long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUnambiguousMultiPartyState;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsUnambiguousMultiPartyState;
        goto LABEL_77;
      case 7u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsAddCall;
            goto LABEL_76;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v14 |= (unint64_t)(v26 & 0x7F) << v23;
          if (v26 < 0)
          {
            v23 += 7;
            BOOL v17 = v24++ > 8;
            if (v17)
            {
              uint64_t v14 = 0;
              long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsAddCall;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsAddCall;
        goto LABEL_77;
      case 8u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 0x10u;
        break;
      default:
        if (PBReaderSkipValueWithTag()) {
          continue;
        }
        return 0;
    }
    while (1)
    {
      unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
      v14 |= (unint64_t)(v30 & 0x7F) << v27;
      if ((v30 & 0x80) == 0)
      {
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsSendingToVoicemail;
        goto LABEL_77;
      }
      v27 += 7;
      BOOL v17 = v28++ > 8;
      if (v17)
      {
        uint64_t v14 = 0;
        long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsSendingToVoicemail;
        goto LABEL_79;
      }
    }
    long long v18 = &OBJC_IVAR___CSDMessagingCallModel__supportsSendingToVoicemail;
LABEL_76:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v14 = 0;
    }
LABEL_79:
    *(unsigned char *)(a1 + *v18) = v14 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10005020C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
  char v4 = [v2 callWithUniqueProxyIdentifier:v3];

  if (v4 && [v4 status] == 4)
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      unint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "We still have a ringing call after 90 seconds, mark it as answered elsewhere, call %@", (uint8_t *)&v6, 0xCu);
    }

    if (*(unsigned char *)(a1 + 48)) {
      [v4 setEndpointOnCurrentDevice:0];
    }
    else {
      [v4 setLocallyDisconnectedWithReasonIfNone:1];
    }
  }
}

void sub_100052F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id sub_100052F78(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100052FA4(uint64_t a1)
{
}

void sub_100052FAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
  if (v3)
  {
    unint64_t v7 = *(void **)(a1 + 32);
    char v8 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
    uint64_t v9 = [v7 callWithUniqueProxyIdentifier:v8];

    if (!v9)
    {
      int v10 = [CSDRelayCall alloc];
      CFStringRef v11 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
      uint64_t v9 = [(CSDRelayCall *)v10 initWithUniqueProxyIdentifier:v11 endpointOnCurrentDevice:0];

      char v12 = [*(id *)(a1 + 32) callStateController];
      [v12 setCallDelegatesIfNeeded:v9];

      [*(id *)(a1 + 40) updateRelayCall:v9];
      unsigned int v13 = [*(id *)(a1 + 32) callStateController];
      [v13 propertiesChangedForCall:v9];
    }
    uint64_t v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      char v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Pulling remotely hosted call: %@", (uint8_t *)&v15, 0xCu);
    }

    [v9 becomeEndpointForPullFromRemoteDevice];
  }
  else
  {
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1003A79DC(a1, v9);
    }
  }
}

void sub_1000532C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v6 isEqualToString:@"destinationID"])
  {
    [*(id *)(a1 + 32) setDestinationID:v5];
  }
  else if ([v6 isEqualToString:@"service"])
  {
    objc_msgSend(*(id *)(a1 + 32), "setService:", objc_msgSend(v5, "intValue"));
  }
  else if ([v6 isEqualToString:@"uniqueProxyIdentifier"])
  {
    [*(id *)(a1 + 32) setUniqueProxyIdentifier:v5];
  }
  else if ([v6 isEqualToString:@"sourceIdentifier"])
  {
    [*(id *)(a1 + 32) setSourceIdentifier:v5];
  }
  else if ([v6 isEqualToString:@"wantsHoldMusic"])
  {
    objc_msgSend(*(id *)(a1 + 32), "setWantsHoldMusic:", objc_msgSend(v5, "BOOLValue"));
  }
  else if ([v6 isEqualToString:@"dtmfKey"])
  {
    objc_msgSend(*(id *)(a1 + 32), "setDTMFKey:", objc_msgSend(v5, "intValue"));
  }
  else if ([v6 isEqualToString:@"disconnectedReason"])
  {
    objc_msgSend(*(id *)(a1 + 32), "setDisconnectedReason:", objc_msgSend(v5, "intValue"));
  }
}

uint64_t sub_1000560AC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = (v6 & 7) == 4;
        }
        if (!v11)
        {
          switch((v6 >> 3))
          {
            case 1u:
              char v12 = 0;
              unsigned int v13 = 0;
              uint64_t v14 = 0;
              *(unsigned char *)(a1 + 40) |= 1u;
              break;
            case 2u:
              uint64_t v17 = PBReaderReadString();
              uint64_t v18 = 32;
              goto LABEL_30;
            case 4u:
              uint64_t v17 = PBReaderReadString();
              uint64_t v18 = 8;
              goto LABEL_30;
            case 5u:
              uint64_t v17 = PBReaderReadString();
              uint64_t v18 = 16;
LABEL_30:
              unsigned int v20 = *(void **)(a1 + v18);
              *(void *)(a1 + v18) = v17;

              goto LABEL_35;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_35:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
          }
          while (1)
          {
            unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
            v14 |= (unint64_t)(v16 & 0x7F) << v12;
            if ((v16 & 0x80) == 0) {
              goto LABEL_32;
            }
            v12 += 7;
            BOOL v9 = v13++ >= 9;
            if (v9)
            {
              LODWORD(v14) = 0;
              goto LABEL_34;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v14) = 0;
          }
LABEL_34:
          *(_DWORD *)(a1 + 24) = v14;
          goto LABEL_35;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100056AE4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadString();
      char v19 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v18;
    }
    else if (v12 == 2)
    {
      unsigned int v20 = objc_alloc_init(CSDMessagingConversationParticipant);
      objc_storeStrong((id *)(a1 + 16), v20);
      if (!PBReaderPlaceMark() || (sub_10001A534((uint64_t)v20, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_34;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_36;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_36:
      *(_DWORD *)(a1 + 24) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100057BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100057BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = WeakRetained;
  if (WeakRetained)
  {
    unint64_t v6 = [WeakRetained _dialDelayForRequest:v3];
  }
  else
  {
    unint64_t v6 = 0;
  }

  return v6;
}

uint64_t sub_100057C44(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) featureFlags];
  uint64_t v2 = TUCallRecordingEnabled();

  return v2;
}

void sub_100058B78(uint64_t a1)
{
  if ([*(id *)(a1 + 32) shouldHandleMuteRequests])
  {
    uint64_t v2 = [*(id *)(a1 + 32) provider];
    unsigned int v3 = [v2 isTinCanProvider];

    char v4 = [*(id *)(a1 + 32) systemControllerUplinkMutedBlock];
    uint64_t v5 = v4[2]();

    unint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      char v8 = (void *)v7;
      CFStringRef v9 = @"NO";
      if (v5) {
        CFStringRef v9 = @"YES";
      }
      int v18 = 138412546;
      uint64_t v19 = v7;
      __int16 v20 = 2112;
      CFStringRef v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Call with UPI %@ responding to bottom-up mute notification mute=%@", (uint8_t *)&v18, 0x16u);
    }
    int v10 = [*(id *)(a1 + 32) usesSystemMutingBlock];
    int v11 = v10[2]();

    if (((v11 ^ 1 | v3) & 1) == 0) {
      [*(id *)(a1 + 32) setUnderlyingUplinkMuted:v5 bottomUpMute:1];
    }
    if (([*(id *)(a1 + 32) isPTT] & 1) == 0)
    {
      id v12 = objc_alloc((Class)CXSetMutedCallAction);
      char v13 = [*(id *)(a1 + 32) uniqueProxyIdentifierUUID];
      id v14 = [v12 initWithCallUUID:v13 muted:v5 bottomUpMute:1];

      uint64_t v15 = [*(id *)(a1 + 32) providerCallDelegate];
      [v15 performCallAction:v14 forCall:*(void *)(a1 + 32)];
    }
    [*(id *)(a1 + 32) propertiesChanged];
  }
  else
  {
    unint64_t v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      char v17 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      int v18 = 138412290;
      uint64_t v19 = (uint64_t)v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Call with UPI %@ is not handling systemMuteStatusChanged notification", (uint8_t *)&v18, 0xCu);
    }
  }
}

id sub_100058F08(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained usesSystemMuting];

  return v2;
}

BOOL sub_100058F98(id a1)
{
  id v1 = +[TUAudioSystemController sharedAudioSystemController];
  unsigned __int8 v2 = [v1 isUplinkMuted];

  return v2;
}

void sub_100059030(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = +[TUAudioSystemController sharedAudioSystemController];
  [v3 setUplinkMuted:v2];
}

id sub_100059170(id *a1)
{
  if (([a1[4] hasSet] & 4) != 0)
  {
    BOOL v2 = [a1[4] remoteHandle];
    id v3 = [v2 siriDisplayName];
    if (![v3 length])
    {
      char v4 = [a1[5] mergedCallUpdate];
      uint64_t v5 = [v4 remoteHandle];
      unint64_t v6 = [v5 siriDisplayName];
      id v7 = [v6 length];

      if (!v7) {
        goto LABEL_6;
      }
      BOOL v2 = [a1[5] mergedCallUpdate];
      id v3 = [v2 remoteHandle];
      char v8 = [v3 siriDisplayName];
      CFStringRef v9 = [a1[4] remoteHandle];
      [v9 setSiriDisplayName:v8];
    }
  }
LABEL_6:
  int v10 = [a1[5] mergedCallUpdate];
  [v10 updateWithUpdate:a1[4]];

  if (([a1[6] hasSet] & 2) != 0)
  {
    int v11 = [a1[5] activeRemoteParticipantForCallUpdate:a1[6]];
    [a1[5] setActiveRemoteParticipant:v11];
  }
  if (([a1[6] hasSet] & 0x10) != 0)
  {
    uint64_t v12 = [a1[5] activeRemoteParticipant];
    if (!v12) {
      goto LABEL_11;
    }
    char v13 = (void *)v12;
    id v14 = [a1[5] activeRemoteParticipant];
    uint64_t v15 = [v14 sandboxExtendedImageURL];

    if (!v15)
    {
LABEL_11:
      unint64_t v16 = [a1[6] localizedCallerImageURL];
      char v17 = [a1[5] displayContext];

      if (v17)
      {
        id v18 = a1[5];
        if (v16)
        {
          uint64_t v19 = [a1[6] localizedCallerImageURL];
          __int16 v20 = [v18 imageURLForCXSandboxExtendedURL:v19];
          CFStringRef v21 = [a1[5] dynamicDisplayContext];
          [v21 setCompanyLogoURL:v20];
        }
        else
        {
          uint64_t v19 = [a1[5] dynamicDisplayContext];
          [v19 setCompanyLogoURL:0];
        }
      }
      if ([a1[5] isPTT])
      {
        id v22 = a1[5];
        char v23 = [a1[6] localizedCallerImageURL];
        unsigned int v24 = [v22 imageURLForCXSandboxExtendedURL:v23];
        [a1[5] setChannelImageURL:v24];
      }
    }
  }
  if (((unsigned __int16)[a1[6] hasSet] & 0x2000) != 0)
  {
    objc_msgSend(a1[5], "setVideo:", objc_msgSend(a1[6], "hasVideo"));
    if (([a1[6] hasVideo] & 1) == 0) {
      *((unsigned char *)a1[5] + 245) = 0;
    }
  }
  [a1[6] hasSet];
  if ((v25 & 8) != 0) {
    *((unsigned char *)a1[5] + 245) = [a1[6] isSendingVideo];
  }
  if (((unint64_t)[a1[6] hasSet] & 0x2000000000000000) != 0) {
    *((unsigned char *)a1[5] + 236) = [a1[6] isSharingScreen];
  }
  if (((unint64_t)[a1[6] hasSet] & 0x200000000000000) != 0) {
    *((unsigned char *)a1[5] + 238) = [a1[6] mixesVoiceWithMedia];
  }
  if (((unint64_t)[a1[6] hasSet] & 0x400000000000000) != 0) {
    *((unsigned char *)a1[5] + 241) = [a1[6] prefersToPlayDuringWombat];
  }
  if (((unint64_t)[a1[6] hasSet] & 0x800000000000000) != 0) {
    *((unsigned char *)a1[5] + 239) = [a1[6] mediaPlaybackOnExternalDevice];
  }
  if (((unint64_t)[a1[6] hasSet] & 0x100000000000000) != 0) {
    objc_msgSend(a1[5], "setConversation:", objc_msgSend(a1[6], "isConversation"));
  }
  [a1[6] hasSet];
  if ((v26 & 0x20) != 0) {
    objc_msgSend(a1[5], "setIsKnownCaller:", objc_msgSend(a1[6], "isKnownCaller"));
  }
  [a1[6] hasSet];
  if ((v27 & 0x40) != 0) {
    objc_msgSend(a1[5], "setFilteredOutReason:", objc_msgSend(a1[6], "filteredOutReason"));
  }
  unsigned int v28 = [a1[6] silencingUserInfo];
  id v29 = [v28 copy];
  [a1[5] setSilencingUserInfo:v29];

  char v30 = [a1[5] featureFlags];
  if ([v30 dualSIMRingtoneEnabled])
  {
    unint64_t v82 = (unint64_t)[a1[6] hasSet];

    if ((v82 & 0x20000000000) == 0) {
      goto LABEL_42;
    }
    char v30 = [a1[6] localSenderSubscriptionIdentifier];
    [a1[5] setRingtoneSubscriptionIdentifier:v30];
  }

LABEL_42:
  id v80 = [a1[6] hasSet];
  LODWORD(v81) = v31;
  if ((v31 & 0x200) != 0) {
    objc_msgSend(a1[5], "setShouldSuppressRingtone:", objc_msgSend(a1[6], "suppressRingtone"));
  }
  id v78 = [a1[6] hasSet];
  LODWORD(v79) = v32;
  if ((v32 & 0x400) != 0) {
    objc_msgSend(a1[5], "setCallSubType:", sub_1000BF268((uint64_t)objc_msgSend(a1[6], "callSubType", v78, v79, v80, v81)));
  }
  unint64_t v33 = objc_msgSend(a1[5], "mergedCallUpdate", v78, v79);
  id v34 = [v33 supportsHolding];
  char v35 = [a1[5] model];
  [v35 setSupportsHolding:v34];

  unsigned int v36 = [a1[5] mergedCallUpdate];
  id v37 = [v36 supportsGrouping];
  char v38 = [a1[5] model];
  [v38 setSupportsGrouping:v37];

  char v39 = [a1[5] mergedCallUpdate];
  id v40 = [v39 supportsUngrouping];
  unint64_t v41 = [a1[5] model];
  [v41 setSupportsUngrouping:v40];

  char v42 = [a1[5] mergedCallUpdate];
  id v43 = [v42 supportsDTMF];
  id v44 = [a1[5] model];
  [v44 setSupportsDTMF:v43];

  id v45 = [a1[5] mergedCallUpdate];
  id v46 = [v45 supportsUnambiguousMultiPartyState];
  id v47 = [a1[5] model];
  [v47 setSupportsUnambiguousMultiPartyState:v46];

  id v48 = [a1[5] mergedCallUpdate];
  id v49 = [v48 supportsAddCall];
  id v50 = [a1[5] model];
  [v50 setSupportsAddCall:v49];

  __int16 v51 = [a1[5] mergedCallUpdate];
  id v52 = [v51 supportsSendingToVoicemail];
  unint64_t v53 = [a1[5] model];
  [v53 setSupportsSendingToVoicemail:v52];

  char v54 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setSupportsDTMFUpdates:", objc_msgSend(v54, "supportsDTMFUpdates"));

  char v55 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setIsUnderlyingLinksConnected:", objc_msgSend(v55, "isUnderlyingLinksConnected"));

  unsigned int v56 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setVerificationStatus:", sub_1000BF2A8((uint64_t)objc_msgSend(v56, "verificationStatus")));

  unint64_t v57 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setPriority:", sub_1000BF294((BOOL)objc_msgSend(v57, "priority")));

  char v58 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setIdentificationCategory:", sub_1000BF2C8((uint64_t)objc_msgSend(v58, "identificationCategory")));

  char v59 = [a1[5] mergedCallUpdate];
  objc_msgSend(a1[5], "setJunkConfidence:", sub_1000BF2B8((uint64_t)objc_msgSend(v59, "junkConfidence")));

  unsigned int v60 = [a1[5] mergedCallUpdate];
  uint64_t v61 = [v60 tuMediaTokens];
  unint64_t v62 = a1[5];
  char v63 = (void *)v62[36];
  v62[36] = v61;

  char v64 = [a1[5] mergedCallUpdate];
  uint64_t v65 = [v64 localMemberHandleValue];
  uint64_t v66 = a1[5];
  unint64_t v67 = (void *)v66[39];
  v66[39] = v65;

  char v68 = [a1[5] mergedCallUpdate];
  *((void *)a1[5] + 40) = sub_1000BF27C((uint64_t)[v68 screenSharingIntention]);

  char v69 = [a1[6] screenShareAttributes];

  if (v69)
  {
    id v70 = a1[5];
    uint64_t v71 = [a1[6] screenShareAttributes];
    uint64_t v72 = [v70 tuScreenShareAttributesForScreenAttributes:v71];

    char v73 = a1[5];
    char v74 = (void *)v73[35];
    v73[35] = v72;
  }
  id result = [a1[6] screenSharingType];
  if (result)
  {
    id v76 = [a1[6] screenSharingType];
    id v77 = a1[5];
    return [v77 setScreenSharingType:v76];
  }
  return result;
}

uint64_t sub_10005C84C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 244) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_10005C8FC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 232) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_10005C9AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 245) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_10005CA5C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 234) = *(unsigned char *)(result + 40);
  return result;
}

void sub_10005CB40(uint64_t a1)
{
}

void sub_10005CC38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) mergedCallUpdate];
  [v2 setParticipantGroupUUID:v1];
}

void sub_10005D28C(uint64_t a1)
{
  BOOL v2 = sub_1000BF244(*(void *)(a1 + 40));
  id v3 = [*(id *)(a1 + 32) mergedCallUpdate];
  [v3 setBluetoothAudioFormat:v2];
}

uint64_t sub_10005D394(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 238) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_10005D454(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 239) = *(unsigned char *)(result + 40);
  return result;
}

id sub_10005D6E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isVideoUpgradeFromCall:a2];
}

void sub_10005DA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005DA5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained setStartCallBlock:0];
    [*(id *)(a1 + 32) performStartCallAction:*(void *)(a1 + 40) forCall:v3];
    [v3 propertiesChanged];
    id WeakRetained = v3;
  }
}

id sub_10005E38C(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDProviderCall;
  objc_msgSendSuper2(&v3, "hold");
  return [*(id *)(a1 + 32) _setIsOnHold:1];
}

id sub_10005E44C(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDProviderCall;
  objc_msgSendSuper2(&v3, "unhold");
  return [*(id *)(a1 + 32) _setIsOnHold:0];
}

void sub_10005ECCC(uint64_t a1)
{
}

void sub_100060E90(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10006137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000613B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  +[CSDCallStateMonitor breakBeforeMakeTimeout];
  double v5 = v4;
  unint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134217984;
    double v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Break before make timeout: %lfs", (uint8_t *)&v9, 0xCu);
  }

  dispatch_time_t v7 = dispatch_time(0, (uint64_t)(v5 * 1000000000.0));
  char v8 = [*(id *)(a1 + 32) queue];
  dispatch_after(v7, v8, v3);
}

void sub_1000614C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _handlePasscodeLockedOrBlocked];
    id WeakRetained = v2;
  }
}

void sub_10006150C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _handleLockStateChanged];
    id WeakRetained = v2;
  }
}

void sub_100062334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100062348(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained callContainer];
    unsigned __int8 v4 = [v3 hasCurrentCalls];

    double v5 = sub_100008DCC();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)dispatch_time_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "There are calls on the system, not clearing system mute cache", v7, 2u);
      }
    }
    else
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "All calls ended. Clearing system uplink muted cache", buf, 2u);
      }

      double v5 = +[TUAudioSystemController sharedAudioSystemController];
      [v5 clearUplinkMutedCache];
    }
  }
}

void sub_100063B88(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callContainer];
  id v3 = [v2 callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];

  if (v3 && [v3 status] == 3)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    unsigned __int8 v4 = [*(id *)(a1 + 32) callContainer];
    double v5 = [v4 currentAudioAndVideoCalls];

    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          double v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          if (v10 != v3)
          {
            int v11 = sub_100008DCC();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v18 = v10;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disconnecting call because video call is still sending and break before make timeout fired: %@", buf, 0xCu);
            }

            uint64_t v12 = [*(id *)(a1 + 32) callCenter];
            [v12 disconnectCall:v10];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
      }
      while (v7);
    }
  }
}

void sub_100064150(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    unsigned __int8 v4 = [WeakRetained callContainer];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1000642FC;
    v9[3] = &unk_1005051A8;
    id v10 = *(id *)(a1 + 32);
    double v5 = [v4 callPassingTest:v9];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v5 setTimeoutTimer:0];
    }
    if ([v5 callStatus] == 4)
    {
      id v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 134218242;
        uint64_t v12 = 60;
        __int16 v13 = 2112;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Exceeded ringing duration of %llu seconds; disconnecting call with identifier %@",
          buf,
          0x16u);
      }

      uint64_t v8 = [v3 callCenter];
      [v8 disconnectCall:v5];
    }
  }
}

id sub_1000642FC(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueProxyIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100064570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10006458C(id a1, TUCall *a2)
{
  id v2 = [(TUCall *)a2 provider];
  unsigned __int8 v3 = [v2 hasRestrictionsInRetailEnvironment];

  return v3;
}

void sub_1000645C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = [WeakRetained callDurationLimitTimer];
    dispatch_source_cancel(v2);

    [v3 _handleCallDurationTimerFired];
    id WeakRetained = v3;
  }
}

BOOL sub_1000648E4(id a1, TUCall *a2)
{
  id v2 = [(TUCall *)a2 provider];
  unsigned __int8 v3 = [v2 hasRestrictionsInRetailEnvironment];

  return v3;
}

uint64_t sub_1000657C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000657D0(uint64_t a1)
{
}

void sub_1000657D8(uint64_t a1)
{
  int v9 = [[CSDStatusBarResolver alloc] initWithQueue:*(void *)(a1 + 32)];
  id v2 = objc_alloc_init((Class)STCallingStatusDomainPublisher);
  id v3 = [*(id *)(a1 + 40) initWithResolver:v9 withSystemStatusPublisher:v2 queue:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  double v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = objc_alloc_init(CSDSharedConversationServerBag);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(v7 + 56);
  *(void *)(v7 + 56) = v6;
}

void sub_100065A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100065AB4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100065B50;
    block[3] = &unk_100504EC0;
    double v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

void sub_100065B50(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) resolvedCall];
  unsigned int v3 = [*(id *)(a1 + 32) shouldOpenInCallServiceForCall:v2];
  unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 24) shouldDisplaySystemCallControls];
  unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 24) shouldDisplayHandoffEligibleConversationControls];
  unsigned int v6 = [*(id *)(*(void *)(a1 + 32) + 24) shouldDisplayLagunaPullConversationControls];
  uint64_t v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v2 callUUID];
    int v12 = 67109890;
    unsigned int v13 = v3;
    __int16 v14 = 1024;
    unsigned int v15 = v4;
    __int16 v16 = 1024;
    LODWORD(v17[0]) = v6;
    WORD2(v17[0]) = 2112;
    *(void *)((char *)v17 + 6) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "handleUserInteractionWithBlock: shouldOpenInCallService: %d shouldDisplaySystemCallControls: %d shouldDisplayLagunaPullConversationControls: %d callUUID: %@", (uint8_t *)&v12, 0x1Eu);
  }
  int v9 = sub_100008DCC();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v2 callUUID];
    int v12 = 67109634;
    unsigned int v13 = v3;
    __int16 v14 = 1024;
    unsigned int v15 = v4;
    __int16 v16 = 2112;
    v17[0] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "handleUserInteractionWithBlock: shouldOpenInCallService: %d shouldDisplaySystemCallControls: %d callUUID: %@", (uint8_t *)&v12, 0x18u);
  }
  int v11 = *(void **)(a1 + 32);
  if (v4)
  {
    [v11 displaySystemCallControlsByURL];
  }
  else if (v5)
  {
    [v11 displayHandoffEligibleNearbyByURL];
  }
  else
  {
    if (!v6)
    {
      if (v3)
      {
        [v11 openInCallServiceByURL];
        if (![v2 isPTT]) {
          goto LABEL_15;
        }
        int v11 = *(void **)(a1 + 32);
      }
      [v11 openVoIPApplicationForCall:v2];
      goto LABEL_15;
    }
    [v11 displayLagunaPullByURL];
  }
LABEL_15:
}

void sub_10006639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000663BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(v3, "removeCallDescriptor:");
    id v3 = v4;
  }
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(v4, "addCallDescriptor:");
    id v3 = v4;
  }
}

void sub_1000668BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v9, 0x16u);
  }

  if (v6)
  {
    uint64_t v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003A8794(a1, v8);
    }
  }
}

void sub_100066C6C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully launched application with bundle identifier %@", (uint8_t *)&v11, 0xCu);
    }

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v9 = *(id *)(a1 + 48);
      id v10 = [v9 providerBargeCallDelegate];
      [v10 acquireTemporaryProcessAssertionForCall:v9];

LABEL_9:
    }
  }
  else if (v5)
  {
    id v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1003A8810(a1, (uint64_t)v6, v10);
    }
    goto LABEL_9;
  }
}

void sub_100067224(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) fetchServiceProviders];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;
}

void sub_100067388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000673A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000673B0(uint64_t a1)
{
}

void sub_1000673B8(uint64_t a1)
{
}

void sub_1000674D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000674E8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v6 = +[NSPredicate predicateWithBlock:&stru_100505C48];
  uint64_t v3 = [v2 filteredArrayUsingPredicate:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

BOOL sub_10006756C(id a1, CSDCarrierBundlePhoneNumberProvider *a2, NSDictionary *a3)
{
  uint64_t v3 = [(CSDCarrierBundlePhoneNumberProvider *)a2 carrierPhoneNumbers];
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_100067658(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  if (v2 != v1)
  {
    id v4 = v2;
    id v5 = [v1 copy];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 8);
    *(void *)(v6 + 8) = v5;

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100067718;
    block[3] = &unk_100504EC0;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_100067718(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 didChangeServiceProvidersForCarrierBundlePhoneNumberProviderController:*(void *)(a1 + 32)];
}

void sub_100068068(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) fetchServiceProviders];
  [*(id *)(a1 + 32) setServiceProviders:v2];
}

void sub_100068190(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) fetchServiceProviders];
  [*(id *)(a1 + 32) setServiceProviders:v2];
}

void sub_10006C21C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) blocksPendingTransportAvailability];
  id v3 = objc_retainBlock(*(id *)(a1 + 40));
  unsigned int v4 = [v2 containsObject:v3];

  if (v4)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = objc_retainBlock(*(id *)(a1 + 40));
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Transport availability block timed out: %@", (uint8_t *)&v9, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v7 = [*(id *)(a1 + 32) blocksPendingTransportAvailability];
    id v8 = objc_retainBlock(*(id *)(a1 + 40));
    [v7 removeObject:v8];
  }
}

uint64_t sub_10006DF20(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_38;
        }
        v15 += 7;
        BOOL v9 = v16++ >= 9;
        if (v9)
        {
          LODWORD(v17) = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v17) = 0;
      }
LABEL_40:
      uint64_t v25 = 8;
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          uint64_t v13 = PBReaderReadString();
          __int16 v14 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v13;
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      char v20 = 0;
      unsigned int v21 = 0;
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
        v17 |= (unint64_t)(v23 & 0x7F) << v20;
        if ((v23 & 0x80) == 0) {
          goto LABEL_42;
        }
        v20 += 7;
        BOOL v9 = v21++ >= 9;
        if (v9)
        {
          LODWORD(v17) = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v17) = 0;
      }
LABEL_44:
      uint64_t v25 = 24;
    }
    *(_DWORD *)(a1 + v25) = v17;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10006E7E8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_30:
      *(unsigned char *)(a1 + 8) = v14 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10006F044(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_44;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_46;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_46:
        uint64_t v23 = 40;
        goto LABEL_51;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_50:
        uint64_t v23 = 24;
LABEL_51:
        *(_DWORD *)(a1 + v23) = v14;
        goto LABEL_52;
      case 3u:
        unint64_t v22 = objc_alloc_init(CSDMessagingLinkSyncUpdateMessage);
        objc_storeStrong((id *)(a1 + 32), v22);
        if (!PBReaderPlaceMark() || (sub_1000D3A2C((uint64_t)v22, a2) & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_42;
      case 4u:
        unint64_t v22 = objc_alloc_init(CSDMessagingLinkSyncCheckInMessage);
        objc_storeStrong((id *)(a1 + 8), v22);
        if (!PBReaderPlaceMark() || (sub_1001C5960((uint64_t)v22, a2) & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_42;
      case 5u:
        unint64_t v22 = objc_alloc_init(CSDMessagingLinkSyncRecoverMessage);
        objc_storeStrong((id *)(a1 + 16), v22);
        if PBReaderPlaceMark() && (sub_10000A9EC((uint64_t)v22, a2))
        {
LABEL_42:
          PBReaderRecallMark();

LABEL_52:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_54:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_52;
    }
  }
}

id sub_10006FC54(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateDefaultPairedDeviceUniqueIDDefault];
  [*(id *)(a1 + 32) _updateThumperCallingPreferences];
  id v2 = *(void **)(a1 + 32);

  return _[v2 _checkIfDevicesShouldBeUnenrolled];
}

id sub_100071218(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateDefaultPairedDeviceUniqueIDDefault];
  id v2 = *(void **)(a1 + 32);

  return _[v2 _checkIfDevicesShouldBeUnenrolled];
}

void sub_100071538(uint64_t a1)
{
  id v2 = +[IMUserNotificationCenter sharedInstance];
  id v3 = [v2 countForIdentifier:*(void *)(a1 + 32)];

  if (v3)
  {
    char v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Not adding user notification because we are already displaying one", buf, 2u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) setUsesNotificationCenter:0];
    [*(id *)(a1 + 40) setRepresentedApplicationBundle:TUBundleIdentifierTelephonyUtilitiesFramework];
    id v5 = +[IMUserNotificationCenter sharedInstance];
    [v5 addUserNotification:*(void *)(a1 + 40) listener:0 completionHandler:&stru_100505CF0];
  }
}

void sub_100071640(id a1, IMUserNotification *a2)
{
  if (![(IMUserNotification *)a2 response])
  {
    id v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User requested to Turn On Thumper calling", v3, 2u);
    }

    +[TUCallCapabilities requestPinFromPrimaryDevice];
  }
}

void sub_1000716D4(id a1)
{
  uint64_t v1 = +[IMUserNotificationCenter sharedInstance];
  id v2 = [v1 countForIdentifier:@"com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported"];

  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing existing reminder notification", v5, 2u);
    }

    char v4 = +[IMUserNotificationCenter sharedInstance];
    [v4 removeNotificationsForServiceIdentifier:@"com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported"];
  }
}

void sub_100071988(uint64_t a1)
{
  id v2 = +[IMUserNotificationCenter sharedInstance];
  id v3 = [v2 countForIdentifier:*(void *)(a1 + 32)];

  if (v3)
  {
    char v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Not adding user notification because we are already displaying one", buf, 2u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) setUsesNotificationCenter:0];
    [*(id *)(a1 + 40) setRepresentedApplicationBundle:TUBundleIdentifierTelephonyUtilitiesFramework];
    id v5 = +[IMUserNotificationCenter sharedInstance];
    [v5 addUserNotification:*(void *)(a1 + 40) listener:0 completionHandler:&stru_100505D30];
  }
}

void sub_100071A90(id a1, IMUserNotification *a2)
{
  if ([(IMUserNotification *)a2 response] == (id)1)
  {
    id v2 = [(id)CUTWeakLinkClass() preferencesURL];
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Emergency Address disclaimer: Preferences button pressed, open URL (%@).", (uint8_t *)&v4, 0xCu);
    }

    TUOpenSensitiveURL();
  }
}

void sub_100071B80(id a1)
{
  uint64_t v1 = +[IMUserNotificationCenter sharedInstance];
  id v2 = [v1 countForIdentifier:@"com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled"];

  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing existing emergency address disclaimer", v5, 2u);
    }

    int v4 = +[IMUserNotificationCenter sharedInstance];
    [v4 removeNotificationsForServiceIdentifier:@"com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled"];
  }
}

void sub_100072774(id a1)
{
  uint64_t v1 = [CSDPersistedChannelRegistry alloc];
  id v4 = +[NSUserDefaults tu_defaults];
  id v2 = [(CSDPersistedChannelRegistry *)v1 initWithUserDefaults:v4];
  id v3 = (void *)qword_10058C280;
  qword_10058C280 = (uint64_t)v2;
}

void sub_1000729E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_100072ACC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers];
  [v2 removeObject:*(void *)(a1 + 40)];
}

id sub_100072BB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_notePushToTalkChannelConnectedForCall:", *(void *)(a1 + 40));
}

void sub_100072F1C(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "observers", 0);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      unint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) activePersistedChannelIdentityChangedTo:*(void *)(a1 + 40)];
        unint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000730F0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) providerIdentifier];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "_queue_tearDownPersistedChannelForApplicationIdentifier:teardownType:", v3, *(unsigned int *)(a1 + 56));
}

void sub_100073244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10007325C(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_queue_tearDownPersistedChannelForBundleIdentifier:teardownType:", *(void *)(a1 + 40), *(unsigned int *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100073534(uint64_t a1)
{
  return [*(id *)(a1 + 32) activePersistedChannelIdentityChangedTo:0];
}

id sub_1000735D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_tearDownPersistedChannelForBundleIdentifier:teardownType:", *(void *)(a1 + 40), 2);
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return objc_msgSend(v2, "_queue_clearPendingChannelTeardownAcknowledgementsForBundleIdentfier:", v3);
}

uint64_t sub_1000737F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100073804(uint64_t a1)
{
}

void sub_10007380C(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_activePersistedChannelIdentity");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100073B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100073B4C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) dictionaryForKey:@"CSDPersistedTornDownChannelIdentities"];
  uint64_t v3 = [v2 objectForKey:a1[5]];
  if ([v3 length])
  {
    id v12 = 0;
    id v4 = +[CSDPersistedChannelIdentity unarchivedObjectFromData:v3 error:&v12];
    id v5 = v12;
    unint64_t v6 = v5;
    if (v4)
    {
      id v7 = [v4 channelUUID];
      uint64_t v8 = [v7 UUIDString];
      uint64_t v9 = *(void *)(a1[6] + 8);
      long long v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
    else
    {
      if (!v5)
      {
LABEL_9:

        goto LABEL_10;
      }
      int v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1003A8AD8();
      }

      id v7 = [v2 mutableCopy];
      [v7 removeObjectForKey:a1[5]];
      [*(id *)(a1[4] + 8) setObject:v7 forKey:@"CSDPersistedTornDownChannelIdentities"];
    }

    goto LABEL_9;
  }
LABEL_10:
}

id sub_100073E1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_clearPendingChannelTeardownAcknowledgementsForBundleIdentfier:", *(void *)(a1 + 40));
}

void sub_100074C48(uint64_t a1)
{
  uint64_t v2 = +[CSDFaceTimeVideoIDSService sharedInstance];
  [v2 addServiceDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 24)];

  uint64_t v3 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = +[CSDRelayIDSService sharedInstance];
  [v3 addObserver:v4 selector:"devicesChanged:" name:@"CSDIDSDeviceListChangedNotification" object:v5];

  unint64_t v6 = +[NSNotificationCenter defaultCenter];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = +[CSDFaceTimeVideoIDSService sharedInstance];
  [v6 addObserver:v7 selector:"callerIDChanged:" name:@"CSDIDSServiceCallerIDChangedNotification" object:v8];

  uint64_t v9 = +[FTCServiceAvailabilityCenter sharedInstance];
  [v9 addListenerID:@"com.apple.telephonyutilities.callservicesd.accountscontroller" forService:0];

  long long v10 = +[FTCServiceAvailabilityCenter sharedInstance];
  [v10 addListenerID:@"com.apple.telephonyutilities.callservicesd.accountscontroller" forService:2];

  int v11 = +[NSNotificationCenter defaultCenter];
  [v11 addObserver:*(void *)(a1 + 32) selector:"serviceAvailabilityChanged:" name:FTCServiceAvailabilityDidChangeNotification object:0];

  id v12 = sub_100008DCC();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = [*(id *)(a1 + 32) _faceTimeAudioAvailability];
    id v14 = [*(id *)(a1 + 32) _faceTimeVideoAvailability];
    int v18 = 134218240;
    id v19 = v13;
    __int16 v20 = 2048;
    id v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FaceTime Audio availability is %ld. FaceTime Video availability is %ld", (uint8_t *)&v18, 0x16u);
  }

  [*(id *)(a1 + 32) _updateOutgoingCallerID];
  unint64_t v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    char v16 = objc_opt_class();
    int v18 = 138412290;
    id v19 = v16;
    id v17 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Initialized %@", (uint8_t *)&v18, 0xCu);
  }
}

id sub_100075254(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received caller ID changed notification: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary];
}

void sub_1000753B8(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received service availability changed notification: %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) delegate];
  [v4 faceTimeAvailabilityChanged];
}

id sub_10007552C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received devices changed notification: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary];
}

void sub_100075954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007596C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007597C(uint64_t a1)
{
}

void sub_100075984(uint64_t a1)
{
}

void sub_100075AB8(uint64_t a1)
{
  id v4 = *(id *)(*(void *)(a1 + 32) + 16);
  [*(id *)(a1 + 32) _updateOutgoingCallerID];
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  if ((TUStringsAreEqualOrNil() & 1) == 0)
  {
    uint64_t v3 = [*(id *)(a1 + 32) delegate];
    [v3 outgoingCallerIDChanged];
  }
}

id sub_10007602C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isValidOutgoingCallerID:a2];
}

id sub_100076038(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isValidOutgoingCallerID:a2];
}

void sub_1000760C0(id a1)
{
  off_10058C290 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_1000771AC(uint64_t a1)
{
  id v2 = +[TUConversationProviderManagerXPCClient conversationProviderManagerClientXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 48) setRemoteObjectInterface:v2];

  uint64_t v3 = +[TUConversationProviderManagerXPCClient conversationProviderManagerServerXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 48) setExportedInterface:v3];

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "setExportedObject:");
  [*(id *)(*(void *)(a1 + 32) + 48) setRequiredConnectionCapability:@"register-gft-service"];
  [*(id *)(*(void *)(a1 + 32) + 48) setInterruptionHandler:&stru_100505E50];
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  long long v10 = sub_100077414;
  int v11 = &unk_100505E78;
  objc_copyWeak(&v12, &location);
  [*(id *)(*(void *)(a1 + 32) + 48) setInvalidationHandler:&v8];
  id v4 = objc_msgSend(*(id *)(a1 + 32), "clientManager", v8, v9, v10, v11);
  int v5 = [v4 asynchronousExportedObjectProxy];
  +[TUConversationProviderManagerXPCClient setAsynchronousServer:v5];

  uint64_t v6 = [*(id *)(a1 + 32) clientManager];
  uint64_t v7 = [v6 synchronousExportedObjectProxy];
  +[TUConversationProviderManagerXPCClient setSynchronousServer:v7];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_100077348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100077368(id a1, CSDClient *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100077414(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v38 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@ for CSDConversationProviderManagerXPCServer", buf, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = [v3 capabilities];
  if (![v6 wantsCallDisconnectionOnInvalidation]) {
    goto LABEL_19;
  }
  uint64_t v7 = [WeakRetained featureFlags];
  unsigned int v8 = [v7 groupFacetimeAsAServiceEnabled];

  if (v8)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v9 = [WeakRetained conversationManager];
    uint64_t v6 = [v9 activeConversations];

    id v10 = [v6 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v10)
    {
      id v12 = v10;
      uint64_t v13 = *(void *)v33;
      *(void *)&long long v11 = 138412290;
      long long v30 = v11;
      do
      {
        id v14 = 0;
        id v31 = v12;
        do
        {
          if (*(void *)v33 != v13) {
            objc_enumerationMutation(v6);
          }
          unint64_t v15 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v14);
          char v16 = objc_msgSend(v15, "provider", v30);
          unsigned __int8 v17 = [v16 isDefaultProvider];

          if ((v17 & 1) == 0)
          {
            int v18 = [WeakRetained providerManager];
            id v19 = [v18 providerIdentifiersForClient:v3];

            if ([v19 count])
            {
              __int16 v20 = [v15 provider];
              [v20 identifier];
              uint64_t v21 = v13;
              id v22 = WeakRetained;
              uint64_t v23 = v6;
              v25 = id v24 = v3;
              unsigned int v26 = [v19 containsObject:v25];

              id v3 = v24;
              uint64_t v6 = v23;
              id WeakRetained = v22;
              uint64_t v13 = v21;
              id v12 = v31;

              if (v26)
              {
                char v27 = sub_100008DCC();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = v30;
                  id v38 = v15;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Leaving since client got invalidated conversation: %@", buf, 0xCu);
                }

                unsigned int v28 = [WeakRetained conversationManager];
                id v29 = [v15 UUID];
                [v28 leaveConversationWithUUID:v29];
              }
            }
          }
          id v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v12 = [v6 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v12);
    }
LABEL_19:
  }
}

id sub_100077718(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.conversationprovidermanager"];

  notify_register_check("CSDConversationProviderManagerClientsShouldConnectNotification", (int *)(*(void *)(a1 + 32) + 8));
  notify_set_state(*(_DWORD *)(*(void *)(a1 + 32) + 8), 0);
  id v3 = *(void **)(a1 + 32);

  return [v3 notifyClientsToConnectIfNecessary];
}

void sub_1000778F0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 invalidate];
}

void sub_100077B28(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_100077C30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_100077D5C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationProviderForIdentifier: %@", (uint8_t *)&v7, 0xCu);
  }

  int v4 = [*(id *)(a1 + 40) providerManager];
  int v5 = [v4 conversationProviderForIdentifier:*(void *)(a1 + 32)];
  uint64_t v6 = [v5 tuProvider];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100077F68(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = TULoggableStringForHandle();
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "generatePseudonymHandleForConversationProviderURI: %@", (uint8_t *)&v5, 0xCu);
  }
  int v4 = [*(id *)(a1 + 40) providerManager];
  [v4 generatePseudonymHandleForConversationProvider:*(void *)(a1 + 48) expiryDuration:*(void *)(a1 + 32) URI:*(void *)(a1 + 56) completionHandler:*(double *)(a1 + 64)];
}

void sub_100078170(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "renewPseudonymHandle: %@", (uint8_t *)&v5, 0xCu);
  }

  int v4 = [*(id *)(a1 + 40) providerManager];
  [v4 renewPseudonymHandle:*(void *)(a1 + 32) forConversationProvider:*(void *)(a1 + 48) expirationDate:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

void sub_10007833C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "revokePseudonymHandle: %@", (uint8_t *)&v5, 0xCu);
  }

  int v4 = [*(id *)(a1 + 40) providerManager];
  [v4 revokePseudonymHandle:*(void *)(a1 + 32) forConversationProvider:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_100078504(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "doesHandleCorrespondToConversationProvider: %@", (uint8_t *)&v5, 0xCu);
  }

  int v4 = [*(id *)(a1 + 40) providerManager];
  [v4 doesHandle:*(void *)(a1 + 32) correspondToConversationProvider:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_100078894(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)TUCallServicesClientCapabilities);
  int v5 = [*(id *)(a1 + 32) providerConfiguration];
  objc_msgSend(v4, "setWantsCallDisconnectionOnInvalidation:", objc_msgSend(v5, "wantsLeaveOnInvalidation"));

  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "clientCapabilities: %@", (uint8_t *)&v11, 0xCu);
  }

  [*(id *)(a1 + 40) setCapabilities:v4];
  int v7 = +[CSDConversationProviderManager sharedInstance];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = [*(id *)(a1 + 32) identifier];
  [v7 startTrackingClient:v8 forProviderIdentifier:v9];

  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);
  }
}

BOOL sub_1000797B0(id a1, TUCall *a2)
{
  id v2 = a2;
  BOOL v3 = ([(TUCall *)v2 isPTT] & 1) == 0
    && [(TUCall *)v2 callStatus] == 1;

  return v3;
}

void sub_100079F28(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100079F3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handlePushToTalkRecordingStateChanged:*(void *)(a1 + 32)];
}

void sub_10007A388(uint64_t a1, char a2)
{
  id v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007A43C;
  block[3] = &unk_100505F88;
  int v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v5;
  char v8 = a2;
  dispatch_async(v4, block);
}

uint64_t sub_10007A43C(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsPlayingSystemSound:0];
  [*(id *)(a1 + 32) updateUplinkMuteState];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    BOOL v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10007A5F8(uint64_t a1)
{
  id v2 = +[TUCallCenter sharedInstance];
  BOOL v3 = [v2 frontmostAudioOrVideoCall];

  id v4 = sub_100008DCC();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Barge call is ignoring audioApplicationMuteStatusChanged because another call is present", (uint8_t *)&v10, 2u);
    }
    goto LABEL_10;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Handling audioApplicationMuteStatusChanged notification for barge call: %@", (uint8_t *)&v10, 0xCu);
  }

  if ([*(id *)(a1 + 40) callStatus] != 6)
  {
    id v7 = [*(id *)(a1 + 32) userInfo];
    id v4 = [v7 objectForKey:AVAudioApplicationMuteStateKey];

    unsigned int v8 = [v4 BOOLValue];
    uint64_t v9 = *(void **)(a1 + 40);
    if (v8) {
      [v9 stopTransmissionWithOriginator:1];
    }
    else {
      [v9 startTransmissionWithOriginator:1];
    }
LABEL_10:
  }
}

void sub_10007AA14(uint64_t a1)
{
  id v2 = +[TUCallProviderManagerXPCClient callProviderManagerClientXPCInterface];
  BOOL v3 = [*(id *)(a1 + 32) clientManager];
  [v3 setRemoteObjectInterface:v2];

  id v4 = +[TUCallProviderManagerXPCClient callProviderManagerServerXPCInterface];
  BOOL v5 = [*(id *)(a1 + 32) clientManager];
  [v5 setExportedInterface:v4];

  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = [v6 clientManager];
  [v7 setExportedObject:v6];

  uint64_t v8 = TUEntitlementsAccessCallProvidersCapability;
  uint64_t v9 = [*(id *)(a1 + 32) clientManager];
  [v9 setRequiredConnectionCapability:v8];

  int v10 = [*(id *)(a1 + 32) clientManager];
  [v10 setInterruptionHandler:&stru_100505FD0];

  uint64_t v11 = [*(id *)(a1 + 32) clientManager];
  [v11 setInvalidationHandler:&stru_100505FF0];

  id v12 = [*(id *)(a1 + 32) clientManager];
  uint64_t v13 = [v12 asynchronousExportedObjectProxy];
  +[TUCallProviderManagerXPCClient setAsynchronousServer:v13];

  id v15 = [*(id *)(a1 + 32) clientManager];
  id v14 = [v15 synchronousExportedObjectProxy];
  +[TUCallProviderManagerXPCClient setSynchronousServer:v14];
}

void sub_10007ABA0(id a1, CSDClient *a2)
{
  id v2 = a2;
  BOOL v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    BOOL v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10007AC4C(id a1, CSDClient *a2)
{
  id v2 = a2;
  BOOL v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    BOOL v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10007ACF8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.callprovidermanager"];
}

void sub_10007ADCC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 invalidate];
}

void sub_10007B2C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10007B3C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10007B4DC(uint64_t a1, void *a2, void *a3)
{
  BOOL v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v10 = [v5 providersByIdentifierForClient:v7];
  uint64_t v8 = [*(id *)(a1 + 32) localProvidersByIdentifierForClient:v7];
  uint64_t v9 = [*(id *)(a1 + 32) pairedHostDeviceProvidersByIdentifierForClient:v7];

  [v6 updateProvidersByIdentifier:v10 localProvidersByIdentifier:v8 pairedHostDeviceProvidersByIdentifier:v9];
}

void sub_10007B688(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithName:@"com.apple.private.alloy.facetime.video"];
  id v2 = (void *)qword_10058C2A0;
  qword_10058C2A0 = (uint64_t)v1;
}

void sub_10007BB50(id a1)
{
  id v1 = TUPreferredFaceTimeBundleIdentifier();
  id v2 = +[LSApplicationRecord csd_applicationRecordForBundleIdentifier:v1];
  BOOL v3 = [v2 machOUUIDs];
  uint64_t v4 = [v3 firstObject];
  BOOL v5 = (void *)qword_10058C2B0;
  qword_10058C2B0 = v4;

  if (!qword_10058C2B0)
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003A8BA8((uint64_t)v1, v6);
    }
  }
}

CSDAVConference *__cdecl sub_10007BD28(id a1)
{
  id v1 = objc_alloc_init(CSDAVConference);

  return v1;
}

void sub_10007CBC0(id a1)
{
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"disableFaceTimeKeyExchange", TUBundleIdentifierTelephonyUtilitiesFramework, &keyExistsAndHasValidFormat))
  {
    BOOL v1 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v1 = 1;
  }
  char v2 = !v1;
  byte_10058C2C0 = v2;
  if (!v1)
  {
    BOOL v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v6 = @"disableFaceTimeKeyExchange";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[WARN] Disabling key exchange because %@ default is set to YES", buf, 0xCu);
    }
  }
}

void sub_10007EFAC(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) dateReceivedFirstRemoteFrame];

  if (!v2)
  {
    BOOL v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 134218242;
      uint64_t v8 = 0x4008000000000000;
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[WARN] First frame not received after %f seconds for %@", (uint8_t *)&v7, 0x16u);
    }

    BOOL v5 = *(void **)(a1 + 32);
    CFStringRef v6 = [v5 conference];
    [v5 receivedFirstRemoteFrameForConference:v6];
  }
}

BOOL sub_10007FB6C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      switch((v6 >> 3))
      {
        case 1u:
          uint64_t v12 = PBReaderReadString();
          uint64_t v13 = 24;
          goto LABEL_24;
        case 2u:
          uint64_t v12 = PBReaderReadString();
          uint64_t v13 = 8;
          goto LABEL_24;
        case 3u:
          uint64_t v12 = PBReaderReadString();
          uint64_t v13 = 32;
          goto LABEL_24;
        case 4u:
          uint64_t v12 = PBReaderReadString();
          uint64_t v13 = 16;
LABEL_24:
          id v14 = *(void **)(a1 + v13);
          *(void *)(a1 + v13) = v12;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_25:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000803A0(uint64_t a1)
{
  BOOL v1 = [[CSDCallDirectoryManager alloc] initWithQueue:*(void *)(a1 + 32)];
  char v2 = (void *)qword_10058C2D0;
  qword_10058C2D0 = (uint64_t)v1;
}

void sub_1000805D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000805F8(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device first unlock block invoked, initializing CXCallDirectoryManager...", v5, 2u);
  }

  id v3 = objc_alloc_init((Class)CXCallDirectoryManager);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setManager:v3];
}

void sub_100080690(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    [*(id *)(a1 + 32) beginDailyMaintenanceWithActivity:v3];
  }
  else if (!state)
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v6 = xpc_activity_copy_criteria(v3);
      int v7 = 138412290;
      xpc_object_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity checked in. Criteria: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100080C0C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) manager];

  id v3 = sub_100008DCC();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning daily maintenance with activity %@", buf, 0xCu);
    }

    xpc_object_t v6 = [*(id *)(a1 + 32) manager];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100080DBC;
    v16[3] = &unk_100505418;
    int v7 = *(void **)(a1 + 40);
    v16[4] = *(void *)(a1 + 32);
    id v17 = v7;
    [v6 compactStoreWithCompletionHandler:v16];
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting activity state to XPC_ACTIVITY_STATE_DONE", buf, 2u);
    }

    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 5))
    {
      xpc_object_t v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1003A8E00(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }
  }
}

void sub_100080DBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sub_100008DCC();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003A8E38();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully compacted store", buf, 2u);
  }

  xpc_object_t v6 = [*(id *)(a1 + 32) manager];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100080ED4;
  v7[3] = &unk_100506100;
  id v8 = *(id *)(a1 + 40);
  [v6 cleanUpLiveLookupDataWithCompletionHandler:v7];
}

void sub_100080ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sub_100008DCC();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003A8EA0();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cleaned up LiveLookupData", buf, 2u);
  }

  xpc_object_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting activity state to XPC_ACTIVITY_STATE_DONE", v15, 2u);
  }

  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003A8E00(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void sub_10008116C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sub_100008DCC();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003A8F70();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully synchronized call directory extensions", buf, 2u);
  }

  xpc_object_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100081284;
  block[3] = &unk_100504EC0;
  id v8 = *(id *)(a1 + 40);
  dispatch_async(v6, block);
}

void sub_100081284(uint64_t a1)
{
  id v2 = +[CSDTransactionManager sharedInstance];
  [v2 endTransactionIfNecessaryForObject:*(void *)(a1 + 32)];
}

uint64_t sub_10008589C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x2000u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_286;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_288;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_286:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_288:
        uint64_t v175 = 372;
        goto LABEL_381;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 376;
        goto LABEL_284;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 64;
        goto LABEL_284;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 360;
        goto LABEL_284;
      case 5u:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallModelState);
        objc_storeStrong((id *)(a1 + 224), v21);
        if (!PBReaderPlaceMark() || (sub_1001BA648((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 6u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x80u;
        while (2)
        {
          uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v15 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_292:
        uint64_t v175 = 288;
        goto LABEL_381;
      case 7u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(_DWORD *)(a1 + 400) |= 0x20000000u;
        while (2)
        {
          uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v10 = v28++ >= 9;
              if (v10)
              {
                uint64_t v29 = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v29 = 0;
        }
LABEL_296:
        BOOL v176 = v29 != 0;
        uint64_t v177 = 399;
        goto LABEL_394;
      case 8u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(_DWORD *)(a1 + 400) |= 0x4000u;
        while (2)
        {
          uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v10 = v34++ >= 9;
              if (v10)
              {
                uint64_t v35 = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0;
        }
LABEL_300:
        BOOL v176 = v35 != 0;
        uint64_t v177 = 384;
        goto LABEL_394;
      case 9u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 240;
        goto LABEL_284;
      case 0xAu:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 8u;
        while (2)
        {
          uint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v15 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v10 = v40++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_304:
        uint64_t v175 = 248;
        goto LABEL_381;
      case 0xBu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 184;
        goto LABEL_284;
      case 0xCu:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 400) |= 0x10000000u;
        while (2)
        {
          uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v10 = v45++ >= 9;
              if (v10)
              {
                uint64_t v46 = 0;
                goto LABEL_308;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v46 = 0;
        }
LABEL_308:
        BOOL v176 = v46 != 0;
        uint64_t v177 = 398;
        goto LABEL_394;
      case 0xDu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 24;
        goto LABEL_284;
      case 0xEu:
        uint64_t v21 = objc_alloc_init(CSDMessagingCall);
        [(id)a1 addProtoCall:v21];
        if (!PBReaderPlaceMark() || (sub_1000AD994((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0xFu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 120;
        goto LABEL_284;
      case 0x10u:
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 4u;
        while (2)
        {
          uint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53;
            v15 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              BOOL v10 = v51++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_312;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_312:
        uint64_t v175 = 128;
        goto LABEL_381;
      case 0x11u:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x400u;
        while (2)
        {
          uint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
            v15 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              BOOL v10 = v56++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_316;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_316:
        uint64_t v175 = 312;
        goto LABEL_381;
      case 0x12u:
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x40u;
        while (2)
        {
          uint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63;
            v15 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              BOOL v10 = v61++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_320;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_320:
        uint64_t v175 = 272;
        goto LABEL_381;
      case 0x13u:
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0;
        *(_DWORD *)(a1 + 400) |= 0x400000u;
        while (2)
        {
          uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v69 = v68 + 1;
          if (v68 == -1 || v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
            v67 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              BOOL v10 = v66++ >= 9;
              if (v10)
              {
                uint64_t v67 = 0;
                goto LABEL_324;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v67 = 0;
        }
LABEL_324:
        BOOL v176 = v67 != 0;
        uint64_t v177 = 392;
        goto LABEL_394;
      case 0x14u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 80;
        goto LABEL_284;
      case 0x15u:
        *(_DWORD *)(a1 + 400) |= 1u;
        unint64_t v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v72 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v72 = 0;
        }
        uint64_t v178 = 8;
        goto LABEL_401;
      case 0x16u:
        *(_DWORD *)(a1 + 400) |= 2u;
        unint64_t v73 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v73 <= 0xFFFFFFFFFFFFFFF7 && v73 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v72 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v72 = 0;
        }
        uint64_t v178 = 16;
LABEL_401:
        *(void *)(a1 + v178) = v72;
        goto LABEL_395;
      case 0x17u:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v76 = 0;
        *(_DWORD *)(a1 + 400) |= 0x80000u;
        while (2)
        {
          uint64_t v77 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v78 = v77 + 1;
          if (v77 == -1 || v78 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v79 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v77);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v78;
            v76 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              BOOL v10 = v75++ >= 9;
              if (v10)
              {
                uint64_t v76 = 0;
                goto LABEL_328;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v76 = 0;
        }
LABEL_328:
        BOOL v176 = v76 != 0;
        uint64_t v177 = 389;
        goto LABEL_394;
      case 0x18u:
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v82 = 0;
        *(_DWORD *)(a1 + 400) |= 0x8000u;
        while (2)
        {
          uint64_t v83 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v84 = v83 + 1;
          if (v83 == -1 || v84 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v85 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v83);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v84;
            v82 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              BOOL v10 = v81++ >= 9;
              if (v10)
              {
                uint64_t v82 = 0;
                goto LABEL_332;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v82 = 0;
        }
LABEL_332:
        BOOL v176 = v82 != 0;
        uint64_t v177 = 385;
        goto LABEL_394;
      case 0x19u:
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v88 = 0;
        *(_DWORD *)(a1 + 400) |= 0x20000u;
        while (2)
        {
          uint64_t v89 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v90 = v89 + 1;
          if (v89 == -1 || v90 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
            v88 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              BOOL v10 = v87++ >= 9;
              if (v10)
              {
                uint64_t v88 = 0;
                goto LABEL_336;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v88 = 0;
        }
LABEL_336:
        BOOL v176 = v88 != 0;
        uint64_t v177 = 387;
        goto LABEL_394;
      case 0x1Au:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 32;
        goto LABEL_284;
      case 0x1Bu:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallCapabilitiesState);
        objc_storeStrong((id *)(a1 + 208), v21);
        if (!PBReaderPlaceMark() || !sub_10013EAD8((uint64_t)v21, a2)) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x1Cu:
        char v92 = 0;
        unsigned int v93 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x100u;
        while (2)
        {
          uint64_t v94 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v95 = v94 + 1;
          if (v94 == -1 || v95 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v94);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v95;
            v15 |= (unint64_t)(v96 & 0x7F) << v92;
            if (v96 < 0)
            {
              v92 += 7;
              BOOL v10 = v93++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_340;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_340:
        uint64_t v175 = 292;
        goto LABEL_381;
      case 0x1Du:
        char v97 = 0;
        unsigned int v98 = 0;
        uint64_t v99 = 0;
        *(_DWORD *)(a1 + 400) |= 0x10000u;
        while (2)
        {
          uint64_t v100 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v101 = v100 + 1;
          if (v100 == -1 || v101 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v102 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v100);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v101;
            v99 |= (unint64_t)(v102 & 0x7F) << v97;
            if (v102 < 0)
            {
              v97 += 7;
              BOOL v10 = v98++ >= 9;
              if (v10)
              {
                uint64_t v99 = 0;
                goto LABEL_344;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v99 = 0;
        }
LABEL_344:
        BOOL v176 = v99 != 0;
        uint64_t v177 = 386;
        goto LABEL_394;
      case 0x1Fu:
        PBReaderReadString();
        uint64_t v21 = (CSDMessagingCallModelState *)objc_claimAutoreleasedReturnValue();
        if (v21) {
          [(id)a1 addOtherUniqueProxyIdentifiers:v21];
        }
        goto LABEL_273;
      case 0x20u:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallModel);
        objc_storeStrong((id *)(a1 + 216), v21);
        if (!PBReaderPlaceMark() || !sub_10004EE30((uint64_t)v21, a2)) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x21u:
        uint64_t v21 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 104), v21);
        goto LABEL_267;
      case 0x22u:
        char v104 = 0;
        unsigned int v105 = 0;
        uint64_t v106 = 0;
        *(_DWORD *)(a1 + 400) |= 0x200000u;
        while (2)
        {
          uint64_t v107 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v108 = v107 + 1;
          if (v107 == -1 || v108 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v109 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v107);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v108;
            v106 |= (unint64_t)(v109 & 0x7F) << v104;
            if (v109 < 0)
            {
              v104 += 7;
              BOOL v10 = v105++ >= 9;
              if (v10)
              {
                uint64_t v106 = 0;
                goto LABEL_348;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v106 = 0;
        }
LABEL_348:
        BOOL v176 = v106 != 0;
        uint64_t v177 = 391;
        goto LABEL_394;
      case 0x23u:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallProvider);
        [(id)a1 addProviders:v21];
        goto LABEL_170;
      case 0x24u:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallDisplayContext);
        objc_storeStrong((id *)(a1 + 256), v21);
        if (!PBReaderPlaceMark() || !sub_10014771C((id *)v21, a2)) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x25u:
        uint64_t v21 = objc_alloc_init(CSDMessagingAVConferenceInviteData);
        objc_storeStrong((id *)(a1 + 144), v21);
        if (!PBReaderPlaceMark() || !sub_1000A0AE0((uint64_t)v21, a2)) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x26u:
        uint64_t v21 = objc_alloc_init(CSDMessagingCallProvider);
        objc_storeStrong((id *)(a1 + 280), v21);
LABEL_170:
        if (!PBReaderPlaceMark() || (sub_10008DC20(v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x27u:
        char v110 = 0;
        unsigned int v111 = 0;
        uint64_t v112 = 0;
        *(_DWORD *)(a1 + 400) |= 0x8000000u;
        while (2)
        {
          uint64_t v113 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v114 = v113 + 1;
          if (v113 == -1 || v114 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v115 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v113);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v114;
            v112 |= (unint64_t)(v115 & 0x7F) << v110;
            if (v115 < 0)
            {
              v110 += 7;
              BOOL v10 = v111++ >= 9;
              if (v10)
              {
                uint64_t v112 = 0;
                goto LABEL_352;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v112 = 0;
        }
LABEL_352:
        BOOL v176 = v112 != 0;
        uint64_t v177 = 397;
        goto LABEL_394;
      case 0x28u:
        char v116 = 0;
        unsigned int v117 = 0;
        uint64_t v118 = 0;
        *(_DWORD *)(a1 + 400) |= 0x4000000u;
        while (2)
        {
          uint64_t v119 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v120 = v119 + 1;
          if (v119 == -1 || v120 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v121 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v119);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v120;
            v118 |= (unint64_t)(v121 & 0x7F) << v116;
            if (v121 < 0)
            {
              v116 += 7;
              BOOL v10 = v117++ >= 9;
              if (v10)
              {
                uint64_t v118 = 0;
                goto LABEL_356;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v118 = 0;
        }
LABEL_356:
        BOOL v176 = v118 != 0;
        uint64_t v177 = 396;
        goto LABEL_394;
      case 0x29u:
        char v122 = 0;
        unsigned int v123 = 0;
        uint64_t v124 = 0;
        *(_DWORD *)(a1 + 400) |= 0x100000u;
        while (2)
        {
          uint64_t v125 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v126 = v125 + 1;
          if (v125 == -1 || v126 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v127 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v125);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v126;
            v124 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              BOOL v10 = v123++ >= 9;
              if (v10)
              {
                uint64_t v124 = 0;
                goto LABEL_360;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v124 = 0;
        }
LABEL_360:
        BOOL v176 = v124 != 0;
        uint64_t v177 = 390;
        goto LABEL_394;
      case 0x2Au:
        *(_DWORD *)(a1 + 400) |= 0x1000u;
        unint64_t v128 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v128 <= 0xFFFFFFFFFFFFFFFBLL && v128 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v129 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v128);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v128 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v129 = 0;
        }
        *(_DWORD *)(a1 + 368) = v129;
        goto LABEL_395;
      case 0x2Bu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 176;
        goto LABEL_284;
      case 0x2Cu:
        uint64_t v21 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addRemoteParticipantHandles:v21];
        goto LABEL_267;
      case 0x2Du:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 168;
        goto LABEL_284;
      case 0x2Eu:
        char v130 = 0;
        unsigned int v131 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x200u;
        while (2)
        {
          uint64_t v132 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v133 = v132 + 1;
          if (v132 == -1 || v133 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v134 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v132);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v133;
            v15 |= (unint64_t)(v134 & 0x7F) << v130;
            if (v134 < 0)
            {
              v130 += 7;
              BOOL v10 = v131++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_364;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_364:
        uint64_t v175 = 296;
        goto LABEL_381;
      case 0x2Fu:
        char v135 = 0;
        unsigned int v136 = 0;
        uint64_t v137 = 0;
        *(_DWORD *)(a1 + 400) |= 0x2000000u;
        while (2)
        {
          uint64_t v138 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v139 = v138 + 1;
          if (v138 == -1 || v139 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v140 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v138);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v139;
            v137 |= (unint64_t)(v140 & 0x7F) << v135;
            if (v140 < 0)
            {
              v135 += 7;
              BOOL v10 = v136++ >= 9;
              if (v10)
              {
                uint64_t v137 = 0;
                goto LABEL_368;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v137 = 0;
        }
LABEL_368:
        BOOL v176 = v137 != 0;
        uint64_t v177 = 395;
        goto LABEL_394;
      case 0x30u:
        char v141 = 0;
        unsigned int v142 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x800u;
        while (2)
        {
          uint64_t v143 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v144 = v143 + 1;
          if (v143 == -1 || v144 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v145 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v143);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v144;
            v15 |= (unint64_t)(v145 & 0x7F) << v141;
            if (v145 < 0)
            {
              v141 += 7;
              BOOL v10 = v142++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_372;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_372:
        uint64_t v175 = 328;
        goto LABEL_381;
      case 0x31u:
        uint64_t v21 = objc_alloc_init(CSDMessagingRoute);
        [(id)a1 addRoutes:v21];
        goto LABEL_223;
      case 0x32u:
        uint64_t v21 = objc_alloc_init(CSDMessagingRoute);
        objc_storeStrong((id *)(a1 + 336), v21);
LABEL_223:
        if (!PBReaderPlaceMark() || (sub_1001A6CA8((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x33u:
        PBReaderReadString();
        uint64_t v21 = (CSDMessagingCallModelState *)objc_claimAutoreleasedReturnValue();
        if (v21) {
          [(id)a1 addEndpointIDSDestinationURIs:v21];
        }
        goto LABEL_273;
      case 0x34u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 152;
        goto LABEL_284;
      case 0x35u:
        char v146 = 0;
        unsigned int v147 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x20u;
        while (2)
        {
          uint64_t v148 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v149 = v148 + 1;
          if (v148 == -1 || v149 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v150 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v148);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v149;
            v15 |= (unint64_t)(v150 & 0x7F) << v146;
            if (v150 < 0)
            {
              v146 += 7;
              BOOL v10 = v147++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_376;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_376:
        uint64_t v175 = 268;
        goto LABEL_381;
      case 0x36u:
        char v151 = 0;
        unsigned int v152 = 0;
        uint64_t v15 = 0;
        *(_DWORD *)(a1 + 400) |= 0x10u;
        while (2)
        {
          uint64_t v153 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v154 = v153 + 1;
          if (v153 == -1 || v154 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v155 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v153);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v154;
            v15 |= (unint64_t)(v155 & 0x7F) << v151;
            if (v155 < 0)
            {
              v151 += 7;
              BOOL v10 = v152++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_380;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_380:
        uint64_t v175 = 264;
LABEL_381:
        *(_DWORD *)(a1 + v175) = v15;
        goto LABEL_395;
      case 0x37u:
        char v156 = 0;
        unsigned int v157 = 0;
        uint64_t v158 = 0;
        *(_DWORD *)(a1 + 400) |= 0x40000u;
        while (2)
        {
          uint64_t v159 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v160 = v159 + 1;
          if (v159 == -1 || v160 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v161 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v159);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v160;
            v158 |= (unint64_t)(v161 & 0x7F) << v156;
            if (v161 < 0)
            {
              v156 += 7;
              BOOL v10 = v157++ >= 9;
              if (v10)
              {
                uint64_t v158 = 0;
                goto LABEL_385;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v158 = 0;
        }
LABEL_385:
        BOOL v176 = v158 != 0;
        uint64_t v177 = 388;
        goto LABEL_394;
      case 0x38u:
        char v162 = 0;
        unsigned int v163 = 0;
        uint64_t v164 = 0;
        *(_DWORD *)(a1 + 400) |= 0x1000000u;
        while (2)
        {
          uint64_t v165 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v166 = v165 + 1;
          if (v165 == -1 || v166 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v167 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v165);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v166;
            v164 |= (unint64_t)(v167 & 0x7F) << v162;
            if (v167 < 0)
            {
              v162 += 7;
              BOOL v10 = v163++ >= 9;
              if (v10)
              {
                uint64_t v164 = 0;
                goto LABEL_389;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v164 = 0;
        }
LABEL_389:
        BOOL v176 = v164 != 0;
        uint64_t v177 = 394;
        goto LABEL_394;
      case 0x39u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 96;
        goto LABEL_284;
      case 0x3Au:
        uint64_t v21 = objc_alloc_init(CSDMessagingConversationRelayMessage);
        [(id)a1 addConversations:v21];
        if (!PBReaderPlaceMark() || (sub_1000DCD18((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x3Bu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 160;
        goto LABEL_284;
      case 0x3Cu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 48;
        goto LABEL_284;
      case 0x3Du:
        uint64_t v21 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addConversationMembers:v21];
        if (!PBReaderPlaceMark() || (sub_1000F12B4((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x3Eu:
        uint64_t v21 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addHandlesToInvite:v21];
LABEL_267:
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_405;
        }
        goto LABEL_272;
      case 0x3Fu:
        uint64_t v21 = objc_alloc_init(CSDMessagingParticipantProminenceEntry);
        [(id)a1 addProminenceEntry:v21];
        if (PBReaderPlaceMark() && sub_10002543C((uint64_t)v21, a2))
        {
LABEL_272:
          PBReaderRecallMark();
LABEL_273:

LABEL_395:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_405:

        return 0;
      case 0x40u:
        char v168 = 0;
        unsigned int v169 = 0;
        uint64_t v170 = 0;
        *(_DWORD *)(a1 + 400) |= 0x800000u;
        while (2)
        {
          uint64_t v171 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v172 = v171 + 1;
          if (v171 == -1 || v172 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v173 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v171);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v172;
            v170 |= (unint64_t)(v173 & 0x7F) << v168;
            if (v173 < 0)
            {
              v168 += 7;
              BOOL v10 = v169++ >= 9;
              if (v10)
              {
                uint64_t v170 = 0;
                goto LABEL_393;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v170 = 0;
        }
LABEL_393:
        BOOL v176 = v170 != 0;
        uint64_t v177 = 393;
LABEL_394:
        *(unsigned char *)(a1 + v177) = v176;
        goto LABEL_395;
      case 0x41u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 72;
        goto LABEL_284;
      case 0x42u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 136;
        goto LABEL_284;
      case 0x43u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 352;
LABEL_284:
        v174 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_395;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_395;
    }
  }
}

uint64_t sub_10008DC20(unsigned char *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    int v11 = v6 & 7;
    if (v10 || v11 == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 72;
        goto LABEL_100;
      case 2u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 80;
        goto LABEL_100;
      case 3u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 40;
        goto LABEL_100;
      case 4u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        a1[128] |= 1u;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_104:
        uint64_t v57 = 88;
        goto LABEL_109;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v17 = 0;
        a1[128] |= 2u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v17 |= (unint64_t)(v23 & 0x7F) << v20;
            if (v23 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_108:
        uint64_t v57 = 92;
LABEL_109:
        *(_DWORD *)&a1[v57] = v17;
        goto LABEL_131;
      case 6u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        a1[128] |= 8u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                uint64_t v26 = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0;
        }
LABEL_113:
        BOOL v58 = v26 != 0;
        uint64_t v59 = 121;
        goto LABEL_130;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        a1[128] |= 4u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                uint64_t v31 = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v31 = 0;
        }
LABEL_117:
        BOOL v58 = v31 != 0;
        uint64_t v59 = 120;
        goto LABEL_130;
      case 8u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        a1[128] |= 0x10u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                uint64_t v36 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v36 = 0;
        }
LABEL_121:
        BOOL v58 = v36 != 0;
        uint64_t v59 = 122;
        goto LABEL_130;
      case 9u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        a1[128] |= 0x40u;
        while (2)
        {
          unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v9 = v40++ >= 9;
              if (v9)
              {
                uint64_t v41 = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v41 = 0;
        }
LABEL_125:
        BOOL v58 = v41 != 0;
        uint64_t v59 = 124;
        goto LABEL_130;
      case 0xAu:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 112;
        goto LABEL_100;
      case 0xBu:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 96;
        goto LABEL_100;
      case 0xCu:
        PBReaderReadString();
        char v44 = (CSDMessagingLabeledHandle *)objc_claimAutoreleasedReturnValue();
        if (v44) {
          [a1 addHandoffIdentifier:v44];
        }
        goto LABEL_98;
      case 0xDu:
        if (v11 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            char v46 = 0;
            unsigned int v47 = 0;
            uint64_t v48 = 0;
            while (1)
            {
              unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v49 == -1 || v49 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v50 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v9 = v47++ >= 9;
                if (!v9) {
                  continue;
                }
              }
              goto LABEL_81;
            }
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_81:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          while (1)
          {
            unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v63 == -1 || v63 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v64 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 1;
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              BOOL v9 = v61++ >= 9;
              if (!v9) {
                continue;
              }
            }
            goto LABEL_142;
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_142:
          PBRepeatedUInt32Add();
        }
        goto LABEL_131;
      case 0xEu:
        char v44 = objc_alloc_init(CSDMessagingLabeledHandle);
        [a1 addEmergencyLabeledHandles:v44];
        if (!PBReaderPlaceMark() || !sub_1001743D4((uint64_t)v44, a2)) {
          goto LABEL_145;
        }
        goto LABEL_97;
      case 0xFu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        a1[128] |= 0x20u;
        while (2)
        {
          unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v54 == -1 || v54 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
            v53 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v9 = v52++ >= 9;
              if (v9)
              {
                uint64_t v53 = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v53 = 0;
        }
LABEL_129:
        BOOL v58 = v53 != 0;
        uint64_t v59 = 123;
LABEL_130:
        a1[v59] = v58;
        goto LABEL_131;
      case 0x10u:
        char v44 = objc_alloc_init(CSDMessagingSenderIdentity);
        [a1 addPrioritizedSenderIdentities:v44];
        if (!PBReaderPlaceMark() || !sub_1001BC168((uint64_t)v44, a2)) {
          goto LABEL_145;
        }
        goto LABEL_97;
      case 0x11u:
        char v44 = objc_alloc_init(CSDMessagingHandle);
        [a1 addEmergencyHandles:v44];
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v44, a2))
        {
LABEL_97:
          PBReaderRecallMark();
LABEL_98:

LABEL_131:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_145:

        return 0;
      case 0x12u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 32;
LABEL_100:
        unsigned int v56 = *(void **)&a1[v14];
        *(void *)&a1[v14] = v13;

        goto LABEL_131;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_131;
    }
  }
}

void sub_100090730(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) sessionMessenger];
  [v1 prepareConnectedSessionsToEnd];
}

void sub_1000908A4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) sessionMessenger];
  [v1 endEndingSessions];
}

void sub_10009099C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"CSDRelayConferenceConnectionDidReceiveDataNotificationDataKey"];

  char v4 = [[CSDMessagingRelayMessage alloc] initWithData:v3];
  if (v4)
  {
    unsigned int v5 = +[NSDate date];
    [v5 timeIntervalSince1970];
    double v7 = v6;
    [(CSDMessagingRelayMessage *)v4 messageSendTime];
    double v9 = v8;

    int v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = [*(id *)(a1 + 32) name];
      int v14 = 138412802;
      char v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v4;
      __int16 v18 = 2048;
      unint64_t v19 = (unint64_t)((v7 - v9) * 1000.0);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Handling %@ with message: %@ latency: %llu", (uint8_t *)&v14, 0x20u);
    }
    unsigned int v12 = [(CSDMessagingRelayMessage *)v4 type];
    if (v12 == 38)
    {
      uint64_t v13 = [*(id *)(a1 + 40) commonMessagingDelegate];
      [v13 handleSetUplinkMutedMessage:v4];
    }
    else if (v12 == 39)
    {
      uint64_t v13 = [*(id *)(a1 + 40) clientMessagingDelegate];
      [v13 handleUpdateRemoteUplinkMutedMessageFromHost:v4];
    }
    else
    {
      uint64_t v13 = sub_100008DCC();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1003A901C(v4, v13);
      }
    }
  }
  else
  {
    uint64_t v13 = sub_100008DCC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1003A8FD8(v13);
    }
  }
}

CSDMessagingRelayMessage *sub_1000916B4(uint64_t a1)
{
  id v2 = [CSDMessagingRelayMessage alloc];
  id v3 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
  char v4 = [(CSDMessagingRelayMessage *)v2 initWithType:1 uniqueProxyIdentifier:v3];

  unsigned int v5 = [*(id *)(a1 + 32) handle];
  [(CSDMessagingRelayMessage *)v4 setTuHandle:v5];

  double v6 = [*(id *)(a1 + 32) isoCountryCode];
  [(CSDMessagingRelayMessage *)v4 setIsoCountryCode:v6];

  double v7 = [*(id *)(a1 + 32) provider];
  -[CSDMessagingRelayMessage setTuProvider:isVideo:](v4, "setTuProvider:isVideo:", v7, [*(id *)(a1 + 32) isVideo]);

  double v8 = [*(id *)(a1 + 32) sourceIdentifier];
  [(CSDMessagingRelayMessage *)v4 setSourceIdentifier:v8];

  double v9 = [*(id *)(a1 + 32) model];
  [(CSDMessagingRelayMessage *)v4 setCallModel:v9];

  int v10 = [*(id *)(a1 + 32) callerNameFromNetwork];
  [(CSDMessagingRelayMessage *)v4 setCallerNameFromNetwork:v10];

  -[CSDMessagingRelayMessage setShouldSuppressRingtone:](v4, "setShouldSuppressRingtone:", [*(id *)(a1 + 32) shouldSuppressRingtone]);
  -[CSDMessagingRelayMessage setNeedsManualInCallSounds:](v4, "setNeedsManualInCallSounds:", [*(id *)(a1 + 32) needsManualInCallSounds]);
  -[CSDMessagingRelayMessage setSoundRegion:](v4, "setSoundRegion:", [*(id *)(a1 + 32) soundRegion]);
  [(CSDMessagingRelayMessage *)v4 setCannotRelayAudioOrVideoOnPairedDevice:*(unsigned __int8 *)(a1 + 40)];
  int v11 = [*(id *)(a1 + 32) displayContext];
  [(CSDMessagingRelayMessage *)v4 setDisplayContext:v11];

  -[CSDMessagingRelayMessage setFailureExpected:](v4, "setFailureExpected:", [*(id *)(a1 + 32) isFailureExpected]);
  -[CSDMessagingRelayMessage setSupportsEmergencyFallback:](v4, "setSupportsEmergencyFallback:", [*(id *)(a1 + 32) supportsEmergencyFallback]);
  -[CSDMessagingRelayMessage setSupportsDTMFUpdates:](v4, "setSupportsDTMFUpdates:", [*(id *)(a1 + 32) supportsDTMFUpdates]);
  unsigned int v12 = [*(id *)(a1 + 32) localSenderIdentityUUID];
  [(CSDMessagingRelayMessage *)v4 setLocalSenderIdentityUUID:v12];

  uint64_t v13 = [*(id *)(a1 + 32) localSenderIdentityAccountUUID];
  [(CSDMessagingRelayMessage *)v4 setLocalSenderIdentityAccountUUID:v13];

  -[CSDMessagingRelayMessage setRemoteUplinkMuted:](v4, "setRemoteUplinkMuted:", [*(id *)(a1 + 32) isRemoteUplinkMuted]);
  int v14 = [*(id *)(a1 + 32) remoteParticipantHandles];
  [(CSDMessagingRelayMessage *)v4 setRemoteParticipantTUHandles:v14];

  -[CSDMessagingRelayMessage setTtyType:](v4, "setTtyType:", [*(id *)(a1 + 32) ttyType]);
  -[CSDMessagingRelayMessage setSupportsTTYWithVoice:](v4, "setSupportsTTYWithVoice:", [*(id *)(a1 + 32) supportsTTYWithVoice]);
  -[CSDMessagingRelayMessage setPriority:](v4, "setPriority:", [*(id *)(a1 + 32) priority]);
  -[CSDMessagingRelayMessage setOriginatingUIType:](v4, "setOriginatingUIType:", [*(id *)(a1 + 32) originatingUIType]);
  char v15 = [*(id *)(a1 + 32) callGroupUUID];
  __int16 v16 = [v15 UUIDString];
  [(CSDMessagingRelayMessage *)v4 setGroupUUIDString:v16];

  uint64_t v17 = [*(id *)(a1 + 32) imageURL];

  if (v17)
  {
    id v18 = objc_alloc((Class)NSData);
    unint64_t v19 = [*(id *)(a1 + 32) imageURL];
    id v20 = [v18 initWithContentsOfURL:v19];

    [(CSDMessagingRelayMessage *)v4 setImage:v20];
    unsigned int v21 = sub_100008DCC();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = [*(id *)(a1 + 32) imageURL];
      int v27 = 138412290;
      char v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "(IDSMessaging Host->Client) Sending url to client: %@", (uint8_t *)&v27, 0xCu);
    }
  }
  char v23 = +[CSDRelayIDSService sharedInstance];
  unsigned int v24 = [v23 pairedDeviceExists];

  if (v24)
  {
    unsigned int v25 = [*(id *)(a1 + 32) dateCreated];
    [v25 timeIntervalSince1970];
    -[CSDMessagingRelayMessage setHostCallCreationTime:](v4, "setHostCallCreationTime:");
  }

  return v4;
}

void sub_100091ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) status] != 4)
  {
    char v4 = sub_100008DCC();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v9;
    int v10 = "Not sending out incoming call invitation because call is no longer ringing: %@";
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v12, 0xCu);
    goto LABEL_9;
  }
  if (!v3)
  {
    char v4 = sub_100008DCC();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v11;
    int v10 = "[WARN] Failed to prepare conference for call %@. Not sending incoming call message to relay clients";
    goto LABEL_8;
  }
  char v4 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  unsigned int v5 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
  [v4 setInviteData:v5];

  double v6 = [*(id *)(a1 + 40) sessionMessenger];
  double v7 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
  double v8 = [*(id *)(a1 + 32) provider];
  objc_msgSend(v6, "sendMessage:andStartSessionIfNecessaryForIdentifier:toDevicesSupportingProvider:requiresConversationRelay:withTimeout:", v4, v7, v8, objc_msgSend(*(id *)(a1 + 32), "needsConversationRelaySupport"), TUIncomingInvitationTimeout());

LABEL_9:
}

CSDMessagingRelayMessage *sub_100091FB0(uint64_t a1)
{
  id v2 = [[CSDMessagingRelayMessage alloc] initWithType:49];
  id v3 = [[CSDMessagingConversationRelayMessage alloc] initWithConversation:*(void *)(a1 + 32)];
  [(CSDMessagingConversationRelayMessage *)v3 setType:*(unsigned int *)(a1 + 40)];
  char v4 = [(CSDMessagingRelayMessage *)v2 conversations];

  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    [(CSDMessagingRelayMessage *)v2 setConversations:v5];
  }
  double v6 = [(CSDMessagingRelayMessage *)v2 conversations];
  [v6 addObject:v3];

  return v2;
}

CSDMessagingRelayMessage *sub_1000921D4(uint64_t a1)
{
  id v2 = [[CSDMessagingRelayMessage alloc] initWithType:53];
  id v3 = [*(id *)(a1 + 32) UUID];
  char v4 = [v3 UUIDString];
  [(CSDMessagingRelayMessage *)v2 setConversationUUIDString:v4];

  id v5 = +[NSMutableArray array];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  double v6 = objc_msgSend(*(id *)(a1 + 32), "activeRemoteParticipants", 0);
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        int v12 = objc_alloc_init(CSDMessagingParticipantProminenceEntry);
        -[CSDMessagingParticipantProminenceEntry setParticipantIdentifier:](v12, "setParticipantIdentifier:", [v11 identifier]);
        -[CSDMessagingParticipantProminenceEntry setAudioPriority:](v12, "setAudioPriority:", [v11 audioPriority]);
        [v5 addObject:v12];
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  [(CSDMessagingRelayMessage *)v2 setProminenceEntrys:v5];

  return v2;
}

void sub_1000927C8(id a1, int a2, BOOL *a3)
{
  *a3 = a2 < 2;
}

void sub_100094794(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend(*(id *)(a1 + 40), "addCall:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v8), (void)v11);
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }

    uint64_t v9 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [*(id *)(a1 + 40) setInviteData:v9];

    int v10 = [*(id *)(a1 + 48) sessionMessenger];
    [v10 sendMessage:*(void *)(a1 + 40) andStartSessionIfNecessaryForIdentifiers:*(void *)(a1 + 56) toDestination:*(void *)(a1 + 64) timeout:TUTransferTimeout() completionHandler:0];
  }
}

void sub_1000953B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (uint64_t *)(a1 + 32);
  if ([*(id *)(a1 + 32) status] == 3)
  {
    if (v3)
    {
      id v5 = [CSDMessagingRelayMessage alloc];
      id v6 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      uint64_t v7 = [(CSDMessagingRelayMessage *)v5 initWithType:2 uniqueProxyIdentifier:v6];

      id v8 = [*(id *)(a1 + 32) handle];
      [(CSDMessagingRelayMessage *)v7 setTuHandle:v8];

      uint64_t v9 = [*(id *)(a1 + 32) isoCountryCode];
      [(CSDMessagingRelayMessage *)v7 setIsoCountryCode:v9];

      int v10 = [*(id *)(a1 + 32) provider];
      -[CSDMessagingRelayMessage setTuProvider:isVideo:](v7, "setTuProvider:isVideo:", v10, [*(id *)(a1 + 32) isVideo]);

      long long v11 = [*(id *)(a1 + 32) sourceIdentifier];
      [(CSDMessagingRelayMessage *)v7 setSourceIdentifier:v11];

      -[CSDMessagingRelayMessage setCannotRelayAudioOrVideoOnPairedDevice:](v7, "setCannotRelayAudioOrVideoOnPairedDevice:", [*(id *)(a1 + 32) isEndpointOnCurrentDevice] ^ 1);
      -[CSDMessagingRelayMessage setVoicemail:](v7, "setVoicemail:", [*(id *)(a1 + 32) isVoicemail]);
      -[CSDMessagingRelayMessage setEmergency:](v7, "setEmergency:", [*(id *)(a1 + 32) isEmergency]);
      -[CSDMessagingRelayMessage setFailureExpected:](v7, "setFailureExpected:", [*(id *)(a1 + 32) isFailureExpected]);
      -[CSDMessagingRelayMessage setSupportsEmergencyFallback:](v7, "setSupportsEmergencyFallback:", [*(id *)(a1 + 32) supportsEmergencyFallback]);
      -[CSDMessagingRelayMessage setSOS:](v7, "setSOS:", [*(id *)(a1 + 32) isSOS]);
      long long v12 = [*(id *)(a1 + 32) localSenderIdentityUUID];
      [(CSDMessagingRelayMessage *)v7 setLocalSenderIdentityUUID:v12];

      long long v13 = [*(id *)(a1 + 32) localSenderIdentityAccountUUID];
      [(CSDMessagingRelayMessage *)v7 setLocalSenderIdentityAccountUUID:v13];

      -[CSDMessagingRelayMessage setTtyType:](v7, "setTtyType:", [*(id *)(a1 + 32) ttyType]);
      -[CSDMessagingRelayMessage setSupportsTTYWithVoice:](v7, "setSupportsTTYWithVoice:", [*(id *)(a1 + 32) supportsTTYWithVoice]);
      -[CSDMessagingRelayMessage setOriginatingUIType:](v7, "setOriginatingUIType:", [*(id *)(a1 + 32) originatingUIType]);
      long long v14 = [*(id *)(a1 + 32) dialRequest];
      long long v15 = [v14 contactIdentifier];
      [(CSDMessagingRelayMessage *)v7 setContactIdentifier:v15];

      long long v16 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
      [(CSDMessagingRelayMessage *)v7 setInviteData:v16];

      long long v17 = [*(id *)(a1 + 40) sessionMessenger];
      id v18 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      unint64_t v19 = [*(id *)(a1 + 40) dialingIDSDestination];
      id v20 = [*(id *)(a1 + 32) provider];
      [*(id *)(a1 + 32) isVideo];
      [v17 sendMessage:v7 andStartSessionIfNecessaryForIdentifier:v18 toDestination:v19 timeout:TUOutgoingInvitationTimeoutForCallProvider() completionHandler:*(void *)(a1 + 48)];
    }
    else
    {
      char v23 = sub_100008DCC();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_1003A9114();
      }

      uint64_t v7 = [*(id *)(a1 + 40) callCenter];
      [(CSDMessagingRelayMessage *)v7 disconnectCall:*(void *)(a1 + 32) withReason:8];
    }
  }
  else
  {
    unsigned int v21 = sub_100008DCC();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *v4;
      int v24 = 138412290;
      uint64_t v25 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Not sending out dial call invitation because call is no longer sending: %@", (uint8_t *)&v24, 0xCu);
    }
  }
}

void sub_100095970(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (uint64_t *)(a1 + 32);
  if ([*(id *)(a1 + 32) status] == 3)
  {
    if (v3)
    {
      id v5 = [CSDMessagingRelayMessage alloc];
      id v6 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      uint64_t v7 = [(CSDMessagingRelayMessage *)v5 initWithType:50 uniqueProxyIdentifier:v6];

      id v8 = [*(id *)(a1 + 32) joinConversationRequest];
      uint64_t v9 = [v8 URL];
      int v10 = [v9 absoluteString];
      [(CSDMessagingRelayMessage *)v7 setJoinConversationRequestURLString:v10];

      long long v11 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
      [(CSDMessagingRelayMessage *)v7 setInviteData:v11];

      long long v12 = [*(id *)(a1 + 40) sessionMessenger];
      long long v13 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      long long v14 = [*(id *)(a1 + 40) dialingIDSDestination];
      long long v15 = [*(id *)(a1 + 32) provider];
      [*(id *)(a1 + 32) isVideo];
      [v12 sendMessage:v7 andStartSessionIfNecessaryForIdentifier:v13 toDestination:v14 timeout:TUOutgoingInvitationTimeoutForCallProvider() completionHandler:*(void *)(a1 + 48)];
    }
    else
    {
      id v18 = sub_100008DCC();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_1003A9114();
      }

      uint64_t v7 = [*(id *)(a1 + 40) callCenter];
      [(CSDMessagingRelayMessage *)v7 disconnectCall:*(void *)(a1 + 32) withReason:8];
    }
  }
  else
  {
    long long v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *v4;
      int v19 = 138412290;
      uint64_t v20 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not sending out TUJoinConversationRequest invitation because call is no longer sending: %@", (uint8_t *)&v19, 0xCu);
    }
  }
}

CSDMessagingRelayMessage *sub_100095DF8(uint64_t a1)
{
  id v2 = [CSDMessagingRelayMessage alloc];
  id v3 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
  id v4 = [(CSDMessagingRelayMessage *)v2 initWithType:4 uniqueProxyIdentifier:v3];

  id v5 = [*(id *)(a1 + 32) sourceIdentifier];
  [(CSDMessagingRelayMessage *)v4 setSourceIdentifier:v5];

  -[CSDMessagingRelayMessage setWantsHoldMusic:](v4, "setWantsHoldMusic:", [*(id *)(a1 + 32) wantsHoldMusic]);
  -[CSDMessagingRelayMessage setVideo:](v4, "setVideo:", [*(id *)(a1 + 32) isVideo]);
  -[CSDMessagingRelayMessage setCannotRelayAudioOrVideoOnPairedDevice:](v4, "setCannotRelayAudioOrVideoOnPairedDevice:", [*(id *)(a1 + 32) cannotRelayAudioOrVideo]);
  -[CSDMessagingRelayMessage setExpectedEndpointOnMessagingDevice:](v4, "setExpectedEndpointOnMessagingDevice:", [*(id *)(a1 + 32) cannotRelayAudioOrVideo]);

  return v4;
}

void sub_100095EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v5 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [v4 setInviteData:v5];

    id v6 = [*(id *)(a1 + 32) sessionMessenger];
    uint64_t v7 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
    [v6 sendMessage:v4 andAcceptInvitationIfNecessaryForIdentifier:v7];
  }
  else
  {
    id v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003A9180();
    }

    id v4 = [*(id *)(a1 + 32) callCenter];
    [v4 disconnectCall:*(void *)(a1 + 40) withReason:8];
  }
}

void sub_100096944(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [CSDMessagingRelayMessage alloc];
    id v5 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    id v6 = [(CSDMessagingRelayMessage *)v4 initWithType:19 uniqueProxyIdentifier:v5];

    uint64_t v7 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [(CSDMessagingRelayMessage *)v6 setInviteData:v7];

    id v8 = [*(id *)(a1 + 40) sessionMessenger];
    uint64_t v9 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v8 sendMessage:v6 andAcceptInvitationIfNecessaryForIdentifier:v9];

    if ([*(id *)(a1 + 40) _shouldSendToPairedIDSDevice])
    {
      int v10 = [*(id *)(a1 + 40) pairedDeviceMessenger];
      [v10 sendMessage:v6 completionHandler:0];
    }
  }
  else
  {
    long long v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003A91EC();
    }

    id v6 = [*(id *)(a1 + 40) callCenter];
    [(CSDMessagingRelayMessage *)v6 disconnectCall:*(void *)(a1 + 32) withReason:8];
  }
}

void sub_100096BE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [CSDMessagingRelayMessage alloc];
    id v5 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    id v6 = [(CSDMessagingRelayMessage *)v4 initWithType:20 uniqueProxyIdentifier:v5];

    uint64_t v7 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [(CSDMessagingRelayMessage *)v6 setInviteData:v7];

    id v8 = [*(id *)(a1 + 40) sessionMessenger];
    uint64_t v9 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v8 sendMessage:v6 andAcceptInvitationIfNecessaryForIdentifier:v9];

    if ([*(id *)(a1 + 40) _shouldSendToPairedIDSDevice])
    {
      int v10 = [*(id *)(a1 + 40) pairedDeviceMessenger];
      [v10 sendMessage:v6 completionHandler:0];
    }
  }
  else
  {
    long long v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003A91EC();
    }

    id v6 = [*(id *)(a1 + 40) callCenter];
    [(CSDMessagingRelayMessage *)v6 disconnectCall:*(void *)(a1 + 32) withReason:8];
  }
}

void sub_100096F58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [CSDMessagingRelayMessage alloc];
    id v5 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    id v6 = [(CSDMessagingRelayMessage *)v4 initWithType:36 uniqueProxyIdentifier:v5];

    uint64_t v7 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [(CSDMessagingRelayMessage *)v6 setInviteData:v7];

    id v8 = [*(id *)(a1 + 40) sessionMessenger];
    uint64_t v9 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v8 sendMessage:v6 andAcceptInvitationIfNecessaryForIdentifier:v9];

    if ([*(id *)(a1 + 40) _shouldSendToPairedIDSDevice])
    {
      int v10 = [*(id *)(a1 + 40) pairedDeviceMessenger];
      [v10 sendMessage:v6 completionHandler:0];
    }
  }
  else
  {
    long long v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003A91EC();
    }

    id v6 = [*(id *)(a1 + 40) callCenter];
    [(CSDMessagingRelayMessage *)v6 disconnectCall:*(void *)(a1 + 32) withReason:8];
  }
}

void sub_100097708(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [[CSDMessagingAVConferenceInviteData alloc] initWithRelayInviteDictionary:v3];
    [*(id *)(a1 + 32) setInviteData:v4];

    id v5 = [*(id *)(a1 + 40) sessionMessenger];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = +[CSDRelayIDSService sharedInstance];
    uint64_t v9 = [v8 pairedDevice];
    int v10 = [v9 destination];
    [v5 sendMessage:v6 andStartSessionIfNecessaryForIdentifiers:v7 toDestination:v10 timeout:TUTransferTimeout() completionHandler:0];
  }
  else
  {
    long long v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to prepare conference while pulling calls", v12, 2u);
    }
  }
}

void sub_100099474(uint64_t a1, int a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    _[v4 _handleRetrievedLocalInviteDictionary:a3 forMessage:v5];
  }
  else
  {
    id v8 = [v4 sessionMessenger];
    uint64_t v6 = [[CSDMessagingRelayMessage alloc] initWithType:10];
    uint64_t v7 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
    [v8 sendMessage:v6 andCancelOrDeclineInvitationIfNecessaryForIdentifier:v7];
  }
}

void sub_100099528(uint64_t a1, int a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    _[v4 _handleRetrievedLocalInviteDictionary:a3 forMessage:v5];
  }
  else
  {
    id v8 = [v4 sessionMessenger];
    uint64_t v6 = [[CSDMessagingRelayMessage alloc] initWithType:10];
    uint64_t v7 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
    [v8 sendMessage:v6 andCancelOrDeclineInvitationIfNecessaryForIdentifier:v7];
  }
}

id sub_1000995DC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleRetrievedLocalInviteDictionary:a2 forMessage:*(void *)(a1 + 40)];
}

id sub_1000995EC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleRetrievedLocalInviteDictionary:a2 forMessage:*(void *)(a1 + 40)];
}

BOOL sub_100099F64(id a1, TUCall *a2)
{
  return [(TUCall *)a2 isEndpointOnCurrentDevice];
}

void sub_10009B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009B0A4(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _setUpSandbox];
  id v3 = objc_alloc_init((Class)TUFeatureFlags);
  [WeakRetained setFeatureFlags:v3];

  id v4 = [WeakRetained queue];
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v4, &stru_1005066C0);

  uint64_t v5 = [WeakRetained queue];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10009BFF4;
  handler[3] = &unk_1005060D8;
  id v6 = WeakRetained;
  id v139 = v6;
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v5, handler);

  uint64_t v7 = [v6 queue];
  xpc_set_event_stream_handler("com.apple.CTTelephonyCenter", v7, &stru_1005066E0);

  id v8 = +[NSMutableArray array];
  [v6 setSignalHandlerDispatchSources:v8];

  v136[0] = _NSConcreteStackBlock;
  v136[1] = 3221225472;
  v136[2] = sub_10009C1C0;
  v136[3] = &unk_100505698;
  objc_copyWeak(&v137, v1);
  [v6 _observeSignal:29 usingHandler:v136];
  [v6 _observeSignal:30 usingHandler:&stru_100506700];
  [v6 _observeSignal:31 usingHandler:&stru_100506720];
  signal(15, 0);
  uint64_t Default = CTTelephonyCenterGetDefault();
  int v10 = sub_100008DCC();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v141 = Default;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Created call center: %@", buf, 0xCu);
  }

  id v11 = objc_alloc_init((Class)TUUserConfiguration);
  long long v12 = [v6 queue];
  [v11 addDelegate:v6 queue:v12];

  [v6 setUserConfiguration:v11];
  long long v13 = [CSDDeviceLockStateObserver alloc];
  long long v14 = [v6 queue];
  long long v15 = [(CSDDeviceLockStateObserver *)v13 initWithQueue:v14];
  [v6 setDeviceLockStateObserver:v15];

  long long v16 = [v6 deviceLockStateObserver];
  v134[0] = _NSConcreteStackBlock;
  v134[1] = 3221225472;
  v134[2] = sub_10009C3A4;
  v134[3] = &unk_100504EC0;
  uint64_t v17 = v6;
  id v135 = v17;
  [v16 performBlockAfterFirstUnlock:v134];

  id v18 = [CSDVoiceOverObserver alloc];
  int v19 = [v17 queue];
  uint64_t v20 = [(CSDVoiceOverObserver *)v18 initWithQueue:v19];
  [v17 setVoiceOverObserver:v20];

  id v21 = +[CSDCallCapabilities sharedInstance];
  id v22 = objc_alloc_init((Class)CHManager);
  [v17 setChManager:v22];

  char v23 = [v17 queue];
  int v24 = +[CSDReportingController sharedInstanceWithQueue:v23];

  uint64_t v25 = [v17 queue];
  id v26 = +[CSDCallDirectoryManager sharedInstanceWithQueue:v25];

  int v27 = [CSDCallStateController alloc];
  char v28 = [v17 queue];
  char v29 = [v17 assistantServicesObserver];
  unsigned int v30 = [v17 chManager];
  uint64_t v31 = [(CSDCallStateController *)v27 initWithQueue:v28 assistantServicesObserver:v29 chManager:v30];
  [v17 setCallStateController:v31];

  unint64_t v32 = [CSDCallStateMonitor alloc];
  char v33 = [v17 callStateController];
  char v34 = [v33 callCenter];
  unsigned int v35 = [(CSDCallStateMonitor *)v32 initWithCallCenter:v34];
  [v17 setCallStateMonitor:v35];

  uint64_t v36 = [CSDRelayMessagingController alloc];
  unint64_t v37 = [v17 queue];
  char v38 = [v17 callStateController];
  char v39 = [v38 localRouteController];
  unsigned int v40 = [(CSDRelayMessagingController *)v36 initWithQueue:v37 localRouteController:v39];
  [v17 setRelayMessagingController:v40];

  uint64_t v41 = [CSDRelayConversationController alloc];
  unint64_t v42 = [v17 queue];
  char v43 = [v17 relayMessagingController];
  char v44 = [v17 callStateController];
  unsigned int v45 = [v44 callCenter];
  char v46 = [v17 featureFlags];
  unsigned int v47 = [(CSDRelayConversationController *)v41 initWithQueue:v42 messenger:v43 callCenter:v45 featureFlags:v46];
  [v17 setRelayConversationController:v47];

  uint64_t v48 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
  dispatch_queue_t v49 = dispatch_queue_create("com.apple.telephonyutilities.callservicesd.reportingcontroller", v48);

  char v50 = objc_alloc_init(CSDPowerLogReporter);
  [v24 addReporter:v50];

  char v51 = objc_alloc_init(CSDAggregateDictionaryReporter);
  [v24 addReporter:v51];

  unsigned int v52 = [[CSDABCReporter alloc] initWithQueue:v49];
  [v24 addReporter:v52];

  uint64_t v53 = [CSDRTCReporter alloc];
  unint64_t v54 = [v17 chManager];
  char v55 = [(CSDRTCReporter *)v53 initWithQueue:v49 chManager:v54];
  [v24 addReporter:v55];

  unsigned int v56 = [CSDFaceTimeUnknownReporter alloc];
  uint64_t v57 = [v17 chManager];
  BOOL v58 = [(CSDFaceTimeUnknownReporter *)v56 initWithQueue:v49 chManager:v57];
  [v24 addReporter:v58];

  uint64_t v59 = objc_alloc_init(CSDAnalyticsReporter);
  [v24 addReporter:v59];

  char v60 = [v17 queue];
  unsigned int v61 = +[CSDReportingController sharedInstanceWithQueue:v60];
  uint64_t v62 = [[CSDDuetDonater alloc] initWithQueue:v49];
  [v61 addReporter:v62];

  if (+[CSDStatusBarManager isDeviceSupported])
  {
    unint64_t v63 = objc_alloc_init(CSDStatusBarManager);
    [v17 setStatusBarManager:v63];
  }
  char v64 = [v17 featureFlags];
  unsigned int v65 = [v64 conversationHandoffEnabled];

  if (v65)
  {
    unsigned int v66 = objc_alloc_init(CSDHandoffAudioController);
    [v17 setHandoffAudioController:v66];
  }
  uint64_t v67 = objc_alloc_init(CSDVoIPApplicationController);
  [v17 setVoipApplicationController:v67];

  uint64_t v68 = [v17 callStateController];
  unint64_t v69 = [v17 voipApplicationController];
  [v69 setCallStateController:v68];

  char v70 = [v17 voipApplicationController];
  unint64_t v71 = [v17 callStateController];
  [v71 setVoipApplicationController:v70];

  uint64_t v72 = [v17 relayMessagingController];
  unint64_t v73 = [v17 callStateController];
  [v73 setRelayMessagingController:v72];

  char v74 = [CSDRelayClientController alloc];
  unsigned int v75 = [v17 queue];
  uint64_t v76 = [v17 assistantServicesObserver];
  uint64_t v77 = [(CSDRelayClientController *)v74 initWithQueue:v75 assistantServicesObserver:v76];
  [v17 setRelayClientController:v77];

  unint64_t v78 = [v17 callStateController];
  char v79 = [v17 relayClientController];
  [v79 setCallStateController:v78];

  char v80 = [CSDRelayHostController alloc];
  unsigned int v81 = [v17 queue];
  uint64_t v82 = +[TUCallCenter sharedInstance];
  uint64_t v83 = [v82 conversationManager];
  unint64_t v84 = [v17 featureFlags];
  char v85 = [(CSDRelayHostController *)v80 initWithQueue:v81 conversationManager:v83 featureFlags:v84];
  [v17 setRelayHostController:v85];

  char v86 = [v17 callStateController];
  unsigned int v87 = [v17 relayHostController];
  [v87 setCallStateController:v86];

  uint64_t v88 = [CSDRelayCommonController alloc];
  uint64_t v89 = [v17 queue];
  unint64_t v90 = [(CSDRelayCommonController *)v88 initWithQueue:v89];
  [v17 setRelayCommonController:v90];

  char v91 = [v17 callStateController];
  char v92 = [v17 relayCommonController];
  [v92 setCallStateController:v91];

  unsigned int v93 = [v17 callStateController];
  uint64_t v94 = [v17 relayMessagingController];
  [v94 setDelegate:v93];

  unint64_t v95 = [v17 relayClientController];
  char v96 = [v17 relayMessagingController];
  [v96 setClientMessagingDelegate:v95];

  char v97 = [v17 relayHostController];
  unsigned int v98 = [v17 relayMessagingController];
  [v98 setHostMessagingDelegate:v97];

  uint64_t v99 = [v17 relayCommonController];
  uint64_t v100 = [v17 relayMessagingController];
  [v100 setCommonMessagingDelegate:v99];

  unint64_t v101 = [v17 queue];
  id v102 = +[CSDTransactionManager sharedInstanceWithQueue:v101];

  char v103 = [v17 queue];
  id v104 = +[CSDUserActivityManager sharedInstanceWithQueue:v103];

  id v105 = +[CSDRouteManager sharedInstance];
  uint64_t v106 = +[CPApplicationPolicyManager sharedInstance];
  [v17 setApplicationPolicyManager:v106];

  if (MGGetBoolAnswer())
  {
    uint64_t v107 = [CSDProximitySensorObserver alloc];
    unint64_t v108 = [v17 queue];
    char v109 = [(CSDProximitySensorObserver *)v107 initWithQueue:v108];
    [v17 setProximitySensorObserver:v109];

    char v110 = [CSDProximityController alloc];
    unsigned int v111 = [v17 queue];
    uint64_t v112 = [v17 proximitySensorObserver];
    uint64_t v113 = [v17 voiceOverObserver];
    unint64_t v114 = [(CSDProximityController *)v110 initWithQueue:v111 proximitySensorObserver:v112 voiceOverObserver:v113];
    [v17 setProximityController:v114];
  }
  char v115 = objc_alloc_init(CSDRaiseToAnswerController);
  [v17 setRaiseToAnswerController:v115];

  char v116 = [CSDAudioController alloc];
  unsigned int v117 = [v17 voiceOverObserver];
  uint64_t v118 = [(CSDAudioController *)v116 initWithVoiceOverObserver:v117];
  [v17 setAudioController:v118];

  uint64_t v119 = [v17 audioController];
  unint64_t v120 = [v17 callStateController];
  [v120 setAudioController:v119];

  [v17 _setUpLanguageChangeListener];
  *(_DWORD *)buf = 0;
  notify_register_check("com.apple.telephonyutilities.callservicesdaemon.connectionrequest", (int *)buf);
  notify_set_state(*(int *)buf, 1uLL);
  notify_post("com.apple.telephonyutilities.callservicesdaemon.connectionrequest");
  char v121 = [CSDUserNotificationController alloc];
  char v122 = [v17 callStateController];
  unsigned int v123 = [v122 callFilterController];
  uint64_t v124 = [(CSDUserNotificationController *)v121 initWithCallFilterController:v123];
  uint64_t v125 = (void *)v17[14];
  v17[14] = v124;

  unint64_t v126 = objc_alloc_init(CSDPowerAssertionManager);
  char v127 = (void *)v17[23];
  v17[23] = v126;

  unint64_t v128 = [CSDConversationProviderManagerXPCServer alloc];
  int v129 = +[CSDConversationProviderManager sharedInstance];
  char v130 = [(CSDConversationProviderManagerXPCServer *)v128 initWithConversationProviderManager:v129];
  unsigned int v131 = (void *)v17[2];
  _DWORD v17[2] = v130;

  uint64_t v132 = sub_100008DCC();
  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v133 = 0;
    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "Initialized CSDDaemon", v133, 2u);
  }

  objc_destroyWeak(&v137);
}

void sub_10009BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

void sub_10009BF68(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (!strcmp(string, "com.apple.telephonyutilities.callservicesd.kFZACAppBundleIdentifierLaunchNotification"))
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Launched by IMDaemon notification", v4, 2u);
    }
  }
}

void sub_10009BFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  if (!strcmp(string, "com.apple.callhistory.save.distributed.notification"))
  {
    uint64_t v9 = [*(id *)(a1 + 32) callStateController];
    int v10 = [v9 recentsController];
    [v10 clearNotificationsIfNecessary];

LABEL_11:
    goto LABEL_12;
  }
  if (!strcmp(string, "com.apple.telephonyutilities.callservicesdaemon.app-installed"))
  {
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Launched by application installed notification", buf, 2u);
    }
    goto LABEL_11;
  }
  if (!strcmp(string, "com.apple.telephonyutilities.callservicesdaemon.app-uninstalled"))
  {
    uint64_t v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Launched by application uninstalled notification", v11, 2u);
    }

    id v6 = TUNotificationFromXPCObject();
    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 32) voipApplicationController];
      [v7 handleApplicationUninstalledNotification:v6];

      id v8 = [*(id *)(a1 + 32) applicationPolicyManager];
      [v8 handleApplicationUninstalledNotification:v6];
    }
    else
    {
      id v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1003A9368((uint64_t)v3, v8);
      }
    }
  }
LABEL_12:
}

void sub_10009C1AC(id a1, OS_xpc_object *a2)
{
}

void sub_10009C1C0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Caught SIGINFO. Dumping debug info.", (uint8_t *)&v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [WeakRetained debugDescription];
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_10009C2D4(id a1)
{
  id v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Caught SIGUSR1", v2, 2u);
  }
}

void sub_10009C33C(id a1)
{
  id v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Caught SIGUSR2", v2, 2u);
  }
}

void sub_10009C3A4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing user configuration migration", v9, 2u);
  }

  id v3 = objc_alloc_init(CSDUserConfigurationMigrator);
  [(CSDUserConfigurationMigrator *)v3 perform];
  id v4 = [*(id *)(a1 + 32) featureFlags];
  unsigned int v5 = [v4 dualSIMRingtoneEnabled];

  if (v5)
  {
    int v6 = [CSDDualSIMRingtoneHelper alloc];
    uint64_t v7 = [*(id *)(a1 + 32) queue];
    id v8 = [(CSDDualSIMRingtoneHelper *)v6 initWithQueue:v7];
    [*(id *)(a1 + 32) setDualSIMRingtoneHelper:v8];
  }
  [*(id *)(a1 + 32) setDeviceLockStateObserver:0];
}

void sub_10009C85C(id a1, int a2)
{
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Calling xpc_transaction_exit_clean() due to language change", v4, 2u);
  }

  notify_cancel(a2);
  xpc_transaction_exit_clean();
}

void sub_10009CE84(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

id sub_10009CEA4(void *a1, unint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  if (qword_10058C2E8 != -1) {
    dispatch_once(&qword_10058C2E8, &stru_100506760);
  }
  if (qword_10058C2F8 != -1) {
    dispatch_once(&qword_10058C2F8, &stru_100506780);
  }
  if (qword_10058C308 != -1) {
    dispatch_once(&qword_10058C308, &stru_1005067A0);
  }
  if (qword_10058C318 != -1) {
    dispatch_once(&qword_10058C318, &stru_1005067C0);
  }
  if (qword_10058C328 != -1) {
    dispatch_once(&qword_10058C328, &stru_1005067E0);
  }
  if (qword_10058C338 != -1)
  {
    dispatch_once(&qword_10058C338, &stru_100506800);
    if (v4) {
      goto LABEL_13;
    }
LABEL_65:
    id v57 = 0;
    goto LABEL_66;
  }
  if (!v4) {
    goto LABEL_65;
  }
LABEL_13:
  uint64_t v5 = __chkstk_darwin(v3);
  int v6 = (double *)((char *)&v63 - ((8 * a2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  id v8 = (char *)&v63 - v7;
  id v9 = v4;
  if ([v9 isFileURL])
  {
    unint64_t v78 = AVURLAssetReferenceRestrictionsKey;
    *(void *)&long long buf = &off_100523AA0;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&buf forKeys:&v78 count:1];
    id v11 = [objc_alloc((Class)AVURLAsset) initWithURL:v9 options:v10];
  }
  else
  {
    uint64_t v10 = sub_1001B1B60();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Trying to create an AVURLAsset for invalid fileURL: %@", (uint8_t *)&buf, 0xCu);
    }
    id v11 = 0;
  }

  if (v11) {
    [v11 duration];
  }
  else {
    memset(&time, 0, sizeof(time));
  }
  double Seconds = CMTimeGetSeconds(&time);
  bzero(v6, 8 * a2);
  bzero(v8, 8 * a2);
  long long v13 = +[AVAssetReader assetReaderWithAsset:v11 error:0];
  long long v14 = [v11 tracksWithMediaType:AVMediaTypeAudio];
  if ([v14 count])
  {
    id v66 = v11;
    uint64_t v67 = &v63;
    uint64_t v68 = v4;
    char v64 = v14;
    uint64_t v15 = [v14 objectAtIndex:0];
    uint64_t v76 = AVFormatIDKey;
    long long v16 = +[NSNumber numberWithUnsignedInt:1819304813];
    uint64_t v77 = v16;
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v77 forKeys:&v76 count:1];
    unint64_t v63 = v15;
    id v18 = +[AVAssetReaderTrackOutput assetReaderTrackOutputWithTrack:v15 outputSettings:v17];

    [v18 setAlwaysCopiesSampleData:0];
    [v13 addOutput:v18];
    unsigned int v65 = v13;
    [v13 startReading];
    id v70 = v18;
    id v19 = [v18 copyNextSampleBuffer];
    if (v19)
    {
      id v21 = v19;
      char v22 = 0;
      double v23 = Seconds / (double)a2;
      *(void *)&long long v20 = 67109376;
      long long v69 = v20;
      while (1)
      {
        int v24 = (uint64_t (*)(uint64_t))off_10058C2F0;
        uint64_t v25 = off_10058C300(v21);
        uint64_t v26 = v24(v25);
        int v27 = (double (*)(void *))off_10058C2E0;
        off_10058C320(v72, v21);
        double v28 = v27(v72);
        char v29 = (double (*)(void *))off_10058C2E0;
        off_10058C330(v71, v21);
        double v30 = v29(v71);
        int v31 = *(_DWORD *)(v26 + 32);
        if (v31 == 16)
        {
          int v33 = 0;
          int v32 = (*(unsigned __int8 *)(v26 + 12) >> 2) & 1;
          if (v32) {
            goto LABEL_34;
          }
        }
        else if (v31 == 32)
        {
          int v32 = 0;
          int v33 = *(unsigned char *)(v26 + 12) & 1;
        }
        else
        {
          int v33 = 0;
          int v32 = 0;
        }
        if (v33)
        {
LABEL_34:
          long long buf = 0uLL;
          uint64_t v75 = 0;
          unint64_t v78 = 0;
          off_10058C310(v21, 0, &buf, 24, 0, 0, 0, &v78);
          uint64_t v36 = buf;
          if (buf)
          {
            uint64_t v37 = 0;
            unsigned int v38 = *(_DWORD *)(v26 + 24);
            do
            {
              char v39 = &buf + v37;
              unsigned int v40 = *((_DWORD *)v39 + 3);
              if (v38 <= v40)
              {
                unsigned int v41 = 0;
                uint64_t v42 = *((void *)v39 + 2);
                unsigned int v43 = v40 / v38;
                uint64_t v44 = *(unsigned int *)(v26 + 28);
                double v45 = (double)(v43 - 1);
                if (v43 <= 1) {
                  unsigned int v43 = 1;
                }
                double v46 = 0.0;
                do
                {
                  if (v44)
                  {
                    double v47 = (v28 + v46 / v45 * v30) / v23;
                    if (v47 >= (double)(a2 - 1)) {
                      double v47 = (double)(a2 - 1);
                    }
                    unint64_t v48 = (unint64_t)v47;
                    double v49 = v6[(unint64_t)v47];
                    uint64_t v50 = v44;
                    unsigned int v51 = v41;
                    unint64_t v52 = *(void *)&v8[8 * v48];
                    do
                    {
                      if (v32)
                      {
                        float v53 = (float)*(__int16 *)(v42 + 2 * v51);
                      }
                      else
                      {
                        float v53 = 0.0;
                        if (v33) {
                          float v53 = fmaxf(fminf(*(float *)(v42 + 4 * v51) * 32767.0, 32767.0), -32768.0);
                        }
                      }
                      double v54 = v53 * v53 + v49 * v49 * (double)v52++;
                      double v49 = sqrt(v54 / (double)v52);
                      ++v51;
                      --v50;
                    }
                    while (v50);
                    uint64_t v55 = (v44 - 1) + 1 + *(void *)&v8[8 * v48];
                    v6[v48] = v49;
                    *(void *)&v8[8 * v48] = v55;
                    char v22 = 1;
                  }
                  double v46 = v46 + 1.0;
                  ++v41;
                }
                while (v41 != v43);
              }
              ++v37;
            }
            while (v37 != v36);
          }
          CFRelease(v78);
          goto LABEL_53;
        }
        char v34 = sub_1001B1B60();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v35 = *(_DWORD *)(v26 + 12);
          *(void *)&long long buf = __PAIR64__(*(_DWORD *)(v26 + 8), v69);
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Audio file is in unsupported format to generate waveform data. formatID %d, formatFlags %d", (uint8_t *)&buf, 0xEu);
        }

LABEL_53:
        CFRelease(v21);
        id v21 = [v70 copyNextSampleBuffer];
        if (!v21) {
          goto LABEL_59;
        }
      }
    }
    char v22 = 0;
LABEL_59:
    id v58 = objc_alloc_init((Class)NSMutableArray);
    if ((v22 & 1) != 0 && a2)
    {
      do
      {
        double v59 = *v6++;
        HIDWORD(v60) = HIDWORD(v59);
        *(float *)&double v60 = v59;
        unsigned int v61 = +[NSNumber numberWithFloat:v60];
        [v58 addObject:v61];

        --a2;
      }
      while (a2);
    }
    id v57 = [v58 copy];

    id v4 = v68;
    id v11 = v66;
    long long v13 = v65;
    long long v14 = v64;
    unsigned int v56 = v63;
  }
  else
  {
    unsigned int v56 = sub_1001B1B60();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%@ has no tracks.", (uint8_t *)&buf, 0xCu);
    }
    id v57 = 0;
  }

LABEL_66:

  return v57;
}

void sub_10009D68C(id a1)
{
  off_10058C2E0 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D6BC(id a1)
{
  off_10058C2F0 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D6EC(id a1)
{
  off_10058C300 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D71C(id a1)
{
  off_10058C310 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D74C(id a1)
{
  off_10058C320 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D77C(id a1)
{
  off_10058C330 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_10009D970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CSDIDSDualSessionProvider *__cdecl sub_10009D98C(id a1, IDSSession *a2, OS_dispatch_queue *a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  int v6 = [[CSDIDSDualSessionProvider alloc] initWithSession:v5 queue:v4];

  return v6;
}

id sub_10009DA00(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = (id *)(a1 + 32);
  id v9 = a5;
  id v10 = a3;
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  long long v13 = [WeakRetained queue];
  dispatch_assert_queue_V2(v13);

  id v14 = [[CSDIDSChat alloc] initIncomingWithSession:v11 remoteHandle:v10 wantsVideo:a4 remoteInviteDictionary:v9];

  return v14;
}

void sub_10009E380(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      id v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Incoming call was denied with error %@ so ignoring chat: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10009EC78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 code];
    int v6 = sub_100008DCC();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5 == (id)102)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v10 = 138412546;
        id v11 = v4;
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Incoming call was denied with error %@ so declining chat: %@", (uint8_t *)&v10, 0x16u);
      }

      [*(id *)(a1 + 48) declineInvitation];
    }
    else
    {
      if (v7)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v10 = 138412546;
        id v11 = v4;
        __int16 v12 = 2112;
        uint64_t v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Incoming call was denied with error %@ so ignoring chat: %@", (uint8_t *)&v10, 0x16u);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) updateCacheWithChat:*(void *)(a1 + 40)];
  }
}

BOOL sub_1000A0AE0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 3) {
        break;
      }
      if (v12 == 2)
      {
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 16;
        goto LABEL_23;
      }
      if (v12 == 1)
      {
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 24;
LABEL_23:
        uint64_t v15 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v13 = PBReaderReadData();
    uint64_t v14 = 8;
    goto LABEL_23;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000A30C4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

NSString *__cdecl sub_1000A3E1C(id a1, NSString *a2)
{
  return (NSString *)_TUISOCountryCodeForMCC(a2);
}

void sub_1000A42C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CSDIDSService *__cdecl sub_1000A42E0(id a1, BOOL a2)
{
  id v2 = off_100502BD8;
  if (!a2) {
    id v2 = off_100502BC8;
  }
  id v3 = [(__objc2_class *)*v2 sharedInstance];

  return (CSDIDSService *)v3;
}

BOOL sub_1000A4328(id a1, IDSAccount *a2)
{
  return [(IDSAccount *)a2 canSend];
}

CSDIDSDualSessionProvider *sub_1000A4330(uint64_t a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a6;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  id v15 = [objc_alloc((Class)IDSSession) initWithAccount:v14 destinations:v13 options:v12];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v17 = [WeakRetained featureFlags];
  if ([v17 uPlusOneSessionWithCapabilitiesEnabled])
  {
    id v18 = [WeakRetained conversationServerBag];
    unsigned int v19 = [v18 isUPlusOneSessionCapabilitiesEnabled];

    if (!v19) {
      goto LABEL_8;
    }
    if (a5) {
      +[NSSet setWithObjects:](NSSet, "setWithObjects:", IDSRegistrationPropertySupportsSSRC, IDSRegistrationPropertySupportsModernGFT, 0);
    }
    else {
    uint64_t v17 = +[NSSet setWithObject:IDSRegistrationPropertySupportsModernGFT];
    }
    [v15 setRequiredCapabilities:0 requiredLackOfCapabilities:v17];
  }

LABEL_8:
  long long v20 = [[CSDIDSDualSessionProvider alloc] initWithSession:v15 queue:v11];

  return v20;
}

CSDIDSChat *__cdecl sub_1000A44B0(id a1, CSDExternalIDSDualSession *a2, NSUUID *a3, TUHandle *a4, BOOL a5, BOOL a6, NSUUID *a7)
{
  BOOL v7 = a6;
  BOOL v8 = a5;
  id v12 = a7;
  id v13 = a4;
  id v14 = a3;
  id v15 = a2;
  id v16 = [[CSDIDSChat alloc] initOutgoingWithSession:v15 UUID:v14 remoteHandle:v13 wantsVideo:v8 isRelaying:v7];

  [v16 setLocalSenderIdentityUUID:v12];

  return (CSDIDSChat *)v16;
}

void sub_1000A51F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100008DCC();
  unsigned int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003A97C0(a1, (uint64_t)v3, v5);
    }

    [*(id *)(a1 + 40) endCallWithUUID:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully requested transaction to answer already-ringing call", v6, 2u);
    }
  }
}

id sub_1000A5CC4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ending chat that is being upgraded: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 32) end];
}

id sub_1000A8B54(uint64_t a1)
{
  return [*(id *)(a1 + 32) transferFileAtTemporaryURL:*(void *)(a1 + 40) toDestinations:*(void *)(a1 + 48) withMetadata:*(void *)(a1 + 56) fromMember:0];
}

void sub_1000A8C8C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) URL];
  [v2 transferFileAtTemporaryURL:v3 toDestinations:*(void *)(a1 + 48) withMetadata:*(void *)(a1 + 56) fromMember:*(void *)(a1 + 64)];
}

void sub_1000A8E6C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1000A8F28;
  v5[3] = &unk_100505FB0;
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v2 performFileCopierOperation:1 onInputURL:v3 outputURL:v6 completion:v5];
}

void sub_1000A8F28(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  uint64_t v3 = *(void *)(a1 + 32);
  id v22 = 0;
  uint64_t v4 = [v2 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:0 options:0 error:&v22];
  id v5 = v22;

  if (v4)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v18 objects:v27 count:16];
    if (v7)
    {
      id v16 = v5;
      uint64_t v17 = a1;
      uint64_t v8 = *(void *)v19;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v6);
          }
          int v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          buf[0] = 0;
          id v11 = +[NSFileManager defaultManager];
          id v12 = [v10 path];
          unsigned int v13 = [v11 fileExistsAtPath:v12 isDirectory:buf];

          if (v13) {
            BOOL v14 = buf[0] == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            id v7 = v10;
            goto LABEL_14;
          }
        }
        id v7 = [v6 countByEnumeratingWithState:&v18 objects:v27 count:16];
      }
      while (v7);
LABEL_14:
      id v5 = v16;
      a1 = v17;
    }

    id v15 = sub_100008DCC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v24 = v6;
      __int16 v25 = 2112;
      id v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "new directory urls: %@, unzippedDirectoryURL: %@", buf, 0x16u);
    }
  }
  else
  {
    id v15 = sub_100008DCC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1003A992C();
    }
    id v7 = 0;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A94B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412802;
    id v24 = v3;
    __int16 v25 = 2112;
    uint64_t v26 = v5;
    __int16 v27 = 2112;
    uint64_t v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending resource at URL %@ to destinations %@ with metadata %@", buf, 0x20u);
  }

  if (v3)
  {
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v8 = *(void **)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = [v8 idsFromID];
      [v7 setObject:v9 forKeyedSubscript:IDSSendMessageOptionFromIDKey];
    }
    int v10 = [*(id *)(a1 + 56) service];
    id v11 = [v10 service];
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    id v21 = 0;
    id v22 = 0;
    unsigned int v14 = [v11 sendResourceAtURL:v3 metadata:v12 toDestinations:v13 priority:300 options:v7 identifier:&v22 error:&v21];
    id v15 = v22;
    id v16 = v21;

    if (v14)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      long long v18 = [*(id *)(a1 + 56) clientFileURLByIdentifier];
      [v18 setObject:v17 forKeyedSubscript:v15];

      long long v19 = sub_100008DCC();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Successfully started sending resource with identifier %@", buf, 0xCu);
      }
    }
    else
    {
      [*(id *)(a1 + 56) cleanUpTemporaryFileIfExistsForClientFileURL:*(void *)(a1 + 64)];
      long long v20 = sub_100008DCC();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1003A9A1C();
      }

      long long v19 = [*(id *)(a1 + 56) delegate];
      [v19 fileTransferer:*(void *)(a1 + 56) didTransferFileAtURL:*(void *)(a1 + 64) successfully:0];
    }
  }
}

void sub_1000A9710(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  uint64_t v4 = [v3 queue];
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = [*(id *)(a1 + 32) temporaryFileURLByClientFileURL];
  [v5 setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1000AA380(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003A9BBC();
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1000AA5CC(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 didErrorOccur];
  uint64_t v5 = sub_100008DCC();
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003A9C34();
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[7];
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    int v13 = 134218498;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "completed operation: %ld, inputURL: %@, outputURL: %@", (uint8_t *)&v13, 0x20u);
  }

  [v3 cleanup];
  uint64_t v10 = a1[6];
  unsigned int v11 = [v3 didErrorOccur];

  return (*(uint64_t (**)(uint64_t, void))(v10 + 16))(v10, v11 ^ 1);
}

void sub_1000AB014(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pendingCompletions];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  id v4 = objc_retainBlock(*(id *)(a1 + 48));
  unsigned int v5 = [v3 containsObject:v4];

  if (v5)
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Timed out waiting for call source with identifier %@ to check in", (uint8_t *)&v9, 0xCu);
    }

    id v8 = objc_retainBlock(*(id *)(a1 + 48));
    [v3 removeObject:v8];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000AB958(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 responseInformation];
  unsigned int v5 = [v4 objectForKey:IMUserNotificationTextFieldValuesKey];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  uint64_t v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218242;
    id v10 = [v3 response];
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "User notification has been completed with response %lu and entered PIN %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, BOOL, id))(v8 + 16))(v8, [v3 response] == 0, v6);
  }
}

uint64_t sub_1000ABD50(uint64_t a1, void *a2)
{
  id v3 = [a2 response];
  id v4 = sub_100008DCC();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Canceling pin request from iPhone", v8, 2u);
    }

    uint64_t result = *(void *)(a1 + 32);
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(result + 16);
      return v7();
    }
  }
  else
  {
    if (v5)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting pin from iPhone", buf, 2u);
    }

    uint64_t result = *(void *)(a1 + 32);
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(result + 16);
      return v7();
    }
  }
  return result;
}

void sub_1000AC35C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User tapped cancel on the Pin Display Alert", v6, 2u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, [v3 response] == 0);
  }
}

uint64_t sub_1000AD994(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 128;
        goto LABEL_182;
      case 2u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 0x20u;
        while (2)
        {
          uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
            v18 |= (unint64_t)(v21 & 0x7F) << v16;
            if (v21 < 0)
            {
              v16 += 7;
              BOOL v10 = v17++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_193;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_193:
        uint64_t v141 = 104;
        goto LABEL_262;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(_DWORD *)(a1 + 152) |= 0x80u;
        while (2)
        {
          uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v10 = v23++ >= 9;
              if (v10)
              {
                uint64_t v24 = 0;
                goto LABEL_197;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_197:
        BOOL v142 = v24 != 0;
        uint64_t v143 = 136;
        goto LABEL_275;
      case 4u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 24;
        goto LABEL_182;
      case 5u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 120;
        goto LABEL_182;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 8u;
        while (2)
        {
          uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v18 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              BOOL v10 = v29++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_201:
        uint64_t v141 = 96;
        goto LABEL_262;
      case 7u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(_DWORD *)(a1 + 152) |= 0x200000u;
        while (2)
        {
          uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v10 = v34++ >= 9;
              if (v10)
              {
                uint64_t v35 = 0;
                goto LABEL_205;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0;
        }
LABEL_205:
        BOOL v142 = v35 != 0;
        uint64_t v143 = 150;
        goto LABEL_275;
      case 8u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 2u;
        while (2)
        {
          uint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v18 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v10 = v40++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_209;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_209:
        uint64_t v141 = 80;
        goto LABEL_262;
      case 9u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 152) |= 0x100000u;
        while (2)
        {
          uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v10 = v45++ >= 9;
              if (v10)
              {
                uint64_t v46 = 0;
                goto LABEL_213;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v46 = 0;
        }
LABEL_213:
        BOOL v142 = v46 != 0;
        uint64_t v143 = 149;
        goto LABEL_275;
      case 0xAu:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 16;
        goto LABEL_182;
      case 0xBu:
        *(_DWORD *)(a1 + 152) |= 1u;
        unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v51 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v51 = 0;
        }
        *(void *)(a1 + 8) = v51;
        goto LABEL_276;
      case 0xCu:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(_DWORD *)(a1 + 152) |= 0x1000u;
        while (2)
        {
          uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v10 = v53++ >= 9;
              if (v10)
              {
                uint64_t v54 = 0;
                goto LABEL_217;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v54 = 0;
        }
LABEL_217:
        BOOL v142 = v54 != 0;
        uint64_t v143 = 141;
        goto LABEL_275;
      case 0xDu:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        *(_DWORD *)(a1 + 152) |= 0x4000u;
        while (2)
        {
          uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v10 = v59++ >= 9;
              if (v10)
              {
                uint64_t v60 = 0;
                goto LABEL_221;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v60 = 0;
        }
LABEL_221:
        BOOL v142 = v60 != 0;
        uint64_t v143 = 143;
        goto LABEL_275;
      case 0xEu:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0;
        *(_DWORD *)(a1 + 152) |= 0x800u;
        while (2)
        {
          uint64_t v67 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68;
            v66 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              BOOL v10 = v65++ >= 9;
              if (v10)
              {
                uint64_t v66 = 0;
                goto LABEL_225;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v66 = 0;
        }
LABEL_225:
        BOOL v142 = v66 != 0;
        uint64_t v143 = 140;
        goto LABEL_275;
      case 0xFu:
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 0x10u;
        while (2)
        {
          uint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v73 = v72 + 1;
          if (v72 == -1 || v73 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73;
            v18 |= (unint64_t)(v74 & 0x7F) << v70;
            if (v74 < 0)
            {
              v70 += 7;
              BOOL v10 = v71++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_229;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_229:
        uint64_t v141 = 100;
        goto LABEL_262;
      case 0x10u:
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v77 = 0;
        *(_DWORD *)(a1 + 152) |= 0x100u;
        while (2)
        {
          uint64_t v78 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v79 = v78 + 1;
          if (v78 == -1 || v79 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79;
            v77 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              BOOL v10 = v76++ >= 9;
              if (v10)
              {
                uint64_t v77 = 0;
                goto LABEL_233;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v77 = 0;
        }
LABEL_233:
        BOOL v142 = v77 != 0;
        uint64_t v143 = 137;
        goto LABEL_275;
      case 0x11u:
        char v81 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = 0;
        *(_DWORD *)(a1 + 152) |= 0x400u;
        while (2)
        {
          uint64_t v84 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v85 = v84 + 1;
          if (v84 == -1 || v85 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v86 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v85;
            v83 |= (unint64_t)(v86 & 0x7F) << v81;
            if (v86 < 0)
            {
              v81 += 7;
              BOOL v10 = v82++ >= 9;
              if (v10)
              {
                uint64_t v83 = 0;
                goto LABEL_237;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v83 = 0;
        }
LABEL_237:
        BOOL v142 = v83 != 0;
        uint64_t v143 = 139;
        goto LABEL_275;
      case 0x12u:
        unsigned int v87 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 40), v87);
        goto LABEL_141;
      case 0x13u:
        char v88 = 0;
        unsigned int v89 = 0;
        uint64_t v90 = 0;
        *(_DWORD *)(a1 + 152) |= 0x2000u;
        while (2)
        {
          uint64_t v91 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v92 = v91 + 1;
          if (v91 == -1 || v92 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v93 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v91);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v92;
            v90 |= (unint64_t)(v93 & 0x7F) << v88;
            if (v93 < 0)
            {
              v88 += 7;
              BOOL v10 = v89++ >= 9;
              if (v10)
              {
                uint64_t v90 = 0;
                goto LABEL_241;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v90 = 0;
        }
LABEL_241:
        BOOL v142 = v90 != 0;
        uint64_t v143 = 142;
        goto LABEL_275;
      case 0x14u:
        unsigned int v87 = objc_alloc_init(CSDMessagingCallProvider);
        objc_storeStrong((id *)(a1 + 88), v87);
        if (!PBReaderPlaceMark() || (sub_10008DC20(v87, a2) & 1) == 0) {
          goto LABEL_281;
        }
        goto LABEL_143;
      case 0x15u:
        char v94 = 0;
        unsigned int v95 = 0;
        uint64_t v96 = 0;
        *(_DWORD *)(a1 + 152) |= 0x80000u;
        while (2)
        {
          uint64_t v97 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v98 = v97 + 1;
          if (v97 == -1 || v98 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v97);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v98;
            v96 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              BOOL v10 = v95++ >= 9;
              if (v10)
              {
                uint64_t v96 = 0;
                goto LABEL_245;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v96 = 0;
        }
LABEL_245:
        BOOL v142 = v96 != 0;
        uint64_t v143 = 148;
        goto LABEL_275;
      case 0x16u:
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v102 = 0;
        *(_DWORD *)(a1 + 152) |= 0x40000u;
        while (2)
        {
          uint64_t v103 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v104 = v103 + 1;
          if (v103 == -1 || v104 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v105 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v103);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v104;
            v102 |= (unint64_t)(v105 & 0x7F) << v100;
            if (v105 < 0)
            {
              v100 += 7;
              BOOL v10 = v101++ >= 9;
              if (v10)
              {
                uint64_t v102 = 0;
                goto LABEL_249;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v102 = 0;
        }
LABEL_249:
        BOOL v142 = v102 != 0;
        uint64_t v143 = 147;
        goto LABEL_275;
      case 0x17u:
        unsigned int v87 = objc_alloc_init(CSDMessagingCallModel);
        objc_storeStrong((id *)(a1 + 72), v87);
        if (!PBReaderPlaceMark() || !sub_10004EE30((uint64_t)v87, a2)) {
          goto LABEL_281;
        }
        goto LABEL_143;
      case 0x18u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 64;
        goto LABEL_182;
      case 0x19u:
        unsigned int v87 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addRemoteParticipantHandles:v87];
LABEL_141:
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v87, a2))
        {
LABEL_143:
          PBReaderRecallMark();

LABEL_276:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_281:

        return 0;
      case 0x1Au:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 56;
        goto LABEL_182;
      case 0x1Bu:
        char v106 = 0;
        unsigned int v107 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 0x40u;
        while (2)
        {
          uint64_t v108 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v109 = v108 + 1;
          if (v108 == -1 || v109 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v110 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v108);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v109;
            v18 |= (unint64_t)(v110 & 0x7F) << v106;
            if (v110 < 0)
            {
              v106 += 7;
              BOOL v10 = v107++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_253;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_253:
        uint64_t v141 = 108;
        goto LABEL_262;
      case 0x1Cu:
        char v111 = 0;
        unsigned int v112 = 0;
        uint64_t v113 = 0;
        *(_DWORD *)(a1 + 152) |= 0x20000u;
        while (2)
        {
          uint64_t v114 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v115 = v114 + 1;
          if (v114 == -1 || v115 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v116 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v114);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v115;
            v113 |= (unint64_t)(v116 & 0x7F) << v111;
            if (v116 < 0)
            {
              v111 += 7;
              BOOL v10 = v112++ >= 9;
              if (v10)
              {
                uint64_t v113 = 0;
                goto LABEL_257;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v113 = 0;
        }
LABEL_257:
        BOOL v142 = v113 != 0;
        uint64_t v143 = 146;
        goto LABEL_275;
      case 0x1Du:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 48;
        goto LABEL_182;
      case 0x1Eu:
        char v117 = 0;
        unsigned int v118 = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(a1 + 152) |= 4u;
        while (2)
        {
          uint64_t v119 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v120 = v119 + 1;
          if (v119 == -1 || v120 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v121 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v119);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v120;
            v18 |= (unint64_t)(v121 & 0x7F) << v117;
            if (v121 < 0)
            {
              v117 += 7;
              BOOL v10 = v118++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_261;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_261:
        uint64_t v141 = 84;
LABEL_262:
        *(_DWORD *)(a1 + v141) = v18;
        goto LABEL_276;
      case 0x1Fu:
        char v122 = 0;
        unsigned int v123 = 0;
        uint64_t v124 = 0;
        *(_DWORD *)(a1 + 152) |= 0x200u;
        while (2)
        {
          uint64_t v125 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v126 = v125 + 1;
          if (v125 == -1 || v126 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v127 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v125);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v126;
            v124 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              BOOL v10 = v123++ >= 9;
              if (v10)
              {
                uint64_t v124 = 0;
                goto LABEL_266;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v124 = 0;
        }
LABEL_266:
        BOOL v142 = v124 != 0;
        uint64_t v143 = 138;
        goto LABEL_275;
      case 0x20u:
        char v128 = 0;
        unsigned int v129 = 0;
        uint64_t v130 = 0;
        *(_DWORD *)(a1 + 152) |= 0x10000u;
        while (2)
        {
          uint64_t v131 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v132 = v131 + 1;
          if (v131 == -1 || v132 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v133 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v131);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v132;
            v130 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              BOOL v10 = v129++ >= 9;
              if (v10)
              {
                uint64_t v130 = 0;
                goto LABEL_270;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v130 = 0;
        }
LABEL_270:
        BOOL v142 = v130 != 0;
        uint64_t v143 = 145;
        goto LABEL_275;
      case 0x21u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 32;
LABEL_182:
        char v134 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_276;
      case 0x22u:
        char v135 = 0;
        unsigned int v136 = 0;
        uint64_t v137 = 0;
        *(_DWORD *)(a1 + 152) |= 0x8000u;
        while (2)
        {
          uint64_t v138 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v139 = v138 + 1;
          if (v138 == -1 || v139 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v140 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v138);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v139;
            v137 |= (unint64_t)(v140 & 0x7F) << v135;
            if (v140 < 0)
            {
              v135 += 7;
              BOOL v10 = v136++ >= 9;
              if (v10)
              {
                uint64_t v137 = 0;
                goto LABEL_274;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v137 = 0;
        }
LABEL_274:
        BOOL v142 = v137 != 0;
        uint64_t v143 = 144;
LABEL_275:
        *(unsigned char *)(a1 + v143) = v142;
        goto LABEL_276;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_276;
    }
  }
}

BOOL sub_1000B13B0(id a1, CSDCall *a2)
{
  id v2 = a2;
  BOOL v3 = ([(CSDCall *)v2 isPTT] & 1) == 0 && [(CSDCall *)v2 status] == 1;

  return v3;
}

void sub_1000B2FC0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    id v23 = v3;
    __int16 v24 = 2112;
    uint64_t v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Channel source manager %@ completed transaction group %@", buf, 0x16u);
  }

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unsigned int v5 = [*(id *)(a1 + 40) allActions];
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        BOOL v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v11 = v10;
          id v12 = [v11 channelUUID];
          uint64_t v13 = [*(id *)(a1 + 48) _callWithUUID:v12];
          uint64_t v14 = sub_100008DCC();
          BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            if (v15)
            {
              *(_DWORD *)long long buf = 138412290;
              id v23 = v12;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Channel action completed for call with UUID %@", buf, 0xCu);
            }

            [*(id *)(a1 + 48) _processCompletedChannelAction:v11 forCall:v13];
          }
          else
          {
            if (v15)
            {
              *(_DWORD *)long long buf = 138412290;
              id v23 = v11;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for completed channel action %@", buf, 0xCu);
            }
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }

  char v16 = +[CSDReportingController sharedInstance];
  [v16 reportTransactionGroupCompleted:*(void *)(a1 + 40)];
}

void sub_1000B32F8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = [*(id *)(a1 + 32) channelSources];
    *(_DWORD *)long long buf = 138412290;
    unsigned int v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Channel sources changed: %@", buf, 0xCu);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v4 = [*(id *)(a1 + 40) calls];
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v25;
    *(void *)&long long v6 = 138412546;
    long long v22 = v6;
    uint64_t v23 = a1;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v4);
        }
        BOOL v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v11 = [v10 providerSource];
          id v12 = v11;
          if (v11)
          {
            if (([v11 isConnected] & 1) == 0)
            {
              uint64_t v13 = sub_100008DCC();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v14 = [v10 uniqueProxyIdentifierUUID];
                *(_DWORD *)long long buf = v22;
                unsigned int v29 = v14;
                __int16 v30 = 2112;
                unint64_t v31 = v12;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Suspending channel with UUID %@; channel source %@ is no longer available",
                  buf,
                  0x16u);

                a1 = v23;
              }

              if ([v10 transmissionState] != (id)1)
              {
                [v10 setHeld:1];
                [v10 setTransmissionState:1];
              }
              objc_msgSend(v10, "setProviderSource:", 0, v22);
            }
          }
          else
          {
            BOOL v15 = *(void **)(a1 + 32);
            char v16 = [v10 providerIdentifier];
            long long v17 = [v15 channelSourceForIdentifier:v16];

            LODWORD(v16) = [v17 isConnected];
            long long v18 = sub_100008DCC();
            BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              if (v19)
              {
                long long v20 = [v10 uniqueProxyIdentifierUUID];
                *(_DWORD *)long long buf = v22;
                unsigned int v29 = v20;
                __int16 v30 = 2112;
                unint64_t v31 = v17;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Adding channel source %@ to channel with UUID %@", buf, 0x16u);
              }
              [v10 setProviderSource:v17];
              a1 = v23;
              [*(id *)(v23 + 40) _startMonitoringAppForCall:v10];
            }
            else
            {
              if (v19)
              {
                char v21 = [v10 uniqueProxyIdentifierUUID];
                *(_DWORD *)long long buf = v22;
                unsigned int v29 = v21;
                __int16 v30 = 2112;
                unint64_t v31 = v17;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[WARN] Can't add channel source %@ to channel with UUID %@ because it's not connected", buf, 0x16u);
              }
              a1 = v23;
            }
          }
        }
      }
      id v7 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v7);
  }
}

void sub_1000B4AA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412546;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v15, 0x16u);
  }

  if (v6)
  {
    uint64_t v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003A9FFC(a1, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void sub_1000B4C3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412546;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v15, 0x16u);
  }

  if (v6)
  {
    uint64_t v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003A9FFC(a1, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void sub_1000B4EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B4ECC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  BOOL v3 = [*(id *)(a1 + 40) bundleIdentifier];
  uint64_t v4 = [v2 fetchCurrentProcessStatesForBundleIdentifier:v3];

  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = objc_msgSend(v4, "allValues", 0);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * i) integerValue] == (id)4)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

id sub_1000B55E4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1003AA178(a1);
  }

  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000B5D08(id *a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5E14;
  block[3] = &unk_100506B18;
  char v17 = a2;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = v5;
  id v14 = a1[7];
  id v7 = a1[8];
  id v8 = a1[4];
  id v15 = v7;
  id v16 = v8;
  id v9 = v5;
  dispatch_async(v6, block);
}

void *sub_1000B5E14(void *result)
{
  uint64_t v1 = (uint64_t)result;
  if (*((unsigned char *)result + 80))
  {
    id v2 = (void *)result[4];
    uint64_t v3 = *(void *)(v1 + 40);
    return [v2 setDeferredTransmitStartAction:v3];
  }
  else if (result[6])
  {
    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003AA20C(v1, (uint64_t *)(v1 + 48), v4);
    }

    [*(id *)(v1 + 64) fail];
    return [*(id *)(v1 + 72) _processCompletedChannelAction:*(void *)(v1 + 64) forCall:*(void *)(v1 + 32)];
  }
  return result;
}

void sub_1000B60C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B60DC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) processObserver];
  id v2 = [*(id *)(a1 + 40) providerSource];
  uint64_t v3 = [v2 bundleIdentifier];
  id v4 = [v5 processIdentifiersForBundleIdentifier:v3];
}

void sub_1000B6160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v7 = WeakRetained;
    [WeakRetained _processPushToTalkAppStateChangedForCall:*(void *)(a1 + 32) withPID:a2 processState:a3];
    id WeakRetained = v7;
  }
}

id sub_1000B6410(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateUplinkMuteState];
}

void sub_1000B72EC(uint64_t a1)
{
}

uint64_t sub_1000B7398(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 244) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_1000B7448(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 236) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000B74F8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 237) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000B75A8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 239) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000B7658(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 240) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000B7708(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 248) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_1000B77B8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 241) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000B7864(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 344) = *(void *)(result + 40);
  return result;
}

void sub_1000B7944(uint64_t a1)
{
}

void sub_1000B7A24(uint64_t a1)
{
}

void sub_1000B7B04(uint64_t a1)
{
}

void sub_1000B7BE4(uint64_t a1)
{
}

id sub_1000B7C90(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDRelayCall;
  return objc_msgSendSuper2(&v3, "setHardPauseDigitsState:", v1);
}

id sub_1000B7D98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CSDRelayCall;
  return objc_msgSendSuper2(&v3, "setHardPauseDigits:", v1);
}

void sub_1000B8C68(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) relayDelegate];
  id v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Started conference successfully for answered relay call %@", (uint8_t *)&v11, 0xCu);
    }

    [v6 relayCallConferenceDidStartSuccessfullyForIncomingAnsweredCall:*(void *)(a1 + 32)];
  }
  else
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to start conference connection when answering call %@: %@", (uint8_t *)&v11, 0x16u);
    }

    [v6 relayCallConferenceFailedToStart:*(void *)(a1 + 32)];
  }
}

void sub_1000B8DB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    v9[0] = 67109634;
    v9[1] = a2;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for answered call %@: %@", (uint8_t *)v9, 0x1Cu);
  }

  BOOL v8 = [*(id *)(a1 + 32) relayDelegate];
  [v8 relayCallConferenceDidStop:*(void *)(a1 + 32) cleanly:a2 error:v5];
}

void sub_1000B8FC4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) relayDelegate];
  uint64_t v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Started conference successfully for dialed relay call %@", (uint8_t *)&v11, 0xCu);
    }

    [v6 relayCallConferenceDidStartSuccessfullyForOutgoingDialedCall:*(void *)(a1 + 32)];
  }
  else
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to start conference connection when dialing call %@: %@", (uint8_t *)&v11, 0x16u);
    }

    [v6 relayCallConferenceFailedToStart:*(void *)(a1 + 32)];
  }
}

void sub_1000B910C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    v9[0] = 67109634;
    v9[1] = a2;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for dialed call %@: %@", (uint8_t *)v9, 0x1Cu);
  }

  BOOL v8 = [*(id *)(a1 + 32) relayDelegate];
  [v8 relayCallConferenceDidStop:*(void *)(a1 + 32) cleanly:a2 error:v5];
}

void sub_1000B9320(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100008DCC();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Started conference successfully for pulled relay call %@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = [*(id *)(a1 + 32) relayDelegate];
    [v9 relayCallConferenceDidStartSuccessfullyForPulledCall:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003AA29C(a1, (uint64_t)v5, v7);
    }

    [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
  }
}

void sub_1000B9434(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    v9[0] = 67109634;
    v9[1] = a2;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for pulled call %@: %@", (uint8_t *)v9, 0x1Cu);
  }

  uint64_t v8 = [*(id *)(a1 + 32) relayDelegate];
  [v8 relayCallConferenceDidStop:*(void *)(a1 + 32) cleanly:a2 error:v5];
}

id sub_1000B96BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCallStatus:2];
}

id sub_1000B97E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCallStatus:1];
}

void sub_1000BA1B8(uint64_t a1)
{
  id v2 = +[TUCallHistoryManagerXPCClient callHistoryManagerClientXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 24) setRemoteObjectInterface:v2];

  objc_super v3 = +[TUCallHistoryManagerXPCClient callHistoryManagerServerXPCInterface];
  [*(id *)(*(void *)(a1 + 32) + 24) setExportedInterface:v3];

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "setExportedObject:");
  [*(id *)(*(void *)(a1 + 32) + 24) setRequiredConnectionCapability:@"access-call-history"];
  [*(id *)(*(void *)(a1 + 32) + 24) setInterruptionHandler:&stru_100506B88];
  [*(id *)(*(void *)(a1 + 32) + 24) setInvalidationHandler:&stru_100506BA8];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 24) asynchronousExportedObjectProxy];
  +[TUCallHistoryManagerXPCClient setAsynchronousServer:v4];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 24) synchronousExportedObjectProxy];
  +[TUCallHistoryManagerXPCClient setSynchronousServer:v5];
}

void sub_1000BA2D8(id a1, CSDClient *a2)
{
  id v2 = a2;
  objc_super v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000BA384(id a1, CSDClient *a2)
{
  id v2 = a2;
  objc_super v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@", (uint8_t *)&v4, 0xCu);
  }
}

id sub_1000BA430(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.callhistorymanager"];
}

void sub_1000BA4CC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 invalidate];
}

void sub_1000BA638(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callHistoryManager];
  [v2 reportRecentCallForConversation:*(void *)(a1 + 40) withStartDate:*(void *)(a1 + 48) avMode:*(void *)(a1 + 56)];
}

void sub_1000BA7B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callHistoryManager];
  [v2 updateOutgoingLocalParticipantUUID:*(void *)(a1 + 40) forCallsWithOutgoingLocalParticipantUUID:*(void *)(a1 + 48)];
}

void sub_1000BA8BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_1000BA9C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_1000BB124(id a1)
{
  id v6 = +[NSCharacterSet characterSetWithCharactersInString:@","];
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:@";"];
  id v2 = (void *)qword_10058C350;
  qword_10058C350 = v1;

  id v3 = objc_alloc_init((Class)NSMutableCharacterSet);
  [v3 formUnionWithCharacterSet:v6];
  [v3 formUnionWithCharacterSet:qword_10058C350];
  id v4 = [v3 copy];
  id v5 = (void *)qword_10058C358;
  qword_10058C358 = (uint64_t)v4;
}

void sub_1000BB698(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) queue];
  dispatch_async(v2, *(dispatch_block_t *)(a1 + 40));
}

void sub_1000BCED0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) identifiersWaitingForAcknowledgement];
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  id v4 = sub_100008DCC();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received acknowledgement for message with identifier: %@. Removing from waiting messages.", (uint8_t *)&v8, 0xCu);
    }

    id v4 = [*(id *)(a1 + 32) identifiersWaitingForAcknowledgement];
    [v4 removeObject:*(void *)(a1 + 40)];
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Received acknowledgement for unknown message with identifier: %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1000BD108(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  unsigned int v3 = sub_100008DCC();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received successful didSend for message with identifier %@ using account %@", (uint8_t *)&v7, 0x16u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    sub_1003AA3D8((void *)a1, v4);
  }
}

void sub_1000BD4EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 messenger:*(void *)(a1 + 32) handledMessage:*(void *)(a1 + 40) fromDestination:*(void *)(a1 + 48) device:*(void *)(a1 + 56)];
}

void sub_1000BDA2C(uint64_t a1)
{
  id v2 = +[CSDRelayIDSService sharedInstance];
  unsigned int v3 = [v2 pairedDevice];

  if (v3)
  {
    uint64_t v35 = v3;
    id v4 = (void *)IDSCopyIDForDevice();
    uint64_t v5 = +[NSSet setWithObject:v4];

    uint64_t v6 = [*(id *)(a1 + 32) _sendMessageOptionsWithTimeout:*(unsigned __int8 *)(a1 + 72) wantsAcknowledgement:*(double *)(a1 + 56)];
    int v7 = +[CSDRelayIDSService sharedInstance];
    uint64_t v8 = [v7 service];
    __int16 v9 = (id *)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 40) data];
    id v47 = 0;
    id v46 = 0;
    uint64_t v36 = (void *)v6;
    unsigned int v11 = [v8 sendData:v10 toDestinations:v5 priority:300 options:v6 identifier:&v47 error:&v46];
    __int16 v12 = (__CFString *)v47;
    id v13 = v46;

    id v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [*v9 typeString];
      *(_DWORD *)long long buf = 138413058;
      char v49 = v15;
      __int16 v50 = 2112;
      uint64_t v51 = v12;
      __int16 v52 = 2112;
      unsigned int v53 = v36;
      __int16 v54 = 2112;
      uint64_t v55 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending %@ message with identifier %@ and options %@ to destinations %@", buf, 0x2Au);
    }
    id v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      char v17 = (__CFString *)*v9;
      *(_DWORD *)long long buf = 138412546;
      char v49 = v12;
      __int16 v50 = 2112;
      uint64_t v51 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "identifier %@ message %@", buf, 0x16u);
    }

    id v18 = sub_100008DCC();
    BOOL v19 = v18;
    long long v20 = v13;
    if (v11)
    {
      unsigned int v3 = v35;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        char v21 = [*v9 typeString];
        *(_DWORD *)long long buf = 138412290;
        char v49 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Successfully sent %@ message", buf, 0xCu);
      }
      if (*(void *)(a1 + 48))
      {
        long long v22 = +[TUCallCenter sharedInstance];
        uint64_t v23 = [v22 queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000BE060;
        block[3] = &unk_100505738;
        id v45 = *(id *)(a1 + 48);
        dispatch_async(v23, block);
      }
      if (!*(unsigned char *)(a1 + 72)) {
        goto LABEL_25;
      }
      long long v24 = sub_100008DCC();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = [*v9 type];
        if (v25 >= 0x39)
        {
          long long v26 = +[NSString stringWithFormat:@"(unknown: %i)", v25];
        }
        else
        {
          long long v26 = off_100506C88[(int)v25];
        }
        unint64_t v31 = *(void **)(a1 + 64);
        *(_DWORD *)long long buf = 138412802;
        char v49 = v26;
        __int16 v50 = 2112;
        uint64_t v51 = v12;
        __int16 v52 = 2048;
        unsigned int v53 = v31;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Setting up reliable message delivery for %@ message with identifier: %@ and retry attempts left: %lu", buf, 0x20u);
      }
      char v32 = [*(id *)(a1 + 32) identifiersWaitingForAcknowledgement];
      [v32 addObject:v12];

      dispatch_time_t v33 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0));
      unsigned int v34 = [*(id *)(a1 + 32) queue];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1000BE074;
      v39[3] = &unk_100506C40;
      v39[4] = *(void *)(a1 + 32);
      unsigned int v40 = v12;
      id v41 = *(id *)(a1 + 40);
      uint64_t v42 = *(void *)(a1 + 56);
      uint64_t v43 = *(void *)(a1 + 64);
      dispatch_after(v33, v34, v39);

      __int16 v30 = v40;
    }
    else
    {
      unsigned int v3 = v35;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_1003AA46C((id *)(a1 + 40), (uint64_t)v20, v19);
      }

      if (!*(void *)(a1 + 48)) {
        goto LABEL_25;
      }
      char v28 = +[TUCallCenter sharedInstance];
      unsigned int v29 = [v28 queue];
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_1000BE08C;
      v37[3] = &unk_100505738;
      char v38 = (__CFString *)*(id *)(a1 + 48);
      dispatch_async(v29, v37);

      __int16 v30 = v38;
    }

LABEL_25:
    goto LABEL_26;
  }
  uint64_t v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    long long v27 = [*(id *)(a1 + 40) typeString];
    *(_DWORD *)long long buf = 138412290;
    char v49 = v27;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] No paired device, so unable to send message %@", buf, 0xCu);
  }
LABEL_26:
}

uint64_t sub_1000BE060(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000BE074(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _retryReliableMessageWithIdentifierIfNecessary:*(void *)(a1 + 40) message:*(void *)(a1 + 48) timeout:*(void *)(a1 + 64) maximumRetryAttempts:*(double *)(a1 + 56)];
}

uint64_t sub_1000BE08C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000BE738(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v13 = PBReaderReadString();
      uint64_t v14 = 8;
    }
    else
    {
      if (v12 == 2)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0) {
            goto LABEL_33;
          }
          v16 += 7;
          BOOL v9 = v17++ >= 9;
          if (v9)
          {
            uint64_t v18 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v18 = 0;
        }
LABEL_35:
        *(unsigned char *)(a1 + 24) = v18 != 0;
        continue;
      }
      if (v12 != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
      }
      uint64_t v13 = PBReaderReadString();
      uint64_t v14 = 16;
    }
    id v15 = *(void **)(a1 + v14);
    *(void *)(a1 + v14) = v13;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000BF214(uint64_t a1)
{
  if (a1 == 3) {
    return 2;
  }
  else {
    return a1 == 2;
  }
}

uint64_t sub_1000BF22C(int a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 2);
  }
}

BOOL sub_1000BF244(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1000BF250(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 2);
  }
}

uint64_t sub_1000BF268(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3) {
    return 1;
  }
  else {
    return (a1 + 1);
  }
}

uint64_t sub_1000BF27C(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 2);
  }
}

BOOL sub_1000BF294(BOOL result)
{
  if (result != 2) {
    return result == 1;
  }
  return result;
}

uint64_t sub_1000BF2A8(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 4) {
    return 0;
  }
  return result;
}

uint64_t sub_1000BF2B8(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return 0;
  }
  return result;
}

uint64_t sub_1000BF2C8(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x13) {
    return 0;
  }
  return result;
}

id sub_1000C1010(CSDMessagingConversationParticipantDidJoinContext *self, SEL a2)
{
  v7.receiver = self;
  v7.super_class = (Class)CSDMessagingConversationParticipantDidJoinContext;
  unsigned int v3 = [(CSDMessagingConversationParticipantDidJoinContext *)&v7 description];
  char v4 = [(CSDMessagingConversationParticipantDidJoinContext *)self dictionaryRepresentation];
  unsigned int v5 = +[NSString stringWithFormat:@"%@ %@", v3, v4];

  return v5;
}

uint64_t sub_1000C1A8C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 128) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_186;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_188;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_186:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_188:
        uint64_t v114 = 100;
        goto LABEL_253;
      case 2u:
        uint64_t v18 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addMembers:v18];
        goto LABEL_69;
      case 3u:
        uint64_t v18 = objc_alloc_init(CSDMessagingConversationMessage);
        objc_storeStrong((id *)(a1 + 40), v18);
        if (!PBReaderPlaceMark() || (sub_1001ACDD0((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_269;
        }
        goto LABEL_163;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 56;
        goto LABEL_118;
      case 5u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 48;
        goto LABEL_118;
      case 6u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_DWORD *)(a1 + 128) |= 0x80u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_192;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_192:
        BOOL v115 = v23 != 0;
        uint64_t v116 = 115;
        goto LABEL_266;
      case 7u:
        uint64_t v18 = objc_alloc_init(CSDMessagingConversationActivitySession);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (sub_1000D204C((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_269;
        }
        goto LABEL_163;
      case 8u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(_DWORD *)(a1 + 128) |= 0x40000u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_196;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_196:
        BOOL v115 = v28 != 0;
        uint64_t v116 = 126;
        goto LABEL_266;
      case 9u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(_DWORD *)(a1 + 128) |= 0x400u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                uint64_t v33 = 0;
                goto LABEL_200;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v33 = 0;
        }
LABEL_200:
        BOOL v115 = v33 != 0;
        uint64_t v116 = 118;
        goto LABEL_266;
      case 0xAu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 80;
        goto LABEL_118;
      case 0xBu:
        uint64_t v18 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addOtherInvitedHandles:v18];
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_269;
        }
        goto LABEL_163;
      case 0xCu:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(_DWORD *)(a1 + 128) |= 0x100u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              BOOL v9 = v37++ >= 9;
              if (v9)
              {
                uint64_t v38 = 0;
                goto LABEL_204;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v38 = 0;
        }
LABEL_204:
        BOOL v115 = v38 != 0;
        uint64_t v116 = 116;
        goto LABEL_266;
      case 0xDu:
        uint64_t v18 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addLightweightMembers:v18];
LABEL_69:
        if (!PBReaderPlaceMark() || (sub_1000F12B4((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_269;
        }
        goto LABEL_163;
      case 0xEu:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(_DWORD *)(a1 + 128) |= 0x40u;
        while (2)
        {
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 == -1 || v44 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 1;
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              BOOL v9 = v42++ >= 9;
              if (v9)
              {
                uint64_t v43 = 0;
                goto LABEL_208;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v43 = 0;
        }
LABEL_208:
        BOOL v115 = v43 != 0;
        uint64_t v116 = 114;
        goto LABEL_266;
      case 0xFu:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_DWORD *)(a1 + 128) |= 0x20u;
        while (2)
        {
          unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 == -1 || v49 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
            v48 |= (unint64_t)(v50 & 0x7F) << v46;
            if (v50 < 0)
            {
              v46 += 7;
              BOOL v9 = v47++ >= 9;
              if (v9)
              {
                uint64_t v48 = 0;
                goto LABEL_212;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v48 = 0;
        }
LABEL_212:
        BOOL v115 = v48 != 0;
        uint64_t v116 = 113;
        goto LABEL_266;
      case 0x10u:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        *(_DWORD *)(a1 + 128) |= 0x80000u;
        while (2)
        {
          unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v54 == -1 || v54 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
            v53 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v9 = v52++ >= 9;
              if (v9)
              {
                uint64_t v53 = 0;
                goto LABEL_216;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v53 = 0;
        }
LABEL_216:
        BOOL v115 = v53 != 0;
        uint64_t v116 = 127;
        goto LABEL_266;
      case 0x11u:
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 128) |= 1u;
        while (2)
        {
          unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 == -1 || v58 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
            v14 |= (unint64_t)(v59 & 0x7F) << v56;
            if (v59 < 0)
            {
              v56 += 7;
              BOOL v9 = v57++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_220;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_220:
        uint64_t v114 = 96;
        goto LABEL_253;
      case 0x12u:
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        *(_DWORD *)(a1 + 128) |= 0x10u;
        while (2)
        {
          unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 == -1 || v63 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 1;
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              BOOL v9 = v61++ >= 9;
              if (v9)
              {
                uint64_t v62 = 0;
                goto LABEL_224;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v62 = 0;
        }
LABEL_224:
        BOOL v115 = v62 != 0;
        uint64_t v116 = 112;
        goto LABEL_266;
      case 0x13u:
        uint64_t v18 = objc_alloc_init(CSDMessagingConversationParticipantAssociation);
        objc_storeStrong((id *)(a1 + 72), v18);
        if (!PBReaderPlaceMark() || (sub_10000A020((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_269;
        }
        goto LABEL_163;
      case 0x14u:
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0;
        *(_DWORD *)(a1 + 128) |= 0x1000u;
        while (2)
        {
          unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v68 == -1 || v68 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              BOOL v9 = v66++ >= 9;
              if (v9)
              {
                uint64_t v67 = 0;
                goto LABEL_228;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v67 = 0;
        }
LABEL_228:
        BOOL v115 = v67 != 0;
        uint64_t v116 = 120;
        goto LABEL_266;
      case 0x15u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
LABEL_118:
        char v70 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_267;
      case 0x16u:
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v73 = 0;
        *(_DWORD *)(a1 + 128) |= 0x10000u;
        while (2)
        {
          unint64_t v74 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v74 == -1 || v74 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v74);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74 + 1;
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if (v75 < 0)
            {
              v71 += 7;
              BOOL v9 = v72++ >= 9;
              if (v9)
              {
                uint64_t v73 = 0;
                goto LABEL_232;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v73 = 0;
        }
LABEL_232:
        BOOL v115 = v73 != 0;
        uint64_t v116 = 124;
        goto LABEL_266;
      case 0x17u:
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v78 = 0;
        *(_DWORD *)(a1 + 128) |= 0x4000u;
        while (2)
        {
          unint64_t v79 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v79 == -1 || v79 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v79);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79 + 1;
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if (v80 < 0)
            {
              v76 += 7;
              BOOL v9 = v77++ >= 9;
              if (v9)
              {
                uint64_t v78 = 0;
                goto LABEL_236;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v78 = 0;
        }
LABEL_236:
        BOOL v115 = v78 != 0;
        uint64_t v116 = 122;
        goto LABEL_266;
      case 0x18u:
        char v81 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = 0;
        *(_DWORD *)(a1 + 128) |= 0x800u;
        while (2)
        {
          unint64_t v84 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v84 == -1 || v84 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v85 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v84 + 1;
            v83 |= (unint64_t)(v85 & 0x7F) << v81;
            if (v85 < 0)
            {
              v81 += 7;
              BOOL v9 = v82++ >= 9;
              if (v9)
              {
                uint64_t v83 = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v83 = 0;
        }
LABEL_240:
        BOOL v115 = v83 != 0;
        uint64_t v116 = 119;
        goto LABEL_266;
      case 0x19u:
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v88 = 0;
        *(_DWORD *)(a1 + 128) |= 0x2000u;
        while (2)
        {
          unint64_t v89 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v89 == -1 || v89 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v89 + 1;
            v88 |= (unint64_t)(v90 & 0x7F) << v86;
            if (v90 < 0)
            {
              v86 += 7;
              BOOL v9 = v87++ >= 9;
              if (v9)
              {
                uint64_t v88 = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v88 = 0;
        }
LABEL_244:
        BOOL v115 = v88 != 0;
        uint64_t v116 = 121;
        goto LABEL_266;
      case 0x1Au:
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 128) |= 8u;
        while (2)
        {
          unint64_t v93 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v93 == -1 || v93 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v93);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v93 + 1;
            v14 |= (unint64_t)(v94 & 0x7F) << v91;
            if (v94 < 0)
            {
              v91 += 7;
              BOOL v9 = v92++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_248:
        uint64_t v114 = 108;
        goto LABEL_253;
      case 0x1Bu:
        char v95 = 0;
        unsigned int v96 = 0;
        uint64_t v14 = 0;
        *(_DWORD *)(a1 + 128) |= 4u;
        while (2)
        {
          unint64_t v97 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v97 == -1 || v97 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v98 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v97);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v97 + 1;
            v14 |= (unint64_t)(v98 & 0x7F) << v95;
            if (v98 < 0)
            {
              v95 += 7;
              BOOL v9 = v96++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_252:
        uint64_t v114 = 104;
LABEL_253:
        *(_DWORD *)(a1 + v114) = v14;
        goto LABEL_267;
      case 0x1Cu:
        uint64_t v18 = objc_alloc_init(CSDMessagingScreenShareContext);
        objc_storeStrong((id *)(a1 + 88), v18);
        if PBReaderPlaceMark() && (sub_10006DF20((uint64_t)v18, a2))
        {
LABEL_163:
          PBReaderRecallMark();

LABEL_267:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_269:

        return 0;
      case 0x1Du:
        char v99 = 0;
        unsigned int v100 = 0;
        uint64_t v101 = 0;
        *(_DWORD *)(a1 + 128) |= 0x8000u;
        while (2)
        {
          unint64_t v102 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v102 == -1 || v102 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v103 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v102);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v102 + 1;
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if (v103 < 0)
            {
              v99 += 7;
              BOOL v9 = v100++ >= 9;
              if (v9)
              {
                uint64_t v101 = 0;
                goto LABEL_257;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v101 = 0;
        }
LABEL_257:
        BOOL v115 = v101 != 0;
        uint64_t v116 = 123;
        goto LABEL_266;
      case 0x1Eu:
        char v104 = 0;
        unsigned int v105 = 0;
        uint64_t v106 = 0;
        *(_DWORD *)(a1 + 128) |= 0x20000u;
        while (2)
        {
          unint64_t v107 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v107 == -1 || v107 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v108 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v107);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v107 + 1;
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if (v108 < 0)
            {
              v104 += 7;
              BOOL v9 = v105++ >= 9;
              if (v9)
              {
                uint64_t v106 = 0;
                goto LABEL_261;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v106 = 0;
        }
LABEL_261:
        BOOL v115 = v106 != 0;
        uint64_t v116 = 125;
        goto LABEL_266;
      case 0x1Fu:
        char v109 = 0;
        unsigned int v110 = 0;
        uint64_t v111 = 0;
        *(_DWORD *)(a1 + 128) |= 0x200u;
        while (2)
        {
          unint64_t v112 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v112 == -1 || v112 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v113 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v112);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v112 + 1;
            v111 |= (unint64_t)(v113 & 0x7F) << v109;
            if (v113 < 0)
            {
              v109 += 7;
              BOOL v9 = v110++ >= 9;
              if (v9)
              {
                uint64_t v111 = 0;
                goto LABEL_265;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v111 = 0;
        }
LABEL_265:
        BOOL v115 = v111 != 0;
        uint64_t v116 = 117;
LABEL_266:
        *(unsigned char *)(a1 + v116) = v115;
        goto LABEL_267;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_267;
    }
  }
}

void sub_1000C551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C553C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C554C(uint64_t a1)
{
}

void sub_1000C5554(void *a1)
{
  id v6 = [(id)CUTWeakLinkClass() creationRequestForAsset];
  id v2 = objc_alloc_init((Class)CUTWeakLinkClass());
  [v2 setShouldMoveFile:1];
  [v6 addResourceWithType:1 fileURL:a1[4] options:v2];
  [v6 addResourceWithType:9 fileURL:a1[5] options:v2];
  uint64_t v3 = [v6 placeholderForCreatedAsset];
  uint64_t v4 = *(void *)(a1[6] + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000C5620(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) localIdentifier];
    int v9 = 138412546;
    int v10 = v6;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "saved photo with localIdentifier: %@ error: %@", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    char v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) localIdentifier];
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v8, v4);
  }
}

void sub_1000C5938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C5958(uint64_t a1)
{
  id v6 = [(id)CUTWeakLinkClass() creationRequestForAsset];
  id v2 = objc_alloc_init((Class)CUTWeakLinkClass());
  [v2 setShouldMoveFile:1];
  [v6 addResourceWithType:2 fileURL:*(void *)(a1 + 32) options:v2];
  uint64_t v3 = [v6 placeholderForCreatedAsset];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000C5A10(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) localIdentifier];
    int v9 = 138412546;
    int v10 = v6;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Saved video with localIdentifier: %@ error: %@", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    char v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) localIdentifier];
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v8, v4);
  }
}

void sub_1000C5D10(id a1, NSString *a2, NSDictionary *a3)
{
  id v4 = a2;
  unsigned int v5 = a3;
  id v6 = sub_1001B1AC8();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    char v8 = v4;
    __int16 v9 = 2112;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Logging power log event name=%@ dictionary=%@", (uint8_t *)&v7, 0x16u);
  }

  if (qword_10058C388 != -1) {
    dispatch_once(&qword_10058C388, &stru_100506EF8);
  }
  off_10058C380(36, v4, v5, 0);
}

void sub_1000C5E24(id a1)
{
  off_10058C380 = (uint64_t (*)(void, void, void, void))CUTWeakLinkSymbol();
}

unint64_t sub_1000C5E54(id a1)
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
}

void sub_1000C78A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C78C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [v3 service];
      int v7 = [v6 description];
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Called begin listening block:%@", (uint8_t *)&v9, 0xCu);
    }
    char v8 = [WeakRetained conversationManager];
    [v8 beginListeningOnService:v3];
  }
}

void sub_1000C7C74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) provider];
  [v2 reportAudioFinishedForCallWithUUID:*(void *)(a1 + 40)];
}

void sub_1000C96F4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a2;
  id v9 = a3;
  unint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472;
  unsigned int v17 = sub_1000C9838;
  uint64_t v18 = &unk_100506F90;
  int v10 = *(void **)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = v10;
  id v21 = v8;
  id v22 = v9;
  id v23 = *(id *)(a1 + 48);
  id v24 = *(id *)(a1 + 56);
  id v25 = *(id *)(a1 + 64);
  uint64_t v26 = a5;
  id v11 = v9;
  id v12 = v8;
  dispatch_block_t v13 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, QOS_CLASS_USER_INITIATED, 0, &v15);
  uint64_t v14 = objc_msgSend(*(id *)(a1 + 32), "queue", v15, v16, v17, v18, v19);
  dispatch_async(v14, v13);
}

void sub_1000C9838(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callDataSource];
  id v3 = [*(id *)(a1 + 40) callUUID];
  id v4 = [v2 _callWithUUID:v3];

  if (v4)
  {
    unsigned int v5 = +[NSMutableArray arrayWithArray:*(void *)(a1 + 48)];
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = 138412290;
      char v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "modernFTDestinations: %@", (uint8_t *)&v35, 0xCu);
    }

    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(NSObject **)(a1 + 56);
      int v35 = 138412290;
      char v36 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "gftOneToOneDestinations: %@", (uint8_t *)&v35, 0xCu);
    }

    if ([*(id *)(a1 + 56) count])
    {
      id v9 = [*(id *)(a1 + 32) _createJoinCallAction:*(void *)(a1 + 40) outgoingCallerID:*(void *)(a1 + 64) gftOneToOneDestinations:*(void *)(a1 + 56)];
      int v10 = +[NSDate now];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 72)];
      double v12 = v11 * 1000.0;

      if (v12 > 5000.0)
      {
        uint64_t v39 = TUCallTUStartCallActionDuration;
        dispatch_block_t v13 = +[NSNumber numberWithDouble:v12];
        uint64_t v14 = [v13 stringValue];
        unint64_t v15 = [v14 stringByAppendingString:@"ms duration"];
        char v40 = v15;
        uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];

        unsigned int v17 = sub_100008DCC();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v35 = 138412290;
          char v36 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "reportJoinDurationLongerThanThreasholdForCallUUID: %@", (uint8_t *)&v35, 0xCu);
        }

        uint64_t v18 = +[CSDReportingController sharedInstance];
        uint64_t v19 = [*(id *)(a1 + 40) callUUID];
        [v18 reportJoinDurationLongerThanThreasholdForCallUUID:v19 report:v16];
      }
      id v20 = sub_100008DCC();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(a1 + 56);
        int v35 = 138412546;
        char v36 = v9;
        __int16 v37 = 2112;
        uint64_t v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Created join call action: %@ for gftOneToOneDestinations: %@", (uint8_t *)&v35, 0x16u);
      }

      [*(id *)(a1 + 32) provider:*(void *)(a1 + 80) performJoinCallAction:v9 shouldUseIDSDemuxer:0];
      if (![v5 count])
      {
        id v22 = objc_alloc_init((Class)CXCallUpdate);
        [v22 setConversation:1];
        id v23 = *(void **)(a1 + 80);
        id v24 = [*(id *)(a1 + 40) callUUID];
        [v23 reportCallWithUUID:v24 updated:v22];
      }
    }
    if ([v5 count]) {
      [*(id *)(a1 + 32) initiateModernFTInviteForAction:*(void *)(a1 + 40) destinations:v5 excludedIMAVDestinations:*(void *)(a1 + 56) joinCallActionToFulfill:0];
    }
    if (![*(id *)(a1 + 56) count] && !-[NSObject count](v5, "count"))
    {
      id v25 = sub_100008DCC();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_1003AA610();
      }

      id v26 = objc_alloc_init((Class)CXCallFailureContext);
      [v26 setProviderErrorCode:*(void *)(a1 + 88)];
      unsigned int v27 = [*(id *)(a1 + 32) featureFlags];
      unsigned int v28 = [v27 ftAppDeletionEnabled];

      if (v28
        && !+[CSDFaceTimeInstallationNotifier isFaceTimeInstalled])
      {
        [v26 setFailureReason:23];
      }
      else
      {
        [v26 setFailureReason:11];
        if ((TUIsIDSAvailableForFaceTime() & 1) == 0)
        {
          [v26 setFailureReason:22];
          unint64_t v29 = sub_100008DCC();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v35) = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "TUIsIDSAvailableForFaceTime returns false for start call action", (uint8_t *)&v35, 2u);
          }
        }
      }
      char v30 = [*(id *)(a1 + 32) provider];
      char v31 = [*(id *)(a1 + 40) callUUID];
      unsigned int v32 = +[NSDate now];
      [v30 reportCallWithUUID:v31 failedAtDate:v32 withContext:v26];

      [*(id *)(a1 + 40) fail];
    }
    uint64_t v33 = *(void **)(a1 + 32);
    unint64_t v34 = [*(id *)(a1 + 40) callUUID];
    [v33 _processDelayedActionList:v34 provider:*(void *)(a1 + 80)];
  }
  else
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v35) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Skipping to invite remote destinations since we don't have a call tracking any longer", (uint8_t *)&v35, 2u);
    }
  }
}

void sub_1000C9F00(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v38 = v5;
    __int16 v39 = 1024;
    int v40 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Invited push tokens via IDS: %@ wasCanceled: %d", buf, 0x12u);
  }

  int v7 = [*(id *)(a1 + 32) callDataSource];
  id v8 = (id *)(a1 + 40);
  id v9 = [*(id *)(a1 + 40) callUUID];
  int v10 = [v7 _callWithUUID:v9];

  if (v10)
  {
    if (a3)
    {
      double v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not sending IMAV invites because IDS session was canceled", buf, 2u);
      }
    }
    else
    {
      double v11 = +[NSMutableArray arrayWithArray:v5];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v14 = *(id *)(a1 + 48);
      id v15 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v33;
        do
        {
          uint64_t v18 = 0;
          do
          {
            if (*(void *)v33 != v17) {
              objc_enumerationMutation(v14);
            }
            uint64_t v19 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v18);
            id v31 = 0;
            id v20 = [v19 _stripPotentialTokenURIWithToken:&v31];
            id v21 = v31;
            [v11 addObject:v21];

            uint64_t v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          id v16 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v16);
      }

      id v22 = [*(id *)(a1 + 32) faceTimeIMAVProviderDelegate];
      uint64_t v23 = *(void *)(a1 + 40);
      id v24 = [v11 copy];
      [v22 inviteIMAVPeersWithAction:v23 tokensToExclude:v24 joinCallActionToFulfill:*(void *)(a1 + 56)];

      id v25 = [*(id *)(a1 + 32) faceTimeIDSProviderDelegate];
      id v26 = [*(id *)(a1 + 40) callUUID];
      if ([v25 isManagingCallWithUUID:v26])
      {
      }
      else
      {
        unsigned int v27 = [*(id *)(a1 + 32) faceTimeIMAVProviderDelegate];
        unsigned int v28 = [*(id *)(a1 + 40) callUUID];
        unsigned __int8 v29 = [v27 isManagingCallWithUUID:v28];

        if ((v29 & 1) == 0)
        {
          char v30 = sub_100008DCC();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_1003AA6D0(v8);
          }

          [*v8 fail];
        }
      }
    }
  }
  else
  {
    double v12 = sub_100008DCC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1003AA644((id *)(a1 + 40));
    }

    double v11 = [*(id *)(a1 + 32) faceTimeIDSProviderDelegate];
    dispatch_block_t v13 = [*(id *)(a1 + 40) callUUID];
    [v11 endCallWithUUIDAsLocalHangup:v13];
  }
}

void sub_1000CAC9C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000CADE0;
  block[3] = &unk_100507008;
  double v12 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v19 = v12;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  id v23 = *(id *)(a1 + 48);
  uint64_t v24 = a5;
  id v13 = v11;
  id v14 = v10;
  id v15 = v9;
  dispatch_block_t v16 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, QOS_CLASS_USER_INITIATED, 0, block);
  uint64_t v17 = [*(id *)(a1 + 32) queue];
  dispatch_async(v17, v16);
}

void sub_1000CADE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callDataSource];
  id v3 = [*(id *)(a1 + 40) callUUID];
  id v4 = [v2 _callWithUUID:v3];

  id v5 = sub_100008DCC();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v7 = *(void **)(a1 + 48);
      int v42 = 138412290;
      id v43 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "modernFTDestinations: %@", (uint8_t *)&v42, 0xCu);
    }

    id v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 56);
      int v42 = 138412290;
      id v43 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "gftOneToOneDestinations: %@", (uint8_t *)&v42, 0xCu);
    }

    id v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(void **)(a1 + 64);
      int v42 = 138412290;
      id v43 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "screenSharingRemoteControlDestinations: %@", (uint8_t *)&v42, 0xCu);
    }

    double v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 48);
    id v14 = [*(id *)(a1 + 32) featureFlags];
    if ([v14 usesModernScreenSharingFromMessages])
    {
      id v15 = [*(id *)(a1 + 40) screenShareRequestType];

      if (v15)
      {
        id v5 = *(id *)(a1 + 64);

        id v16 = [*(id *)(a1 + 64) count];
        if (v16 < [*(id *)(a1 + 56) count] || objc_msgSend(*(id *)(a1 + 48), "count")) {
          [*(id *)(a1 + 40) setShouldSendLegacyScreenSharingInvite:1];
        }
        id v13 = &__NSArray0__struct;
LABEL_18:
        if ([v5 count])
        {
          uint64_t v17 = +[NSSet setWithArray:v5];
          [*(id *)(a1 + 40) setRemotePushTokens:v17];

          uint64_t v18 = [*(id *)(a1 + 32) faceTimeConversationProviderDelegate];
          [v18 provider:*(void *)(a1 + 72) performJoinCallAction:*(void *)(a1 + 40)];
        }
        if ([v13 count])
        {
          id v19 = objc_alloc((Class)CXStartCallAction);
          id v20 = [*(id *)(a1 + 40) callUUID];
          id v21 = [*(id *)(a1 + 40) remoteMembers];
          id v22 = [v21 anyObject];
          id v23 = [v19 initWithCallUUID:v20 handle:v22];

          objc_msgSend(v23, "setVideo:", objc_msgSend(*(id *)(a1 + 40), "isVideo"));
          uint64_t v24 = sub_100008DCC();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = *(void *)(a1 + 48);
            int v42 = 138412546;
            id v43 = v23;
            __int16 v44 = 2112;
            uint64_t v45 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Created start call action: %@ for modernFTDestinations: %@", (uint8_t *)&v42, 0x16u);
          }

          id v26 = *(void **)(a1 + 32);
          if ([v5 count]) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = *(void *)(a1 + 40);
          }
          [v26 initiateModernFTInviteForAction:v23 destinations:v13 excludedIMAVDestinations:v5 joinCallActionToFulfill:v27];
          if (![v5 count])
          {
            id v28 = objc_alloc_init((Class)CXCallUpdate);
            [v28 setConversation:0];
            unsigned __int8 v29 = *(void **)(a1 + 72);
            char v30 = [*(id *)(a1 + 40) callUUID];
            [v29 reportCallWithUUID:v30 updated:v28];
          }
        }
        if (-[NSObject count](v5, "count") || [v13 count]) {
          goto LABEL_42;
        }
        id v31 = sub_100008DCC();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_1003AA7F8();
        }

        id v32 = objc_alloc_init((Class)CXCallFailureContext);
        [v32 setProviderErrorCode:*(void *)(a1 + 80)];
        long long v33 = [*(id *)(a1 + 32) featureFlags];
        unsigned int v34 = [v33 ftAppDeletionEnabled];

        if (v34
          && !+[CSDFaceTimeInstallationNotifier isFaceTimeInstalled])
        {
          uint64_t v36 = 23;
        }
        else
        {
          [v32 setFailureReason:11];
          if (TUIsIDSAvailableForFaceTime())
          {
LABEL_41:
            __int16 v37 = [*(id *)(a1 + 32) provider];
            id v38 = [*(id *)(a1 + 40) callUUID];
            __int16 v39 = +[NSDate now];
            [v37 reportCallWithUUID:v38 failedAtDate:v39 withContext:v32];

            [*(id *)(a1 + 40) fail];
LABEL_42:
            int v40 = *(void **)(a1 + 32);
            char v41 = [*(id *)(a1 + 40) callUUID];
            [v40 _processDelayedActionList:v41 provider:*(void *)(a1 + 72)];

            goto LABEL_43;
          }
          long long v35 = sub_100008DCC();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v42) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "TUIsIDSAvailableForFaceTime returns false for join call action", (uint8_t *)&v42, 2u);
          }

          uint64_t v36 = 22;
        }
        [v32 setFailureReason:v36];
        goto LABEL_41;
      }
    }
    else
    {
    }
    id v5 = v12;
    goto LABEL_18;
  }
  if (v6)
  {
    LOWORD(v42) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Skipping to invite remote destinations since we don't have a call tracking any longer", (uint8_t *)&v42, 2u);
  }
LABEL_43:
}

BOOL sub_1000D04A4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = [v3 length]
    && [v4 length]
    && (unint64_t)[v3 compare:v4 options:64] < 2;

  return v5;
}

void sub_1000D1B78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) assertion];

  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) bundleIdentifier];
      int v6 = 138412290;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalidating process assertion for bundle identifier %@ from completion handler", (uint8_t *)&v6, 0xCu);
    }
    BOOL v5 = [*(id *)(a1 + 32) assertion];
    [v5 invalidate];
  }
}

void sub_1000D1C68(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 == 4) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1000D204C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v13 = PBReaderReadString();
        id v14 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v13;

        goto LABEL_32;
      case 2u:
        id v16 = objc_alloc_init(CSDMessagingConversationActivity);
        objc_storeStrong((id *)(a1 + 16), v16);
        if (!PBReaderPlaceMark() || (sub_10013C828((uint64_t)v16, a2) & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_29;
      case 3u:
        *(unsigned char *)(a1 + 40) |= 1u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v18 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v18 = 0;
        }
        *(void *)(a1 + 8) = v18;
        goto LABEL_32;
      case 4u:
        id v16 = objc_alloc_init(CSDMessagingConversationActivitySessionLocallyPersistedMetadata);
        objc_storeStrong((id *)(a1 + 32), v16);
        if PBReaderPlaceMark() && (sub_10006E7E8((uint64_t)v16, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_32:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_34:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_32;
    }
  }
}

BOOL sub_1000D2BD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 32;
        goto LABEL_26;
      case 2u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
        goto LABEL_26;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
        goto LABEL_26;
      case 4u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
        goto LABEL_26;
      case 5u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 40;
        goto LABEL_26;
      case 6u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 48;
LABEL_26:
        id v14 = *(CSDMessagingPersonNameComponents **)(a1 + v13);
        *(void *)(a1 + v13) = v12;
        goto LABEL_27;
      case 7u:
        id v14 = objc_alloc_init(CSDMessagingPersonNameComponents);
        objc_storeStrong((id *)(a1 + 56), v14);
        if PBReaderPlaceMark() && (sub_1000D2BD8(v14, a2))
        {
          PBReaderRecallMark();
LABEL_27:

LABEL_28:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_28;
    }
  }
}

uint64_t sub_1000D3A2C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      unint64_t v17 = objc_alloc_init(CSDMessagingConversationLink);
      [(id)a1 addLink:v17];
      if (!PBReaderPlaceMark() || (sub_10000D6F0((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_32;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D47C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v13);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v15 - 184));
  _Unwind_Resume(a1);
}

void sub_1000D4814(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 addDelegate:*(void *)(a1 + 40) queue:*(void *)(a1 + 48)];
}

void sub_1000D4868(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    char v4 = [WeakRetained springBoardProcessObserver];
    unsigned int v5 = [v4 processIdentifiersForBundleIdentifier:TUBundleIdentifierSpringBoardApplication];

    unint64_t v6 = +[NSNumber numberWithInt:a2];
    unsigned int v7 = [v5 containsObject:v6];

    if (v7)
    {
      char v8 = +[NSNumber numberWithInt:a2];
      [v9 handleSpringBoardPIDChanged:v8];
    }
    id WeakRetained = v9;
  }
}

void sub_1000D4944(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    char v4 = [v6 allKeys];
    unsigned int v5 = [v4 firstObject];
    [WeakRetained handleSpringBoardPIDChanged:v5];
  }
}

void sub_1000D49D4(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v7 = [WeakRetained inCallServiceProcessObserver];
    char v8 = [v7 processIdentifiersForBundleIdentifier:TUBundleIdentifierInCallServiceApplication];

    if ((unint64_t)[v8 count] >= 2)
    {
      id v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412290;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] InCallService has multiple process identifiers: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    int v10 = +[NSNumber numberWithInt:a2];
    unsigned int v11 = [v8 containsObject:v10];

    if (v11)
    {
      [v6 setInCallServiceProcessState:a3];
      char v12 = sub_100008DCC();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 134217984;
        uint64_t v14 = a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "InCallService process state is now %ld", (uint8_t *)&v13, 0xCu);
      }

      [v6 updateResolvedDescriptor];
    }
  }
}

void sub_1000D4B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ((unint64_t)[v3 count] >= 2)
    {
      unsigned int v5 = sub_100008DCC();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        id v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] InCallService has multiple process identifiers: %@", (uint8_t *)&v10, 0xCu);
      }
    }
    id v6 = [v3 allValues];
    unsigned int v7 = [v6 firstObject];
    objc_msgSend(WeakRetained, "setInCallServiceProcessState:", objc_msgSend(v7, "integerValue"));

    char v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [WeakRetained inCallServiceProcessState];
      int v10 = 134217984;
      id v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initialized inCallServiceProcessState to %ld", (uint8_t *)&v10, 0xCu);
    }

    [WeakRetained updateResolvedDescriptor];
  }
}

id sub_1000D4CE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

void sub_1000D4E50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) springBoardPID];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) springBoardPID];
    char v4 = *(void **)(a1 + 40);

    if (v3 != v4)
    {
      unsigned int v5 = sub_100008DCC();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [*(id *)(a1 + 32) springBoardPID];
        uint64_t v7 = *(void *)(a1 + 40);
        int v10 = 138412546;
        id v11 = v6;
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SpringBoard process has changed PID from %@ to %@", (uint8_t *)&v10, 0x16u);
      }
      [*(id *)(a1 + 32) setSpringBoardPID:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) updateResolvedDescriptor];
    }
  }
  else
  {
    char v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 40);
      int v10 = 138412290;
      id v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Started tracking SpringBoard process with PID %@", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(a1 + 32) setSpringBoardPID:*(void *)(a1 + 40)];
  }
}

void sub_1000D55BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000D5604(void *a1, void *a2)
{
  id v3 = a2;
  char v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [v3 UUID];
    id v6 = [v3 activitySessions];
    int v29 = 138412546;
    char v30 = v5;
    __int16 v31 = 2048;
    id v32 = [v6 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "conversation: %@ activitySessions.count: %lu", (uint8_t *)&v29, 0x16u);
  }
  if (!v3) {
    goto LABEL_32;
  }
  uint64_t v7 = [v3 provider];
  unsigned __int8 v8 = [v7 isDefaultProvider];

  if ((v8 & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    goto LABEL_32;
  }
  id v9 = [v3 avMode];
  if (v9 == (id)2)
  {
    uint64_t v11 = *(void *)(a1[5] + 8);
    goto LABEL_12;
  }
  if (v9 == (id)1)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
    goto LABEL_15;
  }
  if (!v9)
  {
    unsigned int v10 = [v3 isContinuitySession];
    uint64_t v11 = *(void *)(a1[5] + 8);
    if (!v10)
    {
      uint64_t v12 = 2;
LABEL_13:
      *(void *)(v11 + 24) = v12;
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v12 = 1;
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v13 = [v3 activitySessions];
  if (![v13 count])
  {
LABEL_31:

    goto LABEL_32;
  }
  id v14 = [v3 state];

  if (v14)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = 2;
    uint64_t v15 = [v3 activitySessions];
    uint64_t v13 = [v15 anyObject];

    if (v13 && [v13 state] == (id)1)
    {
      char v16 = [v13 activity];
      unint64_t v17 = [v16 metadata];
      uint64_t v18 = [v17 context];

      if (v18)
      {
        id v19 = [v18 typedIdentifier];
        unsigned int v20 = [v19 isEqualToString:TUConversationActivityContextIdentifierScreenSharing];

        if (v20)
        {
          unsigned int v21 = [v13 isLocallyInitiated];
          uint64_t v22 = 3;
          if (!v21) {
            uint64_t v22 = 4;
          }
          *(void *)(*(void *)(a1[6] + 8) + 24) = v22;
        }
        else
        {
          id v23 = [v18 typedIdentifier];
          unsigned int v24 = [v23 isEqualToString:TUConversationActivityContextIdentifierWatchTogether];

          if (v24)
          {
            uint64_t v25 = *(void *)(a1[6] + 8);
            uint64_t v26 = 2;
          }
          else
          {
            uint64_t v27 = [v18 typedIdentifier];
            unsigned int v28 = [v27 isEqualToString:TUConversationActivityContextIdentifierListenTogether];

            uint64_t v25 = *(void *)(a1[6] + 8);
            if (v28) {
              uint64_t v26 = 1;
            }
            else {
              uint64_t v26 = 5;
            }
          }
          *(void *)(v25 + 24) = v26;
        }
      }
    }
    goto LABEL_31;
  }
LABEL_32:
}

void sub_1000D5904(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 32) callCenterObserver];
  id v3 = [v4 activeConversationForCall:*(void *)(a1 + 40)];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
}

uint64_t sub_1000D597C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D5D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D5D3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D5D4C(uint64_t a1)
{
}

void sub_1000D5D54(uint64_t a1)
{
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v1 = [*(id *)(a1 + 32) callCenterObserver];
  uint64_t v2 = [v1 callContainer];
  id v3 = [v2 currentAudioAndVideoCalls];

  id obj = v3;
  id v63 = [v3 countByEnumeratingWithState:&v64 objects:v82 count:16];
  id v4 = 0;
  unsigned int v5 = 0;
  id v6 = 0;
  uint64_t v7 = 0;
  unsigned __int8 v8 = 0;
  id v9 = 0;
  if (v63)
  {
    uint64_t v62 = *(void *)v65;
    do
    {
      for (i = 0; i != v63; i = (char *)i + 1)
      {
        uint64_t v11 = v6;
        uint64_t v12 = v5;
        uint64_t v13 = v4;
        id v14 = v9;
        uint64_t v15 = v8;
        if (*(void *)v65 != v62) {
          objc_enumerationMutation(obj);
        }
        char v16 = *(void **)(*((void *)&v64 + 1) + 8 * i);
        unint64_t v17 = [v16 provider];
        unsigned int v18 = [v17 supportsCurrentPlatform];

        if (v18)
        {
          unsigned __int8 v8 = v15;
          if ([v16 status] == 3)
          {
            id v9 = v14;
            if (!v14 || ([v16 callDuration], double v20 = v19, objc_msgSend(v14, "callDuration"), v20 > v21))
            {
              id v22 = v16;

              id v9 = v22;
            }
          }
          else
          {
            id v9 = v14;
          }
          id v4 = v13;
          unsigned int v5 = v12;
          if ([v16 status] == 1)
          {
            id v6 = v11;
            if (([v16 isScreening] & 1) == 0)
            {
              if (!v8 || ([v16 callDuration], double v24 = v23, objc_msgSend(v8, "callDuration"), v24 > v25))
              {
                id v26 = v16;

                unsigned __int8 v8 = v26;
              }
            }
          }
          else
          {
            id v6 = v11;
          }
          if ([v16 status] == 2)
          {
            if (!v4 || ([v16 callDuration], double v28 = v27, objc_msgSend(v4, "callDuration"), v28 > v29))
            {
              id v30 = v16;

              id v4 = v30;
            }
          }
          if ([v16 status] == 5)
          {
            if (!v5 || ([v16 callDuration], double v32 = v31, objc_msgSend(v5, "callDuration"), v32 > v33))
            {
              id v34 = v16;

              unsigned int v5 = v34;
            }
          }
          if ([v16 status] == 4)
          {
            if (!v6 || ([v16 callDuration], double v36 = v35, objc_msgSend(v6, "callDuration"), v36 > v37))
            {
              id v38 = v16;

              id v6 = v38;
            }
          }
          if ([v16 status] == 1)
          {
            if ([v16 isScreening])
            {
              if ([v16 screeningAnnouncementHasFinished])
              {
                if (!v7 || ([v16 callDuration], double v40 = v39, objc_msgSend(v7, "callDuration"), v40 > v41))
                {
                  id v42 = v16;

                  uint64_t v7 = v42;
                }
              }
            }
          }
        }
        else
        {
          unsigned __int8 v8 = v15;
          id v9 = v14;
          id v4 = v13;
          unsigned int v5 = v12;
          id v6 = v11;
        }
      }
      id v63 = [obj countByEnumeratingWithState:&v64 objects:v82 count:16];
    }
    while (v63);
  }
  id v43 = v7;

  __int16 v44 = [*(id *)(a1 + 32) callCenterObserver];
  [v44 callContainer];
  uint64_t v45 = v6;
  char v46 = v5;
  unsigned int v47 = v4;
  uint64_t v48 = v9;
  v50 = unint64_t v49 = v8;
  char v51 = [v50 frontmostBargeCall];

  unsigned int v52 = v49;
  uint64_t v53 = v48;
  unint64_t v54 = v47;
  char v55 = v46;
  char v56 = v45;

  unsigned int v57 = sub_100008DCC();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110656;
    BOOL v69 = v56 != 0;
    __int16 v70 = 1024;
    BOOL v71 = v53 != 0;
    __int16 v72 = 1024;
    BOOL v73 = v52 != 0;
    __int16 v74 = 1024;
    BOOL v75 = v54 != 0;
    __int16 v76 = 1024;
    BOOL v77 = v55 != 0;
    __int16 v78 = 1024;
    BOOL v79 = v51 != 0;
    __int16 v80 = 1024;
    BOOL v81 = v43 != 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "ringingCall %d sendingCall %d activeCall %d heldCall %d disconnectingCall %d bargeCall %d screeingCall %d", buf, 0x2Cu);
  }

  if (v51) {
    unint64_t v58 = v51;
  }
  else {
    unint64_t v58 = v43;
  }
  if (v55) {
    unint64_t v58 = v55;
  }
  if (v54) {
    unint64_t v58 = v54;
  }
  if (v52) {
    unint64_t v58 = v52;
  }
  if (v53) {
    unint64_t v58 = v53;
  }
  if (v56) {
    char v59 = v56;
  }
  else {
    char v59 = v58;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v59);
}

void sub_1000D647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D6494(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "callCenter", 0);
  id v3 = [v2 conversationManager];
  id v4 = [v3 activeConversations];

  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v9 state] && !objc_msgSend(v9, "avMode"))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v9);
          goto LABEL_12;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  unsigned int v10 = sub_100008DCC();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) groupUUID];
    *(_DWORD *)long long buf = 138412290;
    unint64_t v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "resolvedAVLessConversation groupUUID: %@", buf, 0xCu);
  }
}

void sub_1000D679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D67B4(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) callCenter];
  uint64_t v2 = [v6 conversationManager];
  uint64_t v3 = [v2 handoffEligibleConversation];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1000D6E68(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldRegisterForPillDatasource:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(a1 + 32) setResolvedCallForActiveDescriptor:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 updateResolvedDescriptor];
}

id sub_1000D6FF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D7140(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D728C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D73D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D7524(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D7670(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

id sub_1000D77BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateResolvedDescriptor];
}

void sub_1000D816C(uint64_t a1)
{
  uint64_t v1 = [[CSDRelayConferenceInterface alloc] initWithSerialQueue:*(void *)(a1 + 32)];
  uint64_t v2 = (void *)qword_10058C390;
  qword_10058C390 = (uint64_t)v1;
}

CSDAVConference *__cdecl sub_1000D82C8(id a1)
{
  uint64_t v1 = objc_alloc_init(CSDAVConference);

  return v1;
}

void sub_1000D83A4(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"CSDRelayConferenceMutedChangedNotification" object:0];
}

void sub_1000D9908(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) conferenceConnections];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = (void **)(a1 + 40);
  unsigned int v6 = [v3 containsObject:v5];

  if (v6)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AA958(v2, v4, v7);
    }

    id v8 = *v2;
    id v9 = [*v4 conference];
    [v8 _cleanUpAllConferenceConnectionsForConference:v9 withError:0];
  }
}

void sub_1000DB0D8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) conferencesAwaitingConnectionClose];
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Timed out waiting for conference %@ to close connection after receiving end", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(a1 + 32) _postDidCloseNotificationForConferenceIfNecessary:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1000DCD18(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 96) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_74;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_76;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v39 = 88;
        goto LABEL_93;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 96) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v39 = 76;
        goto LABEL_93;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 96) |= 2u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v39 = 72;
        goto LABEL_93;
      case 4u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 80;
        goto LABEL_44;
      case 5u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 24;
        goto LABEL_44;
      case 6u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 48;
LABEL_44:
        double v28 = *(void **)(a1 + v27);
        *(void *)(a1 + v27) = v26;

        goto LABEL_94;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 96) |= 0x10u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                uint64_t v31 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v31 = 0;
        }
LABEL_88:
        *(unsigned char *)(a1 + 92) = v31 != 0;
        goto LABEL_94;
      case 8u:
        id v34 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 32), v34);
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v34, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_72;
      case 9u:
        id v34 = objc_alloc_init(CSDMessagingConversationMember);
        objc_storeStrong((id *)(a1 + 40), v34);
        goto LABEL_57;
      case 0xAu:
        id v34 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addRemoteMembers:v34];
LABEL_57:
        if (!PBReaderPlaceMark() || (sub_1000F12B4((uint64_t)v34, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_72;
      case 0xBu:
        id v34 = objc_alloc_init(CSDMessagingConversationParticipant);
        [(id)a1 addActiveParticipants:v34];
        if (!PBReaderPlaceMark() || (sub_10001A534((uint64_t)v34, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_72;
      case 0xCu:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 96) |= 1u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_92:
        uint64_t v39 = 16;
LABEL_93:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_94;
      case 0xDu:
        id v34 = objc_alloc_init(CSDMessagingConversationReport);
        objc_storeStrong((id *)(a1 + 64), v34);
        if PBReaderPlaceMark() && (sub_1000F5884((uint64_t)v34, a2))
        {
LABEL_72:
          PBReaderRecallMark();

LABEL_94:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_96:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_94;
    }
  }
}

id *sub_1000DE8A4(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] sendIDSAction:@"CSDPinExchangeActionRequestPIN" toDevice:result[5]];
  }
  return result;
}

void sub_1000DEEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DEEF4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (a2)
    {
      id v7 = objc_alloc_init((Class)NSNumberFormatter);
      char v8 = [WeakRetained pendingCodesToDevicesForApproval];
      BOOL v9 = [*(id *)(a1 + 32) uniqueID];
      int v10 = [v8 _numberForKey:v9];

      uint64_t v11 = [v7 numberFromString:v5];
      if (v11 && v10 && [v10 isEqualToNumber:v11])
      {
        char v12 = sub_100008DCC();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v24) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "The entered PIN code is correct", (uint8_t *)&v24, 2u);
        }

        unsigned int v13 = [WeakRetained pinExchangeDelegate];
        [v13 enrollDevice:*(void *)(a1 + 32) forSenderIdentityUUID:*(void *)(a1 + 40)];

        uint64_t v14 = sub_100008DCC();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          int v24 = 138412290;
          uint64_t v25 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Activated Thumper for requesting device %@", (uint8_t *)&v24, 0xCu);
        }

        uint64_t v16 = 1;
      }
      else
      {
        char v18 = sub_100008DCC();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v24) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[WARN] The entered PIN code is incorrect, could not register device.", (uint8_t *)&v24, 2u);
        }

        [WeakRetained displayPinErrorNotification];
        uint64_t v16 = 0;
      }
    }
    else
    {
      unint64_t v17 = sub_100008DCC();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "The user entered no code... or the code entered was not an NSString", (uint8_t *)&v24, 2u);
      }

      id v7 = [WeakRetained pinExchangeDelegate];
      [v7 unenrollDevice:*(void *)(a1 + 32)];
      uint64_t v16 = 0;
    }

    [WeakRetained sendApprovalResponseToDevice:*(void *)(a1 + 32) enteredCorrectly:v16 wasCancelled:a2 ^ 1u];
    unsigned int v19 = [WeakRetained pendingCodesToDevicesForApproval];
    unint64_t v20 = [*(id *)(a1 + 32) uniqueID];
    char v21 = [v19 objectForKey:v20];

    if (v21)
    {
      char v22 = [WeakRetained pendingCodesToDevicesForApproval];
      unsigned int v23 = [*(id *)(a1 + 32) uniqueID];
      [v22 removeObjectForKey:v23];

      [WeakRetained setPendingCodesToDevicesForApproval:0];
    }
  }
}

void sub_1000DFB14(uint64_t a1)
{
  [*(id *)(a1 + 32) setUsesNotificationCenter:0];
  [*(id *)(a1 + 32) setRepresentedApplicationBundle:TUBundleIdentifierTelephonyUtilitiesFramework];
  id v2 = +[IMUserNotificationCenter sharedInstance];
  [v2 addUserNotification:*(void *)(a1 + 32) listener:0 completionHandler:0];
}

id *sub_1000E0740(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] cancelPinRequests];
  }
  return result;
}

uint64_t sub_1000E0D38(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 56) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_50;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        uint64_t v32 = 52;
        goto LABEL_61;
      case 2u:
        char v18 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v19 = 40;
        goto LABEL_37;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_56:
        *(void *)(a1 + 8) = v22;
        goto LABEL_62;
      case 4u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 32;
        goto LABEL_41;
      case 5u:
        char v18 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v19 = 16;
LABEL_37:
        objc_storeStrong((id *)(a1 + v19), v18);
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v18, a2))
        {
          PBReaderRecallMark();

LABEL_62:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 6u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 24;
LABEL_41:
        uint64_t v27 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_62;
      case 7u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v14 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              BOOL v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_60:
        uint64_t v32 = 48;
LABEL_61:
        *(_DWORD *)(a1 + v32) = v14;
        goto LABEL_62;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_62;
    }
  }
}

void sub_1000E1ACC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_10058C3A0;
  qword_10058C3A0 = (uint64_t)v1;
}

void sub_1000E1F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E1FB4(uint64_t a1)
{
  id v2 = +[TUCallCapabilitiesXPCClient callCapabilitiesClientXPCInterface];
  unsigned int v3 = [*(id *)(a1 + 32) clientManager];
  [v3 setRemoteObjectInterface:v2];

  char v4 = +[TUCallCapabilitiesXPCClient callCapabilitiesServerXPCInterface];
  unsigned int v5 = [*(id *)(a1 + 32) clientManager];
  [v5 setExportedInterface:v4];

  unint64_t v6 = *(void **)(a1 + 32);
  unint64_t v7 = [v6 clientManager];
  [v7 setExportedObject:v6];

  char v8 = [*(id *)(a1 + 32) clientManager];
  [v8 setInterruptionHandler:&stru_1005072F8];

  BOOL v9 = [*(id *)(a1 + 32) clientManager];
  [v9 setInvalidationHandler:&stru_100507318];

  int v10 = [*(id *)(a1 + 32) clientManager];
  uint64_t v11 = [v10 asynchronousExportedObjectProxy];
  +[TUCallCapabilitiesXPCClient setAsynchronousServer:v11];

  id v13 = [*(id *)(a1 + 32) clientManager];
  char v12 = [v13 synchronousExportedObjectProxy];
  +[TUCallCapabilitiesXPCClient setSynchronousServer:v12];
}

void sub_1000E2118(id a1, CSDClient *a2)
{
  id v2 = a2;
  unsigned int v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    unsigned int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000E21C4(id a1, CSDClient *a2)
{
  id v2 = a2;
  unsigned int v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    unsigned int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000E2270(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    unint64_t v7 = [WeakRetained processObserver];
    uint64_t v8 = TUBundleIdentifierInCallServiceApplication;
    BOOL v9 = [v7 processIdentifiersForBundleIdentifier:TUBundleIdentifierInCallServiceApplication];

    if ((unint64_t)[v9 count] >= 2)
    {
      int v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v32 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[WARN] InCallService has multiple process identifiers: %@", buf, 0xCu);
      }
    }
    uint64_t v11 = +[NSNumber numberWithInt:a2];
    unsigned int v12 = [v9 containsObject:v11];

    if (v12)
    {
      id v13 = sub_100008DCC();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v32 = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "InCallService has changed process state to %ld", buf, 0xCu);
      }

      if (a3 == (void *)2)
      {
        uint64_t v25 = v9;
        uint64_t v14 = sub_100008DCC();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "InCallService has been suspended; invalidating its XPC client connections.",
            buf,
            2u);
        }

        unint64_t v15 = [v6 clientManager];
        char v16 = [v15 clients];

        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v17 = v16;
        id v18 = [v17 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v18)
        {
          id v19 = v18;
          uint64_t v20 = *(void *)v27;
          do
          {
            unsigned int v21 = 0;
            do
            {
              if (*(void *)v27 != v20) {
                objc_enumerationMutation(v17);
              }
              uint64_t v22 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v21);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unint64_t v23 = [v22 processBundleIdentifier];
                unsigned int v24 = [v23 isEqualToString:v8];

                if (v24) {
                  [v22 invalidate];
                }
              }
              unsigned int v21 = (char *)v21 + 1;
            }
            while (v19 != v21);
            id v19 = [v17 countByEnumeratingWithState:&v26 objects:v30 count:16];
          }
          while (v19);
        }

        BOOL v9 = v25;
      }
    }
  }
}

void sub_1000E2558(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)TUCallCapabilitiesState);
  [*(id *)(a1 + 32) setState:v2];

  [*(id *)(a1 + 32) _initializePairedHostDeviceState];
  [*(id *)(a1 + 32) _updateState];
  unsigned int v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = [*(id *)(a1 + 32) state];
    int v7 = 138412290;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Initialized capability state: %@", (uint8_t *)&v7, 0xCu);
  }
  unsigned int v5 = [*(id *)(a1 + 32) thumperCapabilitiesMonitor];
  [v5 updateState];

  unint64_t v6 = [*(id *)(a1 + 32) clientManager];
  [v6 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.callcapabilities"];
}

void sub_1000E275C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) state];
  int v4 = [v3 debugDescription];
  [v2 appendFormat:@"State: %@\n", v4];

  unsigned int v5 = *(void **)(a1 + 32);
  unint64_t v6 = [*(id *)(a1 + 40) telephonyCallCapabilities];
  int v7 = [v6 debugDescription];
  [v5 appendFormat:@"Telephony capabilities: %@\n", v7];

  uint64_t v8 = *(void **)(a1 + 32);
  BOOL v9 = [*(id *)(a1 + 40) accountsController];
  int v10 = [v9 debugDescription];
  [v8 appendFormat:@"Accounts controller: %@\n", v10];

  uint64_t v11 = *(void **)(a1 + 32);
  id v13 = [*(id *)(a1 + 40) pairedHostDeviceState];
  unsigned int v12 = [v13 debugDescription];
  [v11 appendFormat:@"Paired Host Device State: %@\n", v12];
}

void sub_1000E2AD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  id v9 = a3;
  int v7 = v6(v5, a2);
  uint64_t v8 = 40;
  if (v7) {
    uint64_t v8 = 32;
  }
  [v9 capabilityStateUpdated:*(void *)(a1 + v8)];
}

void sub_1000E2C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2C80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E2C90(uint64_t a1)
{
}

void sub_1000E2C98(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) state];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000E2D98(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isWatchDevice];
  if (result)
  {
    uint64_t v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating paired host device state", v4, 2u);
    }

    [*(id *)(a1 + 32) setPairedHostDeviceState:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _updateDynamicCapabilitiesAndUpdateClients];
    [*(id *)(a1 + 32) _updateClientsWithState];
    return [*(id *)(a1 + 32) _savePairedHostDeviceState];
  }
  return result;
}

void sub_1000E2E30(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) state];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000E2F58(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 32) _setRelayCallingEnabled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000E30FC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setRelayCallingEnabled:*(unsigned __int8 *)(a1 + 48) forDeviceWithID:*(void *)(a1 + 32)];
}

id sub_1000E32B0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d senderIdentityUUID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setWiFiCallingEnabled:*(unsigned __int8 *)(a1 + 48) forSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

id sub_1000E3464(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d senderIdentityUUID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setWiFiCallingRoamingEnabled:*(unsigned __int8 *)(a1 + 48) forSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

id sub_1000E3618(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d senderIdentityUUID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setVoLTECallingEnabled:*(unsigned __int8 *)(a1 + 48) forSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

id sub_1000E37CC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d senderIdentityUUID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setThumperCallingEnabled:*(unsigned __int8 *)(a1 + 48) forSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

id sub_1000E39A4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    v7[0] = 67109634;
    v7[1] = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@ senderIdentityUUID: %@", (uint8_t *)v7, 0x1Cu);
  }

  return [*(id *)(a1 + 48) _setThumperCallingAllowed:*(unsigned __int8 *)(a1 + 56) onSecondaryDeviceWithID:*(void *)(a1 + 32) forSenderIdentityWithUUID:*(void *)(a1 + 40)];
}

id sub_1000E3B64(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d senderIdentityUUID: %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) _setThumperCallingAllowedOnDefaultPairedDevice:*(unsigned __int8 *)(a1 + 48) forSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

void sub_1000E3CFC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - endEmergencyCallbackMode", v4, 2u);
  }

  int v3 = [*(id *)(a1 + 32) telephonyCallCapabilities];
  [v3 endEmergencyCallbackMode];
}

void sub_1000E3E60(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityUUID: %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) telephonyCallCapabilities];
  [v4 invalidateAndRefreshWiFiCallingCapabilitiesForSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

void sub_1000E4004(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityUUID: %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) telephonyCallCapabilities];
  [v4 invalidateAndRefreshThumperCallingCapabilitiesForSenderIdentityWithUUID:*(void *)(a1 + 32)];
}

void sub_1000E4184(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice", (uint8_t *)&v14, 2u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v3 = (id *)(a1 + 32);
  int v5 = [v4 _primaryThumperAccountRequiringAvailableDeviceSlots];
  uint64_t v6 = sub_100008DCC();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      int v14 = 138412290;
      unint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using the following account for the PIN request: %@", (uint8_t *)&v14, 0xCu);
    }

    uint64_t v8 = [*v3 thumperService];
    uint64_t v9 = [v5 primaryDeviceID];
    __int16 v10 = [v8 deviceWithUniqueID:v9];

    if (v10)
    {
      uint64_t v11 = [*v3 thumperPinExchangeController];
      [v11 requestPinFromDevice:v10];
    }
    else
    {
      uint64_t v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1003AAC94((uint64_t)v5, v3, v11);
      }
    }
  }
  else
  {
    if (v7)
    {
      unsigned int v12 = [*v3 telephonyCallCapabilities];
      id v13 = [v12 secondaryThumperAccounts];
      int v14 = 138412290;
      unint64_t v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@", (uint8_t *)&v14, 0xCu);
    }
    __int16 v10 = [*v3 thumperPinExchangeController];
    [v10 displaySlotsFullNotification];
  }
}

void sub_1000E4458(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice", v4, 2u);
  }

  uint64_t v3 = [*(id *)(a1 + 32) thumperPinExchangeController];
  [v3 cancelPinRequests];
}

void sub_1000E4590(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_1000E4698(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

id sub_1000E4808(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDynamicCapabilitiesAndUpdateClients];
}

id sub_1000E492C(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateHostingAndDisplayingSupport];
  id v2 = *(void **)(a1 + 32);

  return [v2 _updateClientsWithState];
}

id sub_1000E4A38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDynamicCapabilitiesAndUpdateClients];
}

id sub_1000E4B10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDynamicCapabilitiesAndUpdateClients];
}

void sub_1000E4BE8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _outgoingCallerID];
  if ([v2 length])
  {
    id v18 = v2;
    uint64_t v3 = [*(id *)(a1 + 32) state];
    uint64_t v4 = [v3 senderIdentityCapabilitiesStateByUUID];

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v17 = v4;
    int v5 = [v4 allValues];
    id v6 = [v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v20;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v20 != v8) {
            objc_enumerationMutation(v5);
          }
          __int16 v10 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          uint64_t v11 = [v10 thumperCallingCapabilitiesState];
          unsigned int v12 = [v11 accountID];

          if (v12)
          {
            id v13 = [*(id *)(a1 + 32) telephonyCallCapabilities];
            int v14 = [v13 secondaryThumperAccountForAccountID:v12];

            if (v14)
            {
              unint64_t v15 = [v10 senderIdentityUUID];
              char v16 = sub_100008DCC();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                unsigned int v24 = v15;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Disabling Thumper for subscription with UUID %@", buf, 0xCu);
              }

              [*(id *)(a1 + 32) _setThumperCallingEnabled:0 forSenderIdentityWithUUID:v15];
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }
      while (v7);
    }

    id v2 = v18;
  }
  [*(id *)(a1 + 32) _updateDynamicCapabilitiesAndUpdateClients];
}

id sub_1000E51E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setThumperCallingAllowed:1 onSecondaryDeviceWithID:*(void *)(a1 + 40) forSenderIdentityWithUUID:*(void *)(a1 + 48)];
}

id sub_1000E5484(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setThumperCallingAllowed:0 onSecondaryDeviceWithID:*(void *)(a1 + 40) forSenderIdentityWithUUID:*(void *)(a1 + 48)];
}

id sub_1000E5498(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setThumperCallingAllowed:0 onSecondaryDeviceWithID:*(void *)(a1 + 40) forSenderIdentityWithUUID:*(void *)(a1 + 48)];
}

void sub_1000E55B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E55C8(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) telephonyCallCapabilities];
  uint64_t v2 = [v5 localThumperAccounts];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000E5734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E574C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) telephonyCallCapabilities];
  uint64_t v2 = [v5 secondaryThumperAccounts];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000E58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E58F8(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) telephonyCallCapabilities];
  uint64_t v2 = [v5 secondaryThumperAccountForAccountID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000E5C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E5C50(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) telephonyCallCapabilities];
  uint64_t v3 = [v2 senderIdentityCapabilitiesStateByUUID];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = objc_msgSend(v3, "allKeys", 0);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        __int16 v10 = [v3 objectForKeyedSubscript:v9];
        uint64_t v11 = [v10 thumperCallingCapabilitiesState];
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v9];
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_1000E5E3C(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateState];
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) state];
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "updateState: capability state: %@", (uint8_t *)&v4, 0xCu);
  }
}

id sub_1000E62C4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableSupportsPrimaryCalling" forceDefault:@"forceSupportsPrimaryCalling"];
  byte_10058C3B0 = (char)result;
  return result;
}

id sub_1000E63B8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableSupportsBasebandCalling" forceDefault:@"forceSupportsBasebandCalling"];
  byte_10058C3C0 = (char)result;
  return result;
}

id sub_1000E64CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableSupportsCellularData" forceDefault:@"forceSupportsCellularData"];
  byte_10058C3D0 = (char)result;
  return result;
}

id sub_1000E6598(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableDisplayingTelephonyCallSupport" forceDefault:@"forceDisplayingTelephonyCallSupport"];
  byte_10058C3E0 = (char)result;
  return result;
}

id sub_1000E66AC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableDisplayingFaceTimeAudioCallSupport" forceDefault:@"forceDisplayingFaceTimeAudioCallSupport"];
  byte_10058C3F0 = (char)result;
  return result;
}

id sub_1000E67C0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableDisplayingFaceTimeVideoCallSupport" forceDefault:@"forceDisplayingFaceTimeVideoCallSupport"];
  byte_10058C400 = (char)result;
  return result;
}

id sub_1000E6F00(uint64_t a1)
{
  byte_10058C410 = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableCanEnableWiFiCalling" forceDefault:@"forceCanEnableWiFiCalling"];
  byte_10058C411 = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableCanEnableVoLTECalling" forceDefault:@"forceCanEnableVoLTECalling"];
  id result = [*(id *)(a1 + 32) _defaultOverrideForDisableDefault:@"disableCanEnableThumperCalling" forceDefault:@"forceCanEnableThumperCalling"];
  byte_10058C412 = (char)result;
  return result;
}

int64_t sub_1000E8994(id a1, TUCloudCallingDevice *a2, TUCloudCallingDevice *a3)
{
  int v4 = a3;
  id v5 = [(TUCloudCallingDevice *)a2 uniqueID];
  id v6 = [(TUCloudCallingDevice *)v4 uniqueID];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1000EA338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EA364(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  __int16 v10 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v11 = [WeakRetained queue];

    if (v11)
    {
      long long v12 = [v10 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000EA484;
      block[3] = &unk_1005074A0;
      char v18 = a3;
      id v14 = v8;
      id v15 = v7;
      char v16 = v10;
      id v17 = *(id *)(a1 + 32);
      dispatch_async(v12, block);
    }
  }
}

id sub_1000EA484(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    v7[0] = 67109634;
    v7[1] = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Coordinated alert request came back with bestIsMe: %d info: %@ error: %@", (uint8_t *)v7, 0x1Cu);
  }

  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 48) setShouldSuppressRingtone:0];
  }
  [*(id *)(a1 + 56) invalidate];
  return [*(id *)(a1 + 56) setCompletionHandler:0];
}

uint64_t sub_1000EA68C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1000EA770(uint64_t a1)
{
}

id sub_1000EA81C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setTransitionStatus:", v1);
}

id sub_1000EA8F4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setWantsHoldMusic:", v1);
}

id sub_1000EA9CC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setWasDialAssisted:", v1);
}

id sub_1000EAAA4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setScreeningAnnouncementHasFinished:", v1);
}

id sub_1000EAB7C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setDisconnectedReason:", v1);
}

id sub_1000EAC54(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setShouldSuppressRingtone:", v1);
}

id sub_1000EAD2C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setFaceTimeIDStatus:", v1);
}

id sub_1000EAE00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setSoundRegion:", v1);
}

id sub_1000EAEFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setModel:", v1);
}

id sub_1000EAFCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setAnsweringMachineStreamToken:", v1);
}

id sub_1000EB0A0(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setSupportsDTMFUpdates:", v1);
}

id sub_1000EB178(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setEndpointOnCurrentDevice:", v1);
}

id sub_1000EB264(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)CSDCall;
  return objc_msgSendSuper2(&v3, "setScreening:", v1);
}

void sub_1000EB78C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_super v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0;

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = (id *)(*(void *)(a1 + 32) + 88);

  objc_storeStrong(v5, v4);
}

uint64_t sub_1000EBC4C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 184) = *(void *)(result + 40);
  return result;
}

void sub_1000EC21C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(a1 + 32) handle];
    id v6 = TUCopyIDSCanonicalAddressForHandle();
    id v7 = +[NSNumber numberWithInteger:a2];
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "faceTimeIDSStatus for destinationID: %@ is: %@", (uint8_t *)&v8, 0x16u);
  }
  if (a2 <= 2) {
    [*(id *)(a1 + 32) setFaceTimeIDStatus:dword_10048D9B0[a2]];
  }
}

void sub_1000ED994(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10058C420;
  qword_10058C420 = (uint64_t)v1;
}

void sub_1000EDB94(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000EDBBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained aaDevicesDidChange];
}

void sub_1000EDBFC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    objc_super v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003AAD58((uint64_t)v2, v3);
    }
  }
}

void sub_1000EDC54(uint64_t a1)
{
  [*(id *)(a1 + 32) _initializeAudioRouteCollections];
  [*(id *)(a1 + 32) _initializeAutomaticCarDNDStatusIfNecessary];
  [*(id *)(a1 + 32) _updatePickableRoutes];
  [*(id *)(a1 + 32) _updateCarPlayDeviceConnected];
  v13[0] = AVSystemController_PickableRoutesDidChangeNotification;
  v13[1] = AVSystemController_PreferredExternalRouteDidChangeNotification;
  v13[2] = AVSystemController_CarPlayIsConnectedDidChangeNotification;
  uint64_t v2 = +[NSArray arrayWithObjects:v13 count:3];
  objc_super v3 = +[AVSystemController sharedAVSystemController];
  [v3 setAttribute:v2 forKey:AVSystemController_SubscribeToNotificationsAttribute error:0];

  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  [v4 addObserver:*(void *)(a1 + 32) selector:"pickableRoutesDidChangeNotification:" name:AVSystemController_PickableRoutesDidChangeNotification object:0];
  [v4 addObserver:*(void *)(a1 + 32) selector:"preferredExternalRouteDidChangeNotification:" name:AVSystemController_PreferredExternalRouteDidChangeNotification object:0];
  [v4 addObserver:*(void *)(a1 + 32) selector:"carPlayIsConnectedChanged:" name:AVSystemController_CarPlayIsConnectedDidChangeNotification object:0];
  if (qword_10058C430
    || ((uint64_t v5 = (void **)CUTWeakLinkSymbol()) == 0 ? (v6 = 0) : (v6 = *v5),
        objc_storeStrong((id *)&qword_10058C430, v6),
        qword_10058C430))
  {
    id v7 = +[NSNotificationCenter defaultCenter];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = qword_10058C430;
    __int16 v10 = +[AVAudioSession sharedInstance];
    [v7 addObserver:v8 selector:"mediaServicesWereResetNotification:" name:v9 object:v10];
  }
  else
  {
    id v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      CFStringRef v12 = @"AVAudioSessionMediaServicesWereResetNotification";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not weak link notification string '%@'. Not observing notifications for it.", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1000EE02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE044(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _audioRouteCollectionForCall:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v2 isAnyRouteAvailableWithUniqueIdentifier:*(void *)(a1 + 48)];
}

void sub_1000EE1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE20C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000EE21C(uint64_t a1)
{
}

void sub_1000EE224(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _audioRouteCollectionForCall:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 preferredRoute];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE368(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) isCarPlayDeviceConnected];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "audioRouteCollections", 0);
    uint64_t v3 = [v2 allValues];

    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) isInEarAudioRouteAvailable])
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
            goto LABEL_12;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
}

void sub_1000EE56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE584(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "audioRouteCollections", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) hasInEarRouteInTipiWithAndSmartRoutedToCompanionWatch])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000EE764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE77C(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "audioRouteCollections", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) hasInEarRouteInTipiWithCompanionWatch])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000EE984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE99C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    goto LABEL_4;
  }
  if ([*(id *)(a1 + 32) isCarPlayDeviceConnected])
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
LABEL_4:
    *(unsigned char *)(v2 + 24) = 1;
    goto LABEL_6;
  }
  uint64_t v3 = [*(id *)(a1 + 32) _audioRouteCollectionForCall:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 isInEarAudioRouteAvailable];

LABEL_6:
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v4 + 24))
  {
    id v5 = [*(id *)(a1 + 40) provider];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 isTinCanProvider] ^ 1;
  }
  else
  {
    *(unsigned char *)(v4 + 24) = 0;
  }
}

void sub_1000EEBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EEBD8(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _audioRouteCollectionForCall:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 preferredAndActiveRoute];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EED2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EED44(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _audioRouteCollectionForCall:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 32) isCarPlayDeviceConnected]) {
    unsigned __int8 v2 = 1;
  }
  else {
    unsigned __int8 v2 = [v3 isAnyRouteAvailableWithBluetoothEndpointType:2];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
}

void sub_1000EEE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EEE98(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unsigned __int8 v2 = objc_msgSend(*(id *)(a1 + 32), "audioRouteCollections", 0);
  id v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) isAnyRouteAvailableWithBluetoothEndpointType:1])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000EF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000EF094(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isCarPlayDeviceConnected];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000EF188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EF1A0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unsigned __int8 v2 = objc_msgSend(*(id *)(a1 + 32), "audioRouteCollections", 0);
  id v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) isAnyRouteAvailableWithBluetoothEndpointType:2])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000EF384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000EF39C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _initializeAutomaticCarDNDStatusIfNecessary];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(unsigned char *)(*(void *)(a1 + 32) + 9);
  return result;
}

id sub_1000EF45C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePickableRoutes];
}

id sub_1000EF5A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePickableRoutes];
}

id sub_1000EF6E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePickableRoutes];
  unsigned __int8 v2 = *(void **)(a1 + 32);

  return [v2 _postNotificationName:@"CSDRouteManagerPreferredRouteChangedNotification"];
}

id sub_1000EF864(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateCarPlayDeviceConnected];
  unsigned __int8 v2 = *(void **)(a1 + 32);

  return [v2 _postNotificationName:@"CSDRouteManagerPreferredRouteChangedNotification"];
}

id sub_1000EF9E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePickableRoutes];
  [*(id *)(a1 + 32) _updateCarPlayDeviceConnected];
  unsigned __int8 v2 = *(void **)(a1 + 32);

  return [v2 _postNotificationName:@"CSDRouteManagerPreferredRouteChangedNotification"];
}

id sub_1000EFAB8(uint64_t a1)
{
  unsigned __int8 v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio device list changed", v4, 2u);
  }

  return [*(id *)(a1 + 32) _postNotificationName:@"CSDRouteManagerPreferredRouteChangedNotification"];
}

void sub_1000F0650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000F0688(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_100008DCC();
  id v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003AADE4((uint64_t)v5, v7);
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received initial CarKit DND assertion: %d", (uint8_t *)v8, 8u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000F0780(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = [WeakRetained queue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1000F082C;
    v6[3] = &unk_100505030;
    char v7 = a2;
    v6[4] = v4;
    dispatch_async(v5, v6);
  }
}

id sub_1000F082C(uint64_t a1)
{
  unsigned __int8 v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating isCarModeActive to %d", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 32) setCarModeActive:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000F100C(CSDMessagingConversationMember *self, SEL a2)
{
  v7.receiver = self;
  v7.super_class = (Class)CSDMessagingConversationMember;
  int v3 = [(CSDMessagingConversationMember *)&v7 description];
  id v4 = [(CSDMessagingConversationMember *)self dictionaryRepresentation];
  id v5 = +[NSString stringWithFormat:@"%@ %@", v3, v4];

  return v5;
}

uint64_t sub_1000F12B4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 56) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_51;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_53:
        uint64_t v31 = 52;
        goto LABEL_62;
      case 2u:
        char v18 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v19 = 24;
        goto LABEL_30;
      case 3u:
        uint64_t v20 = PBReaderReadString();
        long long v21 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v20;

        goto LABEL_63;
      case 4u:
        char v18 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v19 = 32;
LABEL_30:
        objc_storeStrong((id *)(a1 + v19), v18);
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_65;
        }
        goto LABEL_49;
      case 5u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_57:
        *(void *)(a1 + 8) = v24;
        goto LABEL_63;
      case 6u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v14 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_61:
        uint64_t v31 = 48;
LABEL_62:
        *(_DWORD *)(a1 + v31) = v14;
        goto LABEL_63;
      case 7u:
        char v18 = objc_alloc_init(CSDMessagingVoucher);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark() && sub_100137D04((uint64_t)v18, a2))
        {
LABEL_49:
          PBReaderRecallMark();

LABEL_63:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_65:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_63;
    }
  }
}

uint64_t sub_1000F30E4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 152) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_77;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_79;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_79:
        uint64_t v31 = 144;
        goto LABEL_88;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 136;
        goto LABEL_62;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_62;
      case 4u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 96;
        goto LABEL_62;
      case 5u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 152) |= 4u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v21 |= (unint64_t)(v23 & 0x7F) << v19;
            if (v23 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                uint64_t v21 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v21 = 0;
        }
LABEL_83:
        *(unsigned char *)(a1 + 148) = v21 != 0;
        goto LABEL_67;
      case 6u:
        uint64_t v24 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 64), v24);
        goto LABEL_50;
      case 7u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationMember);
        objc_storeStrong((id *)(a1 + 88), v24);
        goto LABEL_54;
      case 8u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addRemoteMembers:v24];
        goto LABEL_54;
      case 9u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationParticipant);
        [(id)a1 addActiveRemoteParticipants:v24];
        goto LABEL_58;
      case 0xAu:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationActivitySession);
        [(id)a1 addActivitySessions:v24];
        goto LABEL_64;
      case 0xBu:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationLink);
        objc_storeStrong((id *)(a1 + 80), v24);
        if (!PBReaderPlaceMark() || (sub_10000D6F0((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_66;
      case 0xCu:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationReport);
        objc_storeStrong((id *)(a1 + 120), v24);
        if (!PBReaderPlaceMark() || (sub_1000F5884((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_66;
      case 0xEu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 40;
        goto LABEL_62;
      case 0xFu:
        uint64_t v24 = objc_alloc_init(CSDMessagingHandle);
        [(id)a1 addOtherInvitedHandles:v24];
LABEL_50:
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_66;
      case 0x10u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addLightweightMembers:v24];
LABEL_54:
        if (!PBReaderPlaceMark() || (sub_1000F12B4((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_66;
      case 0x11u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationParticipant);
        [(id)a1 addActiveLightweightParticipants:v24];
LABEL_58:
        if (!PBReaderPlaceMark() || (sub_10001A534((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_66;
      case 0x12u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 56;
LABEL_62:
        char v26 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_67;
      case 0x13u:
        uint64_t v24 = objc_alloc_init(CSDMessagingConversationActivitySession);
        objc_storeStrong((id *)(a1 + 128), v24);
LABEL_64:
        if PBReaderPlaceMark() && (sub_1000D204C((uint64_t)v24, a2))
        {
LABEL_66:
          PBReaderRecallMark();

LABEL_67:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_90:

        return 0;
      case 0x14u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 152) |= 1u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v14 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_87:
        uint64_t v31 = 32;
LABEL_88:
        *(_DWORD *)(a1 + v31) = v14;
        goto LABEL_67;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_67;
    }
  }
}

uint64_t sub_1000F5884(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v13 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v14 = PBReaderReadString();
      uint64_t v15 = 24;
    }
    else
    {
      if (v13 == 2)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v18 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v18 = 0;
        }
        *(void *)(a1 + 8) = v18;
        continue;
      }
      if (v13 != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
      }
      uint64_t v14 = PBReaderReadString();
      uint64_t v15 = 16;
    }
    char v16 = *(void **)(a1 + v15);
    *(void *)(a1 + v15) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F6D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, id *a13, id *a14)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v15);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v19);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)(v20 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_1000F6DB4(id a1)
{
  id v1 = +[CSDCallCapabilities sharedInstance];
  unsigned __int8 v2 = [v1 callCapabilitiesState];
  BOOL v3 = [v2 relayCallingAvailability] == 2;

  return v3;
}

void sub_1000F6E10(uint64_t a1)
{
  unsigned __int8 v2 = [[CSDDeviceLockStateObserver alloc] initWithQueue:*(void *)(*(void *)(a1 + 32) + 232)];
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;

  unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 136);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1000F6EEC;
  v6[3] = &unk_100505698;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  [v5 performBlockAfterFirstUnlock:v6];
  objc_destroyWeak(&v7);
}

void sub_1000F6ED8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000F6EEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned __int8 v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device first unlock block invoked, attempting to retrieve active conversations", buf, 2u);
    }

    [WeakRetained retreiveActiveConversations];
    [WeakRetained removeNonIndefiniteLinks];
    uint64_t v3 = WeakRetained[29];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F6FF0;
    block[3] = &unk_100504EC0;
    char v4 = WeakRetained;
    id v6 = v4;
    dispatch_async(v3, block);
    [v4 setupPendingConversationCleanupTimer];
  }
}

void sub_1000F6FF0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) linkManager];
  [v1 validateAllLinks];
}

id sub_1000F7034(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, void *a8, __int16 a9, void *a10, char a11)
{
  unint64_t v17 = (id *)(a1 + 32);
  id v18 = a10;
  id v19 = a8;
  id v20 = a6;
  id v21 = a5;
  id v22 = a4;
  id v23 = a3;
  id v24 = a2;
  id WeakRetained = objc_loadWeakRetained(v17);
  char v26 = [WeakRetained service];
  LOBYTE(v30) = a11;
  LOWORD(v29) = a9;
  char v27 = objc_msgSend(v26, "createGroupSessionProviderWithGroupID:participantDestinationIDs:callerID:account:queue:isOneToOneModeEnabled:localMember:avLess:isScreenSharingRequest:ABTestConfiguration:isInitiator:", v24, v23, v22, v21, v20, a7, v19, v29, v18, v30);

  return v27;
}

IMNickname *__cdecl sub_1000F7174(id a1)
{
  id v1 = +[IMNicknameController sharedInstance];
  unsigned __int8 v2 = [v1 personalNickname];

  return (IMNickname *)v2;
}

CSDConversation *sub_1000F71C8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, char a19, uint64_t a20,uint64_t a21,void *a22)
{
  double v40 = (id *)(a1 + 32);
  id v39 = a22;
  id v41 = a18;
  id v38 = a17;
  id v22 = a16;
  id v37 = a15;
  id v34 = a14;
  id v31 = a13;
  id v30 = a12;
  id v28 = a11;
  id v55 = a10;
  id v54 = a9;
  id v53 = a8;
  id v27 = a6;
  id v51 = a5;
  id v49 = a4;
  id v47 = a3;
  id v45 = a2;
  id WeakRetained = objc_loadWeakRetained(v40);
  unsigned int v36 = [WeakRetained cpApplicationController];
  char v33 = [WeakRetained sharePlaySystemStateObserver];
  uint64_t v32 = +[CPApplicationPolicyManager sharedInstance];
  id v24 = [CSDConversation alloc];
  uint64_t v29 = [WeakRetained featureFlags];
  LOBYTE(v26) = a19;
  id v43 = -[CSDConversation initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:remotePushTokens:activity:link:report:fromStorage:avMode:presentationMode:applicationController:featureFlags:systemStateObserver:applicationPolicyManager:screenSharingRequest:testConfiguration:](v24, "initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:remotePushTokens:activity:link:report:fromStorage:avMode:presentationMode:applicationController:featureFlags:systemStateObserver:applicationPolicyManager:screenSharingRequest:testConfiguration:", v45, v47, v49, v51, v27, a7, v53, v54, v55, v28, v30, v31, v34, v37,
          v22,
          v41,
          v26,
          a20,
          a21,
          v36,
          v29,
          v33,
          v32,
          v38,
          v39);

  return v43;
}

id sub_1000F748C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v67 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a8;
  id v20 = a9;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v22 = WeakRetained;
  if (WeakRetained)
  {
    long long v65 = v19;
    id v23 = [WeakRetained featureFlags];
    unsigned int v24 = [v23 groupFacetimeAsAServiceEnabled];

    if (v20 && v24)
    {
      unint64_t v25 = +[CSDConversationProviderManager sharedInstance];
      uint64_t v26 = [v25 serviceForProvider:v20];
    }
    else
    {
      uint64_t v26 = [v22 service];
    }
    id v61 = v18;
    id v29 = [v18 mutableCopy];
    id v30 = v29;
    if (v29) {
      id v31 = v29;
    }
    else {
      id v31 = objc_alloc_init((Class)NSMutableDictionary);
    }
    uint64_t v32 = v31;

    char v33 = [v17 idsFromID];
    [v32 setObject:v33 forKeyedSubscript:IDSSendMessageOptionFromIDKey];

    id v34 = sub_100008DCC();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)BOOL v73 = v32;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "sendDataBlock options: %@", buf, 0xCu);
    }

    char v35 = [v32 objectForKeyedSubscript:@"kCSDConversationGroupUUID"];

    if (v35)
    {
      long long v66 = [v32 objectForKeyedSubscript:@"kCSDConversationGroupUUID"];
      [v32 removeObjectForKey:@"kCSDConversationGroupUUID"];
    }
    else
    {
      unsigned int v36 = sub_100008DCC();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "invalid conversationGroupUUID", buf, 2u);
      }

      long long v66 = 0;
    }
    id v62 = v17;
    id v63 = v15;
    id v68 = 0;
    id v69 = 0;
    char v60 = (void *)v26;
    id v37 = (void *)v26;
    id v28 = v67;
    id v27 = [v37 sendData:v67 fromAccount:v15 toDestinations:v16 priority:300 options:v32 identifier:&v69 error:&v68];
    id v38 = v69;
    id v39 = v68;
    double v40 = v39;
    id v19 = v65;
    if (v27)
    {
      id v58 = v39;
      char v59 = v16;
      if (v65)
      {
        id v41 = [v22 mutableSendDataCallbacksByRequestIdentifiers];
        id v42 = [v65 copy];
        id v43 = objc_retainBlock(v42);
        [v41 setObject:v43 forKey:v38];
      }
      __int16 v44 = sub_100008DCC();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        id v45 = [v59 allObjects];
        char v46 = TULoggableStringForHandles();
        *(_DWORD *)long long buf = 138412546;
        *(void *)BOOL v73 = v38;
        *(_WORD *)&v73[8] = 2112;
        *(void *)&v73[10] = v46;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Sent message with identifier %@ to %@", buf, 0x16u);
      }
      id v47 = [[CSDMessagingConversationMessage alloc] initWithData:v67];
      id v48 = [v32 objectForKeyedSubscript:@"kCSDConversationIsLetMeInApproved"];

      if (v48)
      {
        id v49 = [v32 objectForKeyedSubscript:@"kCSDConversationIsLetMeInApproved"];
        id v48 = [v49 BOOLValue];

        [v32 removeObjectForKey:@"kCSDConversationIsLetMeInApproved"];
      }
      if ([(CSDMessagingConversationMessage *)v47 enclosedEncryptedType] == 16 && v66)
      {
        v70[1] = @"kCSDConversationIsLetMeInApproved";
        v71[0] = v66;
        v70[0] = @"kCSDConversationGroupUUID";
        char v50 = +[NSNumber numberWithBool:v48];
        v71[1] = v50;
        id v51 = +[NSDictionary dictionaryWithObjects:v71 forKeys:v70 count:2];
        unsigned int v52 = [v22 outIdentifierToConversationInfo];
        [v52 setObject:v51 forKeyedSubscript:v38];

        id v53 = sub_100008DCC();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          id v54 = [v22 outIdentifierToConversationInfo];
          *(_DWORD *)long long buf = 138412290;
          *(void *)BOOL v73 = v54;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "outIdentifierToConversationInfo: %@", buf, 0xCu);
        }
        id v28 = v67;
        id v55 = a7;
        id v19 = v65;
      }
      else
      {
        id v53 = sub_100008DCC();
        id v28 = v67;
        id v55 = a7;
        id v19 = v65;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v56 = [(CSDMessagingConversationMessage *)v47 enclosedEncryptedType];
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)BOOL v73 = v56;
          *(_WORD *)&v73[4] = 2112;
          *(void *)&v73[6] = v66;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "message type: %d, groupUUID: %@", buf, 0x12u);
        }
      }

      if (v55) {
        *id v55 = v38;
      }
      double v40 = v58;
      id v16 = v59;
    }
    else
    {
      sub_100008DCC();
      id v47 = (CSDMessagingConversationMessage *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_ERROR)) {
        sub_1003AAE5C();
      }
    }

    id v17 = v62;
    id v15 = v63;
    id v18 = v61;
  }
  else
  {
    id v27 = 0;
    id v28 = v67;
  }

  return v27;
}

void sub_1000F7A9C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v18 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v16 = WeakRetained;
  if (WeakRetained)
  {
    id v17 = [WeakRetained pendingMembershipTracker];
    [v17 handleDelegatedPendingMember:v18 forConversation:v11 withGroupUUID:v12 from:v13 transactionUUID:v14];
  }
}

id sub_1000F7B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = +[NSMutableSet set];
  if (WeakRetained)
  {
    id v6 = [WeakRetained pushTokenForSelf];
    id v7 = [WeakRetained featureFlags];
    unsigned int v8 = [v7 groupFacetimeAsAServiceEnabled];

    id v22 = v3;
    if (v3 && v8)
    {
      char v9 = +[CSDConversationProviderManager sharedInstance];
      int v10 = [v9 serviceForProvider:v3];
    }
    else
    {
      int v10 = [WeakRetained service];
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v11 = objc_msgSend(v10, "aliases", v10);
    id v12 = (char *)[v11 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v24;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(void *)v24 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = TUHandleForIDSCanonicalAddress();
          if (v16) {
            [v5 addObject:v16];
          }
          id v17 = TUCopyIDSCanonicalAddressForHandle();
          id v18 = (void *)IDSCopyIDForTokenWithID();

          id v19 = TUHandleForIDSCanonicalAddress();
          if (v19) {
            [v5 addObject:v19];
          }
        }
        id v13 = (char *)[v11 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v13);
    }

    id v3 = v22;
  }

  return v5;
}

id sub_1000F7DAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained activeLocalHandlesForProvider];
    char v4 = v3[2](v3, 0);
  }
  else
  {
    char v4 = +[NSMutableSet set];
  }

  return v4;
}

id sub_1000F7E3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained localCallerIDForProvider];
    char v4 = v3[2](v3, 0);
  }
  else
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Using local callerID: nil, could not get strong self", v7, 2u);
    }

    char v4 = 0;
  }

  return v4;
}

id sub_1000F7F08(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = [WeakRetained callProviderManager];
  id v3 = [v2 faceTimeProvider];
  char v4 = [v3 prioritizedSenderIdentities];

  return v4;
}

id sub_1000F7F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained featureFlags];
    unsigned int v7 = [v6 groupFacetimeAsAServiceEnabled];

    if (v3 && v7)
    {
      unsigned int v8 = +[CSDConversationProviderManager sharedInstance];
      char v9 = [v8 serviceForProvider:v3];
    }
    else
    {
      char v9 = [v5 service];
    }
    id v11 = [v9 callerID];
    id v12 = +[TUHandle normalizedHandleWithDestinationID:v11];
    unsigned int v13 = [v5 isValidLocalHandle:v12 forProvider:v3];

    if (v11 && v13)
    {
      int v10 = +[TUHandle normalizedHandleWithDestinationID:v11];
    }
    else
    {
      uint64_t v14 = [v5 activeLocalHandlesForProvider];
      id v15 = ((void (**)(void, id))v14)[2](v14, v3);
      id v16 = [v15 anyObject];

      id v17 = [v16 value];
      id v18 = (void *)IDSCopyAddressDestinationForDestination();
      id v19 = (void *)IDSCopyRawAddressForDestination();
      int v10 = +[TUHandle normalizedHandleWithDestinationID:v19];
    }
  }
  else
  {
    int v10 = 0;
  }
  id v20 = sub_100008DCC();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 138412290;
    long long v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Using local callerID: %@", (uint8_t *)&v22, 0xCu);
  }

  return v10;
}

uint64_t sub_1000F81C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained activeLocalHandles];
    unsigned int v7 = v6[2]();
    unsigned int v8 = TUNormalizedHandleForTUHandle();
    unsigned int v9 = [v7 containsObject:v8];

    if (v9)
    {
      int v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 138412290;
        id v19 = v3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ is eligible for screen sharing because it's a local handle", (uint8_t *)&v18, 0xCu);
      }
      uint64_t v11 = 1;
    }
    else
    {
      id v12 = objc_alloc((Class)TUContactsDataProvider);
      unsigned int v13 = +[TUCallCenter sharedInstance];
      uint64_t v14 = [v13 contactStore];
      int v10 = [v12 initWithContactsDataSource:v14];

      uint64_t v11 = (uint64_t)[v10 isHandleEligibleForScreenSharingRequests:v3];
      id v15 = sub_100008DCC();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v16 = @"NO";
        if (v11) {
          CFStringRef v16 = @"YES";
        }
        int v18 = 138412546;
        id v19 = v3;
        __int16 v20 = 2112;
        CFStringRef v21 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ is eligible for screen sharing: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1000F9068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F908C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = [WeakRetained mutableConversationsByUUID];
  unsigned int v5 = [*(id *)(a1 + 40) UUID];
  id v6 = [v4 objectForKeyedSubscript:v5];
  unsigned int v7 = +[TUConversationInvitationPreference letMeInResponseInvitationPreferences];
  uint64_t v10 = IDSSendMessageOptionRequireAllRegistrationPropertiesKey;
  unsigned int v8 = +[NSSet setWithObject:IDSRegistrationPropertySupportsModernGFT];
  uint64_t v11 = v8;
  unsigned int v9 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  [WeakRetained sendInvitationMessageToMember:v3 forConversation:v6 includeAllAttributes:1 invitationPreferences:v7 additionalOptions:v9];
}

CSDAVCSession *__cdecl sub_1000FAEC4(id a1, NSString *a2, CSDAVCSessionDelegate *a3, OS_dispatch_queue *a4, BOOL a5, BOOL a6, TUConversationReport *a7)
{
  BOOL v7 = a6;
  BOOL v8 = a5;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  id v12 = [[CSDSimulatedAVCSession alloc] initWithDelegate:v11 queue:v10 videoEnabled:v8 oneToOneModeEnabled:v7];

  return (CSDAVCSession *)v12;
}

void sub_1000FB07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FB094(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000FB0A4(uint64_t a1)
{
}

void sub_1000FB0AC(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unsigned __int8 v2 = objc_msgSend(*(id *)(a1 + 32), "mutablePendingConversationsByPseudonym", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        unsigned int v9 = [v8 link];
        uint64_t v10 = [v9 pseudonym];
        unsigned int v11 = [v10 isEqualToString:*(void *)(a1 + 40)];

        if (v11)
        {
          uint64_t v12 = [v8 temporaryGroupUUID];
          uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v14 = *(void **)(v13 + 40);
          *(void *)(v13 + 40) = v12;

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000FB344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FB35C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _removePendingConversationWithPseudonym:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000FB6A0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) mutablePendingConversationsByPseudonym];
  [v1 removeAllObjects];
}

void sub_1000FBF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FBF40(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "mutableConversationsByUUID", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v8 isRepresentedByRemoteMembers:*(void *)(a1 + 40) andLink:*(void *)(a1 + 48)])
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v8);
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000FC1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FC1B8(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "mutableConversationsByUUID", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        long long v9 = [v8 link];
        if (v9 && [v8 letMeInRequestState] == (id)3)
        {
          long long v10 = [v8 link];
          unsigned int v11 = [v10 isEquivalentToConversationLink:*(void *)(a1 + 40)];

          if (v11)
          {
            uint64_t v12 = [v8 tuConversation];
            uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
            uint64_t v14 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v12;

            goto LABEL_13;
          }
        }
        else
        {
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
LABEL_13:
}

void sub_1000FC768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FC780(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) findConversationLinkMatchingPseudonym:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000FD1E0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) receivedMessage:*(void *)(a1 + 56) fromHandle:*(void *)(a1 + 64) withUpdate:*(void *)(a1 + 72)];
}

void sub_1000FD548(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) reportedNewIncomingConversation:*(void *)(a1 + 40) fromHandle:*(void *)(a1 + 56)];
}

void sub_1000FD894(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) avModeChanged:*(void *)(a1 + 56) toAVMode:*(void *)(a1 + 64) forConversation:*(void *)(a1 + 40)];
}

id sub_1000FDBA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) removedConversationWithUUID:*(void *)(a1 + 48)];
}

id sub_1000FDDB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) trackedPendingMember:*(void *)(a1 + 48) forConversationLink:*(void *)(a1 + 56)];
}

id sub_1000FDFA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) updateIncomingPendingConversationsByGroupUUID:*(void *)(a1 + 48)];
}

void sub_1000FE1DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) queue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1000FE2C8;
  v10[3] = &unk_1005053D0;
  id v11 = *(id *)(a1 + 40);
  id v12 = v5;
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_1000FE2C8(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = [v2 tuConversation];
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(void *)(a1 + 40))
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id obj = [*(id *)(a1 + 48) delegateToQueue];
    id v4 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          id v9 = [*(id *)(a1 + 48) delegateToQueue];
          uint64_t v10 = [v9 objectForKey:v8];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000FE4E0;
          block[3] = &unk_1005053D0;
          id v15 = v3;
          uint64_t v16 = v8;
          int8x16_t v13 = *(int8x16_t *)(a1 + 40);
          id v11 = (id)v13.i64[0];
          int8x16_t v17 = vextq_s8(v13, v13, 8uLL);
          dispatch_async(v10, block);
        }
        id v5 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v5);
    }
LABEL_16:

    goto LABEL_17;
  }
  if (*(void *)(a1 + 56))
  {
    id obj = sub_100008DCC();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR)) {
      sub_1003AAEF8();
    }
    goto LABEL_16;
  }
LABEL_17:
}

uint64_t sub_1000FE4E0(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_13;
  }
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "activatedLinksWithCompleted: tuconversation: %@", (uint8_t *)&v12, 0xCu);
  }

  char v4 = objc_opt_respondsToSelector();
  id v5 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t v6 = [*(id *)(a1 + 32) provider];
    if ([v5 shouldHandleUpdateForProvider:v6])
    {
    }
    else
    {
      char v7 = objc_opt_respondsToSelector();

      if (v7) {
        goto LABEL_13;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    goto LABEL_13;
  }
  uint64_t v8 = sub_100008DCC();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 32) provider];
    int v12 = 138412546;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v12, 0x16u);
  }
  [*(id *)(a1 + 40) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 32)];
LABEL_13:
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    return (uint64_t)[*(id *)(a1 + 40) conversationManager:*(void *)(a1 + 48) activatedConversationLinksChanged:*(void *)(a1 + 56)];
  }
  return result;
}

uint64_t sub_1000FE88C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
    return (uint64_t)_[v3 conversationManager:v4 remoteScreenShareAttributesChanged:v5 isLocallySharing:v6];
  }
  return result;
}

uint64_t sub_1000FEAC8(void *a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    return (uint64_t)_[v3 conversationManager:v4 remoteScreenShareEndedWithReason:v5];
  }
  return result;
}

void sub_1000FECFC(uint64_t a1)
{
  if (objc_opt_respondsToSelector())
  {
    char v2 = objc_opt_respondsToSelector();
    uint64_t v3 = *(void **)(a1 + 32);
    if (v2)
    {
      uint64_t v4 = [*(id *)(a1 + 40) provider];
      if ([v3 shouldHandleUpdateForProvider:v4])
      {
      }
      else
      {
        char v5 = objc_opt_respondsToSelector();

        if (v5) {
          return;
        }
      }
    }
    else if (objc_opt_respondsToSelector())
    {
      return;
    }
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = [*(id *)(a1 + 40) provider];
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) reportedLetMeInRejectedForPendingConversation:*(void *)(a1 + 40)];
  }
}

void sub_1000FF034(uint64_t a1)
{
  if (objc_opt_respondsToSelector())
  {
    char v2 = objc_opt_respondsToSelector();
    uint64_t v3 = *(void **)(a1 + 32);
    if (v2)
    {
      uint64_t v4 = [*(id *)(a1 + 40) provider];
      if ([v3 shouldHandleUpdateForProvider:v4])
      {
      }
      else
      {
        char v5 = objc_opt_respondsToSelector();

        if (v5) {
          return;
        }
      }
    }
    else if (objc_opt_respondsToSelector())
    {
      return;
    }
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = [*(id *)(a1 + 40) provider];
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) reportedInvalidLinkForPendingConversation:*(void *)(a1 + 40)];
  }
}

id sub_1000FF7CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateConversationHandoffEligibility:*(void *)(a1 + 40)];
}

void sub_1000FFDDC(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_100100004(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100100018(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v3 = [*(id *)(a1 + 32) object];
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v4 = [WeakRetained mutableConversationsByUUID];
    char v5 = [v4 allValues];

    id v6 = [v5 countByEnumeratingWithState:&v65 objects:v74 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)v66;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v66 != v9) {
            objc_enumerationMutation(v5);
          }
          __int16 v11 = *(void **)(*((void *)&v65 + 1) + 8 * i);
          if ([v11 state] == (id)3)
          {
            int v12 = v11;

            uint64_t v8 = v12;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v65 objects:v74 count:16];
      }
      while (v7);

      if (v8)
      {
        uint64_t v13 = sub_100008DCC();
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (v3)
        {
          if (!v14) {
            goto LABEL_21;
          }
          id v15 = [v8 UUID];
          *(_DWORD *)long long buf = 138412546;
          BOOL v71 = v3;
          __int16 v72 = 2112;
          BOOL v73 = v15;
          uint64_t v16 = "Conversation manager alerted to new selected audio route ID %@, letting my other devices know for conversation UUID %@";
          int8x16_t v17 = v13;
          uint32_t v18 = 22;
        }
        else
        {
          if (!v14) {
            goto LABEL_21;
          }
          id v15 = [v8 UUID];
          *(_DWORD *)long long buf = 138412290;
          BOOL v71 = v15;
          uint64_t v16 = "Conversation manager alerted to unselected audio route, letting my other devices know for conversation UUID %@";
          int8x16_t v17 = v13;
          uint32_t v18 = 12;
        }
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);

LABEL_21:
        long long v19 = [CSDMessagingConversationMessage alloc];
        long long v20 = [v8 groupUUID];
        long long v21 = [(CSDMessagingConversationMessage *)v19 initWithType:32 groupUUID:v20 link:0];

        int v22 = objc_alloc_init(CSDMessagingConversationJoinedMetadata);
        char v60 = v3;
        [(CSDMessagingConversationJoinedMetadata *)v22 setAudioRouteUniqueIdentifier:v3];
        long long v23 = [CSDConversationParticipant alloc];
        id v24 = [v8 localParticipantIdentifier];
        long long v25 = [v8 localMember];
        long long v26 = [v25 handle];
        id v27 = +[NSData data];
        id v28 = [(CSDConversationParticipant *)v23 initWithIdentifier:v24 handle:v26 avcData:v27];

        id v58 = v28;
        id v29 = +[CSDMessagingConversationParticipant participantWithCSDConversationParticipant:v28];
        [(CSDMessagingConversationJoinedMetadata *)v22 setSender:v29];

        id v30 = v21;
        char v59 = v22;
        [(CSDMessagingConversationMessage *)v21 setJoinedMetadata:v22];
        id v31 = +[NSMutableSet set];
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        uint64_t v32 = [WeakRetained service];
        char v33 = [v32 devices];

        id v34 = [v33 countByEnumeratingWithState:&v61 objects:v69 count:16];
        if (v34)
        {
          id v35 = v34;
          uint64_t v36 = *(void *)v62;
          do
          {
            for (j = 0; j != v35; j = (char *)j + 1)
            {
              if (*(void *)v62 != v36) {
                objc_enumerationMutation(v33);
              }
              id v38 = [*(id *)(*((void *)&v61 + 1) + 8 * (void)j) destination];
              id v39 = [v38 destinationURIs];
              [(CSDMessagingConversationMessage *)v31 unionSet:v39];
            }
            id v35 = [v33 countByEnumeratingWithState:&v61 objects:v69 count:16];
          }
          while (v35);
        }

        double v40 = sub_100008DCC();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          BOOL v71 = v30;
          __int16 v72 = 2112;
          BOOL v73 = v31;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Sending UpdateJoinedMetadata message %@ to my other devices: %@", buf, 0x16u);
        }

        id v41 = [WeakRetained featureFlags];
        if ([v41 groupFacetimeAsAServiceEnabled])
        {
          id v42 = [v8 provider];

          if (v42)
          {
            id v43 = +[CSDConversationProviderManager sharedInstance];
            __int16 v44 = [v8 provider];
            id v45 = [v43 serviceForProvider:v44];

LABEL_35:
            char v46 = [v8 localMember];
            id v47 = [v46 handle];
            id v48 = [v47 value];
            id v49 = [v45 accountWithCallerID:v48];

            char v50 = [WeakRetained sendDataBlock];
            id v51 = v30;
            unsigned int v52 = [(CSDMessagingConversationMessage *)v30 data];
            id v53 = [v8 localMember];
            id v54 = [v8 capabilitySendMessageOptions];
            [v8 provider];
            id v57 = WeakRetained;
            v56 = id v55 = v45;
            ((void (**)(void, void *, void *, CSDMessagingConversationMessage *, void *, void *, void, void, void *))v50)[2](v50, v52, v49, v31, v53, v54, 0, 0, v56);

            id WeakRetained = v57;
            uint64_t v3 = v60;
LABEL_36:

            goto LABEL_37;
          }
        }
        else
        {
        }
        id v45 = [WeakRetained service];
        goto LABEL_35;
      }
    }
    else
    {
    }
    uint64_t v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Ignoring route identifier change for handoff as no conversations are currently joined.", buf, 2u);
    }
    goto LABEL_36;
  }
LABEL_37:
}

void sub_1001010C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100101204;
  block[3] = &unk_100507928;
  id v17 = v9;
  id v18 = v7;
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(void **)(a1 + 40);
  id v19 = v8;
  uint64_t v20 = v11;
  id v21 = v12;
  id v22 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 56);
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v10, block);
}

void sub_100101204(uint64_t a1)
{
  if (!*(void *)(a1 + 32) && (uint64_t v3 = *(void **)(a1 + 40)) != 0 && *(void *)(a1 + 48))
  {
    if ([v3 type] == 10)
    {
      uint64_t v4 = *(void **)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 64);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 72);
      id v11 = [*(id *)(a1 + 80) serverReceivedTime];
      objc_msgSend(v4, "handleReceivedLetMeInRequest:toPseudonym:fromHandle:responseKeyData:dateInitiated:", v6, v5, v8, v7);
    }
    else
    {
      id v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = [*(id *)(a1 + 40) type];
        *(_DWORD *)long long buf = 67109120;
        unsigned int v13 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] Decrypted conversation message but was not a let me in request: messageType: %d", buf, 8u);
      }
    }
  }
  else
  {
    uint64_t v1 = sub_100008DCC();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1003AAF60();
    }
  }
}

void sub_1001019E8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [a1[4] queue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100101B28;
  v10[3] = &unk_100507978;
  id v11 = v5;
  id v12 = a1[5];
  id v13 = v6;
  id v14 = a1[4];
  id v15 = a1[6];
  id v16 = a1[7];
  id v17 = a1[8];
  id v18 = a1[9];
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_100101B28(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = [v2 originator];
    uint64_t v4 = [v3 handle];
    id v5 = [v4 value];
    id v6 = +[TUHandle normalizedHandleWithDestinationID:v5];

    uint64_t v7 = [*(id *)(a1 + 56) activeLocalHandles];
    id v8 = v7[2]();

    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v38;
LABEL_4:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v38 != v12) {
          objc_enumerationMutation(v9);
        }
        if (objc_msgSend(*(id *)(*((void *)&v37 + 1) + 8 * v13), "isEquivalentToHandle:", v6, (void)v37))break; {
        if (v11 == (id)++v13)
        }
        {
          id v11 = [v9 countByEnumeratingWithState:&v37 objects:v41 count:16];
          if (v11) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }

      id v15 = *(void **)(a1 + 56);
      id v16 = [*(id *)(a1 + 32) groupUUID];
      id v14 = [v15 conversationWithGroupUUID:v16];

      [v14 setHasReceivedLetMeInRequest:1];
      id v17 = [*(id *)(a1 + 56) deviceSupport];
      if ([v17 isGreenTea])
      {
        id v18 = [v14 remoteMembers];
        id v19 = [v18 count];

        if (v19)
        {
          uint64_t v20 = sub_100008DCC();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            id v21 = [v14 remoteMembers];
            *(_DWORD *)long long buf = 138412290;
            id v43 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[WARN] GreenTea device does not support multiple remote members. remoteMembers = %@", buf, 0xCu);
          }
LABEL_30:

          goto LABEL_31;
        }
      }
      else
      {
      }
      if (v14)
      {
        id v24 = [*(id *)(a1 + 56) reportingController];
        long long v25 = [v14 tuConversation];
        [v24 receivedLetMeInRequestForConversation:v25];

        if ([*(id *)(a1 + 56) _shouldSkipManualApprovalForHandle:*(void *)(a1 + 64) conversation:v14 responseKeyData:*(void *)(a1 + 72)])
        {
          uint64_t v20 = sub_100008DCC();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            long long v26 = *(NSObject **)(a1 + 64);
            *(_DWORD *)long long buf = 138412290;
            id v43 = v26;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "skip manual approval for handle: %@", buf, 0xCu);
          }
          goto LABEL_30;
        }
      }
      else
      {
        id v27 = sub_100008DCC();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          id v28 = *(NSObject **)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          id v43 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Couldn't find existing conversation: %@", buf, 0xCu);
        }
      }
      uint64_t v20 = [*(id *)(a1 + 80) nickname];
      id v29 = [v20 length];
      if (v29)
      {
        id v30 = v29;
        id v31 = [*(id *)(a1 + 56) serverBag];
        id v32 = [v31 webNicknameLengthLimit];

        if (v30 > v32)
        {
          uint64_t v33 = [v20 substringToIndex:v32];

          uint64_t v20 = v33;
        }
      }
      id v34 = [objc_alloc((Class)TUConversationMember) initWithHandle:*(void *)(a1 + 64) nickname:v20 joinedFromLetMeIn:1];
      id v35 = [objc_alloc((Class)TUConversationLink) initWithDescriptor:*(void *)(a1 + 32)];
      uint64_t v36 = [*(id *)(a1 + 56) pendingMembershipTracker];
      [v36 handleNewPendingMember:v34 responseKey:*(void *)(a1 + 72) forConversation:v14 withLink:v35 dateInitiatedLMI:*(void *)(a1 + 88)];

      goto LABEL_30;
    }
LABEL_10:

    id v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v43 = v6;
      __int16 v44 = 2112;
      id v45 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dismissing let me in because link has originator handle of %@, which is not one of our active local handles %@", buf, 0x16u);
    }
LABEL_31:
  }
  else
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = *(NSObject **)(a1 + 40);
      id v23 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      id v43 = v22;
      __int16 v44 = 2112;
      id v45 = v23;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not find link for pseudonym %@, dropping let me in request. Error: %@", buf, 0x16u);
    }
  }
}

void sub_1001025B8(id *a1)
{
  if ([a1[4] type] == 11 || objc_msgSend(a1[4], "type") == 26)
  {
    if ([a1[4] hasLink])
    {
      char v2 = [a1[4] conversationGroupUUID];
      uint64_t v3 = [a1[4] link];
      uint64_t v4 = [v3 groupUUID];
      unsigned __int8 v5 = [v2 isEqual:v4];

      if (v5)
      {
        unsigned int v6 = [a1[4] type];
        BOOL v7 = v6 == 26;
        id v8 = [a1[4] link];
        id v9 = [v8 tuConversationLink];

        if (!v9)
        {
          id v14 = sub_100008DCC();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] Invalid TUConversationLink for link created/changed message (it was nil)", buf, 2u);
          }
          goto LABEL_44;
        }
        id v10 = a1[5];
        id v11 = [v9 originatorHandle];
        LOBYTE(v10) = [v10 isEquivalentToHandle:v11];

        if ((v10 & 1) == 0)
        {
          id v14 = sub_100008DCC();
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_44:

            goto LABEL_45;
          }
          id v24 = a1[5];
          id v16 = [v9 originatorHandle];
          id v25 = a1[4];
          *(_DWORD *)long long buf = 138412802;
          *(void *)long long v65 = v24;
          *(_WORD *)&v65[8] = 2112;
          *(void *)long long v66 = v16;
          *(_WORD *)&v66[8] = 2112;
          v67[0] = v25;
          long long v26 = "[WARN] Sender %@ did not match link's originator handle %@ for link created/changed message %@";
          id v27 = v14;
          uint32_t v28 = 32;
          goto LABEL_18;
        }
        id v12 = a1[6];
        uint64_t v13 = [a1[4] conversationGroupUUID];
        id v14 = [v12 conversationWithGroupUUID:v13];

        if (v14)
        {
          if (v6 != 26)
          {
            id v15 = [v14 link];

            if (v15)
            {
              id v16 = sub_100008DCC();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                id v17 = [v14 UUID];
                id v18 = a1[4];
                *(_DWORD *)long long buf = 138412546;
                *(void *)long long v65 = v17;
                *(_WORD *)&v65[8] = 2112;
                *(void *)long long v66 = v18;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[WARN] Link already exists on conversation %@ for link created message %@", buf, 0x16u);
              }
              goto LABEL_19;
            }
          }
          id v29 = [a1[6] deviceSupport];
          if ([v29 isGreenTea])
          {
            id v30 = [v14 remoteMembers];
            id v31 = [v30 count];

            if (v31)
            {
              id v16 = sub_100008DCC();
              if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_19;
              }
              id v32 = a1[4];
              *(_DWORD *)long long buf = 138412290;
              *(void *)long long v65 = v32;
              long long v26 = "[WARN] GreenTea device does not support link created/changed message because invitedMemberHandles > 1, message: %@";
              goto LABEL_30;
            }
          }
          else
          {
          }
          unsigned int v51 = v6;
          BOOL v52 = v6 == 26;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          id v53 = v14;
          long long v39 = [v14 remoteMembers];
          id v40 = [v39 countByEnumeratingWithState:&v59 objects:v63 count:16];
          if (!v40)
          {
LABEL_40:

            id v14 = v53;
LABEL_46:
            id v16 = sub_100008DCC();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              id v49 = a1[5];
              char v50 = [v14 UUID];
              *(_DWORD *)long long buf = 138412546;
              *(void *)long long v65 = v49;
              *(_WORD *)&v65[8] = 2112;
              *(void *)long long v66 = v50;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[WARN] Sender %@ is not part of conversation UUID %@.", buf, 0x16u);
            }
            goto LABEL_19;
          }
          id v41 = v40;
          uint64_t v42 = *(void *)v60;
LABEL_34:
          uint64_t v43 = 0;
          while (1)
          {
            if (*(void *)v60 != v42) {
              objc_enumerationMutation(v39);
            }
            __int16 v44 = *(void **)(*((void *)&v59 + 1) + 8 * v43);
            id v45 = [v44 handle];
            unsigned __int8 v46 = [v45 isEqualToHandle:a1[5]];

            if (v46) {
              break;
            }
            if (v41 == (id)++v43)
            {
              id v41 = [v39 countByEnumeratingWithState:&v59 objects:v63 count:16];
              if (v41) {
                goto LABEL_34;
              }
              goto LABEL_40;
            }
          }
          id v35 = v44;

          id v14 = v53;
          unsigned int v6 = v51;
          BOOL v7 = v52;
          if (!v35) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v33 = sub_100008DCC();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            id v34 = a1[5];
            *(_DWORD *)long long buf = 138412546;
            *(void *)long long v65 = v34;
            *(_WORD *)&v65[8] = 2112;
            *(void *)long long v66 = v9;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[In-Advance] Received link created/changed message from %@ with link %@", buf, 0x16u);
          }

          id v35 = [a1[6] deviceSupport];
          if ([v35 isGreenTea])
          {
            uint64_t v36 = [v9 invitedMemberHandles];
            id v37 = [v36 count];

            if ((unint64_t)v37 >= 2)
            {
              id v16 = sub_100008DCC();
              if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_19;
              }
              id v38 = a1[4];
              *(_DWORD *)long long buf = 138412290;
              *(void *)long long v65 = v38;
              long long v26 = "[WARN] GreenTea device does not support link creation message %@ because invitedMemberHandles > 1";
LABEL_30:
              id v27 = v16;
              uint32_t v28 = 12;
LABEL_18:
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
LABEL_19:

              goto LABEL_44;
            }
LABEL_43:
            id v47 = [a1[6] linkManager];
            v54[0] = _NSConcreteStackBlock;
            v54[1] = 3221225472;
            v54[2] = sub_100102CD8;
            v54[3] = &unk_1005079C8;
            id v48 = a1[5];
            v54[4] = a1[6];
            id v14 = v14;
            id v55 = v14;
            BOOL v58 = v7;
            id v56 = a1[5];
            id v57 = v9;
            [v47 storeReceivedLink:v57 fromHandle:v48 isUpdate:v6 == 26 completionHandler:v54];

            goto LABEL_44;
          }
        }

        goto LABEL_43;
      }
    }
  }
  id v9 = sub_100008DCC();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = [a1[4] type];
    unsigned int v20 = [a1[4] hasLink];
    id v21 = [a1[4] link];
    id v22 = [v21 groupUUID];
    id v23 = [a1[4] conversationGroupUUID];
    *(_DWORD *)long long buf = 67109890;
    *(_DWORD *)long long v65 = v19;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v20;
    *(_WORD *)long long v66 = 2112;
    *(void *)&v66[2] = v22;
    LOWORD(v67[0]) = 2112;
    *(void *)((char *)v67 + 2) = v23;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Not sufficiently formed link created/changed message, type: %d hasLink: %d linkGroupUUID: %@ conversationGroupUUID: %@", buf, 0x22u);
  }
LABEL_45:
}

void sub_100102CD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100102DF4;
  block[3] = &unk_100506B18;
  id v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v15 = v5;
  char v19 = *(unsigned char *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

void sub_100102DF4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v1 = sub_100008DCC();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1003AAFC8();
    }

    return;
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (!v3)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 80)) {
        CFStringRef v11 = @"YES";
      }
      else {
        CFStringRef v11 = @"NO";
      }
      id v12 = *(void **)(a1 + 56);
      uint64_t v13 = *(void *)(a1 + 64);
      int v17 = 138543874;
      CFStringRef v18 = v11;
      __int16 v19 = 2112;
      unsigned int v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[In-Advance] Link successfully stored (update: %{public}@) from %@ with linkDescriptor %@", (uint8_t *)&v17, 0x20u);
    }
    goto LABEL_17;
  }
  uint64_t v4 = +[NSSet setWithObject:IDSRegistrationPropertySupportsGondola];
  [v3 addRequiredCapabilities:v4 requiredLackOfCapabilities:0];

  LODWORD(v4) = [*(id *)(a1 + 40) setConversationLink:*(void *)(a1 + 48) allowUpdate:*(unsigned __int8 *)(a1 + 80)];
  id v5 = sub_100008DCC();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      if (*(unsigned char *)(a1 + 80)) {
        CFStringRef v7 = @"YES";
      }
      else {
        CFStringRef v7 = @"NO";
      }
      id v8 = [*(id *)(a1 + 40) UUID];
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      int v17 = 138544130;
      CFStringRef v18 = v7;
      __int16 v19 = 2112;
      unsigned int v20 = v8;
      __int16 v21 = 2112;
      uint64_t v22 = v9;
      __int16 v23 = 2112;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Ongoing] Received link created/changed (update: %{public}@) message for conversation UUID %@ from %@ with linkDescriptor %@", (uint8_t *)&v17, 0x2Au);
    }
LABEL_17:

    id v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "store received link", (uint8_t *)&v17, 2u);
    }

    [*(id *)(a1 + 72) notifyDelegatesOfChangedLink:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40)];
    return;
  }
  if (v6)
  {
    CFStringRef v15 = *(const __CFString **)(a1 + 48);
    id v16 = [*(id *)(a1 + 40) UUID];
    int v17 = 138412546;
    CFStringRef v18 = v15;
    __int16 v19 = 2112;
    unsigned int v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Did not set conversation link %@ to conversation UUID %@", (uint8_t *)&v17, 0x16u);
  }
}

void sub_100103188(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == 24
    && ([*(id *)(a1 + 32) hasLink] & 1) != 0)
  {
    char v2 = [*(id *)(a1 + 32) link];
    uint64_t v3 = [v2 tuConversationLink];

    if (v3)
    {
      uint64_t v4 = *(void **)(a1 + 40);
      id v5 = [v3 originatorHandle];
      LOBYTE(v4) = [v4 isEquivalentToHandle:v5];

      if (v4)
      {
        BOOL v6 = *(void **)(a1 + 48);
        CFStringRef v7 = [*(id *)(a1 + 32) conversationGroupUUID];
        id v8 = [v6 conversationWithGroupUUID:v7];

        uint64_t v9 = [*(id *)(a1 + 48) linkManager];
        id v31 = 0;
        uint64_t v10 = [v9 fetchActivatedLinksWithError:&v31];
        id v11 = v31;

        if (v11)
        {
          id v12 = sub_100008DCC();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
            sub_1003AB030();
          }
        }
        else
        {
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = v10;
          id v18 = v10;
          id v19 = [v18 countByEnumeratingWithState:&v27 objects:v32 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v28;
LABEL_16:
            uint64_t v22 = 0;
            while (1)
            {
              if (*(void *)v28 != v21) {
                objc_enumerationMutation(v18);
              }
              __int16 v23 = *(void **)(*((void *)&v27 + 1) + 8 * v22);
              if ([v23 isEquivalentToConversationLink:v3]) {
                break;
              }
              if (v20 == (id)++v22)
              {
                id v20 = [v18 countByEnumeratingWithState:&v27 objects:v32 count:16];
                if (v20) {
                  goto LABEL_16;
                }
                goto LABEL_22;
              }
            }
            id v12 = v23;

            if (!v12) {
              goto LABEL_27;
            }
            uint64_t v24 = sub_100008DCC();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v34 = v12;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "handleReceivedLinkInvalidatedMessage: remove link: %@", buf, 0xCu);
            }

            [*(id *)(a1 + 48) removeLink:v12 reason:8 withConversation:v8];
          }
          else
          {
LABEL_22:

LABEL_27:
            id v12 = sub_100008DCC();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              id v25 = *(NSObject **)(a1 + 32);
              *(_DWORD *)long long buf = 138412290;
              id v34 = v25;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "We are not tracking any stored link for link invalidation message %@", buf, 0xCu);
            }
          }
          uint64_t v10 = v26;
        }
      }
      else
      {
        id v8 = sub_100008DCC();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v15 = *(NSObject **)(a1 + 40);
          id v16 = [v3 originatorHandle];
          uint64_t v17 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412802;
          id v34 = v15;
          __int16 v35 = 2112;
          uint64_t v36 = v16;
          __int16 v37 = 2112;
          uint64_t v38 = v17;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[WARN] Sender %@ did not match link's originator handle %@ for link invalidation message %@", buf, 0x20u);
        }
      }
    }
    else
    {
      id v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = *(NSObject **)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        id v34 = v14;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[WARN] Invalid TUConversationLink for link invalidation message %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(NSObject **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      id v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not sufficiently formed link invalidation message %@", buf, 0xCu);
    }
  }
}

void sub_100103690(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [a1[4] queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100103770;
  v9[3] = &unk_1005053D0;
  id v10 = v4;
  id v6 = a1[5];
  id v7 = a1[4];
  id v11 = v6;
  id v12 = v7;
  id v13 = a1[6];
  id v8 = v4;
  dispatch_async(v5, v9);
}

void sub_100103770(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_100008DCC();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003AB0A4();
    }
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "removeLink completed for %@ ", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(a1 + 48) notifyDelegatesOfChangedLink:*(void *)(a1 + 40) conversation:*(void *)(a1 + 56)];
  }
}

void sub_100108F5C(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "mutableConversationsByUUID", 0);
  uint64_t v2 = [v1 allValues];

  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (([v7 isFromStorage] & 1) == 0) {
          [v7 refreshActiveParticipantsList];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100109174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010918C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v2 count]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v6 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v7 = [v6 allValues];

  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        if (([v12 isFromStorage] & 1) == 0)
        {
          id v13 = [v12 tuConversation];
          id v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          CFStringRef v15 = [v12 groupUUID];
          [v14 setObject:v13 forKeyedSubscript:v15];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v9);
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v16 = objc_msgSend(*(id *)(a1 + 32), "mutablePendingConversationsByPseudonym", 0);
  uint64_t v17 = [v16 allValues];

  id v18 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v27;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v27 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void **)(*((void *)&v26 + 1) + 8 * (void)j);
        __int16 v23 = [v22 tuConversation];
        uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        id v25 = [v22 temporaryGroupUUID];
        [v24 setObject:v23 forKeyedSubscript:v25];
      }
      id v19 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v19);
  }
}

void sub_10010951C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100109534(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _incomingPendingConversationsByGroupUUID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001099EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100109A04(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) mutablePseudonymsByCallUUID];
  uint64_t v2 = +[NSDictionary dictionaryWithDictionary:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100109B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100109BA0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v2 count]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v6 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v7 = [v6 allValues];

  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        if (*(unsigned char *)(a1 + 48)
          || ([*(id *)(*((void *)&v30 + 1) + 8 * i) isFromStorage] & 1) == 0)
        {
          id v13 = [v12 tuConversation];
          id v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          CFStringRef v15 = [v12 UUID];
          [v14 setObject:v13 forKeyedSubscript:v15];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v9);
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v16 = objc_msgSend(*(id *)(a1 + 32), "mutablePendingConversationsByPseudonym", 0);
  uint64_t v17 = [v16 allValues];

  id v18 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v27;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v27 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void **)(*((void *)&v26 + 1) + 8 * (void)j);
        __int16 v23 = [v22 tuConversation];
        uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        id v25 = [v22 temporaryGroupUUID];
        [v24 setObject:v23 forKeyedSubscript:v25];
      }
      id v19 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v19);
  }
}

void sub_10010A0BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_10010A1C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10010A2F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observerToQueue];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_10010A3F8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) service];
    uint64_t v4 = [v3 description];
    *(_DWORD *)long long buf = 138412290;
    long long v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CSDConversationManager beginning to listen on service:%@", buf, 0xCu);
  }
  id v5 = *(void **)(a1 + 32);
  int v6 = *(void **)(a1 + 40);
  uint64_t v7 = [v6 queue];
  [v5 addServiceDelegate:v6 queue:v7];

  id v8 = [*(id *)(a1 + 40) lockStateObserver];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10010A558;
  v9[3] = &unk_100504EC0;
  void v9[4] = *(void *)(a1 + 40);
  [v8 performBlockAfterFirstUnlock:v9];
}

id sub_10010A558(uint64_t a1)
{
  return [*(id *)(a1 + 32) retreiveActiveConversations];
}

void sub_10010A6B4(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18)
{
  id v88 = a2;
  id v24 = a3;
  id v87 = a4;
  id v25 = a6;
  id v86 = a7;
  id v26 = a8;
  long long v27 = v24;
  id v28 = a9;
  id v85 = a10;
  long long v29 = v26;
  id v84 = a11;
  id v30 = a12;
  id v83 = a13;
  id v82 = a14;
  id v81 = a15;
  id v80 = a16;
  long long v31 = *(void **)(a1 + 32);
  long long v32 = +[NSSet setWithArray:v29];
  long long v33 = v31;
  id v34 = v30;
  uint64_t v35 = [v33 conversationWithGroupUUID:v27 orRepresentedByRemoteMembers:v32 andLink:v30];

  BOOL v79 = (void *)v35;
  if (v35)
  {
    uint64_t v36 = sub_100008DCC();
    __int16 v37 = v79;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      [v79 UUID];
      v39 = uint64_t v38 = v34;
      *(_DWORD *)long long buf = 138412546;
      id v100 = v88;
      __int16 v101 = 2112;
      unint64_t v102 = v39;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[WARN] Not adding cached conversation with UUID %@ because we already added equivalent conversation with UUID %@", buf, 0x16u);

      id v34 = v38;
    }
    id v40 = v80;
  }
  else
  {
    uint64_t v41 = a5;
    BOOL v75 = v34;
    id v76 = v28;
    if (v34)
    {
      uint64_t v42 = [*(id *)(a1 + 32) pendingMembershipTracker];
      uint64_t v74 = [v42 retrievePendingMembersFor:v27];
    }
    else
    {
      uint64_t v74 = +[NSSet set];
    }
    id v78 = v25;
    uint64_t v43 = [*(id *)(a1 + 32) conversationProviderManager];
    BOOL v73 = [v43 tuConversationProviderForIdentifier:v81];

    __int16 v44 = sub_100008DCC();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412802;
      id v100 = v27;
      __int16 v101 = 2112;
      unint64_t v102 = v29;
      __int16 v103 = 2112;
      id v104 = v28;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Reviving cached conversation with groupUUID: %@ remoteMembers: %@ lightweightMembers: %@", buf, 0x20u);
    }

    id v45 = *(void **)(a1 + 32);
    unsigned __int8 v46 = +[NSSet setWithArray:v29];
    id v47 = +[NSSet setWithArray:v85];
    id v48 = +[NSSet setWithArray:v28];
    LOWORD(v70) = 1;
    LOBYTE(v69) = 1;
    __int16 v72 = v27;
    objc_msgSend(v45, "createConversationWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:activity:link:report:fromStorage:avMode:presentationMode:provider:screenSharingRequest:isInitiator:isOldMessage:", v88, v27, v87, v41, v78, v86, v46, v74, v47, 0, v48, 0, v75, v83, v69,
      a17,
      a18,
      v73,
      0,
    id v49 = v70);

    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    id v50 = v84;
    id v51 = [v50 countByEnumeratingWithState:&v93 objects:v98 count:16];
    if (v51)
    {
      id v52 = v51;
      uint64_t v53 = *(void *)v94;
      do
      {
        for (i = 0; i != v52; i = (char *)i + 1)
        {
          if (*(void *)v94 != v53) {
            objc_enumerationMutation(v50);
          }
          [v49 addActiveParticipant:*(void *)(*((void *)&v93 + 1) + 8 * i)];
        }
        id v52 = [v50 countByEnumeratingWithState:&v93 objects:v98 count:16];
      }
      while (v52);
    }
    BOOL v71 = v29;

    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v55 = v82;
    id v56 = [v55 countByEnumeratingWithState:&v89 objects:v97 count:16];
    if (v56)
    {
      id v57 = v56;
      uint64_t v58 = *(void *)v90;
      do
      {
        for (j = 0; j != v57; j = (char *)j + 1)
        {
          if (*(void *)v90 != v58) {
            objc_enumerationMutation(v55);
          }
          long long v60 = *(void **)(*((void *)&v89 + 1) + 8 * (void)j);
          long long v61 = [v60 activity];
          long long v62 = [v61 fromHandle];
          long long v63 = [v62 tuHandle];

          if (v63
            || ([v60 locallyPersistedMetadata],
                long long v64 = objc_claimAutoreleasedReturnValue(),
                unsigned int v65 = [v64 locallyInitiated],
                v64,
                v65))
          {
            long long v66 = [*(id *)(a1 + 32) createActivitySession:v60 onConversation:v49 fromHandle:v63];
            if (!v66)
            {
              long long v67 = sub_100008DCC();
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                id v100 = v60;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to create newActivitySession for activitySession %@", buf, 0xCu);
              }
            }
          }
          else
          {
            long long v66 = sub_100008DCC();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v100 = v60;
              _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "Failed to create activitySession from persistence since we couldn't find the trusted fromHandle on activitySession: %@", buf, 0xCu);
            }
          }
        }
        id v57 = [v55 countByEnumeratingWithState:&v89 objects:v97 count:16];
      }
      while (v57);
    }

    id v40 = v80;
    if (v80)
    {
      long long v68 = [v80 tuConversationActivitySession];
      [v49 setStagedActivitySessionForActivitySession:v68];
    }
    long long v29 = v71;
    long long v27 = v72;
    id v28 = v76;
    id v25 = v78;
    uint64_t v36 = v74;
    id v34 = v75;
    __int16 v37 = 0;
  }
}

void sub_10010B038(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10010B050(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138412802;
    *(void *)BOOL v73 = v3;
    *(_WORD *)&v73[8] = 2112;
    uint64_t v74 = v4;
    __int16 v75 = 2112;
    uint64_t v76 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "groupUUID: %@ remoteMembers: %@, conversationProvider: %@", buf, 0x20u);
  }

  int v6 = [*(id *)(a1 + 56) conversationWithGroupUUID:*(void *)(a1 + 32) orRepresentedByRemoteMembers:*(void *)(a1 + 40) andLink:*(void *)(a1 + 64)];
  if ([v6 state] == (id)4 && objc_msgSend(*(id *)(a1 + 40), "count") == (id)1 && !*(void *)(a1 + 64))
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 UUID];
      *(_DWORD *)long long buf = 138412290;
      *(void *)BOOL v73 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found existing conversation %@ but not reusing it since it's leaving and we're trying to join a U+1 call", buf, 0xCu);
    }
    int v6 = 0;
  }
  if ([v6 state] == (id)3)
  {
    id v9 = [v6 remoteMembers];
    if ([v9 count] == (id)1
      && [*(id *)(a1 + 40) count] == (id)1
      && *(void *)(a1 + 128) == 2)
    {
      unsigned int v10 = [v6 isVideo] ^ 1;
    }
    else
    {
      unsigned int v10 = 0;
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
  long long v11 = sub_100008DCC();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (!v6 || v10)
  {
    if (v12)
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)BOOL v73 = v6 == 0;
      *(_WORD *)&v73[4] = 1024;
      *(_DWORD *)&v73[6] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No conversation currently exists to join: %d, so creating a new one isConversationVideoUpgrade: %d", buf, 0xEu);
    }

    id v19 = [*(id *)(a1 + 56) activeLocalHandlesForProvider];
    uint64_t v20 = v19[2](v19, *(void *)(a1 + 48));

    uint64_t v21 = [*(id *)(a1 + 56) localCallerIDForProvider];
    uint64_t v22 = v21[2](v21, *(void *)(a1 + 48));

    __int16 v23 = *(id *)(a1 + 72);
    id v24 = v23;
    if (v23 || !v22)
    {
      if (!v23) {
        goto LABEL_49;
      }
      id v25 = *(void **)(a1 + 56);
      id v26 = [v23 handle];
      LOBYTE(v25) = [v25 isValidLocalHandle:v26 forProvider:*(void *)(a1 + 48)];

      if ((v25 & 1) == 0)
      {
        id v34 = sub_100008DCC();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)BOOL v73 = v24;
          *(_WORD *)&v73[8] = 2112;
          uint64_t v74 = v20;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[WARN] The request specified that local member %@ should be used, but the useable handles for FaceTime are %@. We cannot proceed with a handle that's not registered for FaceTime on this device.", buf, 0x16u);
        }

        goto LABEL_49;
      }
    }
    else
    {
      id v24 = [objc_alloc((Class)TUConversationMember) initWithHandle:v22 nickname:0];
      if (!v24)
      {
LABEL_49:
        id v24 = sub_100008DCC();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          sub_1003ABB68();
        }
LABEL_75:

        goto LABEL_76;
      }
    }
    long long v27 = [*(id *)(a1 + 56) featureFlags];
    long long v64 = v6;
    if (![v27 nameAndPhotoEnabled]) {
      goto LABEL_54;
    }
    id v28 = [*(id *)(a1 + 56) featureFlags];
    if ([v28 nameAndPhotoBackwardsCompatibilityEnabled])
    {
      long long v29 = [v24 nickname];

      if (v29)
      {
LABEL_55:
        id v39 = [*(id *)(a1 + 40) mutableCopy];
        uint64_t v65 = a1;
        long long v62 = v22;
        long long v63 = v20;
        if (_TUIsInternalInstall())
        {
          id v40 = +[NSUserDefaults tu_defaults];
          long long v66 = [v40 stringForKey:@"DefaultsRemovedURI"];
        }
        else
        {
          long long v66 = 0;
        }
        id v41 = objc_alloc_init((Class)NSMutableSet);
        long long v67 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        id v42 = v39;
        id v43 = [v42 countByEnumeratingWithState:&v67 objects:v71 count:16];
        if (v43)
        {
          id v44 = v43;
          uint64_t v45 = *(void *)v68;
          do
          {
            for (i = 0; i != v44; i = (char *)i + 1)
            {
              if (*(void *)v68 != v45) {
                objc_enumerationMutation(v42);
              }
              id v47 = *(void **)(*((void *)&v67 + 1) + 8 * i);
              id v48 = [v47 handle];
              id v49 = [v24 handle];
              unsigned __int8 v50 = [v48 isEqualToHandle:v49];

              if ((v50 & 1) == 0)
              {
                if (!_TUIsInternalInstall()) {
                  continue;
                }
                id v51 = [v47 handle];
                id v52 = [v51 value];
                unsigned int v53 = [v66 isEqualToString:v52];

                if (!v53) {
                  continue;
                }
              }
              [v41 addObject:v47];
            }
            id v44 = [v42 countByEnumeratingWithState:&v67 objects:v71 count:16];
          }
          while (v44);
        }

        if ([v41 count]) {
          [v42 minusSet:v41];
        }
        a1 = v65;
        uint64_t v20 = v63;
        if (*(void *)(v65 + 64))
        {
          id v54 = [*(id *)(v65 + 56) pendingMembershipTracker];
          id v55 = [v54 retrievePendingMembersFor:*(void *)(v65 + 32)];
        }
        else
        {
          id v55 = +[NSSet set];
        }
        id v56 = *(void **)(v65 + 56);
        id v57 = +[NSUUID UUID];
        objc_msgSend(v56, "createConversationIfNecessaryWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:link:activity:avMode:presentationMode:provider:screenSharingRequest:", v57, *(void *)(v65 + 32), *(void *)(v65 + 80), 1, v24, v42, v55, *(void *)(v65 + 88), *(void *)(v65 + 96), 0, *(void *)(v65 + 64), *(void *)(v65 + 104), *(void *)(v65 + 128), *(void *)(v65 + 136), *(void *)(v65 + 48),
        uint64_t v58 = *(void *)(v65 + 112));

        int v6 = (void *)v58;
        uint64_t v22 = v62;
        goto LABEL_75;
      }
      id v30 = [*(id *)(a1 + 56) getPersonalNicknameBlock];
      long long v27 = v30[2]();

      long long v31 = sub_100008DCC();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        *(void *)BOOL v73 = v24;
        *(_WORD *)&v73[8] = 2112;
        uint64_t v74 = v27;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Attempting to update localMember: %@ with nickname: %@", buf, 0x16u);
      }

      long long v32 = [v27 firstName];
      if ([v32 length])
      {
      }
      else
      {
        uint64_t v35 = [v27 lastName];
        id v36 = [v35 length];

        if (!v36)
        {
LABEL_54:

          goto LABEL_55;
        }
      }
      id v28 = [v27 firstName];
      __int16 v37 = [v27 lastName];
      uint64_t v38 = +[NSString stringWithFormat:@"%@ %@", v28, v37];
      [v24 setNickname:v38];
    }
    goto LABEL_54;
  }
  if (v12)
  {
    id v13 = [v6 UUID];
    id v14 = [v6 groupUUID];
    *(_DWORD *)long long buf = 138412546;
    *(void *)BOOL v73 = v13;
    *(_WORD *)&v73[8] = 2112;
    uint64_t v74 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found existing conversation with UUID: %@, groupUUID: %@", buf, 0x16u);
  }
  if ([v6 isFromStorage])
  {
    CFStringRef v15 = sub_100008DCC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v6 UUID];
      *(_DWORD *)long long buf = 138412290;
      *(void *)BOOL v73 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Activating cached conversation from storage with UUID: %@ as someone seems to be interested in it.", buf, 0xCu);
    }
    [v6 setFromStorage:0];
  }
  uint64_t v17 = [*(id *)(a1 + 56) featureFlags];
  if ([v17 groupFacetimeAsAServiceEnabled]) {
    char v18 = [*(id *)(a1 + 48) supportsSharePlay] ^ 1;
  }
  else {
    char v18 = 0;
  }

  if (*(void *)(a1 + 104) && (v18 & 1) == 0) {
    id v33 = objc_msgSend(v6, "createStagedActivitySessionForActivity:");
  }
LABEL_76:
  [v6 setProvider:*(void *)(a1 + 48)];
  uint64_t v59 = [v6 tuConversation];
  uint64_t v60 = *(void *)(*(void *)(a1 + 120) + 8);
  long long v61 = *(void **)(v60 + 40);
  *(void *)(v60 + 40) = v59;
}

void sub_10010BA3C(id *a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    id v4 = a1[5];
    *(_DWORD *)long long buf = 138412546;
    id v55 = v3;
    __int16 v56 = 2112;
    id v57 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "joinExistingConversationWithUUID: %@ context: %@", buf, 0x16u);
  }

  uint64_t v5 = [a1[6] mutableConversationsByUUID];
  int v6 = [v5 objectForKeyedSubscript:a1[4]];

  if (!v6)
  {
    long long v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      id v55 = v15;
      id v14 = "[WARN] Could not find conversation with UUID: %@";
      goto LABEL_14;
    }
LABEL_15:

    goto LABEL_16;
  }
  if ([v6 state] == (id)2 || objc_msgSend(v6, "state") == (id)3)
  {
    uint64_t v7 = [a1[6] featureFlags];
    unsigned __int8 v8 = [v7 avLessSharePlayEnabled];

    if ((v8 & 1) == 0)
    {
      long long v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = a1[4];
        *(_DWORD *)long long buf = 138412290;
        id v55 = v16;
        id v14 = "Ignoring request to join conversation with UUID: %@ since conversation is already joined";
        goto LABEL_14;
      }
      goto LABEL_15;
    }
    id v9 = [a1[5] avMode];
    id v10 = [v6 avMode];
    long long v11 = sub_100008DCC();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v9 == v10)
    {
      if (v12)
      {
        id v13 = a1[4];
        *(_DWORD *)long long buf = 138412290;
        id v55 = v13;
        id v14 = "Ignoring request to join conversation with UUID: %@ since conversation is already joined";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    if (v12)
    {
      id v40 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      id v55 = v40;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Request to join conversation is trying to change avMode on conversation UUID: %@", buf, 0xCu);
    }

    objc_msgSend(v6, "setVideoEnabled:", objc_msgSend(a1[5], "isVideoEnabled"));
    objc_msgSend(v6, "setLocalParticipantAudioVideoMode:presentationMode:", objc_msgSend(a1[5], "avMode"), objc_msgSend(a1[5], "presentationMode"));
  }
  else
  {
    uint64_t v17 = [a1[5] collaborationIdentifier];

    if (v17)
    {
      char v18 = [a1[5] collaborationIdentifier];
      id v19 = +[NSMutableSet setWithObjects:](NSMutableSet, "setWithObjects:", v18, 0);

      [v6 setHighlightIdentifiers:v19];
    }
    uint64_t v20 = [a1[6] mutableConversationsByUUID];
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_10010C0C8;
    v50[3] = &unk_100507A68;
    id v21 = v6;
    id v51 = v21;
    id v52 = a1[4];
    [v20 enumerateKeysAndObjectsUsingBlock:v50];

    objc_msgSend(a1[5], "setOneToOneModeEnabled:", objc_msgSend(v21, "isOneToOneModeEnabled"));
    uint64_t v22 = [v21 provider];
    [a1[5] setProvider:v22];

    if ([a1[5] isOneToOneModeEnabled])
    {
      __int16 v23 = sub_100008DCC();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        id v24 = a1[5];
        *(_DWORD *)long long buf = 138412290;
        id v55 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Updating context to use isOneToOneModeEnabled=true %@", buf, 0xCu);
      }
    }
    objc_msgSend(a1[5], "setVideoPaused:", objc_msgSend(v21, "isVideoPaused"));
    id v25 = [a1[6] featureFlags];
    objc_msgSend(a1[5], "setGftDowngradeToOneToOneAvailable:", objc_msgSend(v25, "gftDowngradeToOneToOne"));

    id v26 = [a1[6] featureFlags];
    objc_msgSend(a1[5], "setUPlusNDowngradeAvailable:", objc_msgSend(v26, "uPlusNDowngrade"));

    long long v27 = [a1[6] featureFlags];
    objc_msgSend(a1[5], "setUPlusOneScreenShareAvailable:", objc_msgSend(v27, "uPlusOneScreenSharing"));

    id v28 = [a1[6] featureFlags];
    [v21 isRelaying];
    [a1[6] isScreenSharingInitiationAvailable];
    [a1[5] setSupportsRequestToScreenShare:TUIsRequestToScreenShareAvailable()];

    [v21 joinUsingContext:a1[5]];
    long long v29 = [a1[5] activity];

    if (v29)
    {
      id v43 = v21;
      id v44 = v6;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id obj = [v21 tuActivitySessions];
      id v30 = [obj countByEnumeratingWithState:&v46 objects:v53 count:16];
      if (v30)
      {
        id v31 = v30;
        uint64_t v32 = *(void *)v47;
        while (2)
        {
          for (i = 0; i != v31; i = (char *)i + 1)
          {
            if (*(void *)v47 != v32) {
              objc_enumerationMutation(obj);
            }
            id v34 = *(void **)(*((void *)&v46 + 1) + 8 * i);
            uint64_t v35 = [v34 activity];
            id v36 = [v35 UUID];
            __int16 v37 = [a1[5] activity];
            uint64_t v38 = [v37 UUID];
            unsigned int v39 = [v36 isEqual:v38];

            if (v39)
            {
              id v41 = sub_100008DCC();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                id v42 = [a1[5] activity];
                *(_DWORD *)long long buf = 138412290;
                id v55 = v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Conversation join is for a new activity: %@, broadcasting image.", buf, 0xCu);
              }
              [a1[6] broadcastImageForSession:v34 onConversation:v43];
              goto LABEL_39;
            }
          }
          id v31 = [obj countByEnumeratingWithState:&v46 objects:v53 count:16];
          if (v31) {
            continue;
          }
          break;
        }
      }
LABEL_39:

      int v6 = v44;
    }
  }
LABEL_16:
}

void sub_10010C0C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  if ([v6 state] == (id)2 || objc_msgSend(v6, "state") == (id)3)
  {
    uint64_t v7 = [*(id *)(a1 + 32) activitySessions];
    if ([v7 count])
    {
      BOOL v8 = 1;
    }
    else
    {
      id v9 = [v6 activitySessions];
      BOOL v8 = [v9 count] != 0;
    }
    if ([v6 state] == (id)3
      && [v6 isOneToOneModeEnabled]
      && (unsigned int v10 = [*(id *)(a1 + 32) isOneToOneModeEnabled], (v8 | v10 ^ 1) != 1))
    {
      unsigned int v13 = v10;
      id v14 = sub_100008DCC();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v15 = @"YES";
        if (!v13) {
          CFStringRef v15 = @"NO";
        }
        int v16 = 138412546;
        CFStringRef v17 = @"NO";
        __int16 v18 = 2112;
        CFStringRef v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not leaving converastion because hasAnyActivitySessions: %@, isOneToOneEnabled: %@", (uint8_t *)&v16, 0x16u);
      }
    }
    else
    {
      long long v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v12 = *(const __CFString **)(a1 + 40);
        int v16 = 138412546;
        CFStringRef v17 = v5;
        __int16 v18 = 2112;
        CFStringRef v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[WARN] Leaving existing conversation with UUID: %@ in favor of new conversation with UUID: %@", (uint8_t *)&v16, 0x16u);
      }

      [v6 leave];
    }
  }
}

void sub_10010C41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010C434(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v44 = v3;
    __int16 v45 = 2112;
    uint64_t v46 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LMI: Creating pending conversation for link: %@, localMember: %@", buf, 0x16u);
  }

  id v5 = *(id *)(a1 + 40);
  id v6 = *(void **)(a1 + 40);
  if (!v6
    || ([v6 handle],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        [v7 value],
        BOOL v8 = objc_claimAutoreleasedReturnValue(),
        id v9 = [v8 length],
        v8,
        v7,
        !v9))
  {
    id v10 = objc_alloc((Class)TUConversationMember);
    long long v11 = [*(id *)(a1 + 48) localCallerID];
    CFStringRef v12 = v11[2]();
    id v13 = [v10 initWithHandle:v12 nickname:0];

    id v5 = v13;
  }
  id v14 = [v5 handle];

  if (v14)
  {
    CFStringRef v15 = [CSDPendingConversation alloc];
    uint64_t v16 = *(void *)(a1 + 32);
    CFStringRef v17 = [*(id *)(a1 + 48) queue];
    id v33 = v5;
    __int16 v18 = [(CSDPendingConversation *)v15 initWithConversationLink:v16 localMember:v5 queue:v17];

    [(CSDPendingConversation *)v18 setVideoEnabled:*(unsigned __int8 *)(a1 + 64)];
    [(CSDPendingConversation *)v18 setLetMeInRequestState:1];
    CFStringRef v19 = [*(id *)(a1 + 48) mutablePendingConversationsByPseudonym];
    uint64_t v20 = [*(id *)(a1 + 32) pseudonym];
    [v19 setObject:v18 forKeyedSubscript:v20];

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = [*(id *)(a1 + 48) delegateToQueue];
    id v21 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v39;
      do
      {
        id v24 = 0;
        do
        {
          if (*(void *)v39 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v25 = *(void *)(*((void *)&v38 + 1) + 8 * (void)v24);
          id v26 = [(CSDPendingConversation *)v18 tuConversation];
          long long v27 = [*(id *)(a1 + 48) delegateToQueue];
          id v28 = [v27 objectForKey:v25];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10010C7C0;
          block[3] = &unk_100504FE0;
          void block[4] = v25;
          id v36 = v26;
          uint64_t v37 = *(void *)(a1 + 48);
          id v29 = v26;
          dispatch_async(v28, block);

          id v24 = (char *)v24 + 1;
        }
        while (v22 != v24);
        id v22 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
      }
      while (v22);
    }

    uint64_t v30 = [(CSDPendingConversation *)v18 tuConversation];
    uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v32 = *(void **)(v31 + 40);
    *(void *)(v31 + 40) = v30;

    id v5 = v33;
  }
}

void sub_10010C7C0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    CFStringRef v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_10010C9BC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    char v2 = [*(id *)(a1 + 32) mutablePendingConversationsByPseudonym];
    uint64_t v3 = [v2 allValues];

    id v4 = [v3 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v24;
LABEL_4:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v23 + 1) + 8 * v7);
        int v9 = [v8 link];
        uint64_t v10 = [v9 pseudonym];
        unsigned __int8 v11 = [v10 isEqualToString:*(void *)(a1 + 40)];

        if (v11) {
          break;
        }
        if (v5 == (id)++v7)
        {
          id v5 = [v3 countByEnumeratingWithState:&v23 objects:v29 count:16];
          if (v5) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }
      id v12 = v8;

      if (!v12) {
        goto LABEL_15;
      }
      id v13 = sub_100008DCC();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v12 link];
        *(_DWORD *)long long buf = 138412290;
        id v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LMI: Requesting membership in pending conversation for link %@", buf, 0xCu);
      }
      CFStringRef v15 = [CSDMessagingConversationMessage alloc];
      uint64_t v16 = [v12 link];
      CFStringRef v17 = [(CSDMessagingConversationMessage *)v15 initWithType:10 groupUUID:0 link:v16];

      __int16 v18 = [*(id *)(a1 + 32) linkManager];
      CFStringRef v19 = [v12 link];
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10010CC90;
      v21[3] = &unk_100507AB8;
      v21[4] = *(void *)(a1 + 32);
      id v22 = v12;
      uint64_t v20 = v12;
      [v18 encryptLetMeInRequest:v17 link:v19 completionHandler:v21];
    }
    else
    {
LABEL_10:

LABEL_15:
      uint64_t v20 = sub_100008DCC();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1003ABBD0();
      }
    }
  }
}

void sub_10010CC90(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010CDA8;
  block[3] = &unk_1005053A8;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v20 = v11;
  uint64_t v21 = v12;
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v10, block);
}

void sub_10010CDA8(uint64_t a1)
{
  if (!*(void *)(a1 + 32) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 56), "setLetMeInKeyAgreement:");
    uint64_t v3 = [CSDMessagingConversationMessage alloc];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [*(id *)(a1 + 56) link];
    uint64_t v1 = [(CSDMessagingConversationMessage *)v3 initWithEncryptedMessage:v4 enclosedType:10 link:v5];

    uint64_t v6 = [v1 data];
    id v7 = [*(id *)(a1 + 56) localMember];
    id v8 = [*(id *)(a1 + 64) service];
    id v9 = [v7 handle];
    uint64_t v10 = [v9 value];
    uint64_t v11 = [v8 accountWithCallerID:v10];

    uint64_t v12 = [*(id *)(a1 + 56) link];
    id v13 = [v12 pseudonym];
    id v14 = v7;
    uint64_t v15 = +[TUHandle normalizedGenericHandleForValue:v13];

    uint64_t v16 = (void *)v11;
    id v17 = objc_alloc((Class)NSDictionary);
    id v18 = objc_msgSend(v17, "initWithObjectsAndKeys:", &off_100523B18, IDSSendMessageOptionForceQuery, 0);
    id v19 = [*(id *)(a1 + 64) sendDataBlock];
    uint64_t v44 = (void *)v15;
    id v20 = TUCopyIDSCanonicalAddressForHandle();
    uint64_t v21 = v18;
    id v22 = +[NSSet setWithObject:v20];
    id v53 = 0;
    LOBYTE(v18) = ((uint64_t (**)(void, void *, void *, void *, void *, id, id *, void, void))v19)[2](v19, v6, v16, v22, v14, v18, &v53, 0, 0);
    id v45 = v53;

    long long v23 = sub_100008DCC();
    long long v24 = v23;
    if (v18)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        long long v25 = [*(id *)(a1 + 56) link];
        *(_DWORD *)long long buf = 138412290;
        __int16 v56 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Sent let me in request for link %@", buf, 0xCu);
      }
      [*(id *)(a1 + 56) setLetMeInRequestState:2];
      if (v45)
      {
        long long v26 = [*(id *)(a1 + 56) link];
        long long v27 = [v26 pseudonym];
        id v28 = [*(id *)(a1 + 64) mutablePseudonymsByRequestIdentifiers];
        [v28 setObject:v27 forKeyedSubscript:v45];
      }
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v24 = [*(id *)(a1 + 64) delegateToQueue];
      id v29 = [v24 countByEnumeratingWithState:&v49 objects:v54 count:16];
      if (v29)
      {
        id v30 = v29;
        long long v40 = v21;
        long long v41 = v16;
        id v42 = v14;
        id v43 = v6;
        uint64_t v31 = *(void *)v50;
        do
        {
          for (i = 0; i != v30; i = (char *)i + 1)
          {
            if (*(void *)v50 != v31) {
              objc_enumerationMutation(v24);
            }
            uint64_t v33 = *(void *)(*((void *)&v49 + 1) + 8 * i);
            id v34 = [*(id *)(a1 + 56) tuConversation];
            uint64_t v35 = [*(id *)(a1 + 64) delegateToQueue];
            id v36 = [v35 objectForKey:v33];

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10010D280;
            block[3] = &unk_100504FE0;
            void block[4] = v33;
            id v47 = v34;
            uint64_t v48 = *(void *)(a1 + 64);
            id v37 = v34;
            dispatch_async(v36, block);
          }
          id v30 = [v24 countByEnumeratingWithState:&v49 objects:v54 count:16];
        }
        while (v30);
        uint64_t v6 = v43;
        uint64_t v16 = v41;
        id v14 = v42;
        long long v38 = v44;
        long long v39 = v45;
        uint64_t v21 = v40;
        goto LABEL_23;
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      sub_1003ABCA4();
    }
    long long v38 = v44;
    long long v39 = v45;
LABEL_23:

    goto LABEL_4;
  }
  uint64_t v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_1003ABC3C();
  }
LABEL_4:
}

void sub_10010D280(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_10010D9E0(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UUID: %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  char v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v5)
  {
    [v5 setLetMeInRequestState:*(void *)(a1 + 56)];
    [v5 setLink:*(void *)(a1 + 48)];
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v6 = [*(id *)(a1 + 40) delegateToQueue];
    id v7 = [v6 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v25;
      id obj = v6;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v25 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          uint64_t v12 = objc_msgSend(v5, "tuConversation", obj);
          id v13 = [*(id *)(a1 + 40) delegateToQueue];
          id v14 = [v13 objectForKey:v11];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10010DCBC;
          block[3] = &unk_100504FE0;
          void block[4] = v11;
          id v22 = v12;
          uint64_t v23 = *(void *)(a1 + 40);
          id v15 = v12;
          dispatch_async(v14, block);
        }
        uint64_t v6 = obj;
        id v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v6;
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      id v19 = [v18 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v29 = v17;
      uint64_t v6 = v16;
      __int16 v30 = 2112;
      uint64_t v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with UUID %@. All conversation UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_10010DCBC(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_10010E400(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UUID: %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  char v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v5)
  {
    [v5 startAudio];
  }
  else
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v8 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      int v9 = [v8 allKeys];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      id v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with UUID %@. All conversations UUIDs: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_10010E83C(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v5 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  uint64_t v3 = *(void **)(a1 + 32);
  if (v5) {
    [v3 _leaveConversation:v5 withContext:*(void *)(a1 + 48)];
  }
  else {
    id v4 = [v3 _removePendingConversationsWithTemporaryGroupUUIDIfNecessary:*(void *)(a1 + 40)];
  }
}

void sub_10010E950(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  char v2 = objc_msgSend(*(id *)(a1 + 32), "mutableConversationsByUUID", 0);
  uint64_t v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _leaveConversation:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_10010EB34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) mutablePseudonymsByCallUUID];
  [v3 setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10010EC44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutablePseudonymsByCallUUID];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10010ED54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setUplinkMuted:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10010EE7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setVideo:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10010EF9C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  id v4 = [v3 remoteMembers];
  id v5 = [v4 count];

  if (v5 == (id)1)
  {
    id v6 = objc_alloc((Class)TUConversationMember);
    uint64_t v7 = [v3 activeRemoteParticipants];
    long long v8 = [v7 allObjects];
    long long v9 = [v8 firstObject];
    long long v10 = [v9 tuConversationParticipant];
    long long v11 = [v10 handle];
    id v12 = [v6 initWithHandle:v11];

    id v13 = [CSDMessagingConversationMessage alloc];
    id v14 = [v3 groupUUID];
    id v15 = [(CSDMessagingConversationMessage *)v13 initWithType:22 groupUUID:v14 link:0];

    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = [(CSDMessagingConversationMessage *)v15 data];
    [v16 sendData:v17 onConversation:v3 toMember:v12];
  }
  else
  {
    id v18 = sub_100008DCC();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1003ABD0C();
    }
  }
}

void sub_10010F1EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setVideoEnabled:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10010F314(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "mutablePendingConversationsByPseudonym", 0);
  id v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v3);
        }
        long long v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v10 = [v9 temporaryGroupUUID];
        unsigned int v11 = [v10 isEqual:*(void *)(a1 + 40)];

        if (v11)
        {
          id v12 = v9;

          [v12 setUplinkMuted:*(unsigned __int8 *)(a1 + 48)];
          id v6 = v12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v5);
  }
  else
  {
    id v6 = 0;
  }

  id v13 = [v6 link];
  id v14 = [v13 pseudonym];

  if (v14)
  {
    id v15 = sub_100008DCC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v6 link];
      uint64_t v17 = [v16 pseudonym];
      id v18 = [v6 conversationGroupUUID];
      *(_DWORD *)long long buf = 138412546;
      long long v27 = v17;
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating pending conversation with pseudonym: %@, conversation group UUID: %@", buf, 0x16u);
    }
    id v19 = [*(id *)(a1 + 32) mutablePendingConversationsByPseudonym];
    id v20 = [v6 link];
    uint64_t v21 = [v20 pseudonym];
    [v19 setObject:v6 forKeyedSubscript:v21];
  }
}

void sub_10010F638(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "mutablePendingConversationsByPseudonym", 0);
  id v3 = [v2 allValues];

  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v3);
        }
        long long v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v10 = [v9 temporaryGroupUUID];
        unsigned int v11 = [v10 isEqual:*(void *)(a1 + 40)];

        if (v11)
        {
          id v12 = v9;

          [v12 setVideoEnabled:*(unsigned __int8 *)(a1 + 48)];
          id v6 = v12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v5);
  }
  else
  {
    id v6 = 0;
  }

  id v13 = [v6 link];
  id v14 = [v13 pseudonym];

  if (v14)
  {
    id v15 = sub_100008DCC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v6 link];
      uint64_t v17 = [v16 pseudonym];
      id v18 = [v6 conversationGroupUUID];
      *(_DWORD *)long long buf = 138412546;
      long long v27 = v17;
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating pending conversation with pseudonym: %@, conversation group UUID: %@", buf, 0x16u);
    }
    id v19 = [*(id *)(a1 + 32) mutablePendingConversationsByPseudonym];
    id v20 = [v6 link];
    uint64_t v21 = [v20 pseudonym];
    [v19 setObject:v6 forKeyedSubscript:v21];
  }
}

void sub_10010F9C0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked for participant to share their screen: %@", (uint8_t *)&v15, 0xCu);
  }

  id v4 = [*(id *)(a1 + 32) handle];
  id v5 = TUNormalizedHandleForTUHandle();

  id v6 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  uint64_t v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 48)];

  if (v7)
  {
    long long v8 = [v7 remoteParticipantForHandle:v5];
    if (v8)
    {
      if ([*(id *)(a1 + 40) conversationContainsScreenShareRequest:v7 localRequest:1 requestHandle:v5])
      {
        long long v9 = sub_100008DCC();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1003ABDDC();
        }
      }
      else
      {
        [*(id *)(a1 + 40) cancelPreviouslySentScreenShareRequests:v7];
        id v13 = objc_alloc((Class)TUScreenSharingRequest);
        id v14 = +[NSUUID UUID];
        long long v9 = objc_msgSend(v13, "initWithHandle:type:originType:UUID:participantIdentifier:", v5, 1, 2, v14, objc_msgSend(*(id *)(a1 + 32), "identifier"));

        [v7 addScreenSharingRequest:v9];
        [*(id *)(a1 + 40) requestParticipant:*(void *)(a1 + 32) toScreenShareWithRequest:v9 conversation:v7];
      }
    }
    else
    {
      long long v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1003ABD74();
      }
    }
  }
  else
  {
    long long v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      id v12 = [v11 allKeys];
      int v15 = 138412546;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v15, 0x16u);
    }
  }
}

void sub_10010FD20(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (!v3)
  {
    id v5 = sub_100008DCC();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    unsigned int v11 = [v10 allKeys];
    int v14 = 138412546;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    __int16 v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v14, 0x16u);

LABEL_9:
    goto LABEL_14;
  }
  id v4 = [*(id *)(a1 + 48) handle];
  id v5 = [v3 remoteParticipantForHandle:v4];

  if (!v5)
  {
    uint64_t v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1003ABE44();
    }
    goto LABEL_9;
  }
  unsigned int v6 = [*(id *)(a1 + 48) isLocallyOriginated];
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v6) {
    [v7 requestParticipant:v5 toCancelScreenShareRequest:v8 conversation:v3];
  }
  else {
    [v7 denyScreenShareRequestFrom:v5 screenShareRequest:v8 conversation:v3];
  }
  id v12 = sub_100008DCC();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    int v14 = 138412546;
    uint64_t v15 = v13;
    __int16 v16 = 2112;
    __int16 v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Cancel screen share request: %@ from conversation: %@", (uint8_t *)&v14, 0x16u);
  }

  [v3 removeScreenSharingRequest:*(void *)(a1 + 48)];
LABEL_14:
}

void sub_10011008C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (!v3)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v8 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unable to find conversation with UUID: %@", buf, 0xCu);
    }
    goto LABEL_8;
  }
  int v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 == [v3 isScreenEnabled])
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 56)) {
        CFStringRef v6 = @"YES";
      }
      else {
        CFStringRef v6 = @"NO";
      }
      uint64_t v7 = [v3 UUID];
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v42 = v6;
      __int16 v43 = 2112;
      uint64_t v44 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not setting screenEnabled to %@ because conversation %@ is already in that state", buf, 0x16u);
    }
LABEL_8:

    goto LABEL_23;
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v31 = _NSConcreteStackBlock;
  uint64_t v32 = 3221225472;
  uint64_t v33 = sub_1001105D0;
  id v34 = &unk_100507AE0;
  objc_copyWeak(&v38, &location);
  id v9 = v3;
  id v35 = v9;
  char v39 = *(unsigned char *)(a1 + 56);
  id v36 = *(id *)(a1 + 48);
  id v37 = *(id *)(a1 + 40);
  uint64_t v10 = objc_retainBlock(&v31);
  if (!*(unsigned char *)(a1 + 56))
  {
    id v18 = sub_100008DCC();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing all pending screenEnabled blocks since screenEnabled=NO", buf, 2u);
    }

    id v19 = objc_msgSend(*(id *)(a1 + 32), "screenCaptureQueue", v31, v32, v33, v34, v35, v36);
    [v19 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

    goto LABEL_21;
  }
  unsigned int v11 = objc_msgSend(*(id *)(a1 + 32), "screenCaptureQueue", v31, v32, v33, v34);
  id v12 = [v11 objectForKeyedSubscript:*(void *)(a1 + 40)];
  BOOL v13 = v12 == 0;

  if (v13)
  {
    id v20 = [v9 localParticipant];
    BOOL v21 = [v20 audioVideoMode] == 0;

    if (v21)
    {
      long long v22 = sub_100008DCC();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Upgrading to Audio mode since screenEnabled is YES", buf, 2u);
      }

      long long v23 = *(void **)(a1 + 32);
      long long v24 = [v9 UUID];
      [v23 setLocalParticipantAudioVideoMode:1 forConversationUUID:v24];

      long long v25 = objc_retainBlock(v10);
      long long v26 = [*(id *)(a1 + 32) screenCaptureQueue];
      [v26 setObject:v25 forKeyedSubscript:*(void *)(a1 + 40)];

      long long v27 = sub_100008DCC();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v28 = [*(id *)(a1 + 32) screenCaptureQueue];
        uint64_t v29 = [v28 objectForKeyedSubscript:*(void *)(a1 + 40)];
        __int16 v30 = objc_retainBlock(v29);
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v42 = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Queued up screenEnable request: %@", buf, 0xCu);
      }
      goto LABEL_22;
    }
LABEL_21:
    ((void (*)(void ***))v10[2])(v10);
LABEL_22:

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);
    goto LABEL_23;
  }
  int v14 = sub_100008DCC();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = [*(id *)(a1 + 32) screenCaptureQueue];
    __int16 v16 = [v15 objectForKeyedSubscript:*(void *)(a1 + 40)];
    __int16 v17 = objc_retainBlock(v16);
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v42 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not enabling ScreenSharing because we already have a queued up request %@", buf, 0xCu);
  }
  objc_destroyWeak(&v38);
  objc_destroyWeak(&location);
LABEL_23:
}

void sub_100110594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001105D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) setScreenEnabled:*(unsigned __int8 *)(a1 + 64) attributes:*(void *)(a1 + 40)];
    uint64_t v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 64)) {
        CFStringRef v4 = @"YES";
      }
      else {
        CFStringRef v4 = @"NO";
      }
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      int v12 = 138412802;
      CFStringRef v13 = v4;
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      __int16 v16 = 2112;
      uint64_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting screen enabled %@ with attributes %@ for conversation UUID: %@", (uint8_t *)&v12, 0x20u);
    }

    int v7 = *(unsigned __int8 *)(a1 + 64);
    CFStringRef v8 = [WeakRetained screenSharingActivityManager];
    id v9 = v8;
    if (v7)
    {
      uint64_t v10 = [*(id *)(a1 + 32) localMember];
      unsigned int v11 = [v10 handle];
      [v9 startActivitySessionFor:v11 with:*(void *)(a1 + 40)];
    }
    else
    {
      [v8 stopActivitySession];
    }

    [WeakRetained conversationChanged:*(void *)(a1 + 32)];
  }
}

void sub_1001107FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setVideoPaused:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100110924(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setAudioPaused:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100110A4C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setRelaying:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100110B74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) featureFlags];
  int v3 = TUCallScreeningEnabled();

  if (v3)
  {
    CFStringRef v4 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    id v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 40)];

    [v5 setScreening:*(unsigned __int8 *)(a1 + 48)];
  }
}

void sub_100110CDC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setAudioInjectionAllowed:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100110E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100110EA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 isRelaying];
}

void sub_100110FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100111014(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 isScreening];
}

void sub_100111174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011118C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 presentationState];
}

void sub_1001112BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setPresentationState:*(unsigned int *)(a1 + 48)];
}

void sub_100111404(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  objc_msgSend(v3, "setPresentationRect:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

void sub_100111530(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v3 setConversationGridDisplayMode:*(void *)(a1 + 48)];
}

void sub_100111674(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v4 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  [v4 setScreenShareAttributes:*(void *)(a1 + 48)];
  id v3 = [*(id *)(a1 + 32) screenSharingActivityManager];
  [v3 broadcastAttributes:*(void *)(a1 + 48)];
}

void sub_1001117D4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ remoteMembers: %@", (uint8_t *)&v11, 0x16u);
  }

  id v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  uint64_t v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 removeRemoteMembers:*(void *)(a1 + 40) triggeredLocally:0];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      uint64_t v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      __int16 v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100111AE8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v28 = v3;
    __int16 v29 = 2112;
    __int16 v30 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ remoteMembers: %@", buf, 0x16u);
  }

  id v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v28 = v6;
    __int16 v29 = 2112;
    __int16 v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ otherInvitedHandles: %@", buf, 0x16u);
  }

  uint64_t v8 = [*(id *)(a1 + 56) mutableConversationsByUUID];
  id v9 = [v8 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v9)
  {
    uint64_t v10 = [*(id *)(a1 + 56) deviceSupport];
    if ([v10 isGreenTea])
    {
      int v11 = [v9 remoteMembers];
      id v12 = [v11 count];

      if (v12 == (id)1)
      {
        __int16 v13 = sub_100008DCC();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_1003ABEAC(v9, v13);
        }

        __int16 v14 = +[CSDConversationLeaveContext greenTeaLeaveContext];
        [v9 leaveUsingContext:v14];
        goto LABEL_15;
      }
    }
    else
    {
    }
    id v18 = *(void **)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100111DF4;
    v22[3] = &unk_1005053D0;
    long long v23 = v9;
    id v24 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    id v25 = v20;
    uint64_t v26 = v21;
    [v18 maybeAddComplementaryAssociationVoucherFor:v19 toLocalMemberOf:v23 completion:v22];

    __int16 v14 = v23;
    goto LABEL_15;
  }
  __int16 v14 = sub_100008DCC();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = [*(id *)(a1 + 56) mutableConversationsByUUID];
    uint64_t v17 = [v16 allKeys];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v28 = v15;
    __int16 v29 = 2112;
    __int16 v30 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", buf, 0x16u);
  }
LABEL_15:
}

void sub_100111DF4(uint64_t a1)
{
  [*(id *)(a1 + 32) addRemoteMembers:*(void *)(a1 + 40) otherInvitedHandles:*(void *)(a1 + 48) triggeredLocally:1];
  id v2 = *(void **)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) link];
  [v2 addInvitedMemberHandlesFromAddedRemoteMembers:v3 toConversationLink:v4];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = [*(id *)(a1 + 56) delegateToQueue];
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = [*(id *)(a1 + 32) tuConversation];
          int v11 = [*(id *)(a1 + 56) delegateToQueue];
          id v12 = [v11 objectForKey:v9];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100112010;
          block[3] = &unk_1005053D0;
          void block[4] = v9;
          id v16 = v10;
          uint64_t v17 = *(void *)(a1 + 56);
          id v18 = *(id *)(a1 + 40);
          id v13 = v10;
          dispatch_async(v12, block);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v6);
  }
}

void sub_100112010(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) addedMembersLocally:*(void *)(a1 + 56)];
}

void sub_100112230(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v36 = v3;
    __int16 v37 = 2112;
    id v38 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ context: %@", buf, 0x16u);
  }

  char v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    uint64_t v7 = [*(id *)(a1 + 40) presentationContext];
    uint64_t v8 = v7;
    if (v7) {
      objc_msgSend(v6, "setPresentationMode:", -[NSObject mode](v7, "mode"));
    }
    [v6 setHandoffContext:*(void *)(a1 + 40)];
    int v9 = [*(id *)(a1 + 48) mutableConversationsRequestingUpgradeWithPreferences];
    uint64_t v10 = [*(id *)(a1 + 40) invitationPreferences];
    [v9 setObject:v10 forKey:*(void *)(a1 + 32)];

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id obj = [*(id *)(a1 + 48) delegateToQueue];
    id v11 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v31;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v31 != v13) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          [v6 tuConversation];
          v17 = id v16 = v6;
          id v18 = [*(id *)(a1 + 48) delegateToQueue];
          long long v19 = [v18 objectForKey:v15];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10011257C;
          block[3] = &unk_100504FE0;
          void block[4] = v15;
          id v28 = v17;
          uint64_t v29 = *(void *)(a1 + 48);
          id v20 = v17;
          id v6 = v16;
          id v21 = v20;
          dispatch_async(v19, block);
        }
        id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v12);
    }

    long long v22 = v8;
  }
  else
  {
    long long v22 = sub_100008DCC();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      id v24 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      id v25 = [v24 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v36 = v23;
      __int16 v37 = 2112;
      id v38 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_10011257C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_100112780(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)id v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "setSharePlayHandedOff: %d onConversationWithUUID: %@", (uint8_t *)&v11, 0x12u);
  }

  char v5 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setSharePlayHandedOff:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      uint64_t v10 = [v9 allKeys];
      int v11 = 138412546;
      *(void *)id v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100112D48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100008DCC();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = [*(id *)(a1 + 32) handle];
      uint64_t v10 = [v9 value];
      int v17 = 138412546;
      id v18 = v10;
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Signed complementary association voucher for member %@: %@", (uint8_t *)&v17, 0x16u);
    }
    int v11 = [*(id *)(a1 + 40) localMember];
    [v11 setValidationSource:2];

    id v12 = [*(id *)(a1 + 40) localMember];
    [v12 setAssociationVoucher:v5];

    uint64_t v13 = *(void **)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 40) localMember];
    __int16 v14 = [v8 handle];
    uint64_t v15 = [v13 tuAssociationForHandle:v14];
    id v16 = [*(id *)(a1 + 40) localMember];
    [v16 setAssociation:v15];
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_1003ABF6C();
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1001134F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011350C(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) activeConversation];
  if (v2)
  {
    id v3 = v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 allParticipantsSupportSharePlay];
    char v2 = v3;
  }
}

void sub_10011369C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  TUBundle();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  char v2 = [v3 localizedStringForKey:@"SHAREPLAY_INCOMPATIBLE_MESSAGE" value:&stru_100517F40 table:@"TelephonyUtilities"];
  [v1 _displaySharePlayUnableToStartWithMessage:v2];
}

void sub_100113968(uint64_t a1)
{
  [*(id *)(a1 + 32) setUsesNotificationCenter:0];
  [*(id *)(a1 + 32) setRepresentedApplicationBundle:TUBundleIdentifierTelephonyUtilitiesFramework];
  id v2 = +[IMUserNotificationCenter sharedInstance];
  [v2 addUserNotification:*(void *)(a1 + 32) listener:0 completionHandler:0];
}

void sub_100113AC0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v31 = v3;
    __int16 v32 = 2112;
    long long v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ update messagesGroupName: %@", buf, 0x16u);
  }

  id v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 updateMessagesGroupName:*(void *)(a1 + 40)];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v7 = [*(id *)(a1 + 48) delegateToQueue];
    id v8 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v26;
      id obj = v7;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v26 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          uint64_t v13 = objc_msgSend(v6, "tuConversation", obj);
          [*(id *)(a1 + 48) delegateToQueue];
          v15 = __int16 v14 = v6;
          id v16 = [v15 objectForKey:v12];

          id v6 = v14;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100113DA4;
          block[3] = &unk_100504FE0;
          void block[4] = v12;
          id v23 = v13;
          uint64_t v24 = *(void *)(a1 + 48);
          id v17 = v13;
          dispatch_async(v16, block);
        }
        uint64_t v7 = obj;
        id v9 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      __int16 v19 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      id v20 = [v19 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v31 = v18;
      __int16 v32 = 2112;
      long long v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_100113DA4(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_100113FA0(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ update group photo", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  uint64_t v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  id v21 = (void *)v5;
  if (v5)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v6 = [*(id *)(a1 + 40) delegateToQueue];
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          if (objc_opt_respondsToSelector())
          {
            [v21 tuConversation];
            v13 = uint64_t v12 = v6;
            __int16 v14 = [*(id *)(a1 + 40) delegateToQueue];
            uint64_t v15 = [v14 objectForKey:v11];

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100114284;
            block[3] = &unk_100504FE0;
            void block[4] = v11;
            id v23 = v13;
            uint64_t v24 = *(void *)(a1 + 40);
            id v16 = v13;
            id v6 = v12;
            id v17 = v16;
            dispatch_async(v15, block);
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v8);
    }
  }
  else
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      __int16 v19 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      id v20 = [v19 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v30 = v18;
      __int16 v31 = 2112;
      __int16 v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_100114284(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationUpdateMessagesGroupPhoto:*(void *)(a1 + 40)];
}

void sub_100114B20(uint64_t a1)
{
  char v2 = +[IDSCurrentServerTime sharedInstance];
  id v14 = [v2 currentServerTimeDate];

  [*(id *)(a1 + 32) setTimestamp:v14];
  uint64_t v3 = +[NSUUID UUID];
  uint64_t v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  char v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 48)];
  id v6 = [v5 groupUUID];

  if ([*(id *)(a1 + 32) isStaticActivity] && v6)
  {
    uint64_t v7 = [*(id *)(a1 + 32) staticIdentifier];
    uint64_t v8 = +[NSUUID tu_UUIDv5ForString:v7 namespaceUUID:v6];

    uint64_t v3 = (void *)v8;
  }
  id v9 = [objc_alloc((Class)TUConversationActivitySession) initWithActivity:*(void *)(a1 + 32) uuid:v3 locallyInitiated:1 timestamp:v14 isFirstJoin:1];
  uint64_t v10 = [*(id *)(a1 + 40) createCPActivitySessionForActivitySession:v9 onConversationWithUUID:*(void *)(a1 + 48)];
  __int16 v11 = v10;
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12)
  {
    uint64_t v13 = [v10 tuConversationActivitySession];
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
  }
}

void sub_100114CA8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] User declined authorization to create activity session for activity: %@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
    }
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) queue];
    dispatch_async(v6, *(dispatch_block_t *)(a1 + 56));
  }
}

void sub_100114DA8(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (!v3)
  {
    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 32) mutableConversationsByUUID];
      uint64_t v7 = [v6 allKeys];
      int v10 = 138412546;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v10, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = [v3 createStagedActivitySessionForActivity:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
}

void sub_100114FD0(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leave conversationUUID: %@ activitySession: %@", (uint8_t *)&v11, 0x16u);
  }

  uint64_t v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    uint64_t v7 = [*(id *)(a1 + 40) UUID];
    [v6 leaveActivitySessionWithUUID:v7];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      int v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_10011523C(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "end conversationUUID: %@ activitySession: %@", (uint8_t *)&v11, 0x16u);
  }

  uint64_t v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    uint64_t v7 = [*(id *)(a1 + 40) UUID];
    [v6 removeActivitySessionWithUUID:v7 usingTerminatingHandle:0];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      int v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_1001154AC(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked to present dismissal alert for activitySessionUUID: %@ conversationUUID: %@", (uint8_t *)&v11, 0x16u);
  }

  uint64_t v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v6)
  {
    [v6 presentDismissalAlertForActivitySessionWithUUID:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      int v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_1001158AC(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) featureFlags];
  unsigned __int8 v3 = [v2 sharePlayWithAirplayEnabled];

  uint64_t v4 = sub_100008DCC();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      id v6 = *(void **)(a1 + 40);
      if (*(unsigned char *)(a1 + 56)) {
        CFStringRef v7 = @"YES";
      }
      else {
        CFStringRef v7 = @"NO";
      }
      int v14 = 138543618;
      CFStringRef v15 = v7;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting using airplay: %{public}@ on activity session: %@", (uint8_t *)&v14, 0x16u);
    }

    uint64_t v8 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    uint64_t v4 = [v8 objectForKeyedSubscript:*(void *)(a1 + 48)];

    if (v4)
    {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
      int v10 = [*(id *)(a1 + 40) UUID];
      [v4 setUsingAirplay:v9 forActivitySessionUUID:v10];
    }
    else
    {
      int v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v11 = *(const __CFString **)(a1 + 48);
        uint64_t v12 = [*(id *)(a1 + 32) mutableConversationsByUUID];
        __int16 v13 = [v12 allKeys];
        int v14 = 138412546;
        CFStringRef v15 = v11;
        __int16 v16 = 2112;
        id v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v14, 0x16u);
      }
    }
  }
  else if (v5)
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SharePlayWithAirplay ff is turned off, not changing activity session airplay state", (uint8_t *)&v14, 2u);
  }
}

void sub_100115FA8(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  char v2 = [*(id *)(a1 + 32) delegateToQueue];
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v8 = [*(id *)(a1 + 32) delegateToQueue];
          uint64_t v9 = [v8 objectForKey:v7];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10011615C;
          block[3] = &unk_100504FE0;
          uint64_t v10 = *(void *)(a1 + 32);
          CFStringRef v11 = *(void **)(a1 + 40);
          void block[4] = v7;
          void block[5] = v10;
          id v13 = v11;
          dispatch_async(v9, block);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

id sub_10011615C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) joinConversationWithRequest:*(void *)(a1 + 48)];
}

void sub_10011625C(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 56)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v85 = v3;
    __int16 v86 = 2112;
    CFStringRef v87 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received launchApplication request for UUID: %@ forceBackground: %@", buf, 0x16u);
  }

  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id obj = [*(id *)(a1 + 40) mutableConversationsByUUID];
  id v62 = [obj countByEnumeratingWithState:&v74 objects:v83 count:16];
  id v6 = 0;
  if (!v62)
  {
LABEL_36:

    char v39 = sub_100008DCC();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      sub_1003AC074();
    }

    uint64_t v40 = *(void *)(a1 + 48);
    if (v40)
    {
      uint64_t v41 = TUErrorDomain;
      NSErrorUserInfoKey v80 = NSLocalizedDescriptionKey;
      CFStringRef v81 = @"Failed to find conversation with activitySession";
      CFStringRef v42 = +[NSDictionary dictionaryWithObjects:&v81 forKeys:&v80 count:1];
      __int16 v43 = +[NSError errorWithDomain:v41 code:1 userInfo:v42];
      (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v43);

      id v20 = 0;
      id v44 = 0;
LABEL_49:
    }
    else
    {
      id v20 = 0;
      id v44 = 0;
    }
    goto LABEL_50;
  }
  uint64_t v60 = *(void *)v75;
  *(void *)&long long v5 = 138412546;
  long long v58 = v5;
LABEL_8:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v75 != v60) {
      objc_enumerationMutation(obj);
    }
    uint64_t v8 = *(void *)(*((void *)&v74 + 1) + 8 * v7);
    uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "mutableConversationsByUUID", v58);
    uint64_t v61 = v8;
    uint64_t v10 = [v9 objectForKeyedSubscript:v8];

    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v63 = v10;
    CFStringRef v11 = [v10 activitySessions];
    id v12 = [v11 countByEnumeratingWithState:&v70 objects:v82 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v71;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v71 != v14) {
            objc_enumerationMutation(v11);
          }
          long long v16 = *(void **)(*((void *)&v70 + 1) + 8 * i);
          long long v17 = [v16 identifier];
          unsigned int v18 = [v17 isEqual:*(void *)(a1 + 32)];

          if (v18)
          {
            id v19 = v16;

            id v6 = v19;
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v70 objects:v82 count:16];
      }
      while (v13);
    }

    id v20 = v63;
    if (!v6)
    {
      id v21 = [*(id *)(a1 + 40) featureFlags];
      unsigned int v22 = [v21 mochiEnabled];

      if (!v22) {
        goto LABEL_30;
      }
      id v23 = *(void **)(a1 + 32);
      uint64_t v24 = [v63 stagedActivitySession];
      long long v25 = [v24 UUID];
      LODWORD(v23) = [v23 isEqual:v25];

      if (!v23)
      {
LABEL_30:
        id v6 = 0;
        goto LABEL_31;
      }
      long long v26 = sub_100008DCC();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = *(void *)(a1 + 32);
        long long v28 = [v63 stagedActivitySession];
        *(_DWORD *)long long buf = v58;
        uint64_t v85 = v27;
        __int16 v86 = 2112;
        CFStringRef v87 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Launch request for UUID: %@ is trying to activate a staged activitySession. %@", buf, 0x16u);
      }
      uint64_t v29 = [v63 stagedActivitySession];
      uint64_t v30 = [v29 activity];
      unsigned int v31 = [v30 isPlaceholderActivity];

      if (!v31)
      {
        id v34 = [v63 stagedActivitySession];
        id v35 = [v34 mutableCopy];

        [v35 setIsLocallyInitiated:1];
        uint64_t v36 = *(void **)(a1 + 40);
        id v37 = [v35 copy];
        id v6 = [v36 createCPActivitySessionForActivitySession:v37 onConversationWithUUID:v61];

        goto LABEL_31;
      }
      __int16 v32 = sub_100008DCC();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Tried to launch placeholder activity.", buf, 2u);
      }

      uint64_t v33 = [v63 stagedActivitySession];
      id v6 = 0;
      if (v33) {
        break;
      }
    }
LABEL_31:
    uint64_t v33 = [v6 tuConversationActivitySession];
    if (v33) {
      break;
    }

    if ((id)++v7 == v62)
    {
      id v38 = [obj countByEnumeratingWithState:&v74 objects:v83 count:16];
      id v62 = v38;
      if (v38) {
        goto LABEL_8;
      }
      goto LABEL_36;
    }
  }
  id v44 = (id)v33;

  id v45 = [*(id *)(a1 + 40) sharePlaySystemStateObserver];
  unsigned __int8 v46 = [v45 allowSharePlay];

  if (v46)
  {
    +[CSDAnalyticsReporter sendManualLaunchAttemptEventWithActivitySession:v44];
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472;
    v64[2] = sub_10011699C;
    v64[3] = &unk_100507BD0;
    id v47 = *(id *)(a1 + 48);
    uint64_t v48 = *(void *)(a1 + 40);
    id v68 = v47;
    v64[4] = v48;
    id v6 = v6;
    id v65 = v6;
    id v44 = v44;
    id v66 = v44;
    char v69 = *(unsigned char *)(a1 + 57);
    id v67 = *(id *)(a1 + 32);
    long long v49 = objc_retainBlock(v64);
    [v6 updateApplicationState:0];
    long long v50 = [v63 activitySessionManager];
    long long v51 = [v50 applicationLauncher];
    long long v52 = v51;
    if (v6) {
      id v53 = v6;
    }
    else {
      id v53 = v44;
    }
    [v51 launchAppForActivitySession:v53 options:0 completion:v49];

    CFStringRef v42 = v68;
    goto LABEL_49;
  }
  id v54 = sub_100008DCC();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Not launching application because SharePlay is not allowed", buf, 2u);
  }

  uint64_t v55 = *(void *)(a1 + 48);
  if (v55)
  {
    uint64_t v56 = TUErrorDomain;
    NSErrorUserInfoKey v78 = NSLocalizedDescriptionKey;
    CFStringRef v79 = @"SharePlay not allowed";
    CFStringRef v42 = +[NSDictionary dictionaryWithObjects:&v79 forKeys:&v78 count:1];
    id v57 = +[NSError errorWithDomain:v56 code:1 userInfo:v42];
    (*(void (**)(uint64_t, void *))(v55 + 16))(v55, v57);

    goto LABEL_49;
  }
LABEL_50:
}

void sub_10011699C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
  if (a2)
  {
    if (*(void *)(a1 + 40))
    {
      if (*(unsigned char *)(a1 + 72))
      {
        uint64_t v7 = sub_100008DCC();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 56);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Authorizing session UUID due to external authorization: %@", buf, 0xCu);
        }

        uint64_t v9 = +[CPApplicationPolicyManager sharedInstance];
        uint64_t v10 = [*(id *)(a1 + 40) activity];
        CFStringRef v11 = [v10 bundleIdentifier];
        [v9 setAuthorization:1 forBundleID:v11];

        id v12 = [*(id *)(a1 + 32) queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100116CD4;
        block[3] = &unk_100504EC0;
        long long v26 = *(id *)(a1 + 40);
        dispatch_sync(v12, block);

        id v13 = v26;
      }
      else
      {
        long long v16 = [*(id *)(a1 + 32) activityAuthorizationManager];
        long long v17 = [*(id *)(a1 + 40) activity];
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100116CDC;
        v21[3] = &unk_100505C08;
        unsigned int v18 = *(id *)(a1 + 56);
        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = *(void **)(a1 + 40);
        unsigned int v22 = v18;
        uint64_t v23 = v19;
        id v24 = v20;
        [v16 requestAuthorizationForApplicationLaunchWithActivity:v17 completionHandler:v21];

        id v13 = v22;
      }
    }
    else
    {
      id v13 = sub_100008DCC();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v30 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Not requesting authorization since we don't have a CPActivitySession for: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v14 = [*(id *)(a1 + 32) queue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100116CC8;
    v27[3] = &unk_100504EC0;
    long long v28 = *(id *)(a1 + 40);
    dispatch_sync(v14, v27);

    id v13 = v28;
  }
}

id sub_100116CC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateApplicationState:1];
}

id sub_100116CD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) permitJoin];
}

void sub_100116CDC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003AC0E0();
    }
LABEL_8:

    goto LABEL_9;
  }
  if (a2)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Authorizing session UUID: %@", buf, 0xCu);
    }

    uint64_t v9 = [*(id *)(a1 + 40) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100116E44;
    block[3] = &unk_100504EC0;
    CFStringRef v11 = *(id *)(a1 + 48);
    dispatch_sync(v9, block);

    uint64_t v6 = v11;
    goto LABEL_8;
  }
LABEL_9:
}

id sub_100116E44(uint64_t a1)
{
  return [*(id *)(a1 + 32) permitJoin];
}

void sub_100117034(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Revoking background authorization for bundle ID for %@", buf, 0xCu);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  CFStringRef v4 = objc_msgSend(*(id *)(a1 + 40), "mutableConversationsByUUID", 0);
  id v5 = [v4 allValues];

  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v12 + 1) + 8 * (void)v9) activitySessionManager];
        CFStringRef v11 = [v10 applicationLauncher];
        [v11 revokeBackgroundAuthorizationForBundleID:*(void *)(a1 + 32)];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

void sub_100117270(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting activity session scene associations for bundle ID for %@", (uint8_t *)&v6, 0xCu);
  }

  CFStringRef v4 = [*(id *)(a1 + 40) activeConversation];
  id v5 = v4;
  if (v4) {
    [v4 resetActivitySessionSceneAssociationsForBundleID:*(void *)(a1 + 32)];
  }
}

void sub_100118170(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  int v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    long long v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) avModeChanged:*(void *)(a1 + 64) toAVMode:*(void *)(a1 + 72) forParticipantWithHandle:*(void *)(a1 + 56) forConversation:*(void *)(a1 + 40)];
}

void sub_1001182BC(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  int v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    long long v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_1001190C4(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  int v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v14 = 138412546;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    long long v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  __int16 v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  long long v13 = [*(id *)(a1 + 64) highlightIdentifier];
  [v11 conversationManager:v9 activeParticipant:v10 removedHighlightFrom:v12 highlightIdentifier:v13];
}

void sub_10011A104(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    if (!v7)
    {
LABEL_7:
      if (*(void *)(a1 + 64))
      {
        uint64_t v15 = sub_100008DCC();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 64);
          int v25 = 138412290;
          uint64_t v26 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating activity image for staged activity session: %@", (uint8_t *)&v25, 0xCu);
        }

        uint64_t v17 = *(void *)(a1 + 56);
        uint64_t v18 = [*(id *)(a1 + 64) activity];
        uint64_t v19 = [v18 metadata];
        [v19 setImageData:v17];

        id v20 = [*(id *)(a1 + 64) activity];
        id v21 = [v20 metadata];
        [v21 saveImageToDisk];

        [*(id *)(a1 + 72) conversationChanged:*(void *)(a1 + 80)];
      }
      goto LABEL_17;
    }
    uint64_t v8 = [v7 activity];
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v10 = [v8 UUID];
    unsigned __int8 v11 = [v9 isEqual:v10];

    uint64_t v12 = sub_100008DCC();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 48);
        int v25 = 138412290;
        uint64_t v26 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Updating activity image for activity session with UUID: %@", (uint8_t *)&v25, 0xCu);
      }

      [*(id *)(a1 + 32) updateActivityImage:*(void *)(a1 + 56)];
      goto LABEL_7;
    }
    if (v13)
    {
      uint64_t v23 = *(void *)(a1 + 40);
      id v24 = [v8 UUID];
      int v25 = 138412546;
      uint64_t v26 = v23;
      __int16 v27 = 2112;
      long long v28 = v24;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[WARN] Not updating image for activity UUID: %@ activity session currently has different activity UUID: %@", (uint8_t *)&v25, 0x16u);
    }
  }
  else
  {
    unsigned int v22 = sub_100008DCC();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_1003AC274();
    }
  }
LABEL_17:
}

void sub_10011A380(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011A468;
  block[3] = &unk_1005070F8;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10011A468(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10011ADFC(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_10011B01C(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ presentationContexts: %@", (uint8_t *)&v11, 0x16u);
  }

  char v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 updateParticipantPresentationContexts:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      uint64_t v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_10011B278(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v34 = v3;
    __int16 v35 = 2112;
    uint64_t v36 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ member: %@", buf, 0x16u);
  }

  char v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(a1 + 48);
    int v9 = +[TUConversationInvitationPreference incomingCallInvitationPreferences];
    [v7 sendInvitationMessageToMember:v8 forConversation:v6 includeAllAttributes:0 invitationPreferences:v9 additionalOptions:0];

    uint64_t v10 = [v6 tuConversation];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id obj = [*(id *)(a1 + 48) delegateToQueue];
    id v11 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v29;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v29 != v13) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v28 + 1) + 8 * i);
          if (objc_opt_respondsToSelector())
          {
            [*(id *)(a1 + 48) delegateToQueue];
            v17 = uint64_t v16 = v10;
            uint64_t v18 = [v17 objectForKey:v15];

            uint64_t v10 = v16;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10011B5C0;
            block[3] = &unk_1005053D0;
            void block[4] = v15;
            uint64_t v26 = v16;
            int8x16_t v24 = *(int8x16_t *)(a1 + 40);
            id v19 = (id)v24.i64[0];
            int8x16_t v27 = vextq_s8(v24, v24, 8uLL);
            dispatch_async(v18, block);
          }
        }
        id v12 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      id v21 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      unsigned int v22 = [v21 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v34 = v20;
      __int16 v35 = 2112;
      uint64_t v36 = v22;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_10011B5C0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) buzzedMember:*(void *)(a1 + 56)];
}

void sub_10011B7E0(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = *(void **)(a1 + 40);
    int v14 = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ member: %@", (uint8_t *)&v14, 0x16u);
  }

  char v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  uint64_t v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Kicking member %@ from conversation %@", (uint8_t *)&v14, 0x16u);
    }

    [v6 kickMember:*(void *)(a1 + 40)];
  }
  else
  {
    if (v8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      uint64_t v13 = [v12 allKeys];
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@", (uint8_t *)&v14, 0x16u);
    }
  }
}

void sub_10011BC08(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  long long v30 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  uint64_t v3 = [*(id *)(a1 + 48) value];
  CFStringRef v4 = +[TUHandle normalizedHandleWithDestinationID:v3];

  char v5 = sub_100008DCC();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 56);
      BOOL v8 = [v30 UUID];
      *(_DWORD *)long long buf = 138412802;
      id v45 = v7;
      __int16 v46 = 2112;
      id v47 = v4;
      __int16 v48 = 2112;
      long long v49 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received nickname update message, set nickname to \"%@\" from handle %@ for conversation UUID %@", buf, 0x20u);
    }
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    uint64_t v9 = [v30 remoteMembers];
    id v10 = [v9 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v39;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v39 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          uint64_t v15 = [v14 handle];
          unsigned int v16 = [v15 isEquivalentToHandle:v4];

          if (v16)
          {
            id v18 = [*(id *)(a1 + 56) copy];
            [v14 setNickname:v18];

            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            char v5 = [*(id *)(a1 + 32) delegateToQueue];
            id v19 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
            if (v19)
            {
              id v20 = v19;
              long long v29 = v4;
              uint64_t v21 = *(void *)v35;
              do
              {
                for (j = 0; j != v20; j = (char *)j + 1)
                {
                  if (*(void *)v35 != v21) {
                    objc_enumerationMutation(v5);
                  }
                  uint64_t v23 = *(void *)(*((void *)&v34 + 1) + 8 * (void)j);
                  int8x16_t v24 = objc_msgSend(v30, "tuConversation", v29);
                  int v25 = [*(id *)(a1 + 32) delegateToQueue];
                  uint64_t v26 = [v25 objectForKey:v23];

                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_10011C030;
                  block[3] = &unk_100504FE0;
                  void block[4] = v23;
                  id v32 = v24;
                  uint64_t v33 = *(void *)(a1 + 32);
                  id v27 = v24;
                  dispatch_async(v26, block);
                }
                id v20 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
              }
              while (v20);
              CFStringRef v4 = v29;
            }
            goto LABEL_24;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v38 objects:v43 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    char v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = [v30 remoteMembers];
      *(_DWORD *)long long buf = 138412546;
      id v45 = v4;
      __int16 v46 = 2112;
      id v47 = v17;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ignoring nickname update message because the from-handle %@ did not match any remote members %@", buf, 0x16u);
    }
  }
  else if (v6)
  {
    long long v28 = *(void **)(a1 + 48);
    *(_DWORD *)long long buf = 138412290;
    id v45 = v28;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Ignoring nickname update message because the from-handle %@ could not be normalized.", buf, 0xCu);
  }
LABEL_24:
}

void sub_10011C030(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    CFStringRef v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  BOOL v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_10011C278(id *a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = [a1[4] delegateToQueue];
  id v2 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v18;
    do
    {
      char v5 = 0;
      do
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v5);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v7 = [a1[5] tuConversation];
          BOOL v8 = [a1[4] delegateToQueue];
          int v9 = [v8 objectForKey:v6];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10011C470;
          block[3] = &unk_1005053A8;
          void block[4] = v6;
          id v13 = v7;
          id v14 = a1[4];
          id v15 = a1[6];
          id v16 = a1[7];
          id v10 = v7;
          dispatch_async(v9, block);
        }
        char v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v3);
  }
}

void sub_10011C470(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) participant:*(void *)(a1 + 56) addedNotice:*(void *)(a1 + 64)];
}

void sub_10011C678(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 1024;
    LODWORD(v14) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ downlinkMuted: %d", (uint8_t *)&v11, 0x12u);
  }

  char v5 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  uint64_t v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setRemoteParticipantsDownlinkMuted:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      uint64_t v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_10011C8D4(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  int v4 = [v3 localMember];
  char v5 = [v4 nickname];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 48)];

  uint64_t v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = [v3 localMember];
      uint64_t v10 = [v9 nickname];
      int v22 = 138412290;
      uint64_t v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring local member's nickname update request because their nickname \"%@\" is already identical", (uint8_t *)&v22, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      int v11 = *(void **)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      __int16 v13 = [v3 localMember];
      id v14 = [v13 nickname];
      int v22 = 138412802;
      uint64_t v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      __int16 v26 = 2112;
      id v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ set local member's nickname to %@, previously %@", (uint8_t *)&v22, 0x20u);
    }
    id v15 = [*(id *)(a1 + 48) copy];
    id v16 = [v3 localMember];
    [v16 setNickname:v15];

    long long v17 = [CSDMessagingConversationMessage alloc];
    long long v18 = [v3 groupUUID];
    uint64_t v7 = [(CSDMessagingConversationMessage *)v17 initWithType:12 groupUUID:v18 link:0];

    id v19 = [*(id *)(a1 + 48) copy];
    [v7 setNickname:v19];

    long long v20 = *(void **)(a1 + 32);
    uint64_t v21 = [v7 data];
    [v20 broadcastData:v21 onConversation:v3];
  }
}

void sub_10011CCE4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    char v2 = [*(id *)(a1 + 32) linkManager];
    uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10011CDE4;
    v7[3] = &unk_100507C98;
    int v4 = *(void **)(a1 + 40);
    void v7[4] = *(void *)(a1 + 32);
    id v8 = v4;
    [v2 getActiveLinksWithCreatedOnly:v3 completionHandler:v7];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      unsigned int v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
}

void sub_10011CDE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011CECC;
  block[3] = &unk_100505EA0;
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10011CECC(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    uint64_t v4 = *(void *)(a1 + 32);
    int v8 = 134218242;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retrieved %lu conversation link descriptors %@", (uint8_t *)&v8, 0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = *(void **)(a1 + 40);
      int v8 = 138412290;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to retrieve links with error %@", (uint8_t *)&v8, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10011D0DC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    char v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      long long v41 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received request from TU client to generate link for conversation UUID: %@", buf, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    id v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (!v5)
    {
      id v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = *(void **)(a1 + 40);
        id v13 = [*(id *)(a1 + 32) mutableConversationsByUUID];
        id v14 = [v13 allKeys];
        *(_DWORD *)long long buf = 138412546;
        long long v41 = v12;
        __int16 v42 = 2112;
        __int16 v43 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", buf, 0x16u);
      }
      goto LABEL_33;
    }
    id v6 = [*(id *)(a1 + 32) deviceSupport];
    if ([v6 isGreenTea])
    {
      uint64_t v7 = [v5 remoteMembers];
      id v8 = [v7 count];

      if ((unint64_t)v8 >= 2)
      {
        id v9 = sub_100008DCC();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "GreenTea devices cannot generate conversation links for Group FaceTime (remoteMembers > 1)", buf, 2u);
        }
        goto LABEL_33;
      }
    }
    else
    {
    }
    id v15 = [v5 messagesGroupUUID];

    if (v15)
    {
      id v16 = sub_100008DCC();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        long long v17 = [v5 messagesGroupUUID];
        *(_DWORD *)long long buf = 138412290;
        long long v41 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Conversation was initiated from messages, a link cannot be generated in this case. {messagesGroupUUID: %@}", buf, 0xCu);
      }
      uint64_t v18 = *(void *)(a1 + 48);
      if (!v18) {
        goto LABEL_34;
      }
      id v9 = +[NSError errorWithDomain:@"callservicesd.ConversationLinkManagerErrorType" code:14 userInfo:0];
      (*(void (**)(uint64_t, void, NSObject *))(v18 + 16))(v18, 0, v9);
    }
    else
    {
      id v19 = [v5 link];

      if (v19)
      {
        long long v20 = sub_100008DCC();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void **)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          long long v41 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Link for conversation with UUID %@ already exists.", buf, 0xCu);
        }

        uint64_t v22 = *(void *)(a1 + 48);
        if (!v22) {
          goto LABEL_34;
        }
        id v9 = [v5 link];
        (*(void (**)(uint64_t, NSObject *, void))(v22 + 16))(v22, v9, 0);
      }
      else
      {
        uint64_t v23 = [v5 localMember];
        __int16 v24 = [v23 handle];
        id v9 = [v24 copy];

        uint64_t v25 = [v9 normalizedValue];

        if (!v25)
        {
          __int16 v26 = [v5 localMember];
          id v27 = [v26 handle];
          uint64_t v28 = TUNormalizedHandleForTUHandle();

          id v9 = v28;
        }
        long long v29 = *(void **)(a1 + 32);
        long long v30 = [v5 groupUUID];
        long long v31 = [v5 memberHandlesEligibleForLinkApproval];
        id v32 = [v29 _getActivatedLinkWithHandle:v9 updateGroupUUID:v30 updateInvitedHandles:v31];

        uint64_t v33 = *(void **)(a1 + 32);
        if (v32)
        {
          [v33 setConversationLink:v32 forConversation:v5 replyToCompletionHandler:*(void *)(a1 + 48)];
        }
        else
        {
          long long v34 = [v33 linkManager];
          long long v35 = [v5 groupUUID];
          long long v36 = [v5 memberHandlesEligibleForLinkApproval];
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_10011D644;
          v37[3] = &unk_100507CE8;
          void v37[4] = *(void *)(a1 + 32);
          id v38 = v5;
          id v39 = *(id *)(a1 + 48);
          [v34 generateLinkWithGroupUUID:v35 invitedHandles:v36 originatorHandle:v9 linkLifetimeScope:0 completionHandler:v37];
        }
      }
    }
LABEL_33:

LABEL_34:
    return;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = *(void (**)(void))(v10 + 16);
    v11();
  }
}

void sub_10011D644(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011D748;
  block[3] = &unk_100507CC0;
  id v13 = v6;
  id v14 = a1[5];
  id v8 = a1[6];
  id v9 = a1[4];
  id v15 = v5;
  id v16 = v9;
  id v17 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

id *sub_10011D748(id *result)
{
  uint64_t v1 = result;
  if (result[4])
  {
    char v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [v1[5] groupUUID];
      id v4 = v1[4];
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to generate link for groupUUID %@ with error %@", (uint8_t *)&v6, 0x16u);
    }
    uint64_t result = (id *)v1[8];
    if (result) {
      return (id *)((uint64_t (*)(id *, void, id))result[2])(result, 0, v1[4]);
    }
  }
  else if (result[6])
  {
    id v5 = result[7];
    return (id *)objc_msgSend(v5, "setConversationLink:forConversation:replyToCompletionHandler:");
  }
  return result;
}

void sub_10011DD88(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    char v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      __int16 v43 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received request from TU client to generate link with invitedMemberHandles: %@", buf, 0xCu);
    }

    id v4 = [*(id *)(a1 + 32) deviceSupport];
    if ([v4 isGreenTea])
    {
      id v5 = [*(id *)(a1 + 40) count];

      if ((unint64_t)v5 >= 2)
      {
        int v6 = sub_100008DCC();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GreenTea devices cannot generate conversation links for Group FaceTime (invitedMemberHandles > 1)", buf, 2u);
        }
        goto LABEL_51;
      }
    }
    else
    {
    }
    int v6 = +[NSMutableSet set];
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v9 = *(id *)(a1 + 40);
    id v10 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v39;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v39 != v12) {
            objc_enumerationMutation(v9);
          }
          if (((unint64_t)[*(id *)(*((void *)&v38 + 1) + 8 * i) type] & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            id v14 = TUNormalizedHandleForTUHandle();
            id v15 = v14;
            if (v14)
            {
              id v16 = [v14 normalizedValue];

              if (v16) {
                [v6 addObject:v15];
              }
            }
          }
          else
          {
            id v15 = 0;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
      }
      while (v11);
    }

    if (!-[NSObject count](v6, "count") && [*(id *)(a1 + 40) count])
    {
      long long v31 = sub_100008DCC();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[WARN] No invited member handles were of eligible handle types and/or had normalized values, canceling link generation", buf, 2u);
      }

      uint64_t v32 = *(void *)(a1 + 48);
      if (!v32) {
        goto LABEL_51;
      }
      uint64_t v33 = 11;
      goto LABEL_49;
    }
    id v17 = [*(id *)(a1 + 32) localCallerID];
    uint64_t v18 = v17[2]();

    if (!v18)
    {
      id v19 = [*(id *)(a1 + 32) activeLocalHandles];
      long long v20 = v19[2]();
      id v21 = [v20 count];

      if (!v21)
      {
        long long v34 = sub_100008DCC();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[WARN] Local user has no active handles, cannot proceed with link generation", buf, 2u);
        }

        uint64_t v32 = *(void *)(a1 + 48);
        if (!v32) {
          goto LABEL_51;
        }
        uint64_t v33 = 12;
LABEL_49:
        uint64_t v18 = +[NSError errorWithDomain:@"callservicesd.ConversationLinkManagerErrorType" code:v33 userInfo:0];
        (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0, v18);
LABEL_50:

LABEL_51:
        return;
      }
      uint64_t v22 = [*(id *)(a1 + 32) activeLocalHandles];
      uint64_t v23 = v22[2]();
      uint64_t v18 = [v23 anyObject];
    }
    __int16 v24 = [*(id *)(a1 + 32) _getActivatedLinkWithHandle:v18 updateGroupUUID:0 updateInvitedHandles:v6];
    uint64_t v25 = sub_100008DCC();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      __int16 v43 = v18;
      __int16 v44 = 2112;
      id v45 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Getting activated link for callerID %@, activatedLink: %@", buf, 0x16u);
    }

    if (!v24) {
      goto LABEL_38;
    }
    __int16 v26 = sub_100008DCC();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "We activated an inactive link, returning that.", buf, 2u);
    }

    [*(id *)(a1 + 32) notifyDelegatesOfChangedLink:v24 conversation:0];
    [*(id *)(a1 + 32) sendMessagesForCreatedOrChangedLink:v24 conversation:0 messageType:11];
    if (*(void *)(a1 + 48))
    {
      id v27 = sub_100008DCC();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        __int16 v43 = v24;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Link generation complete, returning to completionHandler for: %@", buf, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
LABEL_38:
      uint64_t v28 = [*(id *)(a1 + 32) linkManager];
      uint64_t v29 = *(void *)(a1 + 56);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10011E3D0;
      v35[3] = &unk_100507CE8;
      long long v30 = *(void **)(a1 + 40);
      v35[4] = *(void *)(a1 + 32);
      id v36 = v30;
      id v37 = *(id *)(a1 + 48);
      [v28 generateLinkWithInvitedHandles:v6 originatorHandle:v18 linkLifetimeScope:v29 completionHandler:v35];
    }
    goto LABEL_50;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    __int16 v8 = *(void (**)(void))(v7 + 16);
    v8();
  }
}

void sub_10011E3D0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011E4D0;
  block[3] = &unk_100505EF0;
  id v13 = v6;
  id v14 = v5;
  id v8 = a1[5];
  id v9 = a1[4];
  id v15 = v8;
  id v16 = v9;
  id v17 = a1[6];
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

void sub_10011E4D0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    char v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 40) groupUUID];
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 32);
      int v9 = 138412802;
      id v10 = v3;
      __int16 v11 = 2112;
      uint64_t v12 = v4;
      __int16 v13 = 2112;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Creation of converation link with groupUUID %@ invited handles %@ failed with error %@", (uint8_t *)&v9, 0x20u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    [*(id *)(a1 + 56) notifyDelegatesOfChangedLink:v6 conversation:0];
    [*(id *)(a1 + 56) sendMessagesForCreatedOrChangedLink:*(void *)(a1 + 40) conversation:0 messageType:11];
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 40);
      int v9 = 138412290;
      id v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Link generation complete, returning to completionHandler for: %@", (uint8_t *)&v9, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_10011E74C(id *a1)
{
  if ([a1[4] _linksEnabled])
  {
    objc_initWeak(&location, a1[4]);
    char v2 = [a1[4] linkManager];
    id v3 = a1[5];
    uint64_t v4 = [a1[6] pseudonym];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10011E8E0;
    v7[3] = &unk_100507D88;
    objc_copyWeak(&v11, &location);
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = a1[7];
    [v2 addInvitedHandles:v3 pseudonym:v4 completionHandler:v7];

    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }
  else
  {
    id v5 = a1[7];
    if (v5)
    {
      uint64_t v6 = (void (*)(void))*((void *)v5 + 2);
      v6();
    }
  }
}

void sub_10011E8BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10011E8E0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained queue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_10011EA08;
    v10[3] = &unk_100507D60;
    id v11 = v6;
    id v12 = a1[4];
    id v13 = a1[5];
    id v14 = v5;
    id v15 = v8;
    id v16 = a1[6];
    dispatch_async(v9, v10);
  }
}

uint64_t sub_10011EA08(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 32);
      int v10 = 138412802;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v3;
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Adding invited handles %@ to %@ failed with error %@", (uint8_t *)&v10, 0x20u);
    }
  }
  if (*(void *)(a1 + 56))
  {
    id v6 = *(void **)(a1 + 64);
    uint64_t v7 = [*(id *)(a1 + 48) groupUUID];
    id v8 = [v6 conversationWithGroupUUID:v7];

    if (v8) {
      [v8 setConversationLink:*(void *)(a1 + 56) allowUpdate:1];
    }
    [*(id *)(a1 + 64) notifyDelegatesOfChangedLink:*(void *)(a1 + 56) conversation:v8];
    [*(id *)(a1 + 64) sendMessagesForCreatedOrChangedLink:*(void *)(a1 + 56) conversation:v8 messageType:26];
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 56), *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011EC40(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = [*(id *)(a1 + 40) pseudonym];
    uint64_t v4 = [v2 findConversationLinkMatchingPseudonym:v3];

    uint64_t v5 = sub_100008DCC();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Asked to invalidate link %@", buf, 0xCu);
      }

      uint64_t v7 = [*(id *)(a1 + 32) linkManager];
      id v8 = [v4 pseudonym];
      uint64_t v9 = *(void *)(a1 + 56);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10011EEB4;
      v14[3] = &unk_100507E00;
      v14[4] = *(void *)(a1 + 32);
      id v15 = v4;
      id v16 = *(id *)(a1 + 48);
      [v7 invalidateLinkWithPseudonym:v8 deleteReason:v9 completionHandler:v14];
    }
    else
    {
      if (v6)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not invalidating link since it's not being tracked by our link manager.", buf, 2u);
      }

      uint64_t v12 = *(void *)(a1 + 48);
      if (v12)
      {
        uint64_t v13 = +[NSError errorWithDomain:@"callservicesd.ConversationLinkManagerErrorType" code:3 userInfo:0];
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      uint64_t v11 = *(void (**)(void))(v10 + 16);
      v11();
    }
  }
}

void sub_10011EEB4(id *a1, char a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011EF98;
  block[3] = &unk_100507DD8;
  char v16 = a2;
  id v7 = a1[5];
  id v8 = a1[4];
  id v12 = v7;
  id v13 = v8;
  id v9 = a1[6];
  id v14 = v5;
  id v15 = v9;
  id v10 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_10011EF98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = [*(id *)(a1 + 32) groupUUID];
    if (v2)
    {
      uint64_t v3 = [*(id *)(a1 + 40) conversationWithGroupUUID:v2];
      uint64_t v4 = v3;
      if (v3) {
        [v3 setLink:0];
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "completed invalidate the link: %@", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 40) notifyDelegatesOfChangedLink:*(void *)(a1 + 32) conversation:v4];
    [*(id *)(a1 + 40) sendMessagesForInvalidatedLink:*(void *)(a1 + 32)];
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48));
  }
  return result;
}

void sub_10011F1A0(id *a1)
{
  if ([a1[4] _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[5];
      *(_DWORD *)long long buf = 138412290;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Renewing link %@ if needed", buf, 0xCu);
    }

    objc_initWeak((id *)buf, a1[4]);
    uint64_t v4 = [a1[4] linkManager];
    id v5 = [a1[5] pseudonym];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_10011F3B4;
    v8[3] = &unk_100507E28;
    objc_copyWeak(&v11, (id *)buf);
    id v9 = a1[5];
    id v10 = a1[6];
    [v4 renewPseudonymIfNeeded:v5 completionHandler:v8];

    objc_destroyWeak(&v11);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    id v6 = a1[6];
    if (v6)
    {
      id v7 = (void (*)(void))*((void *)v6 + 2);
      v7();
    }
  }
}

void sub_10011F388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011F3B4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011F4C8;
    block[3] = &unk_100505EF0;
    id v11 = v6;
    id v12 = a1[4];
    id v13 = v5;
    id v14 = v8;
    id v15 = a1[5];
    dispatch_async(v9, block);
  }
}

uint64_t sub_10011F4C8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1003AC310();
    }
  }
  else
  {
    uint64_t v2 = [*(id *)(a1 + 40) copy];
    [v2 setExpirationDate:*(void *)(a1 + 48)];
    id v3 = *(void **)(a1 + 56);
    uint64_t v4 = [v2 groupUUID];
    id v5 = [v3 conversationWithGroupUUID:v4];

    if (v5) {
      [v5 setConversationLink:v2 allowUpdate:1];
    }
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 40) pseudonym];
      int v9 = 138412290;
      id v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "completed renewPseudonym %@", (uint8_t *)&v9, 0xCu);
    }
    [*(id *)(a1 + 56) notifyDelegatesOfChangedLink:v2 conversation:v5];
    [*(id *)(a1 + 56) sendMessagesForCreatedOrChangedLink:v2 conversation:v5 messageType:26];
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011F76C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Renewing link for reason %lu", buf, 0xCu);
    }

    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    uint64_t v4 = [*(id *)(a1 + 32) linkManager];
    id v5 = [*(id *)(a1 + 40) pseudonym];
    uint64_t v6 = *(void *)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10011F9AC;
    v9[3] = &unk_100507E78;
    objc_copyWeak(&v13, (id *)buf);
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v4 renewLinkWithPseudonym:v5 expirationDate:v6 completionHandler:v9];

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      int v8 = *(void (**)(void))(v7 + 16);
      v8();
    }
  }
}

void sub_10011F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011F9AC(id *a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    int v8 = [WeakRetained queue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10011FABC;
    v9[3] = &unk_100507E50;
    id v10 = v5;
    id v11 = a1[4];
    char v15 = a2;
    id v12 = a1[5];
    id v13 = v7;
    id v14 = a1[6];
    dispatch_async(v8, v9);
  }
}

uint64_t sub_10011FABC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1003AC310();
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    id v3 = [*(id *)(a1 + 40) copy];
    [v3 setExpirationDate:*(void *)(a1 + 48)];
    uint64_t v4 = *(void **)(a1 + 56);
    id v5 = [v3 groupUUID];
    uint64_t v6 = [v4 conversationWithGroupUUID:v5];

    if (v6) {
      [v6 setConversationLink:v3 allowUpdate:1];
    }
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "renewLinkWithPseudonym succeeded: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 56) notifyDelegatesOfChangedLink:v3 conversation:v6];
    [*(id *)(a1 + 56) sendMessagesForCreatedOrChangedLink:v3 conversation:v6 messageType:26];
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011FD20(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    id v5 = [*(id *)(a1 + 32) linkManager];
    uint64_t v2 = [*(id *)(a1 + 40) pseudonym];
    [v5 checkLinkValidityWithPseudonym:v2 completionHandler:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 16);
      v4();
    }
  }
}

void sub_10011FE70(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) localCallerID];
  uint64_t v3 = v2[2]();

  uint64_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Generating cache of inactive links for originator handle %@", (uint8_t *)&v6, 0xCu);
  }

  id v5 = [*(id *)(a1 + 32) linkManager];
  [v5 generateAllInactiveLinksFor:v3];
}

void sub_100120018(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = [*(id *)(a1 + 32) localCallerID];
    uint64_t v3 = v2[2]();

    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      char v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Asked to retrieve inactive link for handle %@", buf, 0xCu);
    }

    id v5 = [*(id *)(a1 + 32) linkManager];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001201E4;
    v11[3] = &unk_100507CE8;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    id v12 = v3;
    uint64_t v13 = v6;
    id v14 = v7;
    id v8 = v3;
    [v5 getInactiveLinkForHandle:v8 completionHandler:v11];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9)
    {
      id v10 = *(void (**)(void))(v9 + 16);
      v10();
    }
  }
}

void sub_1001201E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to fetch inactive link, generating more for handle %@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = [*(id *)(a1 + 40) linkManager];
    [v9 generateAllInactiveLinksFor:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001203C0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v11 = 138412290;
      uint64_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked to activate conversation link %@", (uint8_t *)&v11, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) linkManager];
    id v5 = [*(id *)(a1 + 40) pseudonym];
    [v4 activateLinkForPseudonym:v5 completionHandler:*(void *)(a1 + 48)];

    id v6 = [*(id *)(a1 + 32) localCallerID];
    uint64_t v7 = v6[2]();

    uint64_t v8 = [*(id *)(a1 + 32) linkManager];
    [v8 generateInactiveLinkFor:v7 afterActivation:1];

    [*(id *)(a1 + 32) notifyDelegatesOfChangedLink:*(void *)(a1 + 40) conversation:0];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9)
    {
      int v10 = *(void (**)(void))(v9 + 16);
      v10();
    }
  }
}

void sub_100120664(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v15 = v3;
      __int16 v16 = 2112;
      uint64_t v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked to set name \"%@\" for link %@", buf, 0x16u);
    }

    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    id v5 = [*(id *)(a1 + 32) linkManager];
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_10012088C;
    v10[3] = &unk_100507EC8;
    objc_copyWeak(&v13, (id *)buf);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v5 setLinkName:v7 forLink:v6 completionHandler:v10];

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 16);
      v9();
    }
  }
}

void sub_100120860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012088C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001209A0;
    block[3] = &unk_100505EF0;
    id v11 = v6;
    id v12 = a1[4];
    id v13 = v5;
    id v14 = v8;
    id v15 = a1[5];
    dispatch_async(v9, block);
  }
}

uint64_t sub_1001209A0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[WARN] Link name setting provided error %@", (uint8_t *)&v7, 0xCu);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Link name successfully set for updated link %@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 56) notifyDelegatesOfChangedLink:*(void *)(a1 + 48) conversation:0];
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

void sub_100120B6C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 40)) {
        CFStringRef v3 = @"YES";
      }
      else {
        CFStringRef v3 = @"NO";
      }
      int v5 = 138412290;
      CFStringRef v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TU client asked to schedule a syncing of activated conversation links {initial: %@}", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) linkManager];
    [v4 scheduleConversationLinkCheckInInitial:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_100120D08(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending recovery messages to local user's other devices in an attempt to recover links for pseudonyms %@", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) linkManager];
    [v4 recoverLinksForPseudonyms:*(void *)(a1 + 40)];
  }
}

void sub_100120E94(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v3 = @"YES";
      }
      else {
        CFStringRef v3 = @"NO";
      }
      int v5 = 138412290;
      CFStringRef v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TU client asked for link sync state {includeLinks: %@}", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) linkManager];
    [v4 linkSyncStateWithIncludeLinks:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
  }
}

void sub_100121058(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      int v12 = 138412546;
      uint64_t v13 = v3;
      __int16 v14 = 2112;
      uint64_t v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "For conversationUUID: %@, user has approved let me in for pending member: %@", (uint8_t *)&v12, 0x16u);
    }

    int v5 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    CFStringRef v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v6)
    {
      [*(id *)(a1 + 48) setJoinedFromLetMeIn:1];
      int v7 = [*(id *)(a1 + 32) pendingMembershipTracker];
      [v7 handleLocalApprovalOfMember:*(void *)(a1 + 48) forConversation:v6];
    }
    else
    {
      int v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 48);
        int v10 = [*(id *)(a1 + 32) mutableConversationsByUUID];
        id v11 = [v10 allKeys];
        int v12 = 138412802;
        uint64_t v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to approve let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v12, 0x20u);
      }
    }
  }
}

void sub_1001212E4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      int v12 = 138412546;
      uint64_t v13 = v3;
      __int16 v14 = 2112;
      uint64_t v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "For conversationUUID: %@, user has rejected let me in for pending member: %@", (uint8_t *)&v12, 0x16u);
    }

    int v5 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    CFStringRef v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v6)
    {
      int v7 = [*(id *)(a1 + 32) pendingMembershipTracker];
      [v7 handleLocalRejectionOfMember:*(void *)(a1 + 48) forConversation:v6];
    }
    else
    {
      int v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 48);
        int v10 = [*(id *)(a1 + 32) mutableConversationsByUUID];
        id v11 = [v10 allKeys];
        int v12 = 138412802;
        uint64_t v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to reject let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v12, 0x20u);
      }
    }
  }
}

void sub_100121548(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _linksEnabled])
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "For conversationUUID: %@, user has requested to ignore all LMI requests.", buf, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    int v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v5)
    {
      [v5 setIgnoreLMIRequests:*(unsigned __int8 *)(a1 + 48)];
      uint64_t v17 = v5;
      CFStringRef v6 = [v5 tuConversation];
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id obj = [*(id *)(a1 + 32) delegateToQueue];
      id v7 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v24;
        do
        {
          int v10 = 0;
          do
          {
            if (*(void *)v24 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v11 = *(void *)(*((void *)&v23 + 1) + 8 * (void)v10);
            int v12 = [*(id *)(a1 + 32) delegateToQueue];
            uint64_t v13 = [v12 objectForKey:v11];

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10012181C;
            block[3] = &unk_100504FE0;
            long long v20 = v6;
            uint64_t v21 = v11;
            uint64_t v22 = *(void *)(a1 + 32);
            dispatch_async(v13, block);

            int v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          id v8 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
        }
        while (v8);
      }

      int v5 = v17;
    }
    else
    {
      CFStringRef v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v15 = [*(id *)(a1 + 32) mutableConversationsByUUID];
        __int16 v16 = [v15 allKeys];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v28 = v14;
        __int16 v29 = 2112;
        long long v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to ignore let me in requests. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", buf, 0x16u);
      }
    }
  }
}

void sub_10012181C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    char v2 = objc_opt_respondsToSelector();
    uint64_t v3 = *(void **)(a1 + 40);
    if (v2)
    {
      uint64_t v4 = [*(id *)(a1 + 32) provider];
      if ([v3 shouldHandleUpdateForProvider:v4])
      {
      }
      else
      {
        char v5 = objc_opt_respondsToSelector();

        if (v5) {
          return;
        }
      }
    }
    else if (objc_opt_respondsToSelector())
    {
      return;
    }
    CFStringRef v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = [*(id *)(a1 + 32) provider];
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 40) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 32)];
  }
}

void sub_100121A28(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v30 = v3;
    __int16 v31 = 2112;
    uint64_t v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating screen sharing type to %lu for conversationUUID: %@.", buf, 0x16u);
  }

  char v5 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  CFStringRef v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 addScreenSharingType:*(void *)(a1 + 48)];
    uint64_t v18 = v6;
    uint64_t v7 = [v6 tuConversation];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = [*(id *)(a1 + 40) delegateToQueue];
    id v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v25;
      do
      {
        __int16 v11 = 0;
        do
        {
          if (*(void *)v25 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v24 + 1) + 8 * (void)v11);
          uint64_t v13 = [*(id *)(a1 + 40) delegateToQueue];
          uint64_t v14 = [v13 objectForKey:v12];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100121D04;
          block[3] = &unk_100504FE0;
          uint64_t v21 = v7;
          uint64_t v22 = v12;
          uint64_t v23 = *(void *)(a1 + 40);
          dispatch_async(v14, block);

          __int16 v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v9);
    }

    CFStringRef v6 = v18;
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      __int16 v16 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      uint64_t v17 = [v16 allKeys];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v30 = v15;
      __int16 v31 = 2112;
      uint64_t v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Failed to ignore let me in requests. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", buf, 0x16u);
    }
  }
}

void sub_100121D04(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    char v2 = objc_opt_respondsToSelector();
    uint64_t v3 = *(void **)(a1 + 40);
    if (v2)
    {
      uint64_t v4 = [*(id *)(a1 + 32) provider];
      if ([v3 shouldHandleUpdateForProvider:v4])
      {
      }
      else
      {
        char v5 = objc_opt_respondsToSelector();

        if (v5) {
          return;
        }
      }
    }
    else if (objc_opt_respondsToSelector())
    {
      return;
    }
    CFStringRef v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = [*(id *)(a1 + 32) provider];
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 40) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 32)];
  }
}

void sub_100121F08(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) conversationNoticeManger];
  id v3 = [v2 fetchUpcomingNoticeFromQueue];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100122054(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationNoticeManger];
  [v2 activateConversationNoticeWithActionURL:*(void *)(a1 + 40) bundleIdentifier:*(void *)(a1 + 48)];
}

void sub_10012215C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationNoticeManger];
  [v2 removeConversationNoticeWithUUID:*(void *)(a1 + 40)];
}

void sub_100122288(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "conversationUUID: %@ messagesGroupName: %@", (uint8_t *)&v11, 0x16u);
  }

  char v5 = [*(id *)(a1 + 48) mutableConversationsByUUID];
  CFStringRef v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setMessagesGroupName:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = [*(id *)(a1 + 48) mutableConversationsByUUID];
      uint64_t v10 = [v9 allKeys];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100122498(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100122550;
  v7[3] = &unk_100504F10;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_100122550(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v23;
    *(void *)&long long v4 = 134218242;
    long long v19 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if (objc_msgSend(v8, "linkLifetimeScope", v19))
        {
          uint64_t v9 = [*(id *)(a1 + 40) mutableConversationsByUUID];
          uint64_t v10 = [v8 groupUUID];
          int v11 = [v9 objectForKeyedSubscript:v10];

          if (!v11) {
            goto LABEL_10;
          }
          id v12 = [v11 activeRemoteParticipants];
          if ([v12 count])
          {
LABEL_13:
          }
          else
          {
            id v13 = [v11 state];

            if (!v13)
            {
LABEL_10:
              uint64_t v14 = [v8 pseudonym];
              uint64_t v15 = sub_100008DCC();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                id v16 = [v8 linkLifetimeScope];
                *(_DWORD *)long long buf = v19;
                id v27 = v16;
                __int16 v28 = 2112;
                __int16 v29 = v8;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%ld conversationLink should be removed, not needed anymore %@", buf, 0x16u);
              }

              uint64_t v17 = [*(id *)(a1 + 40) linkManager];
              uint64_t v18 = [v8 pseudonym];
              v20[0] = _NSConcreteStackBlock;
              v20[1] = 3221225472;
              v20[2] = sub_1001227E8;
              v20[3] = &unk_100505530;
              id v21 = v14;
              id v12 = v14;
              [v17 invalidateLinkWithPseudonym:v18 deleteReason:6 completionHandler:v20];

              goto LABEL_13;
            }
          }

          continue;
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v5);
  }
}

void sub_1001227E8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = @"NO";
    int v9 = 138412802;
    if (a2) {
      CFStringRef v8 = @"YES";
    }
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    CFStringRef v12 = v8;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "conversationLink was removed since it was not needed anymore {pseudonym: %@, success: %@, error: %@}", (uint8_t *)&v9, 0x20u);
  }
}

void sub_100122988(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "removeConversationWithUUID: %@", (uint8_t *)&v10, 0xCu);
  }

  long long v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  id v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v5)
  {
    [*(id *)(a1 + 40) conversationInvalidated:v5];
  }
  else
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      CFStringRef v8 = [*(id *)(a1 + 40) mutableConversationsByUUID];
      int v9 = [v8 allKeys];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      __int16 v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_100122BD4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [*(id *)(a1 + 40) UUID];
  long long v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    [v4 addAliasesToConversationContainer:*(void *)(a1 + 40) forBundleIdentifier:*(void *)(a1 + 48)];
  }
  else
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [*(id *)(a1 + 40) UUID];
      uint64_t v7 = [*(id *)(a1 + 32) mutableConversationsByUUID];
      CFStringRef v8 = [v7 allKeys];
      int v9 = 138412546;
      int v10 = v6;
      __int16 v11 = 2112;
      __int16 v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find conversation for container with UUID %@. All conversation UUIDs: %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_100122DF8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "includeMetricsReport onConversationWithUUID: %@", (uint8_t *)&v10, 0xCu);
  }

  long long v4 = [*(id *)(a1 + 40) mutableConversationsByUUID];
  id v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v5)
  {
    uint64_t v6 = [*(id *)(a1 + 40) reportingController];
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v7 = +[NSArray arrayWithObjects:&v14 count:1];
    CFStringRef v8 = [v5 tuConversation];
    [v6 groupActivitiesReportsReceived:v7 forConversation:v8];
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v7 = [*(id *)(a1 + 40) mutableConversationsByUUID];
    CFStringRef v8 = [v7 allKeys];
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    __int16 v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Dropping metrics report, could not find conversation with conversationUUID %@. All conversation UUIDs: %@", (uint8_t *)&v10, 0x16u);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100123088(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (!v3) {
    goto LABEL_20;
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v4 = [v3 tuActivitySessions];
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v25;
LABEL_4:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v25 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void **)(*((void *)&v24 + 1) + 8 * v8);
      if ([v9 state] == (id)1)
      {
        int v10 = [v9 activity];
        unsigned int v11 = [v10 isScreenSharingActivity];

        if (v11) {
          break;
        }
      }
      if (v6 == (id)++v8)
      {
        id v6 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v6) {
          goto LABEL_4;
        }
        goto LABEL_11;
      }
    }

    if (!*(void *)(a1 + 48)) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_11:

    if (!*(void *)(a1 + 48))
    {
      __int16 v12 = [*(id *)(a1 + 32) featureFlags];
      unsigned __int8 v13 = [v12 avLessSharePlayEnabled];

      if ((v13 & 1) == 0)
      {
LABEL_13:
        uint64_t v14 = sub_100008DCC();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1003AC380();
        }

        uint64_t v15 = +[TUCallCenter sharedInstance];
        id v16 = [v15 queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100123374;
        block[3] = &unk_100504EC0;
        id v23 = v3;
        dispatch_async(v16, block);

        goto LABEL_20;
      }
    }
  }
  uint64_t v17 = [*(id *)(a1 + 32) mutableConversationsRequestingUpgradeWithPreferences];
  uint64_t v18 = [v17 objectForKey:*(void *)(a1 + 40)];

  if (!v18)
  {
    long long v19 = [*(id *)(a1 + 32) mutableConversationsRequestingUpgradeWithPreferences];
    long long v20 = +[TUConversationInvitationPreference incomingCallInvitationPreferences];
    [v19 setObject:v20 forKey:*(void *)(a1 + 40)];
  }
  id v21 = [v3 avMode];
  [v3 setLocalParticipantAudioVideoMode:*(void *)(a1 + 48) presentationMode:*(void *)(a1 + 56)];
  [v3 setVideoEnabled:*(void *)(a1 + 48) == 2];
  [*(id *)(a1 + 32) notifyDelegatesOfAVModeChanged:v21 toAVMode:*(void *)(a1 + 48) forConversation:v3];
LABEL_20:
}

void sub_100123374(uint64_t a1)
{
  id v2 = +[TUCallCenter sharedInstance];
  uint64_t v3 = [*(id *)(a1 + 32) groupUUID];
  long long v4 = [v2 callsWithGroupUUID:v3];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v9);
        unsigned int v11 = sub_100008DCC();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1003AC3B4((uint64_t)v17, v10);
        }

        __int16 v12 = +[TUCallCenter sharedInstance];
        [v12 disconnectCall:v10];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }
    while (v7);
  }
}

void sub_1001235CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  long long v4 = sub_100008DCC();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found conversation that we want to register the messagesGroupUUID on", buf, 2u);
    }

    [v3 registerMessagesGroupAssociation];
    id v6 = [CSDMessagingConversationMessage alloc];
    id v7 = [v3 groupUUID];
    id v5 = [(CSDMessagingConversationMessage *)v6 initWithType:34 groupUUID:v7 link:0];

    v16[0] = IDSSendMessageOptionPublicMessageIntentKey;
    uint64_t v8 = +[NSNumber numberWithInt:34];
    v17[0] = v8;
    v16[1] = IDSSendMessageOptionQueueOneIdentifierKey;
    uint64_t v9 = [v5 conversationGroupUUIDString];
    uint64_t v10 = +[NSNumber numberWithInt:34];
    unsigned int v11 = +[NSString stringWithFormat:@"%@:%@", v9, v10];
    v17[1] = v11;
    __int16 v12 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];

    long long v13 = *(void **)(a1 + 32);
    long long v14 = [v5 data];
    [v13 broadcastData:v14 onConversation:v3 additionalOptions:v12];
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1003AC410();
  }
}

void sub_100123A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100123A6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained cleanupExpiredPendingConversations];
    id WeakRetained = v2;
  }
}

void sub_100124150(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    long long v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

id sub_100124298(uint64_t a1)
{
  return [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) conversationChanged:*(void *)(a1 + 48)];
}

void sub_100124504(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    long long v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) connectionDidStartForConversation:*(void *)(a1 + 40)];
}

void sub_100124870(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  long long v4 = a3;
  char v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v3) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138412546;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "conversationLink finished removing after call was invalidated {success: %@, error: %@}", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100125298(id *a1)
{
  char v2 = [a1[4] queue];
  dispatch_assert_queue_V2(v2);

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = [a1[4] delegateToQueue];
  id v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
    do
    {
      CFStringRef v6 = 0;
      do
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector())
        {
          CFStringRef v8 = [a1[5] tuConversation];
          __int16 v9 = [a1[4] delegateToQueue];
          uint64_t v10 = [v9 objectForKey:v7];

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1001254A8;
          block[3] = &unk_1005053A8;
          void block[4] = v7;
          id v14 = v8;
          id v15 = a1[4];
          id v16 = a1[6];
          id v17 = a1[7];
          id v11 = v8;
          dispatch_async(v10, block);
        }
        CFStringRef v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v4);
  }
}

void sub_1001254A8(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 32), "conversationManager:reportedHandedOffConversation:replacedByIdentifier:localizedHandoffRecipientDeviceCategory:", *(void *)(a1 + 48), *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 56), "identifier"), *(void *)(a1 + 64));
}

void sub_100125608(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) reportedRemoteDoesHandedOffForConversation:*(void *)(a1 + 40)];
}

void sub_100125750(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) addedActiveParticipant:*(void *)(a1 + 56)];
}

void sub_100126288(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) removedActiveParticipant:*(void *)(a1 + 56)];
}

void sub_1001263D0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) removedActiveParticipant:*(void *)(a1 + 56) withReason:*(void *)(a1 + 64)];
}

void sub_10012676C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversationChanged:*(void *)(a1 + 40)];
}

void sub_100126AD0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v13 = 138412546;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v13, 0x16u);
  }
  int v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  __int16 v12 = [*(id *)(a1 + 56) tuConversationParticipant];
  [v9 conversationManager:v11 conversationScreenSharingChanged:v10 forParticipant:v12];
}

void sub_100126F2C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) mediaPrioritiesDidChangeForParticipant:*(void *)(a1 + 56)];
}

void sub_1001272D0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) participant:*(void *)(a1 + 56) didReact:*(void *)(a1 + 64)];
}

void sub_100127650(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) participantDidStopReacting:*(void *)(a1 + 56)];
}

void sub_100127CB0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) failedWithContext:*(void *)(a1 + 56)];
}

void sub_100128038(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) receivedActivitySessionEvent:*(void *)(a1 + 56)];
}

void sub_1001284F0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) didChangeStateForActivitySession:*(void *)(a1 + 56)];
}

void sub_1001288A8(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) didChangeSceneAssociationForActivitySession:*(void *)(a1 + 56)];
}

void sub_100128C98(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) appLaunchState:*(void *)(a1 + 64) forActivitySession:*(void *)(a1 + 56)];
}

void sub_100129398(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) activeParticipant:*(void *)(a1 + 56) addedHighlightToConversation:*(void *)(a1 + 40) highlightIdentifier:*(void *)(a1 + 64) oldHighlightIdentifier:*(void *)(a1 + 72) isFirstAdd:*(unsigned __int8 *)(a1 + 80)];
}

void sub_10012971C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  CFStringRef v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    __int16 v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) activeParticipant:*(void *)(a1 + 56) removedHighlightFrom:*(void *)(a1 + 40) highlightIdentifier:*(void *)(a1 + 64)];
}

void sub_1001299B4(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = [v3 UUID];
      int v13 = 138412802;
      uint64_t v14 = v5;
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      long long v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Started tracking highlight identifier %@ with URL %@ for conversation UUID: %@", (uint8_t *)&v13, 0x20u);
    }
    CFStringRef v8 = [*(id *)(a1 + 32) collaborationStateManager];
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    __int16 v12 = [v3 UUID];
    [v8 startTrackingCollaborationIdentifier:v9 collaborationURL:v10 cloudKitAppBundleIDs:v11 isLocallyAdded:1 toConversationUUID:v12 completionHandler:*(void *)(a1 + 72)];
  }
}

void sub_100129C3C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40))
  {
    id v3 = [*(id *)(a1 + 48) mutableConversationsByUUID];
    id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 56)];

    uint64_t v5 = sub_100008DCC();
    uint64_t v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = [v4 UUID];
        int v16 = 138412802;
        uint64_t v17 = v7;
        __int16 v18 = 2112;
        uint64_t v19 = v8;
        __int16 v20 = 2112;
        long long v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding highlight identifier %@ with URL %@ to conversation UUID: %@", (uint8_t *)&v16, 0x20u);
      }
      uint64_t v10 = [v4 highlightIdentifiers];
      uint64_t v6 = [v10 anyObject];

      if ([v6 isEqualToString:*v1])
      {
        [*(id *)(a1 + 48) sendHighlightMessageForConversation:v4 highlightIdentifier:*(void *)(a1 + 32) type:30];
      }
      else
      {
        [v4 addHighlightIdentifier:*(void *)(a1 + 32)];
        [*(id *)(a1 + 48) sendHighlightMessageForConversation:v4 highlightIdentifier:*(void *)(a1 + 32) type:30];
        [*(id *)(a1 + 48) conversationChanged:v4];
        uint64_t v11 = [*(id *)(a1 + 48) collaborationStateManager];
        [v11 startTrackingCollaborationIdentifier:*(void *)(a1 + 32) collaborationURL:*(void *)(a1 + 40) cloudKitAppBundleIDs:*(void *)(a1 + 64) isLocallyAdded:1 toConversationUUID:*(void *)(a1 + 56) completionHandler:0];

        __int16 v12 = *(void **)(a1 + 48);
        int v13 = [v4 tuConversation];
        uint64_t v14 = *(void *)(a1 + 32);
        __int16 v15 = [v4 localParticipant];
        [v12 notifyDelegateOfHighlightAddedForConversation:v13 highlightIdentifier:v14 oldHighlightIdentifier:v6 byParticipant:v15 isFirstAdd:1];
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_1003AC4AC();
    }
  }
  else
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003AC478();
    }
  }
}

void sub_100129F70(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    id v3 = [*(id *)(a1 + 40) mutableConversationsByUUID];
    id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 48)];

    uint64_t v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *v1;
      int v11 = 138412546;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removing Highlight identifier: %@ from conversation: %@", (uint8_t *)&v11, 0x16u);
    }

    if (v4)
    {
      [v4 removeHighlightIdentifier:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) sendHighlightMessageForConversation:v4 highlightIdentifier:*(void *)(a1 + 32) type:31];
      [*(id *)(a1 + 40) conversationChanged:v4];
      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v8 = [v4 tuConversation];
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = [v4 localParticipant];
      [v7 notifyDelegateOfHighlightRemovedFromConversation:v8 highlightIdentifier:v9 byParticipant:v10];
    }
    else
    {
      uint64_t v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1003AC4AC();
      }
    }
  }
  else
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003AC514();
    }
  }
}

void sub_10012A208(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) mutableConversationsByUUID];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Marking Highlight opened for identifier: %@ on conversation: %@", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v6 = [*(id *)(a1 + 32) collaborationStateManager];
  [v6 collaborationOpened:*(void *)(a1 + 48)];
}

void sub_10012A5D0(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 56) collaborationStateChanged:*(void *)(a1 + 72) highlightIdentifier:*(void *)(a1 + 64)];
}

void sub_10012AA88(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) featureFlags];
  unsigned __int8 v3 = [v2 gelatoEnabled];

  if (v3)
  {
    if (*(void *)(a1 + 40))
    {
      id v4 = [*(id *)(a1 + 32) mutableConversationsByUUID];
      char v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 48)];

      uint64_t v6 = sub_100008DCC();
      uint64_t v7 = v6;
      long long v38 = v5;
      if (!v5)
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          sub_1003AC5B4();
        }
        goto LABEL_36;
      }
      id v36 = (uint64_t *)(a1 + 48);
      id v37 = (id *)(a1 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(a1 + 48);
        CFStringRef v10 = @"YES";
        if (!*(unsigned char *)(a1 + 56)) {
          CFStringRef v10 = @"NO";
        }
        *(_DWORD *)long long buf = 136315906;
        long long v51 = "-[CSDConversationManager addCollaborationDictionary:forConversationWithUUID:fromMe:]_block_invoke";
        __int16 v52 = 2112;
        uint64_t v53 = v8;
        __int16 v54 = 2112;
        uint64_t v55 = v9;
        __int16 v56 = 2112;
        CFStringRef v57 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s: Asked to add collaboration dictionary %@ to conversation with UUID %@ fromMe %@", buf, 0x2Au);
      }

      uint64_t v7 = [v5 tuConversation];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id obj = [*(id *)(a1 + 32) delegateToQueue];
      id v11 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v46;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v46 != v13) {
              objc_enumerationMutation(obj);
            }
            uint64_t v15 = *(void *)(*((void *)&v45 + 1) + 8 * i);
            if (objc_opt_respondsToSelector())
            {
              [*(id *)(a1 + 32) delegateToQueue];
              v17 = int v16 = v7;
              __int16 v18 = [v17 objectForKey:v15];

              uint64_t v7 = v16;
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_10012AFAC;
              block[3] = &unk_1005053A8;
              void block[4] = v15;
              uint64_t v19 = v38;
              uint64_t v20 = *(void *)(a1 + 32);
              long long v21 = *(void **)(a1 + 40);
              long long v41 = v19;
              uint64_t v42 = v20;
              id v43 = v21;
              __int16 v44 = v16;
              dispatch_async(v18, block);
            }
          }
          id v12 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
        }
        while (v12);
      }

      uint64_t v22 = TUCollaborationDictionaryIdentifierTypeKey;
      id v23 = [*v37 objectForKeyedSubscript:TUCollaborationDictionaryIdentifierTypeKey];
      CFStringRef v24 = (const __CFString *)TUCollaborationDictionaryURLKey;
      long long v25 = [*v37 objectForKeyedSubscript:TUCollaborationDictionaryURLKey];
      long long v26 = [*v37 objectForKeyedSubscript:TUCollaborationDictionaryBundleIDKey];
      if (v23) {
        BOOL v27 = v25 == 0;
      }
      else {
        BOOL v27 = 1;
      }
      if (v27)
      {
        __int16 v28 = sub_100008DCC();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          long long v34 = (const char *)*v37;
          uint64_t v35 = *v36;
          *(_DWORD *)long long buf = 138413058;
          long long v51 = v34;
          __int16 v52 = 2112;
          uint64_t v53 = v35;
          __int16 v54 = 2112;
          uint64_t v55 = v22;
          __int16 v56 = 2112;
          CFStringRef v57 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Cannot add collaboration dictionary %@ to conversation with UUID %@ because it is missing required keys %@ and/or %@", buf, 0x2Au);
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 56))
        {
          [*(id *)(a1 + 32) addHighlightIdentifier:v23 collaborationURL:v25 cloudKitAppBundleIDs:v26 forConversationUUID:*(void *)(a1 + 48)];
          goto LABEL_35;
        }
        __int16 v29 = v7;
        uint64_t v30 = [v38 highlightIdentifiers];
        __int16 v31 = [v30 anyObject];
        unsigned int v32 = [v31 isEqualToString:v23];

        if (v32)
        {
          uint64_t v33 = [*(id *)(a1 + 32) collaborationStateManager];
          [v33 startTrackingCollaborationIdentifier:v23 collaborationURL:v25 cloudKitAppBundleIDs:v26 isLocallyAdded:0 toConversationUUID:*(void *)(a1 + 48) completionHandler:0];

          uint64_t v7 = v29;
          goto LABEL_35;
        }
        __int16 v28 = sub_100008DCC();
        uint64_t v7 = v29;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          sub_1003AC61C();
        }
      }

LABEL_35:
LABEL_36:

      goto LABEL_37;
    }
    long long v38 = sub_100008DCC();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      sub_1003AC548();
    }
  }
  else
  {
    long long v38 = sub_100008DCC();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      sub_1003AC684();
    }
  }
LABEL_37:
}

void sub_10012AFAC(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  unsigned __int8 v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) addedCollaborationDictionary:*(void *)(a1 + 56) forConversation:*(void *)(a1 + 64)];
}

void sub_10012B400(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  unsigned __int8 v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  uint64_t v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) conversation:*(void *)(a1 + 40) changedBytesOfDataUsed:*(void *)(a1 + 56)];
}

void sub_10012C468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

id sub_10012C498(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10012C4C4(uint64_t a1)
{
}

void sub_10012C4CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10012C580;
  v7[3] = &unk_100507F88;
  void v7[4] = v2;
  long long v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  long long v8 = v6;
  [v1 conversationManager:v2 requestedEndpointWithIdentifier:v3 activitySession:v4 completion:v7];
}

void sub_10012C580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012C654;
  block[3] = &unk_100505B90;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_10012C654(void *a1)
{
  if (a1[4])
  {
    uint64_t v2 = *(void *)(*(void *)(a1[6] + 8) + 40);
    if (v2)
    {
      (*(void (**)(void))(v2 + 16))();
      uint64_t v3 = *(void *)(a1[6] + 8);
      uint64_t v4 = *(void **)(v3 + 40);
      *(void *)(v3 + 40) = 0;
    }
  }
  id v5 = a1[5];

  dispatch_group_leave(v5);
}

uint64_t sub_10012C6C0(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10012CA9C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 40) provider];
    if ([v3 shouldHandleUpdateForProvider:v4])
    {
    }
    else
    {
      char v5 = objc_opt_respondsToSelector();

      if (v5) {
        return;
      }
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    return;
  }
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    long long v8 = [*(id *)(a1 + 40) provider];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delegate should handle conversation update: %@ for provider: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 48) remoteMembersChanged:*(void *)(a1 + 56) forConversation:*(void *)(a1 + 40)];
}

uint64_t sub_10012E070(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
    int v8 = 138412546;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    __int16 v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retrying message (%@) for attempt #%@", (uint8_t *)&v8, 0x16u);
  }
  char v5 = +[CSDReportingController sharedInstance];
  [v5 messageRetryStartedForConversationGroupUUID:*(void *)(a1 + 40)];

  if ([*(id *)(a1 + 48) type] == 4)
  {
    id v6 = +[CSDReportingController sharedInstance];
    [v6 avcBlobRequestMessageRetryStartedForConversationGroupUUID:*(void *)(a1 + 40)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_10012F340(uint64_t a1)
{
  return [*(id *)(a1 + 32) _service:*(void *)(a1 + 40) account:*(void *)(a1 + 48) incomingData:*(void *)(a1 + 56) fromID:*(void *)(a1 + 64) context:*(void *)(a1 + 72) attemptCount:*(void *)(a1 + 80) + 1];
}

id sub_10012F35C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _service:*(void *)(a1 + 40) account:*(void *)(a1 + 48) incomingData:*(void *)(a1 + 56) fromID:*(void *)(a1 + 64) context:*(void *)(a1 + 72) attemptCount:*(void *)(a1 + 80) + 1];
}

void sub_10012F5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012F6B8;
  block[3] = &unk_100504FE0;
  char v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

id sub_10012F6B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) processGroupSessionParticipantUpdate:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
}

void sub_100134110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100134140(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v3 = objc_msgSend(*(id *)(a1 + 32), "kickedMembers", 0);
    id v4 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v18;
LABEL_4:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v17 + 1) + 8 * v7) handle];
        unsigned __int8 v9 = [v8 isEquivalentToHandle:*(void *)(a1 + 40)];

        if (v9) {
          break;
        }
        if (v5 == (id)++v7)
        {
          id v5 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
          if (v5) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }

      uint64_t v14 = sub_100008DCC();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_16;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v15 = [*(id *)(a1 + 32) UUID];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v22 = v16;
      __int16 v23 = 2112;
      CFStringRef v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "It would have been time to add LMI approved handle %@ on conversation UUID %@ to link's invited members, but they were kicked.", buf, 0x16u);
    }
    else
    {
LABEL_10:

      __int16 v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        id v12 = [*(id *)(a1 + 32) link];
        uint64_t v13 = [*(id *)(a1 + 32) UUID];
        *(_DWORD *)long long buf = 138412802;
        uint64_t v22 = v11;
        __int16 v23 = 2112;
        CFStringRef v24 = v12;
        __int16 v25 = 2112;
        long long v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Adding LMI approved handle %@ to invited member handles for link %@ after their kick timeout elapsed for conversation UUID %@", buf, 0x20u);
      }
      uint64_t v14 = +[NSSet setWithObject:*(void *)(a1 + 40)];
      uint64_t v15 = [*(id *)(a1 + 32) link];
      [WeakRetained addInvitedMemberHandles:v14 toConversationLink:v15 completionHandler:0];
    }

LABEL_16:
  }
}

id sub_1001346B8(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) count];
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "linkManager:updatedLinksFromSync: -- updating delegates {linkDescriptors.count: %d}", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 40) notifyDelegatesOfChangedLinkDescriptors:*(void *)(a1 + 32)];
}

id sub_100134820(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) count];
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "linkManager:removedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 40) handleRemovedLinkDescriptors:*(void *)(a1 + 32)];
}

id sub_100134988(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) count];
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "linkManager:updatedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d} %@", (uint8_t *)v6, 0x12u);
  }

  return [*(id *)(a1 + 40) notifyDelegatesOfChangedLinkDescriptors:*(void *)(a1 + 32)];
}

id sub_100134B00(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) count];
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "linkManager:removedLinkDescriptorsFromValidityCheck: -- updating delegates {linkDescriptors.count: %d}", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 40) handleRemovedLinkDescriptors:*(void *)(a1 + 32)];
}

void sub_100134EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100134EEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char v2 = [WeakRetained mutableConversationsByUUID];
  unsigned int v3 = [*(id *)(a1 + 32) UUID];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  id v5 = +[NSSet setWithObject:*(void *)(a1 + 40)];
  uint64_t v6 = +[NSSet set];
  __int16 v7 = +[TUConversationInvitationPreference letMeInResponseInvitationPreferences];
  [v4 addRemoteMembers:v5 otherInvitedHandles:v6 invitationPreferences:v7 addingFromLetMeIn:1 triggeredLocally:1];
}

void sub_10013535C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Membership reported rejection {member: %@, error: %@}", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100135D98(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = @"YES";
    if (!*(unsigned char *)(a1 + 48)) {
      CFStringRef v4 = @"NO";
    }
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    CFStringRef v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying delegates of received remote attributes %@ (isLocallySharing: %@)", (uint8_t *)&v5, 0x16u);
  }

  if (!*(unsigned char *)(a1 + 48)) {
    [*(id *)(a1 + 40) notifyDelegatesOfRemoteScreenShareAttributes:*(void *)(a1 + 32) isLocallySharing:0];
  }
}

void sub_100135F38(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asking screen sharing activity manager to resume observing after invalidation", buf, 2u);
  }

  if (*(unsigned char *)(a1 + 48))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v3 = [*(id *)(a1 + 32) mutableConversationsByUUID];
    CFStringRef v4 = [v3 allValues];

    id v5 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v17;
      *(void *)&long long v6 = 138412290;
      long long v15 = v6;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v4);
          }
          __int16 v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          if (objc_msgSend(v10, "state", v15) == (id)3 && objc_msgSend(v10, "isScreenEnabled"))
          {
            uint64_t v11 = sub_100008DCC();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              id v12 = [v10 UUID];
              *(_DWORD *)long long buf = v15;
              long long v21 = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disabling screensharing forConversationWithUUID:%@ since screen sharing session got invalidated", buf, 0xCu);
            }
            uint64_t v13 = *(void **)(a1 + 32);
            uint64_t v14 = [v10 UUID];
            [v13 setScreenEnabled:0 forConversationWithUUID:v14];
          }
        }
        id v7 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) notifyDelegatesOfRemoteScreenShareEndedWithReason:*(void *)(a1 + 40)];
  }
}

id sub_100136338(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) activityAuthorizationChangedForBundleIdentifier:*(void *)(a1 + 48)];
}

id sub_1001366A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) sharePlayAvailableChanged:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1001366B4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) sharePlayAllowedChanged:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100136A20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) screenSharingAvailableChanged:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100136A30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) conversationManager:*(void *)(a1 + 40) screenSharingAllowedChanged:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100136B40(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v37 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received resource at url %@", buf, 0xCu);
  }

  id v4 = objc_alloc((Class)NSUUID);
  id v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"resourceTransferConversationIDKey"];
  id v6 = [v4 initWithUUIDString:v5];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 48) conversationWithGroupUUID:v6];
    uint64_t v8 = v7;
    if (v7)
    {
      id v9 = [v7 activeRemoteParticipants];
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_100136EE4;
      v33[3] = &unk_100505580;
      long long v34 = *(id *)(a1 + 56);
      __int16 v10 = [v9 objectsPassingTest:v33];
      uint64_t v11 = [v10 allObjects];
      id v12 = [v11 firstObject];

      if (v12)
      {
        id v13 = objc_alloc((Class)NSUUID);
        uint64_t v14 = [*(id *)(a1 + 40) objectForKey:@"resourceTransferActivitySessionIDKey"];
        long long v15 = [v13 initWithUUIDString:v14];

        if (v15)
        {
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v16 = [v8 activitySessions];
          id v17 = [v16 countByEnumeratingWithState:&v29 objects:v35 count:16];
          if (v17)
          {
            id v18 = v17;
            BOOL v27 = v12;
            id v28 = v6;
            uint64_t v19 = *(void *)v30;
            while (2)
            {
              for (i = 0; i != v18; i = (char *)i + 1)
              {
                if (*(void *)v30 != v19) {
                  objc_enumerationMutation(v16);
                }
                long long v21 = *(void **)(*((void *)&v29 + 1) + 8 * i);
                uint64_t v22 = objc_msgSend(v21, "identifier", v27);
                unsigned int v23 = [v22 isEqual:v15];

                if (v23)
                {
                  uint64_t v25 = *(void *)(a1 + 32);
                  long long v26 = [*(id *)(a1 + 40) objectForKey:@"resourceTransferClientMetadataKey"];
                  id v12 = v27;
                  objc_msgSend(v21, "receivedResourceAtURL:withMetadata:fromParticipantIdentifier:", v25, v26, objc_msgSend(v27, "identifier"));

                  id v6 = v28;
                  goto LABEL_25;
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v29 objects:v35 count:16];
              if (v18) {
                continue;
              }
              break;
            }
            id v12 = v27;
            id v6 = v28;
          }
        }
        else
        {
          long long v16 = sub_100008DCC();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_1003ACE04();
          }
        }
LABEL_25:
      }
      else
      {
        long long v15 = sub_100008DCC();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_1003ACDD0();
        }
      }

      CFStringRef v24 = v34;
    }
    else
    {
      CFStringRef v24 = sub_100008DCC();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1003ACD68();
      }
    }
  }
  else
  {
    uint64_t v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003ACD34();
    }
  }
}

id sub_100136EE4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 activeIDSDestination];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10013705C(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) resourceTransferCallbacks];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3)
  {
    v3[2](v3, 0);
  }
  else
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003ACE38();
    }
  }
  id v5 = [*(id *)(a1 + 32) resourceTransferCallbacks];
  [v5 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1001376B4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100137700(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100137718(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100137734(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100137750(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_100137760()
{
  return v0;
}

void sub_100137778(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

uint64_t sub_100137798(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1001377AC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x2Au);
}

void sub_100137910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10013792C(id a1, NSError *a2)
{
  char v2 = a2;
  if (v2)
  {
    uint64_t v3 = TUDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003ACE6C((uint64_t)v2, v3);
    }
  }
}

void sub_100137984(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id v4 = [WeakRetained delegate];
    if (a2 == 1 && (objc_opt_respondsToSelector() & 1) != 0) {
      [v4 continuityCameraDidConnect];
    }

    id WeakRetained = v5;
  }
}

BOOL sub_100137D04(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        id v12 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 16), v12);
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v12, a2))
        {
          PBReaderRecallMark();
          goto LABEL_27;
        }

        return 0;
      case 2u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 24;
        goto LABEL_26;
      case 3u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 32;
        goto LABEL_26;
      case 4u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 8;
LABEL_26:
        id v12 = *(CSDMessagingHandle **)(a1 + v14);
        *(void *)(a1 + v14) = v13;
LABEL_27:

        goto LABEL_28;
      default:
        if (PBReaderSkipValueWithTag())
        {
LABEL_28:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
    }
  }
}

BOOL sub_1001396E8(id a1, TUHandle *a2)
{
  char v2 = [(TUHandle *)a2 value];
  char v3 = [v2 destinationIdIsPseudonym] ^ 1;

  return v3;
}

id sub_1001398C8(void *a1, void *a2)
{
  id v3 = a2;
  char v4 = [a1 UIBackgroundModes];
  id v5 = [v4 containsObject:v3];

  return v5;
}

uint64_t sub_10013A138(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  char v4 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  id v5 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  unint64_t v6 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v7 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v10 == -1 || v10 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v11 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
      v9 |= (unint64_t)(v11 & 0x7F) << v7;
      if ((v11 & 0x80) == 0) {
        goto LABEL_12;
      }
      v7 += 7;
      BOOL v12 = v8++ >= 9;
      if (v12)
      {
        unint64_t v9 = 0;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v9 = 0;
    }
LABEL_14:
    if (v13 || (v9 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v9 >> 3))
    {
      case 1u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 2u;
        while (1)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
          v17 |= (unint64_t)(v19 & 0x7F) << v15;
          if ((v19 & 0x80) == 0) {
            goto LABEL_75;
          }
          v15 += 7;
          BOOL v12 = v16++ >= 9;
          if (v12)
          {
            LODWORD(v17) = 0;
            goto LABEL_77;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_75:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_77:
        uint64_t v56 = v5[370];
        goto LABEL_82;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v17 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v12 = v22++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_81:
        uint64_t v56 = v6[371];
LABEL_82:
        *(_DWORD *)(a1 + v56) = v17;
        goto LABEL_104;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 0x40u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v12 = v26++ >= 9;
              if (v12)
              {
                uint64_t v27 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v27 = 0;
        }
LABEL_86:
        BOOL v57 = v27 != 0;
        uint64_t v58 = 40;
        goto LABEL_103;
      case 4u:
        long long v30 = v4;
        long long v31 = v6;
        long long v32 = v5;
        uint64_t v33 = objc_alloc_init(CSDMessagingAVConferenceInviteData);
        objc_storeStrong((id *)(a1 + 8), v33);
        if (PBReaderPlaceMark() && sub_1000A0AE0((uint64_t)v33, a2))
        {
          PBReaderRecallMark();

          id v5 = v32;
          unint64_t v6 = v31;
          char v4 = v30;
LABEL_104:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 5u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 4u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v12 = v35++ >= 9;
              if (v12)
              {
                uint64_t v36 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v36 = 0;
        }
LABEL_90:
        BOOL v57 = v36 != 0;
        uint64_t v58 = 36;
        goto LABEL_103;
      case 6u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 0x10u;
        while (2)
        {
          unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v12 = v40++ >= 9;
              if (v12)
              {
                uint64_t v41 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v41 = 0;
        }
LABEL_94:
        BOOL v57 = v41 != 0;
        uint64_t v58 = 38;
        goto LABEL_103;
      case 7u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 0x20u;
        while (2)
        {
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 == -1 || v47 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 1;
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              BOOL v12 = v45++ >= 9;
              if (v12)
              {
                uint64_t v46 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v46 = 0;
        }
LABEL_98:
        BOOL v57 = v46 != 0;
        uint64_t v58 = 39;
        goto LABEL_103;
      case 8u:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + v4[369]) |= 8u;
        while (2)
        {
          unint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 == -1 || v52 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 1;
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              BOOL v12 = v50++ >= 9;
              if (v12)
              {
                uint64_t v51 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v51 = 0;
        }
LABEL_102:
        BOOL v57 = v51 != 0;
        uint64_t v58 = 37;
LABEL_103:
        *(unsigned char *)(a1 + v58) = v57;
        goto LABEL_104;
      case 9u:
        uint64_t v54 = PBReaderReadString();
        uint64_t v55 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v54;

        goto LABEL_104;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_104;
    }
  }
}

BOOL sub_10013B3E4(id a1, TURoute *a2)
{
  char v2 = a2;
  if ([(TURoute *)v2 isPreferred]) {
    unsigned __int8 v3 = [(TURoute *)v2 isPreferredAndActive];
  }
  else {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

BOOL sub_10013B5F8(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isReceiver];
}

BOOL sub_10013B60C(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isSpeaker];
}

BOOL sub_10013B620(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isWirelessHeadset];
}

BOOL sub_10013B634(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isAirTunes];
}

BOOL sub_10013B648(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isCarAudio];
}

BOOL sub_10013B65C(id a1, TURoute *a2)
{
  return [(TURoute *)a2 isBluetooth];
}

BOOL sub_10013B6D0(uint64_t a1, void *a2)
{
  return [a2 bluetoothEndpointType] == *(id *)(a1 + 32);
}

id sub_10013B7A0(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10013B9D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10013BB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013BB60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10013BB70(uint64_t a1)
{
}

void sub_10013BB78(uint64_t a1, void *a2, unsigned char *a3)
{
  *a3 = 1;
}

void sub_10013BC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013BC84(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

id sub_10013C098(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 bluetoothAddress];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) uniqueIdentifier];
    unint64_t v6 = [v3 bluetoothAddress];
    id v7 = [v5 hasPrefix:v6];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10013C294(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithName:@"com.apple.private.alloy.facetime.audio"];
  char v2 = (void *)qword_10058C458;
  qword_10058C458 = (uint64_t)v1;
}

id sub_10013C4DC(CSDMessagingConversationActivity *self, SEL a2)
{
  v7.receiver = self;
  v7.super_class = (Class)CSDMessagingConversationActivity;
  id v3 = [(CSDMessagingConversationActivity *)&v7 description];
  id v4 = [(CSDMessagingConversationActivity *)self dictionaryRepresentation];
  id v5 = +[NSString stringWithFormat:@"%@ %@", v3, v4];

  return v5;
}

uint64_t sub_10013C828(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 80;
        goto LABEL_33;
      case 2u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 48;
        goto LABEL_33;
      case 3u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 56;
        goto LABEL_33;
      case 4u:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 32;
        goto LABEL_33;
      case 5u:
        uint64_t v13 = PBReaderReadData();
        uint64_t v14 = 88;
        goto LABEL_33;
      case 7u:
        unsigned int v16 = objc_alloc_init(CSDMessagingConversationActivityContext);
        objc_storeStrong((id *)(a1 + 24), v16);
        if (!PBReaderPlaceMark() || !sub_10007FB6C((uint64_t)v16, a2)) {
          goto LABEL_62;
        }
        goto LABEL_50;
      case 8u:
        unsigned int v16 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v17 = 96;
        goto LABEL_48;
      case 9u:
        *(unsigned char *)(a1 + 108) |= 2u;
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFF7 && v18 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v19 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v19 = 0;
        }
        uint64_t v28 = 16;
        goto LABEL_59;
      case 0xAu:
        uint64_t v13 = PBReaderReadString();
        uint64_t v14 = 64;
LABEL_33:
        long long v20 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_60;
      case 0xBu:
        unsigned int v16 = objc_alloc_init(CSDMessagingConversationActivityMetadata);
        objc_storeStrong((id *)(a1 + 40), v16);
        if (!PBReaderPlaceMark() || (sub_1001754C4((uint64_t)v16, a2) & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_50;
      case 0xCu:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 108) |= 4u;
        while (2)
        {
          uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v10 = v22++ >= 9;
              if (v10)
              {
                uint64_t v23 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_54:
        *(unsigned char *)(a1 + 104) = v23 != 0;
        goto LABEL_60;
      case 0xDu:
        *(unsigned char *)(a1 + 108) |= 1u;
        unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v19 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v19 = 0;
        }
        uint64_t v28 = 8;
LABEL_59:
        *(void *)(a1 + v28) = v19;
        goto LABEL_60;
      case 0xEu:
        unsigned int v16 = objc_alloc_init(CSDMessagingHandle);
        uint64_t v17 = 72;
LABEL_48:
        objc_storeStrong((id *)(a1 + v17), v16);
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v16, a2))
        {
LABEL_50:
          PBReaderRecallMark();

LABEL_60:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_62:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_60;
    }
  }
}

BOOL sub_10013E05C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0)
          {
            uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__notificationStyles;
            goto LABEL_47;
          }
          v20 += 7;
          BOOL v18 = v21++ > 8;
          if (v18)
          {
            LODWORD(v15) = 0;
            uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__notificationStyles;
            goto LABEL_49;
          }
        }
        uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__notificationStyles;
LABEL_46:
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        goto LABEL_47;
      }
      if (v12 == 2) {
        break;
      }
      if (v12 == 1)
      {
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__version;
            goto LABEL_46;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            break;
          }
          v13 += 7;
          BOOL v18 = v14++ > 8;
          if (v18)
          {
            LODWORD(v15) = 0;
            uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__version;
            goto LABEL_49;
          }
        }
        uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__version;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_50:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v15 = 0;
    *(unsigned char *)(a1 + 20) |= 1u;
    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__handleType;
        goto LABEL_46;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v15 |= (unint64_t)(v27 & 0x7F) << v24;
      if ((v27 & 0x80) == 0) {
        break;
      }
      v24 += 7;
      BOOL v18 = v25++ > 8;
      if (v18)
      {
        LODWORD(v15) = 0;
        uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__handleType;
        goto LABEL_49;
      }
    }
    uint64_t v19 = &OBJC_IVAR___CSDMessagingConversationInvitationPreference__handleType;
LABEL_47:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_49:
    *(_DWORD *)(a1 + *v19) = v15;
    goto LABEL_50;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_10013EAD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeAudioAvailable;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0;
            BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeAudioAvailable;
            goto LABEL_40;
          }
        }
        BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeAudioAvailable;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_40:
        *(unsigned char *)(a1 + *v18) = v14 != 0;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 12) |= 2u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeVideoAvailable;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0;
        BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeVideoAvailable;
        goto LABEL_40;
      }
    }
    BOOL v18 = &OBJC_IVAR___CSDMessagingCallCapabilitiesState__faceTimeVideoAvailable;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100141544(uint64_t a1)
{
  char v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Issuing request to acquire process assertion for bundle identifier: %@", buf, 0xCu);
  }

  char v4 = [*(id *)(a1 + 40) processAssertionWithBundleIdentifier:*(void *)(a1 + 32)];
  unsigned int v5 = [*(id *)(a1 + 40) processAssertions];
  unsigned __int8 v6 = [v5 containsObject:v4];

  if (v6)
  {
    unint64_t v7 = [*(id *)(a1 + 40) processAssertions];
    [v7 addObject:v4];

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = [*(id *)(a1 + 40) processAssertions];
      (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, v9, [v10 countForObject:v4]);
    }
  }
  else
  {
    int v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Acquiring process assertion for bundle identifier %@", buf, 0xCu);
    }

    unsigned int v13 = [*(id *)(a1 + 40) processAssertions];
    [v13 addObject:v4];

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100141814;
    v20[3] = &unk_100508490;
    int8x16_t v19 = *(int8x16_t *)(a1 + 32);
    id v14 = (id)v19.i64[0];
    int8x16_t v21 = vextq_s8(v19, v19, 8uLL);
    id v22 = v4;
    id v23 = *(id *)(a1 + 48);
    [v22 acquireWithCompletionHandler:v20];
  }
  unint64_t v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    BOOL v17 = [*(id *)(a1 + 40) processAssertions];
    id v18 = [v17 countForObject:v4];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = v16;
    __int16 v26 = 2048;
    id v27 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Incremented count of process assertion for bundle identifier %@ to %lu", buf, 0x16u);
  }
}

void sub_100141814(id *a1, char a2)
{
  char v4 = [a1[4] serialQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001418F0;
  block[3] = &unk_100508468;
  char v12 = a2;
  id v5 = a1[5];
  id v6 = a1[4];
  id v8 = v5;
  id v9 = v6;
  id v10 = a1[6];
  id v11 = a1[7];
  dispatch_async(v4, block);
}

uint64_t sub_1001418F0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = sub_100008DCC();
  char v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Acquired initial process assertion for bundle identifier %@", (uint8_t *)&v14, 0xCu);
    }

    id v6 = [*(id *)(a1 + 40) processAssertions];
    id v7 = [v6 countForObject:*(void *)(a1 + 48)];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003AD1BC(a1, v4);
    }

    id v8 = [*(id *)(a1 + 40) processAssertions];
    unsigned int v9 = [v8 containsObject:*(void *)(a1 + 48)];

    if (v9)
    {
      do
      {
        id v10 = [*(id *)(a1 + 40) processAssertions];
        [v10 removeObject:*(void *)(a1 + 48)];

        id v11 = [*(id *)(a1 + 40) processAssertions];
        unsigned __int8 v12 = [v11 containsObject:*(void *)(a1 + 48)];
      }
      while ((v12 & 1) != 0);
    }
    id v7 = 0;
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, id))(result + 16))(result, *(void *)(a1 + 32), v7);
  }
  return result;
}

void sub_100141B50(uint64_t a1)
{
  int v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received request to invalidate process assertion with bundle identifier: %@", (uint8_t *)&v13, 0xCu);
  }

  char v4 = [*(id *)(a1 + 40) processAssertionWithBundleIdentifier:*(void *)(a1 + 32)];
  uint64_t v5 = [*(id *)(a1 + 40) processAssertions];
  id v6 = [v5 countForObject:v4];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 40) processAssertions];
    [v7 removeObject:v4];

    id v8 = [*(id *)(a1 + 40) processAssertions];
    id v9 = [v8 countForObject:v4];
  }
  else
  {
    id v9 = 0;
  }
  id v10 = sub_100008DCC();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 138412546;
    uint64_t v14 = v11;
    __int16 v15 = 2048;
    id v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Decremented count of process assertion for bundle identifier %@ to %lu", (uint8_t *)&v13, 0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, *(void *)(a1 + 32), v9);
  }
}

uint64_t sub_100141F20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100141F30(uint64_t a1)
{
}

void sub_100141F38(uint64_t a1)
{
  uint64_t v11 = objc_alloc_init(CSDIncomingCallFilterDataSource);
  int v2 = [[CSDDeviceLockStateObserver alloc] initWithQueue:*(void *)(a1 + 32)];
  uint64_t v3 = objc_alloc_init(CSDCallCenterObserver);
  char v4 = +[CSDCallDirectoryManager sharedInstance];
  id v5 = *(id *)(a1 + 40);
  id v6 = +[TUCallCenter sharedInstance];
  id v7 = [v6 contactStore];
  id v8 = [v5 initWithDataSource:v11 deviceLockObserver:v2 callCenterObserver:v3 callDirectoryStoreBuilder:&stru_1005084D0 callDirectoryManager:v4 contactStore:v7 queue:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

CXCallDirectoryStore *__cdecl sub_100142058(id a1)
{
  id v7 = 0;
  id v1 = [objc_alloc((Class)CXCallDirectoryStore) initForReadingWithError:&v7];
  id v2 = v7;
  uint64_t v3 = sub_100008DCC();
  char v4 = v3;
  if (v1)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initialized CXCallDirectoryStore for reading", v6, 2u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    sub_1003AD238((uint64_t)v2, v4);
  }

  return (CXCallDirectoryStore *)v1;
}

void sub_1001423A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001423BC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...", v5, 2u);
  }

  uint64_t v3 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setCallDirectoryStore:v3];
}

uint64_t sub_100142510(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412546;
      id v16 = v5;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@", (uint8_t *)&v15, 0x16u);
    }

    uint64_t v9 = [WeakRetained[7] providerWithIdentifier:v6];
    id v10 = v9;
    if (v9
      && [v9 isSystemProvider]
      && ([WeakRetained callDirectoryAllowsCallFromSourceAddress:v5] & 1) == 0)
    {
      uint64_t v12 = sub_100008DCC();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412290;
        id v16 = v5;
        int v13 = "Blocking call with sourceAddress %@ since callDirectoryAllowsCallFromSourceAddress returned NO";
        goto LABEL_14;
      }
    }
    else
    {
      if ([WeakRetained _doNotDisturbAllowsCallFromSourceAddress:v5 providerIdentifier:v6])
      {
        uint64_t v11 = 0;
LABEL_16:

        goto LABEL_17;
      }
      uint64_t v12 = sub_100008DCC();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412290;
        id v16 = v5;
        int v13 = "Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, 0xCu);
      }
    }

    uint64_t v11 = 1;
    goto LABEL_16;
  }
  uint64_t v11 = 0;
LABEL_17:

  return v11;
}

void sub_100142864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014287C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) isOnEmergencyCall];
    uint64_t v4 = *(void *)(a1 + 40);
    int v11 = 67109378;
    LODWORD(v12[0]) = v3;
    WORD2(v12[0]) = 2112;
    *(void *)((char *)v12 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DND - onEmergencyCall: %d providerIdentifier: %@", (uint8_t *)&v11, 0x12u);
  }

  if (![*(id *)(a1 + 32) isOnEmergencyCall])
  {
    id v7 = [*(id *)(a1 + 32) dataSource];
    unsigned __int8 v8 = [v7 isDestinationIDAllowedThroughDoNotDisturb:*(void *)(a1 + 48) providerIdentifier:*(void *)(a1 + 40)];

    if (v8) {
      return;
    }
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      int v11 = 138412290;
      v12[0] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Not allowing call because DND is enabled for %@", (uint8_t *)&v11, 0xCu);
    }

    goto LABEL_10;
  }
  id v5 = *(void **)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) emergencyProviderIdentifier];
  LOBYTE(v5) = [v5 isEqualToString:v6];

  if ((v5 & 1) == 0) {
LABEL_10:
  }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
}

void sub_100143428(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callContainer];
  unsigned __int8 v3 = [v2 anyCallPassesTest:&stru_100508568];

  uint64_t v4 = [*(id *)(a1 + 40) queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1001434F0;
  v5[3] = &unk_100505030;
  void v5[4] = *(void *)(a1 + 40);
  unsigned __int8 v6 = v3;
  dispatch_async(v4, v5);
}

BOOL sub_1001434E8(id a1, TUCall *a2)
{
  return [(TUCall *)a2 isEmergency];
}

id sub_1001434F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setOnEmergencyCall:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100144628(uint64_t a1)
{
  return _[*(id *)(a1 + 32) providersChangedForProviderManager:*(void *)(*(void *)(a1 + 32) + 48)];
}

id sub_10014474C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Call history changed: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _handleCallHistoryChanged];
}

void sub_100144D74(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requested to report call ended for conversation %@", (uint8_t *)&v6, 0xCu);
  }

  id v4 = [objc_alloc((Class)CHRecentCall) initWithConversation:*(void *)(a1 + 32) startDate:*(void *)(a1 + 40) avMode:*(void *)(a1 + 56)];
  int v5 = [*(id *)(a1 + 48) recentsManager];
  [v5 addToCallHistory:v4];
}

void sub_1001455F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) transactionObjectsAwaitingCallHistory];
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Ending transaction for %@ because we timed out waiting for a call history database changed notification", (uint8_t *)&v8, 0xCu);
    }

    int v6 = [*(id *)(a1 + 32) transactionObjectsAwaitingCallHistory];
    [v6 removeObject:*(void *)(a1 + 40)];

    uint64_t v7 = [*(id *)(a1 + 32) transactionManager];
    [v7 endTransactionIfNecessaryForObject:*(void *)(a1 + 40)];
  }
}

void sub_1001458A0(uint64_t a1, uint64_t a2)
{
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(a1 + 32) predicateFormat];
    int v6 = 134218242;
    uint64_t v7 = a2;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set %ld recent calls as read using matching predicate '%@'.", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100145C3C(uint64_t a1, uint64_t a2)
{
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 134218242;
    uint64_t v7 = a2;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deleted %ld recent calls matching predicate %@", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t sub_100146304(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_30;
        }
        v14 += 7;
        BOOL v9 = v15++ >= 9;
        if (v9)
        {
          LODWORD(v16) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v16) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadString();
      int v13 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_10014771C(id *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 14;
        goto LABEL_39;
      case 2u:
        char v14 = objc_alloc_init(CSDMessagingPersonNameComponents);
        objc_storeStrong(a1 + 15, v14);
        if (PBReaderPlaceMark() && sub_1000D2BD8((uint64_t)v14, a2))
        {
          PBReaderRecallMark();
LABEL_40:

LABEL_41:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
        goto LABEL_39;
      case 4u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 11;
        goto LABEL_39;
      case 5u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 6;
        goto LABEL_39;
      case 6u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 13;
        goto LABEL_39;
      case 7u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 12;
        goto LABEL_39;
      case 8u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 10;
        goto LABEL_39;
      case 9u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 9;
        goto LABEL_39;
      case 0xAu:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 2;
        goto LABEL_39;
      case 0xBu:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 3;
        goto LABEL_39;
      case 0xCu:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 1;
        goto LABEL_39;
      case 0xDu:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 7;
        goto LABEL_39;
      case 0xEu:
        PBReaderReadString();
        char v14 = (CSDMessagingPersonNameComponents *)objc_claimAutoreleasedReturnValue();
        if (v14) {
          [a1 addContactIdentifiers:v14];
        }
        goto LABEL_40;
      case 0xFu:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 4;
        goto LABEL_39;
      case 0x10u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 5;
LABEL_39:
        char v14 = (CSDMessagingPersonNameComponents *)a1[v13];
        a1[v13] = (id)v12;
        goto LABEL_40;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_41;
    }
  }
}

void sub_100148EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100148EE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100148EF0(uint64_t a1)
{
}

void sub_100148EF8(uint64_t a1)
{
}

void sub_100149030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100149048(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id obj = [*(id *)(a1 + 32) activityQueue];
  id v2 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v13;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(obj);
        }
        unint64_t v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unint64_t v7 = [v6 userActivity];
        char v8 = [v7 activityType];
        unsigned int v9 = +[CSDUserActivity activityTypeForUserActivityTypeString:v8];
        int v10 = *(_DWORD *)(a1 + 48);

        if (v9 == v10) {
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v3);
  }
}

id sub_100149284(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _broadcastActivity:*(void *)(a1 + 40) withTimeout:*(unsigned __int8 *)(a1 + 56) shouldPrioritize:*(double *)(a1 + 48)];
}

id sub_10014934C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopBroadcastingActivity:*(void *)(a1 + 40)];
}

id sub_100149414(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _listenForActivityType:*(unsigned int *)(a1 + 48) dynamicIdentifier:*(void *)(a1 + 40)];
}

id sub_1001494E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopListeningForActivityType:*(unsigned int *)(a1 + 48) dynamicIdentifier:*(void *)(a1 + 40)];
}

id sub_1001495AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopListeningForActivityType:*(unsigned int *)(a1 + 48) matchingDynamicIdentifierSubstring:*(void *)(a1 + 40)];
}

id sub_10014990C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopBroadcastingActivity:*(void *)(a1 + 40)];
}

void sub_10014A848(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v29 = 138412290;
    *(void *)long long v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Best app suggestion changed to %@", (uint8_t *)&v29, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) delegate];
  unsigned int v5 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
  if (v5)
  {
    unint64_t v6 = v5;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
      char v8 = [v7 activityType];
      unsigned int v9 = [*(id *)(a1 + 32) activityType];
      unsigned __int8 v10 = [v8 isEqualToString:v9];

      if (v10) {
        goto LABEL_13;
      }
    }
    else
    {
    }
    int v11 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
    long long v12 = [v11 activityType];
    uint64_t v13 = +[CSDUserActivity activityTypeForUserActivityTypeString:v12];

    if (v4)
    {
      long long v14 = sub_100008DCC();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        long long v15 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
        uint64_t v16 = [v15 activityType];
        unint64_t v17 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
        char v18 = [v17 dynamicIdentifier];
        int v29 = 67109634;
        *(_DWORD *)long long v30 = v13;
        *(_WORD *)&v30[4] = 2112;
        *(void *)&v30[6] = v16;
        __int16 v31 = 2112;
        long long v32 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Firing delegate callback for stopped activity type %d (%@) and dynamicIdentifier %@", (uint8_t *)&v29, 0x1Cu);
      }
      int8x16_t v19 = [*(id *)(a1 + 40) mostRecentBestAppSuggestion];
      unsigned int v20 = [v19 dynamicIdentifier];
      [v4 stoppedReceivingActivityType:v13 dynamicIdentifier:v20];
    }
    [*(id *)(a1 + 40) setMostRecentBestAppSuggestion:0];
  }
LABEL_13:
  int8x16_t v21 = *(void **)(a1 + 32);
  if (v21)
  {
    id v22 = [v21 activityType];
    uint64_t v23 = +[CSDUserActivity activityTypeForUserActivityTypeString:v22];

    if (v23 && v4)
    {
      char v24 = sub_100008DCC();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = [*(id *)(a1 + 32) activityType];
        __int16 v26 = [*(id *)(a1 + 32) dynamicIdentifier];
        int v29 = 67109634;
        *(_DWORD *)long long v30 = v23;
        *(_WORD *)&v30[4] = 2112;
        *(void *)&v30[6] = v25;
        __int16 v31 = 2112;
        long long v32 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Firing delegate callback with activity type %d (%@) and dynamicIdentifier %@", (uint8_t *)&v29, 0x1Cu);
      }
      id v27 = [*(id *)(a1 + 32) dynamicIdentifier];
      uint64_t v28 = [*(id *)(a1 + 32) originatingDeviceType];
      [v4 receivedBroadcastedActivityType:v23 dynamicIdentifier:v27 originatingDeviceType:v28];
    }
    [*(id *)(a1 + 40) setMostRecentBestAppSuggestion:*(void *)(a1 + 32)];
  }
}

void sub_10014B22C(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithName:@"com.apple.private.alloy.phone.auth"];
  id v2 = (void *)qword_10058C468;
  qword_10058C468 = (uint64_t)v1;
}

void sub_10014D38C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Query for capabilities returned any destinations with web only endpoints: %@", buf, 0xCu);
  }

  if (a2) {
    [*(id *)(a1 + 32) addMembers:*(void *)(a1 + 40) toExistingMembers:*(void *)(a1 + 48) participantDestinationIDs:*(void *)(a1 + 56) webDestinationIDs:*(void *)(a1 + 64) activeParticipants:*(void *)(a1 + 72) activitySessions:*(void *)(a1 + 80) link:*(void *)(a1 + 88) otherInvitedHandles:*(void *)(a1 + 96) report:*(void *)(a1 + 104) invitationPreferences:*(void *)(a1 + 112)];
  }
}

void sub_10015103C(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = sub_100008DCC();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Handling %@ by requesting handoff for all calls", buf, 0xCu);
  }

  id v6 = a2;
  CFStringRef v7 = v6;
  if (v6)
  {
    char v8 = [v6 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001695E8;
    block[3] = &unk_100504EC0;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

void sub_100151ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(v11);
  objc_destroyWeak(v12);
  objc_destroyWeak(v16);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v17 - 136));
  _Unwind_Resume(a1);
}

void sub_100151BA0(id a1, CSDClient *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    CFStringRef v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100151C4C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained updateClientsWithCall:v5];
    [v4 updateAudioArbitration];
  }
}

void sub_100151CB8(uint64_t a1, int a2)
{
  int v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CarPlay screen is now %d", (uint8_t *)v7, 8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (a2) {
    [WeakRetained _launchInCallApplicationForExistingCall];
  }
}

void sub_100151D84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100151E30;
    block[3] = &unk_100504EC0;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_100151E30(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateBluetoothAudioFormatIfNecessaryDueToMVMChange:0];
  id v2 = [*(id *)(a1 + 32) clientManager];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100151EF8;
  v4[3] = &unk_100508650;
  id v5 = *(id *)(a1 + 32);
  uint64_t v3 = NSStringFromSelector("handleRoutesByUniqueIdentifierUpdated:");
  [v2 performBlockOnClients:v4 coalescedByIdentifier:v3];
}

void sub_100151EF8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v6 = [v3 localRouteController];
  id v5 = [v6 routesByUniqueIdentifier];
  [v4 handleLocalRoutesByUniqueIdentifierUpdated:v5];
}

void sub_100151F6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100152030;
    block[3] = &unk_100504EC0;
    id v8 = v3;
    dispatch_async(v6, block);
  }
}

void sub_100152030(uint64_t a1)
{
  id v2 = +[CSDReportingController sharedInstance];
  [v2 reportRouteWasPickedByAnyTrigger:*(void *)(a1 + 32)];
}

void sub_100152088(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015214C;
    block[3] = &unk_100504EC0;
    id v8 = v3;
    dispatch_async(v6, block);
  }
}

void sub_10015214C(uint64_t a1)
{
  id v2 = +[CSDReportingController sharedInstance];
  [v2 reportRouteWasPicked:*(void *)(a1 + 32)];
}

void sub_1001521A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100152268;
    block[3] = &unk_100504EC0;
    id v8 = v3;
    dispatch_async(v6, block);
  }
}

void sub_100152268(uint64_t a1)
{
  id v2 = +[CSDReportingController sharedInstance];
  [v2 reportTimedOutPickingRoute:*(void *)(a1 + 32)];
}

void sub_1001522C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015236C;
    block[3] = &unk_100504EC0;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_10015236C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100152428;
  v4[3] = &unk_100508650;
  id v5 = *(id *)(a1 + 32);
  id v3 = NSStringFromSelector("handleRoutesByUniqueIdentifierUpdated:");
  [v2 performBlockOnClients:v4 coalescedByIdentifier:v3];
}

void sub_100152428(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v6 = [v3 pairedHostDeviceRouteController];
  id v5 = [v6 routesByUniqueIdentifier];
  [v4 handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:v5];
}

void sub_10015249C(id a1, TURoute *a2)
{
  id v2 = a2;
  id v3 = +[CSDReportingController sharedInstance];
  [v3 reportRouteWasPickedByAnyTrigger:v2];
}

void sub_100152500(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained queue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1001525D4;
    v7[3] = &unk_100504F10;
    id v8 = v5;
    id v9 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_1001525D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) relayMessagingController];
  [v2 sendPickRouteMessageToHostForRoute:*(void *)(a1 + 40)];

  id v3 = +[CSDReportingController sharedInstance];
  [v3 reportRouteWasPicked:*(void *)(a1 + 40)];
}

void sub_100152648(id a1, TURoute *a2)
{
  id v2 = a2;
  id v3 = +[CSDReportingController sharedInstance];
  [v3 reportTimedOutPickingRoute:v2];
}

void sub_1001527C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 capabilities];
    *(_DWORD *)long long buf = 138412546;
    id v32 = v3;
    __int16 v33 = 2112;
    char v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client: %@ capabilities: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v7 = [v3 capabilities];
  unsigned int v8 = [v7 wantsCallDisconnectionOnInvalidation];

  if (v8)
  {
    id v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v3 processName];
      *(_DWORD *)long long buf = 138412290;
      id v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@", buf, 0xCu);
    }
    int v11 = [WeakRetained callCenter];
    [v11 disconnectAllCalls];
  }
  uint64_t v12 = [v3 capabilities];
  unsigned int v13 = [v12 wantsCallStopStreamingOnInvalidation];

  if (v13)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v25 = WeakRetained;
    long long v14 = [WeakRetained callContainer];
    long long v15 = [v14 currentVideoCalls];

    id v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v27;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v27 != v18) {
            objc_enumerationMutation(v15);
          }
          unsigned int v20 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          int8x16_t v21 = [v20 provider];
          if ([v21 isSystemProvider])
          {
            unsigned int v22 = [v20 status];

            if (v22 == 1)
            {
              uint64_t v23 = sub_100008DCC();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                char v24 = [v3 processName];
                *(_DWORD *)long long buf = 138412546;
                id v32 = v20;
                __int16 v33 = 2112;
                char v34 = v24;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Setting isSendingVideo:NO isSharingScreen:NO on call: %@ because wantsCallStopStreamingOnInvalidation=YES for %@", buf, 0x16u);
              }
              [v20 setIsSendingVideo:0];
              [v20 setSharingScreen:0];
            }
          }
          else
          {
          }
        }
        id v17 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v17);
    }

    id WeakRetained = v25;
  }
}

void sub_100152C24(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100152D30;
  v3[3] = &unk_100505698;
  objc_copyWeak(&v4, &location);
  +[AVAudioClient registerSecureMicrophoneEngagedHandler:v3];
  id v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Registered for registerSecureMicrophoneEngagedHandler", v2, 2u);
  }

  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_100152D10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100152D30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100152DCC;
    block[3] = &unk_100504EC0;
    void block[4] = v2;
    dispatch_async(v3, block);
  }
}

void sub_100152DCC(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received AVAudioClient secure microphone interruption", v5, 2u);
  }

  id v3 = [*(id *)(a1 + 32) shouldHandleSecureMicrophoneEvents];
  unsigned int v4 = [v3 BOOLValue];

  if (v4) {
    [*(id *)(a1 + 32) performDisconnectAllCallsWithReason:39];
  }
}

void sub_100153520(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received LocaleDidChange notification: %@", (uint8_t *)&v14, 0xCu);
  }

  if (TUCallScreeningEnabledForCurrentLocale())
  {
    unsigned int v4 = [*(id *)(a1 + 40) answeringMachineController];

    if (!v4)
    {
      id v5 = [*(id *)(a1 + 40) featureFlags];
      int v6 = TUCallScreeningActivatable();

      if (v6)
      {
        CFStringRef v7 = sub_100008DCC();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "creating answeringMachineController", (uint8_t *)&v14, 2u);
        }

        unsigned int v8 = [CSDAnsweringMachineController alloc];
        id v9 = [*(id *)(a1 + 40) queue];
        id v10 = [*(id *)(a1 + 40) speechAssetManager];
        int v11 = [(CSDAnsweringMachineController *)v8 initWith:v9 speechAssetManager:v10];
        [*(id *)(a1 + 40) setAnsweringMachineController:v11];

        uint64_t v12 = +[CSDAnalyticsManager sharedInstance];
        [v12 setAnalyticsManagerProvider:*(void *)(a1 + 40)];
      }
    }
  }
  else
  {
    unsigned int v13 = sub_100008DCC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "setting answeringMachineController to nil", (uint8_t *)&v14, 2u);
    }

    [*(id *)(a1 + 40) setAnsweringMachineController:0];
  }
}

void sub_1001537E4(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received AudioSession Interruption notification: %@", (uint8_t *)&v11, 0xCu);
  }

  unsigned int v4 = [*(id *)(a1 + 40) shouldHandleSecureMicrophoneEvents];
  unsigned int v5 = [v4 BOOLValue];

  if (v5)
  {
    int v6 = [*(id *)(a1 + 32) userInfo];
    CFStringRef v7 = [v6 valueForKey:AVAudioSessionInterruptionReasonKey];
    unsigned int v8 = +[NSNumber numberWithInt:2];
    unsigned int v9 = [v7 isEqualToNumber:v8];

    if (v9)
    {
      id v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Determined that audio interruption was caused due to built in mic muted, ending all calls", (uint8_t *)&v11, 2u);
      }

      [*(id *)(a1 + 40) performDisconnectAllCallsWithReason:40];
    }
  }
}

void sub_100153A20(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) description];
    int v29 = 138412290;
    long long v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received CarPlay hardware control: %@", (uint8_t *)&v29, 0xCu);
  }
  if ([*(id *)(a1 + 40) shouldHandleCarPlayControlEvents])
  {
    unsigned int v4 = [*(id *)(a1 + 32) userInfo];
    unsigned int v5 = [v4 valueForKey:kTUCarPlayHardwareControlButtonKey];

    int v6 = [*(id *)(a1 + 40) callContainer];
    CFStringRef v7 = [v6 callPassingTest:&stru_1005086F8];

    unsigned int v8 = [*(id *)(a1 + 40) callContainer];
    unsigned int v9 = [v8 callPassingTest:&stru_100508718];

    id v10 = [*(id *)(a1 + 40) callContainer];
    int v11 = [v10 callPassingTest:&stru_100508738];

    uint64_t v12 = [*(id *)(a1 + 40) callContainer];
    unsigned int v13 = [v12 frontmostBargeCall];

    int v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 138413058;
      long long v30 = v7;
      __int16 v31 = 2112;
      id v32 = v9;
      __int16 v33 = 2112;
      char v34 = v11;
      __int16 v35 = 2112;
      uint64_t v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating calls in response to CarPlay hardware control: incomingCall %@, activeCall %@, heldCall %@ bargeCall %@", (uint8_t *)&v29, 0x2Au);
    }

    if (v7)
    {
      if (v5 == (void *)kTUCarPlayHardwareControlButtonWhiteTelephoneLongPress)
      {
        uint64_t v15 = [*(id *)(a1 + 40) callCenter];
        [v15 disconnectCall:v7];
      }
      else
      {
        if (v5 == (void *)kTUCarPlayHardwareControlButtonGreenTelephone
          || v5 == (void *)kTUCarPlayHardwareControlButtonWhiteTelephone)
        {
          if (!v9)
          {
            if ([v7 status] == 4)
            {
              uint64_t v23 = *(void **)(a1 + 40);
              if ([v7 isVideo]) {
                uint64_t v24 = 4;
              }
              else {
                uint64_t v24 = 0;
              }
              [v23 _answerIncomingCall:v7 withBehavior:v24];
            }
            else if ([v7 isConversation])
            {
              [*(id *)(a1 + 40) _answerIncomingCallAsConversation:v7];
            }
            goto LABEL_47;
          }
          if ([v7 isConversation])
          {
            unsigned int v20 = [v7 status];
            int8x16_t v21 = *(void **)(a1 + 40);
            unsigned int v22 = v7;
            if (v20 == 3)
            {
              [v21 _answerIncomingCallAsConversation:v7];
              goto LABEL_44;
            }
            uint64_t v25 = 0;
          }
          else
          {
            int8x16_t v21 = *(void **)(a1 + 40);
            unsigned int v22 = v7;
            if (v11) {
              uint64_t v25 = 1;
            }
            else {
              uint64_t v25 = 2;
            }
          }
          [v21 _answerIncomingCall:v22 withBehavior:v25];
LABEL_44:
          if (v9)
          {
            if (v5 == (void *)kTUCarPlayHardwareControlButtonMute) {
              objc_msgSend(v9, "setUplinkMuted:", objc_msgSend(v9, "isUplinkMuted") ^ 1);
            }
          }
          goto LABEL_47;
        }
        if (v5 != (void *)kTUCarPlayHardwareControlButtonRedTelephone) {
          goto LABEL_44;
        }
        uint64_t v15 = +[TUCallCenter sharedInstance];
        [v15 disconnectCall:v7 withReason:2];
      }
LABEL_43:

      goto LABEL_44;
    }
    if (v5 != (void *)kTUCarPlayHardwareControlButtonWhiteTelephoneLongPress
      && v5 != (void *)kTUCarPlayHardwareControlButtonRedTelephone)
    {
      if (v5 != (void *)kTUCarPlayHardwareControlButtonWhiteTelephone)
      {
        if (v5 != (void *)kTUCarPlayHardwareControlButtonGreenTelephone) {
          goto LABEL_44;
        }
        id v16 = [v9 model];
        if ([v16 supportsHolding])
        {
          id v17 = [*(id *)(a1 + 40) callCenter];
          id v18 = [v17 currentCallCount];

          if ((unint64_t)v18 >= 2)
          {
            int8x16_t v19 = +[TUCallCenter sharedInstance];
LABEL_34:
            uint64_t v15 = v19;
            [v19 swapCalls];
            goto LABEL_43;
          }
        }
        else
        {
        }
        if (v11)
        {
          uint64_t v15 = [*(id *)(a1 + 40) callCenter];
          [v15 unholdCall:v11];
        }
        else
        {
          if (!v9)
          {
LABEL_47:

            return;
          }
          uint64_t v15 = [*(id *)(a1 + 40) callCenter];
          [v15 holdCall:v9];
        }
        goto LABEL_43;
      }
      long long v26 = [v9 model];
      if ([v26 supportsHolding])
      {
        long long v27 = [*(id *)(a1 + 40) callCenter];
        id v28 = [v27 currentCallCount];

        if ((unint64_t)v28 >= 2)
        {
          int8x16_t v19 = [*(id *)(a1 + 40) callCenter];
          goto LABEL_34;
        }
      }
      else
      {
      }
      if (v13)
      {
        if ([v13 status] == 2)
        {
          [*(id *)(a1 + 40) startTransmissionForBargeCall:v13 sourceIsHandsfreeAccessory:1];
        }
        else if ([v13 status] == 1)
        {
          [*(id *)(a1 + 40) stopTransmissionForBargeCall:v13 sourceIsHandsfreeAccessory:0];
        }
        goto LABEL_44;
      }
    }
    uint64_t v15 = [*(id *)(a1 + 40) callCenter];
    [v15 disconnectCurrentCallAndActivateHeld];
    goto LABEL_43;
  }
}

BOOL sub_100153F4C(id a1, TUCall *a2)
{
  uint64_t v2 = a2;
  if ([(TUCall *)v2 status] == 4)
  {
    unsigned __int8 v3 = 1;
  }
  else if ([(TUCall *)v2 status] == 3)
  {
    unsigned __int8 v3 = [(TUCall *)v2 isConversation];
  }
  else
  {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

BOOL sub_100153FB0(id a1, TUCall *a2)
{
  return [(TUCall *)a2 status] == 1;
}

BOOL sub_100153FD4(id a1, TUCall *a2)
{
  return [(TUCall *)a2 status] == 2;
}

void sub_10015462C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  int v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v8, 0x16u);
  }

  if (v5)
  {
    CFStringRef v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AD3E4();
    }
  }
}

void sub_1001547F4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001548F4;
  block[3] = &unk_1005053A8;
  id v13 = v5;
  id v14 = v6;
  id v15 = a1[5];
  id v8 = a1[6];
  id v9 = a1[4];
  id v16 = v8;
  id v17 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

void sub_1001548F4(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v9 = 138412546;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v9, 0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003AD44C(a1, v5);
    }

    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting call because there wont be a UI to host the call: %@", (uint8_t *)&v9, 0xCu);
    }

    id v8 = [*(id *)(a1 + 64) callCenter];
    [v8 disconnectCall:*(void *)(a1 + 56)];
  }
}

void sub_100154E10(id *a1)
{
  uint64_t v2 = [a1[4] clientManager];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100154EDC;
  v5[3] = &unk_100508788;
  id v3 = a1[5];
  id v4 = a1[4];
  id v6 = v3;
  id v7 = v4;
  id v8 = a1[6];
  id v9 = a1[7];
  [v2 performBlockOnClients:v5];
}

void sub_100154EDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  unsigned int v8 = [*(id *)(a1 + 32) originatingUIType];
  BOOL v9 = v8 > 0xD || ((1 << v8) & 0x3440) == 0;
  if (v9
    || ![*v7 isEmergency]
    || ![*v7 supportsEmergencyFallback]
    || ([*v7 isEndpointOnCurrentDevice] & 1) != 0)
  {
    goto LABEL_14;
  }
  uint64_t v10 = [v5 processBundleIdentifier];
  if (([v10 isEqualToString:TUBundleIdentifierInCallServiceApplication] & 1) == 0)
  {

LABEL_14:
    LOBYTE(v11) = 0;
    goto LABEL_15;
  }
  unsigned int v11 = [v5 isProcessSuspended];

  if (v11)
  {
    uint64_t v12 = sub_100008DCC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Requesting to background launch InCallService", buf, 2u);
    }

    id v28 = +[NSURL faceTimeNeedsBackgroundLaunchURL];
    id v13 = v28;
    TUOpenURLWithCompletion();

    LOBYTE(v11) = 1;
  }
LABEL_15:
  id v14 = [v5 capabilities];
  if (![v14 wantsCallNotificationsDisabledWhileSuspended]
    || ![v5 isProcessSuspended])
  {

LABEL_21:
    +[CSDSignposts trace:3];
    unsigned int v17 = [v5 isRemote];
    id v18 = *(void **)(a1 + 40);
    if (v17)
    {
      id v15 = [v18 eligibleCallsByFilteringCalls:*(void *)(a1 + 48) forClient:v5];
      id v7 = (id *)(a1 + 56);
      if (([*(id *)(a1 + 40) isCallEligible:*(void *)(a1 + 56) forClient:v5] & 1) == 0)
      {
        id v16 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      int8x16_t v19 = [v18 callContainer];
      id v15 = [v19 _allCalls];
    }
    unsigned int v20 = *v7;
    id v16 = v20;
    if (v20 && [v20 status] == 6)
    {
      int8x16_t v21 = sub_100008DCC();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = [v5 processName];
        *(_DWORD *)long long buf = 138412802;
        long long v30 = v22;
        __int16 v31 = 2112;
        id v32 = v16;
        __int16 v33 = 2112;
        char v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating client %@ with disconnected call: %@ calls: %@", buf, 0x20u);
      }
      uint64_t v23 = v6;
      uint64_t v24 = v15;
      uint64_t v25 = v16;
      goto LABEL_34;
    }
LABEL_30:
    if (![v15 count]) {
      goto LABEL_35;
    }
    long long v26 = sub_100008DCC();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      long long v27 = [v5 processName];
      *(_DWORD *)long long buf = 138412546;
      long long v30 = v27;
      __int16 v31 = 2112;
      id v32 = v15;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Updating client %@ with calls: %@", buf, 0x16u);
    }
    uint64_t v23 = v6;
    uint64_t v24 = v15;
    uint64_t v25 = 0;
LABEL_34:
    [v23 handleCurrentCallsChanged:v24 callDisconnected:v25];
    goto LABEL_35;
  }

  if (v11) {
    goto LABEL_21;
  }
  id v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = [v5 processName];
    *(_DWORD *)long long buf = 138412290;
    long long v30 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Ignoring call update for client %@ because it's suspended", buf, 0xCu);
LABEL_35:
  }
}

void sub_1001552E8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = sub_100008DCC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion result: %@, error: %@", (uint8_t *)&v8, 0x16u);
  }

  if (v5)
  {
    id v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AD3E4();
    }
  }
}

void sub_100155958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100155970(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_100155A6C(uint64_t a1)
{
  uint64_t v2 = NSStringFromSelector("handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:");
  id v3 = +[NSString stringWithFormat:@"%@-%d", v2, *(unsigned int *)(a1 + 56)];

  id v4 = [*(id *)(a1 + 32) clientManager];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100155BC0;
  v6[3] = &unk_1005087F0;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  int v9 = *(_DWORD *)(a1 + 56);
  [v4 filterClientsUsingPredicate:&stru_1005087C8 andPerformBlock:v6 coalescedByIdentifier:v3];
}

BOOL sub_100155B84(id a1, CSDClient *a2)
{
  uint64_t v2 = [(CSDClient *)a2 capabilities];
  unsigned __int8 v3 = [v2 wantsFrequencyChangeNotifications];

  return v3;
}

void sub_100155BC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v5 = [*(id *)(a1 + 32) eligibleCallsByFilteringCalls:*(void *)(a1 + 40) forClient:a2];
  id v6 = [v5 arrayByApplyingSelector:"uniqueProxyIdentifier"];
  if ([v6 count]) {
    [v7 handleFrequencyChangedTo:*(void *)(a1 + 48) inDirection:*(unsigned int *)(a1 + 56) forCallsWithUniqueProxyIdentifiers:v6];
  }
}

void sub_100155D28(uint64_t a1)
{
  uint64_t v2 = NSStringFromSelector("handleMeterLevelChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:");
  unsigned __int8 v3 = +[NSString stringWithFormat:@"%@-%d", v2, *(unsigned int *)(a1 + 48)];

  id v4 = [*(id *)(a1 + 32) clientManager];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100155E3C;
  v6[3] = &unk_100508838;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  int v8 = *(_DWORD *)(a1 + 52);
  int v9 = *(_DWORD *)(a1 + 48);
  [v4 filterClientsUsingPredicate:&stru_100508810 andPerformBlock:v6 coalescedByIdentifier:v3];
}

BOOL sub_100155E34(id a1, CSDClient *a2)
{
  return 0;
}

void sub_100155E3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id v5 = [*(id *)(a1 + 32) eligibleCallsByFilteringCalls:*(void *)(a1 + 40) forClient:a2];
  id v6 = [v5 arrayByApplyingSelector:"uniqueProxyIdentifier"];
  if ([v6 count])
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 48);
    [v8 handleMeterLevelChangedTo:*(unsigned int *)(a1 + 52) inDirection:v6 forCallsWithUniqueProxyIdentifiers:v7];
  }
}

void sub_100155F60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  id v1 = NSStringFromSelector("resetCallProvisionalStates");
  [v2 performBlockOnClients:&stru_100508878 coalescedByIdentifier:v1];
}

void sub_100155FD4(id a1, CSDClient *a2, TUCallServicesXPCClient *a3)
{
}

void sub_1001560F0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unsigned __int8 v3 = [v2 uniqueProxyIdentifier];
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  id v4 = [*(id *)(a1 + 40) clientManager];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100156200;
  v8[3] = &unk_1005088A0;
  int8x16_t v7 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v7.i64[0];
  int8x16_t v9 = vextq_s8(v7, v7, 8uLL);
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 performBlockOnClients:v8];
}

void sub_100156200(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ([*(id *)(a1 + 32) isCallEligible:*(void *)(a1 + 40) forClient:a2]) {
    [v5 handleNotificationName:*(void *)(a1 + 48) forCallWithUniqueProxyIdentifier:*(void *)(a1 + 56) userInfo:*(void *)(a1 + 64)];
  }
}

void sub_1001563D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unsigned __int8 v3 = [v2 uniqueProxyIdentifier];
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  id v4 = [*(id *)(a1 + 40) clientManager];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1001564CC;
  v8[3] = &unk_100508788;
  int8x16_t v7 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v7.i64[0];
  int8x16_t v9 = vextq_s8(v7, v7, 8uLL);
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v6 = v3;
  [v4 performBlockOnClients:v8];
}

void sub_1001564CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ([*(id *)(a1 + 32) isCallEligible:*(void *)(a1 + 40) forClient:a2]) {
    [v5 handleReceivedCallDTMFUpdate:*(void *)(a1 + 48) forCallWithUniqueProxyIdentifier:*(void *)(a1 + 56)];
  }
}

id sub_100158018(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notification: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _requestCallStateFromHost];
}

void sub_10015817C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notification: %@", (uint8_t *)&v11, 0xCu);
  }

  id v4 = [*(id *)(a1 + 40) relayMessagingController];
  int v5 = [*(id *)(a1 + 40) callProviderManager];
  [v4 sendUpdateCallContextMessageToClientForCallProviderManager:v5];

  uint64_t v6 = [*(id *)(a1 + 40) relayMessagingController];
  int8x16_t v7 = [*(id *)(a1 + 40) callCenter];
  id v8 = [v7 conversationManager];
  int8x16_t v9 = [v8 activeConversations];
  id v10 = [v9 allObjects];
  [v6 sendUpdateConversationsMessageToClient:v10];
}

void sub_100158380(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notification: %@", buf, 0xCu);
  }

  id v4 = [*(id *)(a1 + 40) callContainer];
  int v5 = [v4 callsPassingTest:&stru_1005088C0];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        int v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v12 = +[CSDRouteManager sharedInstance];
        unsigned __int8 v13 = [v12 isEligibleRouteAvailableForCall:v11];

        id v14 = [v11 expectedRelayClientDestination];

        if (v14 && (v13 & 1) == 0)
        {
          id v15 = sub_100008DCC();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            id v16 = [v11 expectedRelayClientDestination];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v24 = v16;
            __int16 v25 = 2112;
            long long v26 = v11;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Pushing all calls to device with destination %@ because an eligible audio route is not available and we found a call hosted here with its expected endpoint on another device: %@", buf, 0x16u);
          }
          unsigned int v17 = *(void **)(a1 + 40);
          id v18 = [v11 expectedRelayClientDestination];
          [v17 performPushHostedCallsToDestination:v18];

          goto LABEL_16;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_16:
}

BOOL sub_1001585D0(id a1, TUCall *a2)
{
  return [(TUCall *)a2 isHostedOnCurrentDevice];
}

void sub_10015A07C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = +[TUHandle normalizedGenericHandleForValue:a2];
  uint64_t v3 = [v4 normalizedValue];
  [v2 addObject:v3];
}

BOOL sub_10015ADBC(id a1, TUCall *a2)
{
  id v2 = a2;
  if ([(TUCall *)v2 status] == 1) {
    unsigned int v3 = [(TUCall *)v2 isOnHold] ^ 1;
  }
  else {
    LOBYTE(v3) = 0;
  }

  return v3;
}

BOOL sub_10015AE08(id a1, TUCall *a2)
{
  return [(TUCall *)a2 isOnHold];
}

BOOL sub_10015D8B8(id a1, TUCall *a2)
{
  id v2 = a2;
  if ([(TUCall *)v2 isHostedOnCurrentDevice]) {
    unsigned __int8 v3 = [(TUCall *)v2 hasRelaySupport:2];
  }
  else {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

BOOL sub_10015DABC(id a1, TUCall *a2)
{
  id v2 = a2;
  if (([(TUCall *)v2 isHostedOnCurrentDevice] & 1) != 0
    || ([(TUCall *)v2 isEndpointOnCurrentDevice] & 1) != 0)
  {
    unsigned __int8 v3 = 0;
  }
  else
  {
    unsigned __int8 v3 = [(TUCall *)v2 hasRelaySupport:2];
  }

  return v3;
}

void sub_10015DEF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 138412802;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TUOpenURLWithCompletion url: %@, result: %@, error: %@", (uint8_t *)&v10, 0x20u);
  }

  if (v6)
  {
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1003AD3E4();
    }
  }
}

void sub_10015E150(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 callUpdate];
  id v6 = [v4 provider];
  id v7 = [v4 callUUID];

  id v9 = [v5 tuCallUpdateWithProvider:v6 withCallUUID:v7];

  uint64_t v8 = [*(id *)(a1 + 32) answeringMachineController];
  objc_msgSend(v9, "setAnsweringMachineAvailable:", objc_msgSend(v8, "isAvailable"));

  [*(id *)(a1 + 40) addObject:v9];
}

void sub_10015E364(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pendingCallInfoDict];
  unsigned __int8 v3 = [*(id *)(a1 + 40) callUUID];
  id v4 = [v2 objectForKeyedSubscript:v3];

  if (!v4)
  {
    id v9 = sub_100008DCC();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    id v11 = [*(id *)(a1 + 40) callUUID];
    int v20 = 138412290;
    id v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] Did not find any pending call info for callUUID: %@", (uint8_t *)&v20, 0xCu);
LABEL_10:

    goto LABEL_11;
  }
  id v5 = [*(id *)(a1 + 32) pendingCallInfoDict];
  [v5 removeAllObjects];

  id v6 = [*(id *)(a1 + 32) callContainer];
  id v7 = [v6 _allCalls];
  id v8 = [v7 count];

  id v9 = sub_100008DCC();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (!v8)
  {
    if (v10)
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Creating call to screen", (uint8_t *)&v20, 2u);
    }

    __int16 v12 = [CSDProviderCall alloc];
    id v13 = [v4 callSource];
    __int16 v14 = [v4 callUUID];
    id v15 = [v4 callUpdate];
    id v9 = [(CSDProviderCall *)v12 initIncomingWithBackingCallSource:v13 UUID:v14 update:v15];

    [*(id *)(a1 + 32) setCallDelegatesIfNeeded:v9];
    [v9 setScreening:1];
    [*(id *)(a1 + 32) propertiesChangedForCall:v9];
    id v16 = +[NSDate date];
    [v9 setDateStartedConnecting:v16];

    id v17 = objc_alloc((Class)CXAnswerCallAction);
    id v18 = [v9 uniqueProxyIdentifierUUID];
    id v11 = [v17 initWithCallUUID:v18];

    [v11 setPauseVideoToStart:1];
    [v11 setScreening:1];
    [v11 setDowngradeToAudio:1];
    long long v19 = [v9 providerCallDelegate];
    [v19 performCallAction:v11 forCall:v9];

    goto LABEL_10;
  }
  if (v10)
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Not screening call because we have another call on the system", (uint8_t *)&v20, 2u);
  }
LABEL_11:
}

void sub_10015E830(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callContainer];
  unsigned __int8 v3 = [*(id *)(a1 + 40) callUUID];
  id v4 = [v3 UUIDString];
  id v5 = [v2 callWithUniqueProxyIdentifier:v4];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) callRecordingController];
    [v6 performRequest:*(void *)(a1 + 40) forCall:v5 completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003ADA1C();
    }

    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = objc_alloc((Class)NSError);
    id v6 = [v9 initWithDomain:TUStartRecordingErrorDomain code:1 userInfo:0];
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
}

uint64_t sub_10015E948(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015EA98(uint64_t a1)
{
  [*(id *)(a1 + 32) setUiXPCEndpoint:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) clientManager];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10015EB3C;
  v3[3] = &unk_100508650;
  void v3[4] = *(void *)(a1 + 32);
  [v2 filterClientsEntitledForCapability:@"access-calls" andPerformBlock:v3];
}

void sub_10015EB3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "handleUIXPCEndpointChanged client: %@", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v8 = [*(id *)(a1 + 32) uiXPCEndpoint];
  [v6 handleUIXPCEndpointChanged:v8];
}

void sub_10015EFC8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "dialRequest: %@", buf, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10015F100;
  v9[3] = &unk_1005089B8;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(a1 + 48);
  id v11 = v6;
  void v9[4] = v7;
  id v10 = v8;
  [v4 _dial:v5 displayContext:0 completion:v9];
}

void sub_10015F100(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = [*(id *)(a1 + 32) callForClient:*(void *)(a1 + 40) usingCall:a2];
  id v4 = [*(id *)(a1 + 32) currentCallsForClient:*(void *)(a1 + 40)];
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
}

void sub_10015F184(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v2 = [*(id *)(a1 + 32) currentCallsForClient:*(void *)(a1 + 40)];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

id sub_10015F2F8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "dialRequest: %@ displayContext: %@", (uint8_t *)&v6, 0x16u);
  }

  return [*(id *)(a1 + 48) _dial:*(void *)(a1 + 32) displayContext:*(void *)(a1 + 40) completion:0];
}

void sub_10015F5CC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v16 = 138412290;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "answerRequest: %@", (uint8_t *)&v16, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  id v5 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
  int v6 = [v4 callWithUniqueProxyIdentifier:v5];

  if (v6)
  {
    if ([v6 isEndpointOnCurrentDevice]
      && ([v6 provider],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          unsigned int v8 = [v7 isTinCanProvider],
          v7,
          v8))
    {
      uint64_t v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1003ADA88();
      }
    }
    else
    {
      id v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = *(void **)(a1 + 32);
        int v16 = 138412546;
        id v17 = v11;
        __int16 v18 = 2112;
        long long v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Performing answer request %@ for call %@", (uint8_t *)&v16, 0x16u);
      }

      +[CSDSignposts trace:6];
      [*(id *)(a1 + 40) performAnswerCall:v6 withRequest:*(void *)(a1 + 32)];
    }
  }
  else
  {
    __int16 v12 = sub_100008DCC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
      __int16 v14 = [*(id *)(a1 + 40) callContainer];
      id v15 = [v14 _allCalls];
      int v16 = 138412546;
      id v17 = v13;
      __int16 v18 = 2112;
      long long v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v16, 0x16u);
    }
  }
}

void sub_10015F920(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Holding call with identifier: %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  id v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v5
    || ([*(id *)(a1 + 40) callContainer],
        int v6 = objc_claimAutoreleasedReturnValue(),
        [v6 bargeCallWithUniqueProxyIdentifier:*(void *)(a1 + 32)],
        id v5 = objc_claimAutoreleasedReturnValue(),
        v6,
        v5))
  {
    [*(id *)(a1 + 40) performHoldCall:v5];
  }
  else
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      unsigned int v8 = [*(id *)(a1 + 40) callContainer];
      uint64_t v9 = [v8 _allCalls];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_10015FB90(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unholding call with identifier: %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  id v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v5
    || ([*(id *)(a1 + 40) callContainer],
        int v6 = objc_claimAutoreleasedReturnValue(),
        [v6 bargeCallWithUniqueProxyIdentifier:*(void *)(a1 + 32)],
        id v5 = objc_claimAutoreleasedReturnValue(),
        v6,
        v5))
  {
    [*(id *)(a1 + 40) performUnholdCall:v5];
  }
  else
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      unsigned int v8 = [*(id *)(a1 + 40) callContainer];
      uint64_t v9 = [v8 _allCalls];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_10015FE00(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    __int16 v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requesting video upgrade for call with identifier: %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  id v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v5)
  {
    id v6 = objc_alloc((Class)CXEnableVideoCallAction);
    uint64_t v7 = [v5 uniqueProxyIdentifierUUID];
    unsigned int v8 = [v6 initWithCallUUID:v7 videoEnabled:1];

    uint64_t v9 = [v5 providerCallDelegate];
    long long v27 = v8;
    [v9 performCallAction:v8 forCall:v5];

    [v5 setVideo:1];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    int v10 = [*(id *)(a1 + 40) callContainer];
    uint64_t v11 = [v10 currentAudioAndVideoCalls];

    id v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v29;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v29 != v14) {
            objc_enumerationMutation(v11);
          }
          int v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          id v17 = [v16 uniqueProxyIdentifier];
          __int16 v18 = [v5 uniqueProxyIdentifier];
          unsigned __int8 v19 = [v17 isEqualToString:v18];

          if ((v19 & 1) == 0)
          {
            int v20 = sub_100008DCC();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              id v21 = [v16 uniqueProxyIdentifier];
              long long v22 = [v5 uniqueProxyIdentifier];
              *(_DWORD *)long long buf = 138412546;
              __int16 v33 = v21;
              __int16 v34 = 2112;
              __int16 v35 = v22;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Requesting to disconnect call %@ since also requesting call %@ to upgrade to video", buf, 0x16u);
            }
            [*(id *)(a1 + 40) performDisconnectCall:v16];
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
      }
      while (v13);
    }

    uint64_t v23 = v27;
  }
  else
  {
    uint64_t v23 = sub_100008DCC();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void **)(a1 + 32);
      __int16 v25 = [*(id *)(a1 + 40) callContainer];
      long long v26 = [v25 _allCalls];
      *(_DWORD *)long long buf = 138412546;
      __int16 v33 = v24;
      __int16 v34 = 2112;
      __int16 v35 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", buf, 0x16u);
    }
  }
}

void sub_10016024C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disconnecting call with identifier: %@, client: %@", (uint8_t *)&v11, 0x16u);
  }

  id v5 = [*(id *)(a1 + 48) callContainer];
  id v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6
    || ([*(id *)(a1 + 48) callContainer],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        [v7 bargeCallWithUniqueProxyIdentifier:*(void *)(a1 + 32)],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v7,
        v6))
  {
    [*(id *)(a1 + 48) performDisconnectCall:v6];
  }
  else
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = [*(id *)(a1 + 48) callContainer];
      int v10 = [v9 _allCalls];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_1001604F8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(NSObject **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v14 = 138412546;
    id v15 = v3;
    __int16 v16 = 2112;
    *(void *)id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Grouping calls with identifiers %@ %@", (uint8_t *)&v14, 0x16u);
  }

  id v5 = [*(id *)(a1 + 48) callContainer];
  id v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  uint64_t v7 = [*(id *)(a1 + 48) callContainer];
  uint64_t v8 = [v7 callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];

  if (v6 && v8)
  {
    uint64_t v9 = [v6 dataSource];
    int v10 = [v8 dataSource];
    if (v9 == v10)
    {
      [*(id *)(a1 + 48) performGroupCall:v6 withCall:v8];
    }
    else
    {
      int v11 = sub_100008DCC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412546;
        id v15 = v9;
        __int16 v16 = 2112;
        *(void *)id v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[WARN] Asked to group call with data source %@ with another call with a different data source %@", (uint8_t *)&v14, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(NSObject **)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v14 = 138413058;
      id v15 = v12;
      __int16 v16 = 1024;
      *(_DWORD *)id v17 = v6 == 0;
      *(_WORD *)&v17[4] = 2112;
      *(void *)&void v17[6] = v13;
      __int16 v18 = 1024;
      BOOL v19 = v8 == 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)", (uint8_t *)&v14, 0x22u);
    }
  }
}

void sub_100160818(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ungrouping call with identifier: %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  id v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v5)
  {
    [*(id *)(a1 + 40) performUngroupCall:v5];
  }
  else
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = [*(id *)(a1 + 40) callContainer];
      uint64_t v9 = [v8 _allCalls];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

id sub_100160A48(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Swapping calls", v4, 2u);
  }

  return [*(id *)(a1 + 32) performSwapCalls];
}

void sub_100160BAC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 1024;
    LODWORD(v14) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Playing DTMF tone for call with identifier: %@ key: %d", (uint8_t *)&v11, 0x12u);
  }

  id v5 = [*(id *)(a1 + 40) callContainer];
  id v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [*(id *)(a1 + 40) performPlayDTMFToneForCall:v6 key:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = [*(id *)(a1 + 40) callContainer];
      int v10 = [v9 _allCalls];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

id sub_100160DF0(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disconnecting current call and activating held call", v4, 2u);
  }

  return [*(id *)(a1 + 32) performDisconnectCurrentCallAndActivateHeld];
}

id sub_100160F20(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disconnecting all calls", v4, 2u);
  }

  return [*(id *)(a1 + 32) performDisconnectAllCallsWithReason:41];
}

void sub_100161088(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v7[0] = 67109378;
    v7[1] = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting TTY type to %d for call with identifier %@", (uint8_t *)v7, 0x12u);
  }

  id v5 = [*(id *)(a1 + 40) callContainer];
  id v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  [*(id *)(a1 + 40) performSetTTYType:*(unsigned int *)(a1 + 48) forCall:v6];
}

void sub_100161270(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting TTY TULiveVoicemailUnavailableReason to %d for call with identifier %@", (uint8_t *)&v7, 0x16u);
  }

  id v5 = [*(id *)(a1 + 40) callContainer];
  id v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (![v6 liveVoicemailUnavailableReason]) {
    [*(id *)(a1 + 40) performSetLiveVoicemailUnavailableReason:*(void *)(a1 + 48) forCall:v6];
  }
}

id sub_10016142C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pulling relaying calls from client", v4, 2u);
  }

  return [*(id *)(a1 + 32) performPullRelayingCallsFromClientAndUpdateEndpoint:1 updateExpectedDestination:1];
}

id sub_100161564(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pulling relaying GFT calls from client if endpoint does not support GFT relay", v4, 2u);
  }

  return [*(id *)(a1 + 32) performPullRelayingCallsFromClientAndUpdateEndpoint:1 updateExpectedDestination:1 onlyIfNeedsEndpointConversationRelaySupport:1];
}

id sub_1001616C4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pushing relaying calls to host with source identifier: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performPushRelayingCallsToHostWithSourceIdentifier:*(void *)(a1 + 32)];
}

void sub_100161944(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = [*(id *)(a1 + 32) callForClient:*(void *)(a1 + 40) usingCall:a2];
  uint64_t v4 = [*(id *)(a1 + 32) currentCallsForClient:*(void *)(a1 + 40)];
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
}

id sub_1001619C8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pulling calls from client using handoff info %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performPullCallFromClientUsingHandoffActivityUserInfo:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
}

uint64_t sub_100161A7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100161BB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) bundleIdentifier];
  uint64_t v3 = [*(id *)(a1 + 32) channelUUID];
  uint64_t v4 = [v3 UUIDString];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
}

id sub_100161EF0(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending MMI or USSD code for dial request: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performSendMMIOrUSSDCodeWithRequest:*(void *)(a1 + 32)];
}

void sub_100162090(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting uplink muted (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [*(id *)(a1 + 40) performSetUplinkMuted:*(unsigned __int8 *)(a1 + 48) forCall:v6];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [*(id *)(a1 + 40) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      *(void *)uint64_t v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100162308(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting downlink muted (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setDownlinkMuted:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [*(id *)(a1 + 40) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      *(void *)uint64_t v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_10016257C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting is sending video (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  if (*(unsigned char *)(a1 + 48) && ([*(id *)(a1 + 40) isInCallUIActive] & 1) == 0)
  {
    uint64_t v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003ADAF4((unsigned __int8 *)(a1 + 48), v6);
    }
  }
  else
  {
    int v5 = [*(id *)(a1 + 40) callContainer];
    uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

    if (v6)
    {
      [v6 setIsSendingVideo:*(unsigned __int8 *)(a1 + 48)];
    }
    else
    {
      int v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        __int16 v9 = [*(id *)(a1 + 40) callContainer];
        uint64_t v10 = [v9 _allCalls];
        int v11 = 138412546;
        *(void *)uint64_t v12 = v8;
        *(_WORD *)&v12[8] = 2112;
        *(void *)&v12[10] = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
      }
    }
  }
}

void sub_100162830(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Settings mixes voice with media (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setMixesVoiceWithMedia:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [*(id *)(a1 + 40) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      *(void *)uint64_t v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100162AA4(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting sharing screen (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setSharingScreen:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [*(id *)(a1 + 40) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      *(void *)uint64_t v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100162D18(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 67109378;
    *(_DWORD *)uint64_t v12 = v3;
    *(_WORD *)&v12[4] = 2112;
    *(void *)&v12[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting has emergency video stream (%d) for call with identifier %@", (uint8_t *)&v11, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  if (v6)
  {
    [v6 setHasEmergencyVideoStream:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [*(id *)(a1 + 40) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      *(void *)uint64_t v12 = v8;
      *(_WORD *)&v12[8] = 2112;
      *(void *)&v12[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_100162FA8(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting emergency media items (%@) for call with identifier %@", (uint8_t *)&v11, 0x16u);
  }

  int v5 = [*(id *)(a1 + 48) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];

  if (v6)
  {
    int v7 = [*(id *)(a1 + 32) copy];
    [v6 setEmergencyMediaItems:v7];
  }
  else
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      __int16 v9 = [*(id *)(a1 + 48) callContainer];
      uint64_t v10 = [v9 _allCalls];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

id sub_100163214(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pusing hosted calls to destination %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performPushHostedCallsToDestination:*(void *)(a1 + 32)];
}

id sub_100163380(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pulling calls hosted on paired device", v4, 2u);
  }

  return [*(id *)(a1 + 32) performPullHostedCallsFromPairedHostDevice];
}

void sub_1001634D4(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending hard pause digits for call with identifier %@", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  int v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  [v5 sendHardPauseDigits];
}

id sub_10016368C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating call with proxy call %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performUpdateCallWithProxy:*(void *)(a1 + 32)];
}

void sub_10016381C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Entered foreground for call with identifier %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) callContainer];
  int v5 = [v4 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  uint64_t v6 = +[CSDReportingController sharedInstance];
  [v6 reportCallEnteredForeground:v5];

  uint64_t v7 = +[NSNotificationCenter defaultCenter];
  [v7 postNotificationName:@"CSDCallEnteredForegroundNotification" object:v5];
}

void sub_1001639B4(id a1)
{
  uint64_t v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Entering background for all calls", v3, 2u);
  }

  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"CSDCallsWillEnterBackgroundNotification" object:0];
}

void sub_100163AC4(id a1)
{
  uint64_t v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Entered background for all calls", v3, 2u);
  }

  uint64_t v2 = +[CSDReportingController sharedInstance];
  [v2 reportAllCallsBackgrounded];
}

void sub_100163C3C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = NSStringFromSize(*(NSSize *)(a1 + 48));
    uint64_t v4 = *(void *)(a1 + 32);
    int v7 = 138412546;
    int v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting remote video presentation size to %@ for call with identifier %@", (uint8_t *)&v7, 0x16u);
  }
  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  objc_msgSend(v6, "setRemoteVideoPresentationSize:", *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_100163E30(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v7[0] = 67109378;
    v7[1] = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting remote video presentation state to %d for call with identifier %@", (uint8_t *)v7, 0x12u);
  }

  int v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  [v6 setRemoteVideoPresentationState:*(unsigned int *)(a1 + 48)];
}

void sub_100164030(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting screen share attributes to %@ for call with identifier %@", (uint8_t *)&v7, 0x16u);
  }

  int v5 = [*(id *)(a1 + 48) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];

  [v6 setScreenShareAttributes:*(void *)(a1 + 32)];
}

void sub_100164234(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    v8[0] = 67109634;
    v8[1] = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting screen sharing to (%d) and attributes to %@ for call with identifier %@", (uint8_t *)v8, 0x1Cu);
  }

  uint64_t v6 = [*(id *)(a1 + 48) callContainer];
  int v7 = [v6 callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];

  [v7 setSharingScreen:*(unsigned __int8 *)(a1 + 56) attributes:*(void *)(a1 + 32)];
}

void sub_100164424(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v9 = 134218242;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting Bluetooth audio format to %ld for call with identifier %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v5 = [*(id *)(a1 + 40) callContainer];
  uint64_t v6 = [v5 callWithUniqueProxyIdentifier:*(void *)(a1 + 32)];

  id v7 = [v6 bluetoothAudioFormat];
  if (v7 != *(id *)(a1 + 48))
  {
    if (objc_msgSend(v6, "bluetoothAudioFormat", v7) == (id)1 || (id v7 = *(id *)(a1 + 48), v7 == (id)1))
    {
      uint64_t v8 = +[TUAudioSystemController sharedAudioSystemController];
      [v8 switchBluetoothAudioFormats];

      id v7 = *(id *)(a1 + 48);
    }
  }
  [v6 setBluetoothAudioFormat:v7];
}

void sub_10016462C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v3 = @"YES";
    }
    else {
      CFStringRef v3 = @"NO";
    }
    int v8 = 138412290;
    CFStringRef v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting should suppress in-call status bar to %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  uint64_t v5 = +[NSString stringWithCString:TUCallCenterInCallServiceSuppressInCallStatusBarToken encoding:4];
  uint64_t v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  id v7 = +[NSDictionary dictionaryWithObject:v6 forKey:@"ShouldSuppress"];

  [v4 postNotificationName:v5 object:*(void *)(a1 + 32) userInfo:v7];
}

void sub_10016485C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v3 = @"YES";
    }
    else {
      CFStringRef v3 = @"NO";
    }
    int v8 = 138412290;
    CFStringRef v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting should allow ringing call status indicator to %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v4 = +[NSString stringWithCString:TUCallCenterInCallServiceAllowRingingCallStatusIndicatorToken encoding:4];
  uint64_t v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  uint64_t v6 = +[NSDictionary dictionaryWithObject:v5 forKey:@"ShouldAllow"];

  id v7 = +[NSNotificationCenter defaultCenter];
  [v7 postNotificationName:v4 object:*(void *)(a1 + 32) userInfo:v6];
}

void sub_100164A9C(int8x16_t *a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[2].i64[0];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processing SpringBoard request to continue user activity with identifier: %@", buf, 0xCu);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100164BC4;
  v5[3] = &unk_100508A48;
  int8x16_t v4 = a1[2];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  +[NSUserActivity _fetchUserActivityWithUUID:(id)v4.i64[0] completionHandler:v5];
}

void sub_100164BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [*(id *)(a1 + 32) queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100164CBC;
    v11[3] = &unk_100504F10;
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    dispatch_async(v7, v11);

    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1003ADB70();
    }
  }
}

void sub_100164CBC(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiating request to pull call for user activity %@", buf, 0xCu);
  }

  int8x16_t v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) userInfo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100164DEC;
  v8[3] = &unk_100508A20;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v6;
  uint64_t v10 = v7;
  [v4 performPullCallFromClientUsingHandoffActivityUserInfo:v5 completion:v8];
}

void sub_100164DEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int8x16_t v4 = sub_100008DCC();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [v3 uniqueProxyIdentifier];
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      id v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Lauching in-call application; pulled call with identifier %@ for user activity %@",
        (uint8_t *)&v8,
        0x16u);
    }
    [*(id *)(a1 + 40) _launchInCallApplicationForIncomingCallIfNecessary:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003ADBDC();
    }
  }
}

id sub_1001650C4(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CSDCallStateController: joinConversationWithRequest: %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) performJoinConversation:*(void *)(a1 + 32)];
}

void sub_10016525C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting current audio input to device with UID %@", (uint8_t *)&v6, 0xCu);
  }

  int8x16_t v4 = [*(id *)(a1 + 40) callCenter];
  int v5 = [v4 audioDeviceController];
  [v5 setCurrentAudioInputDeviceToDeviceWithUID:*(void *)(a1 + 32)];
}

void sub_100165418(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting current audio output to device with UID %@", (uint8_t *)&v6, 0xCu);
  }

  int8x16_t v4 = [*(id *)(a1 + 40) callCenter];
  int v5 = [v4 audioDeviceController];
  [v5 setCurrentAudioOutputDeviceToDeviceWithUID:*(void *)(a1 + 32)];
}

void sub_1001655D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) localRouteController];
  uint64_t v2 = [v3 routesByUniqueIdentifier];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_100165720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) pairedHostDeviceRouteController];
  uint64_t v2 = [v3 routesByUniqueIdentifier];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10016587C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Picking local route with identifier: %@", (uint8_t *)&v5, 0xCu);
  }

  int8x16_t v4 = [*(id *)(a1 + 40) localRouteController];
  [v4 pickRouteWithUniqueIdentifier:*(void *)(a1 + 32) shouldWaitUntilAvailable:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100165A34(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Picking paired device with identifier %@", (uint8_t *)&v5, 0xCu);
  }

  int8x16_t v4 = [*(id *)(a1 + 40) pairedHostDeviceRouteController];
  [v4 pickRouteWithUniqueIdentifier:*(void *)(a1 + 32) shouldWaitUntilAvailable:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100165C38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v4 = [*(id *)(a1 + 32) providerCallDataSource];
  uint64_t v3 = [v4 callFilterController];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 containsOutgoingRestrictedHandle:*(void *)(a1 + 40) forBundleIdentifier:*(void *)(a1 + 48) performSynchronously:*(unsigned __int8 *)(a1 + 64)]);
}

void sub_100165DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v4 = [*(id *)(a1 + 32) providerCallDataSource];
  uint64_t v3 = [v4 policyForAddresses:*(void *)(a1 + 40) forBundleIdentifier:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
}

void sub_100165F90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v5 = [*(id *)(a1 + 32) providerCallDataSource];
  uint64_t v3 = [v5 callFilterController];
  id v4 = [*(id *)(a1 + 40) allObjects];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 willRestrictAddresses:v4 forBundleIdentifier:*(void *)(a1 + 48)]);
}

void sub_10016616C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) providerCallDataSource];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 shouldRestrictAddresses:*(void *)(a1 + 40) forBundleIdentifier:*(void *)(a1 + 48) performSynchronously:*(unsigned __int8 *)(a1 + 64)]);
}

void sub_100166334(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v4 = [*(id *)(a1 + 32) providerCallDataSource];
  id v3 = [v4 callFilterController];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isUnknownAddress:*(void *)(a1 + 40) normalizedAddress:*(void *)(a1 + 48) forBundleIdentifier:*(void *)(a1 + 56)]);
}

void sub_1001664E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v5 = [*(id *)(a1 + 32) providerCallDataSource];
  id v3 = [v5 callFilterController];
  id v4 = [*(id *)(a1 + 40) allObjects];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 filterStatusForAddresses:v4 withBundleIdentifier:*(void *)(a1 + 48)]);
}

BOOL sub_100166780(id a1, TUCall *a2, NSDictionary *a3)
{
  id v3 = a2;
  if ([(TUCall *)v3 isHostedOnCurrentDevice]) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = [(TUCall *)v3 isEndpointOnCurrentDevice];
  }

  return v4;
}

BOOL sub_100166880(id a1, TUCall *a2, NSDictionary *a3)
{
  return [(TUCall *)a2 isHostedOnCurrentDevice] ^ 1;
}

BOOL sub_100166958(id a1, TUCall *a2, NSDictionary *a3)
{
  id v3 = a2;
  unsigned __int8 v4 = [(TUCall *)v3 isHostedOnCurrentDevice];
  unsigned __int8 v5 = [(TUCall *)v3 isEndpointOnCurrentDevice];

  return v4 ^ v5;
}

BOOL sub_100166A44(id a1, TUCall *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(TUCall *)v2 status] == 2
    || [(TUCall *)v2 status] == 1
    || [(TUCall *)v2 status] == 3;

  return v3;
}

void sub_100166E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100166EA0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) callContainer];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100166F70;
  v4[3] = &unk_1005051A8;
  id v5 = *(id *)(a1 + 40);
  BOOL v3 = [v2 callsPassingTest:v4];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 count] != 0;
}

id sub_100166F70(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 provider];
  if ([v4 isSystemProvider])
  {
    id v5 = 0;
  }
  else
  {
    uint64_t v6 = [v3 provider];
    uint64_t v7 = [v6 bundleIdentifier];
    id v5 = [v7 isEqualToString:*(void *)(a1 + 32)];
  }
  return v5;
}

id sub_1001671E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) disconnectWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_1001672AC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) callContainer];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1001674AC;
  void v17[3] = &unk_1005051A8;
  id v18 = *(id *)(a1 + 40);
  id v3 = [v2 bargeCallsPassingTest:v17];

  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v21 = v5;
    __int16 v22 = 1024;
    int v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "disconnectBargeCallsWithBundleIdentifier, bundleIdentifier: %@, reason: %d", buf, 0x12u);
  }

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = v3;
  id v8 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)v11), "disconnectWithReason:", *(unsigned int *)(a1 + 48), (void)v13);
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v9);
  }

  if (*(_DWORD *)(a1 + 48) == 31)
  {
    uint64_t v12 = [*(id *)(a1 + 32) channelProviderManager];
    [v12 updateProviderByIdentifier];
  }
}

id sub_1001674AC(uint64_t a1, void *a2)
{
  id v3 = [a2 provider];
  unsigned __int8 v4 = [v3 bundleIdentifier];
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

BOOL sub_10016768C(id a1, TUCall *a2)
{
  return [(TUCall *)a2 status] == 1;
}

void sub_100167F58(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("CSDCallStateController-AutomaticNameAndPhotoQueue", v3);
  uint64_t v2 = (void *)qword_10058C480;
  qword_10058C480 = (uint64_t)v1;
}

void sub_1001680CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) value];
  unsigned __int8 v4 = +[NSSet setWithObject:v3];
  id v5 = [*(id *)(a1 + 48) provider];
  LODWORD(v2) = [v2 shouldAutomaticallySendNameAndPhotoToHandles:v4 callProvider:v5];

  if (v2)
  {
    int v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    _[v6 sendNameAndPhotoUsingDialRequest:v7];
  }
}

void sub_100168260(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) sanitizedHandles];
  unsigned __int8 v4 = [*(id *)(a1 + 40) provider];
  LODWORD(v2) = [v2 shouldAutomaticallySendNameAndPhotoToHandles:v3 conversationProvider:v4];

  if (v2)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    _[v5 sendNameAndPhotoUsingJoinRequest:v6];
  }
}

void sub_1001695E8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) callCenter];
  [v1 pullRelayingCallsFromClient];
}

void sub_10016962C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10016983C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_100169868(id a1)
{
  if (qword_10058C498 != -1) {
    dispatch_once(&qword_10058C498, &stru_100508BE0);
  }
  return off_10058C490() == 1;
}

void sub_1001698B8(id a1)
{
  off_10058C490 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

int sub_1001698E8(id a1)
{
  if (qword_10058C4A8 != -1) {
    dispatch_once(&qword_10058C4A8, &stru_100508C40);
  }
  uint64_t v1 = (uint64_t (*)(void))off_10058C4A0;

  return v1(0);
}

void sub_100169940(id a1)
{
  off_10058C4A0 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_100169970(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleDeviceFirstUnlockNotification];
}

void sub_1001699B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleDeviceLockStatusNotification];
}

void sub_10016B2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10016B2E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = [v3 objectForKeyedSubscript:BKSApplicationStateDisplayIDKey];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    if ([v6 length])
    {
      uint64_t v7 = [v3 objectForKeyedSubscript:BKSApplicationStateKey];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [WeakRetained setApplicationState:v7 forBundleIdentifier:v6];
      }
      else
      {
        id v9 = sub_100008DCC();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1003ADD8C((uint64_t)v3, v9);
        }
      }
    }
    else
    {
      id v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1003ADD14((uint64_t)v3, v8);
      }

      uint64_t v7 = v5;
    }
  }
}

void sub_10016BD08(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) bundleIdentifierToVoIPApplication];
  id v3 = [CSDClientManager alloc];
  unsigned __int8 v4 = [*(id *)(a1 + 32) queue];
  id v5 = [(CSDClientManager *)v3 initWithSerialQueue:v4];
  [*(id *)(a1 + 32) setNetworkExtensionClientManager:v5];

  id v6 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CXNetworkExtensionVoIPXPCClient];
  uint64_t v7 = [*(id *)(a1 + 32) networkExtensionClientManager];
  [v7 setRemoteObjectInterface:v6];

  id v8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CXNetworkExtensionVoIPXPCServer];
  id v9 = [*(id *)(a1 + 32) networkExtensionClientManager];
  [v9 setExportedInterface:v8];

  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = [v10 networkExtensionClientManager];
  [v11 setExportedObject:v10];

  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_10016C49C;
  v73[3] = &unk_100508C68;
  id v12 = v2;
  id v74 = v12;
  long long v13 = [*(id *)(a1 + 32) networkExtensionClientManager];
  [v13 setInterruptionHandler:v73];

  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  void v71[2] = sub_10016C5AC;
  void v71[3] = &unk_100508C68;
  id v14 = v12;
  id v72 = v14;
  long long v15 = [*(id *)(a1 + 32) networkExtensionClientManager];
  [v15 setInvalidationHandler:v71];

  long long v16 = [*(id *)(a1 + 32) networkExtensionClientManager];
  [v16 startListeningOnMachServiceWithName:@"com.apple.callkit.networkextension.voip"];

  id v17 = objc_alloc_init((Class)CXNetworkExtensionMessageControllerHost);
  uint64_t v18 = *(void *)(a1 + 32);
  BOOL v19 = *(void **)(v18 + 80);
  *(void *)(v18 + 80) = v17;

  [*(id *)(*(void *)(a1 + 32) + 80) addDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 16)];
  notify_post("com.apple.networkextension.voip.launch");
  int v20 = [CSDClientManager alloc];
  uint64_t v21 = [*(id *)(a1 + 32) queue];
  __int16 v22 = [(CSDClientManager *)v20 initWithSerialQueue:v21];
  [*(id *)(a1 + 32) setPushKitClientManager:v22];

  int v23 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PKVoIPXPCClient];
  uint64_t v24 = [*(id *)(a1 + 32) pushKitClientManager];
  [v24 setRemoteObjectInterface:v23];

  __int16 v25 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PKVoIPXPCServer];
  long long v26 = [*(id *)(a1 + 32) pushKitClientManager];
  [v26 setExportedInterface:v25];

  long long v27 = *(void **)(a1 + 32);
  long long v28 = [v27 pushKitClientManager];
  [v28 setExportedObject:v27];

  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_10016C6BC;
  v69[3] = &unk_100508C68;
  id v29 = v14;
  id v70 = v29;
  long long v30 = [*(id *)(a1 + 32) pushKitClientManager];
  [v30 setInterruptionHandler:v69];

  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  void v67[2] = sub_10016C7CC;
  v67[3] = &unk_100508C68;
  id v31 = v29;
  id v68 = v31;
  id v32 = [*(id *)(a1 + 32) pushKitClientManager];
  [v32 setInvalidationHandler:v67];

  __int16 v33 = [*(id *)(a1 + 32) pushKitClientManager];
  [v33 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.voip"];

  id v34 = [*(id *)(a1 + 32) _apsConnectionForEnvironment:APSEnvironmentDevelopment];
  id v35 = [*(id *)(a1 + 32) _apsConnectionForEnvironment:APSEnvironmentProduction];
  notify_post("com.apple.pushkit.launch.voip");
  uint64_t v36 = +[CSDPersistedChannelRegistry sharedInstance];
  uint64_t v37 = *(void *)(a1 + 32);
  char v38 = *(void **)(v37 + 48);
  *(void *)(v37 + 48) = v36;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "addObserver:");
  char v39 = +[NSNotificationCenter defaultCenter];
  [v39 addObserver:*(void *)(a1 + 32) selector:"handlePTTAppReportedValidActiveRemoteParticipant:" name:@"CSDBargeCallSetValidActiveRemoteParticipantNameNotification" object:0];

  unsigned int v40 = [CSDClientManager alloc];
  uint64_t v41 = [*(id *)(a1 + 32) queue];
  unint64_t v42 = [(CSDClientManager *)v40 initWithSerialQueue:v41];
  [*(id *)(a1 + 32) setChannelClientManager:v42];

  char v43 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CXChannelPushClientProtocol];
  char v44 = [*(id *)(a1 + 32) channelClientManager];
  [v44 setRemoteObjectInterface:v43];

  unsigned int v45 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CXChannelPushServerProtocol];
  uint64_t v46 = [*(id *)(a1 + 32) channelClientManager];
  [v46 setExportedInterface:v45];

  unint64_t v47 = *(void **)(a1 + 32);
  char v48 = [v47 channelClientManager];
  [v48 setExportedObject:v47];

  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_10016C8DC;
  v65[3] = &unk_100508C68;
  id v49 = v31;
  id v66 = v49;
  unsigned int v50 = [*(id *)(a1 + 32) channelClientManager];
  [v50 setInterruptionHandler:v65];

  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_10016C9EC;
  v63[3] = &unk_100508C68;
  id v51 = v49;
  id v64 = v51;
  unint64_t v52 = [*(id *)(a1 + 32) channelClientManager];
  [v52 setInvalidationHandler:v63];

  char v53 = [*(id *)(a1 + 32) channelClientManager];
  [v53 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.ptt"];

  notify_post("com.apple.callservicesd.launch.ptt");
  uint64_t v54 = [CSDPTTServiceUpdatePushMonitor alloc];
  uint64_t v55 = objc_alloc_init(CSDPTTServiceUpdatePushBudgetTUDefaultsDataSource);
  uint64_t v56 = [(CSDPTTServiceUpdatePushMonitor *)v54 initWithServiceUpdatePushBudgetDataSource:v55];
  [*(id *)(a1 + 32) setPttServiceUpdatePushMonitor:v56];

  id v57 = [objc_alloc((Class)CXNotificationServiceExtensionVoIPXPCHost) initWithDelegate:*(void *)(a1 + 32)];
  uint64_t v58 = *(void *)(a1 + 32);
  uint64_t v59 = *(void **)(v58 + 88);
  *(void *)(v58 + 88) = v57;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_10016CAFC;
  v60[3] = &unk_100504E98;
  objc_copyWeak(&v61, &location);
  xpc_activity_register("com.apple.telephonyutilities.callservicesd.csdvoipapplicationcontroller.daily", XPC_ACTIVITY_CHECK_IN, v60);
  objc_destroyWeak(&v61);
  objc_destroyWeak(&location);
}

void sub_10016C480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10016C49C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC network extension connection interrupted from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 networkExtensionClient];
  if (v8 == v3) {
    [v7 setNetworkExtensionClient:0];
  }
}

void sub_10016C5AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC network extension connection invalidated from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 networkExtensionClient];
  if (v8 == v3) {
    [v7 setNetworkExtensionClient:0];
  }
}

void sub_10016C6BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC PushKit connection interrupted from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 pushKitClient];
  if (v8 == v3) {
    [v7 setPushKitClient:0];
  }
}

void sub_10016C7CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC PushKit connection invalidated from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 pushKitClient];
  if (v8 == v3) {
    [v7 setPushKitClient:0];
  }
}

void sub_10016C8DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC channel push connection interrupted from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 channelPushClient];
  if (v8 == v3) {
    [v7 setChannelPushClient:0];
  }
}

void sub_10016C9EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC channel push connection interrupted from client %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 processBundleIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  id v8 = [v7 channelPushClient];
  if (v8 == v3) {
    [v7 setChannelPushClient:0];
  }
}

void sub_10016CAFC(uint64_t a1, void *a2)
{
  activity = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    [WeakRetained _removeAllApplicationsFromKillCountsDictionary];
    [WeakRetained _pruneUninstalledAppPushTopics];
  }
  else if (!state)
  {
    xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_activity_set_criteria(activity, v5);
  }
}

void sub_10016CD5C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handling %@", buf, 0xCu);
  }

  unsigned __int8 v4 = [*(id *)(a1 + 32) userInfo];
  xpc_object_t v5 = [v4 objectForKeyedSubscript:@"bundleIDs"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "userInfo", 0);
    id v8 = [v7 objectForKeyedSubscript:@"bundleIDs"];

    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v14 = [*(id *)(a1 + 40) _findOrCreateApplicationWithBundleIdentifier:v13];
            [*(id *)(a1 + 40) _removeApplicationFromKillCountsDictionary:v14];
            long long v15 = [*(id *)(a1 + 40) callStateController];
            [v15 disconnectBargeCallsWithBundleIdentifier:v13 reason:31];

            long long v16 = [*(id *)(a1 + 40) persistedChannelRegistry];
            [v16 handleAppUninstall:v13];

            [*(id *)(a1 + 40) _unregisterPushApplication:v14 inEnvironment:0 pushType:3 destroyApp:0];
            [*(id *)(a1 + 40) removeApplicationFromPTTDeprecationAlertDictionary:v14];
            id v17 = [*(id *)(a1 + 40) pttServiceUpdatePushMonitor];
            [v17 removeApplicationFromPTTWakingServiceUpdateDictionary:v14];

            [*(id *)(a1 + 40) _unregisterPushApplication:v14 inEnvironment:0 pushType:2 destroyApp:1];
          }
          else
          {
            id v14 = sub_100008DCC();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              sub_1003ADE04(buf, v13, &v24, v14);
            }
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }
  }
  else
  {
    id v8 = sub_100008DCC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1003ADE80((id *)(a1 + 32));
    }
  }
}

void sub_10016DAA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 != 2 && a2 != 4)
  {
    id v6 = [*(id *)(a1 + 32) callStateController];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 48) bundleIdentifier];
    [v6 disconnectBargeCall:v7 bundleIdentifier:v8 reason:2];

    id v9 = *(void **)(a1 + 32);
    id v10 = [*(id *)(a1 + 48) bundleIdentifier];
    [v9 removeOutstandingMessagesForBundleIdentifier:v10];
  }
  uint64_t v11 = sub_100008DCC();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218243;
    uint64_t v13 = a2;
    __int16 v14 = 2113;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Channel: received ptt push result type :%ld participant:%{private}@", (uint8_t *)&v12, 0x16u);
  }
}

void sub_10016FE58(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) outstandingMessages];
  [v2 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_100170684(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001706C4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully launched application with bundle identifier %@", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (v5)
  {
    id v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1003AE2AC();
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001707D8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    id v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invalidating process assertion for bundle ID %@ from timeout", buf, 0xCu);
  }

  [*(id *)(a1 + 40) invalidate];
  unsigned __int8 v4 = *(void **)(a1 + 48);
  if (*(unsigned char *)(a1 + 72))
  {
    unsigned __int8 v5 = [v4 containsOutstandingMessage:*(void *)(a1 + 56) forBundleIdentifier:*(void *)(a1 + 32)];
    id v6 = [*(id *)(a1 + 48) persistedChannelRegistry];
    uint64_t v7 = [v6 activePersistedChannelIdentity];

    uint64_t v8 = [v7 bundleIdentifier];
    unsigned __int8 v9 = [v8 isEqualToString:*(void *)(a1 + 32)];

    char v10 = v9 & v5 ^ 1;
  }
  else
  {
    char v10 = ([v4 _appHasOngoingCall:*(void *)(a1 + 64)] & 1) != 0
       || ![*(id *)(a1 + 48) containsOutstandingMessage:*(void *)(a1 + 56) forBundleIdentifier:*(void *)(a1 + 32)]|| *(unsigned char *)(a1 + 73) == 0;
  }
  if (([*(id *)(a1 + 48) _appHasOngoingCall:*(void *)(a1 + 64)] & 1) == 0)
  {
    unsigned int v11 = [*(id *)(a1 + 48) containsOutstandingMessage:*(void *)(a1 + 56) forBundleIdentifier:*(void *)(a1 + 32)];
    if (!*(unsigned char *)(a1 + 72)
      && v11
      && [*(id *)(a1 + 64) isEligibleForPTTEntitlementDeprecationNotice]
      && MKBGetDeviceLockState() != 1
      && MKBGetDeviceLockState() != 2
      && [*(id *)(a1 + 48) pttDeprecationAlertWaitingPeriodHasPassedForApplication:*(void *)(a1 + 64)])
    {
      int v12 = [*(id *)(a1 + 64) localizedAppName];
      uint64_t v13 = sub_100008DCC();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v35 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[WARN] %@ must be updated to use the new PushToTalk framework. The com.apple.developer.pushkit.unrestricted-voip.ptt entitlement has been deprecated and will stop working in future versions of iOS.", buf, 0xCu);
      }

      [*(id *)(a1 + 48) displayPTTDeprecationAlert:v12];
      [*(id *)(a1 + 48) updatePTTDeprecationAlertLogForApplication:*(void *)(a1 + 64)];
    }
  }
  if (*(unsigned char *)(a1 + 74)) {
    char v14 = v10;
  }
  else {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    id v15 = [*(id *)(a1 + 48) applicationMonitor];
    unsigned __int8 v16 = [v15 isRunningForegroundForVoIPApplication:*(void *)(a1 + 64)];

    if ((v16 & 1) == 0)
    {
      [*(id *)(a1 + 48) removeOutstandingMessagesForBundleIdentifier:*(void *)(a1 + 32)];
      int v17 = *(unsigned __int8 *)(a1 + 72);
      long long v18 = sub_100008DCC();
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (v17)
      {
        if (v19) {
          sub_1003AE3F4(a1 + 32, v18, v20, v21, v22, v23, v24, v25);
        }
      }
      else if (v19)
      {
        sub_1003AE384(a1 + 32, v18, v20, v21, v22, v23, v24, v25);
      }

      long long v26 = [*(id *)(a1 + 64) bundleIdentifier];
      long long v27 = +[RBSProcessIdentity identityForEmbeddedApplicationIdentifier:v26];

      long long v28 = +[RBSProcessPredicate predicateMatchingIdentity:v27];
      id v29 = objc_alloc_init((Class)RBSTerminateContext);
      [v29 setReportType:1];
      [v29 setExceptionDomain:10];
      [v29 setExceptionCode:3131951633];
      id v30 = [objc_alloc((Class)RBSTerminateRequest) initWithPredicate:v28 context:v29];
      id v33 = 0;
      [v30 execute:&v33];
      id v31 = v33;
      if (v31)
      {
        id v32 = sub_100008DCC();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_1003AE318();
        }
      }
      if (!*(unsigned char *)(a1 + 72)) {
        [*(id *)(a1 + 48) _incrementKillCountForApplication:*(void *)(a1 + 64)];
      }
    }
  }
}

id sub_100170D70(uint64_t a1)
{
  return [*(id *)(a1 + 32) reconcileChannelTopicFilters];
}

void sub_10017276C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned __int8 v5 = sub_100008DCC();
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003AE780(a1, (uint64_t)v4, v6);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully opened URL %@ for bundle: %@", (uint8_t *)&v9, 0x16u);
  }
}

BOOL sub_1001743D4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 8), v12);
        if (!PBReaderPlaceMark() || (sub_1000560AC((uint64_t)v12, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v13 = PBReaderReadString();
    uint64_t v12 = *(CSDMessagingHandle **)(a1 + 16);
    *(void *)(a1 + 16) = v13;
LABEL_23:

    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100174CB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) identifiersWithPendingCoalescingBlocks];
  [v2 removeObject:*(void *)(a1 + 40)];

  uint64_t v3 = [*(id *)(a1 + 32) blockToExecuteAfterPendingCoalescingBlocksByIdentifier];
  id v5 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v5)
  {
    char v4 = [*(id *)(a1 + 32) blockToExecuteAfterPendingCoalescingBlocksByIdentifier];
    [v4 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) performBlock:v5 coalescedByIdentifier:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1001754C4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  char v4 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  id v5 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  unint64_t v6 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v7 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v10 == -1 || v10 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v11 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
      v9 |= (unint64_t)(v11 & 0x7F) << v7;
      if ((v11 & 0x80) == 0) {
        goto LABEL_12;
      }
      v7 += 7;
      BOOL v12 = v8++ >= 9;
      if (v12)
      {
        unint64_t v9 = 0;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v9 = 0;
    }
LABEL_14:
    if (v13 || (v9 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v9 >> 3))
    {
      case 1u:
        uint64_t v15 = PBReaderReadString();
        uint64_t v16 = v4[598];
        goto LABEL_32;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + v5[599]) |= 8u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v12 = v19++ >= 9;
              if (v12)
              {
                uint64_t v20 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_60:
        BOOL v42 = v20 != 0;
        uint64_t v43 = v6[600];
        goto LABEL_69;
      case 3u:
        uint64_t v15 = PBReaderReadString();
        uint64_t v16 = 48;
        goto LABEL_32;
      case 4u:
        uint64_t v15 = PBReaderReadString();
        uint64_t v16 = 40;
        goto LABEL_32;
      case 5u:
        uint64_t v15 = PBReaderReadData();
        uint64_t v16 = 16;
LABEL_32:
        uint64_t v23 = *(void **)(a1 + v16);
        *(void *)(a1 + v16) = v15;

        goto LABEL_75;
      case 6u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + v5[599]) |= 2u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v12 = v25++ >= 9;
              if (v12)
              {
                LODWORD(v26) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v26) = 0;
        }
LABEL_64:
        uint64_t v44 = 28;
        goto LABEL_74;
      case 7u:
        id v29 = v5;
        id v30 = v6;
        id v31 = v4;
        id v32 = objc_alloc_init(CSDMessagingConversationActivitySceneAssociationBehavior);
        objc_storeStrong((id *)(a1 + 32), v32);
        if PBReaderPlaceMark() && (sub_1000BE738((uint64_t)v32, a2))
        {
          PBReaderRecallMark();

          char v4 = v31;
          unint64_t v6 = v30;
          id v5 = v29;
LABEL_75:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 8u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(unsigned char *)(a1 + v5[599]) |= 4u;
        while (2)
        {
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if (v37 < 0)
            {
              v33 += 7;
              BOOL v12 = v34++ >= 9;
              if (v12)
              {
                uint64_t v35 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0;
        }
LABEL_68:
        BOOL v42 = v35 != 0;
        uint64_t v43 = 56;
LABEL_69:
        *(unsigned char *)(a1 + v43) = v42;
        goto LABEL_75;
      case 9u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + v5[599]) |= 1u;
        while (2)
        {
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 == -1 || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
            v26 |= (unint64_t)(v41 & 0x7F) << v38;
            if (v41 < 0)
            {
              v38 += 7;
              BOOL v12 = v39++ >= 9;
              if (v12)
              {
                LODWORD(v26) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v26) = 0;
        }
LABEL_73:
        uint64_t v44 = 24;
LABEL_74:
        *(_DWORD *)(a1 + v44) = v26;
        goto LABEL_75;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_75;
    }
  }
}

void sub_1001770A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) messagingController];
  [v2 sendConversationAudioPriorityToClientForConversation:*(void *)(a1 + 40)];
}

void sub_10017748C(uint64_t a1)
{
  uint64_t v1 = sub_100008DCC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Updating IDS firewall with allowed handles", buf, 2u);
  }

  id v2 = objc_alloc_init((Class)CHManager);
  uint64_t v3 = [(id)objc_opt_class() predicateForUpgrade];
  char v24 = objc_alloc_init(CSDSharedConversationServerBag);
  id v4 = [(CSDSharedConversationServerBag *)v24 idsFirewallBatchSize];
  unsigned int v25 = (void *)v3;
  uint64_t v26 = v2;
  id v5 = [v2 callsWithPredicate:v3 limit:0 offset:0 batchSize:v4];
  unint64_t v6 = +[NSMutableDictionary dictionary];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obj = v5;
  id v29 = [obj countByEnumeratingWithState:&v37 objects:v43 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v38;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v38 != v28) {
          objc_enumerationMutation(obj);
        }
        unsigned int v8 = *(void **)(*((void *)&v37 + 1) + 8 * v7);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        uint64_t v30 = v7;
        id v31 = v8;
        unint64_t v9 = [v8 validRemoteParticipantHandles];
        id v10 = [v9 countByEnumeratingWithState:&v33 objects:v42 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v34;
          do
          {
            for (i = 0; i != v11; i = (char *)i + 1)
            {
              if (*(void *)v34 != v12) {
                objc_enumerationMutation(v9);
              }
              char v14 = *(void **)(*((void *)&v33 + 1) + 8 * i);
              uint64_t v15 = [v14 tuHandle];
              if (v15)
              {
                uint64_t v16 = (void *)v15;
                int v17 = [v14 tuHandle];
                char v18 = [v6 objectForKeyedSubscript:v17];

                if (!v18)
                {
                  unsigned int v19 = [v31 date];
                  uint64_t v20 = [v14 tuHandle];
                  [v6 setObject:v19 forKeyedSubscript:v20];
                }
              }
              if ([v6 count] > v4)
              {
                unint64_t v21 = [*(id *)(a1 + 32) service];
                [v21 addFirewallEntriesForHandleToDate:v6];

                uint64_t v22 = +[NSMutableDictionary dictionary];

                unint64_t v6 = (void *)v22;
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v33 objects:v42 count:16];
          }
          while (v11);
        }

        uint64_t v7 = v30 + 1;
      }
      while ((id)(v30 + 1) != v29);
      id v29 = [obj countByEnumeratingWithState:&v37 objects:v43 count:16];
    }
    while (v29);
  }

  uint64_t v23 = +[NSUserDefaults tu_defaults];
  [v23 setInteger:1 forKey:@"kLastIDSFirewallVersionDefaultsKey"];
}

uint64_t sub_100177C8C(uint64_t a1, void *a2)
{
  id v16 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [v16 tuHandle];
  id v5 = [v3 objectForKeyedSubscript:v4];

  if (!v5)
  {
    unint64_t v6 = [*(id *)(a1 + 40) latestRecentOutgoingFacetimeCallWithRemoteParticipantHandle:v16 sinceDate:*(void *)(a1 + 48) noDeletedCallsPredicate:*(void *)(a1 + 56)];
    uint64_t v7 = v6;
    if (v6)
    {
      unsigned int v8 = [v6 date];
      unint64_t v9 = [*(id *)(a1 + 64) date];
      unsigned int v10 = [v8 isBeforeDate:v9];

      if (!v10)
      {
LABEL_7:

        goto LABEL_8;
      }
      id v11 = [v7 date];
      uint64_t v12 = *(void **)(a1 + 32);
      int v13 = [v16 tuHandle];
      [v12 setObject:v11 forKeyedSubscript:v13];
    }
    else
    {
      char v14 = *(void **)(a1 + 72);
      id v11 = [v16 tuHandle];
      [v14 addObject:v11];
    }

    goto LABEL_7;
  }
LABEL_8:

  return _objc_release_x2();
}

void sub_1001783C8(uint64_t a1)
{
  id v2 = +[TUConversationManagerXPCClient conversationManagerClientXPCInterface];
  uint64_t v3 = [*(id *)(a1 + 32) clientManager];
  [v3 setRemoteObjectInterface:v2];

  id v4 = +[TUConversationManagerXPCClient conversationManagerServerXPCInterface];
  id v5 = [*(id *)(a1 + 32) clientManager];
  [v5 setExportedInterface:v4];

  unint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v6 clientManager];
  [v7 setExportedObject:v6];

  unsigned int v8 = [*(id *)(a1 + 32) clientManager];
  [v8 setRequiredConnectionCapability:@"access-calls"];

  unint64_t v9 = [*(id *)(a1 + 32) clientManager];
  [v9 setInterruptionHandler:&stru_100508D50];

  unsigned int v10 = [*(id *)(a1 + 32) clientManager];
  [v10 setInvalidationHandler:&stru_100508D70];

  id v11 = [*(id *)(a1 + 32) clientManager];
  [v11 setSupportsClientAssertions:1];

  uint64_t v12 = [*(id *)(a1 + 32) clientManager];
  int v13 = [v12 asynchronousExportedObjectProxy];
  +[TUConversationManagerXPCClient setAsynchronousServer:v13];

  char v14 = [*(id *)(a1 + 32) clientManager];
  uint64_t v15 = [v14 synchronousExportedObjectProxy];
  +[TUConversationManagerXPCClient setSynchronousServer:v15];

  if (qword_10058C4B0 != -1)
  {
    dispatch_once(&qword_10058C4B0, &stru_100508D90);
  }
}

void sub_100178598(id a1, CSDClient *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100178644(id a1, CSDClient *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001786F0(id a1)
{
  uint64_t v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:TUConversationManagerDidBecomeAvailableNotification object:0];

  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CPSystemStateObserver XPC post notification success", v3, 2u);
  }
}

id sub_100178784(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 startListeningOnMachServiceWithName:@"com.apple.telephonyutilities.callservicesdaemon.conversationmanager"];

  notify_register_check("CSDConversationManagerClientsShouldConnectNotification", (int *)(*(void *)(a1 + 32) + 8));
  notify_set_state(*(_DWORD *)(*(void *)(a1 + 32) + 8), 0);
  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 notifyClientsToConnectIfNecessary];
}

void sub_1001788D0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientManager];
  [v1 invalidate];
}

void sub_10017942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100179448(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10017969C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 setUsingAirplay:*(unsigned __int8 *)(a1 + 56) onActivitySession:*(void *)(a1 + 40) onConversationWithUUID:*(void *)(a1 + 48)];
}

void sub_1001799F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100179A08(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10017AB74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10017AC7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10017B1A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 addCollaborationDictionary:*(void *)(a1 + 40) forConversationWithUUID:*(void *)(a1 + 48) fromMe:*(unsigned __int8 *)(a1 + 56)];
}

void sub_10017B3A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 getNeedsDisclosureOfCollaborationInitiator:*(void *)(a1 + 40) forConversationUUID:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_10017B3FC(uint64_t a1)
{
  uint64_t v2 = TUConversationManagerCollaborationErrorDomain;
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  CFStringRef v6 = @"Client is not entitled to access collaboration disclosures";
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  int v4 = +[NSError errorWithDomain:v2 code:1 userInfo:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10017B604(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 addDisclosedCollaborationInitiator:*(void *)(a1 + 40) toConversationUUID:*(void *)(a1 + 48)];
}

BOOL sub_10017BA74(id a1, CSDClient *a2)
{
  return [(CSDClient *)a2 supportsMessagesGroupProviding];
}

id sub_10017BA7C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 getMessagesGroupDetailsForMessagesGroupUUID:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

id sub_10017BF84(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 conversation:*(void *)(a1 + 32) addedMembersLocally:*(void *)(a1 + 40)];
}

id sub_10017C0A8(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 conversation:*(void *)(a1 + 32) buzzedMember:*(void *)(a1 + 40)];
}

id sub_10017C1AC(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 conversationUpdatedMessagesGroupPhoto:*(void *)(a1 + 32)];
}

id sub_10017C2B0(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 updateIncomingPendingConversationsByGroupUUID:*(void *)(a1 + 32)];
}

id sub_10017C3B4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 updateActivatedConversationLinks:*(void *)(a1 + 32)];
}

void sub_10017C494(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = [v4 _conversationsByGroupUUIDFilteredForClient:a2];
  [v5 updateConversationsByGroupUUID:v6];
}

BOOL sub_10017C604(id a1, CSDClient *a2)
{
  return [(CSDClient *)a2 isEntitledForCapability:@"access-media-priorities"];
}

id sub_10017C618(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 mediaPrioritiesChangedForConversation:*(void *)(a1 + 32)];
}

BOOL sub_10017C768(id a1, CSDClient *a2)
{
  return [(CSDClient *)a2 isEntitledForCapability:@"access-participant-reactions"];
}

id sub_10017C77C(void *a1, uint64_t a2, void *a3)
{
  return [a3 conversation:a1[4] participant:a1[5] didReact:a1[6]];
}

BOOL sub_10017C8A4(id a1, CSDClient *a2)
{
  return [(CSDClient *)a2 isEntitledForCapability:@"access-participant-reactions"];
}

id sub_10017C8B8(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 conversation:*(void *)(a1 + 32) participantDidStopReacting:*(void *)(a1 + 40)];
}

id sub_10017C9F0(void *a1, uint64_t a2, void *a3)
{
  return _[a3 conversation:a1[4] participant:a1[5] addedNotice:a1[6]];
}

id sub_10017CB00(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 conversation:*(void *)(a1 + 32) receivedActivitySessionEvent:*(void *)(a1 + 40)];
}

id sub_10017CBF4(void *a1, uint64_t a2, void *a3)
{
  return [a3 conversation:a1[4] appLaunchState:a1[6] forActivitySession:a1[5]];
}

void sub_10017CCE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = [v3 activityAuthorizedBundleIdentifierState];
  [v4 updateActivityAuthorizedBundleIdentifierState:v5];
}

id sub_10017CE44(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 receivedTrackedPendingMember:*(void *)(a1 + 32) forConversationLink:*(void *)(a1 + 40)];
}

id sub_10017CF28(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 conversation:*(void *)(a1 + 32) screenSharingChangedForParticipant:*(void *)(a1 + 40)];
}

id sub_10017D02C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 conversation:*(void *)(a1 + 32) didChangeStateForActivitySession:*(void *)(a1 + 40)];
}

id sub_10017D110(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 conversation:*(void *)(a1 + 32) didChangeSceneAssociationForActivitySession:*(void *)(a1 + 40)];
}

id sub_10017D204(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 remoteScreenShareAttributesChanged:*(void *)(a1 + 32) isLocallySharing:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10017D2F4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 remoteScreenShareEndedWithReason:*(void *)(a1 + 32)];
}

id sub_10017D3AC(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 sharePlayAvailableChanged:*(unsigned __int8 *)(a1 + 32)];
}

id sub_10017D464(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 screenSharingAvailableChanged:*(unsigned __int8 *)(a1 + 32)];
}

id sub_10017D5E4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 activeParticipant:*(void *)(a1 + 32) addedHighlightToConversation:*(void *)(a1 + 40) highlightIdentifier:*(void *)(a1 + 48) oldHighlightIdentifier:*(void *)(a1 + 56) isFirstAdd:*(unsigned __int8 *)(a1 + 64)];
}

id sub_10017D73C(void *a1, uint64_t a2, void *a3)
{
  return _[a3 activeParticipant:a1[4] removedHighlightFromConversation:a1[5] highlightIdentifier:a1[6]];
}

id sub_10017D874(void *a1, uint64_t a2, void *a3)
{
  return _[a3 conversation:a1[4] collaborationStateChanged:a1[6] highlightIdentifier:a1[5]];
}

id sub_10017D99C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 addedCollaborationDictionary:*(void *)(a1 + 32) forConversation:*(void *)(a1 + 40)];
}

void sub_10017DD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10017DD48(uint64_t a1)
{
  id v2 = [[CSDDeviceLockStateObserver alloc] initWithQueue:*(void *)(*(void *)(a1 + 32) + 16)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 64);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10017DE24;
  v6[3] = &unk_100505698;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  [v5 performBlockAfterFirstUnlock:v6];
  objc_destroyWeak(&v7);
}

void sub_10017DE10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10017DE24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device first unlock block invoked, attempting to retrieve saved providers", v3, 2u);
    }

    [WeakRetained retrieveSavedProvidersByIdentifierAndNotify:1 unregister:0];
  }
}

id sub_10017DF50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) localProvidersByIdentifier];
  uint64_t v3 = [*(id *)(a1 + 32) dataSource];
  id v4 = [v3 registeredLocalProvidersByIdentifier];
  [v2 addEntriesFromDictionary:v4];

  id v5 = [*(id *)(a1 + 32) pairedHostDeviceProvidersByIdentifier];
  id v6 = [*(id *)(a1 + 32) dataSource];
  id v7 = [v6 registeredPairedHostDeviceProvidersByIdentifier];
  [v5 addEntriesFromDictionary:v7];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  unsigned int v8 = objc_msgSend(*(id *)(a1 + 32), "localProvidersByIdentifier", 0);
  unint64_t v9 = [v8 allKeys];

  id v10 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v25;
    uint64_t v13 = TUBundleIdentifierPhoneApplication;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v15 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if ([v15 isEqualToString:@"com.apple.coretelephony"])
        {
          id v16 = [*(id *)(a1 + 32) localProvidersByIdentifier];
          int v17 = [v16 objectForKeyedSubscript:v15];
          [v17 setBundleIdentifier:v13];
        }
      }
      id v11 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v11);
  }

  char v18 = sub_100008DCC();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Loaded registered providers", buf, 2u);
  }

  unsigned int v19 = sub_100008DCC();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = [*(id *)(a1 + 32) localProvidersByIdentifier];
    *(_DWORD *)long long buf = 138412290;
    id v29 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Loaded registered local providers: %@", buf, 0xCu);
  }
  unint64_t v21 = sub_100008DCC();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = [*(id *)(a1 + 32) pairedHostDeviceProvidersByIdentifier];
    *(_DWORD *)long long buf = 138412290;
    id v29 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Loaded registered relay providers: %@", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 40)) {
    [*(id *)(a1 + 32) _unregisterUninstalledProvidersAndNotify:*(unsigned __int8 *)(a1 + 41)];
  }
  return [*(id *)(a1 + 32) _updateProvidersByIdentifierAndNotify:*(unsigned __int8 *)(a1 + 41)];
}

id sub_10017E4D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) providersChangedForProviderManager:*(void *)(a1 + 40)];
}

void sub_10017EA40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_10017EB48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

uint64_t sub_10017EB9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10017EBAC(uint64_t a1)
{
}

void sub_10017ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017ED7C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _sortedProvidersForRemoteClients:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

int64_t sub_10017EF24(id a1, TUCallProvider *a2, TUCallProvider *a3)
{
  id v4 = a3;
  id v5 = [(TUCallProvider *)a2 localizedName];
  id v6 = [(TUCallProvider *)v4 localizedName];

  id v7 = [v5 localizedStandardCompare:v6];
  return (int64_t)v7;
}

id sub_10017EF94(uint64_t a1, void *a2)
{
  return [a2 isEqualToCallProvider:*(void *)(a1 + 32)];
}

void sub_10017F13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017F160(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _defaultAppProviderForRemoteClients:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10017F5D4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 bundleIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10017F6CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) originalRingtoneSoundURL];
  uint64_t v3 = [v2 lastPathComponent];
  id v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    id v6 = [*(id *)(a1 + 40) uniqueRingtoneSoundLinkFilenameWithOriginalFilename:v3];
    id v7 = [*(id *)(a1 + 40) dataSource];
    unsigned __int8 v8 = [v7 isSymbolicLinkAtURL:v2];

    if (v8)
    {
      unint64_t v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v49 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[WARN] Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@", buf, 0xCu);
      }
    }
    else
    {
      id v10 = [*(id *)(a1 + 40) dataSource];
      id v11 = [v10 createLinkIfNecessaryWithFilename:v6 toURL:v2];
      [*(id *)(a1 + 32) setRingtoneSoundURL:v11];

      if ((uint64_t)[*(id *)(a1 + 32) sandboxExtensionHandle] >= 1)
      {
        uint64_t v12 = sub_100008DCC();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *(void **)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          id v49 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Releasing sandboxExtensionHandle for provider: %@", buf, 0xCu);
        }

        [*(id *)(a1 + 32) sandboxExtensionHandle];
        sandbox_extension_release();
      }
    }
  }
  char v14 = [*(id *)(a1 + 40) localProvidersByIdentifier];
  uint64_t v15 = [*(id *)(a1 + 32) identifier];
  id v16 = [v14 objectForKeyedSubscript:v15];
  unsigned __int8 v17 = [v16 isEqualToCallProvider:*(void *)(a1 + 32)];

  if ((v17 & 1) == 0)
  {
    BOOL v42 = v4;
    char v18 = sub_100008DCC();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = [*(id *)(a1 + 40) localProvidersByIdentifier];
      uint64_t v20 = [*(id *)(a1 + 32) identifier];
      unint64_t v21 = [v19 objectForKeyedSubscript:v20];
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v49 = v21;
      __int16 v50 = 2112;
      uint64_t v51 = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating provider from %@ to %@", buf, 0x16u);
    }
    uint64_t v23 = *(void *)(a1 + 32);
    long long v24 = [*(id *)(a1 + 40) localProvidersByIdentifier];
    long long v25 = [*(id *)(a1 + 32) identifier];
    [v24 setObject:v23 forKeyedSubscript:v25];

    long long v26 = [*(id *)(a1 + 40) localProvidersByIdentifier];
    long long v27 = [*(id *)(a1 + 40) dataSource];
    [v27 setRegisteredLocalProvidersByIdentifier:v26];

    uint64_t v28 = [*(id *)(a1 + 40) localProvidersByIdentifier];
    id v29 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v28 count]);

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v30 = [*(id *)(a1 + 40) localProvidersByIdentifier];
    id v31 = [v30 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v44;
      do
      {
        for (i = 0; i != v32; i = (char *)i + 1)
        {
          if (*(void *)v44 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = *(void *)(*((void *)&v43 + 1) + 8 * i);
          long long v36 = [*(id *)(a1 + 40) localProvidersByIdentifier];
          long long v37 = [v36 objectForKeyedSubscript:v35];

          long long v38 = [v37 ringtoneSoundURL];
          long long v39 = [v38 lastPathComponent];

          if (v39) {
            [v29 addObject:v39];
          }
        }
        id v32 = [v30 countByEnumeratingWithState:&v43 objects:v47 count:16];
      }
      while (v32);
    }

    long long v40 = [*(id *)(a1 + 40) dataSource];
    id v41 = [v29 copy];
    [v40 removeLinksForFilenamesNotInArray:v41];

    [*(id *)(a1 + 40) _updateProvidersByIdentifierAndNotify:1];
    id v4 = v42;
  }
}

void sub_10017FC1C(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v3)
  {
    id v5 = v3;
    char v6 = 0;
    uint64_t v7 = *(void *)v25;
    *(void *)&long long v4 = 138412546;
    long long v22 = v4;
    id obj = v2;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(obj);
        }
        unint64_t v9 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        id v10 = objc_msgSend(*(id *)(a1 + 40), "pairedHostDeviceProvidersByIdentifier", v22);
        id v11 = [v9 identifier];
        uint64_t v12 = [v10 objectForKeyedSubscript:v11];
        unsigned __int8 v13 = [v12 isEqualToCallProvider:v9];

        if ((v13 & 1) == 0)
        {
          char v14 = sub_100008DCC();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = [*(id *)(a1 + 40) pairedHostDeviceProvidersByIdentifier];
            id v16 = [v9 identifier];
            unsigned __int8 v17 = [v15 objectForKeyedSubscript:v16];
            *(_DWORD *)long long buf = v22;
            id v29 = v17;
            __int16 v30 = 2112;
            id v31 = v9;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating relay provider from %@ to %@", buf, 0x16u);
          }
          char v18 = [*(id *)(a1 + 40) pairedHostDeviceProvidersByIdentifier];
          unsigned int v19 = [v9 identifier];
          [v18 setObject:v9 forKeyedSubscript:v19];

          char v6 = 1;
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v5);

    if (v6)
    {
      uint64_t v20 = [*(id *)(a1 + 40) pairedHostDeviceProvidersByIdentifier];
      unint64_t v21 = [*(id *)(a1 + 40) dataSource];
      [v21 setRegisteredPairedHostDeviceProvidersByIdentifier:v20];

      [*(id *)(a1 + 40) _updateProvidersByIdentifierAndNotify:1];
    }
  }
  else
  {
  }
}

id sub_10017FF50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _donateUserIntentForProviderWithIdentifier:*(void *)(a1 + 40)];
}

void sub_100180044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018005C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userIntentManager];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 validateUserIntentForCallSource:*(void *)(a1 + 40)];
}

void sub_100180194(id *a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    *(_DWORD *)long long buf = 138412290;
    *(void *)uint64_t v58 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "dialRequest: %@", buf, 0xCu);
  }

  id v4 = objc_retainBlock(a1[6]);
  id v5 = [a1[5] featureFlags];
  if ([v5 appProtectionEnabled])
  {
    char v6 = [a1[5] protectedAppsUtilities];
    uint64_t v7 = [a1[4] provider];
    unsigned __int8 v8 = [v7 bundleIdentifier];
    unsigned int v9 = [v6 shouldBlockCallWithBundleIdentifier:v8];

    if (v9)
    {
      id v10 = +[NSString stringWithFormat:@"Cannot launch app because the app is protected for dial request: %@", a1[4]];
      id v11 = sub_100008DCC();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
  }
  if (![a1[4] isValid])
  {
    id v10 = +[NSString stringWithFormat:@"Cannot launch app for invalid dial request: %@", a1[4]];
    id v11 = sub_100008DCC();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v12 = [a1[4] provider];
  unsigned __int8 v13 = [v12 isSystemProvider];

  if ((v13 & 1) == 0)
  {
    id v18 = a1[5];
    unsigned int v19 = [a1[4] provider];
    uint64_t v20 = [v19 identifier];
    [v18 _donateUserIntentForProviderWithIdentifier:v20];

    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    unint64_t v21 = [a1[5] dataSource];
    long long v22 = [v21 providerIdentifiersForExistingCalls];

    id v23 = [v22 countByEnumeratingWithState:&v51 objects:v62 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v52;
      while (2)
      {
        for (i = 0; i != v24; i = (char *)i + 1)
        {
          if (*(void *)v52 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void *)(*((void *)&v51 + 1) + 8 * i);
          uint64_t v28 = [a1[4] provider];
          id v29 = [v28 identifier];
          LODWORD(v27) = [v29 isEqualToString:v27];

          if (!v27)
          {
            int v30 = 1;
            goto LABEL_29;
          }
        }
        id v24 = [v22 countByEnumeratingWithState:&v51 objects:v62 count:16];
        if (v24) {
          continue;
        }
        break;
      }
    }
    int v30 = 0;
LABEL_29:

    unsigned __int8 v17 = +[NSMutableDictionary dictionary];
    id v31 = [a1[5] dataSource];
    unsigned int v32 = [v31 isDevicePasscodeLocked];

    uint64_t v33 = sub_100008DCC();
    BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    if ((v30 & 1) != 0 || v32)
    {
      if (v34)
      {
        long long v36 = [a1[5] dataSource];
        unsigned int v37 = [v36 isDevicePasscodeLocked];
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)uint64_t v58 = v37;
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = v30;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Device is passcode locked (%d) or existing call has different provider (%d). Indicating activity should open in background.", buf, 0xEu);
      }
      uint64_t v35 = &FBSOpenApplicationOptionKeyActivateSuspended;
    }
    else
    {
      if (v34)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Device is NOT passcode locked. Indicating activity should open in foreground.", buf, 2u);
      }
      uint64_t v35 = &FBSOpenApplicationOptionKeyUnlockDevice;
    }

    [v17 setObject:&__kCFBooleanTrue forKeyedSubscript:*v35];
    long long v38 = [a1[5] dataSource];
    long long v39 = [v38 dialAssistedDialRequestForDialRequest:a1[4]];

    long long v40 = [v39 provider];
    id v41 = [v40 bundleIdentifier];

    BOOL v42 = objc_msgSend(v39, "userActivityUsingDeprecatedCallingIntents:", objc_msgSend(a1[5], "appShouldUseDeprecatedCallingIntents:", v41));
    long long v43 = sub_100008DCC();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412802;
      *(void *)uint64_t v58 = v42;
      *(_WORD *)&v58[8] = 2112;
      uint64_t v59 = v41;
      __int16 v60 = 2112;
      id v61 = v17;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Opening user activity %@ for bundle identifier %@ with options %@", buf, 0x20u);
    }

    long long v44 = [a1[5] dataSource];
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100180820;
    v47[3] = &unk_100507E00;
    id v48 = v42;
    id v49 = v41;
    id v50 = v4;
    id v45 = v41;
    id v46 = v42;
    [v44 openUserActivity:v46 usingApplicationWithBundleIdentifier:v45 frontBoardOptions:v17 completion:v47];

    id v10 = 0;
    goto LABEL_40;
  }
  id v10 = +[NSString stringWithFormat:@"Cannot launch app for dial request with a system provider: %@", a1[4]];
  id v11 = sub_100008DCC();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
LABEL_13:
  }
    sub_1003AE954();
LABEL_14:

  if (v4)
  {
    if (v10)
    {
      uint64_t v14 = TUBundleIdentifierCallServicesDaemon;
      NSErrorUserInfoKey v55 = NSLocalizedDescriptionKey;
      uint64_t v56 = v10;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
      id v16 = +[NSError errorWithDomain:v14 code:1 userInfo:v15];
      (*((void (**)(id, void *))v4 + 2))(v4, v16);
    }
    else
    {
      (*((void (**)(id, void))v4 + 2))(v4, 0);
    }
    unsigned __int8 v17 = v4;
LABEL_40:
  }
}

void sub_100180820(void *a1, int a2, void *a3)
{
  id v5 = a3;
  char v6 = sub_100008DCC();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      int v11 = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully opened user activity %@ for bundle identifier %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_1003AE9BC((uint64_t)a1, (uint64_t)v5, v7);
  }

  uint64_t v10 = a1[6];
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v5);
  }
}

BOOL sub_100181078(id a1)
{
  return +[TUConversationManager allowsScreenSharing];
}

void sub_1001812F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100181310(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = [WeakRetained recentlyDeletedCallUUIDsByConversationUUID];
      char v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
      int v8 = 138412546;
      uint64_t v9 = v4;
      __int16 v10 = 2112;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "setting recentlyDeletedCallUUIDsByConversationUUID[%@]: %@ to nil", (uint8_t *)&v8, 0x16u);
    }
    uint64_t v7 = [WeakRetained recentlyDeletedCallUUIDsByConversationUUID];
    [v7 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
  }
}

void sub_10018273C(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, void *a6, void *a7, void *a8)
{
  id v86 = a2;
  id v12 = a6;
  id v13 = a7;
  id v14 = a8;
  uint64_t v15 = (id *)(a1 + 32);
  if ([*(id *)(a1 + 32) hasProtoUpgradeSessionUUID])
  {
    id v16 = objc_alloc((Class)NSUUID);
    unsigned __int8 v17 = [*v15 protoUpgradeSessionUUID];
    id v18 = [v16 initWithUUIDString:v17];

    if (v18) {
      goto LABEL_8;
    }
    unsigned int v19 = sub_100008DCC();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_1003AEADC((id *)(a1 + 32), v19);
    }
  }
  else
  {
    unsigned int v19 = sub_100008DCC();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = *v15;
      *(_DWORD *)long long buf = 138412290;
      id v95 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[WARN] Did not receive protoUpgradeSessionUUID part of message %@", buf, 0xCu);
    }
  }

  id v18 = 0;
LABEL_8:
  unint64_t v21 = sub_100008DCC();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 40);
    id v23 = TULoggableStringForHandle();
    [*(id *)(a1 + 48) participantDestinationID];
    id v24 = v81 = v14;
    TULoggableStringForHandle();
    uint64_t v25 = a1;
    id v26 = v13;
    v28 = id v27 = v18;
    *(_DWORD *)long long buf = 138413826;
    id v95 = v86;
    __int16 v96 = 2112;
    id v97 = v12;
    __int16 v98 = 2112;
    id v99 = v27;
    __int16 v100 = 2112;
    id v101 = v26;
    __int16 v102 = 2112;
    uint64_t v103 = v22;
    __int16 v104 = 2112;
    unsigned int v105 = v23;
    __int16 v106 = 2112;
    unint64_t v107 = v28;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Current callUUID: %@, upgradeSessionUUID: %@, conversationUpgradeSessionUUID: %@, existingHandle: %@, upgradeMessageHandle: %@, participantDestination: %@, fromDestination: %@", buf, 0x48u);

    id v14 = v81;
    id v18 = v27;
    id v13 = v26;
    a1 = v25;
  }
  id v83 = v13;

  id v29 = [*(id *)(a1 + 48) participantDestinationID];
  id v92 = 0;
  id v30 = [v29 _stripPotentialTokenURIWithToken:&v92];
  id v31 = v92;

  id v91 = 0;
  id v32 = [v14 _stripPotentialTokenURIWithToken:&v91];
  id v33 = v91;
  id v84 = v33;
  uint64_t v85 = v12;
  if (v86)
  {
    id v34 = v33;
    uint64_t v35 = [*(id *)(a1 + 56) callUUIDsByConversationUUID];
    long long v36 = [*(id *)(a1 + 64) UUID];
    uint64_t v37 = [v35 objectForKeyedSubscript:v36];
    long long v38 = (void *)v37;
    if (v12 && !v37 && v18 && v34 && v31 && ([v31 isEqualToData:v34] & 1) != 0)
    {
      unsigned int v39 = [v12 isEqual:v18];

      if (v39)
      {
        id v77 = v31;
        id v82 = v14;
        long long v40 = *(void **)(a1 + 56);
        id v41 = [*(id *)(a1 + 64) UUID];
        [v40 associateCallUUID:v86 withConversationUUID:v41 waitingToJoin:1];

        BOOL v42 = [*(id *)(a1 + 64) remoteMembers];
        long long v43 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v42 count]);

        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v44 = [*(id *)(a1 + 64) remoteMembers];
        id v45 = [v44 countByEnumeratingWithState:&v87 objects:v93 count:16];
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = *(void *)v88;
          do
          {
            for (i = 0; i != v46; i = (char *)i + 1)
            {
              if (*(void *)v88 != v47) {
                objc_enumerationMutation(v44);
              }
              id v49 = [*(id *)(*((void *)&v87 + 1) + 8 * i) handles];
              id v50 = [v49 anyObject];
              long long v51 = +[CXHandle handleWithTUHandle:v50];
              [v43 addObject:v51];
            }
            id v46 = [v44 countByEnumeratingWithState:&v87 objects:v93 count:16];
          }
          while (v46);
        }

        id v52 = [objc_alloc((Class)CXCallUpdate) initWithTUConversation:*(void *)(a1 + 64)];
        [v52 setRemoteParticipantHandles:v43];
        long long v53 = [v52 localSenderIdentityUUID];

        if (!v53)
        {
          long long v54 = [*(id *)(a1 + 56) conversationManager];
          NSErrorUserInfoKey v55 = [*(id *)(a1 + 64) initiator];
          uint64_t v56 = [v54 senderIdentityUUIDForCallerIDHandle:v55];
          [v52 setLocalSenderIdentityUUID:v56];
        }
        id v57 = [*(id *)(a1 + 56) provider];
        [v57 reportCallWithUUID:v86 updated:v52];

        uint64_t v58 = objc_alloc_init(CSDConversationJoinContext);
        [(CSDConversationJoinContext *)v58 setVideoEnabled:a4];
        [(CSDConversationJoinContext *)v58 setVideo:a5];
        if (a5) {
          uint64_t v59 = 2;
        }
        else {
          uint64_t v59 = 1;
        }
        [(CSDConversationJoinContext *)v58 setAvMode:v59];
        [(CSDConversationJoinContext *)v58 setPresentationMode:0];
        __int16 v60 = [*(id *)(a1 + 64) provider];
        [(CSDConversationJoinContext *)v58 setProvider:v60];

        id v61 = [*(id *)(a1 + 56) conversationManager];
        id v62 = [*(id *)(a1 + 64) UUID];
        [v61 joinExistingConversationWithUUID:v62 context:v58];

        long long v63 = sub_100008DCC();
        id v31 = v77;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          id v64 = [*(id *)(a1 + 64) UUID];
          *(_DWORD *)long long buf = 138412290;
          id v95 = v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Starting audio for conversation with conversationUUID %@", buf, 0xCu);
        }
        id v65 = [*(id *)(a1 + 56) conversationManager];
        id v66 = [*(id *)(a1 + 64) UUID];
        [v65 startAudioForConversationWithUUID:v66];

        id v14 = v82;
        if (a3)
        {
          id v67 = sub_100008DCC();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            id v68 = *(void **)(a1 + 64);
            *(_DWORD *)long long buf = 138412290;
            id v95 = v68;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Determined that current uplink is muted - muting conversation %@", buf, 0xCu);
          }

          char v69 = [*(id *)(a1 + 56) conversationManager];
          id v70 = [*(id *)(a1 + 64) UUID];
          [v69 setUplinkMuted:1 forConversationWithUUID:v70];
        }
        [*(id *)(a1 + 56) declineRemoteDevicesForConversation:*(void *)(a1 + 64) reason:4];

        long long v71 = v83;
LABEL_42:

        goto LABEL_43;
      }
    }
    else
    {
    }
  }
  id v72 = [*(id *)(a1 + 56) conversationManager];
  unsigned __int8 v73 = [v72 isValidLocalHandle:*(void *)(a1 + 40)];

  long long v71 = v83;
  if ((v73 & 1) == 0)
  {
    id v74 = [*(id *)(a1 + 56) conversationManager];
    long long v75 = [*(id *)(a1 + 64) remoteMembers];
    long long v76 = [*(id *)(a1 + 64) link];
    long long v43 = [v74 conversationRepresentedByRemoteMembers:v75 andLink:v76];

    if (!v43 || ![v43 state]) {
      [*(id *)(a1 + 56) reportNewIncomingCallForConversation:*(void *)(a1 + 64) fromHandle:*(void *)(a1 + 40) isReRing:0];
    }
    goto LABEL_42;
  }
LABEL_43:
}

void sub_100183DA4(uint64_t a1)
{
  id v2 = +[TUCallCenter sharedInstance];
  id v3 = [*(id *)(a1 + 32) UUIDString];
  id v5 = [v2 callWithCallUUID:v3];

  if (v5)
  {
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    [v4 postNotificationName:TUCallCenterHaveBeenLetInNotification object:v5];
  }
}

void sub_10018455C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  id v3 = [v2 conversationsByUUID];
  uint64_t v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (![*(id *)(a1 + 32) isUnansweredOutgoingOneToOneConversation:v4]) {
    goto LABEL_15;
  }
  id v5 = [*(id *)(a1 + 32) callUUIDsByConversationUUID];
  char v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  unsigned int v7 = [v6 isEqual:*(void *)(a1 + 48)];

  if (!v7) {
    goto LABEL_15;
  }
  int v8 = [*(id *)(a1 + 32) conversationUUIDsUpgradedFromAVLess];
  if (![v8 containsObject:*(void *)(a1 + 40)]
    || [*(id *)(a1 + 56) state] != (id)3)
  {
    goto LABEL_10;
  }
  uint64_t v9 = [*(id *)(a1 + 56) remoteMembers];
  if ([v9 count] != (id)1)
  {

LABEL_10:
    goto LABEL_11;
  }
  __int16 v10 = [*(id *)(a1 + 56) activeRemoteParticipants];
  if (![v10 count])
  {

LABEL_17:
    unsigned __int8 v17 = sub_100008DCC();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      int v22 = 138412290;
      uint64_t v23 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Downgrading local participant since remote participant did not upgrade before the timeout: %@", (uint8_t *)&v22, 0xCu);
    }

    unsigned int v19 = [*(id *)(a1 + 32) conversationManager];
    id v20 = [*(id *)(a1 + 56) UUID];
    [v19 updateLocalParticipantToAVLessWithPresentationMode:1 forConversationUUID:v20];

    unint64_t v21 = [*(id *)(a1 + 32) conversationUUIDsUpgradedFromAVLess];
    [v21 removeObject:*(void *)(a1 + 40)];

    goto LABEL_12;
  }
  int v11 = [*(id *)(a1 + 56) activeRemoteParticipants];
  id v12 = [v11 anyObject];
  id v13 = [v12 audioVideoMode];

  if (!v13) {
    goto LABEL_17;
  }
LABEL_11:
  [*(id *)(a1 + 32) cleanupConversationWithCallUUID:*(void *)(a1 + 48)];
LABEL_12:
  id v14 = sub_100008DCC();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    int v22 = 138412290;
    uint64_t v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ending unanswered outgoing call for conversation with UUID: %@", (uint8_t *)&v22, 0xCu);
  }

  id v16 = [*(id *)(a1 + 32) provider];
  [v16 reportCallWithUUID:*(void *)(a1 + 48) endedAtDate:0 reason:3];

LABEL_15:
}

void sub_10018A078(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = sub_100008DCC();
  int v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AF08C();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Renewed link %@ with new expiration date %@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_10018CBD4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (!a2 && WeakRetained)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Raise to ear gesture detected, answering incoming call.", v10, 2u);
    }

    [v4 setDetectingRaiseToAnswer:0];
    id v6 = +[TUCallCenter sharedInstance];
    unsigned int v7 = [v4 callCenterObserver];
    int v8 = [v7 callContainer];
    uint64_t v9 = [v8 incomingCall];
    [v6 answerCall:v9];
  }
}

void sub_10018CD10(id a1)
{
  id v1 = (void *)CUTWeakLinkClass();
  if (v1) {
    byte_10058C4B8 = [v1 isGestureServiceAvailable];
  }
}

void sub_10018D60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10018D628(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id obj = [WeakRetained callUUIDsByConversationUUID];
    id v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (!v3) {
      goto LABEL_14;
    }
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    while (1)
    {
      id v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v6);
        int v8 = [v2 conversationManager];
        uint64_t v9 = [v8 conversationsByUUID];
        int v10 = [v9 objectForKeyedSubscript:v7];

        if (v10)
        {
          id v11 = [v10 provider];
          if (([v11 isDefaultProvider] & 1) == 0)
          {
            __int16 v12 = [v10 provider];
            id v13 = [v12 bundleIdentifier];
            unsigned __int8 v14 = [v2 isProviderForeground:v13];

            if (v14) {
              goto LABEL_12;
            }
            id v11 = objc_alloc_init((Class)CXCallFailureContext);
            [v11 setFailureReason:3];
            [v2 cleanUpConversationIfNecessaryForConversationUUID:v7 failureContext:v11];
          }
        }
LABEL_12:

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (!v4)
      {
LABEL_14:

        break;
      }
    }
  }
}

void sub_10018EEA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = +[CSDRelayConferenceInterface sharedInstance];
    int v8 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10018F0BC;
    v16[3] = &unk_100507E00;
    id v17 = *(id *)(a1 + 32);
    id v18 = v5;
    id v19 = *(id *)(a1 + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10018F178;
    void v13[3] = &unk_100505C08;
    v13[4] = *(void *)(a1 + 40);
    id v14 = v18;
    id v15 = *(id *)(a1 + 32);
    [v7 startConferenceForIdentifier:v8 usingTransport:v14 remoteInviteDictionary:v6 didStartHandler:v16 didStopHandler:v13];

    uint64_t v9 = v17;
  }
  else
  {
    int v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1003AF420();
    }

    id v11 = +[CSDRelayConferenceInterface sharedInstance];
    __int16 v12 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v11 stopConferenceForIdentifier:v12];

    uint64_t v9 = +[TUCallCenter sharedInstance];
    [v9 disconnectCall:*(void *)(a1 + 32) withReason:8];
  }
}

void sub_10018F0BC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
    [*(id *)(a1 + 32) setRelayClientTransport:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }
  else
  {
    uint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AF488();
    }

    int v8 = +[TUCallCenter sharedInstance];
    [v8 disconnectCall:*(void *)(a1 + 32) withReason:8];
  }
}

id sub_10018F178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _conferenceTransport:*(void *)(a1 + 40) didStopForCall:*(void *)(a1 + 48) cleanly:a2 error:a3];
}

void sub_10018F484(id a1)
{
  if (qword_10058C4D0 != -1) {
    dispatch_once(&qword_10058C4D0, &stru_100509260);
  }
  id v1 = (void (*)(uint64_t, uint64_t))off_10058C4C8;
  uint64_t v2 = TUBundleIdentifierInCallServiceApplication;

  v1(v2, 1);
}

void sub_10018F4E8(id a1)
{
  off_10058C4C8 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_10018FAD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) cannotRelayAudioOrVideoOnPairedDevice] & 1) == 0) {
    [v3 setExpectedRelayClientDestination:*(void *)(a1 + 40)];
  }
  if (v3 && [v3 status] != 6)
  {
    uint64_t v7 = [*(id *)(a1 + 48) callStateController];
    [v7 updateClientsWithCall:v3];

    [*(id *)(a1 + 48) _launchInCallApplicationForOutgoingCallOnHostIfNecessary];
  }
  else
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003AF568((id *)(a1 + 32), v4);
    }

    id v5 = [*(id *)(a1 + 48) relayMessagingController];
    uint64_t v6 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v5 sendDialCallFailedForUniqueProxyIdentifier:v6];
  }
}

void sub_10018FBC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) relayMessagingController];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_10018FCC8;
    v8[3] = &unk_100509300;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    id v11 = *(id *)(a1 + 48);
    uint64_t v7 = [*(id *)(a1 + 40) uniqueProxyIdentifier];
    [v4 performBlockOnTransportAvailability:v8 forIdentifier:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10018FCC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10018FF18;
    v21[3] = &unk_1005092D8;
    id v22 = *(id *)(a1 + 32);
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(void **)(a1 + 48);
    id v23 = v7;
    uint64_t v24 = v8;
    id v25 = v9;
    uint64_t v10 = objc_retainBlock(v21);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1001900DC;
    v18[3] = &unk_100505C08;
    id v11 = *(void **)(a1 + 48);
    v18[4] = *(void *)(a1 + 40);
    id v19 = v11;
    id v12 = v7;
    id v20 = v12;
    id v13 = objc_retainBlock(v18);
    id v14 = +[CSDRelayConferenceInterface sharedInstance];
    [v14 startConferenceForIdentifier:*(void *)(a1 + 48) usingTransport:v12 remoteInviteDictionary:v6 didStartHandler:v10 didStopHandler:v13];

    id v15 = v22;
  }
  else
  {
    long long v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [*(id *)(a1 + 32) typeString];
      *(_DWORD *)long long buf = 138412290;
      id v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[WARN] Received %@ message, but the transport didn't become available", buf, 0xCu);
    }
    id v15 = +[CSDRelayConferenceInterface sharedInstance];
    [v15 stopConferenceForIdentifier:*(void *)(a1 + 48)];
  }
}

void sub_10018FF18(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[TUCallCenter sharedInstance];
    id v7 = [*(id *)(a1 + 32) dialRequest];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100190034;
    v12[3] = &unk_1005092B0;
    uint64_t v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void **)(a1 + 56);
    id v13 = v8;
    uint64_t v14 = v9;
    id v15 = v10;
    [v6 dialWithRequest:v7 completion:v12];

    id v11 = v13;
  }
  else
  {
    id v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003AF604(a1);
    }
  }
}

void sub_100190034(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 status] != 6)
  {
    [v4 setRelayClientTransport:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) _launchInCallApplicationForOutgoingCallOnHostIfNecessary];
  }
  else
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003AF678();
    }

    id v6 = [*(id *)(a1 + 40) relayMessagingController];
    [v6 sendDialCallFailedForUniqueProxyIdentifier:*(void *)(a1 + 48)];
  }
}

void sub_1001900DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];
  id v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v10 = 67109634;
      int v11 = a2;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for dialed call %@: %@", (uint8_t *)&v10, 0x1Cu);
    }

    [*(id *)(a1 + 32) _conferenceTransport:*(void *)(a1 + 48) didStopForCall:v6 cleanly:a2 error:v5];
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 40);
      int v10 = 67109634;
      int v11 = a2;
      __int16 v12 = 2112;
      id v13 = v9;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

void sub_100190560(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Prepared conference connection with invite dictionary: %@", buf, 0xCu);
  }

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) relayMessagingController];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100190704;
    v8[3] = &unk_100509350;
    id v6 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v6;
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    id v7 = [*(id *)(a1 + 64) uniqueProxyIdentifier];
    [v5 performBlockOnTransportAvailability:v8 forIdentifier:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_100190704(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100190974;
    v23[3] = &unk_100506B40;
    id v7 = *(void **)(a1 + 40);
    v23[4] = *(void *)(a1 + 32);
    id v24 = v7;
    id v8 = v5;
    id v25 = v8;
    id v26 = *(id *)(a1 + 48);
    id v27 = *(id *)(a1 + 56);
    id v9 = objc_retainBlock(v23);
    long long v16 = _NSConcreteStackBlock;
    uint64_t v17 = 3221225472;
    id v18 = sub_100190A90;
    id v19 = &unk_100505C08;
    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = *(id *)(a1 + 56);
    id v10 = v8;
    id v22 = v10;
    id v11 = objc_retainBlock(&v16);
    id v12 = +[CSDRelayConferenceInterface sharedInstance];
    [v12 startConferenceForIdentifier:*(void *)(a1 + 56) usingTransport:v10 remoteInviteDictionary:v6 didStartHandler:v9 didStopHandler:v11];
  }
  else
  {
    id v13 = sub_100008DCC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = [*(id *)(a1 + 64) typeString];
      *(_DWORD *)long long buf = 138412290;
      id v29 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[WARN] Received %@ message, but the transport didn't become available", buf, 0xCu);
    }
    id v15 = +[CSDRelayConferenceInterface sharedInstance];
    [v15 stopConferenceForIdentifier:*(void *)(a1 + 56)];
  }
}

void sub_100190974(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = [*(id *)(a1 + 32) callStateController];
    id v7 = [v6 performJoinConversation:*(void *)(a1 + 40)];

    if (v7 && [v7 status] != 6)
    {
      [v7 setRelayClientTransport:*(void *)(a1 + 48)];
      [v7 setExpectedRelayClientDestination:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _launchInCallApplicationForOutgoingCallOnHostIfNecessary];
    }
    else
    {
      id v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1003AF6E4();
      }

      id v9 = [*(id *)(a1 + 32) relayMessagingController];
      [v9 sendDialCallFailedForUniqueProxyIdentifier:*(void *)(a1 + 64)];
    }
  }
  else
  {
    id v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AF750(a1);
    }
  }
}

void sub_100190A90(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) callWithUniqueProxyIdentifier:*(void *)(a1 + 40)];
  id v7 = sub_100008DCC();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v10 = 67109634;
      int v11 = a2;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for joined call %@: %@", (uint8_t *)&v10, 0x1Cu);
    }

    [*(id *)(a1 + 32) _conferenceTransport:*(void *)(a1 + 48) didStopForCall:v6 cleanly:a2 error:v5];
  }
  else
  {
    if (v8)
    {
      id v9 = *(void **)(a1 + 40);
      int v10 = 67109634;
      int v11 = a2;
      __int16 v12 = 2112;
      id v13 = v9;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Conference connection stopped (cleanly=%d) for joined call uniqueProxyIdentifier %@: %@", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

void sub_100190FE0(uint64_t a1)
{
  id v5 = [objc_alloc((Class)TUAnswerRequest) initWithCall:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 40) sourceIdentifier];
  [v5 setSourceIdentifier:v2];

  objc_msgSend(v5, "setWantsHoldMusic:", objc_msgSend(*(id *)(a1 + 40), "wantsHoldMusic"));
  objc_msgSend(v5, "setPauseVideoToStart:", objc_msgSend(*(id *)(a1 + 40), "wantsHoldMusic"));
  if ([*(id *)(a1 + 32) isVideo]
    && ([*(id *)(a1 + 40) hasProtoVideo] & 1) != 0)
  {
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = 2;
  }
  [v5 setBehavior:v3];
  id v4 = +[TUCallCenter sharedInstance];
  [v4 answerWithRequest:v5];
}

BOOL sub_100191850(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  LODWORD(v2) = [v2 status];
  unsigned int v4 = [v3 status];

  return v2 != v4;
}

void sub_100191BB0(uint64_t a1)
{
  [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
  id v2 = +[TUCallCenter sharedInstance];
  [v2 endActiveAndAnswerCall:*(void *)(a1 + 32)];
}

void sub_100191D98(uint64_t a1)
{
  [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
  id v2 = +[TUCallCenter sharedInstance];
  [v2 endHeldAndAnswerCall:*(void *)(a1 + 32)];
}

void sub_100191F80(uint64_t a1)
{
  [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
  id v2 = +[TUCallCenter sharedInstance];
  [v2 holdActiveAndAnswerCall:*(void *)(a1 + 32)];
}

BOOL sub_1001922A8(id a1, TUCall *a2)
{
  id v2 = a2;
  if ([(TUCall *)v2 isHostedOnCurrentDevice]) {
    BOOL v3 = [(TUCall *)v2 hardPauseDigitsState] == 2;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_100192CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id sub_100192CD4(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100192D00(uint64_t a1)
{
}

void sub_100192D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
  id v7 = sub_100008DCC();
  BOOL v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Pushing hosted call: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setWantsHoldMusic:0];
    int v10 = [*(id *)(a1 + 40) relayMessagingController];
    int v11 = objc_msgSend(*(id *)(a1 + 32), "uniqueProxyIdentifier", _NSConcreteStackBlock, 3221225472, sub_100192EC8, &unk_1005093E8, *(void *)(a1 + 32), *(void *)(a1 + 40));
    [v10 performBlockOnTransportAvailability:&v12 forIdentifier:v11];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003AF808();
    }

    [*(id *)(a1 + 32) setEndpointOnCurrentDevice:1];
    [*(id *)(a1 + 32) setExpectedRelayClientDestination:0];
  }
}

void sub_100192EC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = +[CSDRelayConferenceInterface sharedInstance];
    BOOL v8 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1001930A4;
    void v17[3] = &unk_1005093C0;
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v5;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10019312C;
    v14[3] = &unk_100505C08;
    v14[4] = *(void *)(a1 + 40);
    id v9 = v18;
    uint64_t v10 = *(void *)(a1 + 32);
    id v15 = v9;
    uint64_t v16 = v10;
    [v7 startConferenceForIdentifier:v8 usingTransport:v9 remoteInviteDictionary:v6 didStartHandler:v17 didStopHandler:v14];
  }
  else
  {
    int v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003AF870();
    }

    [*(id *)(a1 + 32) setEndpointOnCurrentDevice:1];
    [*(id *)(a1 + 32) setExpectedRelayClientDestination:0];
    uint64_t v12 = +[CSDRelayConferenceInterface sharedInstance];
    id v13 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v12 stopConferenceForIdentifier:v13];
  }
}

id sub_1001930A4(uint64_t a1, int a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setRelayClientTransport:*(void *)(a1 + 40)];
    id v3 = *(void **)(a1 + 32);
    return [v3 setScreening:0];
  }
  else
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003AF8D8();
    }

    return [*(id *)(a1 + 32) setEndpointOnCurrentDevice:1];
  }
}

id sub_10019312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _conferenceTransport:*(void *)(a1 + 40) didStopForCall:*(void *)(a1 + 48) cleanly:a2 error:a3];
}

void *sub_1001936D0(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100193774;
  v4[3] = &unk_1005094D8;
  id v5 = a1;
  id v1 = v5;
  id v2 = objc_retainBlock(v4);

  return v2;
}

id sub_100193774(uint64_t a1, void *a2)
{
  return [a2 isEntitledForCapability:*(void *)(a1 + 32)];
}

void sub_1001946C4(uint64_t a1)
{
  id v17 = 0;
  id v2 = [[CSDSandboxExtensionDirectory alloc] initWithName:@"Ringtones" error:&v17];
  id v3 = v17;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v2;

  if (!*(void *)(*(void *)(a1 + 32) + 32))
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003AFA28((uint64_t)v3, v6, v7);
    }
  }
  BOOL v8 = objc_alloc_init(CSDCallCenterObserver);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  [*(id *)(*(void *)(a1 + 32) + 40) setTriggers:1];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "setDelegate:");
  uint64_t v11 = +[NSMutableSet set];
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 48);
  *(void *)(v12 + 48) = v11;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), *(id *)(a1 + 48));
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 16);
  *(void *)(v14 + 16) = &stru_100509520;

  +[TUCallCapabilities addDelegate:*(void *)(a1 + 32) queue:*(void *)(a1 + 56)];
  uint64_t v16 = +[NSDistributedNotificationCenter defaultCenter];
  [v16 addObserver:*(void *)(a1 + 32) selector:"handleApplicationUnregisteredNotification:" name:@"com.apple.LaunchServices.applicationUnregistered" object:0];

  [*(id *)(a1 + 32) moveExistingPreferencesToKeychain];
}

id sub_10019484C(id a1, NSString *a2)
{
  id v2 = (void *)CFPreferencesCopyAppValue((CFStringRef)a2, TUBundleIdentifierTelephonyUtilitiesFramework);

  return v2;
}

void sub_1001965A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 installedProvidersChangedForDataSource:*(void *)(a1 + 32)];
}

id sub_1001967F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setProviderIdentifiersForExistingCalls:*(void *)(a1 + 40)];
}

id sub_100196968(id a1)
{
  return a1;
}

void sub_10019698C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t sub_100196B80(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 12) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100196C44(uint64_t a1)
{
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  uint64_t v12 = sub_100196D88;
  id v13 = &unk_100504F10;
  id v2 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v2;
  dispatch_block_t v3 = dispatch_block_create((dispatch_block_flags_t)0, &v10);
  dispatch_time_t v4 = dispatch_time(0, 0x1BF08EC000);
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "queue", v10, v11, v12, v13, v14);
  dispatch_after(v4, v5, v3);

  id v6 = objc_retainBlock(v3);
  uint64_t v7 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
  [v7 setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];

  BOOL v8 = +[NSDate date];
  uint64_t v9 = [*(id *)(a1 + 32) requestStartDateByTransactionID];
  [v9 setObject:v8 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_100196D88(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setPhotoRequestFailureCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "photoRequestFailureCount") + 1);
  id v2 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
  [v2 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  dispatch_block_t v3 = [*(id *)(a1 + 32) requestStartDateByTransactionID];
  [v3 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) reportDataCollectionCompleteIfNecessary];
  dispatch_time_t v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request timed out for transaction ID: %@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_100196F44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
  dispatch_block_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3)
  {
    dispatch_time_t v4 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
    uint64_t v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 40)];
    dispatch_block_cancel(v5);

    int v6 = [*(id *)(a1 + 32) requestStartDateByTransactionID];
    id v16 = [v6 objectForKeyedSubscript:*(void *)(a1 + 40)];

    uint64_t v7 = +[NSDate date];
    [v7 timeIntervalSinceDate:v16];
    long double v9 = v8 - fmod(v8, 0.1);
    uint64_t v10 = [*(id *)(a1 + 32) photoRequestDurations];
    uint64_t v11 = +[NSNumber numberWithDouble:(double)v9];
    [v10 addObject:v11];

    objc_msgSend(*(id *)(a1 + 32), "setPhotoRequestSuccessCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "photoRequestSuccessCount") + 1);
    uint64_t v12 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
    [v12 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

    id v13 = [*(id *)(a1 + 32) requestStartDateByTransactionID];
    [v13 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) reportDataCollectionCompleteIfNecessary];
  }
  else
  {
    uint64_t v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] Received results for timed out transaction with ID %@", buf, 0xCu);
    }
  }
}

id sub_100197214(uint64_t a1)
{
  [*(id *)(a1 + 32) setHasCleanedUp:1];
  id v2 = *(void **)(a1 + 32);

  return [v2 reportDataCollectionCompleteIfNecessary];
}

void sub_1001972DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) requestTimeoutBlockByTransactionID];
  id v3 = [v2 count];

  if (!v3 && [*(id *)(a1 + 32) hasCleanedUp])
  {
    dispatch_time_t v4 = [CSDMomentsUsageReport alloc];
    id v5 = [*(id *)(a1 + 32) availability];
    id v6 = [*(id *)(a1 + 32) fuzzyPhotoRequestSuccessCount];
    id v7 = [*(id *)(a1 + 32) fuzzyPhotoRequestFailureCount];
    long double v8 = [*(id *)(a1 + 32) medianRequestDuration];
    [v8 doubleValue];
    double v10 = v9;
    [*(id *)(a1 + 32) meanRequestDuration];
    id v13 = [(CSDMomentsUsageReport *)v4 initWithAvailability:v5 photoRequestSuccessCount:v6 photoRequestFailureCount:v7 medianRequestDuration:v10 meanRequestDuration:v11];

    uint64_t v12 = [*(id *)(a1 + 32) delegate];
    [v12 momentsReportingSession:*(void *)(a1 + 32) didGenerateUsageReport:v13];
  }
}

void sub_100197938(id a1)
{
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"shouldTraceSignposts", TUBundleIdentifierTelephonyUtilitiesFramework, &keyExistsAndHasValidFormat))
  {
    BOOL v1 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v1 = 1;
  }
  char v2 = !v1;
  byte_10058C4D8 = v2;
}

void sub_100197D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100197D2C(uint64_t a1, void *a2)
{
  char v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = objc_alloc((Class)AVCSessionParticipant);
  id v6 = [v3 identifier];
  id v7 = [v3 avcData];

  long double v8 = [WeakRetained queue];
  id v9 = [v5 initWithParticipantID:v6 data:v7 delegate:WeakRetained queue:v8];

  return v9;
}

void sub_100197FE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

__CFString *sub_100198004(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  double v10 = [(id)objc_opt_class() defaultConfiguration];
  [(__CFString *)v10 setReportingHierarchyToken:v8];

  [(__CFString *)v10 setOneToOneModeEnabled:*(unsigned __int8 *)(a1 + 64)];
  double v11 = [*(id *)(a1 + 40) conversationID];
  [(__CFString *)v10 setConversationID:v11];

  uint64_t v12 = [*(id *)(a1 + 40) timebase];
  [(__CFString *)v10 setConversationTimeBase:v12];

  [(__CFString *)v10 setServiceName:*(void *)(a1 + 48)];
  id v13 = [(__CFString *)v10 abTestConfiguration];

  uint64_t v14 = sub_100008DCC();
  uint64_t v15 = v14;
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if ([*(id *)(a1 + 56) isAuthTagEnabled]) {
        CFStringRef v16 = @"YES";
      }
      else {
        CFStringRef v16 = @"NO";
      }
      if ([*(id *)(a1 + 56) isTLEEnabled]) {
        CFStringRef v17 = @"YES";
      }
      else {
        CFStringRef v17 = @"NO";
      }
      int v24 = 138412546;
      CFStringRef v25 = v16;
      __int16 v26 = 2112;
      CFStringRef v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "testConfiguration: isAuthTagEnabled: %@, isTLEEnabled: %@", (uint8_t *)&v24, 0x16u);
    }

    id v18 = [*(id *)(a1 + 56) isAuthTagEnabled];
    id v19 = [(__CFString *)v10 abTestConfiguration];
    [v19 setOneToOneAuthenticationTagEnabled:v18];

    id v20 = [*(id *)(a1 + 56) isTLEEnabled];
    uint64_t v15 = [(__CFString *)v10 abTestConfiguration];
    [v15 setGftTLEEnabled:v20];
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    sub_1003AFE04(v15);
  }

  id v21 = (__CFString *)[objc_alloc((Class)AVCSession) initWithTransportToken:v9 configuration:v10 delegate:*(void *)(a1 + 32) queue:v7];
  id v22 = sub_100008DCC();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = 138412546;
    CFStringRef v25 = v21;
    __int16 v26 = 2112;
    CFStringRef v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Created AVCSession %@ with config: %@", (uint8_t *)&v24, 0x16u);
  }

  return v21;
}

id sub_1001982BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    id v5 = [objc_alloc((Class)AVCScreenCapture) initWithDelegate:WeakRetained withConfig:v3];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

void sub_100199BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100199C14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained isOneToOneModeEnabled]) {
      unsigned int v4 = [v3 shouldDisableOneToOneModeForScreenShare] ^ 1;
    }
    else {
      unsigned int v4 = 1;
    }
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v6 = @"NO";
      if (v4) {
        CFStringRef v6 = @"YES";
      }
      int v12 = 138412290;
      CFStringRef v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Determined shouldSetScreenEnabled: %@", (uint8_t *)&v12, 0xCu);
    }

    id v7 = sub_100008DCC();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        if (*(unsigned char *)(a1 + 48)) {
          CFStringRef v9 = @"YES";
        }
        else {
          CFStringRef v9 = @"NO";
        }
        int v12 = 138412290;
        CFStringRef v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating session screenEnabled: %@", (uint8_t *)&v12, 0xCu);
      }

      uint64_t v10 = *(unsigned __int8 *)(a1 + 48);
      double v11 = [v3 session];
      [v11 setScreenEnabled:v10];

      if (*(unsigned char *)(a1 + 48)) {
        [v3 startAVCScreenCaptureWithAttributes:*(void *)(a1 + 32) preferImmediateActivation:0 screenControlEnabled:0 capturesCursor:1];
      }
    }
    else
    {
      if (v8)
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not setting screenEnabled since oneToOneModeEnabled is YES", (uint8_t *)&v12, 2u);
      }
    }
  }
}

void sub_10019A378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019A3AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setAvcScreenCapture:0];
    unsigned int v4 = [v3 captureSessionCreationBlock];
    id v5 = v4[2](v4, *(void *)(a1 + 32));
    [v3 setAvcScreenCapture:v5];

    CFStringRef v6 = [v3 avcScreenCapture];
    [v6 startCapture];

    id v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = [v3 avcScreenCapture];
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412546;
      double v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Started capture of %@ with configuration: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_10019A4F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v4 = [WeakRetained avcScreenCapture];
    id v5 = [v4 updateScreenCaptureWithConfig:*(void *)(a1 + 32)];

    CFStringRef v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v3 avcScreenCapture];
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      int v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updated capture=%@ with configuration=%@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_10019AD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019AD5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "oneToOne transition completed, re-requesting addParticipant", v4, 2u);
    }

    [WeakRetained addParticipant:*(void *)(a1 + 32) withVideoEnabled:*(unsigned __int8 *)(a1 + 48) audioPaused:*(unsigned __int8 *)(a1 + 49) screenEnabled:*(unsigned __int8 *)(a1 + 50)];
  }
}

void sub_10019B168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019B18C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(unsigned __int8 *)(a1 + 48);
      int v6 = *(unsigned __int8 *)(a1 + 49);
      int v7 = *(unsigned __int8 *)(a1 + 50);
      *(_DWORD *)long long buf = 138413058;
      uint64_t v25 = v4;
      __int16 v26 = 1024;
      int v27 = v5;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 1024;
      int v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "addParticipant: %@ videoEnabled: %d audioPaused: %d screenEnabled: %d", buf, 0x1Eu);
    }

    uint64_t v8 = [WeakRetained avcSessionParticipantCreationBlock];
    int v9 = v8[2](v8, *(void *)(a1 + 32));

    [v9 setAudioPaused:*(unsigned __int8 *)(a1 + 49)];
    [v9 setScreenEnabled:*(unsigned __int8 *)(a1 + 50)];
    uint64_t v19 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    long long v20 = _Q0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    [v9 setVideoPositionalInfo:&v19];
    uint64_t v15 = [v9 uuid];
    [*(id *)(a1 + 32) setAvcIdentifier:v15];

    CFStringRef v16 = [WeakRetained remoteParticipantsByIdentifier];
    CFStringRef v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) identifier]);
    [v16 setObject:v9 forKeyedSubscript:v17];

    id v18 = [WeakRetained session];
    [v18 addParticipant:v9];
  }
}

void sub_10019B780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019B7A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "oneToOne transition completed, re-requesting removeParticipant", v4, 2u);
    }

    [WeakRetained removeParticipant:*(void *)(a1 + 32)];
  }
}

void sub_10019F178(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v4 = sub_100008DCC();
  int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 1024;
      int v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "screenCapture: %@ didStart: %d, captureWithError: %@", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1003B0414(a1, v2, v5);
  }

  int v9 = [*(id *)(a1 + 48) delegate];
  [v9 session:*(void *)(a1 + 48) screenCaptureDidStart:*(unsigned __int8 *)(a1 + 56) withError:*(void *)(a1 + 40)];
}

void sub_10019F3FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = [*(id *)(a1 + 32) captureSessionQueue];
    id v3 = [v2 count];

    if (v3)
    {
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v4 = [*(id *)(a1 + 32) captureSessionQueue];
      id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v15;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(void *)v15 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * i);
            int v10 = sub_100008DCC();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)int v13 = 0;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "executing queued up block since capture session stop succeeded", v13, 2u);
            }

            (*(void (**)(uint64_t))(v9 + 16))(v9);
          }
          id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v6);
      }
    }
    else
    {
      [*(id *)(a1 + 32) setAvcScreenCapture:0];
    }
  }
  uint64_t v11 = [*(id *)(a1 + 32) captureSessionQueue];
  [v11 removeAllObjects];

  __int16 v12 = [*(id *)(a1 + 32) delegate];
  [v12 session:*(void *)(a1 + 32) screenCaptureDidStop:*(unsigned __int8 *)(a1 + 48) withError:*(void *)(a1 + 40)];
}

void sub_10019F748(uint64_t a1)
{
  BOOL v1 = (uint64_t *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1003B04B0(v1, v2);
    }
  }
  else
  {
    uint64_t v2 = [objc_alloc((Class)TUCallScreenShareAttributes) initWithScreenCaptureAttributes:*(void *)(a1 + 40)];
    if ([*(id *)(a1 + 40) contentType] == (id)2
      || ([*(id *)(a1 + 48) mostRecentScreenShareAttributes],
          uint64_t v4 = objc_claimAutoreleasedReturnValue(),
          unsigned int v5 = [v4 isSignificantChangeFromAttributes:v2],
          v4,
          v5))
    {
      id v6 = sub_100008DCC();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restarting capture due to change in capture content", buf, 2u);
      }

      uint64_t v7 = [*(id *)(a1 + 48) delegate];
      [v7 session:*(void *)(a1 + 48) screenShareAttributesUpdated:v2];
    }
    else
    {
      uint64_t v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not restarting capture since content attributes are similar", v8, 2u);
      }
    }
  }
}

id sub_1001A107C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateAnnounceCallsVersionForAvailableRequestTypes:a2];
}

void sub_1001A1248(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A125C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A1330;
    block[3] = &unk_100504FE0;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v9;
    dispatch_async(v6, block);
  }
}

id sub_1001A1330(uint64_t a1)
{
  return _[*(id *)(a1 + 32) assistantServicesObserver:*(void *)(a1 + 40) didChangeAnnounceCallsProviderIdentifier:*(void *)(a1 + 48)];
}

void sub_1001A1DBC(id a1)
{
  off_10058C4E8 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_1001A283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A2858(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v1 = [WeakRetained delegate];
  [v1 telephonyCallCapabilitiesChanged];
}

id sub_1001A28B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateState];
}

int64_t sub_1001A5CDC(id a1, CSDThumperAccount *a2, CSDThumperAccount *a3)
{
  uint64_t v4 = a3;
  id v5 = [(CSDThumperAccount *)a2 accountID];
  id v6 = [(CSDThumperAccount *)v4 accountID];

  int64_t v7 = TUStringsAreCaseInsensitiveEqual();
  return v7;
}

int64_t sub_1001A5D4C(id a1, CSDThumperAccount *a2, CSDThumperAccount *a3)
{
  uint64_t v4 = a3;
  id v5 = [(CSDThumperAccount *)a2 accountID];
  id v6 = [(CSDThumperAccount *)v4 accountID];

  int64_t v7 = TUStringsAreCaseInsensitiveEqual();
  return v7;
}

uint64_t sub_1001A6CA8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
        goto LABEL_22;
      case 2u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
LABEL_22:
        long long v15 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        continue;
      case 3u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              BOOL v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_54:
        *(_DWORD *)(a1 + 8) = v18;
        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_58:
        BOOL v36 = v23 != 0;
        uint64_t v37 = 32;
        goto LABEL_67;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_62:
        BOOL v36 = v28 != 0;
        uint64_t v37 = 33;
        goto LABEL_67;
      case 6u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 36) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        goto LABEL_64;
      }
      v31 += 7;
      BOOL v9 = v32++ >= 9;
      if (v9)
      {
        uint64_t v33 = 0;
        goto LABEL_66;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0;
    }
LABEL_66:
    BOOL v36 = v33 != 0;
    uint64_t v37 = 34;
LABEL_67:
    *(unsigned char *)(a1 + v37) = v36;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001A7984(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10058C4F8;
  qword_10058C4F8 = (uint64_t)v1;
}

void sub_1001A7CB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A7DB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A7EB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A80D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    lock = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
    os_unfair_lock_lock(lock);
    char v4 = *(void **)(a1 + 40);
    unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 24);
    unint64_t v6 = [v4 identifier];
    [v5 setObject:v4 forKeyedSubscript:v6];

    unint64_t v7 = [*(id *)(a1 + 32) beginListeningBlock];

    if (v7)
    {
      char v8 = [*(id *)(a1 + 32) beginListeningBlock];
      BOOL v9 = [*(id *)(a1 + 40) service];
      ((void (**)(void, void *))v8)[2](v8, v9);
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    int v10 = objc_msgSend(*(id *)(a1 + 32), "pidToCachedProviderIdentifiers", 0);
    id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v35;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v14 = *(void *)(*((void *)&v34 + 1) + 8 * i);
          long long v15 = [*(id *)(a1 + 32) pidToCachedProviderIdentifiers];
          char v16 = [v15 objectForKeyedSubscript:v14];
          unsigned int v17 = [*(id *)(a1 + 48) identifier];
          unsigned int v18 = [v16 containsObject:v17];

          if (v18)
          {
            unint64_t v19 = [*(id *)(a1 + 32) pidToProviderIdentifiers];
            char v20 = [v19 objectForKeyedSubscript:v14];
            BOOL v21 = v20 == 0;

            if (v21)
            {
              id v22 = objc_alloc_init((Class)NSMutableSet);
              uint64_t v23 = [*(id *)(a1 + 32) pidToProviderIdentifiers];
              [v23 setObject:v22 forKeyedSubscript:v14];
            }
            unint64_t v24 = [*(id *)(a1 + 32) pidToProviderIdentifiers];
            char v25 = [v24 objectForKeyedSubscript:v14];
            char v26 = [*(id *)(a1 + 48) identifier];
            id v27 = [v26 copy];
            [v25 addObject:v27];

            uint64_t v28 = [*(id *)(a1 + 32) pidToCachedProviderIdentifiers];
            unint64_t v29 = [v28 objectForKeyedSubscript:v14];
            char v30 = [*(id *)(a1 + 48) identifier];
            [v29 removeObject:v30];
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v11);
    }

    os_unfair_lock_unlock(lock);
    id v3 = v32;
  }
  char v31 = v3;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001A83EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void sub_1001A8494(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8858(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A89A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8B48(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A8B5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001A8DB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8F6C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A92B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A92D8(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = objc_alloc((Class)NSNumber);
  id v5 = [v3 pid];

  id v6 = [v4 initWithInt:v5];
  if (WeakRetained)
  {
    unint64_t v7 = [WeakRetained pidToProcessHandle];
    [v7 setObject:0 forKeyedSubscript:v6];

    char v8 = [WeakRetained pidToProviderIdentifiers];
    [v8 setObject:0 forKeyedSubscript:v6];

    BOOL v9 = [WeakRetained pidToCachedProviderIdentifiers];
    [v9 setObject:0 forKeyedSubscript:v6];
  }
}

void sub_1001A9988(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [*(id *)(a1 + 32) setLocallyHasStartedOutgoing];
    objc_msgSend(*(id *)(a1 + 32), "setInitialLinkType:", objc_msgSend(v5, "initialLinkType"));
    [*(id *)(a1 + 32) startConferenceForDialedCallWithTransport:v5 remoteInviteDictionary:v6];
  }
  else
  {
    unint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Transport did not become available when dialing call %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) stopConference];
  }
}

id sub_1001A9CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleJoinConversationResponse:a2 sessionAvailable:a3 forRelayCall:*(void *)(a1 + 40)];
}

void sub_1001A9EFC(uint64_t a1, char a2, char a3)
{
  if ((a2 & 1) == 0)
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1003B0664();
    }

    unint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = 9;
    goto LABEL_11;
  }
  if ((a3 & 1) == 0)
  {
    int v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1003B05FC();
    }

    unint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = 8;
LABEL_11:
    [v7 setLocallyDisconnectedWithReasonIfNone:v8];
    return;
  }
  if ([*(id *)(a1 + 32) isEndpointOnCurrentDevice])
  {
    id v4 = [*(id *)(a1 + 40) relayMessagingController];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_1001AA03C;
    v10[3] = &unk_1005098C8;
    id v11 = *(id *)(a1 + 32);
    id v5 = [*(id *)(a1 + 32) uniqueProxyIdentifier];
    [v4 performBlockOnTransportAvailability:v10 forIdentifier:v5];
  }
}

void sub_1001AA03C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [*(id *)(a1 + 32) setLocallyHasStartedOutgoing];
    objc_msgSend(*(id *)(a1 + 32), "setInitialLinkType:", objc_msgSend(v5, "initialLinkType"));
    [*(id *)(a1 + 32) startConferenceForDialedCallWithTransport:v5 remoteInviteDictionary:v6];
  }
  else
  {
    unint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Transport did not become available when dialing call %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) stopConference];
  }
}

void sub_1001AA2C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setInitialLinkType:", objc_msgSend(v5, "initialLinkType"));
    [*(id *)(a1 + 32) startConferenceForAnsweredCallWithTransport:v5 remoteInviteDictionary:v6];
  }
  else
  {
    unint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003B06CC();
    }

    [*(id *)(a1 + 32) setLocallyDisconnectedWithReasonIfNone:8];
    [*(id *)(a1 + 32) stopConference];
  }
}

void sub_1001AA6E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [*(id *)(a1 + 32) setLocallyHasStartedOutgoing];
    objc_msgSend(*(id *)(a1 + 32), "setInitialLinkType:", objc_msgSend(v5, "initialLinkType"));
    [*(id *)(a1 + 32) startConferenceForPulledCallWithTransport:v5 remoteInviteDictionary:v6];
  }
  else
  {
    unint64_t v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003B0734();
    }

    [*(id *)(a1 + 32) setEndpointOnCurrentDevice:0];
    [*(id *)(a1 + 32) stopConference];
  }
}

uint64_t sub_1001ACDD0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 0x40u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_132;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_134;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_132:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_134:
        uint64_t v61 = 196;
        goto LABEL_172;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 0x20u;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v14 |= (unint64_t)(v20 & 0x7F) << v17;
            if (v20 < 0)
            {
              v17 += 7;
              BOOL v9 = v18++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_138:
        uint64_t v61 = 192;
        goto LABEL_172;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 204) |= 0x200u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_142:
        BOOL v62 = v23 != 0;
        uint64_t v63 = 202;
        goto LABEL_159;
      case 4u:
        char v26 = objc_alloc_init(CSDMessagingConversationParticipant);
        [(id)a1 addActiveParticipants:v26];
        goto LABEL_88;
      case 5u:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 48;
        goto LABEL_99;
      case 6u:
        char v26 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addAddedMembers:v26];
        goto LABEL_84;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 2u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v14 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_146:
        uint64_t v61 = 56;
        goto LABEL_172;
      case 8u:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 144;
        goto LABEL_99;
      case 9u:
        char v26 = objc_alloc_init(CSDMessagingConversationActivitySession);
        [(id)a1 addActivitySessions:v26];
        goto LABEL_104;
      case 0xAu:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 128;
        goto LABEL_99;
      case 0xBu:
        char v26 = objc_alloc_init(CSDMessagingConversationLink);
        objc_storeStrong((id *)(a1 + 120), v26);
        if (!PBReaderPlaceMark() || (sub_10000D6F0((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0xCu:
        char v26 = objc_alloc_init(CSDMessagingConversationReport);
        objc_storeStrong((id *)(a1 + 160), v26);
        if (!PBReaderPlaceMark() || (sub_1000F5884((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0xDu:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(_WORD *)(a1 + 204) |= 0x100u;
        while (2)
        {
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if (v37 < 0)
            {
              v33 += 7;
              BOOL v9 = v34++ >= 9;
              if (v9)
              {
                uint64_t v35 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0;
        }
LABEL_150:
        BOOL v62 = v35 != 0;
        uint64_t v63 = 201;
        goto LABEL_159;
      case 0xEu:
        char v26 = objc_alloc_init(CSDMessagingEncryptedConversationMessage);
        objc_storeStrong((id *)(a1 + 64), v26);
        if (!PBReaderPlaceMark() || !sub_10000B390((uint64_t)v26, a2)) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0xFu:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 96;
        goto LABEL_99;
      case 0x10u:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 104;
        goto LABEL_99;
      case 0x11u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 4u;
        while (2)
        {
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 == -1 || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
            v14 |= (unint64_t)(v41 & 0x7F) << v38;
            if (v41 < 0)
            {
              v38 += 7;
              BOOL v9 = v39++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_154:
        uint64_t v61 = 60;
        goto LABEL_172;
      case 0x13u:
        char v26 = objc_alloc_init(CSDMessagingConversationInvitationPreference);
        [(id)a1 addInvitationPreferences:v26];
        if (!PBReaderPlaceMark() || !sub_10013E05C((uint64_t)v26, a2)) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0x14u:
        char v26 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addRemovedMembers:v26];
        goto LABEL_84;
      case 0x16u:
        char v26 = objc_alloc_init(CSDMessagingConversationMember);
        [(id)a1 addLightweightMembers:v26];
LABEL_84:
        if (!PBReaderPlaceMark() || (sub_1000F12B4((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0x17u:
        char v26 = objc_alloc_init(CSDMessagingConversationParticipant);
        [(id)a1 addActiveLightweightParticipants:v26];
LABEL_88:
        if (!PBReaderPlaceMark() || (sub_10001A534((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0x18u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(_WORD *)(a1 + 204) |= 0x80u;
        while (2)
        {
          unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 == -1 || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              BOOL v9 = v44++ >= 9;
              if (v9)
              {
                uint64_t v45 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v45 = 0;
        }
LABEL_158:
        BOOL v62 = v45 != 0;
        uint64_t v63 = 200;
LABEL_159:
        *(unsigned char *)(a1 + v63) = v62;
        goto LABEL_173;
      case 0x19u:
        uint64_t v27 = PBReaderReadString();
        uint64_t v28 = 72;
LABEL_99:
        id v48 = *(void **)(a1 + v28);
        *(void *)(a1 + v28) = v27;

        goto LABEL_173;
      case 0x1Au:
        char v26 = objc_alloc_init(CSDMessagingConversationJoinedMetadata);
        objc_storeStrong((id *)(a1 + 88), v26);
        if (!PBReaderPlaceMark() || (sub_100056AE4((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0x1Bu:
        char v26 = objc_alloc_init(CSDMessagingConversationActivitySession);
        objc_storeStrong((id *)(a1 + 184), v26);
LABEL_104:
        if (!PBReaderPlaceMark() || (sub_1000D204C((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_175;
        }
        goto LABEL_123;
      case 0x1Cu:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 1u;
        while (2)
        {
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 == -1 || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
            v14 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              BOOL v9 = v50++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_163:
        uint64_t v61 = 40;
        goto LABEL_172;
      case 0x1Du:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 0x10u;
        while (2)
        {
          unint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v55 == -1 || v55 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55 + 1;
            v14 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              BOOL v9 = v54++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_167:
        uint64_t v61 = 168;
        goto LABEL_172;
      case 0x1Eu:
        char v26 = objc_alloc_init(CSDMessagingScreenShareContext);
        objc_storeStrong((id *)(a1 + 176), v26);
        if PBReaderPlaceMark() && (sub_10006DF20((uint64_t)v26, a2))
        {
LABEL_123:
          PBReaderRecallMark();

LABEL_173:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_175:

        return 0;
      case 0x1Fu:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 204) |= 8u;
        while (2)
        {
          unint64_t v59 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v59 == -1 || v59 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 1;
            v14 |= (unint64_t)(v60 & 0x7F) << v57;
            if (v60 < 0)
            {
              v57 += 7;
              BOOL v9 = v58++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_171;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_171:
        uint64_t v61 = 136;
LABEL_172:
        *(_DWORD *)(a1 + v61) = v14;
        goto LABEL_173;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_173;
    }
  }
}

uint64_t sub_1001B06AC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0;
      }
LABEL_42:
      *(void *)(a1 + 8) = v19;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 20) |= 2u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001B1150(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1001B1214;
    v9[3] = &unk_100504F10;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    dispatch_async(v6, v9);
  }
}

id sub_1001B1214(uint64_t a1)
{
  return _[*(id *)(a1 + 32) providersChangedForChannelProviderManager:*(void *)(a1 + 40)];
}

id sub_1001B13E4(id a1, NSDictionary *a2)
{
  uint64_t v2 = [(NSDictionary *)a2 _stringForKey:@"uri"];
  if ([v2 _appearsToBeDSID])
  {
    id v3 = v2;
  }
  else
  {
    id v3 = [v2 _stripFZIDPrefix];
  }
  char v4 = v3;

  return v4;
}

void sub_1001B19EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "Default");
  uint64_t v2 = (void *)qword_10058C508;
  qword_10058C508 = (uint64_t)v1;
}

id sub_1001B1A30()
{
  if (qword_10058C520 != -1) {
    dispatch_once(&qword_10058C520, &stru_100509AF0);
  }
  uint64_t v0 = (void *)qword_10058C518;

  return v0;
}

void sub_1001B1A84(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "IDSMessageProxy");
  uint64_t v2 = (void *)qword_10058C518;
  qword_10058C518 = (uint64_t)v1;
}

id sub_1001B1AC8()
{
  if (qword_10058C530 != -1) {
    dispatch_once(&qword_10058C530, &stru_100509B10);
  }
  uint64_t v0 = (void *)qword_10058C528;

  return v0;
}

void sub_1001B1B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "Reporting");
  uint64_t v2 = (void *)qword_10058C528;
  qword_10058C528 = (uint64_t)v1;
}

id sub_1001B1B60()
{
  if (qword_10058C540 != -1) {
    dispatch_once(&qword_10058C540, &stru_100509B30);
  }
  uint64_t v0 = (void *)qword_10058C538;

  return v0;
}

void sub_1001B1BB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "AnsweringMachine");
  uint64_t v2 = (void *)qword_10058C538;
  qword_10058C538 = (uint64_t)v1;
}

id sub_1001B1BF8()
{
  if (qword_10058C550 != -1) {
    dispatch_once(&qword_10058C550, &stru_100509B50);
  }
  uint64_t v0 = (void *)qword_10058C548;

  return v0;
}

void sub_1001B1C4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "Audio");
  uint64_t v2 = (void *)qword_10058C548;
  qword_10058C548 = (uint64_t)v1;
}

id sub_1001B1C90()
{
  if (qword_10058C560 != -1) {
    dispatch_once(&qword_10058C560, &stru_100509B70);
  }
  uint64_t v0 = (void *)qword_10058C558;

  return v0;
}

void sub_1001B1CE4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.callservicesd", "Simulated");
  uint64_t v2 = (void *)qword_10058C558;
  qword_10058C558 = (uint64_t)v1;
}

void sub_1001B1D28(id a1)
{
  qword_10058C568 = ct_green_tea_logger_create();
}

void sub_1001B1D50(void *a1)
{
  id v1 = a1;
  if (qword_10058C570 != -1) {
    dispatch_once(&qword_10058C570, &stru_100509B90);
  }
  uint64_t v2 = getCTGreenTeaOsLogHandle();
  id v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138543618;
    CFStringRef v5 = @"MobilePhone";
    __int16 v6 = 2114;
    id v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(%{public}@) %{public}@", (uint8_t *)&v4, 0x16u);
  }
}

BOOL sub_1001B21CC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__version;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__version;
            goto LABEL_40;
          }
        }
        unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__version;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__leaveReason;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__leaveReason;
        goto LABEL_40;
      }
    }
    unsigned int v18 = &OBJC_IVAR___CSDMessagingConversationParticipantDidLeaveContext__leaveReason;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001B3520(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10058C578;
  qword_10058C578 = (uint64_t)v1;
}

void sub_1001B3698(uint64_t a1)
{
  uint64_t v2 = [CSDKeychainPasswordItem alloc];
  id v3 = +[CSDKeychainPasswordItem serviceName];
  char v4 = +[CSDKeychainPasswordItem accessGroupName];
  unsigned int v5 = [(CSDKeychainPasswordItem *)v2 initWithService:v3 account:@"lastKnownFaceTimeCallerID" accessGroup:v4];
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = v5;

  objc_initWeak(&location, *(id *)(a1 + 32));
  char v8 = [[CSDDeviceLockStateObserver alloc] initWithQueue:*(void *)(*(void *)(a1 + 32) + 24)];
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1001B37F8;
  v12[3] = &unk_100505698;
  objc_copyWeak(&v13, &location);
  [v11 performBlockAfterFirstUnlock:v12];
  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_1001B37D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B37F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _initializeLastKnownCallerID];
    id WeakRetained = v2;
  }
}

void sub_1001B3940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B3958(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B3968(uint64_t a1)
{
}

void sub_1001B3970(uint64_t a1)
{
}

void sub_1001B3A1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) faceTimeIMAccount];
  uint64_t v4 = *(void *)(a1 + 40);
  id v3 = (void *)(a1 + 40);
  if (([v2 hasAlias:v4] & 1) == 0)
  {
    unsigned int v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *v3;
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Adding %@ as an alias on account %@", (uint8_t *)&v10, 0x16u);
    }

    if (([v2 addAlias:*v3] & 1) == 0)
    {
      unint64_t v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1003B0900(v3, v2, v7);
      }
    }
  }
  char v8 = sub_100008DCC();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *v3;
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Updating display name to %@ on account %@", (uint8_t *)&v10, 0x16u);
  }

  [v2 setDisplayName:*v3];
}

void sub_1001B4444(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 40));
  if ((TUStringsAreEqualOrNil() & 1) == 0)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
      int v5 = 138412546;
      id v6 = v2;
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FaceTime caller ID changed from %@ to %@", (uint8_t *)&v5, 0x16u);
    }

    [*(id *)(a1 + 32) _saveLastKnownFaceTimeCallerID];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100509BD8);
  }
}

void sub_1001B4554(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"CSDFaceTimeIMAccountCallerIDChangedNotification" object:0];
}

id sub_1001B46DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateState];
}

void sub_1001B6024(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1001B6060(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained ctEmergencyCallbackModeStatusChangedWithUserInfo:a2];
}

void sub_1001B6CD8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003B0D30();
    }
  }
}

void sub_1001B6EBC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003B0D9C();
    }
  }
}

void sub_1001B8818(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 client:*(void *)(a1 + 32) capabilitiesDidChange:*(void *)(a1 + 40)];
}

void sub_1001B8988(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 emergencyCallbackModeDidChangeForAllSubscriptionsForClient:*(void *)(a1 + 32)];
}

void sub_1001B8AC8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

uint64_t sub_1001BA648(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    uint64_t v4 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    int v5 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    id v6 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    __int16 v7 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    uint64_t v8 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    uint64_t v9 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    int v10 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    uint64_t v11 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    __int16 v12 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    id v13 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v14 += 7;
        BOOL v19 = v15++ >= 9;
        if (v19)
        {
          unint64_t v16 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v16 = 0;
      }
LABEL_14:
      if (v20 || (v16 & 7) == 4) {
        break;
      }
      switch((v16 >> 3))
      {
        case 1u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(_WORD *)(a1 + v4[867]) |= 1u;
          while (1)
          {
            unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              goto LABEL_92;
            }
            v22 += 7;
            BOOL v19 = v23++ >= 9;
            if (v19)
            {
              LODWORD(v24) = 0;
              goto LABEL_94;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_94:
          *(_DWORD *)(a1 + v5[868]) = v24;
          continue;
        case 2u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x100u;
          while (2)
          {
            unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if (v37 < 0)
              {
                v33 += 7;
                BOOL v19 = v34++ >= 9;
                if (v19)
                {
                  uint64_t v35 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v35 = 0;
          }
LABEL_98:
          BOOL v78 = v35 != 0;
          uint64_t v79 = v6[869];
          goto LABEL_131;
        case 3u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x40u;
          while (2)
          {
            unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v41 == -1 || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if (v42 < 0)
              {
                v38 += 7;
                BOOL v19 = v39++ >= 9;
                if (v19)
                {
                  uint64_t v40 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v40 = 0;
          }
LABEL_102:
          BOOL v78 = v40 != 0;
          uint64_t v79 = v7[870];
          goto LABEL_131;
        case 4u:
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x10u;
          while (2)
          {
            unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v46 == -1 || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                BOOL v19 = v44++ >= 9;
                if (v19)
                {
                  uint64_t v45 = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v45 = 0;
          }
LABEL_106:
          BOOL v78 = v45 != 0;
          uint64_t v79 = v8[871];
          goto LABEL_131;
        case 5u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          *(_WORD *)(a1 + v4[867]) |= 2u;
          while (2)
          {
            unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v51 == -1 || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                BOOL v19 = v49++ >= 9;
                if (v19)
                {
                  uint64_t v50 = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v50 = 0;
          }
LABEL_110:
          BOOL v78 = v50 != 0;
          uint64_t v79 = v9[872];
          goto LABEL_131;
        case 6u:
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v55 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x200u;
          while (2)
          {
            unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v56 == -1 || v56 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v57 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 1;
              v55 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                BOOL v19 = v54++ >= 9;
                if (v19)
                {
                  uint64_t v55 = 0;
                  goto LABEL_114;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v55 = 0;
          }
LABEL_114:
          BOOL v78 = v55 != 0;
          uint64_t v79 = v10[873];
          goto LABEL_131;
        case 7u:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v60 = 0;
          *(_WORD *)(a1 + v4[867]) |= 8u;
          while (2)
          {
            unint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v61 == -1 || v61 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 1;
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                BOOL v19 = v59++ >= 9;
                if (v19)
                {
                  uint64_t v60 = 0;
                  goto LABEL_118;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v60 = 0;
          }
LABEL_118:
          BOOL v78 = v60 != 0;
          uint64_t v79 = v11[874];
          goto LABEL_131;
        case 8u:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0;
          *(_WORD *)(a1 + v4[867]) |= 4u;
          while (2)
          {
            unint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v66 == -1 || v66 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v67 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 1;
              v65 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                BOOL v19 = v64++ >= 9;
                if (v19)
                {
                  uint64_t v65 = 0;
                  goto LABEL_122;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v65 = 0;
          }
LABEL_122:
          BOOL v78 = v65 != 0;
          uint64_t v79 = v12[875];
          goto LABEL_131;
        case 9u:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x20u;
          while (2)
          {
            unint64_t v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v71 == -1 || v71 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v72 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71 + 1;
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                BOOL v19 = v69++ >= 9;
                if (v19)
                {
                  uint64_t v70 = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v70 = 0;
          }
LABEL_126:
          BOOL v78 = v70 != 0;
          uint64_t v79 = v13[876];
          goto LABEL_131;
        case 0xAu:
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v75 = 0;
          *(_WORD *)(a1 + v4[867]) |= 0x80u;
          break;
        default:
          uint64_t v27 = v5;
          uint64_t v28 = v6;
          char v29 = v7;
          unsigned int v30 = v4;
          unint64_t v31 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          uint64_t v8 = v31;
          uint64_t v9 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
          uint64_t v4 = v30;
          int v10 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
          __int16 v7 = v29;
          uint64_t v11 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
          id v6 = v28;
          id v13 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
          int v5 = v27;
          __int16 v12 = &OBJC_IVAR___CSDMessagingCall__protoTTYType;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        unint64_t v76 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v76 == -1 || v76 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v77 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76 + 1;
        v75 |= (unint64_t)(v77 & 0x7F) << v73;
        if ((v77 & 0x80) == 0) {
          goto LABEL_128;
        }
        v73 += 7;
        BOOL v19 = v74++ >= 9;
        if (v19)
        {
          uint64_t v75 = 0;
          goto LABEL_130;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_128:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v75 = 0;
      }
LABEL_130:
      BOOL v78 = v75 != 0;
      uint64_t v79 = 18;
LABEL_131:
      *(unsigned char *)(a1 + v79) = v78;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_1001BC168(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 56;
        goto LABEL_29;
      case 2u:
        char v14 = objc_alloc_init(CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 16), v14);
        if PBReaderPlaceMark() && (sub_1000560AC((uint64_t)v14, a2))
        {
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 32;
        goto LABEL_29;
      case 4u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 48;
        goto LABEL_29;
      case 5u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
        goto LABEL_29;
      case 6u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 40;
        goto LABEL_29;
      case 7u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
LABEL_29:
        char v14 = *(CSDMessagingHandle **)(a1 + v13);
        *(void *)(a1 + v13) = v12;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
    }
  }
}

void sub_1001BCE5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = +[IMLockdownManager sharedInstance];
  unsigned int v14 = [v13 isInternalInstall];

  if (v14)
  {
    unsigned int v15 = [*(id *)(a1 + 32) signatureWithDomain:@"FaceTime" type:v9 subType:v10 subtypeContext:v11 detectedProcess:@"callservicesd" triggerThresholdValues:0];
    unint64_t v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412546;
      char v18 = v15;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Capturing snapshot for signature %@ and payload %@", (uint8_t *)&v17, 0x16u);
    }

    [*(id *)(a1 + 32) snapshotWithSignature:v15 duration:0 event:v12 payload:&stru_100509C40 reply:0.0];
  }
}

void sub_1001BCFD8(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [(NSDictionary *)v2 objectForKeyedSubscript:kSymptomDiagnosticReplySuccess];
  unsigned __int8 v4 = [v3 BOOLValue];

  unsigned int v5 = sub_100008DCC();
  unint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      char v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Captured snapshot: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1003B10F0((uint64_t)v2, v6);
  }
}

void sub_1001BE320(uint64_t a1)
{
  id v1 = [[CSDReportingController alloc] initWithQueue:*(void *)(a1 + 32)];
  id v2 = (void *)qword_10058C588;
  qword_10058C588 = (uint64_t)v1;
}

void sub_1001BE600(id a1, CSDClient *a2)
{
  id v2 = a2;
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    unsigned int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001BE6AC(id a1, CSDClient *a2)
{
  id v2 = a2;
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    unsigned int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC connection invalidated from client %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001BE758(uint64_t a1)
{
  id v3 = +[TUCallCenter sharedInstance];
  id v2 = [v3 conversationManager];
  [v2 addDelegate:*(void *)(a1 + 32) queue:*(void *)(a1 + 40)];
}

void sub_1001BE9D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    unint64_t v16 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Call screening changed for call: %@", buf, 0xCu);
  }

  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  int v4 = objc_msgSend(*(id *)(a1 + 40), "reporters", 0);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      char v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          [v9 reportingController:*(void *)(a1 + 40) screeningChangedForCall:v2];
        }
        char v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_1001BEC14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  id v3 = sub_100008DCC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    char v18 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Call status changed for call: %@", buf, 0xCu);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v4 = objc_msgSend(*(id *)(a1 + 40), "reporters", 0);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      char v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = *(void *)(a1 + 40);
          long long v11 = +[TUCallCenter sharedInstance];
          objc_msgSend(v9, "reportingController:statusChangedForCall:totalCallCount:", v10, v2, objc_msgSend(v11, "currentAudioAndVideoCallCount"));
        }
        char v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_1001BEE78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = objc_msgSend(*(id *)(a1 + 40), "reporters", 0);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        if (objc_opt_respondsToSelector()) {
          [v8 reportingController:*(void *)(a1 + 40) recordingEndedForSession:v2];
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_1001C0044(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    int v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "call: %@", buf, 0xCu);
  }

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [*(id *)(a1 + 40) reporters];
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        long long v10 = sub_100008DCC();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          int v17 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "reporter: %@", buf, 0xCu);
        }

        if (objc_opt_respondsToSelector()) {
          [v9 reportingController:*(void *)(a1 + 40) createOneToOneFTReportingSessionForCallWithUUID:*(void *)(a1 + 32) withReportingHierarchyToken:*(void *)(a1 + 48) withVideo:*(unsigned __int8 *)(a1 + 56)];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_1001C02DC(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    int v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "createConversationReportingSession using conversation: %@", buf, 0xCu);
  }

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [*(id *)(a1 + 40) reporters];
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        long long v10 = sub_100008DCC();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          int v17 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "reporter: %@", buf, 0xCu);
        }

        if (objc_opt_respondsToSelector()) {
          [v9 reportingController:*(void *)(a1 + 40) createConversationReportingSessionForConversation:*(void *)(a1 + 32)];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_1001C3BB4(uint64_t a1)
{
  [*(id *)(a1 + 32) updateEnabled];
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleAXSVoiceOverTouchEnabledNotification:" name:kAXSVoiceOverTouchEnabledNotification object:0];
}

void sub_1001C3D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C3D70(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

id sub_1001C3F5C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) voiceOverObserver:*(void *)(a1 + 40) didChangeEnabled:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1001C4198(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_1001C4280(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_1001C43EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateEnabled];
}

void sub_1001C4578(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001C4600(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001C4718(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C472C(uint64_t a1, void *a2)
{
  return [a2 containsOutgoingRestrictedHandle:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40) performSynchronously:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1001C480C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C4820(uint64_t a1, void *a2)
{
  return _[a2 containsRecentsRestrictedHandle:*(void *)(a1 + 32)];
}

void sub_1001C48FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C4910(uint64_t a1, void *a2)
{
  return _[a2 containsRestrictedHandle:*(void *)(a1 + 32)];
}

void sub_1001C4A68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001C4BAC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C4BC0(void *a1, void *a2)
{
  return [a2 isUnknownAddress:a1[4] normalizedAddress:a1[5] forBundleIdentifier:a1[6]];
}

void sub_1001C4CA0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C4CB4(uint64_t a1, void *a2)
{
  return [a2 isUnknownCaller:*(void *)(a1 + 32)];
}

void sub_1001C4E9C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C4EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && [v3 shouldFilterIncomingCall:*(void *)(a1 + 32) from:*(void *)(a1 + 40)])
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) UUID];
      int v8 = 138412546;
      id v9 = v3;
      __int16 v10 = 2112;
      long long v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ reported blocked call with UUID %@", (uint8_t *)&v8, 0x16u);
    }
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

BOOL sub_1001C4FC4(id a1, CSDCallFilter *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t sub_1001C5010(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([v3 shouldFilterIncomingCall:*(void *)(a1 + 32) from:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [*(id *)(a1 + 32) UUID];
      int v8 = 138412546;
      id v9 = v3;
      __int16 v10 = 2112;
      long long v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@ reported known call update with UUID %@", (uint8_t *)&v8, 0x16u);
    }
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1001C5228(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C523C(uint64_t a1, void *a2)
{
  return [a2 shouldRestrictAddresses:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40) performSynchronously:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1001C5348(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001C535C(uint64_t a1, void *a2)
{
  return [a2 willRestrictAddresses:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_1001C5960(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_41;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 24) = v14;
        goto LABEL_48;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_47:
        *(unsigned char *)(a1 + 28) = v20 != 0;
        goto LABEL_48;
      case 3u:
        unsigned int v23 = objc_alloc_init(CSDMessagingConversationLinkGeneratorDescriptor);
        [(id)a1 addGeneratorDescriptors:v23];
        if (!PBReaderPlaceMark() || (sub_100146304((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_39;
      case 4u:
        unsigned int v23 = objc_alloc_init(CSDMessagingLinkSyncCheckInGeneratorDescriptorInfo);
        [(id)a1 addGenerateDescriptorInfos:v23];
        if PBReaderPlaceMark() && (sub_1001B06AC((uint64_t)v23, a2))
        {
LABEL_39:
          PBReaderRecallMark();

LABEL_48:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_50:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_48;
    }
  }
}

void sub_1001C6B5C(uint64_t a1)
{
  +[NSPredicate predicateWithFormat:@"outgoingLocalParticipantUUID == %@", *(void *)(a1 + 32)];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 40) chManager];
  [v2 setOutgoingLocalParticipantUUID:*(void *)(a1 + 48) forRecentCallsMatchingPredicate:v3];
}

void sub_1001C6CC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001C6DAC;
    block[3] = &unk_1005055D0;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    BOOL v9 = *(void **)(a1 + 40);
    id v13 = v7;
    uint64_t v14 = v8;
    id v15 = v9;
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    id v16 = v10;
    uint64_t v17 = v11;
    dispatch_async(v6, block);
  }
}

id sub_1001C6DAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) callHistoryManager:*(void *)(a1 + 40) recentCallRequestedFor:*(void *)(a1 + 48) withStartDate:*(void *)(a1 + 56) avMode:*(void *)(a1 + 64)];
}

void sub_1001C6EFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1001C6FC0;
    v9[3] = &unk_100504F10;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    dispatch_async(v6, v9);
  }
}

id sub_1001C6FC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recentCallsDidChangeForCallHistoryManager:*(void *)(a1 + 40)];
}

void sub_1001C7468(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v12 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    unint64_t v6 = [v5 URI];
    id v7 = [v6 prefixedURI];
    uint64_t v8 = +[TUHandle normalizedHandleWithDestinationID:v7];

    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = [v12 properties];
    uint64_t v11 = [v10 expirationDate];
    (*(void (**)(uint64_t, void *, void *, void))(v9 + 16))(v9, v8, v11, 0);
  }
}

uint64_t sub_1001C7658(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C7C44(uint64_t a1)
{
  [*(id *)(a1 + 32) _update];
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 64);
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ initialized for service %@ with the following devices: %@", (uint8_t *)&v6, 0x20u);
  }
}

void sub_1001C8C50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  int v6 = [a2 normalizedValue];
  id v8 = +[IDSURI URIWithPrefixedURI:v6];

  id v7 = [objc_alloc((Class)IDSFirewallEntry) initWithURI:v8 andLastSeenDate:v5];
  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_1001C9110(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100008DCC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adding firewall entries1 %@", buf, 0xCu);
  }

  uint64_t v9 = sub_100008DCC();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v10)
    {
      *(_DWORD *)long long buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to retrieve firewall with error: %@", buf, 0xCu);
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      id v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Adding firewall entries2 %@", buf, 0xCu);
    }

    id v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001C92DC;
    void v13[3] = &unk_100506100;
    uint64_t v14 = v12;
    [v5 donateEntries:v14 withCompletion:v13];
    uint64_t v9 = v14;
  }
}

void sub_1001C92DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to add firewall entries: %@ to firewall with error: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1001C9474(id a1, IDSFirewall *a2, NSError *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = v4;
  if (!a2 || v4)
  {
    int v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      __int16 v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to retrieve firewall with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    [(IDSFirewall *)a2 removeAllEntries:&stru_10050A200];
  }
}

void sub_1001C9540(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to remove all firewall entries with error: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1001C9754(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v18 = a3;
  uint64_t v20 = +[NSMutableArray array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v24;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v5);
        }
        BOOL v10 = [*(id *)(*((void *)&v23 + 1) + 8 * i) normalizedValue];
        uint64_t v11 = +[IDSURI URIWithUnprefixedURI:v10];

        id v12 = objc_alloc((Class)IDSFirewallEntry);
        id v13 = +[NSDate date];
        id v14 = [v12 initWithURI:v11 andLastSeenDate:v13];

        if (v14) {
          [v20 addObject:v14];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
    }
    while (v7);
  }

  id v15 = sub_100008DCC();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v28 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Removing firewall entries: %@", buf, 0xCu);
  }

  if (!v19 || v18)
  {
    uint64_t v17 = sub_100008DCC();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Failed to retrieve firewall with error: %@", buf, 0xCu);
    }
  }
  else
  {
    id v16 = [v20 copy];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001C9A28;
    v21[3] = &unk_100506100;
    char v22 = v20;
    [v19 removeEntries:v16 withCompletion:v21];

    uint64_t v17 = v22;
  }
}

void sub_1001C9A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to remove firewall entries: %@ to firewall with error: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1001C9BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C9C10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001C9C20(uint64_t a1)
{
}

void sub_1001C9C28(uint64_t a1)
{
}

void sub_1001CA3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CA414(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_1001CA4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CA500(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

void sub_1001CA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001CA698(uint64_t a1)
{
}

void sub_1001CA7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001CA7C8(uint64_t a1)
{
}

void sub_1001CA8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001CA8F8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[9];
  if (!v3)
  {
    [v2 _update];
    id v3 = *(void **)(*(void *)(a1 + 32) + 72);
  }
  int v4 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v4, v3);
}

void sub_1001CADB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = sub_100008DCC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[WARN] IDS failed to retrieve pseudonym with error %@", (uint8_t *)&v7, 0xCu);
    }

    int v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    int v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v6();
}

void sub_1001CB374(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = *(void (**)(uint64_t, void, void, uint64_t))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5, 0, 0, a3);
  }
  else
  {
    id v7 = [a2 properties];
    int v6 = [v7 expirationDate];
    (*(void (**)(uint64_t, uint64_t, void *, void))(v3 + 16))(v3, 1, v6, 0);
  }
}

uint64_t sub_1001CB584(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 == 1);
}

uint64_t sub_1001CB7F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001CBDBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_1001CC330(id a1)
{
  CFPropertyListRef v1 = CFPreferencesCopyAppValue(@"pairedDeviceUniqueIDOverride", TUBundleIdentifierTelephonyUtilitiesFramework);
  id v2 = (void *)qword_10058C598;
  qword_10058C598 = (uint64_t)v1;
}

void sub_1001CCB28(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  if (a3)
  {
    id v5 = a3;
    int v6 = [[CSDMessagingRelayMessage alloc] initWithData:v5];

    id v7 = [(CSDMessagingRelayMessage *)v6 inviteData];
    a3 = [v7 relayInviteDictionary];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001CED6C(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, 1);
  }
  return result;
}

void sub_1001D0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D01A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001D01B4(uint64_t a1)
{
}

void sub_1001D01BC(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "... but we were told to ignore the invite", v5, 2u);
    }
  }
  else
  {
    id v4 = *(NSObject **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001D0310;
    block[3] = &unk_10050A2E8;
    objc_copyWeak(&v12, (id *)(a1 + 80));
    id v7 = *(id *)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 64);
    dispatch_async(v4, block);

    objc_destroyWeak(&v12);
  }
}

void sub_1001D0310(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    uint64_t v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "... so we are going to handle the session's message", v12, 2u);
    }

    id v4 = [*(id *)(a1 + 32) identifiersForSessionInvitationWithMessage:*(void *)(a1 + 40)];
    id v5 = [CSDIDSDualSessionProvider alloc];
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = +[TUCallCenter sharedInstance];
    id v8 = [v7 queue];
    id v9 = [(CSDIDSDualSessionProvider *)v5 initWithSession:v6 queue:v8];

    id v10 = -[CSDRelayIDSDualSession initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:]([CSDRelayIDSDualSession alloc], "initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:", v9, *(void *)(a1 + 56), *(void *)(a1 + 64), [*(id *)(a1 + 40) protocolVersion], v4);
    objc_msgSend(v10, "setInvitationTimeout:", (double)(uint64_t)objc_msgSend(*(id *)(a1 + 32), "timeoutForInvitationWithMessage:", *(void *)(a1 + 40)));
    [v10 setDelegate:WeakRetained];
    id v11 = [WeakRetained sessions];
    [v11 addObject:v10];

    [*(id *)(a1 + 32) messenger:WeakRetained handledMessage:*(void *)(a1 + 40) fromDestination:*(void *)(a1 + 56) device:*(void *)(a1 + 64)];
  }
}

void sub_1001D0F48(id *a1)
{
  uint64_t v2 = +[FTServerBag sharedInstance];
  uint64_t v3 = a1[4];
  id v4 = (void *)v3[11];
  v3[11] = v2;

  id v5 = objc_alloc_init((Class)TUFeatureFlags);
  uint64_t v6 = a1[4];
  id v7 = (void *)v6[7];
  v6[7] = v5;

  id v8 = a1[4];
  id v9 = (void *)v8[12];
  v8[12] = &stru_10050A368;

  objc_storeStrong((id *)a1[4] + 2, a1[5]);
  objc_msgSend(*((id *)a1[4] + 2), "setDelegate:");
  objc_storeStrong((id *)a1[4] + 3, a1[6]);
  uint64_t v10 = +[NSMutableDictionary dictionary];
  id v11 = a1[4];
  id v12 = (void *)v11[4];
  void v11[4] = v10;

  uint64_t v13 = +[NSMapTable strongToStrongObjectsMapTable];
  id v14 = a1[4];
  id v15 = (void *)v14[5];
  void v14[5] = v13;

  objc_storeStrong((id *)a1[4] + 6, a1[7]);
  id v16 = [[CSDClientManager alloc] initWithSerialQueue:*((void *)a1[4] + 8)];
  uint64_t v17 = a1[4];
  id v18 = (void *)v17[10];
  v17[10] = v16;

  id v19 = [a1[4] clientManager];
  [v19 setRequiredConnectionCapability:@"access-moments"];

  uint64_t v20 = +[TUMomentsControllerXPCClient momentsControllerClientXPCInterface];
  unint64_t v21 = [a1[4] clientManager];
  [v21 setRemoteObjectInterface:v20];

  char v22 = +[TUMomentsControllerXPCClient momentsControllerServerXPCInterface];
  long long v23 = [a1[4] clientManager];
  [v23 setExportedInterface:v22];

  id v24 = a1[4];
  long long v25 = [v24 clientManager];
  [v25 setExportedObject:v24];

  objc_initWeak(&location, a1[4]);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1001D1394;
  v32[3] = &unk_100505E78;
  objc_copyWeak(&v33, &location);
  long long v26 = [a1[4] clientManager];
  [v26 setInterruptionHandler:v32];

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1001D1464;
  v30[3] = &unk_100505E78;
  objc_copyWeak(&v31, &location);
  uint64_t v27 = [a1[4] clientManager];
  [v27 setInvalidationHandler:v30];

  id v28 = [a1[4] clientManager];
  char v29 = [v28 asynchronousExportedObjectProxy];
  +[TUMomentsControllerXPCClient setAsynchronousServer:v29];

  objc_destroyWeak(&v31);
  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);
}

void sub_1001D124C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

CSDAVCMoments *__cdecl sub_1001D127C(id a1, int64_t a2, NSString *a3, CSDAVCMomentsDelegate *a4, OS_dispatch_queue *a5)
{
  id v8 = a5;
  id v9 = a4;
  uint64_t v10 = a3;
  id v11 = sub_100008DCC();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    int64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "videoStreamToken: %ld", (uint8_t *)&v14, 0xCu);
  }

  id v12 = [[_TtC13callservicesd13CSDAVCMoments alloc] initWithStreamToken:a2 requesterID:v10 delegate:v9 dispatchQueue:v8];

  return (CSDAVCMoments *)v12;
}

void sub_1001D1394(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Moments XPC connection interrupted from client %@", (uint8_t *)&v6, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleClientDisconnected:v3];
}

void sub_1001D1464(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Moments XPC connection invalidated from client %@", (uint8_t *)&v6, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleClientDisconnected:v3];
}

void sub_1001D1890(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)uint64_t v35 = v3;
    *(_WORD *)&v35[4] = 2048;
    *(void *)&v35[6] = v4;
    *(_WORD *)&v35[14] = 1024;
    *(_DWORD *)&v35[16] = TUAllowLocalVideoRecording();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mediaType: %d, token: %ld localVideoRecordingEnabled: %d", buf, 0x18u);
  }

  id v5 = [*(id *)(a1 + 32) serverBag];
  if ([v5 isMomentsDisabled])
  {

    goto LABEL_19;
  }
  unsigned int v6 = [(id)objc_opt_class() isFaceTimePhotosAvailable];

  if (!v6)
  {
LABEL_19:
    uint64_t v10 = +[NSString stringWithFormat:@"Asked to start moments request but moments is disabled by server bag"];
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    uint64_t v27 = v10;
    unint64_t v21 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    id v18 = +[NSError errorWithDomain:@"com.apple.callservicesdaemon.csdmomentscontroller" code:1 userInfo:v21];

    id v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003AE954();
    }
LABEL_21:
    int64_t v15 = 0;
    goto LABEL_22;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 64) - 1;
  if (v7 > 2)
  {
    uint64_t v10 = +[NSString stringWithFormat:@"Asked to start moments request with invalid media type %d", *(unsigned int *)(a1 + 64)];
    NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
    char v29 = v10;
    char v22 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    id v18 = +[NSError errorWithDomain:@"com.apple.callservicesdaemon.csdmomentscontroller" code:1 userInfo:v22];

    id v11 = sub_100008DCC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1003AE954();
    }
    goto LABEL_21;
  }
  id v8 = [*(id *)(a1 + 32) sessionsByToken];
  id v9 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  uint64_t v10 = [v8 objectForKeyedSubscript:v9];

  if (v10)
  {
    id v11 = [v10 moments];
    if (TUAllowLocalVideoRecording()) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = 2;
    }
    uint64_t v13 = [v11 newRequestWithMediaType:(v7 + 1) mode:v12 requesteeID:*(void *)(a1 + 40)];
    int v14 = v13;
    if (v13)
    {
      int64_t v15 = [v13 transactionID];
      id v16 = [[CSDMomentsRequest alloc] initWithAVCRequest:v14 session:v10];
      [v10 setActiveRequest:v16 forTransactionID:v15];
      if ((TUAllowLocalVideoRecording() & 1) == 0) {
        [*(id *)(a1 + 32) _startTimeoutForMomentsRequestWithTransactionID:v15];
      }
      id v25 = 0;
      unsigned int v17 = [v14 startWithError:&v25];
      id v18 = v25;
      id v19 = sub_100008DCC();
      uint64_t v20 = v19;
      if (v17)
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)uint64_t v35 = v14;
          *(_WORD *)&v35[8] = 2112;
          *(void *)&v35[10] = v15;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully started AVCMomentsRequest: %@, transactionID %@", buf, 0x16u);
        }

        uint64_t v20 = [*(id *)(a1 + 32) delegate];
        if (objc_opt_respondsToSelector()) {
          [v20 momentsController:*(void *)(a1 + 32) didStartRequestForStream:*(void *)(a1 + 56) withTransactionID:v15];
        }
      }
      else if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        sub_1003B12F0();
      }
    }
    else
    {
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Could not start request for mediaType: %d streamToken: %ld. -[AVCMoments newRequestWithMediaType:] returned nil.", *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
      id v16 = (CSDMomentsRequest *)objc_claimAutoreleasedReturnValue();
      NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
      id v33 = v16;
      id v24 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      id v18 = +[NSError errorWithDomain:@"com.apple.callservicesdaemon.csdmomentscontroller" code:1 userInfo:v24];

      uint64_t v20 = sub_100008DCC();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1003B1288();
      }
      int64_t v15 = 0;
    }
  }
  else
  {
    id v11 = +[NSString stringWithFormat:@"Could not start request for mediaType: %d streamToken: %ld. No session has been registered for requested stream token.", *(unsigned int *)(a1 + 64), *(void *)(a1 + 56)];
    NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
    id v31 = v11;
    long long v23 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v18 = +[NSError errorWithDomain:@"com.apple.callservicesdaemon.csdmomentscontroller" code:1 userInfo:v23];

    int v14 = sub_100008DCC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)uint64_t v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[WARN] %@", buf, 0xCu);
    }
    int64_t v15 = 0;
  }

LABEL_22:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001D1F9C(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    id v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "transactionID: %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) sessionForTransactionID:*(void *)(a1 + 32)];
  id v5 = [v4 activeRequestsByTransactionID];
  unsigned int v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v6)
  {
    unsigned int v7 = [v6 avcRequest];
    id v14 = 0;
    unsigned int v8 = [v7 endWithError:&v14];
    id v9 = v14;

    uint64_t v10 = sub_100008DCC();
    id v11 = v10;
    if (v8)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully ended request %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_1003B1358();
    }
  }
  else
  {
    id v11 = +[NSString stringWithFormat:@"Could not find request for transaction ID %@", *(void *)(a1 + 32)];
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    id v16 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    id v9 = +[NSError errorWithDomain:@"com.apple.callservicesdaemon.csdmomentscontroller" code:1 userInfo:v12];

    uint64_t v13 = sub_100008DCC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1003AE954();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001D236C(uint64_t a1)
{
  uint64_t v2 = (uint64_t)[*(id *)(a1 + 32) availabilityWithRemoteAvailable:*(unsigned __int8 *)(a1 + 80)];
  int v3 = +[NSSet set];
  uint64_t v4 = [*(id *)(a1 + 32) sessionsByToken];
  id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  unsigned int v6 = [v4 objectForKeyedSubscript:v5];

  if (v6)
  {
    unsigned int v7 = [v6 moments];
    unsigned int v8 = sub_1001D2918((char)[v7 capabilities]);

    [v6 setRemoteIDSDestinations:*(void *)(a1 + 40)];
    id v9 = sub_100008DCC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(NSObject **)(a1 + 72);
      int v37 = 138412546;
      char v38 = v6;
      __int16 v39 = 2048;
      uint64_t v40 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updating remoteIDSDestinations and returning registered session: %@ for streamToken: %ld", (uint8_t *)&v37, 0x16u);
    }
    goto LABEL_28;
  }
  if (v2 == 3)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = sub_100008DCC();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        id v14 = *(NSObject **)(a1 + 72);
        uint64_t v16 = *(void *)(a1 + 40);
        NSErrorUserInfoKey v15 = *(NSObject **)(a1 + 48);
        int v37 = 134218498;
        char v38 = v14;
        __int16 v39 = 2112;
        uint64_t v40 = v15;
        __int16 v41 = 2112;
        uint64_t v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Registering stream token %ld, requesterID %@ and remoteIDSDestinations %@ with new moments object", (uint8_t *)&v37, 0x20u);
      }

      unsigned int v17 = [*(id *)(a1 + 32) momentsGenerator];
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void **)(a1 + 32);
      unint64_t v21 = [v20 queue];
      uint64_t v12 = ((void (**)(void, uint64_t, uint64_t, void *, void *))v17)[2](v17, v18, v19, v20, v21);

      unsigned int v8 = sub_1001D2918((char)[v12 capabilities]);

      char v22 = sub_100008DCC();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 138412546;
        char v38 = v12;
        __int16 v39 = 2112;
        uint64_t v40 = v8;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Registered new moments object %@ with supported media types: %@", (uint8_t *)&v37, 0x16u);
      }

      if ([v8 count] || TUAllowLocalVideoRecording())
      {
        long long v23 = [CSDMomentsControllerSession alloc];
        if (TUAllowLocalVideoRecording()) {
          id v24 = &__NSDictionary0__struct;
        }
        else {
          id v24 = *(void **)(a1 + 40);
        }
        id v25 = [*(id *)(a1 + 32) callCenterObserver];
        NSErrorUserInfoKey v26 = [(CSDMomentsControllerSession *)v23 initWithMoments:v12 remoteIDSDestinations:v24 callCenterObserver:v25];

        uint64_t v27 = [*(id *)(a1 + 32) sessionsByToken];
        NSErrorUserInfoKey v28 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
        [v27 setObject:v26 forKeyedSubscript:v28];

        char v29 = [*(id *)(a1 + 32) streamTokensByCSDClient];
        NSErrorUserInfoKey v30 = [v29 objectForKey:*(void *)(a1 + 56)];

        id v31 = [*(id *)(a1 + 32) streamTokensByCSDClient];
        NSErrorUserInfoKey v32 = v31;
        if (v30)
        {
          id v33 = [v31 objectForKey:*(void *)(a1 + 56)];
          unsigned int v34 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
          [v33 addObject:v34];
        }
        else
        {
          id v33 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
          unsigned int v34 = +[NSMutableArray arrayWithObject:v33];
          [v32 setObject:v34 forKey:*(void *)(a1 + 56)];
        }
      }
      else
      {
        NSErrorUserInfoKey v26 = sub_100008DCC();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = *(void *)(a1 + 72);
          int v37 = 138412802;
          char v38 = v8;
          __int16 v39 = 2112;
          uint64_t v40 = v12;
          __int16 v41 = 2048;
          uint64_t v42 = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "unexpected supportedMediaTypes: %@, moments: %@, streamToken: %ld", (uint8_t *)&v37, 0x20u);
        }
      }

      uint64_t v2 = 3;
      goto LABEL_26;
    }
    if (v13)
    {
      int v37 = 67109120;
      LODWORD(v38) = 3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[WARN] FaceTime Photos availability is %d but remoteIDSDestination is nil so changing availability to Unavailabile", (uint8_t *)&v37, 8u);
    }
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v12 = sub_100008DCC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v37 = 67109120;
      LODWORD(v38) = v2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FaceTime Photos is not available. Availability is %d", (uint8_t *)&v37, 8u);
    }
  }
  unsigned int v8 = v3;
LABEL_26:

  id v9 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v9 momentsController:*(void *)(a1 + 32) registeredStream:*(void *)(a1 + 72) withAvailability:v2];
  }
LABEL_28:

  id v35 = [objc_alloc((Class)TUMomentsCapabilities) initWithAvailability:v2 supportedMediaTypes:v8];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

id sub_1001D2918(char a1)
{
  uint64_t v2 = +[NSMutableSet set];
  int v3 = v2;
  if (a1)
  {
    [v2 addObject:&off_100523BC0];
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:&off_100523BD8];
  if ((a1 & 2) != 0) {
LABEL_4:
  }
    [v3 addObject:&off_100523BF0];
LABEL_5:
  id v4 = [v3 copy];

  return v4;
}

void sub_1001D2ACC(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    int v8 = 134217984;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked to unregister stream token: %ld", (uint8_t *)&v8, 0xCu);
  }

  id v4 = [*(id *)(a1 + 32) streamTokensByCSDClient];
  id v5 = [v4 objectForKey:*(void *)(a1 + 40)];

  unsigned int v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  [v5 removeObject:v6];

  if (![v5 count])
  {
    unsigned int v7 = [*(id *)(a1 + 32) streamTokensByCSDClient];
    [v7 removeObjectForKey:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 32) unregisterStreamToken:*(void *)(a1 + 56)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001D2CC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_1001D2DD0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientManager];
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_1001D3190(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a3;
  objc_msgSend(v5, "didUpdateCapabilities:forVideoStreamToken:", v3, objc_msgSend(v4, "streamToken"));
}

void sub_1001D34C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = [v3 requesterID];
  [v4 willCaptureRemoteRequestFromRequesterID:v5];
}

void sub_1001D40E4(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    int v5 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138413058;
    char v57 = v3;
    __int16 v58 = 2112;
    id v59 = v4;
    __int16 v60 = 1024;
    *(_DWORD *)unint64_t v61 = v5;
    *(_WORD *)&v61[4] = 2112;
    *(void *)&v61[6] = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "url: %@ metadata: %@ isZipped: %d fromIDSDestination: %@", buf, 0x26u);
  }

  unsigned int v7 = (id *)(a1 + 56);
  int v8 = [*(id *)(a1 + 56) serverBag];
  if ([v8 isMomentsDisabled])
  {

LABEL_17:
    uint64_t v27 = sub_100008DCC();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_1003B1908(v27, v28, v29, v30, v31, v32, v33, v34);
    }

    [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
    return;
  }
  unsigned int v9 = [(id)objc_opt_class() isFaceTimePhotosAvailable];

  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v10 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"CSDMomentsControllerMetadataKeyTransactionID"];
  if (v10)
  {
    uint64_t v11 = [*v7 sessionForTransactionID:v10];
    uint64_t v12 = [v11 activeRequestsByTransactionID];
    BOOL v13 = [v12 objectForKeyedSubscript:v10];

    id v14 = [v13 avcRequest];
    NSErrorUserInfoKey v15 = [v11 remoteRequesteeIDSDestinationFor:v14];

    uint64_t v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = [v13 avcRequest];
      uint64_t v18 = [v17 requesterID];
      *(_DWORD *)long long buf = 138412802;
      char v57 = v11;
      __int16 v58 = 2112;
      id v59 = v18;
      __int16 v60 = 2112;
      *(void *)unint64_t v61 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "session: %@ request: %@ remoteIDSDestination: %@", buf, 0x20u);
    }
    if (v11 && v13 && v15)
    {
      id v55 = 0;
      id v19 = [v15 _stripPotentialTokenURIWithToken:&v55];
      id v20 = v55;
      unint64_t v21 = *(void **)(a1 + 48);
      id v54 = 0;
      id v22 = [v21 _stripPotentialTokenURIWithToken:&v54];
      id v23 = v54;
      id v24 = v23;
      if (v20 && v23)
      {
        if ([v20 isEqualToData:v23])
        {
          if (*(unsigned char *)(a1 + 64))
          {
            id v25 = [*(id *)(a1 + 56) fileTransferController];
            NSErrorUserInfoKey v26 = *(void **)(a1 + 32);
            char v48 = _NSConcreteStackBlock;
            uint64_t v49 = 3221225472;
            uint64_t v50 = sub_1001D468C;
            unint64_t v51 = &unk_10050A458;
            uint64_t v52 = *(void *)(a1 + 56);
            id v53 = v26;
            [v25 unzipArchiveAtURL:v53 completion:&v48];
          }
          else
          {
            __int16 v41 = sub_100008DCC();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
              sub_1003B19AC();
            }

            [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
          }
          objc_msgSend(v11, "removeActiveRequestForTransactionID:", v10, v48, v49, v50, v51, v52);
          id v42 = *v7;
          char v43 = [v11 moments];
          [v42 cleanUpForMomentIfNecessary:v43];

          unsigned int v44 = [*v7 delegate];
          if (objc_opt_respondsToSelector())
          {
            id v45 = *v7;
            unint64_t v46 = [v11 moments];
            objc_msgSend(v44, "momentsController:didReceiveResultsForStream:withTransactionID:", v45, objc_msgSend(v46, "streamToken"), v10);
          }
        }
        else
        {
          uint64_t v40 = sub_100008DCC();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            sub_1003B1A18((uint64_t *)(a1 + 48), v11, v40);
          }

          [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
        }
      }
      else
      {
        int v37 = [v13 avcRequest];
        char v38 = [v11 remoteRequesteeIDSDestinationFor:v37];

        __int16 v39 = sub_100008DCC();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t v47 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = 138413058;
          char v57 = v38;
          __int16 v58 = 2112;
          id v59 = v20;
          __int16 v60 = 2112;
          *(void *)unint64_t v61 = v47;
          *(_WORD *)&v61[8] = 2112;
          *(void *)&v61[10] = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Could not convert remote IDS destination %@ (token=%@) and/or from IDS destination %@ (token=%@) to token data", buf, 0x2Au);
        }

        [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
      }
    }
    else
    {
      uint64_t v36 = sub_100008DCC();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_1003B1AC4((uint64_t)v10, (id *)(a1 + 56), v36);
      }

      [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
    }
  }
  else
  {
    id v35 = sub_100008DCC();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_1003B1940();
    }

    [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
  }
}

void sub_1001D468C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D4754;
  block[3] = &unk_100504FE0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

id sub_1001D4754(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_100008DCC();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unzipped resource to URL: %@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 40) _handleReceivedResourcesAtDirectoryURL:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1003B1B60();
    }
  }
  return [*(id *)(a1 + 40) deleteContentsAtURL:*(void *)(a1 + 48)];
}

void sub_1001D5410(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)TUMomentDescriptor) initWithPhotosAppAssetIdentifier:v3];

  uint64_t v5 = [*(id *)(a1 + 32) queue];
  int v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_1001D54F0;
  uint64_t v10 = &unk_100504F10;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v4;
  id v6 = v4;
  dispatch_async(v5, &v7);

  objc_msgSend(*(id *)(a1 + 32), "deleteContentsAtURL:", *(void *)(a1 + 40), v7, v8, v9, v10, v11);
}

id sub_1001D54F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleRequestResultWithMomentDescriptor:*(void *)(a1 + 40)];
}

void sub_1001D5640(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)TUMomentDescriptor) initWithPhotosAppAssetIdentifier:v3];

  uint64_t v5 = [*(id *)(a1 + 32) queue];
  int v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_1001D5720;
  uint64_t v10 = &unk_100504F10;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v4;
  id v6 = v4;
  dispatch_async(v5, &v7);

  objc_msgSend(*(id *)(a1 + 32), "deleteContentsAtURL:", *(void *)(a1 + 40), v7, v8, v9, v10, v11);
}

id sub_1001D5720(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleRequestResultWithMomentDescriptor:*(void *)(a1 + 40)];
}

void sub_1001D58E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003B1D6C();
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v5);
  }
}

void sub_1001D5AF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1003B1DE8();
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v5);
  }
}

void sub_1001D5C8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) sessionForTransactionID:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[WARN] Timeout reached for active request for transaction ID %@", (uint8_t *)&v7, 0xCu);
    }

    [v2 removeActiveRequestForTransactionID:*(void *)(a1 + 40)];
    id v5 = *(void **)(a1 + 32);
    id v6 = [v2 moments];
    [v5 cleanUpForMomentIfNecessary:v6];
  }
}

id sub_1001D6054(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 didReceiveLocallyRequestedMomentDescriptor:*(void *)(a1 + 32)];
}

void sub_1001D6120(id a1)
{
  if (!qword_10058C5B0)
  {
    CFPropertyListRef v1 = objc_alloc_init(CSDMomentsControllerLocalCapabilities);
    uint64_t v2 = (void *)qword_10058C5B0;
    qword_10058C5B0 = (uint64_t)v1;
  }
}

void sub_1001D6264(id a1)
{
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PreserveFaceTimePhotosFiles", TUBundleIdentifierTelephonyUtilitiesFramework, &keyExistsAndHasValidFormat))
  {
    BOOL v1 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v1 = 1;
  }
  char v2 = !v1;
  byte_10058C5B8 = v2;
}

void sub_1001D9590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
}

TUICFQueryResult *__cdecl sub_1001D95AC(id a1, NSString *a2, NSString *a3)
{
  return (TUICFQueryResult *)+[TUICFInterface allowCallForDestinationID:a2 providerIdentifier:a3];
}

id sub_1001D95C0(uint64_t a1, void *a2)
{
  char v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 recentsController];
  id v5 = [v4 incomingCallFilter];
  id v6 = [v5 callDirectoryAllowsCallFromSourceAddress:v3];

  return v6;
}

id sub_1001D9628(uint64_t a1, void *a2)
{
  char v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 recentsController];
  id v5 = [v4 incomingCallFilter];
  id v6 = [v5 blockedByExtension:v3];

  return v6;
}

BOOL sub_1001D96A4(id a1)
{
  return +[TUCallCapabilities supportsPrimaryCalling];
}

id sub_1001D96B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [v4 callCenter];
  id v7 = [v6 shouldPreferRelayOverDirectSecondaryCallingForProvider:v5 isVideo:a3];

  return v7;
}

id sub_1001D9710(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained callFilterController];
    id v10 = [v9 shouldFilterIncomingCall:v5 from:v6];
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

BOOL sub_1001D97A0(id a1)
{
  BOOL v1 = +[NSProcessInfo processInfo];
  unsigned __int8 v2 = [v1 isLowPowerModeEnabled];

  return v2;
}

id sub_1001D97E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) restorePersistedBargeCallsIfNecessary];
}

id sub_1001DD3EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v6.receiver = *(id *)(a1 + 64);
  v6.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v6, "answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:", v2, v3, v4, v1);
}

id sub_1001DD4F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "holdCalls:whileUnholdingCalls:", v2, v1);
}

id sub_1001DD5F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "groupCalls:withCalls:", v2, v1);
}

id sub_1001DD6F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "ungroupCall:fromOtherCallsInGroup:", v2, v1);
}

id sub_1001DD83C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v6.receiver = *(id *)(a1 + 64);
  v6.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v6, "disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:", v2, v3, v4, v1);
}

id sub_1001DD91C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "setUplinkMuted:forCalls:", v1, v2);
}

id sub_1001DD9F8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "setTTYType:forCalls:", v1, v2);
}

void sub_1001DDACC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) callSourceManager];
  uint64_t v3 = [*(id *)(a1 + 40) provider];
  objc_super v4 = [v3 identifier];
  id v10 = [v2 callSourceWithIdentifier:v4];

  id v5 = objc_alloc_init((Class)CXSendMMIOrUSSDCodeAction);
  objc_super v6 = [*(id *)(a1 + 40) handle];
  id v7 = [v6 value];
  [v5 setCode:v7];

  objc_msgSend(v5, "setTtyType:", sub_1000BF214((uint64_t)objc_msgSend(*(id *)(a1 + 40), "ttyType")));
  uint64_t v8 = [*(id *)(a1 + 40) localSenderIdentityUUID];
  [v5 setSenderIdentityUUID:v8];

  id v9 = [*(id *)(a1 + 32) callSourceManager];
  [v9 addAction:v5 toUncommittedTransactionForCallSource:v10];
}

void sub_1001DDCB8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = +[CXHandoffContext providerIdentifierForHandoffActivityUserInfo:*(void *)(a1 + 32)];
  objc_super v4 = [*(id *)(a1 + 40) callSourceManager];
  id v5 = [v4 callSourceWithIdentifier:v3];

  id v6 = [objc_alloc((Class)CXHandoffContext) initWithHandoffActivityUserInfo:*v2];
  if (v6)
  {
    id v7 = [[CSDProviderCall alloc] initWithHandoffContext:v6 backingCallSource:v5];
    uint64_t v8 = [*(id *)(a1 + 40) callStateController];
    [v8 setCallDelegatesIfNeeded:v7];

    id v9 = objc_alloc((Class)CXPullCallAction);
    id v10 = [(CSDProviderCall *)v7 uniqueProxyIdentifierUUID];
    id v11 = [v9 initWithCallUUID:v10];

    [v11 setHandoffContext:v6];
    id v12 = [*(id *)(a1 + 40) callSourceManager];
    [v12 addAction:v11 toUncommittedTransactionForCallSource:v5];

    BOOL v13 = objc_alloc_init(CSDPulledCallContext);
    [(CSDPulledCallContext *)v13 setCall:v7];
    [(CSDPulledCallContext *)v13 setCompletionHandler:*(void *)(a1 + 48)];
    id v14 = [*(id *)(a1 + 40) pendingPulledCallContexts];
    NSErrorUserInfoKey v15 = [(CSDProviderCall *)v7 uniqueProxyIdentifierUUID];
    [v14 setObject:v13 forKeyedSubscript:v15];
  }
  else
  {
    uint64_t v16 = sub_100008DCC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1003B2530(a1 + 32, v16, v17, v18, v19, v20, v21, v22);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1001DE450(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(a1 + 40), "performCallAction:forCall:", *(void *)(*((void *)&v7 + 1) + 8 * (void)v6), *(void *)(a1 + 48), (void)v7);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1001E0650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_1001E0748(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E0758(uint64_t a1)
{
}

void sub_1001E0760(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callContainer];
  id v3 = [*(id *)(a1 + 40) UUIDString];
  id v4 = [v2 callWithUniqueProxyIdentifier:v3];

  if (*(unsigned char *)(a1 + 88) && v4)
  {
    [*(id *)(a1 + 48) updateFilteredOutReasonForCall:v4 WithError:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) && *(unsigned char *)(a1 + 89))
  {
    long long v7 = sub_100008DCC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] There is an error: %@, but we are still asked to report call to clients", (uint8_t *)&v10, 0xCu);
    }

    id v9 = [[CSDProviderCall alloc] initIncomingWithBackingCallSource:*(void *)(a1 + 56) UUID:*(void *)(a1 + 40) update:*(void *)(a1 + 64)];
    [v9 setDisconnectedReason:21];
    [v9 setSupportsRecents:*(unsigned __int8 *)(a1 + 90)];
    [v9 setLocalUserInHomeCountry:*(unsigned __int8 *)(a1 + 91)];
    [v9 setAnsweringMachineAvailable:*(unsigned __int8 *)(a1 + 92)];
    [v9 setIdentifiedSpamInCallerName:*(unsigned __int8 *)(a1 + 93)];
    [*(id *)(a1 + 32) setCallDelegatesIfNeeded:v9];
    [*(id *)(a1 + 48) updateFilteredOutReasonForCall:v9 WithError:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    [*(id *)(a1 + 32) propertiesChangedForCall:v9];
  }
}

id sub_1001E16E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) callSource:*(void *)(a1 + 40) reportedCallWithUUID:*(void *)(a1 + 48) endedAtDate:*(void *)(a1 + 56) privateReason:*(void *)(a1 + 72) failureContext:*(void *)(a1 + 64)];
}

void sub_1001E2764(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(NSObject **)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    __int16 v39 = v3;
    __int16 v40 = 2112;
    __int16 v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Call source manager %@ completed transaction group %@", buf, 0x16u);
  }

  unsigned int v31 = [*(id *)(a1 + 48) _allowRevertingStateForCompletedTransactionGroup:*(void *)(a1 + 40)];
  uint64_t v32 = [*(id *)(a1 + 48) callStateController];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v5 = [*(id *)(a1 + 40) allActions];
  id v6 = [v5 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v34;
    *(void *)&long long v7 = 138412546;
    long long v30 = v7;
    do
    {
      int v10 = 0;
      do
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(NSObject **)(*((void *)&v33 + 1) + 8 * (void)v10);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v12 = v11;
          BOOL v13 = [*(id *)(a1 + 48) pendingPulledCallContexts];
          id v14 = [v12 callUUID];
          NSErrorUserInfoKey v15 = [v13 objectForKeyedSubscript:v14];

          if (v15)
          {
            id v16 = [v12 state];
            uint64_t v17 = sub_100008DCC();
            uint64_t v18 = v17;
            if (v16 == (id)1)
            {
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                __int16 v39 = v12;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Pull call action fulfilled: %@", buf, 0xCu);
              }

              uint64_t v19 = [v15 call];
              uint64_t v20 = [v12 dateConnected];
              [v19 setDateConnected:v20];

              [v32 propertiesChangedForCall:v19];
            }
            else
            {
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412290;
                __int16 v39 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Pull call action failed: %@", buf, 0xCu);
              }

              uint64_t v19 = 0;
            }
            id v25 = [v15 completionHandler];
            ((void (**)(void, NSObject *))v25)[2](v25, v19);

            NSErrorUserInfoKey v26 = [*(id *)(a1 + 48) pendingPulledCallContexts];
            uint64_t v27 = [v12 callUUID];
            [v26 setObject:0 forKeyedSubscript:v27];

LABEL_27:
LABEL_28:

            goto LABEL_29;
          }
          uint64_t v19 = sub_100008DCC();
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
          id v24 = [*(id *)(a1 + 48) pendingPulledCallContexts];
          *(_DWORD *)long long buf = v30;
          __int16 v39 = v12;
          __int16 v40 = 2112;
          __int16 v41 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Could not find pulled call context for completed pull call action %@. All contexts: %@", buf, 0x16u);
          goto LABEL_33;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v12 = v11;
          uint64_t v21 = *(void **)(a1 + 48);
          uint64_t v22 = [v12 callUUID];
          NSErrorUserInfoKey v15 = [v21 _callWithUUID:v22];

          uint64_t v19 = sub_100008DCC();
          BOOL v23 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          if (v15)
          {
            if (v23)
            {
              *(_DWORD *)long long buf = 138412290;
              __int16 v39 = v15;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Call action completed for call: %@", buf, 0xCu);
            }

            [*(id *)(a1 + 48) _processCompletedCallAction:v12 forCall:v15 allowRevertingState:v31 isOnenessActive:0];
            goto LABEL_28;
          }
          if (!v23) {
            goto LABEL_27;
          }
          id v24 = [*(id *)(a1 + 48) calls];
          *(_DWORD *)long long buf = v30;
          __int16 v39 = v12;
          __int16 v40 = 2112;
          __int16 v41 = v24;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[WARN] Could not find call for completed call action: %@. All calls: %@", buf, 0x16u);
LABEL_33:

          goto LABEL_27;
        }
        id v12 = sub_100008DCC();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          __int16 v39 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Action completed: %@", buf, 0xCu);
        }
LABEL_29:

        int v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v28 = [v5 countByEnumeratingWithState:&v33 objects:v37 count:16];
      id v8 = v28;
    }
    while (v28);
  }

  uint64_t v29 = +[CSDReportingController sharedInstance];
  [v29 reportTransactionGroupCompleted:*(void *)(a1 + 40)];
}

void sub_1001E2D3C(uint64_t a1)
{
  id v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) callSourceManager];
    id v4 = [v3 callSources];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Call sources changed: %@", buf, 0xCu);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = [*(id *)(a1 + 32) calls];
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v23;
    *(void *)&long long v7 = 138412546;
    long long v21 = v7;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v12 = objc_msgSend(v11, "backingCallSource", v21);
        BOOL v13 = v12;
        if (v12 && ([v12 isConnected] & 1) == 0)
        {
          id v14 = sub_100008DCC();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = [v11 backingCallSource];
            *(_DWORD *)long long buf = v21;
            uint64_t v27 = v11;
            __int16 v28 = 2112;
            uint64_t v29 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Ending call %@ since its backing call source %@ is no longer connected", buf, 0x16u);
          }
          id v15 = objc_alloc_init((Class)CXCallFailureContext);
          [v15 setFailureReason:3];
          id v16 = *(void **)(a1 + 32);
          uint64_t v17 = [v11 backingCallSource];
          uint64_t v18 = [v11 uniqueProxyIdentifierUUID];
          [v16 callSource:v17 reportedCallWithUUID:v18 endedAtDate:0 privateReason:1 failureContext:v15];
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v8);
  }

  uint64_t v20 = [*(id *)(a1 + 32) callSourceFetcher];
  [v20 handleCallSourcesChanged];
}

void sub_1001E31B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100008DCC();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v11 = 138412546;
      id v12 = v3;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Using call source %@ for requested transaction %@", (uint8_t *)&v11, 0x16u);
    }

    [*(id *)(a1 + 40) _processRequestedTransaction:*(void *)(a1 + 32) fromCallSource:v3 completion:*(void *)(a1 + 48)];
  }
  else
  {
    if (v5)
    {
      long long v7 = [*(id *)(a1 + 40) callSourceManager];
      id v8 = [v7 callSources];
      int v11 = 138412290;
      id v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Not allowing requested transaction because no call source was found. All call sources: %@", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = +[NSError cx_requestTransactionErrorWithCode:2];
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
}

uint64_t sub_1001E4A90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001E5174(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E5238;
  block[3] = &unk_10050A6D0;
  objc_copyWeak(&v6, (id *)(a1 + 48));
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, block);

  objc_destroyWeak(&v6);
}

void sub_1001E5238(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained invalidate];
    [*(id *)(a1 + 32) removeClient:v5];
    id v3 = v5;
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
      id v3 = v5;
    }
  }
}

id sub_1001E53E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v2);

  id v3 = [*(id *)(a1 + 32) exportedObject];
  [*(id *)(a1 + 40) setTarget:v3];

  [*(id *)(a1 + 32) setLocalClientActive:1];
  [*(id *)(a1 + 40) invoke];
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 setLocalClientActive:0];
}

void sub_1001E74D0(NSObject *a1, int a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  dispatch_assert_queue_V2(v6[3]);
  switch(a2)
  {
    case 2:
      id v8 = sub_100008DCC();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v11[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[WARN] btSession terminated, attempting reconnect...", (uint8_t *)v11, 2u);
      }

      v6[1] = 0;
      int v9 = *((unsigned __int8 *)v6 + 33);
      [(dispatch_queue_t *)v6 _ensureStopped];
      if (v9) {
        [(dispatch_queue_t *)v6 _ensureStarted];
      }
      goto LABEL_15;
    case 1:
      int v10 = sub_100008DCC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "btSession detached", v12, 2u);
      }

      v6[1] = 0;
      [(dispatch_queue_t *)v6 _ensureStopped];
LABEL_15:
      CFRelease(v6);
      break;
    case 0:
      long long v7 = sub_100008DCC();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "btSession attached", buf, 2u);
      }

      v6[1] = a1;
      if (*((unsigned char *)v6 + 33)) {
        [(dispatch_queue_t *)v6 _ensureStarted];
      }
      else {
        [(dispatch_queue_t *)v6 _ensureStopped];
      }
      break;
  }
}

void sub_1001E7650(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, void *a6)
{
  id v8 = a6;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v8 + 3));
  if (a4 == 104 && a3 == 2 && *((unsigned char *)v8 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)v8 + 2);
    [WeakRetained didObserveBluetoothHangupCommand];

    int v10 = sub_100008DCC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Observed a hangup event, forwarding to delegate", v11, 2u);
    }
  }
}

void sub_1001E7980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E799C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = sub_100008DCC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 138412546;
      id v4 = WeakRetained;
      __int16 v5 = 2112;
      CFStringRef v6 = @"com.apple.backboard.proximity.changed";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ is handling %@", (uint8_t *)&v3, 0x16u);
    }

    [WeakRetained updateCovered];
  }
}

void sub_1001E7BB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001E7BC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  CFStringRef v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001E7C94;
    block[3] = &unk_1005050D0;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    char v12 = *(unsigned char *)(a1 + 40);
    dispatch_async(v6, block);
  }
}

id sub_1001E7C94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) proximitySensorObserver:*(void *)(a1 + 40) didChangeCovered:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1001E8998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E89B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isWaitingToJoinForConversationUUID:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001E8C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E8C80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E8C90(uint64_t a1)
{
}

void sub_1001E8C98(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) callUUIDsByConversationUUID];
  uint64_t v2 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001E90B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001E90CC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) conversationUUIDsByCallUUID];
  uint64_t v2 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1001E92A8(uint64_t a1)
{
  uint64_t v2 = sub_100008DCC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received notification that AVAudioClient has been activated, notifying conversation", v4, 2u);
  }

  [*(id *)(a1 + 32) setAudioSessionActive:1];
  return [*(id *)(a1 + 32) startAudioForConversationsIfNecessary];
}

id sub_1001EA764(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 handle];
  if ([v4 isEquivalentToHandle:*(void *)(a1 + 32)])
  {
    id v5 = [v3 association];
    CFStringRef v6 = [v5 handle];
    id v7 = [*(id *)(a1 + 40) localMember];
    uint64_t v8 = [v7 handle];
    id v9 = [v6 isEquivalentToHandle:v8];
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_1001EA828(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_100008DCC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1003B279C((uint64_t)a1, (uint64_t)v3, v4);
    }
    goto LABEL_6;
  }
  id v5 = [a1[4] invitationResolver];
  id v6 = a1[5];
  id v7 = [v6 localMember];
  uint64_t v8 = [v7 handle];
  LODWORD(v6) = [v5 shouldStartRingingTimeoutForConversation:v6 handle:v8];

  if (v6)
  {
    dispatch_time_t v9 = dispatch_time(0, 30000000000);
    id v10 = [a1[4] queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001EA99C;
    block[3] = &unk_100504FE0;
    uint64_t v11 = a1[5];
    id v12 = a1[4];
    uint64_t v14 = v11;
    id v15 = v12;
    id v16 = a1[6];
    dispatch_after(v9, v10, block);

    id v4 = v14;
LABEL_6:
  }
}

void sub_1001EA99C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) UUID];
  id v3 = [*(id *)(a1 + 40) callUUIDsByConversationUUID];
  id v4 = [v3 objectForKeyedSubscript:v2];
  if (![v4 isEqual:*(void *)(a1 + 48)])
  {

LABEL_7:
    goto LABEL_8;
  }
  unsigned int v5 = [*(id *)(a1 + 40) _isWaitingToJoinForConversationUUID:v2];

  if (v5)
  {
    id v6 = sub_100008DCC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      uint64_t v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ending ringing call for conversation with UUID: %@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 40) leaveConversation:*(void *)(a1 + 32) withCallUUID:*(void *)(a1 + 48) reason:3];
    [*(id *)(a1 + 40) setWaitingToJoin:0 forConversationUUID:v2];
    id v3 = [*(id *)(a1 + 40) provider];
    [v3 reportCallWithUUID:*(void *)(a1 + 48) endedAtDate:0 reason:3];
    goto LABEL_7;
  }
LABEL_8:
}

void sub_1001ECAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ECB0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    id v3 = sub_100008DCC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 32) UUID];
      uint64_t v5 = *(void *)(a1 + 40);
      int v24 = 138412546;
      long long v25 = v4;
      __int16 v26 = 2112;
      uint64_t v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking whether to leave conversation with UUID %@: removedActiveParticipant %@.", (uint8_t *)&v24, 0x16u);
    }
    id v6 = [*(id *)(a1 + 48) conversationsByUUID];
    int v7 = [*(id *)(a1 + 32) UUID];
    uint64_t v8 = [v6 objectForKeyedSubscript:v7];

    if (v8)
    {
      if (![*(id *)(a1 + 56) shouldAutomaticallyLeaveConversation:v8])
      {
LABEL_19:

        goto LABEL_20;
      }
      dispatch_time_t v9 = sub_100008DCC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [*(id *)(a1 + 32) UUID];
        uint64_t v11 = *(void *)(a1 + 40);
        int v24 = 138412546;
        long long v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Ending call since U+1 conversation with UUID %@: removedActiveParticipant %@.", (uint8_t *)&v24, 0x16u);
      }
      id v12 = [*(id *)(a1 + 56) callUUIDsByConversationUUID];
      __int16 v13 = [v8 UUID];
      uint64_t v14 = [v12 objectForKeyedSubscript:v13];

      if (v14)
      {
        id v15 = [WeakRetained provider];
        id v16 = +[NSDate date];
        [v15 reportCallWithUUID:v14 endedAtDate:v16 reason:2];

        [WeakRetained cleanupConversationWithCallUUID:v14];
      }
      else
      {
        uint64_t v18 = [WeakRetained featureFlags];
        unsigned int v19 = [v18 avLessSharePlayEnabled];

        if (v19)
        {
          if ([*(id *)(a1 + 32) avMode])
          {
            uint64_t v20 = sub_100008DCC();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              long long v21 = *(void **)(a1 + 32);
              int v24 = 138412290;
              long long v25 = v21;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[WARN] Couldn't find call to end for conversation %@. Falling back to leaving conversation directly.", (uint8_t *)&v24, 0xCu);
            }
          }
          long long v22 = *(void **)(a1 + 48);
          long long v23 = [v8 UUID];
          [v22 leaveConversationWithUUID:v23];
        }
      }
    }
    else
    {
      uint64_t v14 = sub_100008DCC();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = [*(id *)(a1 + 32) UUID];
        int v24 = 138412290;
        long long v25 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No conversation found in conversation manager with UUID %@ so we are not checking whether to end the call after a participant left", (uint8_t *)&v24, 0xCu);
      }
    }

    goto LABEL_19;
  }
LABEL_20:
}

BOOL sub_1001ED004(id a1, TUConversationMember *a2)
{
  uint64_t v2 = a2;
  id v3 = [(TUConversationMember *)v2 association];
  if (v3)
  {
    id v4 = [(TUConversationMember *)v2 association];
    unsigned __int8 v5 = [v4 isPrimary];
  }
  else
  {
    unsigned __int8 v5 = 1;
  }

  return v5;
}

int main(int argc, const char **argv, const char **envp)
{
  qword_100594878 = 0;
  id v4 = sub_100008DCC();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  id v5 = [objc_allocWithZone((Class)CSDDaemon) init];
  id v6 = (void *)qword_100594878;
  qword_100594878 = (uint64_t)v5;

  int v7 = (void *)qword_100594878;
  uint64_t v8 = self;
  id v9 = v7;
  id v10 = [v8 currentRunLoop];
  [v10 run];

  exit(0);
}

uint64_t sub_1001F03F8(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1001F0400(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_1001F0408(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1001F042C(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1001F0444(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1001F0454(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1001F045C(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1001F0468(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1001F0474(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_1001F0480(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_1001F048C(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t sub_1001F04A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    id v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.groupUUID()
{
  type metadata accessor for UUID();
  uint64_t v0 = sub_1001F2548();

  return sub_1001F0530(v0, v1, v2, v3);
}

uint64_t sub_1001F0530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.localParticipantID()
{
  return 0;
}

void *variable initialization expression of CSDConversationSpatialPersonaResolver.participantState()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.forceLocalParticipantState()
{
  return 0;
}

void *variable initialization expression of CSDConversationSpatialPersonaResolver.initialParticipantIdentifiers()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of LetMeInRequestorKeyAgreement.localKey()
{
  return P256.KeyAgreement.PrivateKey.init(compactRepresentable:)();
}

uint64_t variable initialization expression of LetMeInRequestorKeyAgreement.requestKey()
{
  type metadata accessor for SymmetricKey();
  uint64_t v0 = sub_1001F2548();

  return sub_1001F0530(v0, v1, v2, v3);
}

uint64_t variable initialization expression of CSDAnalyticsManager.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  sub_1001F2514();
  uint64_t v4 = v3 - v2;
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  sub_1001F2514();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_1001F2514();
  sub_1001F07DC();
  static DispatchQoS.background.getter();
  sub_1001F1308((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_1001F0860();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t sub_1001F07DC()
{
  unint64_t result = qword_1005850F0;
  if (!qword_1005850F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005850F0);
  }
  return result;
}

uint64_t sub_1001F081C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1001F0860()
{
  unint64_t result = qword_100583B10;
  if (!qword_100583B10)
  {
    sub_1001F08B4(&qword_100585100);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100583B10);
  }
  return result;
}

uint64_t sub_1001F08B4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id variable initialization expression of CSDAnalyticsManager.tuFeatureFlags()
{
  id v0 = objc_allocWithZone((Class)TUFeatureFlags);

  return [v0 init];
}

id variable initialization expression of CSDAnalyticsManager.callDirectoryManager()
{
  id v0 = objc_allocWithZone((Class)CXCallDirectoryExtensionManager);

  return [v0 init];
}

uint64_t variable initialization expression of CSDAnalyticsManager.liveLookupManager()
{
  return static LiveCallerIDLookupManager.shared.getter();
}

uint64_t variable initialization expression of HandoffAudioController.pickedRouteUniqueIdentifier()
{
  return 0;
}

void type metadata accessor for CLFCommunicationLimit(uint64_t a1)
{
}

void type metadata accessor for TUCallSoundPlayerSoundType(uint64_t a1)
{
}

void type metadata accessor for IDSSessionEndedReason(uint64_t a1)
{
}

void type metadata accessor for CHRecentCallMediaType(uint64_t a1)
{
}

void type metadata accessor for TUMomentsAvailability(uint64_t a1)
{
}

void type metadata accessor for IDSRegistrationRestrictionReason(uint64_t a1)
{
}

__n128 sub_1001F0A24(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001F0A30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for TUCallRemoteVideoPresentationState(uint64_t a1)
{
}

void type metadata accessor for Triggers(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *sub_1001F0AAC(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_1001F0AB8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001F0AD8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for CTError(uint64_t a1)
{
}

void type metadata accessor for AVCSessionMediaType(uint64_t a1)
{
}

void type metadata accessor for AVCSessionMediaState(uint64_t a1)
{
}

void type metadata accessor for TUCallOriginatingUIType(uint64_t a1)
{
}

void type metadata accessor for TUCallDisconnectedReason(uint64_t a1)
{
}

void type metadata accessor for CSDLiveVoicemailStatus(uint64_t a1)
{
}

void type metadata accessor for TUCallVerificationStatus(uint64_t a1)
{
}

void type metadata accessor for TUCallFilteredOutReason(uint64_t a1)
{
}

void type metadata accessor for TUConversationState(uint64_t a1)
{
}

Swift::Int sub_1001F0BB4(uint64_t a1)
{
  return sub_10023548C(a1, *v1);
}

Swift::Int sub_1001F0BBC()
{
  return sub_1001F227C(*v0);
}

void sub_1001F0BD8(int a1)
{
  sub_1001F197C(a1, *v1);
}

uint64_t sub_1001F0BE0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001F0C14(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1001F0C14(uint64_t result)
{
  return result;
}

void sub_1001F0C30()
{
  sub_1001F2508();
  ScreenSharingActivityManager.carPlayDidDisconnect()();
  _DWORD *v0 = v1;
}

BOOL sub_1001F0C58(int *a1, int *a2)
{
  return sub_1001FD1BC(*a1, *a2);
}

uint64_t sub_1001F0C64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of CSDConversationSpatialPersonaResolver.joinedGenerationCounter();
  *a1 = result;
  return result;
}

uint64_t sub_1001F0C8C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001F03F8(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1001F0CBC(uint64_t a1)
{
  uint64_t v2 = sub_1001F24F0(a1);
  uint64_t result = sub_1002D0E4C(v2, v3);
  uint64_t *v1 = result;
  return result;
}

uint64_t sub_1001F0CE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001F0400(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1001F0D14(uint64_t a1, void *a2)
{
  return sub_1002E748C(a1, *a2);
}

uint64_t sub_1001F0D1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001F0408(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1001F0D50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001F042C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1001F0D84(void *a1)
{
  return sub_1002E74A8(*a1);
}

uint64_t sub_1001F0D8C(void *a1)
{
  return sub_1002E7490(*a1);
}

uint64_t sub_1001F0D94(uint64_t *a1)
{
  return sub_1001F0444(*a1);
}

uint64_t sub_1001F0D9C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001F0454(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1001F0DCC(uint64_t *a1)
{
  return sub_1001F045C(*a1, *v1);
}

BOOL sub_1001F0DD8(uint64_t *a1)
{
  return sub_1001F0468(*a1, *v1);
}

BOOL sub_1001F0DE4(uint64_t *a1)
{
  return sub_1001F0474(*a1, *v1);
}

BOOL sub_1001F0DF0()
{
  return sub_1001F0480(*v0);
}

uint64_t sub_1001F0DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001F0E10(uint64_t *a1)
{
  return sub_1001F048C(*a1);
}

void sub_1001F0E18()
{
  sub_1001F24E4();
  ScreenSharingActivityManager.carPlayDidDisconnect()();
  void *v0 = v1;
}

uint64_t sub_1001F0E40()
{
  return sub_1002EFB38(*v0);
}

void sub_1001F0E48(int a1)
{
  sub_10020E0E4(a1, *v1);
}

uint64_t sub_1001F0E50(uint64_t a1)
{
  return sub_1002EFD6C(a1, *v1);
}

uint64_t sub_1001F0E58()
{
  return sub_1001F22C4(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1001F0E88(uint64_t a1, id *a2)
{
  return sub_1001F2304(a1, a2);
}

uint64_t sub_1001F0EA0(uint64_t a1, id *a2)
{
  return sub_1001F21FC(a1, a2) & 1;
}

uint64_t sub_1001F0EBC()
{
  return sub_1001F22C4(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1001F0EEC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001F0F2C()
{
  return sub_1001F0F48();
}

uint64_t sub_1001F0F48()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1001F2524();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F0F88()
{
  return sub_1002354D0();
}

Swift::Int sub_1001F0F90()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1001F1004(uint64_t *a1, uint64_t *a2)
{
  return sub_1001FD1C8(*a1, *a2);
}

void sub_1001F1010(uint64_t a1@<X8>)
{
  sub_1001F10C4();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_1001F1044()
{
  return sub_1001F0EEC(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString sub_1001F1074@<X0>(void *a1@<X8>)
{
  NSString result = sub_1001F237C();
  *a1 = result;
  return result;
}

uint64_t sub_1001F109C()
{
  return sub_10023553C();
}

uint64_t sub_1001F10A8(void *a1, void *a2)
{
  return sub_1001FD1D4(*a1, *a2);
}

_DWORD *sub_1001F10B4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_1001F10CC()
{
  return sub_1002EFD2C(*v0);
}

void sub_1001F10D4(int a1)
{
  sub_10020E0BC(a1, *v1);
}

Swift::Int sub_1001F10DC()
{
  return sub_1002F0024();
}

uint64_t sub_1001F10E8()
{
  uint64_t v1 = sub_1001F24E4();
  uint64_t result = j_j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_1001F1110()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1001F115C()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1001F11B4()
{
  return Hasher._finalize()();
}

void sub_1001F121C(void *a1@<X8>)
{
  ScreenSharingActivityManager.carPlayDidDisconnect()();
  *a1 = v2;
}

uint64_t sub_1001F1248@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001F04A0(a1);
  *a2 = result;
  return result;
}

void sub_1001F1270(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1001F127C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1001F128C()
{
  uint64_t v1 = sub_1001F24E4();
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

void *sub_1001F12B4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1001F12C0()
{
  return sub_1001F1308(&qword_100583E50, type metadata accessor for AVCSessionMediaType);
}

uint64_t sub_1001F1308(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F1350()
{
  return sub_1001F1308(&qword_100583E58, type metadata accessor for Triggers);
}

uint64_t sub_1001F1398()
{
  return sub_1001F1308(&qword_100583E60, type metadata accessor for Triggers);
}

uint64_t sub_1001F13E0()
{
  return sub_1001F1308(&qword_100583E68, type metadata accessor for Triggers);
}

uint64_t sub_1001F1428()
{
  return sub_1001F1308(&qword_100583E70, type metadata accessor for Triggers);
}

uint64_t sub_1001F1470()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1001F14DC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1001F1524@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001F1554(uint64_t a1)
{
  uint64_t v2 = sub_1001F1308((unint64_t *)&unk_1005856A0, type metadata accessor for Name);
  uint64_t v3 = sub_1001F1308(&qword_100584180, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001F1610(uint64_t a1)
{
  uint64_t v2 = sub_1001F1308(&qword_100584198, type metadata accessor for Category);
  uint64_t v3 = sub_1001F1308(&qword_1005841A0, type metadata accessor for Category);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001F16CC(uint64_t a1)
{
  uint64_t v2 = sub_1001F1308(&qword_100584188, type metadata accessor for Mode);
  uint64_t v3 = sub_1001F1308(&qword_100584190, type metadata accessor for Mode);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void sub_1001F1788(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1001F1794(uint64_t a1)
{
  uint64_t v2 = sub_1001F1308(&qword_100583E90, type metadata accessor for CLFCommunicationLimit);
  uint64_t v3 = sub_1001F1308(&qword_100583E98, type metadata accessor for CLFCommunicationLimit);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001F1850()
{
  return sub_1001F1308(&qword_100583E78, type metadata accessor for CLFCommunicationLimit);
}

uint64_t sub_1001F1898()
{
  return sub_1001F1308(&qword_100583E80, type metadata accessor for CLFCommunicationLimit);
}

uint64_t sub_1001F18E0()
{
  return sub_1001F1308(&qword_100583E88, type metadata accessor for CLFCommunicationLimit);
}

Swift::Int sub_1001F1928()
{
  return sub_1001F0F90();
}

uint64_t sub_1001F1930()
{
  return sub_1001F0EEC(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

Swift::Int sub_1001F1960()
{
  return sub_1001F0F90();
}

void sub_1001F197C(int a1, Swift::UInt a2)
{
}

void type metadata accessor for CXCallFailureReason(uint64_t a1)
{
}

void type metadata accessor for TUCallStatus(uint64_t a1)
{
}

void type metadata accessor for AVCCaptionsReason(uint64_t a1)
{
}

void type metadata accessor for AVCCaptionsSource(uint64_t a1)
{
}

void type metadata accessor for CSDAudioInterruptionProviderType(uint64_t a1)
{
}

void type metadata accessor for TUConversationLinkDeletionReason(uint64_t a1)
{
}

void type metadata accessor for CSDMessagingConversationMessageType(uint64_t a1)
{
}

void type metadata accessor for TUConversationLinkLifetimeScope(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for RPDeviceChangeFlags(uint64_t a1)
{
}

void type metadata accessor for TUConversationPresentationMode(uint64_t a1)
{
}

void type metadata accessor for TUConversationAVMode(uint64_t a1)
{
}

void type metadata accessor for IRConfigurationUpdateMode(uint64_t a1)
{
}

void type metadata accessor for IRSessionSuspensionReason(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(uint64_t a1)
{
}

void type metadata accessor for HandleType(uint64_t a1)
{
}

void type metadata accessor for IMUserNotificationResponse(uint64_t a1)
{
}

void type metadata accessor for TUConfigurationAnnounceCalls(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CHRecentCallTTYType(uint64_t a1)
{
}

void type metadata accessor for TUHandleType(uint64_t a1)
{
}

void type metadata accessor for TUCollaborationDocumentState(uint64_t a1)
{
}

void type metadata accessor for TTSAssetProperty(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AudioActivationContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1001F1BA4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1001F1BB8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001F1BD8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CMTimeRange(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionServerErrorCode(uint64_t a1)
{
}

void type metadata accessor for TUCallFaceTimeTransportType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CSDCallFilterStatus(uint64_t a1)
{
}

void type metadata accessor for MRPlaybackState(uint64_t a1)
{
}

__n128 sub_1001F1C88(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CHHandleType(uint64_t a1)
{
}

void type metadata accessor for TUCallSoundRegion(uint64_t a1)
{
}

void type metadata accessor for TURouteDeviceType(uint64_t a1)
{
}

void type metadata accessor for AXSDefaultRouteForCall(uint64_t a1)
{
}

__n128 initializeWithTake for CallInfoPendingScore(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1001F1D0C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001F1D2C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for TUTelephonyCallSubType(uint64_t a1)
{
}

__n128 sub_1001F1D90(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001F1D9C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for CSDAudioInterruptionOperationMode(uint64_t a1)
{
}

void type metadata accessor for Mode(uint64_t a1)
{
}

void type metadata accessor for Category(uint64_t a1)
{
}

uint64_t sub_1001F1E0C()
{
  return sub_1001F1308(&qword_100584108, type metadata accessor for Category);
}

uint64_t sub_1001F1E54()
{
  return sub_1001F1308(&qword_100584110, type metadata accessor for Category);
}

uint64_t sub_1001F1E9C()
{
  return sub_1001F1308(&qword_100584118, type metadata accessor for Category);
}

uint64_t sub_1001F1EE4()
{
  return sub_1001F1308(&qword_100584120, type metadata accessor for Mode);
}

uint64_t sub_1001F1F2C()
{
  return sub_1001F1308(&qword_100584128, type metadata accessor for Mode);
}

uint64_t sub_1001F1F74()
{
  return sub_1001F1308(&qword_100584130, type metadata accessor for Mode);
}

uint64_t sub_1001F1FBC()
{
  return sub_1001F1308(&qword_100584138, type metadata accessor for TURouteDeviceType);
}

uint64_t sub_1001F2004()
{
  return sub_1001F1308(&qword_100584140, type metadata accessor for HandleType);
}

uint64_t sub_1001F204C()
{
  return sub_1001F1308(&qword_100584148, type metadata accessor for Name);
}

uint64_t sub_1001F2094()
{
  return sub_1001F1308(&qword_100584150, type metadata accessor for Name);
}

uint64_t sub_1001F20DC()
{
  return sub_1001F1308(&qword_100584158, type metadata accessor for Name);
}

uint64_t sub_1001F2124()
{
  return sub_1001F1308(&qword_100584160, type metadata accessor for TTSAssetProperty);
}

uint64_t sub_1001F216C()
{
  return sub_1001F1308((unint64_t *)&qword_100584168, type metadata accessor for CFString);
}

uint64_t sub_1001F21B4()
{
  return sub_1001F1308((unint64_t *)&unk_100584170, type metadata accessor for CFString);
}

uint64_t sub_1001F21FC(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

Swift::Int sub_1001F227C(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001F22C4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001F2304(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

NSString sub_1001F237C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

__n128 sub_1001F23B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

void sub_1001F243C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1001F24E4()
{
  return *(void *)v0;
}

uint64_t sub_1001F24F0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _s13callservicesd37CSDConversationSpatialPersonaResolverC23joinedGenerationCounter33_06B9616770D716169D363C7FB0B2E32ALLs6UInt64Vvpfi_0()
{
  return 0;
}

uint64_t sub_1001F2508()
{
  return *v0;
}

uint64_t sub_1001F2524()
{
  return String.hash(into:)();
}

uint64_t sub_1001F2548()
{
  return v0;
}

id sub_1001F255C()
{
  id v0 = [self sharedPreferences];

  return v0;
}

uint64_t sub_1001F259C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  unint64_t v46 = (objc_class *)type metadata accessor for SynthesisVoice();
  id v4 = objc_allocWithZone(v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)SynthesisVoice.init(language:name:)();
  id v6 = (uint64_t (*)(void))v0[9];
  int v7 = (void *)v6();
  id v8 = [v7 outputVoice];

  if (v8)
  {
    sub_1001F612C(v8, (SEL *)&selRef_name);
    if (v9)
    {
      uint64_t v10 = sub_1001F612C(v8, (SEL *)&selRef_languageCode);
      if (v11)
      {
        BOOL v12 = v10 == v3 && v11 == v2;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          if (qword_100583A10 != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          sub_1001F5F88(v13, (uint64_t)qword_100594C28);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v14, v15))
          {
            uint64_t v16 = swift_slowAlloc();
            uint64_t v47 = swift_slowAlloc();
            *(_DWORD *)uint64_t v16 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v17 = String.init<A>(reflecting:)();
            sub_1002344D8(v17, v18, &v47);
            sub_1001F63F8();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v16 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v19 = String.init<A>(reflecting:)();
            sub_1002344D8(v19, v20, &v47);
            sub_1001F63F8();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "Current default voice: %s matches mapped device locale: %s", (uint8_t *)v16, 0x16u);
            swift_arrayDestroy();
            sub_1001F63CC();
            sub_1001F63CC();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          id v21 = objc_allocWithZone(v46);
          uint64_t v22 = SynthesisVoice.init(language:name:)();
          goto LABEL_29;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  long long v23 = (void *)v1[13];
  int v24 = (void *)v6();
  id v25 = [v24 outputVoice];

  swift_bridgeObjectRetain();
  id v26 = sub_1001F60C4((uint64_t)v25, v3, v2, v23);

  swift_bridgeObjectRelease();
  if (!v26) {
    return (uint64_t)v5;
  }
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_1001F5F88(v27, (uint64_t)qword_100594C28);
  swift_retain_n();
  id v8 = v26;
  __int16 v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    os_log_type_t v44 = v29;
    id v45 = v5;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315650;
    unsigned int v31 = (void *)v6();
    id v32 = [v31 outputVoice];

    if (v32)
    {
      sub_1001F6204(0, &qword_1005846A0);
      uint64_t v33 = String.init<A>(reflecting:)();
      unint64_t v35 = v34;
    }
    else
    {
      unint64_t v35 = 0xE300000000000000;
      uint64_t v33 = 7104878;
    }
    sub_1002344D8(v33, v35, &v47);
    sub_1001F63F8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(reflecting:)();
    sub_1002344D8(v36, v37, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    sub_1001F6204(0, &qword_1005846A0);
    id v38 = v8;
    uint64_t v39 = String.init<A>(reflecting:)();
    sub_1002344D8(v39, v40, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v44, "Best matching Siri voice to %s in language %s is %s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();

    uint64_t v5 = v45;
  }
  else
  {

    swift_release_n();
  }
  uint64_t result = sub_1001F612C(v8, (SEL *)&selRef_languageCode);
  if (v42)
  {
    sub_1001F612C(v8, (SEL *)&selRef_name);
    id v43 = objc_allocWithZone(v46);
    uint64_t v22 = SynthesisVoice.init(language:name:)();
LABEL_29:

    return v22;
  }
  __break(1u);
  return result;
}

void sub_1001F2C6C(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    id v4 = sub_1001B1B60();
    if (os_log_type_enabled(v4, v3))
    {
      swift_errorRetain();
      id v5 = a2;
      swift_errorRetain();
      id v6 = v5;
      uint64_t v7 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      type metadata accessor for SynthesisVoice();
      id v8 = v6;
      uint64_t v9 = String.init<A>(reflecting:)();
      sub_1002344D8(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v11 = String.init<A>(reflecting:)();
      sub_1002344D8(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v3, "Failed to subscribe to greeting voice %s: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
    }
  }
}

void sub_1001F2E94()
{
  uint64_t v1 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
  uint64_t v2 = static OS_dispatch_queue.main.getter();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  void v6[4] = sub_1001F6378;
  void v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  _DWORD v6[2] = sub_1001F33E0;
  v6[3] = &unk_10050C0C0;
  id v4 = _Block_copy(v6);
  swift_release();
  uint64_t v5 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  notify_register_dispatch((const char *)(v5 + 32), (int *)(v1 + 116), v2, v4);
  swift_endAccess();
  swift_release();
  _Block_release(v4);
}

uint64_t sub_1001F2FFC()
{
  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 116));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  return v0;
}

uint64_t sub_1001F3078()
{
  sub_1001F2FFC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SiriSpeechService()
{
  return self;
}

void sub_1001F30D0()
{
  static os_log_type_t.error.getter();
  id v0 = sub_1001B1B60();
  os_log(_:dso:log:_:_:)();
}

uint64_t sub_1001F314C()
{
  id v0 = objc_msgSend(self, "tu_defaults");
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1001F31F4(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(self, "tu_defaults");
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  id v5 = String._bridgeToObjectiveC()();
  [v3 setValue:v4 forKey:v5];

  swift_unknownObjectRelease();
}

uint64_t sub_1001F32B4()
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C28);
  NSString v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Siri output voice changed and the call screening needs to be regenerated!", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v5 = *(void (**)(uint64_t))(result + 120);
    swift_retain();
    uint64_t v6 = swift_release();
    v5(v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001F33E0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_1001F3434()
{
  NSString v1 = *(void **)(v0 + 32);
  URL.path(percentEncoded:)(1);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 fileExistsAtPath:v2];

  return v3;
}

id sub_1001F34A0()
{
  NSString v1 = *(void **)(v0 + 32);
  URL.path(percentEncoded:)(1);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  if (v3)
  {
    URL._bridgeToObjectiveC()(v4);
    uint64_t v6 = v5;
    id v18 = 0;
    unsigned int v7 = [v1 removeItemAtURL:v5 error:&v18];

    id v8 = v18;
    if (!v7) {
      goto LABEL_6;
    }
    id v9 = v18;
  }
  URL._bridgeToObjectiveC()(v4);
  uint64_t v11 = v10;
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v18 = 0;
  unsigned int v15 = [v1 moveItemAtURL:v11 toURL:v13 error:&v18];

  id v8 = v18;
  if (v15) {
    return v18;
  }
LABEL_6:
  id v17 = v8;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_1001F3604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  _DWORD v4[2] = a1;
  v4[3] = a2;
  return sub_1001F6418((uint64_t)sub_1001F3620);
}

uint64_t sub_1001F3620()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  id v3 = sub_1001B1B60();
  sub_1001F081C(&qword_100584B20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10048F550;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1001F3B08();
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v1;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  id v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *id v5 = v0;
  v5[1] = sub_1001F374C;
  return sub_1001F3B54();
}

uint64_t sub_1001F374C()
{
  sub_1001F640C();
  sub_1001F63B4();
  sub_1001F6424();
  void *v3 = v2;
  void *v3 = *v1;
  *(void *)(v2 + 56) = v4;
  swift_task_dealloc();
  if (v0)
  {
    sub_1001F643C();
    return v5();
  }
  else
  {
    sub_1001F6430();
    return _swift_task_switch(v7, v8, v9);
  }
}

uint64_t sub_1001F384C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  long long v13 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(_OWORD *)(v4 + 16) = v13;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *id v5 = v0;
  v5[1] = sub_1001F3960;
  sub_1001F6430();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v7, v8, 0xD000000000000023, v9, v10, v4, v11);
}

uint64_t sub_1001F3960()
{
  sub_1001F640C();
  sub_1001F63B4();
  uint64_t v3 = v2;
  sub_1001F6424();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1001F6424();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1001F6430();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1001F3A48()
{
  sub_1001F640C();

  sub_1001F643C();
  return v1();
}

uint64_t sub_1001F3AA4()
{
  sub_1001F640C();

  swift_task_dealloc();
  sub_1001F643C();
  return v1();
}

unint64_t sub_1001F3B08()
{
  unint64_t result = qword_100585010;
  if (!qword_100585010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585010);
  }
  return result;
}

uint64_t sub_1001F3B54()
{
  *(void *)(v1 + 24) = v0;
  return sub_1001F6418((uint64_t)sub_1001F3B6C);
}

uint64_t sub_1001F3B6C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_1001F259C();
  v0[4] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  type metadata accessor for SynthesisVoice();
  void *v4 = v0;
  v4[1] = sub_1001F3C74;
  sub_1001F6430();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v6, v7, 0xD000000000000014, v8, v9, v3, v10);
}

uint64_t sub_1001F3C74()
{
  sub_1001F640C();
  sub_1001F63B4();
  uint64_t v3 = v2;
  sub_1001F6424();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1001F6424();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1001F6430();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1001F3D5C()
{
  sub_1001F640C();

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001F3DC0()
{
  sub_1001F640C();

  swift_task_dealloc();
  sub_1001F643C();
  return v1();
}

void sub_1001F3E24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  uint64_t v40 = a1;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = v33;
  uint64_t v41 = *(void *)(v33 + 64);
  __chkstk_darwin(v8);
  id v38 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_1001F081C(&qword_100584678);
  uint64_t v11 = *(void *)(v36 - 8);
  uint64_t v37 = *(void *)(v11 + 64);
  __chkstk_darwin(v36);
  unint64_t v35 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1001F081C(&qword_1005878F0);
  __chkstk_darwin(v13 - 8);
  unsigned int v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = objc_allocWithZone((Class)type metadata accessor for SynthesisRequest());
  swift_bridgeObjectRetain();
  id v17 = a4;
  uint64_t v18 = SynthesisRequest.init(text:voice:)();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v20 = a5;
  v19(v15, a5, v8);
  sub_1001F0530((uint64_t)v15, 0, 1, v8);
  unint64_t v34 = (void *)v18;
  dispatch thunk of BaseRequest.outputPath.setter();
  SynthesizingRequestProtocol.privacySensitive.setter();
  uint64_t v21 = v11;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  long long v23 = v35;
  uint64_t v24 = v36;
  v22(v35, v40, v36);
  id v25 = v38;
  v19(v38, v20, v8);
  uint64_t v26 = v21;
  unint64_t v27 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v28 = v33;
  unint64_t v29 = (v37 + *(unsigned __int8 *)(v33 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v30 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v30 + v27, v23, v24);
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v30 + v29, v25, v8);
  unsigned int v31 = v34;
  dispatch thunk of DaemonSession.synthesize(request:didFinish:)();
  swift_release();
}

void sub_1001F414C(uint64_t a1)
{
  sub_1001F3E24(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1001F415C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    id v9 = sub_1001B1B60();
    sub_1001F081C(&qword_100584B20);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10048F550;
    uint64_t v21 = a1;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_1001F3B08();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    uint64_t v21 = a1;
    sub_1001F081C(&qword_100584678);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v15 = sub_1001B1B60();
    sub_1001F081C(&qword_100584B20);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_10048F550;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1001F3B08();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    sub_1001F081C(&qword_100584678);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1001F43CC()
{
  uint64_t v1 = sub_1001F081C(&qword_100584678);
  sub_1001F6398();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  sub_1001F6398();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v5 + v7 + v13) & ~v13;
  uint64_t v15 = v14 + *(void *)(v12 + 64);
  uint64_t v16 = v4 | v13 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v14, v8);

  return _swift_deallocObject(v0, v15, v16);
}

uint64_t sub_1001F44D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1001F081C(&qword_100584678) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = type metadata accessor for URL();
  sub_1001F63E4(v6);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1001F415C(a1, v1 + v4, v8);
}

uint64_t sub_1001F4588(uint64_t a1, void *a2)
{
  v15[0] = a1;
  uint64_t v3 = sub_1001F081C(qword_1005846A8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  id v6 = sub_1001B1B60();
  sub_1001F081C(&qword_100584B20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  v15[1] = a2;
  type metadata accessor for SynthesisVoice();
  id v8 = a2;
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1001F3B08();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v4 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15[0], v3);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v13 + v12, (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  dispatch thunk of DaemonSession.getSynthesisVoice(matching:reply:)();
  return swift_release();
}

uint64_t sub_1001F4798(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    id v2 = sub_1001B1B60();
    sub_1001F081C(&qword_100584B20);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10048F550;
    swift_errorRetain();
    sub_1001F081C((uint64_t *)&unk_100585FE0);
    uint64_t v4 = String.init<A>(reflecting:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_1001F3B08();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (a1)
    {
      id v7 = a1;
      dispatch thunk of SynthesisVoice.name.getter();
      if (v8)
      {
        swift_bridgeObjectRelease();
        id v9 = sub_1001B1B60();
        sub_1001F081C(&qword_100584B20);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_10048F550;
        type metadata accessor for SynthesisVoice();
        v7;
        uint64_t v11 = String.init<A>(reflecting:)();
        uint64_t v13 = v12;
        *(void *)(v10 + 56) = &type metadata for String;
        *(void *)(v10 + 64) = sub_1001F3B08();
        *(void *)(v10 + 32) = v11;
        *(void *)(v10 + 40) = v13;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        sub_1001F081C(qword_1005846A8);
        return CheckedContinuation.resume(returning:)();
      }
    }
    static os_log_type_t.error.getter();
    id v15 = sub_1001B1B60();
    os_log(_:dso:log:_:_:)();

    [objc_allocWithZone((Class)NSError) init];
  }
  sub_1001F081C(qword_1005846A8);
  return CheckedContinuation.resume(throwing:)();
}

void sub_1001F4A24(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v47 = v11;
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v45 = v14 - v13;
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  sub_1001F6398();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_1001F2514();
  uint64_t v21 = v20 - v19;
  uint64_t v46 = v1;
  if ((*(unsigned char *)(v1 + 112) & 1) == 0
    && ((dispatch thunk of SynthesisVoice.footprint.getter(),
         uint64_t v22 = SynthesisVoice.Footprint.rawValue.getter(),
         v22 == SynthesisVoice.Footprint.rawValue.getter())
     || (dispatch thunk of SynthesisVoice.footprint.getter(),
         uint64_t v23 = SynthesisVoice.Footprint.rawValue.getter(),
         v23 == SynthesisVoice.Footprint.rawValue.getter())))
  {
    uint64_t v41 = v9;
    uint64_t v43 = v5;
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v42 = v10;
    uint64_t v44 = v3;
    uint64_t v24 = type metadata accessor for Logger();
    sub_1001F5F88(v24, (uint64_t)qword_100594C28);
    id v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v50 = v25;
      type metadata accessor for SynthesisVoice();
      unint64_t v29 = v25;
      uint64_t v30 = String.init<A>(reflecting:)();
      uint64_t v50 = (void *)sub_1002344D8(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "currentVoice %s is of type compact. We should download a neural voice", v28, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
    sub_1001F6204(0, (unint64_t *)&qword_1005850F0);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v21, enum case for DispatchQoS.QoSClass.default(_:), v15);
    uint64_t v39 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
    aBlock[4] = (uint64_t)sub_1001F5FC0;
    aBlock[5] = v46;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1002C2C88;
    aBlock[3] = (uint64_t)&unk_10050BFD0;
    uint64_t v40 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v50 = _swiftEmptyArrayStorage;
    sub_1001F5FE0();
    sub_1001F081C((uint64_t *)&unk_100584B00);
    sub_1001F6030();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v40);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v44);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v42);
    swift_release();
  }
  else
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_1001F5F88(v32, (uint64_t)qword_100594C28);
    char v48 = a1;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 136315138;
      uint64_t v50 = v48;
      type metadata accessor for SynthesisVoice();
      uint64_t v36 = v48;
      uint64_t v37 = String.init<A>(reflecting:)();
      uint64_t v50 = (void *)sub_1002344D8(v37, v38, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "currentVoice %s is neural or we are already fetching speech assets, no need to fetch new voice", v35, 0xCu);
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
    }
    else
    {
    }
  }
}

void sub_1001F505C(uint64_t a1)
{
  id v2 = (void *)sub_1001F259C();
  uint64_t v49 = _swiftEmptyDictionarySingleton;
  *((void *)&v46 + 1) = &type metadata for String;
  *(void *)&long long aBlock = dispatch thunk of SynthesisVoice.language.getter();
  *((void *)&aBlock + 1) = v3;
  sub_1002C22B4((uint64_t)&aBlock, 1uLL);
  uint64_t v4 = dispatch thunk of SynthesisVoice.name.getter();
  if (v5)
  {
    *((void *)&v46 + 1) = &type metadata for String;
    *(void *)&long long aBlock = v4;
    *((void *)&aBlock + 1) = v5;
  }
  else
  {
    long long aBlock = 0u;
    long long v46 = 0u;
  }
  sub_1002C22B4((uint64_t)&aBlock, 0);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10048F560;
  sub_1001F6204(0, &qword_100584680);
  *(void *)(v6 + 32) = static TTSAssetTechnology.neural.getter();
  *(void *)&long long aBlock = v6;
  specialized Array._endMutation()();
  if ((aBlock & 0x8000000000000000) != 0 || (aBlock & 0x4000000000000000) != 0)
  {
    uint64_t v7 = (uint64_t)sub_100252AD8(aBlock);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = aBlock & 0xFFFFFFFFFFFFFF8;
  }
  *((void *)&v46 + 1) = sub_1001F081C(&qword_100584688);
  *(void *)&long long aBlock = v7;
  sub_1002C22B4((uint64_t)&aBlock, 3uLL);
  *((void *)&v46 + 1) = &type metadata for Bool;
  LOBYTE(aBlock) = 1;
  sub_1002C22B4((uint64_t)&aBlock, 5uLL);
  sub_1001F6204(0, &qword_100584690);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F560;
  sub_1001F6204(0, &qword_100584698);
  *(void *)(v8 + 32) = static TTSAssetType.gryphonVoice.getter();
  *(void *)&long long aBlock = v8;
  specialized Array._endMutation()();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)static TTSAsset.bestAsset(ofTypes:matching:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRelease();
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1001F5F88(v10, (uint64_t)qword_100594C28);
    id v11 = v2;
    id v12 = v9;
    id v43 = v11;
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v17 = dispatch thunk of SynthesisVoice.name.getter();
      if (v18)
      {
        *(void *)&long long aBlock = v17;
        *((void *)&aBlock + 1) = v18;
        uint64_t v19 = String.init<A>(reflecting:)();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v19 = 7104878;
      }
      *(void *)&long long aBlock = sub_1002344D8(v19, v21, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)&long long aBlock = v13;
      id v34 = v13;
      uint64_t v35 = String.init<A>(reflecting:)();
      *(void *)&long long aBlock = sub_1002344D8(v35, v36, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s found asset on disk : %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    uint64_t v33 = v43;
    goto LABEL_20;
  }
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10048F560;
  *(void *)(v22 + 32) = v2;
  *(void *)&long long aBlock = v22;
  specialized Array._endMutation()();
  *(void *)(swift_allocObject() + 16) = v2;
  id v42 = v2;
  dispatch thunk of DaemonSession.subscribe(voices:reply:)();
  swift_bridgeObjectRelease();
  swift_release();
  *((void *)&v46 + 1) = &type metadata for Bool;
  LOBYTE(aBlock) = 0;
  sub_1002C22B4((uint64_t)&aBlock, 5uLL);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10048F560;
  *(void *)(v23 + 32) = static TTSAssetType.gryphonVoice.getter();
  *(void *)&long long aBlock = v23;
  specialized Array._endMutation()();
  uint64_t v24 = (void *)static TTSAsset.bestAsset(ofTypes:matching:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
    uint64_t v33 = v42;
LABEL_20:

    return;
  }
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_1001F5F88(v25, (uint64_t)qword_100594C28);
  id v26 = v24;
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)unint64_t v29 = 136315138;
    id v30 = v26;
    uint64_t v31 = String.init<A>(reflecting:)();
    uint64_t v44 = sub_1002344D8(v31, v32, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Staring download of %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *(unsigned char *)(a1 + 112) = 1;
  id v37 = [self mainBundle];
  sub_1001F618C(v37);
  if (v38)
  {
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v39 = 0;
  }
  uint64_t v47 = sub_1001F5AF8;
  uint64_t v48 = 0;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v46 = sub_1001F5C60;
  *((void *)&v46 + 1) = &unk_10050C020;
  uint64_t v40 = _Block_copy(&aBlock);
  uint64_t v47 = sub_1001F61FC;
  uint64_t v48 = a1;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v46 = sub_1001F5F1C;
  *((void *)&v46 + 1) = &unk_10050C048;
  uint64_t v41 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v26 downloadWithReservation:v39 useBattery:1 progress:v40 then:v41];

  _Block_release(v41);
  _Block_release(v40);
}

void sub_1001F58C8(uint64_t a1, void *a2)
{
  os_log_type_t v4 = static os_log_type_t.error.getter();
  log = sub_1001B1B60();
  if (os_log_type_enabled(log, v4))
  {
    id v5 = a2;
    swift_errorRetain();
    id v6 = v5;
    swift_errorRetain();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    type metadata accessor for SynthesisVoice();
    id v8 = v6;
    uint64_t v9 = String.init<A>(reflecting:)();
    sub_1002344D8(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    if (a1)
    {
      swift_errorRetain();
      sub_1001F081C((uint64_t *)&unk_100585FE0);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    sub_1002344D8(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v4, "Failed to subscribe to greeting voice %s: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1001F5AF8()
{
  if (qword_100583A10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1001F5F88(v0, (uint64_t)qword_100594C28);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    id v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v2 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "TTS model download progress: %f", v2, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001F5C60(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, double))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

void sub_1001F5CD0(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_100583A10 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1001F5F88(v4, (uint64_t)qword_100594C28);
    id v5 = a1;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)id v8 = 136315138;
      sub_1001F6204(0, &qword_100584690);
      id v9 = v5;
      uint64_t v10 = String.init<A>(reflecting:)();
      sub_1002344D8(v10, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Done downloading %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    *(unsigned char *)(a2 + 112) = 0;
    unint64_t v13 = *(void (**)(uint64_t))(a2 + 120);
    uint64_t v14 = swift_retain();
    v13(v14);
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    id v12 = sub_1001B1B60();
    os_log(_:dso:log:_:_:)();

    *(unsigned char *)(a2 + 112) = 0;
  }
}

void sub_1001F5F1C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1001F5F88(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_1001F5FC0()
{
  sub_1001F505C(v0);
}

uint64_t sub_1001F5FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001F5FD8()
{
  return swift_release();
}

unint64_t sub_1001F5FE0()
{
  unint64_t result = qword_100584FF0;
  if (!qword_100584FF0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584FF0);
  }
  return result;
}

unint64_t sub_1001F6030()
{
  unint64_t result = qword_100585000;
  if (!qword_100585000)
  {
    sub_1001F08B4((uint64_t *)&unk_100584B00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585000);
  }
  return result;
}

uint64_t sub_1001F6084()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001F60BC(uint64_t a1)
{
  sub_1001F58C8(a1, *(void **)(v1 + 16));
}

id sub_1001F60C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a4 voiceSimilarToVoice:a1 inSiriSessionLanguage:v6];

  return v7;
}

uint64_t sub_1001F612C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1001F618C(void *a1)
{
  id v2 = [a1 bundleIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1001F61FC(void *a1)
{
  sub_1001F5CD0(a1, v1);
}

uint64_t sub_1001F6204(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1001F6240(uint64_t a1)
{
  return sub_1001F4588(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001F6248()
{
  uint64_t v1 = sub_1001F081C(qword_1005846A8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001F62DC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(qword_1005846A8);
  sub_1001F63E4(v4);

  return sub_1001F4798(a1, a2);
}

uint64_t sub_1001F6340()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F6378()
{
  return sub_1001F32B4();
}

uint64_t sub_1001F63CC()
{
  return swift_slowDealloc();
}

uint64_t sub_1001F63E4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1001F6418(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_1001F643C()
{
  return v0 + 8;
}

uint64_t sub_1001F644C()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001F64F8()
{
  uint64_t v48 = *v0;
  uint64_t v1 = v48;
  uint64_t v2 = *(void *)(v48 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1001F75C4();
  uint64_t v5 = v4;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v50 = (char *)&v41 - v6;
  sub_1001F75C4();
  uint64_t v53 = v7;
  ((void (*)(void))__chkstk_darwin)();
  sub_1001F7650();
  uint64_t v47 = v8;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v52 = (char *)&v41 - v9;
  sub_1001F75C4();
  uint64_t v11 = v10;
  uint64_t v12 = v10;
  ((void (*)(void))__chkstk_darwin)();
  sub_1001F7650();
  uint64_t v49 = v13;
  uint64_t v14 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v51 = (char *)&v41 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v41 - v19;
  unint64_t v21 = *(void **)((char *)v0 + *(void *)(v1 + 128));
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 objectForKey:v22];

  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1001F75B4(&v55, v56);
  }
  else
  {
    memset(v56, 0, 32);
  }
  sub_1001F081C((uint64_t *)&unk_100584CA0);
  int v24 = swift_dynamicCast();
  sub_1001F0530((uint64_t)v20, v24 ^ 1u, 1, v2);
  uint64_t v25 = *(void (**)(void))(v12 + 16);
  sub_1001F7610();
  v25();
  sub_1001F75DC((uint64_t)v18);
  if (v32)
  {
    id v26 = *(void (**)(void))(v12 + 8);
    sub_1001F7640();
    v26();
  }
  else
  {
    uint64_t v44 = v20;
    uint64_t v45 = v12;
    uint64_t v43 = v5;
    uint64_t v46 = v11;
    os_log_type_t v28 = v52;
    uint64_t v27 = v53;
    id v42 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    v42(v52, v18, v2);
    uint64_t v29 = (uint64_t)v51;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v51, v28, v2);
    sub_1001F0530(v29, 0, 1, v2);
    uint64_t v30 = (uint64_t)&v50[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v31 = (uint64_t)v50;
    sub_1001F7610();
    v25();
    sub_1001F7610();
    v25();
    sub_1001F75DC(v31);
    if (v32)
    {
      id v26 = *(void (**)(void))(v45 + 8);
      ((void (*)(uint64_t, uint64_t))v26)(v29, v3);
      sub_1001F7630();
      v33();
      sub_1001F75DC(v30);
      uint64_t v34 = v43;
      if (v32)
      {
        ((void (*)(uint64_t, uint64_t))v26)(v31, v3);
        char v35 = 0;
LABEL_17:
        unint64_t v20 = v44;
        goto LABEL_18;
      }
    }
    else
    {
      sub_1001F7610();
      v25();
      sub_1001F75DC(v30);
      if (!v36)
      {
        v42(v47, (char *)v30, v2);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        NSString v39 = *(void (**)(void))(v53 + 8);
        sub_1001F7620();
        v39();
        id v26 = *(void (**)(void))(v45 + 8);
        sub_1001F7640();
        v26();
        sub_1001F7620();
        v39();
        sub_1001F7620();
        v39();
        sub_1001F7640();
        v26();
        char v35 = v38 ^ 1;
        goto LABEL_17;
      }
      id v26 = *(void (**)(void))(v45 + 8);
      ((void (*)(char *, uint64_t))v26)(v51, v3);
      id v37 = *(void (**)(void))(v53 + 8);
      sub_1001F7630();
      v37();
      sub_1001F7630();
      v37();
      uint64_t v34 = v43;
    }
    unint64_t v20 = v44;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, TupleTypeMetadata2);
  }
  char v35 = 1;
LABEL_18:
  ((void (*)(char *, uint64_t))v26)(v20, v3);
  return v35 & 1;
}

void sub_1001F6A44()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  type metadata accessor for Optional();
  sub_1001F75C4();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = v1;
  uint64_t v7 = *(void **)((char *)v0 + *(void *)(v1 + 128));
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v4, (uint64_t)v0 + *(void *)(v6 + 120));
  uint64_t v9 = 0;
  if (sub_1001F758C((uint64_t)v5, 1, v2) != 1)
  {
    uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v5, v2);
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v7 setObject:v9 forKey:v10];
  swift_unknownObjectRelease();
}

uint64_t sub_1001F6BB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1001F6BE0()
{
  swift_bridgeObjectRelease();
  type metadata accessor for Optional();
  sub_1001F75FC();
  sub_1001F7664();
  v1();

  return v0;
}

uint64_t sub_1001F6C7C()
{
  sub_1001F6BE0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Checksums()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001F6CEC()
{
  return sub_1001F64F8() & 1;
}

void sub_1001F6D14()
{
}

void *sub_1001F6D38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v68 = a4;
  uint64_t v7 = type metadata accessor for SHA256();
  sub_1001F75C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SHA256Digest();
  sub_1001F75C4();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v60 - v20;
  uint64_t v67 = a3;
  uint64_t v22 = Data.init(contentsOf:options:)();
  *(void *)&long long v69 = v19;
  char v62 = v21;
  uint64_t v63 = v15;
  unint64_t v65 = v29;
  uint64_t v66 = v22;
  uint64_t v64 = v13;
  uint64_t v70 = a1;
  uint64_t v61 = a2;
  sub_1001F74F0((unint64_t *)&qword_100584830, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  unint64_t v30 = v65;
  uint64_t v31 = v9;
  switch(v65 >> 62)
  {
    case 1uLL:
      uint64_t v34 = v66;
      uint64_t v35 = v69;
      if (v34 >> 32 < (int)v34) {
        goto LABEL_29;
      }
      unint64_t v60 = v65 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1001F7440(v66, v65);
      sub_1003592BC((int)v34, v34 >> 32);
      sub_1001F7498(v34, v30);
      break;
    case 2uLL:
      uint64_t v36 = v66;
      uint64_t v37 = *(void *)(v66 + 16);
      uint64_t v38 = *(void *)(v66 + 24);
      sub_1001F7440(v66, v65);
      swift_retain();
      swift_retain();
      sub_1003592BC(v37, v38);
      swift_release();
      swift_release();
      sub_1001F7498(v36, v30);
      goto LABEL_12;
    case 3uLL:
      sub_10035939C();
      uint64_t v33 = v66;
      goto LABEL_11;
    default:
      uint64_t v32 = v66;
      sub_10035939C();
      uint64_t v33 = v32;
LABEL_11:
      sub_1001F7498(v33, v30);
LABEL_12:
      uint64_t v35 = v69;
      break;
  }
  NSString v39 = v62;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v35, v39, v64);
  sub_1001F74F0(&qword_100584838, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v40 = v71;
  uint64_t v41 = v72;
  uint64_t v42 = v71[2];
  if (v72 == v42)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v44 = v70;
LABEL_15:
    swift_bridgeObjectRelease();
    sub_1001F7664();
    v45();
    unint64_t v71 = v43;
    sub_1001F081C(&qword_10058B600);
    sub_1001F7538();
    uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v48 = v47;
    sub_1001F7498(v66, v65);
    type metadata accessor for URL();
    sub_1001F75FC();
    sub_1001F7664();
    v49();
    swift_bridgeObjectRelease();
    return sub_10023D254(v44, v61, v46, v48, (uint64_t)v68);
  }
  else
  {
    if (v72 >= v42)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      JUMPOUT(0x1001F7380);
    }
    uint64_t v43 = _swiftEmptyArrayStorage;
    long long v69 = xmmword_10048F550;
    unint64_t v50 = v72;
    while ((v41 & 0x8000000000000000) == 0)
    {
      if (v50 >= v40[2]) {
        goto LABEL_28;
      }
      char v51 = *((unsigned char *)v40 + v50 + 32);
      sub_1001F081C(&qword_100584B20);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = v69;
      *(void *)(v52 + 56) = &type metadata for UInt8;
      *(void *)(v52 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v52 + 32) = v51;
      uint64_t v53 = String.init(format:_:)();
      uint64_t v55 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1003A47C8();
        uint64_t v43 = v58;
      }
      unint64_t v56 = v43[2];
      if (v56 >= v43[3] >> 1)
      {
        sub_1003A47C8();
        uint64_t v43 = v59;
      }
      ++v50;
      v43[2] = v56 + 1;
      char v57 = &v43[2 * v56];
      v57[4] = v53;
      v57[5] = v55;
      uint64_t v44 = v70;
      if (v42 == v50) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    swift_once();
    uint64_t v23 = type metadata accessor for Logger();
    sub_1001F5F88(v23, (uint64_t)qword_100594C28);
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "couldn't read contents of toneURL", v26, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for URL();
    sub_1001F75FC();
    sub_1001F7664();
    v27();
    type metadata accessor for FileChecksum();
    swift_deallocPartialClassInstance();
    return 0;
  }
}

uint64_t sub_1001F7390()
{
  sub_1001F6BB0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FileChecksum()
{
  uint64_t result = qword_100584758;
  if (!qword_100584758) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001F7408()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001F7440(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1001F7498(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1001F74F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F7538()
{
  unint64_t result = qword_100585930;
  if (!qword_100585930)
  {
    sub_1001F08B4(&qword_10058B600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585930);
  }
  return result;
}

uint64_t sub_1001F758C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

_OWORD *sub_1001F75B4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1001F75DC(uint64_t a1)
{
  return sub_1001F758C(a1, 1, v1);
}

BOOL sub_1001F7670(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1001F7680(uint64_t a1, char a2)
{
}

Swift::Int sub_1001F76A8(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1001F76F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001F7670(*a1, *a2);
}

Swift::Int sub_1001F76FC()
{
  return sub_1001F76A8(*v0);
}

void sub_1001F7704(uint64_t a1)
{
  sub_1001F7680(a1, *v1);
}

Swift::Int sub_1001F770C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001F7750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *(void *)(a3 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v27 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v28 = v10;
  uint64_t v11 = type metadata accessor for AudioInterruptionProviderIdentifier();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = (char *)&v26 + *(int *)(v13 + 56) - v14;
  uint64_t v17 = *(void *)(v11 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18((char *)&v26 - v14, a1, v11);
  v18(v16, a2, v11);
  LODWORD(a2) = sub_1001F758C((uint64_t)v16, 1, a3);
  int v19 = sub_1001F758C((uint64_t)v15, 1, a3);
  if (a2 != 1)
  {
    if (v19 != 1)
    {
      uint64_t v21 = v29;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v22(v9, v15, a3);
      uint64_t v23 = v27;
      v22(v27, v16, a3);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v24 = *(void (**)(char *, uint64_t))(v21 + 8);
      v24(v23, a3);
      v24(v9, a3);
      return v20 & 1;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, a3);
    goto LABEL_6;
  }
  if (v19 != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v11);
    char v20 = 0;
    return v20 & 1;
  }
  char v20 = 1;
  return v20 & 1;
}

uint64_t sub_1001F7A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001F7750(a1, a2, *(void *)(a3 + 16));
}

BOOL sub_1001F7A18(uint64_t *a1)
{
  return sub_1001F24AC(*a1, *v1);
}

uint64_t sub_1001F7A24@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002D0E4C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1001F7A54(void *a1, uint64_t *a2)
{
  return sub_1002D0E50(a1, *a2);
}

uint64_t sub_1001F7A5C(uint64_t *a1)
{
  return sub_1002D0E7C(*a1);
}

uint64_t sub_1001F7A64(uint64_t *a1)
{
  return sub_1002D0E8C(*a1);
}

uint64_t sub_1001F7A6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001F049C();
  *a1 = result;
  return result;
}

uint64_t sub_1001F7A94()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1001F7AD4()
{
  sub_1001F7A94();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyAudioInterruptionProvider()
{
  return self;
}

ValueMetadata *type metadata accessor for AudioInterruptionProviderSetActiveOptions()
{
  return &type metadata for AudioInterruptionProviderSetActiveOptions;
}

unint64_t sub_1001F7B40()
{
  unint64_t result = qword_100584900;
  if (!qword_100584900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584900);
  }
  return result;
}

unint64_t sub_1001F7B90()
{
  unint64_t result = qword_100584908;
  if (!qword_100584908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584908);
  }
  return result;
}

unint64_t sub_1001F7BE0()
{
  unint64_t result = qword_100584910;
  if (!qword_100584910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584910);
  }
  return result;
}

unint64_t sub_1001F7C30()
{
  unint64_t result = qword_100584918;
  if (!qword_100584918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584918);
  }
  return result;
}

uint64_t type metadata accessor for AudioInterruptionProviderIdentifier()
{
  return sub_1001F919C();
}

uint64_t sub_1001F7C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_1001F7C9C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *sub_1001F7D18(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v8) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  uint64_t v11 = *(_DWORD *)(v6 + 80);
  if (v11 > 7 || (*(_DWORD *)(v7 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
    return a1;
  }
  if (!v8)
  {
    if (!*((unsigned char *)a2 + v9)) {
      goto LABEL_31;
    }
    int v15 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
    if (v9 > 3) {
      int v15 = 0;
    }
    if (v9)
    {
      int v16 = v9 <= 3 ? v9 : 4;
      switch(v16)
      {
        case 2:
          int v17 = *a2;
          break;
        case 3:
          int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)a2;
          break;
        default:
          int v17 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
LABEL_30:
    memcpy(a1, a2, v10);
    return a1;
  }
  if (sub_1001F758C((uint64_t)a2, *(unsigned int *)(v7 + 84), v5)) {
    goto LABEL_30;
  }
LABEL_31:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v5);
  if (!v8) {
    *((unsigned char *)a1 + v9) = 0;
  }
  return a1;
}

uint64_t sub_1001F7ED0(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5)
  {
    uint64_t v11 = *(void *)(v3 - 8);
    uint64_t result = sub_1001F758C((uint64_t)a1, v5, v3);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_17;
  }
  int v8 = (*((unsigned __int8 *)a1 + v6) - 1) << (8 * v6);
  if (v6 > 3) {
    int v8 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v9 = v6 | v8;
  uint64_t result = (v9 + 1);
  if (v9 == -1)
  {
LABEL_17:
    size_t v10 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v4 + 8);
    return v10(a1, v3);
  }
  return result;
}

unsigned char *sub_1001F8028(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!sub_1001F758C((uint64_t)a2, v7, v5))
    {
LABEL_22:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v8)) {
      goto LABEL_22;
    }
    int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
    if (v8 > 3) {
      int v9 = 0;
    }
    if (v8)
    {
      int v10 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
      switch(v10)
      {
        case 2:
          int v11 = *a2;
          break;
        case 3:
          int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v11 = *(_DWORD *)a2;
          break;
        default:
          int v11 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v11 = 0;
    }
    if ((v11 | v9) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_1001F819C(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (!v7)
  {
    char v11 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v12 = (*((unsigned __int8 *)a1 + v8) - 1) << v11;
      if (v8 > 3) {
        int v12 = 0;
      }
      if (v8)
      {
        int v13 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
        switch(v13)
        {
          case 2:
            int v14 = *a1;
            break;
          case 3:
            int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v14 = *(_DWORD *)a1;
            break;
          default:
            int v14 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v14 = 0;
      }
      if ((v14 | v12) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v8)) {
          goto LABEL_54;
        }
        int v15 = (*((unsigned __int8 *)a2 + v8) - 1) << v11;
        if (v8 > 3) {
          int v15 = 0;
        }
        if (v8)
        {
          int v16 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
          switch(v16)
          {
            case 2:
              int v17 = *a2;
              break;
            case 3:
              int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v17 = *(_DWORD *)a2;
              break;
            default:
              int v17 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v17 = 0;
        }
        if ((v17 | v15) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v8))
    {
LABEL_49:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    int v18 = (*((unsigned __int8 *)a2 + v8) - 1) << v11;
    if (v8 > 3) {
      int v18 = 0;
    }
    if (v8)
    {
      if (v8 <= 3) {
        int v19 = *(void *)(v6 + 64);
      }
      else {
        int v19 = 4;
      }
      switch(v19)
      {
        case 2:
          int v20 = *a2;
          break;
        case 3:
          int v20 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v20 = *(_DWORD *)a2;
          break;
        default:
          int v20 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v20 = 0;
    }
    int v10 = (v20 | v18) + 1;
LABEL_43:
    if (v10)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v9 = sub_1001F758C((uint64_t)a1, v7, v5);
  int v10 = sub_1001F758C((uint64_t)a2, v7, v5);
  if (!v9) {
    goto LABEL_43;
  }
  if (!v10)
  {
LABEL_54:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
    if (!v7) {
      *((unsigned char *)a1 + v8) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v21 = v8;
  }
  else {
    size_t v21 = v8 + 1;
  }
  memcpy(a1, a2, v21);
  return a1;
}

unsigned char *sub_1001F8490(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!sub_1001F758C((uint64_t)a2, v7, v5))
    {
LABEL_22:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v8)) {
      goto LABEL_22;
    }
    int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
    if (v8 > 3) {
      int v9 = 0;
    }
    if (v8)
    {
      int v10 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
      switch(v10)
      {
        case 2:
          int v11 = *a2;
          break;
        case 3:
          int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v11 = *(_DWORD *)a2;
          break;
        default:
          int v11 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v11 = 0;
    }
    if ((v11 | v9) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_1001F8604(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (!v7)
  {
    char v11 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v12 = (*((unsigned __int8 *)a1 + v8) - 1) << v11;
      if (v8 > 3) {
        int v12 = 0;
      }
      if (v8)
      {
        int v13 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
        switch(v13)
        {
          case 2:
            int v14 = *a1;
            break;
          case 3:
            int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v14 = *(_DWORD *)a1;
            break;
          default:
            int v14 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v14 = 0;
      }
      if ((v14 | v12) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v8)) {
          goto LABEL_54;
        }
        int v15 = (*((unsigned __int8 *)a2 + v8) - 1) << v11;
        if (v8 > 3) {
          int v15 = 0;
        }
        if (v8)
        {
          int v16 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
          switch(v16)
          {
            case 2:
              int v17 = *a2;
              break;
            case 3:
              int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v17 = *(_DWORD *)a2;
              break;
            default:
              int v17 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v17 = 0;
        }
        if ((v17 | v15) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v8))
    {
LABEL_49:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    int v18 = (*((unsigned __int8 *)a2 + v8) - 1) << v11;
    if (v8 > 3) {
      int v18 = 0;
    }
    if (v8)
    {
      if (v8 <= 3) {
        int v19 = *(void *)(v6 + 64);
      }
      else {
        int v19 = 4;
      }
      switch(v19)
      {
        case 2:
          int v20 = *a2;
          break;
        case 3:
          int v20 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v20 = *(_DWORD *)a2;
          break;
        default:
          int v20 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v20 = 0;
    }
    int v10 = (v20 | v18) + 1;
LABEL_43:
    if (v10)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v9 = sub_1001F758C((uint64_t)a1, v7, v5);
  int v10 = sub_1001F758C((uint64_t)a2, v7, v5);
  if (!v9) {
    goto LABEL_43;
  }
  if (!v10)
  {
LABEL_54:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
    if (!v7) {
      *((unsigned char *)a1 + v8) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v21 = v8;
  }
  else {
    size_t v21 = v8 + 1;
  }
  memcpy(a1, a2, v21);
  return a1;
}

uint64_t sub_1001F88F8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 > 3) {
            LODWORD(v7) = 4;
          }
          switch((int)v7)
          {
            case 2:
              LODWORD(v7) = *a1;
              break;
            case 3:
              LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v7) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v7) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v7 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v14 = sub_1001F758C((uint64_t)a1, v5, v4);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void sub_1001F8A7C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  size_t v11 = *(void *)(v8 + 64);
  if (v9) {
    size_t v12 = *(void *)(v8 + 64);
  }
  else {
    size_t v12 = v11 + 1;
  }
  char v13 = 8 * v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 != 0 && v14)
  {
    if (v12 <= 3)
    {
      unsigned int v16 = ((v15 + ~(-1 << v13)) >> v13) + 1;
      if (HIWORD(v16))
      {
        int v6 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v6 = 2;
      }
      else
      {
        int v6 = v16 > 1;
      }
    }
    else
    {
      int v6 = 1;
    }
  }
  if (v10 < a2)
  {
    unsigned int v17 = ~v10 + a2;
    if (v12 < 4)
    {
      int v18 = (v17 >> v13) + 1;
      if (v12)
      {
        int v19 = v17 & ~(-1 << v13);
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v18;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v12] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x1001F8D30);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v9 >= 2)
        {
          if (a2 + 1 <= v9)
          {
            if (a2 != -1)
            {
              uint64_t v23 = a2 + 1;
              sub_1001F0530((uint64_t)a1, v23, v9, v7);
            }
          }
          else
          {
            if (v11 <= 3) {
              int v20 = ~(-1 << (8 * v11));
            }
            else {
              int v20 = -1;
            }
            if (v11)
            {
              int v21 = v20 & (a2 - v9);
              if (v11 <= 3) {
                int v22 = v11;
              }
              else {
                int v22 = 4;
              }
              bzero(a1, v11);
              switch(v22)
              {
                case 2:
                  *(_WORD *)a1 = v21;
                  break;
                case 3:
                  *(_WORD *)a1 = v21;
                  a1[2] = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)a1 = v21;
                  break;
                default:
                  *a1 = v21;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_1001F8D68(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(void *)(v3 + 64);
  if (v4) {
    return sub_1001F758C((uint64_t)a1, v4, v2);
  }
  if (!*((unsigned char *)a1 + v5)) {
    return 0;
  }
  int v7 = (*((unsigned __int8 *)a1 + v5) - 1) << (8 * v5);
  if (v5 > 3) {
    int v7 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v7) + 1;
}

void sub_1001F8E50(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  size_t v7 = *(void *)(v5 + 64);
  if (v6 >= a2)
  {
    if (v6)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v7] = 0;
      if (!a2) {
        return;
      }
    }
    sub_1001F0530((uint64_t)a1, a2, v6, v4);
    return;
  }
  unsigned int v8 = ~v6 + a2;
  if (v7 >= 4)
  {
    bzero(a1, v7);
    *(_DWORD *)a1 = v8;
    LOBYTE(v9) = 1;
    if (v6) {
      return;
    }
    goto LABEL_19;
  }
  int v9 = (v8 >> (8 * v7)) + 1;
  if (!v7)
  {
LABEL_18:
    if (v6) {
      return;
    }
    goto LABEL_19;
  }
  int v10 = v8 & ~(-1 << (8 * v7));
  bzero(a1, v7);
  if (v7 == 3)
  {
    *(_WORD *)a1 = v10;
    a1[2] = BYTE2(v10);
    goto LABEL_18;
  }
  if (v7 == 2)
  {
    *(_WORD *)a1 = v10;
    if (v6) {
      return;
    }
    goto LABEL_19;
  }
  *a1 = v10;
  if (!v6) {
LABEL_19:
  }
    a1[v7] = v9;
}

unsigned char *initializeBufferWithCopyOfBuffer for AudioInterruptionPriority(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioInterruptionPriority(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioInterruptionPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F9100);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1001F9128(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1001F9130(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AudioInterruptionPriority()
{
  return &type metadata for AudioInterruptionPriority;
}

unint64_t sub_1001F9150()
{
  unint64_t result = qword_1005849C0;
  if (!qword_1005849C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005849C0);
  }
  return result;
}

uint64_t sub_1001F919C()
{
  return swift_getGenericMetadata();
}

uint64_t TUConversationState.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0x64656E696F6A2ELL;
  switch(a1)
  {
    case 0:
      uint64_t v3 = 0x69746961772ELL;
      goto LABEL_7;
    case 1:
      return 0x697261706572702ELL;
    case 2:
      uint64_t v3 = 0x696E696F6A2ELL;
      goto LABEL_7;
    case 3:
      return result;
    case 4:
      uint64_t v3 = 0x697661656C2ELL;
LABEL_7:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
      break;
    default:
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }
  return result;
}

uint64_t sub_1001F9304()
{
  return TUConversationState.debugDescription.getter(*v0);
}

void sub_1001F930C()
{
  id v1 = objc_allocWithZone(v0);
  sub_1001F9358();
}

void sub_1001F9358()
{
  sub_1001FCC38();
  int v2 = v0;
  Swift::String v4 = v3;
  unsigned int v6 = v5;
  uint64_t v8 = v7;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v9);
  sub_1001FCCD0();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  __chkstk_darwin(v10);
  sub_1001FCCD0();
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_1001FCCA0();
  *(void *)&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_queue] = v4;
  void *v1 = v4;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v11);
  id v15 = v4;
  unsigned int v16 = v2;
  LOBYTE(v2) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v1, v11);
  if (v2)
  {
    sub_1001F6204(0, (unint64_t *)&unk_100584AF0);
    id v17 = sub_1001F98D8();
    id v18 = v6;
    id v19 = sub_10032AA64(v17, v18);
    int v20 = (id (**)(void *))&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_isAccountActive];
    *int v20 = sub_1001F9984;
    v20[1] = 0;
    int v21 = (id (**)(void *, uint64_t, uint64_t, void *))&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_outgoingSessionProviderGenerator];
    *int v21 = sub_1001F99DC;
    v21[1] = 0;
    int v22 = (void (**)(void *, uint64_t, void *, char, char))&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_outgoingChatGenerator];
    *int v22 = sub_1001F9AF8;
    v22[1] = 0;
    uint64_t v23 = (uint64_t (**)(void *, void *))&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_isDestinationValid];
    *uint64_t v23 = sub_1001F9C50;
    v23[1] = 0;
    int v24 = (void (**)(void *, void *, void *))&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_destinationsGenerator];
    *int v24 = sub_1001F9CDC;
    v24[1] = 0;
    id v41 = v18;
    uint64_t v25 = sub_1001F618C(v41);
    if (v26)
    {
      uint64_t v27 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0) {
        uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v27)
      {
        uint64_t v28 = self;
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v30 = objc_msgSend(v28, "tu_contactStoreConfigurationForBundleIdentifier:", v29);

LABEL_9:
        uint64_t v40 = v30;
        id v31 = [objc_allocWithZone((Class)CNContactStore) initWithConfiguration:v30];
        id v32 = [objc_allocWithZone((Class)TUContactsDataProvider) initWithContactsDataSource:v31];

        *(void *)&v16[OBJC_IVAR___CSDTinCanIDSProviderDelegate_contactsDataProvider] = v32;
        v44.receiver = v16;
        v44.super_class = ObjectType;
        id v33 = objc_msgSendSuper2(&v44, "initWithCapabilities:queue:", v8, v15);
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v33;
        *(void *)(v34 + 24) = v19;
        v43[4] = sub_1001FC9F0;
        v43[5] = v34;
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 1107296256;
        v43[2] = sub_1002C2C88;
        v43[3] = &unk_10050C348;
        uint64_t v35 = _Block_copy(v43);
        id v36 = v33;
        id v37 = v19;
        static DispatchQoS.unspecified.getter();
        sub_1001FCB2C((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1001F081C((uint64_t *)&unk_100584B00);
        sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();

        _Block_release(v35);
        swift_unknownObjectRelease();

        sub_1001F7664();
        v38();
        sub_1001F7664();
        v39();
        swift_release();
        sub_1001FCC08();
        return;
      }
      swift_bridgeObjectRelease();
    }
    id v30 = objc_msgSend(self, "tu_contactStoreConfigurationForBundleIdentifier:", TUBundleIdentifierTinCan);
    goto LABEL_9;
  }
  __break(1u);
}

id sub_1001F98D8()
{
  id v0 = [objc_allocWithZone((Class)CXProviderConfiguration) init];
  [v0 setMaximumCallGroups:1];
  [v0 setMaximumCallsPerCallGroup:1];
  [v0 setSupportsAudioOnly:1];
  [v0 setIncludesCallsInRecents:0];
  sub_1002DF400((uint64_t)&off_10050A920);
  CXProviderConfiguration.supportedHandleTypes.setter();
  [v0 setSupportsCurrentPlatform:0];
  return v0;
}

id sub_1001F9984(void *a1)
{
  id v1 = [a1 account];
  if (!v1) {
    return 0;
  }
  int v2 = v1;
  id v3 = [v1 isActive];

  return v3;
}

id sub_1001F99DC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = [a1 account];
  uint64_t v7 = sub_1002478CC(a2);
  sub_100393B1C();
  uint64_t v9 = v8;
  id v10 = objc_allocWithZone((Class)IDSSession);
  id result = sub_1001FC7A4(v6, v7, v9);
  if (result)
  {
    uint64_t v12 = result;
    sub_1001F6204(0, &qword_100584B18);
    return sub_1001F9A9C(v12, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001F9A9C(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithSession:a1 queue:a2];

  return v4;
}

void sub_1001F9AF8(void *a1, uint64_t a2, void *a3, char a4, char a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, a2);
  id v14 = [a3 handle];
  id v15 = [v14 tuHandle];

  if (v15)
  {
    objc_allocWithZone((Class)CSDIDSChat);
    objc_msgSend(sub_1001FC878(a1, (uint64_t)v12, v15, a4 & 1, a5 & 1), "setRemoteUplinkMuted:", 1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001F9C50(void *a1, void *a2)
{
  id v3 = [a1 handle];
  id v4 = [v3 tuHandle];

  if (!v4) {
    return 0;
  }
  sub_1001F612C(a2, (SEL *)&selRef_countryCode);
  if (!v5) {
    return 0;
  }
  swift_bridgeObjectRelease();
  return 1;
}

void sub_1001F9CDC(void *a1, void *a2, void *a3)
{
  v27[2] = (uint64_t)&_swiftEmptySetSingleton;
  id v6 = [a1 handle];
  id v7 = [v6 tuHandle];

  if (v7)
  {
    sub_1001F612C(a2, (SEL *)&selRef_countryCode);
    if (v8)
    {
      type metadata accessor for TinCanIDSProviderDelegate();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v11 = [ObjCClassFromMetadata handleByFullyQualifyingHandle:v7 usingCountryCode:v10];

      NSString v12 = [v11 value];
      if (!v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = sub_10034762C(v12);
      if (v14)
      {
        sub_1002DFB58(v27, v13, v14);
        swift_bridgeObjectRelease();
        sub_1001F612C(a1, (SEL *)&selRef_contactIdentifier);
        if (v15)
        {
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v17 = [a3 labeledHandlesForContactWithIdentifier:v16];

          sub_1001F6204(0, &qword_100584B10);
          unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v18 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v19) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v19)
            {
LABEL_9:
              if (v19 < 1)
              {
                __break(1u);
                return;
              }
              for (uint64_t i = 0; i != v19; ++i)
              {
                if ((v18 & 0xC000000000000001) != 0) {
                  id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v21 = *(id *)(v18 + 8 * i + 32);
                }
                int v22 = v21;
                id v23 = [v21 handle];
                NSString v24 = [v23 value];

                if (!v24)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  NSString v24 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                }
                uint64_t v25 = sub_10034762C(v24);
                if (v26)
                {
                  sub_1002DFB58(v27, v25, v26);

                  swift_bridgeObjectRelease();
                }
                else
                {
                }
              }
            }
          }

          swift_bridgeObjectRelease();
LABEL_23:

          return;
        }
      }
    }
    id v11 = v7;
    goto LABEL_23;
  }
}

uint64_t sub_1001F9FEC(char *a1, void *a2)
{
  id v4 = [a1 incomingChatGenerator];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1001FCA48;
  *(void *)(v6 + 24) = v5;
  void v10[4] = sub_1001FCA88;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  _DWORD v10[2] = sub_1001FA228;
  v10[3] = &unk_10050C3C0;
  id v7 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [a1 setIncomingChatGenerator:v7];
  _Block_release(v7);
  uint64_t v8 = *(void *)&a1[OBJC_IVAR___CSDTinCanIDSProviderDelegate_queue];
  [a2 setDelegate:a1 queue:v8];
  if (qword_1005839A8 != -1) {
    swift_once();
  }
  [(id)qword_100587AE0 addServiceDelegate:a1 queue:v8];
  return swift_release();
}

id sub_1001FA190(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v10 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, Class))(a5 + 16))(a5, a1, a2, a3 & 1, isa);

  return v10;
}

id sub_1001FA228(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = *(uint64_t (**)(id, id, uint64_t, uint64_t))(a1 + 32);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v9 = a2;
  id v10 = a3;
  id v11 = (void *)v7(v9, v10, a4, v8);
  swift_release();

  swift_bridgeObjectRelease();

  return v11;
}

id sub_1001FA350(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)type metadata accessor for TinCanIDSProviderDelegateCapabilities()) init];
  id v6 = [v2 initWithCapabilities:v5 callSource:a1 queue:a2];

  return v6;
}

id sub_1001FA40C()
{
  v4.receiver = v1;
  v4.super_class = (Class)sub_1001FCCFC();
  id v2 = objc_msgSendSuper2(&v4, "callUpdateForChat:", v0);
  [v2 setMutuallyExclusiveCall:1];
  return v2;
}

void sub_1001FA4D4()
{
  sub_1001FCC38();
  id v2 = v0;
  objc_super v4 = v3;
  id v6 = v5;
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_1001FCC88();
  id v8 = [v4 handle];
  id v9 = [v0 waitingChatWithHandle:v8 isOutgoing:0];

  if (v9)
  {
    id v10 = sub_100008DCC();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();

    [v4 fail];
    sub_1001FCC08();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1005839A8 != -1) {
      swift_once();
    }
    NSString v12 = *(uint64_t (**)(id))&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_isAccountActive];
    id v58 = (id)qword_100587AE0;
    swift_retain();
    char v13 = v12(v58);
    swift_release();
    if (v13)
    {
      uint64_t v14 = *(uint64_t (**)(void *, id))&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_isDestinationValid];
      swift_retain();
      char v15 = v14(v4, v58);
      swift_release();
      if (v15)
      {
        NSString v16 = *(uint64_t (**)(void *, id, id))&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_destinationsGenerator];
        id v17 = *(void **)&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_contactsDataProvider];
        swift_retain();
        char v57 = v6;
        id v18 = v17;
        uint64_t v54 = v16(v4, v58, v18);
        swift_release();

        sub_1001F081C(&qword_100584B90);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10048FAF0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v20;
        *(void *)(inited + 72) = &type metadata for Int;
        *(void *)(inited + 48) = 0;
        *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 88) = v21;
        *(void *)(inited + 120) = &type metadata for Bool;
        *(unsigned char *)(inited + 96) = 1;
        *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 136) = v22;
        *(void *)(inited + 168) = &type metadata for Bool;
        *(unsigned char *)(inited + 144) = 1;
        *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 184) = v23;
        *(void *)(inited + 216) = &type metadata for Bool;
        *(unsigned char *)(inited + 192) = 1;
        uint64_t v52 = Dictionary.init(dictionaryLiteral:)();
        NSString v24 = *(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_outgoingSessionProviderGenerator];
        uint64_t v25 = *(void *)&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_queue];
        swift_retain();
        uint64_t v56 = v24(v58, v54, v52, v25);
        swift_release();
        id v26 = [objc_allocWithZone((Class)CSDExternalIDSDualSession) initAsInitiatorWithSessionProvider:v56];
        id v27 = sub_100008DCC();
        sub_1001F081C(&qword_100584B20);
        uint64_t v28 = sub_1001FCCE4();
        *(_OWORD *)(v28 + 16) = xmmword_10048FB00;
        *(void *)(v28 + 56) = sub_1001F081C(&qword_100584B98);
        *(void *)(v28 + 64) = sub_1001FCB74((unint64_t *)&unk_100584BA0, &qword_100584B98);
        *(void *)(v28 + 32) = v54;
        *(void *)(v28 + 96) = sub_1001F081C((uint64_t *)&unk_100586DF0);
        *(void *)(v28 + 104) = sub_1001FCB74((unint64_t *)&qword_100584BB0, (uint64_t *)&unk_100586DF0);
        *(void *)(v28 + 72) = v52;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        id v55 = [objc_allocWithZone((Class)TUCallProviderManager) init];
        id v53 = [v55 tinCanProvider];
        id v29 = v26;
        [v4 isUpgrade];
        [v29 setInvitationTimeout:(double)TUOutgoingInvitationTimeoutForCallProviderAndIsUpgrade()];

        char v51 = v29;
        id v30 = *(uint64_t (**)(id, uint64_t, void *, id, id))&v2[OBJC_IVAR___CSDTinCanIDSProviderDelegate_outgoingChatGenerator];
        swift_retain();
        id v31 = [v4 callUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v32 = (void *)v30(v29, v1, v4, [v4 isVideo], objc_msgSend(v4, "isRelay"));
        swift_release();
        sub_1001F7664();
        v33();
        [v32 setDelegate:v2];
        id v34 = sub_100008DCC();
        uint64_t v35 = sub_1001FCCB8();
        *(_OWORD *)(v35 + 16) = xmmword_10048F550;
        v59[0] = v32;
        swift_unknownObjectRetain();
        sub_1001F081C(&qword_100584B58);
        uint64_t v36 = String.init<A>(reflecting:)();
        uint64_t v38 = v37;
        *(void *)(v35 + 56) = &type metadata for String;
        *(void *)(v35 + 64) = sub_1001F3B08();
        *(void *)(v35 + 32) = v36;
        *(void *)(v35 + 40) = v38;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v4;
        v59[4] = sub_1001FCBF0;
        v59[5] = v39;
        v59[0] = _NSConcreteStackBlock;
        v59[1] = 1107296256;
        v59[2] = sub_1001FAE84;
        v59[3] = &unk_10050C410;
        uint64_t v40 = _Block_copy(v59);
        id v41 = v4;
        swift_release();
        [v32 startWithVideoAspectRatioDescriptor:v41 inviteCompletion:v40];
        _Block_release(v40);
        [v2 updateCacheWithChat:v32];
        id v42 = [v41 callUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        sub_1001F7664();
        v44();
        id v45 = [objc_allocWithZone((Class)CXCallUpdate) initWithTinCanIDSChat:v32];
        [v57 reportCallWithUUID:isa updated:v45];

        [v41 fulfill];
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        sub_1001FCC08();
        return;
      }
      id v48 = sub_100008DCC();
      static os_log_type_t.error.getter();
      os_log(_:dso:log:type:_:)();
    }
    else
    {
      id v46 = sub_100008DCC();
      static os_log_type_t.error.getter();
      sub_1001F081C(&qword_100584B20);
      uint64_t v47 = sub_1001FCCB8();
      *(_OWORD *)(v47 + 16) = xmmword_10048F550;
      *(void *)(v47 + 56) = type metadata accessor for TinCanIDSService();
      *(void *)(v47 + 64) = sub_1001FCB2C(&qword_100584B88, (void (*)(uint64_t))type metadata accessor for TinCanIDSService);
      *(void *)(v47 + 32) = v58;
      v58;
      sub_1001FCC50();

      swift_bridgeObjectRelease();
    }
    [v4 fail];
    sub_1001FCC08();
  }
}

void sub_1001FADFC(uint64_t a1, char a2, void *a3)
{
  if (a2)
  {
    id v4 = sub_100008DCC();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();

    [a3 fail];
  }
}

uint64_t sub_1001FAE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1001FAF78(uint64_t a1, void *a2)
{
  id v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCC20();
  if ([a2 isRelaying])
  {
    id v11 = [a2 callUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(void *, uint64_t))(v9 + 8))(v2, v7);
    id v13 = [v2 chatWithUUID:isa];
    swift_unknownObjectRelease();

    if (v13)
    {
      id result = [v3 superclass];
      if (result)
      {
        swift_getObjCClassMetadata();
        id result = [(id)swift_getObjCClassFromMetadata() instancesRespondToSelector:"provider:performSetRelayingCallAction:"];
        if (result)
        {
          v23.receiver = v3;
          v23.super_class = ObjectType;
          return objc_msgSendSuper2(&v23, "provider:performSetRelayingCallAction:", a1, a2);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      id v18 = sub_100008DCC();
      static os_log_type_t.error.getter();
      sub_1001F081C(&qword_100584B20);
      uint64_t v19 = sub_1001FCCE4();
      *(_OWORD *)(v19 + 16) = xmmword_10048FB00;
      *(void *)(v19 + 56) = sub_1001F6204(0, &qword_100584B70);
      *(void *)(v19 + 64) = sub_1001FCAC8(&qword_100584B78, &qword_100584B70);
      *(void *)(v19 + 32) = a2;
      id v20 = a2;
      id v21 = [v3 chats];
      sub_1001F081C(&qword_100584B58);
      uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v19 + 96) = sub_1001F081C(&qword_100584B60);
      *(void *)(v19 + 104) = sub_1001FCB74(&qword_100584B68, &qword_100584B60);
      *(void *)(v19 + 72) = v22;
      sub_1001FCC50();

      swift_bridgeObjectRelease();
      return [v20 fail];
    }
  }
  else
  {
    sub_1001F081C(&qword_100584B20);
    uint64_t v15 = sub_1001FCCB8();
    *(_OWORD *)(v15 + 16) = xmmword_10048F550;
    *(void *)(v15 + 56) = sub_1001F6204(0, &qword_100584B70);
    *(void *)(v15 + 64) = sub_1001FCAC8(&qword_100584B78, &qword_100584B70);
    *(void *)(v15 + 32) = a2;
    sub_1001F6204(0, &qword_100584B80);
    id v16 = a2;
    id v17 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    return [v16 fail];
  }
  return result;
}

void sub_1001FB394()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  id v3 = v2;
  uint64_t v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001FCC20();
  if (![v0 superclass])
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_getObjCClassMetadata();
  if ([(id)swift_getObjCClassFromMetadata() instancesRespondToSelector:"provider:performSetMutedCallAction:"])
  {
    v30.receiver = v0;
    v30.super_class = ObjectType;
    objc_msgSendSuper2(&v30, "provider:performSetMutedCallAction:", v5, v3);
  }
  id v11 = [v3 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(void *, uint64_t))(v9 + 8))(v0, v7);
  id v13 = [v0 chatWithUUID:isa];

  if (!v13)
  {
    id v25 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v26 = sub_1001FCCE4();
    *(_OWORD *)(v26 + 16) = xmmword_10048FB00;
    *(void *)(v26 + 56) = sub_1001F6204(0, &qword_100584B48);
    *(void *)(v26 + 64) = sub_1001FCAC8(&qword_100584B50, &qword_100584B48);
    *(void *)(v26 + 32) = v3;
    id v27 = v3;
    id v28 = [v1 chats];
    sub_1001F081C(&qword_100584B58);
    uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(v26 + 96) = sub_1001F081C(&qword_100584B60);
    *(void *)(v26 + 104) = sub_1001FCB74(&qword_100584B68, &qword_100584B60);
    *(void *)(v26 + 72) = v29;
    sub_1001FCC50();

    swift_bridgeObjectRelease();
    [v27 fail];
    goto LABEL_9;
  }
  id v14 = [objc_allocWithZone((Class)CSDMessagingCallMessage) init];
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  [v14 setType:2];
  objc_msgSend(v15, "setSenderMuteUplink:", objc_msgSend(v13, "isMuted"));
  id v16 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v17 = sub_1001FCCB8();
  *(_OWORD *)(v17 + 16) = xmmword_10048F550;
  *(void *)(v17 + 56) = sub_1001F6204(0, &qword_100584B28);
  *(void *)(v17 + 64) = sub_1001FCAC8((unint64_t *)&unk_100584B30, &qword_100584B28);
  *(void *)(v17 + 32) = v15;
  id v18 = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v19 = v18;
  uint64_t v20 = sub_100342308(v19);
  if (v21 >> 60 != 15)
  {
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    Class v24 = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(v22, v23);
    [v13 sendDataUnreliably:v24];
    swift_unknownObjectRelease();

LABEL_9:
    sub_1001FCC08();
    return;
  }
LABEL_12:
  __break(1u);
}

void sub_1001FB7F8()
{
  v5.receiver = v1;
  v5.super_class = (Class)sub_1001FCCFC();
  objc_msgSendSuper2(&v5, "providerDidBegin:", v0);
  id v2 = [v1 provider];
  if (v2)
  {
    id v3 = v2;
    id v4 = sub_1001F98D8();
    [v3 setConfiguration:v4];
  }
}

void sub_1001FB8E4()
{
  sub_1001FCC38();
  id v4 = v1;
  objc_super v5 = (objc_class *)sub_1001FCCFC();
  type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  sub_1001FCCA0();
  uint64_t v8 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v8 - 8);
  sub_1001FCC70();
  uint64_t v9 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  id v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([v4 superclass])
  {
    swift_getObjCClassMetadata();
    if ([(id)swift_getObjCClassFromMetadata() instancesRespondToSelector:"chatStartedConnecting:"])
    {
      v35.receiver = v4;
      v35.super_class = v5;
      objc_msgSendSuper2(&v35, "chatStartedConnecting:", v0);
    }
    if ([v0 isOutgoing])
    {
      id v15 = [v4 provider];
      uint64_t v16 = v11;
      uint64_t v17 = v9;
      if (v15)
      {
        id v18 = v15;
        id v19 = [v0 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v20.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v17);
        Class v21 = (Class)[v0 dateStartedConnecting];
        if (v21)
        {
          uint64_t v32 = v17;
          Class isa = v20.super.isa;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v23 = v33;
          uint64_t v24 = v34;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v2, v3, v34);
          sub_1001F0530(v2, 0, 1, v24);
          if (sub_1001F758C(v2, 1, v24) == 1)
          {
            Class v21 = 0;
          }
          else
          {
            uint64_t v25 = v23;
            Class v21 = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v24);
          }
          v20.super.Class isa = isa;
          uint64_t v17 = v32;
        }
        else
        {
          sub_1001F0530(v2, 1, 1, v34);
        }
        [v18 reportOutgoingCallWithUUID:v20.super.isa startedConnectingAtDate:v21];
      }
      id v26 = [objc_allocWithZone((Class)CXCallUpdate) initWithTinCanIDSChat:v0];
      id v27 = [v4 provider];
      if (v27)
      {
        id v28 = v27;
        id v29 = [v0 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v30 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v17);
        [v28 reportCallWithUUID:v30 updated:v26];
      }
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_1001FBC88(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001FCC20();
  if ([v1 superclass])
  {
    swift_getObjCClassMetadata();
    if ([(id)swift_getObjCClassFromMetadata() instancesRespondToSelector:"chatConnected:"])
    {
      v13.receiver = v1;
      v13.super_class = ObjectType;
      objc_msgSendSuper2(&v13, "chatConnected:", a1);
    }
    id v8 = [objc_allocWithZone((Class)CXCallUpdate) initWithTinCanIDSChat:a1];
    id v9 = [v1 provider];
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = [a1 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(void *, uint64_t))(v6 + 8))(v1, v4);
      [v10 reportCallWithUUID:isa updated:v8];
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001FBE2C()
{
  sub_1001FCC38();
  uint64_t v4 = v1;
  uint64_t v5 = (objc_class *)sub_1001FCCFC();
  uint64_t v6 = type metadata accessor for Date();
  sub_1001F6398();
  uint64_t v20 = v7;
  __chkstk_darwin(v8);
  sub_1001FCC70();
  uint64_t v9 = sub_1001F081C(&qword_100584B40);
  __chkstk_darwin(v9 - 8);
  sub_1001FCC88();
  uint64_t v10 = type metadata accessor for UUID();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1001FCC20();
  [v1 updateCacheWithChat:v0];
  if ([v0 endedReason] != (id)-1)
  {
    id v14 = [v1 provider];
    if (v14)
    {
      id v15 = v14;
      id v19 = v5;
      id v16 = [v0 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v17.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(void *, uint64_t))(v12 + 8))(v1, v10);
      Class isa = (Class)[v0 dateEnded];
      if (isa)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v2, v3, v6);
        sub_1001F0530(v2, 0, 1, v6);
        if (sub_1001F758C(v2, 1, v6) == 1)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v6);
        }
      }
      else
      {
        sub_1001F0530(v2, 1, 1, v6);
      }
      objc_msgSend(v15, "reportCallWithUUID:endedAtDate:privateReason:", v17.super.isa, isa, objc_msgSend(v0, "endedReason"));

      uint64_t v5 = v19;
    }
  }
  if ([v4 superclass])
  {
    swift_getObjCClassMetadata();
    if ([(id)swift_getObjCClassFromMetadata() instancesRespondToSelector:"chatEnded:"])
    {
      v21.receiver = v4;
      v21.super_class = v5;
      objc_msgSendSuper2(&v21, "chatEnded:", v0);
    }
    sub_1001FCC08();
  }
  else
  {
    __break(1u);
  }
}

void sub_1001FC124(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

void sub_1001FC19C()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  id v7 = v6;
  type metadata accessor for UUID();
  sub_1001F6398();
  __chkstk_darwin(v8);
  objc_allocWithZone((Class)CSDMessagingCallMessage);
  sub_1001F7440(v5, v3);
  id v9 = sub_1001FC93C(v5, v3);
  if (!v9)
  {
    sub_100008DCC();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    goto LABEL_17;
  }
  uint64_t v10 = v9;
  uint64_t v34 = v1;
  id v11 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v12 = sub_1001FCCB8();
  *(_OWORD *)(v12 + 16) = xmmword_10048F550;
  uint64_t v13 = sub_1001F6204(0, &qword_100584B28);
  *(void *)(v12 + 56) = v13;
  uint64_t v14 = sub_1001FCAC8((unint64_t *)&unk_100584B30, &qword_100584B28);
  *(void *)(v12 + 64) = v14;
  *(void *)(v12 + 32) = v10;
  id v35 = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if ([v35 type] == 2)
  {
    objc_msgSend(v7, "setRemoteUplinkMuted:", objc_msgSend(v35, "senderMuteUplink"));
    id v15 = [objc_allocWithZone((Class)CXCallUpdate) initWithTinCanIDSChat:v7];
    id v16 = [v34 provider];
    if (v16)
    {
      NSUUID v17 = v16;
      id v18 = [v7 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_1001F7664();
      v20();
      [v17 reportCallWithUUID:isa updated:v15];

      sub_1001FCC08();
      return;
    }

    goto LABEL_17;
  }
  id v21 = sub_100008DCC();
  static os_log_type_t.error.getter();
  uint64_t v22 = sub_1001FCCE4();
  *(_OWORD *)(v22 + 16) = xmmword_10048FB00;
  id v23 = [v35 type];
  if (v23 == 2)
  {
    uint64_t v24 = @"SenderMuteUplink";
  }
  else if (v23 == 1)
  {
    uint64_t v24 = @"Invite";
  }
  else
  {
    if (v23)
    {
      uint64_t v24 = +[NSString stringWithFormat:@"(unknown: %i)", v23];
      goto LABEL_15;
    }
    uint64_t v24 = @"Unknown";
  }
  uint64_t v25 = v24;
LABEL_15:
  id v26 = v24;
  if (!v26)
  {
    __break(1u);
    return;
  }
  id v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v31 = sub_1001F3B08();
  *(void *)(v22 + 32) = v28;
  *(void *)(v22 + 40) = v30;
  *(void *)(v22 + 96) = v13;
  *(void *)(v22 + 104) = v14;
  *(void *)(v22 + 64) = v31;
  *(void *)(v22 + 72) = v35;
  v35;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
LABEL_17:
  sub_1001FCC08();
}

void sub_1001FC664()
{
}

id ScreenSharingActivityManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TinCanIDSProviderDelegate()
{
  return self;
}

id sub_1001FC7A4(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    v6.super.Class isa = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    v7.super.Class isa = 0;
    goto LABEL_6;
  }
  v6.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = [v3 initWithAccount:a1 destinations:v6.super.isa options:v7.super.isa];

  return v8;
}

id sub_1001FC878(void *a1, uint64_t a2, void *a3, char a4, char a5)
{
  NSSet v6 = v5;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v13 = [v6 initOutgoingWithSession:a1 UUID:isa remoteHandle:a3 wantsVideo:a4 & 1 isRelaying:a5 & 1];

  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
  return v13;
}

id sub_1001FC93C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001FCB18(a1, a2);
  }
  id v6 = [v2 initWithData:isa];

  return v6;
}

uint64_t sub_1001FC9B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FC9F0()
{
  return sub_1001F9FEC(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001FC9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FCA08()
{
  return swift_release();
}

uint64_t sub_1001FCA10()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001FCA48(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001FA190(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1001FCA50()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1001FCA88()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 16))();
  [v1 setRemoteUplinkMuted:1];
  return v1;
}

uint64_t sub_1001FCAC8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001F6204(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FCB18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001F7498(a1, a2);
  }
  return a1;
}

uint64_t sub_1001FCB2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FCB74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001F08B4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FCBB8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001FCBF0(uint64_t a1, char a2)
{
  sub_1001FADFC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1001FCC50()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_1001FCCB8()
{
  return swift_allocObject();
}

uint64_t sub_1001FCCE4()
{
  return swift_allocObject();
}

uint64_t sub_1001FCCFC()
{
  return swift_getObjectType();
}

uint64_t sub_1001FCD14()
{
  return swift_release();
}

uint64_t sub_1001FCD2C(uint64_t a1)
{
  return sub_1001FCFDC(a1, (uint64_t (*)(void))type metadata accessor for SoundDescriptor, &qword_100584C78);
}

uint64_t sub_1001FCD60(uint64_t a1)
{
  sub_100201830(a1, (uint64_t)&v4, (uint64_t *)&unk_100584CA0);
  if (v5)
  {
    sub_1001F75B4(&v4, v3);
    sub_100201880((uint64_t)v3, (uint64_t)&v2);
    String.init<A>(reflecting:)();
    sub_1002018DC((uint64_t)v3);
  }
  return sub_1002025F0();
}

uint64_t sub_1001FCDEC(uint64_t a1)
{
  return sub_1001FCE0C(a1, (uint64_t (*)(void))&type metadata accessor for URL, &qword_1005878F0);
}

uint64_t sub_1001FCE0C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = a2(0);
  sub_1001F6398();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100202454();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = sub_1001F081C(a3);
  uint64_t v14 = sub_100202384(v13);
  __chkstk_darwin(v14);
  sub_1001F2514();
  uint64_t v17 = v16 - v15;
  sub_100201830(a1, v16 - v15, a3);
  if (sub_1001F758C(v17, 1, v6) == 1) {
    return 7104878;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v12, v17, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v3, v12, v6);
  sub_100202590();
  uint64_t v18 = String.init<A>(reflecting:)();
  uint64_t v19 = sub_1002025F0();
  v20(v19);
  return v18;
}

uint64_t sub_1001FCF88(uint64_t a1)
{
  return sub_1001FCE0C(a1, (uint64_t (*)(void))&type metadata accessor for Locale, (uint64_t *)&unk_10058BB70);
}

uint64_t sub_1001FCFA8(uint64_t a1)
{
  return sub_1001FCFDC(a1, (uint64_t (*)(void))type metadata accessor for AudioDescriptor, &qword_100584C80);
}

uint64_t sub_1001FCFDC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = a2(0);
  sub_10020233C();
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001F081C(a3);
  uint64_t v10 = sub_100202384(v9);
  __chkstk_darwin(v10);
  sub_1002024D0();
  sub_100201830(a1, v3, a3);
  if (sub_1001F758C(v3, 1, v6) == 1) {
    return 7104878;
  }
  sub_10020173C();
  sub_100201790();
  uint64_t v11 = String.init<A>(reflecting:)();
  uint64_t v12 = sub_100202590();
  sub_1002017D8(v12, v13);
  return v11;
}

uint64_t sub_1001FD134(uint64_t a1)
{
  return sub_1001FCE0C(a1, (uint64_t (*)(void))&type metadata accessor for Date, &qword_100584B40);
}

uint64_t sub_1001FD154(uint64_t a1)
{
  return sub_1001FCFDC(a1, (uint64_t (*)(void))type metadata accessor for AudioInterruptionDeferredEndDescriptor, &qword_100584C70);
}

uint64_t sub_1001FD188(uint64_t a1)
{
  return sub_1001FCFDC(a1, (uint64_t (*)(void))type metadata accessor for RingtoneDescriptor, (uint64_t *)&unk_10058A130);
}

BOOL sub_1001FD1BC(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_1001FD1C8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1001FD1D8()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
  {
    char v5 = 1;
  }
  else
  {
    sub_100202590();
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1001FD25C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB0000000074754FLL;
  uint64_t v3 = 0x6C6C416E496C6C61;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6C65536E496C6C61;
    }
    else {
      uint64_t v5 = 0x636E4F6E496C6C61;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000074754F66;
    }
    else {
      unint64_t v6 = 0xE900000000000065;
    }
  }
  else
  {
    uint64_t v5 = 0x6C6C416E496C6C61;
    unint64_t v6 = 0xEB0000000074754FLL;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6C65536E496C6C61;
    }
    else {
      uint64_t v3 = 0x636E4F6E496C6C61;
    }
    if (a2 == 1) {
      unint64_t v2 = 0xEC00000074754F66;
    }
    else {
      unint64_t v2 = 0xE900000000000065;
    }
  }
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1001FD38C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC000000796C696DLL;
  unint64_t v3 = 0x6146656369766564;
  uint64_t v4 = a1;
  uint64_t v5 = "systemRootLayerTransform";
  uint64_t v6 = 0x6146656369766564;
  unint64_t v7 = 0xEC000000796C696DLL;
  char v8 = "deviceHomeButtonType";
  switch(v4)
  {
    case 1:
      unint64_t v7 = 0x800000010047A290;
      uint64_t v6 = 0xD000000000000014;
      break;
    case 2:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v6 = 0x656C797473;
      break;
    case 3:
      uint64_t v6 = 0x5379616C70736964;
      uint64_t v9 = 1701601635;
      goto LABEL_8;
    case 4:
      uint64_t v6 = 0xD000000000000018;
      unint64_t v7 = 0x800000010047A2C0;
      break;
    case 5:
      uint64_t v6 = 0x636146656C616373;
      unint64_t v7 = 0xEB00000000726F74;
      break;
    case 6:
      uint64_t v6 = 0x615272656E726F63;
      uint64_t v9 = 1937074532;
LABEL_8:
      unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    case 7:
      uint64_t v6 = sub_1002025A4();
      unint64_t v7 = 0xED00006874646957;
      break;
    case 8:
      uint64_t v6 = sub_1002025A4();
      unint64_t v7 = 0xEE00746867696548;
      break;
    case 9:
      uint64_t v6 = 0x776F646E69577369;
      unint64_t v7 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000014;
      break;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      unint64_t v3 = 0x656C797473;
      break;
    case 3:
      unint64_t v3 = 0x5379616C70736964;
      uint64_t v10 = 1701601635;
      goto LABEL_19;
    case 4:
      unint64_t v3 = 0xD000000000000018;
      unint64_t v2 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 5:
      unint64_t v3 = 0x636146656C616373;
      unint64_t v2 = 0xEB00000000726F74;
      break;
    case 6:
      unint64_t v3 = 0x615272656E726F63;
      uint64_t v10 = 1937074532;
LABEL_19:
      unint64_t v2 = v10 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    case 7:
      sub_100202644();
      unint64_t v2 = 0xED00006874646957;
      break;
    case 8:
      sub_100202644();
      unint64_t v2 = 0xEE00746867696548;
      break;
    case 9:
      unint64_t v3 = 0x776F646E69577369;
      unint64_t v2 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v2) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

BOOL sub_1001FD698(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1001FD6A8()
{
  return 1;
}

uint64_t sub_1001FD6B0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x656E6F6850;
  }
  else {
    uint64_t v3 = 0x656D695465636146;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x656E6F6850;
  }
  else {
    uint64_t v5 = 0x656D695465636146;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1001FD750()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100202200(v0, qword_100584BC0);
  sub_1001F5F88(v0, (uint64_t)qword_100584BC0);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_1001FD7D4(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

unint64_t sub_1001FD7E4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001FD7D4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1001FD818(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0x656E696665646E75;
    case 2:
      return 0x64656C6261736964;
    case 1:
      return 0x64656C62616E65;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1001FD8AC()
{
  return sub_1001FD818(*v0);
}

uint64_t static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.< infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a2 == a5 && a1 < a4;
  return a2 < a5 || v6;
}

uint64_t CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D44496E6567202CLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3D6574617473202CLL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = sub_1001FD818(a3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0x6963697472617028;
}

uint64_t sub_1001FDA18(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
  Swift::String v8 = v7;
  if (a1)
  {
    swift_bridgeObjectRetain();
    sub_1001FDBA8(4);
    uint64_t v6 = sub_1001FDC68();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String v8 = v10;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = v6;
  v11._object = v8;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_100202570();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  sub_100202550();
  v13._countAndFlagsBits = sub_1001FD818(a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0x3D64697028;
}

uint64_t sub_1001FDBA8(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

Swift::Int sub_1001FDC68()
{
  uint64_t v0 = String.count.getter();
  uint64_t v1 = Substring.distance(from:to:)();
  BOOL v2 = __OFADD__(v0, v1);
  Swift::Int result = v0 + v1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    String.reserveCapacity(_:)(result);
    sub_100201998();
    String.append<A>(contentsOf:)();
    String.append<A>(contentsOf:)();
    return 0;
  }
  return result;
}

BOOL static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

uint64_t sub_1001FDD60()
{
  return CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_1001FDD6C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.< infix(_:_:)(*a1, a1[1], a3, *a2, a2[1]);
}

uint64_t sub_1001FDD80(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FDDE0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_10028BC68);
}

uint64_t sub_1001FDD98(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FDDE0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_10028BDD4);
}

uint64_t sub_1001FDDB0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FDDE0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_10028BEF4);
}

uint64_t sub_1001FDDC8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FDDE0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.__derived_struct_equals(_:_:));
}

uint64_t sub_1001FDDE0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional __swiftcall CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050A950, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional)3;
  }
  else {
    return (callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional)v3;
  }
}

uint64_t CSDConversationSpatialPersonaResolver.Mode.rawValue.getter(char a1)
{
  if (!a1) {
    return sub_1002024BC();
  }
  if (a1 == 1) {
    return 0x6C65536E496C6C61;
  }
  return 0x636E4F6E496C6C61;
}

uint64_t sub_1001FDEB8(unsigned __int8 *a1, char *a2)
{
  return sub_1001FD25C(*a1, *a2);
}

Swift::Int sub_1001FDEC4()
{
  return sub_1002EFB3C();
}

uint64_t sub_1001FDECC()
{
  return sub_10020E104();
}

Swift::Int sub_1001FDED4()
{
  return sub_1002EFF78();
}

callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional sub_1001FDEDC@<W0>(Swift::String *a1@<X0>, callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional *a2@<X8>)
{
  result.value = CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1001FDF0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CSDConversationSpatialPersonaResolver.Mode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001FDF5C()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter);
}

uint64_t sub_1001FDF94(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter) = result;
  return result;
}

uint64_t sub_1001FDFC8()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState);
}

uint64_t sub_1001FE000(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState) = result;
  return result;
}

uint64_t sub_1001FE010(uint64_t a1)
{
  return sub_1001FE028(a1, &OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState);
}

uint64_t sub_1001FE01C(uint64_t a1)
{
  return sub_1001FE028(a1, &OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers);
}

uint64_t sub_1001FE028(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_bridgeObjectRelease();
}

id sub_1001FE078(void *a1)
{
  unint64_t v3 = self;
  id v4 = v1;
  id v5 = objc_msgSend(v3, "tu_defaults");
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 stringForKey:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    v12.callservicesd::CSDConversationSpatialPersonaResolver::Mode value = CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)(v11).value;

    if (v12.value == callservicesd_CSDConversationSpatialPersonaResolver_Mode_unknownDefault) {
      callservicesd::CSDConversationSpatialPersonaResolver::Mode value = callservicesd_CSDConversationSpatialPersonaResolver_Mode_allInAllOut;
    }
    else {
      callservicesd::CSDConversationSpatialPersonaResolver::Mode value = v12.value;
    }
  }
  else
  {

    callservicesd::CSDConversationSpatialPersonaResolver::Mode value = callservicesd_CSDConversationSpatialPersonaResolver_Mode_allInOnce;
  }
  id v14 = objc_allocWithZone((Class)type metadata accessor for CSDConversationSpatialPersonaResolver());
  id v15 = sub_1001FE204(a1, value);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id sub_1001FE204(void *a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = (uint64_t)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
  uint64_t v7 = type metadata accessor for UUID();
  sub_1001F0530(v6, 1, 1, v7);
  uint64_t v8 = &v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState] = &_swiftEmptyDictionarySingleton;
  v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers] = &_swiftEmptySetSingleton;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue] = a1;
  v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode] = a2;
  uint64_t v9 = qword_100583700;
  id v10 = a1;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001F5F88(v11, (uint64_t)qword_100584BC0);
  callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = sub_100202470();
    *(_DWORD *)id v14 = 136315138;
    if (a2)
    {
      if (a2 == 1) {
        uint64_t v15 = 0x6C65536E496C6C61;
      }
      else {
        uint64_t v15 = 0x636E4F6E496C6C61;
      }
      if (a2 == 1) {
        unint64_t v16 = 0xEC00000074754F66;
      }
      else {
        unint64_t v16 = 0xE900000000000065;
      }
    }
    else
    {
      unint64_t v16 = 0xEB0000000074754FLL;
      uint64_t v15 = sub_1002024BC();
    }
    sub_1002344D8(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Initialized spatial persona resolver with mode=%s", v14, 0xCu);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }

  uint64_t v17 = (objc_class *)type metadata accessor for CSDConversationSpatialPersonaResolver();
  v21.receiver = v3;
  v21.super_class = v17;
  id v18 = objc_msgSendSuper2(&v21, "init");

  return v18;
}

uint64_t sub_1001FE49C()
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  void *v1 = v3;
  uint64_t v4 = sub_100202438();
  v5(v4);
  id v6 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = sub_10020241C();
  uint64_t result = v8(v7);
  if ((v3 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  id v10 = [v0 generationCounter];
  BOOL v11 = __CFADD__(v10, 1);
  uint64_t result = (uint64_t)v10 + 1;
  if (v11) {
LABEL_5:
  }
    __break(1u);
  return result;
}

id CSDConversationSpatialPersonaResolver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void CSDConversationSpatialPersonaResolver.init()()
{
}

id CSDConversationSpatialPersonaResolver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDConversationSpatialPersonaResolver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CSDConversationSpatialPersonaResolver()
{
  uint64_t result = qword_100584C50;
  if (!qword_100584C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1001FE6FC()
{
  type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  __chkstk_darwin(v2);
  sub_100202310();
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue);
  void *v1 = v3;
  uint64_t v4 = sub_100202438();
  v5(v4);
  id v6 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = sub_10020241C();
  uint64_t result = (void *)v8(v7);
  if (v3)
  {
    id v10 = (void *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState);
    sub_1002022F8();
    uint64_t result = sub_1002E4D1C(&v21, *v10);
    unint64_t v11 = 0;
    int64_t v12 = v24;
    unint64_t v13 = v25;
    int64_t v14 = (unint64_t)(v23 + 64) >> 6;
    if (!v25) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v16 = v15 | (v12 << 6);
    while (1)
    {
      if (v11 <= *(void *)(*(void *)(v21 + 56) + 24 * v16 + 8)) {
        unint64_t v11 = *(void *)(*(void *)(v21 + 56) + 24 * v16 + 8);
      }
      if (v13) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      if (v17 >= v14) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v22 + 8 * v17);
      int64_t v19 = v12 + 1;
      if (!v18)
      {
        int64_t v19 = v12 + 2;
        if (v12 + 2 >= v14) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v12 + 3;
          if (v12 + 3 >= v14) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v12 + 4;
            if (v12 + 4 >= v14) {
              goto LABEL_26;
            }
            unint64_t v18 = *(void *)(v22 + 8 * v19);
            if (!v18)
            {
              int64_t v19 = v12 + 5;
              if (v12 + 5 >= v14) {
                goto LABEL_26;
              }
              unint64_t v18 = *(void *)(v22 + 8 * v19);
              if (!v18)
              {
                int64_t v19 = v12 + 6;
                if (v12 + 6 >= v14) {
                  goto LABEL_26;
                }
                unint64_t v18 = *(void *)(v22 + 8 * v19);
                if (!v18) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_21:
      unint64_t v13 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      int64_t v12 = v19;
    }
    int64_t v20 = v12 + 7;
    while (v20 < v14)
    {
      unint64_t v18 = *(void *)(v22 + 8 * v20++);
      if (v18)
      {
        int64_t v19 = v20 - 1;
        goto LABEL_21;
      }
    }
LABEL_26:
    swift_bridgeObjectRetain();
    swift_release();
    if (v11 <= *(void *)(v0
                          + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter))
      return *(void **)(v0
                        + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter);
    else {
      return (void *)v11;
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
  return result;
}

void sub_1001FE93C()
{
  sub_1001FCC38();
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100202310();
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue);
  void *v1 = v8;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  unint64_t v11 = *(void (**)(void *, uint64_t))(v6 + 8);
  unint64_t v10 = v6 + 8;
  v11(v1, v4);
  if ((v8 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState) == 1) {
    goto LABEL_42;
  }
  int64_t v12 = (void *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode))
  {
    sub_1002022F8();
    sub_1002E4D1C(v39, *v12);
    id v1 = (void *)v39[0];
    unint64_t v10 = v39[1];
    int64_t v13 = v39[3];
    unint64_t v14 = v39[4];
    int64_t v15 = (unint64_t)(v39[2] + 64) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v16 = &_swiftEmptyArrayStorage;
    while (1)
    {
      if (v14)
      {
        unint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        if (v19 >= v15) {
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v10 + 8 * v19);
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v15) {
            goto LABEL_31;
          }
          unint64_t v20 = *(void *)(v10 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v15) {
              goto LABEL_31;
            }
            unint64_t v20 = *(void *)(v10 + 8 * v21);
            if (!v20)
            {
              int64_t v21 = v13 + 4;
              if (v13 + 4 >= v15) {
                goto LABEL_31;
              }
              unint64_t v20 = *(void *)(v10 + 8 * v21);
              if (!v20)
              {
                int64_t v21 = v13 + 5;
                if (v13 + 5 >= v15) {
                  goto LABEL_31;
                }
                unint64_t v20 = *(void *)(v10 + 8 * v21);
                if (!v20)
                {
                  int64_t v21 = v13 + 6;
                  if (v13 + 6 >= v15) {
                    goto LABEL_31;
                  }
                  unint64_t v20 = *(void *)(v10 + 8 * v21);
                  if (!v20)
                  {
                    int64_t v22 = v13 + 7;
                    while (v22 < v15)
                    {
                      unint64_t v20 = *(void *)(v10 + 8 * v22++);
                      if (v20)
                      {
                        int64_t v21 = v22 - 1;
                        goto LABEL_24;
                      }
                    }
LABEL_31:
                    swift_release();
                    sub_1001FF01C(v16);
                    sub_100202488();
                    swift_release();
                    if ((v15 & 1) == 0) {
                      goto LABEL_34;
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v14 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
        int64_t v13 = v21;
      }
      uint64_t v23 = v1[7];
      if (*(void *)(v23 + 24 * v18 + 16) == 1)
      {
        long long v37 = *(_OWORD *)(v23 + 24 * v18);
        uint64_t v38 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002E3EA4(0, v16[2] + 1, 1);
          unint64_t v16 = v38;
        }
        unint64_t v25 = v16[2];
        unint64_t v24 = v16[3];
        if (v25 >= v24 >> 1)
        {
          sub_1002E3EA4((char *)(v24 > 1), v25 + 1, 1);
          unint64_t v16 = v38;
        }
        void v16[2] = v25 + 1;
        id v26 = &v16[3 * v25];
        *((_OWORD *)v26 + 2) = v37;
        v26[6] = 1;
      }
    }
  }
  sub_1002022F8();
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_1001FEDAC(v27);
  sub_100202488();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_42;
  }
LABEL_34:
  if (*(void *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter) < v10)
  {
    unint64_t v28 = *(void *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter);
    if (v10 >= v28
      && v10 == v28
      && (*(unsigned char *)(v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8) & 1) != 0)
    {
      if (qword_100583700 == -1)
      {
LABEL_39:
        uint64_t v29 = type metadata accessor for Logger();
        sub_1001F5F88(v29, (uint64_t)qword_100584BC0);
        uint64_t v30 = (void *)Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (sub_100202368(v31))
        {
          uint64_t v32 = (_DWORD *)sub_10020234C();
          uint64_t v38 = (void *)sub_100202470();
          *uint64_t v32 = 136315138;
          uint64_t v33 = sub_1001FD818((uint64_t)v1);
          sub_1002344D8(v33, v34, (uint64_t *)&v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100202390((void *)&_mh_execute_header, v35, v36, "localParticipantID not set, so resolving to the max remote-participant-state, state=%s");
          swift_arrayDestroy();
          sub_1001F63CC();
          sub_1001F63CC();
        }

        goto LABEL_42;
      }
LABEL_46:
      swift_once();
      goto LABEL_39;
    }
  }
LABEL_42:
  sub_1001FCC08();
}

void *sub_1001FEDAC(uint64_t a1)
{
  uint64_t result = sub_1002E4D1C(&v23, a1);
  if (!v27)
  {
    int64_t v20 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      goto LABEL_49;
    }
    int64_t v4 = (unint64_t)(v25 + 64) >> 6;
    if (v20 < v4)
    {
      unint64_t v21 = *(void *)(v24 + 8 * v20);
      int64_t v5 = v26 + 1;
      if (v21)
      {
LABEL_33:
        unint64_t v2 = (v21 - 1) & v21;
        unint64_t v3 = __clz(__rbit64(v21)) + (v5 << 6);
        goto LABEL_3;
      }
      int64_t v5 = v26 + 2;
      if (v26 + 2 < v4)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v5);
        if (v21) {
          goto LABEL_33;
        }
        int64_t v5 = v26 + 3;
        if (v26 + 3 < v4)
        {
          unint64_t v21 = *(void *)(v24 + 8 * v5);
          if (v21) {
            goto LABEL_33;
          }
          int64_t v5 = v26 + 4;
          if (v26 + 4 < v4)
          {
            unint64_t v21 = *(void *)(v24 + 8 * v5);
            if (v21) {
              goto LABEL_33;
            }
            int64_t v5 = v26 + 5;
            if (v26 + 5 < v4)
            {
              unint64_t v21 = *(void *)(v24 + 8 * v5);
              if (!v21)
              {
                int64_t v22 = v26 + 6;
                do
                {
                  if (v22 >= v4) {
                    goto LABEL_46;
                  }
                  unint64_t v21 = *(void *)(v24 + 8 * v22++);
                }
                while (!v21);
                int64_t v5 = v22 - 1;
              }
              goto LABEL_33;
            }
          }
        }
      }
    }
LABEL_46:
    swift_bridgeObjectRetain();
    sub_1002022CC((uint64_t)&v23);
    return 0;
  }
  unint64_t v2 = (v27 - 1) & v27;
  unint64_t v3 = __clz(__rbit64(v27)) | (v26 << 6);
  int64_t v4 = (unint64_t)(v25 + 64) >> 6;
  int64_t v5 = v26;
LABEL_3:
  uint64_t v6 = *(void *)(v23 + 56);
  uint64_t v7 = (unint64_t *)(v6 + 24 * v3);
  unint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  while (1)
  {
    if (v2)
    {
      unint64_t v10 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      unint64_t v11 = v10 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v12 >= v4) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    int64_t v14 = v5 + 1;
    if (!v13)
    {
      int64_t v14 = v5 + 2;
      if (v5 + 2 >= v4) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v5 + 3;
        if (v5 + 3 >= v4) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v5 + 4;
          if (v5 + 4 >= v4) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v24 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v5 + 5;
            if (v5 + 5 >= v4) {
              goto LABEL_29;
            }
            unint64_t v13 = *(void *)(v24 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v5 + 6;
              while (v15 < v4)
              {
                unint64_t v13 = *(void *)(v24 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_29:
              swift_bridgeObjectRetain();
              swift_release();
              return (void *)v8;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v2 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v5 = v14;
LABEL_22:
    unint64_t v16 = (unint64_t *)(v6 + 24 * v11);
    unint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    if (v9 < v18)
    {
      unint64_t v8 = v17;
      unint64_t v9 = v18;
    }
    else if (v9 == v18 && v8 < v17)
    {
      unint64_t v8 = v17;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

unint64_t sub_1001FF01C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  unint64_t result = a1[4];
  unint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v7 = a1 + 9;
    do
    {
      unint64_t v8 = *(v7 - 2);
      unint64_t v9 = *(v7 - 1);
      uint64_t v11 = *v7;
      v7 += 3;
      uint64_t v10 = v11;
      if (result <= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = result;
      }
      if (result >= v8) {
        uint64_t v13 = v5;
      }
      else {
        uint64_t v13 = v10;
      }
      if (v4 != v9)
      {
        unint64_t v12 = result;
        uint64_t v13 = v5;
      }
      if (v4 >= v9) {
        unint64_t result = v12;
      }
      else {
        unint64_t result = v8;
      }
      if (v4 >= v9)
      {
        uint64_t v5 = v13;
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v5 = v10;
      }
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1001FF08C()
{
  sub_1001FCC38();
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  sub_100202310();
  if (qword_100583700 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1001F5F88(v4, (uint64_t)qword_100584BC0);
  uint64_t v5 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 138412290;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Reset] Resetting, %@", v8, 0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  uint64_t v11 = type metadata accessor for UUID();
  sub_1001F0530(v1, 1, 1, v11);
  uint64_t v12 = (uint64_t)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
  sub_1002024E8();
  sub_100202264(v1, v12);
  swift_endAccess();
  uint64_t v13 = &v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = 0;
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = 0;
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  sub_1001FE010(v14);
  v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 0;
  sub_1001FE01C((uint64_t)&_swiftEmptySetSingleton);
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] = 0;
  sub_1001FCC08();
}

void sub_1001FF34C()
{
  sub_1001FCC38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  sub_100202454();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = &v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
  if (v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8] == 1)
  {
    uint64_t v12 = (uint64_t)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
    sub_1002022F8();
    sub_100201830(v12, (uint64_t)v10, (uint64_t *)&unk_100585580);
    uint64_t v13 = type metadata accessor for UUID();
    int v14 = sub_1001F758C((uint64_t)v10, 1, v13);
    sub_1002012F4((uint64_t)v10);
    if (v14 == 1)
    {
      *(void *)uint64_t v11 = v5;
      __int16 v11[8] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v1, v3, v13);
      sub_1001F0530(v1, 0, 1, v13);
      sub_1002024E8();
      sub_100202264(v1, v12);
      swift_endAccess();
      uint64_t v15 = swift_bridgeObjectRetain();
      sub_1001FE01C(v15);
      if (qword_100583700 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_1001F5F88(v16, (uint64_t)qword_100584BC0);
      unint64_t v17 = v0;
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (sub_100202368(v19))
      {
        sub_10020234C();
        int64_t v20 = (void *)sub_1002023B0();
        id v21 = sub_1002023F4(5.7779e-34);
        sub_1002024A0();
        *int64_t v20 = v17;

        uint64_t v24 = "[Config] Set successful, %@";
LABEL_15:
        sub_100202390((void *)&_mh_execute_header, v22, v23, v24);
        sub_1001F081C(&qword_100585900);
        swift_arrayDestroy();
        goto LABEL_16;
      }
    }
    else
    {
      if (qword_100583700 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_1001F5F88(v31, (uint64_t)qword_100584BC0);
      unint64_t v17 = v0;
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (sub_100202368(v32))
      {
        sub_10020234C();
        uint64_t v33 = (void *)sub_1002023B0();
        id v34 = sub_1002023F4(5.7779e-34);
        sub_1002024A0();
        *uint64_t v33 = v17;

        uint64_t v24 = "[Config] Bad API usage; groupUUID is already set, %@";
        goto LABEL_15;
      }
    }

    goto LABEL_21;
  }
  if (qword_100583700 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_1001F5F88(v25, (uint64_t)qword_100584BC0);
  uint64_t v38 = v0;
  unint64_t v27 = (uint8_t *)v26;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v28))
  {
    swift_slowAlloc();
    uint64_t v29 = (void *)sub_1002023B0();
    *(_DWORD *)unint64_t v27 = 138412290;
    uint64_t v39 = v38;
    uint64_t v30 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v38;

    _os_log_impl((void *)&_mh_execute_header, v18, v28, "[Config] Bad API usage; localParticipantID is already set, %@",
      v27,
      0xCu);
    sub_1001F081C(&qword_100585900);
    swift_arrayDestroy();
LABEL_16:
    sub_1001F63CC();
    sub_1001F63CC();

LABEL_21:
    sub_1001FCC08();
    return;
  }

  sub_1001FCC08();
}

void sub_1001FF8F4()
{
  sub_1001FCC38();
  uint64_t v3 = v0;
  char v5 = v4;
  uint64_t v6 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v43 = v9 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1002024D0();
  int v14 = *(void **)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  void *v1 = v14;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v1, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_21;
  }
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate.opt_inst_meths;
  uint64_t v2 = &qword_100584000;
  if (v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8] == 1)
  {
    if (qword_100583700 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_1001F5F88(v17, (uint64_t)qword_100584BC0);
    unint64_t v18 = v3;
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      objc_super v44 = (void *)sub_100202470();
      sub_10020253C(1.5047e-36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 8) = 2080;
      uint64_t v22 = (uint64_t)&v18[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
      sub_1002022F8();
      sub_100201830(v22, v43, (uint64_t *)&unk_100585580);
      uint64_t v23 = sub_1001FCE0C(v43, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
      unint64_t v25 = v24;
      sub_1002012F4(v43);
      uint64_t v26 = v23;
      uint64_t v2 = &qword_100584000;
      uint64_t v45 = sub_1002344D8(v26, v25, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Setting local-spatial-persona-enabled=%{BOOL}d without localParticipantID set groupUUID=%s", (uint8_t *)v21, 0x12u);
      swift_arrayDestroy();
      sub_1001F63CC();
      p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDMomentsReportingSessionDelegate + 40);
      sub_1001F63CC();
    }
    else
    {
    }
  }
  if (!v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode])
  {
    sub_1002024BC();
LABEL_12:
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v27 & 1) == 0 || (v5) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode] == 1) {
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (v5) {
    goto LABEL_18;
  }
LABEL_16:
  if ([v3 conversationState] == (id)1) {
    v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 1;
  }
LABEL_18:
  uint64_t v1 = (void *)sub_1001FE49C();
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = v1;
  uint64_t v28 = 1;
  if ((v5 & 1) == 0) {
    uint64_t v28 = 2;
  }
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = v28;
  if (p_opt_inst_meths[224] != (__objc2_meth_list *)-1) {
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v29 = type metadata accessor for Logger();
  sub_1001F5F88(v29, (uint64_t)qword_100584BC0);
  uint64_t v30 = v3;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    sub_10020253C(1.5048e-36);
    LODWORD(v44) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 8) = 2048;
    objc_super v44 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 18) = 2080;
    id v35 = [v30 participantStateStrWithTruncate:1];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    objc_super v44 = (void *)sub_1002344D8(v36, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 28) = 2080;
    uint64_t v39 = (uint64_t)&v30[v2[381]];
    sub_1002022F8();
    sub_100201830(v39, v43, (uint64_t *)&unk_100585580);
    uint64_t v40 = sub_1001FCE0C(v43, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
    unint64_t v42 = v41;
    sub_1002012F4(v43);
    sub_1002344D8(v40, v42, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Setting local-spatial-persona-enabled=%{BOOL}d, genID=%llu, participant-state=%s for groupUUID=%s", (uint8_t *)v33, 0x26u);
    swift_arrayDestroy();
    sub_1001F63CC();
    sub_1001F63CC();
  }
  else
  {
  }
  sub_1001FCC08();
}

void sub_1001FFF98()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v104 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v8 = sub_100202384(v7);
  __chkstk_darwin(v8);
  sub_1001F2514();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_1001F2514();
  unint64_t v18 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  *(void *)(v17 - v16) = v18;
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v17 - v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v19 = v18;
  uint64_t v20 = _dispatchPreconditionTest(_:)();
  uint64_t v21 = sub_1002025F0();
  v22(v21);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if ((v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8] & 1) != 0
    || *(void *)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID] != v6)
  {
    os_log_type_t v32 = &v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers];
    sub_1002022F8();
    uint64_t v20 = v104;
    if (sub_1003708D0(v6, *(void *)v32))
    {
      if (*(void *)&v1[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] < v104) {
        *(void *)&v1[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] = v104;
      }
      sub_1002024E8();
      sub_10037771C(v6);
      swift_endAccess();
    }
    uint64_t v103 = v11;
    uint64_t v33 = (uint64_t *)&v1[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState];
    sub_1002022F8();
    uint64_t v34 = sub_100223020(v6, *v33);
    unint64_t v37 = &selRef_setActiveRequestsByTransactionID_;
    if ((v38 & 1) == 0)
    {
      uint64_t v39 = v34;
      uint64_t v40 = v35;
      uint64_t v41 = v36;
      if (v35 >= v104)
      {
        uint64_t v102 = v34;
        if (qword_100583700 != -1) {
          swift_once();
        }
        uint64_t v71 = type metadata accessor for Logger();
        uint64_t v72 = sub_1001F5F88(v71, (uint64_t)qword_100584BC0);
        unint64_t v25 = v1;
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v73))
        {
          sub_100202470();
          v105[0] = sub_100202500();
          *(_DWORD *)uint64_t v72 = 136315650;
          uint64_t v74 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v6, v104, v3);
          v106[0] = sub_1002344D8(v74, v75, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2080;
          uint64_t v76 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v102, v40, v41);
          v106[0] = sub_1002344D8(v76, v77, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 22) = 2080;
          uint64_t v78 = (uint64_t)&v25[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
          sub_1002022F8();
          sub_100201830(v78, v103, (uint64_t *)&unk_100585580);
          uint64_t v79 = sub_1001FCE0C(v103, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
          unint64_t v81 = v80;
          sub_1002012F4(v103);
          uint64_t v82 = sub_1002344D8(v79, v81, v105);
          sub_100202328(v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v73, "[Upsert] Ignoring stale state, new-state=%s, old-state=%s, groupUUID=%s", (uint8_t *)v72, 0x20u);
          swift_arrayDestroy();
          goto LABEL_28;
        }
LABEL_29:

        goto LABEL_37;
      }
      if (v36 == v3)
      {
        if (qword_100583700 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_1001F5F88(v42, (uint64_t)qword_100584BC0);
        uint64_t v43 = v1;
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled((os_log_t)v44, v99))
        {

          goto LABEL_36;
        }
        sub_100202470();
        v106[0] = sub_100202500();
        uint64_t v45 = sub_1002023CC(4.8152e-34);
        unint64_t v37 = (char **)v43;
        uint64_t v47 = sub_1002344D8(v45, v46, v106);
        sub_10020252C(v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        uint64_t v48 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v39, v40, v3);
        uint64_t v50 = sub_1002344D8(v48, v49, v106);
        sub_10020251C(v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 22) = 2080;
        uint64_t v51 = (uint64_t)&v43[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
        sub_1002022F8();
        sub_100202624();
        sub_1001FCE0C((uint64_t)v43, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
        sub_1002025B8();
        uint64_t v52 = sub_1002344D8(v51, (unint64_t)&unk_100585580, v106);
        sub_100202328(v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v53 = v44;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v44, v99, "[Upsert] Updating genID, new-state=%s from old-state=%s, groupUUID=%s", (uint8_t *)v44, 0x20u);
      }
      else
      {
        if (qword_100583700 != -1) {
          swift_once();
        }
        uint64_t v83 = type metadata accessor for Logger();
        sub_1001F5F88(v83, (uint64_t)qword_100584BC0);
        __int16 v100 = v1;
        id v84 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v84, v98))
        {

          id v53 = v100;
          goto LABEL_23;
        }
        id v97 = v84;
        uint64_t v85 = swift_slowAlloc();
        v106[0] = swift_slowAlloc();
        uint64_t v86 = sub_1002023CC(4.8153e-34);
        uint64_t v88 = sub_1002344D8(v86, v87, v106);
        sub_10020252C(v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2080;
        uint64_t v89 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v39, v40, v41);
        uint64_t v91 = sub_1002344D8(v89, v90, v106);
        sub_10020251C(v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 22) = 2080;
        uint64_t v92 = sub_1001FD818((uint64_t)[v100 conversationState]);
        v105[0] = sub_1002344D8(v92, v93, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 32) = 2080;
        uint64_t v94 = (uint64_t)v100 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID;
        sub_1002022F8();
        sub_100202624();
        sub_1001FCE0C((uint64_t)&selRef_setActiveRequestsByTransactionID_, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
        sub_1002025B8();
        uint64_t v95 = sub_1002344D8(v94, (unint64_t)&unk_100585580, v106);
        sub_100202328(v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v53 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, v98, "[Upsert] Updating, new-state=%s from old-state=%s, resolved-state=%s, groupUUID=%s", (uint8_t *)v85, 0x2Au);
      }
LABEL_22:
      swift_arrayDestroy();
      sub_1001F63CC();
      sub_1001F63CC();
LABEL_23:

LABEL_36:
      sub_1002024E8();
      sub_10027F644(v6, v20, v3, v6);
      swift_endAccess();
      id v96 = [v1 v37[149]];
      *(void *)&v1[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = v96;
      goto LABEL_37;
    }
    unint64_t v18 = (void *)v3;
    if (qword_100583700 == -1)
    {
LABEL_20:
      uint64_t v54 = type metadata accessor for Logger();
      uint64_t v55 = sub_1001F5F88(v54, (uint64_t)qword_100584BC0);
      uint64_t v56 = v1;
      id v53 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v53, v57))
      {

        uint64_t v3 = (uint64_t)v18;
        unint64_t v37 = &selRef_setActiveRequestsByTransactionID_;
        goto LABEL_36;
      }
      sub_100202470();
      v106[0] = sub_100202500();
      *(_DWORD *)uint64_t v55 = 136315650;
      uint64_t v101 = (uint64_t)v18;
      uint64_t v58 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v6, v20, (uint64_t)v18);
      uint64_t v60 = sub_1002344D8(v58, v59, v106);
      sub_10020252C(v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2080;
      uint64_t v61 = sub_1001FD818((uint64_t)[v56 conversationState]);
      uint64_t v63 = sub_1002344D8(v61, v62, v106);
      sub_10020251C(v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 22) = 2080;
      uint64_t v64 = (uint64_t)&v56[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
      sub_1002022F8();
      sub_100201830(v64, v103, (uint64_t *)&unk_100585580);
      uint64_t v65 = sub_1001FCE0C(v103, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
      unint64_t v67 = v66;
      sub_1002012F4(v103);
      uint64_t v68 = v65;
      unint64_t v37 = &selRef_setActiveRequestsByTransactionID_;
      uint64_t v69 = sub_1002344D8(v68, v67, v106);
      sub_100202328(v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v20 = v104;
      swift_bridgeObjectRelease();
      os_log_type_t v70 = v57;
      uint64_t v3 = v101;
      _os_log_impl((void *)&_mh_execute_header, v53, v70, "[Upsert] Tracking new participant, state=%s, resolved-state=%s, groupUUID=%s", (uint8_t *)v55, 0x20u);
      goto LABEL_22;
    }
LABEL_40:
    swift_once();
    goto LABEL_20;
  }
  if (qword_100583700 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  unint64_t v24 = (_DWORD *)sub_1001F5F88(v23, (uint64_t)qword_100584BC0);
  unint64_t v25 = v1;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (!sub_100202368(v27)) {
    goto LABEL_29;
  }
  sub_10020234C();
  uint64_t v28 = (void *)sub_1002023B0();
  *unint64_t v24 = 138412290;
  v106[6] = (uint64_t)v25;
  uint64_t v29 = v25;
  sub_1002024A0();
  *uint64_t v28 = v25;

  sub_100202390((void *)&_mh_execute_header, v30, v31, "[Upsert] Bad API usage; localParticipantID used, %@");
  sub_1001F081C(&qword_100585900);
  swift_arrayDestroy();
LABEL_28:
  sub_1001F63CC();
  sub_1001F63CC();

LABEL_37:
  sub_1001FCC08();
}

uint64_t sub_100200BF8(uint64_t a1)
{
  return swift_endAccess();
}

uint64_t sub_100200C9C(char a1)
{
  sub_1002022F8();
  swift_bridgeObjectRetain_n();
  sub_100252AF0();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v16 = v3;
  sub_10020192C((uint64_t *)&v16);
  swift_bridgeObjectRelease();
  unint64_t v4 = v16;
  uint64_t v5 = v16[2];
  if (v5)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    sub_1002E3EC4();
    uint64_t v6 = v16;
    uint64_t v7 = v4 + 7;
    char v8 = a1 & 1;
    do
    {
      uint64_t v9 = sub_1001FDA18(v8, *(v7 - 2), *(v7 - 1), *v7);
      uint64_t v11 = v10;
      uint64_t v16 = v6;
      unint64_t v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_1002E3EC4();
        uint64_t v6 = v16;
      }
      v7 += 4;
      _DWORD v6[2] = v12 + 1;
      uint64_t v13 = &v6[2 * v12];
      void v13[4] = v9;
      void v13[5] = v11;
      --v5;
    }
    while (v5);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v16 = v6;
  sub_1001F081C(&qword_10058B600);
  sub_1001F7538();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v14;
}

void CSDConversationSpatialPersonaResolver.description.getter()
{
  sub_1001FCC38();
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  sub_1001F2514();
  uint64_t v6 = v5 - v4;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = sub_1001FD818((uint64_t)[v0 conversationState]);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  [v0 generationCounter];
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  if (v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8])
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  else
  {
    uint64_t v10 = String.init<A>(reflecting:)();
    unint64_t v9 = v11;
  }
  unint64_t v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  sub_100202570();
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_100202550();
  v14._countAndFlagsBits = sub_1001FD818(*(void *)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState]);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v16 = &v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState];
  sub_1002022F8();
  if (*(void *)(*(void *)v16 + 16))
  {
    id v17 = [v1 participantStateStrWithTruncate:0];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = (void *)0xE200000000000000;
    uint64_t v18 = 23899;
  }
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_1002022F8();
  uint64_t v22 = sub_1002025F0();
  sub_100201830(v22, v23, (uint64_t *)&unk_100585580);
  uint64_t v24 = sub_1001FCE0C(v6, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_100585580);
  uint64_t v26 = v25;
  sub_1002012F4(v6);
  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  v28._countAndFlagsBits = 0x3D44496E6567;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  v29._countAndFlagsBits = 0xD00000000000001DLL;
  v29._object = (void *)0x800000010047B900;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  v30._countAndFlagsBits = 0xD000000000000012;
  v30._object = (void *)0x800000010047B920;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  sub_1002025D8();
  v31._countAndFlagsBits = sub_100202590();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  sub_1001FCC08();
}

uint64_t sub_1002012F4(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100585580);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100201358()
{
  unint64_t result = qword_100584BF0;
  if (!qword_100584BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584BF0);
  }
  return result;
}

unint64_t sub_1002013A8()
{
  unint64_t result = qword_100584BF8;
  if (!qword_100584BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584BF8);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter()
{
}

uint64_t getEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100201568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_100201590(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

void type metadata accessor for CSDConversationSpatialPersonaResolver.Mode()
{
}

uint64_t sub_1002015A4()
{
  return type metadata accessor for CSDConversationSpatialPersonaResolver();
}

void sub_1002015AC()
{
  sub_100201688();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100201688()
{
  if (!qword_100584C60)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100584C60);
    }
  }
}

void type metadata accessor for SpatialPersonaState()
{
}

unint64_t sub_1002016F0()
{
  unint64_t result = qword_100584C68;
  if (!qword_100584C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584C68);
  }
  return result;
}

uint64_t sub_10020173C()
{
  uint64_t v2 = sub_1002025FC();
  v3(v2);
  sub_10020233C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t sub_100201790()
{
  uint64_t v1 = sub_1002025FC();
  v2(v1);
  sub_10020233C();
  uint64_t v3 = sub_100202610();
  v4(v3);
  return v0;
}

uint64_t sub_1002017D8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10020233C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100201830(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F081C(a3);
  sub_10020233C();
  uint64_t v4 = sub_100202610();
  v5(v4);
  return a2;
}

uint64_t sub_100201880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1002018DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10020192C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1002B4DF4();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1002019E4(v6);
  *a1 = v2;
  return result;
}

unint64_t sub_100201998()
{
  unint64_t result = qword_100584C88;
  if (!qword_100584C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584C88);
  }
  return result;
}

uint64_t sub_1002019E4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_100201FF4(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_1002CDC18(v3 / 2);
  uint64_t v94 = a1;
  uint64_t v95 = result;
  os_log_type_t v99 = v6;
  uint64_t v97 = v3;
  if (v3 <= 0)
  {
    unint64_t v9 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v37 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_90:
    if (v37 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v97 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v86 = *v94;
    while (1)
    {
      unint64_t v87 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v86) {
        goto LABEL_133;
      }
      uint64_t v88 = *(void *)&v9[16 * v87 + 32];
      uint64_t v89 = *(void *)&v9[16 * v37 + 24];
      uint64_t result = sub_100202070((char *)(v86 + 32 * v88), (char *)(v86 + 32 * *(void *)&v9[16 * v37 + 16]), v86 + 32 * v89, v99);
      if (v1) {
        goto LABEL_86;
      }
      if (v89 < v88) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1002B498C((uint64_t)v9);
        unint64_t v9 = (char *)result;
      }
      if (v87 >= *((void *)v9 + 2)) {
        goto LABEL_120;
      }
      unint64_t v90 = &v9[16 * v87 + 32];
      *(void *)unint64_t v90 = v88;
      *((void *)v90 + 1) = v89;
      unint64_t v91 = *((void *)v9 + 2);
      if (v37 > v91) {
        goto LABEL_121;
      }
      uint64_t result = (uint64_t)memmove(&v9[16 * v37 + 16], &v9[16 * v37 + 32], 16 * (v91 - v37));
      *((void *)v9 + 2) = v91 - 1;
      unint64_t v37 = v91 - 1;
      if (v91 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 24;
  uint64_t v93 = *a1 + 64;
  unint64_t v9 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v96 = v5;
  uint64_t v98 = *a1;
  while (1)
  {
    Swift::Int v10 = v7++;
    if (v7 < v3)
    {
      unint64_t v11 = *(void *)(v8 + 32 * v7);
      uint64_t v12 = 32 * v10;
      unint64_t v13 = *(void *)(v8 + 32 * v10);
      Swift::Int v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        Swift::String v14 = (unint64_t *)(v93 + 32 * v10);
        unint64_t v15 = v11;
        while (1)
        {
          unint64_t v17 = *v14;
          v14 += 4;
          unint64_t v16 = v17;
          if (v11 < v13 == v17 >= v15) {
            break;
          }
          ++v7;
          unint64_t v15 = v16;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v11 < v13)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          uint64_t v18 = 32 * v7;
          Swift::Int v19 = v7;
          Swift::Int v20 = v10;
          do
          {
            if (v20 != --v19)
            {
              if (!v8) {
                goto LABEL_132;
              }
              Swift::String v21 = (_OWORD *)(v8 + v12);
              uint64_t v22 = v8 + v18;
              long long v23 = *(_OWORD *)(v8 + v12);
              long long v24 = *(_OWORD *)(v8 + v12 + 16);
              long long v25 = *(_OWORD *)(v8 + v18 - 16);
              *Swift::String v21 = *(_OWORD *)(v8 + v18 - 32);
              v21[1] = v25;
              *(_OWORD *)(v22 - 32) = v23;
              *(_OWORD *)(v22 - 16) = v24;
            }
            ++v20;
            v18 -= 32;
            v12 += 32;
          }
          while (v20 < v19);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        Swift::Int v26 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v26 >= v3) {
          Swift::Int v26 = v3;
        }
        if (v26 < v10) {
          goto LABEL_128;
        }
        if (v7 != v26)
        {
          uint64_t v27 = v92 + 32 * v7;
          do
          {
            unint64_t v28 = *(void *)(v8 + 32 * v7);
            Swift::Int v29 = v10;
            uint64_t v30 = v27;
            do
            {
              Swift::String v31 = (long long *)(v30 - 56);
              if (v28 >= *(void *)(v30 - 56)) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              long long v33 = *v31;
              long long v32 = *(_OWORD *)(v30 - 40);
              *(void *)(v30 - 32) = *(void *)v30;
              v30 -= 32;
              long long v34 = *(_OWORD *)(v30 + 16);
              v31[2] = v33;
              v31[3] = v32;
              *(void *)(v30 - 24) = v28;
              *(_OWORD *)(v30 - 16) = v34;
              ++v29;
            }
            while (v7 != v29);
            ++v7;
            v27 += 32;
          }
          while (v7 != v26);
          Swift::Int v7 = v26;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1002B4894(0, *((void *)v9 + 2) + 1, 1, v9);
      unint64_t v9 = (char *)result;
    }
    unint64_t v36 = *((void *)v9 + 2);
    unint64_t v35 = *((void *)v9 + 3);
    unint64_t v37 = v36 + 1;
    uint64_t v8 = v98;
    if (v36 >= v35 >> 1)
    {
      uint64_t result = (uint64_t)sub_1002B4894((char *)(v35 > 1), v36 + 1, 1, v9);
      uint64_t v8 = v98;
      unint64_t v9 = (char *)result;
    }
    *((void *)v9 + 2) = v37;
    char v38 = v9 + 32;
    uint64_t v39 = (Swift::Int *)&v9[16 * v36 + 32];
    Swift::Int *v39 = v10;
    v39[1] = v7;
    if (v36) {
      break;
    }
    unint64_t v37 = 1;
LABEL_81:
    uint64_t v5 = v96;
    Swift::Int v3 = v97;
    if (v7 >= v97) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v40 = v37 - 1;
    if (v37 >= 4)
    {
      uint64_t v45 = &v38[16 * v37];
      uint64_t v46 = *((void *)v45 - 8);
      uint64_t v47 = *((void *)v45 - 7);
      BOOL v51 = __OFSUB__(v47, v46);
      uint64_t v48 = v47 - v46;
      if (v51) {
        goto LABEL_107;
      }
      uint64_t v50 = *((void *)v45 - 6);
      uint64_t v49 = *((void *)v45 - 5);
      BOOL v51 = __OFSUB__(v49, v50);
      uint64_t v43 = v49 - v50;
      char v44 = v51;
      if (v51) {
        goto LABEL_108;
      }
      unint64_t v52 = v37 - 2;
      id v53 = &v38[16 * v37 - 32];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      BOOL v51 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      if (v51) {
        goto LABEL_109;
      }
      BOOL v51 = __OFADD__(v43, v56);
      uint64_t v57 = v43 + v56;
      if (v51) {
        goto LABEL_111;
      }
      if (v57 >= v48)
      {
        unint64_t v75 = &v38[16 * v40];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v51 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v51) {
          goto LABEL_117;
        }
        BOOL v68 = v43 < v78;
        goto LABEL_70;
      }
    }
    else
    {
      if (v37 != 3)
      {
        uint64_t v69 = *((void *)v9 + 4);
        uint64_t v70 = *((void *)v9 + 5);
        BOOL v51 = __OFSUB__(v70, v69);
        uint64_t v62 = v70 - v69;
        char v63 = v51;
        goto LABEL_64;
      }
      uint64_t v42 = *((void *)v9 + 4);
      uint64_t v41 = *((void *)v9 + 5);
      BOOL v51 = __OFSUB__(v41, v42);
      uint64_t v43 = v41 - v42;
      char v44 = v51;
    }
    if (v44) {
      goto LABEL_110;
    }
    unint64_t v52 = v37 - 2;
    uint64_t v58 = &v38[16 * v37 - 32];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    BOOL v61 = __OFSUB__(v59, v60);
    uint64_t v62 = v59 - v60;
    char v63 = v61;
    if (v61) {
      goto LABEL_112;
    }
    uint64_t v64 = &v38[16 * v40];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    BOOL v51 = __OFSUB__(v65, v66);
    uint64_t v67 = v65 - v66;
    if (v51) {
      goto LABEL_114;
    }
    if (__OFADD__(v62, v67)) {
      goto LABEL_116;
    }
    if (v62 + v67 >= v43)
    {
      BOOL v68 = v43 < v67;
LABEL_70:
      if (v68) {
        unint64_t v40 = v52;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v63) {
      goto LABEL_113;
    }
    uint64_t v71 = &v38[16 * v40];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    BOOL v51 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v51) {
      goto LABEL_115;
    }
    if (v74 < v62) {
      goto LABEL_81;
    }
LABEL_72:
    uint64_t v79 = (unint64_t *)v9;
    unint64_t v80 = v40 - 1;
    if (v40 - 1 >= v37)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    unint64_t v81 = &v38[16 * v80];
    uint64_t v82 = *(void *)v81;
    uint64_t v83 = &v38[16 * v40];
    uint64_t v84 = *((void *)v83 + 1);
    uint64_t result = sub_100202070((char *)(v8 + 32 * *(void *)v81), (char *)(v8 + 32 * *(void *)v83), v8 + 32 * v84, v99);
    if (v1) {
      break;
    }
    if (v84 < v82) {
      goto LABEL_104;
    }
    if (v40 > v79[2]) {
      goto LABEL_105;
    }
    *(void *)unint64_t v81 = v82;
    *(void *)&v38[16 * v80 + 8] = v84;
    unint64_t v85 = v79[2];
    if (v40 >= v85) {
      goto LABEL_106;
    }
    unint64_t v9 = (char *)v79;
    unint64_t v37 = v85 - 1;
    uint64_t result = (uint64_t)memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
    v79[2] = v85 - 1;
    uint64_t v8 = v98;
    if (v85 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v97 < -1) {
    goto LABEL_125;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100201FF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 32 * a3 + 24;
    while (2)
    {
      unint64_t v6 = *(void *)(v4 + 32 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        unint64_t v9 = (long long *)(v8 - 56);
        if (v6 >= *(void *)(v8 - 56)) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        long long v11 = *v9;
        long long v10 = *(_OWORD *)(v8 - 40);
        *(void *)(v8 - 32) = *(void *)v8;
        v8 -= 32;
        long long v12 = *(_OWORD *)(v8 + 16);
        _DWORD v9[2] = v11;
        v9[3] = v10;
        *(void *)(v8 - 24) = v6;
        *(_OWORD *)(v8 - 16) = v12;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 32;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100202070(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 32;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 32;
  if (v9 >= v11)
  {
    sub_1002DE2BC(a2, (uint64_t)(a3 - (void)a2) / 32, a4);
    long long v12 = &v4[32 * v11];
    if (v7 >= v6 || v10 < 32) {
      goto LABEL_35;
    }
    unint64_t v17 = (char *)(a3 - 32);
    while (1)
    {
      uint64_t v18 = v17 + 32;
      Swift::Int v19 = v6 - 32;
      if (*((void *)v12 - 4) >= *((void *)v6 - 4))
      {
        BOOL v21 = v18 != v12 || v17 >= v12;
        Swift::Int v19 = v12 - 32;
        v12 -= 32;
        if (!v21) {
          goto LABEL_31;
        }
      }
      else
      {
        BOOL v20 = v18 != v6 || v17 >= v6;
        v6 -= 32;
        if (!v20) {
          goto LABEL_31;
        }
      }
      long long v22 = *((_OWORD *)v19 + 1);
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v19;
      *((_OWORD *)v17 + 1) = v22;
LABEL_31:
      v17 -= 32;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_35;
      }
    }
  }
  sub_1002DE2BC(a1, (a2 - a1) / 32, a4);
  long long v12 = &v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      unint64_t v13 = v4;
      BOOL v14 = v7 == v4;
      v4 += 32;
      if (!v14) {
        goto LABEL_9;
      }
LABEL_10:
      v7 += 32;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    unint64_t v13 = v6;
    BOOL v14 = v7 == v6;
    v6 += 32;
    if (v14) {
      goto LABEL_10;
    }
LABEL_9:
    long long v15 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    *((_OWORD *)v7 + 1) = v15;
    goto LABEL_10;
  }
LABEL_15:
  unint64_t v6 = v7;
LABEL_35:
  sub_1002DE2BC(v4, (v12 - v4) / 32, v6);
  return 1;
}

uint64_t *sub_100202200(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100202264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100585580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002022CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002022F8()
{
  return swift_beginAccess();
}

uint64_t sub_100202328(uint64_t a1)
{
  *(void *)(v1 - 192) = a1;
  return v1 - 192;
}

uint64_t sub_10020234C()
{
  return swift_slowAlloc();
}

BOOL sub_100202368(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100202384(uint64_t a1)
{
  return a1 - 8;
}

void sub_100202390(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1002023B0()
{
  return swift_slowAlloc();
}

uint64_t sub_1002023CC(float a1)
{
  float *v1 = a1;
  *(void *)(v5 - 216) = v1 + 1;
  return CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v2, v3, v4);
}

id sub_1002023F4(float a1)
{
  float *v1 = a1;
  *(void *)(v3 - 128) = v2;
  return v2;
}

uint64_t sub_10020241C()
{
  return v0;
}

uint64_t sub_100202438()
{
  return v0;
}

uint64_t sub_100202470()
{
  return swift_slowAlloc();
}

uint64_t sub_100202488()
{
  return v0;
}

uint64_t sub_1002024A0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1002024BC()
{
  return 0x6C6C416E496C6C61;
}

uint64_t sub_1002024E8()
{
  return swift_beginAccess();
}

uint64_t sub_100202500()
{
  return swift_slowAlloc();
}

uint64_t sub_10020251C(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

uint64_t sub_10020252C(uint64_t result)
{
  *(void *)(v1 - 184) = result;
  return result;
}

void sub_10020253C(float a1)
{
  float *v1 = a1;
}

void sub_100202550()
{
  uint64_t v1 = 0x3D7473202CLL;
  unint64_t v2 = 0xE500000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_100202570()
{
  uint64_t v1 = 0x3D646967202CLL;
  unint64_t v2 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100202590()
{
  return v0;
}

uint64_t sub_1002025A4()
{
  return 0x6C616E696769726FLL;
}

uint64_t sub_1002025B8()
{
  return sub_1002012F4(v0);
}

void sub_1002025D8()
{
  uint64_t v1 = 32;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1002025F0()
{
  return v0;
}

uint64_t sub_1002025FC()
{
  return 0;
}

uint64_t sub_100202610()
{
  return v0;
}

uint64_t sub_100202624()
{
  uint64_t v4 = *(void *)(v2 - 208);
  return sub_100201830(v0, v4, v1);
}

uint64_t initializeBufferWithCopyOfBuffer for DisclosureDescriptor(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DisclosureDescriptor(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && a1[10])
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 3;
      int v2 = v3 - 3;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisclosureDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisclosureDescriptor()
{
  return &type metadata for DisclosureDescriptor;
}

void sub_1002026FC(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100202724(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_10020276C(char *a1, char *a2)
{
  return sub_1001FD698(*a1, *a2);
}

Swift::Int sub_100202778()
{
  return sub_100202724(*v0);
}

void sub_100202780(uint64_t a1)
{
  sub_1002026FC(a1, *v1);
}

uint64_t sub_100202788(void *a1, uint64_t a2)
{
  if ([a1 recordingState] == 3
    && ([a1 isRedisclosing] & 1) != 0)
  {
    uint64_t v4 = 2;
LABEL_6:

    return v4 | (a2 << 32);
  }
  if ([a1 recordingState] == 2)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  unsigned int v5 = [a1 recordingState];

  if (v5 == 4)
  {
    uint64_t v4 = 1;
    return v4 | (a2 << 32);
  }
  return 3;
}

uint64_t sub_100202844(unint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  int v4 = a1;
  unint64_t v5 = HIDWORD(a1);
  if (a1 == a3) {
    uint64_t result = HIBYTE(a2);
  }
  else {
    uint64_t result = 0;
  }
  if (v4 == a3 && (a4 & 0x100) == 0)
  {
    if ((a2 & 0x100) == 0)
    {
      unint64_t v7 = v5 | ((unint64_t)a2 << 32);
      if (((HIDWORD(a3) | ((unint64_t)a4 << 32)) & 0x100000000) != 0)
      {
        if ((v7 & 0x100000000) != 0) {
          return 1;
        }
      }
      else if ((v7 & 0x100000000) == 0)
      {
        return v5 == HIDWORD(a3);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002028B8(uint64_t a1, char *a2)
{
  char v2 = *a2;
  char v3 = a2[8];
  int v4 = *((_DWORD *)a2 + 1);
  char v5 = a2[9];
  HIDWORD(v9) = *(_DWORD *)(a1 + 4);
  __int16 v10 = *(_WORD *)(a1 + 8);
  unint64_t v6 = v9;
  __int16 v7 = v10;
  LOBYTE(v9) = v2;
  HIDWORD(v9) = v4;
  LOBYTE(v10) = v3;
  HIBYTE(v10) = v5;
  return sub_100202844(v6, v7, v9, v10);
}

unint64_t sub_100202910()
{
  return 0xD000000000000016;
}

unint64_t sub_10020292C()
{
  return 0xD000000000000016;
}

unsigned char *storeEnumTagSinglePayload for DisclosureDescriptor.DisclosureState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100202A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisclosureDescriptor.DisclosureState()
{
  return &type metadata for DisclosureDescriptor.DisclosureState;
}

unint64_t sub_100202A54()
{
  unint64_t result = qword_100584C90;
  if (!qword_100584C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584C90);
  }
  return result;
}

BOOL FTServerBag.isQuickRelaySupported.getter()
{
  id v1 = (id)_IDSQuickRelayProtocolVersionNumber();
  if (v1)
  {
    id v2 = v1;
    if (sub_100202C60(0xD000000000000016, 0x800000010047BC50, v0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v7, 0, sizeof(v7));
    }
    sub_100202CC4((uint64_t)v7, (uint64_t)v8);
    if (v9)
    {
      sub_100202D8C();
      if (swift_dynamicCast())
      {
        id v3 = [v2 compare:v6];

        return v3 != (id)-1;
      }
    }
    else
    {
      sub_100202D2C((uint64_t)v8);
    }
    id v5 = sub_100008DCC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    id v2 = sub_100008DCC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }

  return 0;
}

id sub_100202C60(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 objectForKey:v4];

  return v5;
}

uint64_t sub_100202CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100584CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100202D2C(uint64_t a1)
{
  uint64_t v2 = sub_1001F081C((uint64_t *)&unk_100584CA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100202D8C()
{
  unint64_t result = qword_100585590;
  if (!qword_100585590)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100585590);
  }
  return result;
}

id sub_100202DCC(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  sub_100203014();
  id v6 = sub_1003791B0();
  __int16 v7 = self;
  sub_1001F081C((uint64_t *)&unk_100585280);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F550;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v7 predicateForContactsMatchingHandleStrings:isa];

  [v6 setPredicate:v10];
  id v18 = 0;
  id v11 = [v3 executeFetchRequest:v6 error:&v18];
  if (v11)
  {
    long long v12 = v11;
    id v13 = v18;
    id v14 = [v12 value];

    id v18 = v14;
    sub_1001F081C(&qword_100584D18);
    if (swift_dynamicCast())
    {
      id v15 = v17;
    }
    else
    {
      sub_1001F081C(&qword_100588780);
      id v15 = (id)Dictionary.init(dictionaryLiteral:)();
    }
  }
  else
  {
    id v15 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v15;
}

id sub_100202FF0(uint64_t a1, uint64_t a2)
{
  return sub_100202DCC(a1, a2);
}

unint64_t sub_100203014()
{
  unint64_t result = qword_100584D10;
  if (!qword_100584D10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100584D10);
  }
  return result;
}

uint64_t sub_100203054()
{
  return sub_100203078();
}

uint64_t sub_100203078()
{
  id v1 = [v0 accounts];
  sub_100203264();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_1002030D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002030F4(a1, a2, a3);
}

uint64_t sub_1002030F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  void v10[4] = a2;
  v10[5] = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  _DWORD v10[2] = sub_1002031C0;
  v10[3] = &unk_10050C6A8;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  [v4 greetingForAccountUUID:isa completion:v8];
  _Block_release(v8);

  return swift_release();
}

void sub_1002031C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10020324C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020325C()
{
  return swift_release();
}

unint64_t sub_100203264()
{
  unint64_t result = qword_100584D20;
  if (!qword_100584D20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100584D20);
  }
  return result;
}

uint64_t sub_1002032A4()
{
  uint64_t v1 = v0 + OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator + 8);
  if (v2)
  {
    uint64_t v3 = *(unsigned char *)v1 & 1;
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR___CSDUserIntentManager_queue);
    id v5 = objc_allocWithZone((Class)type metadata accessor for ProcessObserver());
    id v6 = v4;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v8 = [v5 initWithBundleIdentifiers:isa queue:v6];

    uint64_t v9 = *(void **)(v1 + 8);
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = v8;
    v8;

    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  id v10 = v2;
  return v3;
}

uint64_t sub_100203374()
{
  sub_1001F081C(&qword_100584DA0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10048FF70;
  *(void *)(v1 + 56) = &unk_100512B90;
  *(void *)(v1 + 64) = &off_100512BC0;
  *(unsigned char *)(v1 + 32) = 0;
  char v2 = sub_1002032A4();
  *(void *)(v1 + 96) = &unk_100512B10;
  *(void *)(v1 + 104) = &off_100512BD8;
  *(unsigned char *)(v1 + 72) = v2 & 1;
  *(void *)(v1 + 80) = v3;
  char v4 = *(unsigned char *)(v0 + OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator + 8);
  *(void *)(v1 + 136) = &unk_100512A90;
  *(void *)(v1 + 144) = &off_100512BF0;
  *(unsigned char *)(v1 + 112) = v4;
  *(void *)(v1 + 120) = v5;
  *(void *)(v1 + 176) = &unk_100512A10;
  *(void *)(v1 + 184) = &off_100512C08;
  *(unsigned char *)(v1 + 152) = 1;
  uint64_t v6 = v0 + OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator;
  *(void *)(v1 + 216) = type metadata accessor for MediaRemoteStateValidator();
  *(void *)(v1 + 224) = &off_100512BA8;
  id v7 = sub_1002044D8((uint64_t *)(v1 + 192));
  sub_10020453C(v6, (uint64_t)v7);
  swift_retain();
  return v1;
}

id sub_10020348C(void *a1)
{
  v1[OBJC_IVAR___CSDUserIntentManager_privateAPIValidator] = 0;
  uint64_t v3 = &v1[OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator];
  void *v3 = 0;
  v3[1] = 0;
  char v4 = &v1[OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator];
  sub_1001F081C(&qword_100584DA8);
  swift_allocObject();
  uint64_t v5 = v1;
  uint64_t v6 = sub_1002040B8(30, (uint64_t)j___s8Dispatch0A4TimeV3nowACyFZ, 0);
  char *v4 = 0;
  *((void *)v4 + 1) = v6;
  v5[OBJC_IVAR___CSDUserIntentManager_backgroundBluetoothAccessValidator] = 1;
  id v7 = &v5[OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator];
  *(void *)&v5[OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator] = 5;
  uint64_t v8 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  v7[*(int *)(type metadata accessor for MediaRemoteStateValidator() + 20)] = 1;
  *(void *)&v5[OBJC_IVAR___CSDUserIntentManager_queue] = a1;
  id v10 = a1;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for UserIntentManager();
  id v11 = objc_msgSendSuper2(&v13, "init");

  return v11;
}

void sub_100203620()
{
  id v6 = [objc_allocWithZone((Class)TLAlertConfiguration) initWithType:16];
  [v6 setTopic:TLAlertTopicSystemNotificationBackgroundMicUsage];
  [v6 setShouldIgnoreRingerSwitch:1];
  id v0 = [self alertWithConfiguration:v6];
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10048F550;
    *(void *)(v3 + 56) = sub_100204448();
    *(void *)(v3 + 64) = sub_100204488();
    *(void *)(v3 + 32) = v1;
    id v4 = v1;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    [v4 play];
    SBSUndimScreen();

    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = v6;
  }
}

uint64_t sub_10020378C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  id v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v2 + OBJC_IVAR___CSDUserIntentManager_queue);
  *id v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v5);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v5);
  if (v11) {
    return sub_10020418C(a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100203908(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  sub_1001F6398();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)&v58[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR___CSDUserIntentManager_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v3);
  if ((v9 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_100203374();
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)(v12 + 32);
    id v15 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v16 = v15[2];
      if (!v16 || LOBYTE(v15[6 * v16 + 3]) != 1)
      {
        uint64_t v17 = v14[3];
        uint64_t v18 = v14[4];
        sub_100204074(v14, v17);
        sub_1002CCE94((uint64_t)a1, v17, v18, (uint64_t)&v60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1003A4D34();
          id v15 = v23;
        }
        unint64_t v19 = v15[2];
        if (v19 >= v15[3] >> 1)
        {
          sub_1003A4D34();
          id v15 = v24;
        }
        void v15[2] = v19 + 1;
        BOOL v20 = &v15[6 * v19];
        long long v21 = v60;
        long long v22 = *(_OWORD *)v61;
        *(_OWORD *)((char *)v20 + 57) = *(_OWORD *)&v61[9];
        v20[2] = v21;
        v20[3] = v22;
      }
      v14 += 5;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v25 = v15[2];
  if (v25)
  {
    uint64_t v26 = (uint64_t)(v15 + 4);
    swift_bridgeObjectRetain();
    uint64_t v27 = v25;
    while (1)
    {
      sub_100204398(v26, (uint64_t)&v60);
      int v28 = v61[24];
      sub_1002043F4((uint64_t)&v60);
      if (v28 == 1) {
        break;
      }
      v26 += 48;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = 1;
  }
  else
  {
    uint64_t v27 = 0;
  }
LABEL_21:
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t result = swift_bridgeObjectRetain();
  if (v25)
  {
    unint64_t v29 = 0;
    uint64_t v30 = (uint64_t)(v15 + 4);
    while (v29 < v15[2])
    {
      sub_100204398(v30, (uint64_t)&v60);
      uint64_t v31 = *(void *)&v61[8];
      uint64_t v32 = *(void *)&v61[16];
      sub_100204074(&v60, *(uint64_t *)&v61[8]);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32))
      {
        uint64_t result = sub_1002043F4((uint64_t)&v60);
      }
      else
      {
        long long v57 = v60;
        v58[0] = *(_OWORD *)v61;
        *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)&v61[9];
        long long v33 = v59;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1002E3F14(0, v33[2] + 1, 1);
          long long v33 = v59;
        }
        unint64_t v35 = v33[2];
        unint64_t v34 = v33[3];
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)sub_1002E3F14((char *)(v34 > 1), v35 + 1, 1);
          long long v33 = v59;
        }
        v33[2] = v35 + 1;
        unint64_t v36 = &v33[6 * v35];
        long long v37 = v57;
        long long v38 = v58[0];
        *(_OWORD *)((char *)v36 + 57) = *(_OWORD *)((char *)v58 + 9);
        v36[2] = v37;
        v36[3] = v38;
      }
      ++v29;
      v30 += 48;
      if (v25 == v29) {
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  uint64_t v39 = v59[2];
  if (v39)
  {
    uint64_t v40 = (uint64_t)(v59 + 4);
    swift_retain();
    while (1)
    {
      sub_100204398(v40, (uint64_t)&v60);
      int v41 = v61[24];
      sub_1002043F4((uint64_t)&v60);
      if (v41 == 1) {
        break;
      }
      v40 += 48;
      if (!--v39)
      {
        swift_release_n();
        goto LABEL_38;
      }
    }
    swift_release_n();
    char v42 = 1;
  }
  else
  {
    swift_release();
LABEL_38:
    char v42 = 0;
  }
  id v43 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_10048FAF0;
  id v45 = [a1 identifier];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  *(void *)(v44 + 56) = &type metadata for String;
  unint64_t v49 = sub_1001F3B08();
  *(void *)(v44 + 64) = v49;
  *(void *)(v44 + 32) = v46;
  *(void *)(v44 + 40) = v48;
  LOBYTE(v60) = v27;
  uint64_t v50 = String.init<A>(reflecting:)();
  *(void *)(v44 + 96) = &type metadata for String;
  *(void *)(v44 + 104) = v49;
  *(void *)(v44 + 72) = v50;
  *(void *)(v44 + 80) = v51;
  LOBYTE(v60) = v42;
  uint64_t v52 = String.init<A>(reflecting:)();
  *(void *)(v44 + 136) = &type metadata for String;
  *(void *)(v44 + 144) = v49;
  *(void *)(v44 + 112) = v52;
  *(void *)(v44 + 120) = v53;
  uint64_t v54 = sub_1002CCC9C((uint64_t)v15);
  uint64_t v56 = v55;
  swift_bridgeObjectRelease();
  *(void *)(v44 + 176) = &type metadata for String;
  *(void *)(v44 + 184) = v49;
  *(void *)(v44 + 152) = v54;
  *(void *)(v44 + 160) = v56;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  if ((v42 & 1) == 0 && ((v27 ^ 1) & 1) == 0) {
    sub_100203620();
  }
  return v27;
}

void sub_100203E78()
{
}

id sub_100203EB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserIntentManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100203F64()
{
  return type metadata accessor for UserIntentManager();
}

uint64_t type metadata accessor for UserIntentManager()
{
  uint64_t result = qword_100584D80;
  if (!qword_100584D80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100203FB4()
{
  uint64_t result = type metadata accessor for MediaRemoteStateValidator();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_100204074(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1002040B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001F081C((uint64_t *)&unk_100587050);
  *(void *)(v3 + 16) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v7 = v3 + qword_10058A200;
  *(void *)(v3 + qword_10058A200) = a1;
  uint64_t v8 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  id v10 = (void *)(v3 + qword_10058A208);
  *id v10 = a2;
  v10[1] = a3;
  return v3;
}

uint64_t sub_10020418C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v20 - v10;
  uint64_t v12 = sub_1001F081C((uint64_t *)&unk_100588460);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = *(void (**)(uint64_t))(v2 + qword_10058A208);
  uint64_t v16 = swift_bridgeObjectRetain();
  v15(v16);
  + infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v17 = sub_1001F081C((uint64_t *)&unk_100587050);
  uint64_t v18 = &v14[*(int *)(v17 + 44)];
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v11, v5);
  sub_1001F0530((uint64_t)v14, 0, 1, v17);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1002C24A0((uint64_t)v14);
  return swift_endAccess();
}

uint64_t sub_100204398(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002043F4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100204448()
{
  unint64_t result = qword_100584D90;
  if (!qword_100584D90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100584D90);
  }
  return result;
}

unint64_t sub_100204488()
{
  unint64_t result = qword_100584D98;
  if (!qword_100584D98)
  {
    sub_100204448();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100584D98);
  }
  return result;
}

uint64_t *sub_1002044D8(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10020453C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaRemoteStateValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002045A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MediaRemoteStateValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1002045FC@<X0>(void *a1@<X8>)
{
  if (qword_1005839A0 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  _CFPreferencesSetFileProtectionClass();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone((Class)NSUserDefaults);
  id v6 = sub_100204C3C(v2, v4);
  id result = (id)sub_100204CA0();
  a1[3] = result;
  a1[4] = &off_10050C6D0;
  if (!v6)
  {
    id result = [objc_allocWithZone((Class)NSUserDefaults) init];
    id v6 = result;
  }
  *a1 = v6;
  return result;
}

uint64_t sub_10020472C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v24 - v10;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v4 valueForKey:v12];

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1001F75B4(v24, v25);
    sub_100201880((uint64_t)v25, (uint64_t)v24);
    if (swift_dynamicCast())
    {
      sub_1001F0530((uint64_t)v11, 0, 1, a2);
      sub_1002018DC((uint64_t)v25);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v11, a2);
      uint64_t v14 = a3;
      uint64_t v15 = 0;
    }
    else
    {
      sub_1001F0530((uint64_t)v11, 1, 1, a2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if (qword_1005839A0 != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      sub_1001F081C(&qword_100584B20);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10048FB00;
      sub_100201880((uint64_t)v25, (uint64_t)v24);
      uint64_t v18 = String.init<A>(reflecting:)();
      uint64_t v20 = v19;
      *(void *)(v17 + 56) = &type metadata for String;
      unint64_t v21 = sub_1001F3B08();
      *(void *)(v17 + 64) = v21;
      *(void *)(v17 + 32) = v18;
      *(void *)(v17 + 40) = v20;
      *(void *)&v24[0] = a1;
      swift_getMetatypeMetadata();
      uint64_t v22 = sub_1002747A0((uint64_t)v24);
      *(void *)(v17 + 96) = &type metadata for String;
      *(void *)(v17 + 104) = v21;
      *(void *)(v17 + 72) = v22;
      *(void *)(v17 + 80) = v23;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      sub_1002018DC((uint64_t)v25);
      uint64_t v14 = a3;
      uint64_t v15 = 1;
    }
    return sub_1001F0530(v14, v15, 1, a2);
  }
  else
  {
    return sub_1001F0530(a3, 1, 1, a2);
  }
}

id sub_100204A60()
{
  return [v0 synchronize];
}

void sub_100204A70(uint64_t a1)
{
}

void sub_100204A94(uint64_t a1)
{
  sub_100204CE0(a1, (uint64_t)v9);
  uint64_t v2 = v10;
  if (v10)
  {
    uint64_t v3 = sub_100204074(v9, v10);
    uint64_t v4 = *(void *)(v2 - 8);
    __chkstk_darwin(v3);
    id v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v4 + 16))(v6);
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
    sub_1002018DC((uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  [v1 setObject:v7 forKey:v8];
  swift_unknownObjectRelease();
}

uint64_t sub_100204BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_10020472C(a1, a2, a3);
}

id sub_100204C18()
{
  return sub_100204A60();
}

id sub_100204C3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

unint64_t sub_100204CA0()
{
  unint64_t result = qword_100584DB0;
  if (!qword_100584DB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100584DB0);
  }
  return result;
}

uint64_t sub_100204CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_100584CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100204D48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_100206F20(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v13 = v2;
        uint64_t v8 = v7;
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
        swift_bridgeObjectRetain();
        sub_100325DCC(v10, v11, v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v2 = v13 - 1;
        if (v13 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

void *sub_100204F10(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_19;
        }
        id v9 = [v6 originator];
        id v10 = [v9 identifier];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(a2 + 16) && (unint64_t v11 = sub_100233664(), (v12 & 1) != 0))
        {
          uint64_t v13 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
          swift_bridgeObjectRelease();
          if (([v7 isActivated] & 1) != 0
            && (id v14 = [v7 originator],
                id v15 = [v14 revision],
                v14,
                v13 < (uint64_t)v15))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ++v5;
        if (v8 == v4) {
          goto LABEL_21;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_21;
      }
    }
    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_7;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_100205140(void *a1)
{
  id v1 = sub_100206FC0(a1, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v1)
  {
    uint64_t v2 = v1;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = 0;

    uint64_t v5 = sub_100205258(v3);
    uint64_t v6 = sub_1002057B0(v5);
    swift_bridgeObjectRelease();
    sub_100204D48(v6);
    sub_100206FF4();
  }
  else
  {
    id v7 = 0;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v5;
}

uint64_t sub_100205258(unint64_t a1)
{
  unint64_t v1 = a1;
  char v42 = &_swiftEmptyDictionarySingleton;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      unint64_t v39 = v1 & 0xC000000000000001;
      unint64_t v3 = &_swiftEmptyDictionarySingleton;
      uint64_t v4 = 4;
      long long v37 = xmmword_10048F560;
      uint64_t v38 = v2;
      while (1)
      {
        if (v39) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(v1 + 8 * v4);
        }
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        uint64_t v40 = v4 - 3;
        uint64_t v6 = (void *)v1;
        id v7 = v5;
        id v8 = [v7 originator];
        id v9 = [v8 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        unint64_t v1 = (unint64_t)v3;
        unint64_t v20 = sub_100233664();
        uint64_t v21 = v3[2];
        BOOL v22 = (v13 & 1) == 0;
        uint64_t v23 = v21 + v22;
        if (__OFADD__(v21, v22)) {
          goto LABEL_21;
        }
        char v24 = v13;
        if (v3[3] < v23)
        {
          sub_1002804C0(v23, 1, v14, v15, v16, v17, v18, v19, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, SBYTE4(v38));
          unint64_t v3 = v42;
          unint64_t v25 = sub_100233664();
          if ((v24 & 1) != (v26 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v20 = v25;
        }
        if (v24)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = (void *)(v3[7] + 8 * v20);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          sub_1001F081C((uint64_t *)&unk_100584DD0);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v37;
          *(void *)(v28 + 32) = v7;
          uint64_t v41 = v28;
          unint64_t v1 = (unint64_t)&v41;
          specialized Array._endMutation()();
          uint64_t v29 = v41;
          v3[(v20 >> 6) + 8] |= 1 << v20;
          uint64_t v30 = (uint64_t *)(v3[6] + 16 * v20);
          *uint64_t v30 = v10;
          v30[1] = v12;
          *(void *)(v3[7] + 8 * v20) = v29;
          uint64_t v31 = v3[2];
          BOOL v32 = __OFADD__(v31, 1);
          uint64_t v33 = v31 + 1;
          if (v32) {
            goto LABEL_22;
          }
          _OWORD v3[2] = v33;
        }
        unint64_t v1 = (unint64_t)v6;
        ++v4;
        if (v40 == v38) {
          goto LABEL_25;
        }
      }
    }
  }
  unint64_t v3 = &_swiftEmptyDictionarySingleton;
LABEL_25:
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

void *sub_100205520(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_24;
  }
LABEL_3:
  uint64_t v3 = 4;
  long long v31 = xmmword_10048F560;
  uint64_t v32 = v2;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      uint64_t v4 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v4 = (char *)*(id *)(a1 + 8 * v3);
    }
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v33 = v3 - 3;
    id v5 = v4;
    uint64_t v7 = *(void *)&v4[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
    uint64_t v6 = *(void *)&v4[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_100233664();
    uint64_t v16 = _swiftEmptyDictionarySingleton[2];
    BOOL v17 = (v8 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_21;
    }
    char v19 = v8;
    if (_swiftEmptyDictionarySingleton[3] < v18) {
      break;
    }
LABEL_12:
    if (v19)
    {
      swift_bridgeObjectRelease();
      BOOL v22 = (void *)(_swiftEmptyDictionarySingleton[7] + 8 * v15);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      sub_1001F081C((uint64_t *)&unk_100584DD0);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v31;
      *(void *)(v23 + 32) = v5;
      uint64_t v34 = v23;
      specialized Array._endMutation()();
      _swiftEmptyDictionarySingleton[(v15 >> 6) + 8] |= 1 << v15;
      char v24 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v15);
      *char v24 = v7;
      v24[1] = v6;
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v15) = v34;
      uint64_t v25 = _swiftEmptyDictionarySingleton[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_22;
      }
      _swiftEmptyDictionarySingleton[2] = v27;
    }
    ++v3;
    if (v33 == v32) {
      goto LABEL_24;
    }
  }
  sub_1002804CC(v18, 1, v9, v10, v11, v12, v13, v14, v29, v30, v31, *((uint64_t *)&v31 + 1), v32, SBYTE4(v32));
  unint64_t v20 = sub_100233664();
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    goto LABEL_12;
  }
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002057B0(uint64_t a1)
{
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v48 = &_swiftEmptyDictionarySingleton;
  sub_1002E4D1C(v44, a1);
  uint64_t v39 = v44[1];
  uint64_t v40 = v44[0];
  int64_t v3 = v46;
  unint64_t v4 = v47;
  long long v37 = v45;
  int64_t v38 = (unint64_t)(v45 + 8) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v6 = (v4 - 1) & v4;
  unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v7 = __clz(__rbit64(v9)) + (i << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v7);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v43 = *(void *)(*(void *)(v40 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100206614(&v43, (uint64_t)&v41);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_41:
      sub_100206FA0();
      return (uint64_t)v2;
    }
    if (v42)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    uint64_t v22 = v41;
    unint64_t v23 = v2[2];
    if (v2[3] <= v23)
    {
      sub_100280310(v23 + 1, 1, v16, v17, v18, v19, v20, v21, v36, v37, v38, v39, v40, SBYTE4(v40));
      uint64_t v2 = v48;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v24 = (char *)(v2 + 8);
    uint64_t v25 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~v2[(v26 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~v2[(v26 >> 6) + 8])) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)&v24[(v28 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v28;
    uint64_t v33 = (void *)(v2[6] + 16 * v28);
    *uint64_t v33 = v14;
    v33[1] = v15;
    *(void *)(v2[7] + 8 * v28) = v22;
    ++v2[2];
LABEL_32:
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v3 = i;
    unint64_t v4 = v6;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t i = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_43;
    }
    if (i >= v38) {
      goto LABEL_41;
    }
    unint64_t v9 = *(void *)(v39 + 8 * i);
    if (!v9)
    {
      sub_100206FDC();
      if (v10 == v11) {
        goto LABEL_41;
      }
      sub_100206FE8();
      if (v9) {
        goto LABEL_15;
      }
      sub_100206FDC();
      if (v10 == v11) {
        goto LABEL_41;
      }
      sub_100206FE8();
      if (v9) {
        goto LABEL_15;
      }
      sub_100206FDC();
      if (v10 == v11) {
        goto LABEL_41;
      }
      sub_100206FE8();
      if (v9)
      {
LABEL_15:
        int64_t i = v12;
      }
      else
      {
        int64_t i = v3 + 5;
        if (v3 + 5 >= v38) {
          goto LABEL_41;
        }
        unint64_t v9 = *(void *)(v39 + 8 * i);
        if (!v9)
        {
          while (1)
          {
            sub_100206FDC();
            if (v10 == v11) {
              goto LABEL_41;
            }
            sub_100206FE8();
            uint64_t v35 = v34 + 1;
            if (v9)
            {
              int64_t i = v35 - 1;
              break;
            }
          }
        }
      }
    }
    uint64_t v6 = (v9 - 1) & v9;
  }
  char v29 = 0;
  unint64_t v30 = (unint64_t)(63 - v25) >> 6;
  while (++v27 != v30 || (v29 & 1) == 0)
  {
    BOOL v31 = v27 == v30;
    if (v27 == v30) {
      unint64_t v27 = 0;
    }
    v29 |= v31;
    uint64_t v32 = *(void *)&v24[8 * v27];
    if (v32 != -1)
    {
      unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100205AD8(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = _swiftEmptyDictionarySingleton;
  long long v57 = _swiftEmptyDictionarySingleton;
  sub_1002E4D1C(v53, a1);
  uint64_t v5 = v53[0];
  uint64_t v4 = v53[1];
  unint64_t v6 = v56;
  uint64_t v48 = v54;
  int64_t v51 = (unint64_t)(v54 + 64) >> 6;
  int64_t v52 = v55;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v49 = v4;
  while (1)
  {
    while (1)
    {
      if (v6)
      {
        unint64_t v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v9 = v8 | (v52 << 6);
      }
      else
      {
        int64_t v10 = v52 + 1;
        if (__OFADD__(v52, 1))
        {
          __break(1u);
          goto LABEL_56;
        }
        if (v10 >= v51) {
          goto LABEL_54;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v10);
        int64_t v12 = v52 + 1;
        if (!v11)
        {
          int64_t v12 = v52 + 2;
          if (v52 + 2 >= v51) {
            goto LABEL_54;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v52 + 3;
            if (v52 + 3 >= v51) {
              goto LABEL_54;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v52 + 4;
              if (v52 + 4 >= v51) {
                goto LABEL_54;
              }
              unint64_t v11 = *(void *)(v4 + 8 * v12);
              if (!v11)
              {
                int64_t v12 = v52 + 5;
                if (v52 + 5 >= v51) {
                  goto LABEL_54;
                }
                unint64_t v11 = *(void *)(v4 + 8 * v12);
                if (!v11)
                {
                  int64_t v13 = v52 + 6;
                  while (v13 < v51)
                  {
                    unint64_t v11 = *(void *)(v4 + 8 * v13++);
                    if (v11)
                    {
                      int64_t v12 = v13 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_54:
                  sub_100206FA0();
                  return (uint64_t)v3;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v6 = (v11 - 1) & v11;
        unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
        int64_t v52 = v12;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      unint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * v9);
      if (!(v17 >> 62)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v4 = v49;
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v18 = result;
      if (result) {
        goto LABEL_24;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
    }
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v18) {
      goto LABEL_22;
    }
LABEL_24:
    uint64_t v50 = v3;
    unint64_t v19 = v17 & 0xC000000000000001;
    if ((v17 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_57;
      }
      uint64_t result = (uint64_t)*(id *)(v17 + 32);
    }
    uint64_t v20 = (char *)result;
    if (v18 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v18 < 2) {
        goto LABEL_58;
      }
      unint64_t v47 = v2;
      sub_1002DE19C(1, v19 == 0, v17);
      uint64_t v21 = v18 - 1;
      sub_1002DE19C(v21, v19 == 0, v17);
      uint64_t v22 = 0;
      do
      {
        if (v19) {
          unint64_t v23 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          unint64_t v23 = (char *)*(id *)(v17 + 8 * v22 + 40);
        }
        uint64_t v24 = *(void *)&v20[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        uint64_t v25 = *(void *)&v23[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        BOOL v26 = v24 < v25;
        if (v24 >= v25) {
          unint64_t v27 = v23;
        }
        else {
          unint64_t v27 = v20;
        }
        if (v26) {
          uint64_t v20 = v23;
        }

        ++v22;
      }
      while (v21 != v22);
      swift_bridgeObjectRelease();
      uint64_t v2 = v47;
    }
    uint64_t v28 = *(void *)&v20[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];

    int64_t v3 = v50;
    unint64_t v35 = v50[2];
    if (v50[3] <= v35)
    {
      sub_100280310(v35 + 1, 1, v29, v30, v31, v32, v33, v34, v46, v47, v48, v49, (int)v50, SBYTE4(v50));
      int64_t v3 = v57;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = v3 + 8;
    uint64_t v37 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~v3[(v38 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v40 = __clz(__rbit64((-1 << v38) & ~v3[(v38 >> 6) + 8])) | v38 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v4 = v49;
LABEL_52:
    *(void *)((char *)v36 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    id v45 = (void *)(v3[6] + 16 * v40);
    *id v45 = v15;
    v45[1] = v16;
    *(void *)(v3[7] + 8 * v40) = v28;
    ++v3[2];
    uint64_t result = swift_bridgeObjectRelease();
  }
  char v41 = 0;
  unint64_t v42 = (unint64_t)(63 - v37) >> 6;
  uint64_t v4 = v49;
  while (++v39 != v42 || (v41 & 1) == 0)
  {
    BOOL v43 = v39 == v42;
    if (v39 == v42) {
      unint64_t v39 = 0;
    }
    v41 |= v43;
    uint64_t v44 = v36[v39];
    if (v44 != -1)
    {
      unint64_t v40 = __clz(__rbit64(~v44)) + (v39 << 6);
      goto LABEL_52;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_100205F08(void *a1)
{
  id v1 = sub_100206FC0(a1, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  uint64_t v2 = 0;
  if (v1)
  {
    int64_t v3 = v1;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = 0;

    uint64_t v6 = sub_100205258(v4);
    sub_100206848(v6);
    sub_100206FF4();
  }
  else
  {
    id v7 = 0;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v2;
}

void *sub_100206028(uint64_t a1, void *a2)
{
  id v2 = sub_100206FC0(a2, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v2)
  {
    int64_t v3 = v2;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = 0;

    unint64_t v6 = swift_bridgeObjectRetain();
    id v7 = sub_100205520(v6);
    uint64_t v8 = sub_100205AD8((uint64_t)v7);
    swift_bridgeObjectRelease();
    return sub_100204F10(v4, v8);
  }
  else
  {
    id v10 = 0;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
}

void *sub_100206148(uint64_t a1, void *a2)
{
  unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v5 = self;
    swift_bridgeObjectRetain();
    uint64_t v6 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v8 = objc_msgSend(v5, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v7);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v6 += 16;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  sub_1001F6204(0, &qword_100587A50);
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100490020;
  *(void *)(v9 + 32) = objc_msgSend(self, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  *(void *)(v9 + 40) = sub_10036F610();
  specialized Array._endMutation()();
  id v10 = sub_1002D1698();
  id v18 = 0;
  id v11 = [a2 conversationLinkDescriptorsWithPredicate:v10 limit:0 offset:0 error:&v18];
  id v12 = v18;
  if (v11)
  {
    int64_t v13 = v11;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    uint64_t v14 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v12;
  }
  else
  {
    id v16 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  return v14;
}

void *sub_1002063DC(uint64_t a1, void *a2)
{
  v12[6] = 0;
  id v3 = sub_100206FC0(a2, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v3)
  {
    unint64_t v4 = v3;
    sub_1001F6204(0, (unint64_t *)&unk_100584DC0);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = 0;

    uint64_t v7 = sub_100205258(v5);
    uint64_t v8 = __chkstk_darwin(v7);
    void v12[2] = a1;
    sub_100206B98(v8, sub_100206FA8, (uint64_t)v12);
    sub_100206FF4();
    uint64_t v9 = sub_1002057B0(a1);
    swift_release();
    sub_100204D48(v9);
    sub_100206FF4();
  }
  else
  {
    id v10 = 0;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  return (void *)a1;
}

uint64_t sub_10020654C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 0;
  }
  if (a4[4] == a1 && a4[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v4 == 1) {
    return 0;
  }
  id v10 = a4 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v12 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v13 = *(v10 - 1) == a1 && *v10 == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v10 += 2;
    if (v12 == v4) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_100206614(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    id v9 = 0;
    char v10 = 1;
    goto LABEL_13;
  }
LABEL_34:
  swift_bridgeObjectRetain_n();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v4 = v2 & 0xC000000000000001;
  uint64_t v5 = 4;
  while (1)
  {
    if (v4) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v2 + 8 * v5);
    }
    uint64_t v7 = v6;
    unint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if ([v6 isActivated]) {
      break;
    }

    ++v5;
    if (v8 == v3) {
      goto LABEL_10;
    }
  }
  id v11 = [v7 originator];

  if (v8 != v3)
  {
    do
    {
      if (v4)
      {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_32;
        }
        if (v8 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_33;
        }
        id v12 = *(id *)(v2 + 8 * v8 + 32);
      }
      BOOL v13 = v12;
      unint64_t v14 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_31;
      }
      if ([v12 isActivated])
      {
        id v15 = [v13 originator];

        id v16 = [v11 revision];
        id v17 = [v15 revision];
        if ((uint64_t)v16 >= (uint64_t)v17) {
          id v18 = v15;
        }
        else {
          id v18 = v11;
        }
        if ((uint64_t)v16 < (uint64_t)v17) {
          id v11 = v15;
        }

        unint64_t v8 = v14;
      }
      else
      {

        ++v8;
      }
    }
    while (v14 != v3);
  }
  swift_bridgeObjectRelease_n();
  id v9 = [v11 revision];

  char v10 = 0;
LABEL_13:
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
}

void sub_100206848(uint64_t a1)
{
  sub_1001F081C(&qword_100587100);
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)v2;
  int64_t v4 = 0;
  uint64_t v33 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v30 = v6;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v32 = v2 + 64;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  uint64_t v12 = (v10 - 1) & v10;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    unint64_t v35 = v12;
    int64_t v36 = v4;
    id v17 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v18 = v17[1];
    uint64_t v37 = *v17;
    unint64_t v38 = i;
    unint64_t v19 = *(void *)(*(void *)(v33 + 56) + 8 * i);
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    if (v20)
    {
      unint64_t v21 = 0;
      uint64_t v39 = 0;
      while (1)
      {
        if ((v19 & 0xC000000000000001) != 0)
        {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          if (v21 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_43;
          }
          id v22 = *(id *)(v19 + 8 * v21 + 32);
        }
        unint64_t v23 = v22;
        unint64_t v24 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if ([v22 isActivated])
        {
          id v25 = [v23 originator];
          id v34 = [v25 revision];

          if (__OFADD__(v39, v34)) {
            goto LABEL_45;
          }
          v39 += (uint64_t)v34;
          unint64_t v21 = v24;
        }
        else
        {

          ++v21;
        }
        if (v24 == v20) {
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v39 = 0;
LABEL_36:
    swift_bridgeObjectRelease_n();
    *(void *)(v32 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
    BOOL v26 = (void *)(v3[6] + 16 * v38);
    void *v26 = v37;
    v26[1] = v18;
    *(void *)(v3[7] + 8 * v38) = v39;
    uint64_t v27 = v3[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_44;
    }
    _OWORD v3[2] = v29;
    unint64_t v10 = v35;
    int64_t v4 = v36;
    if (v35) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_46;
    }
    if (v14 >= v31) {
      return;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v31) {
        return;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v31) {
          return;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v12 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v31) {
    return;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v31) {
      return;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_47:
  __break(1u);
}

uint64_t sub_100206B98(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (uint64_t *)((char *)&v14 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1002DF3E4(0, v8, v9);
    sub_100206D1C((uint64_t)v9, v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    sub_1002DF3E4(0, v8, v11);
    sub_100206D1C((uint64_t)v11, v8, v6, a2);
    a3 = v12;
    swift_slowDealloc();
  }
  return a3;
}

void sub_100206D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v23 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v25) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v6);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_20:
    unint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v19 = a4(v16, v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19)
    {
      *(void *)(a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1002CF6F4(a1, a2, v23);
        return;
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v25) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    int64_t v6 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v25) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100206F20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100206FA0()
{
  return swift_release();
}

uint64_t sub_100206FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10020654C(a1, a2, a3, *(void **)(v3 + 16));
}

ValueMetadata *type metadata accessor for ConversationLinkDataSourceTUWrapper()
{
  return &type metadata for ConversationLinkDataSourceTUWrapper;
}

id sub_100206FC0(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0, 0, 0);
}

uint64_t sub_100206FF4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100207040()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v5 = *(void **)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5) {
    return *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible);
  }
  __break(1u);
  return result;
}

uint64_t sub_100207204()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  sub_1002084D8(v1);
  return v1;
}

uint64_t sub_1002072EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  void *v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

char *sub_10020730C(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v3 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  uint64_t v4 = sub_1002081E0(v3, a1, objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t sub_1002073C0()
{
  TUCTServerConnection();
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = _CTServerConnectionCarrierSettingsCopyValue();

  return v1;
}

uint64_t sub_10020742C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for DispatchWallTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v15 - v11;
  static DispatchWallTime.now()();
  *char v5 = a1;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v2);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  unint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v10, v6);
  OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, v6);
}

uint64_t sub_10020761C()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

void sub_100207640(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    if ([a1 isEmergency] && objc_msgSend(a1, "status") == 6)
    {
      static DispatchQoS.default.getter();
      static DispatchWorkItemFlags.barrier.getter();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v11;
      aBlock[4] = sub_100208434;
      aBlock[5] = v12;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1002C2C88;
      aBlock[3] = &unk_10050C7C8;
      unint64_t v13 = _Block_copy(aBlock);
      id v14 = v11;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v13);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_1002078D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue];
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueueAsBarrier(_:), v4);
  id v9 = v8;
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v10)
  {
    uint64_t v12 = sub_100207CD4();
    id v13 = sub_100008DCC();
    sub_1001F081C(&qword_100584B20);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10048F550;
    *(void *)(v14 + 56) = &type metadata for Int;
    *(void *)(v14 + 64) = &protocol witness table for Int;
    *(void *)(v14 + 32) = v12;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible] = 1;
    uint64_t v15 = OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem;
    uint64_t v16 = *(void *)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem];
    if (v16)
    {
      uint64_t v17 = *(void (**)(uint64_t))&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchCancelHandler];
      swift_retain();
      swift_retain();
      v17(v16);
      swift_release();
      swift_release();
    }
    static DispatchQoS.default.getter();
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v1;
    aBlock[4] = sub_100208488;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002C2C88;
    aBlock[3] = &unk_10050C818;
    _Block_copy(aBlock);
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    char v19 = v1;
    uint64_t v20 = DispatchWorkItem.init(qos:flags:block:)();
    swift_release();
    *(void *)&v1[v15] = v20;
    swift_retain();
    swift_release();
    unint64_t v21 = *(void (**)(uint64_t, id, uint64_t))&v19[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchAfterHandler];
    swift_retain();
    v21(v12, v9, v20);
    swift_release();
    id v22 = *(void (**)(uint64_t))&v19[OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange];
    if (v22)
    {
      uint64_t v23 = swift_retain();
      v22(v23);
      swift_release();
      return sub_100208490((uint64_t)v22);
    }
    else
    {
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100207CD4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueueAsBarrier(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0) {
    __break(1u);
  }
  uint64_t v13 = 0;
  uint64_t v7 = *(uint64_t (**)(uint64_t *))(v0
                                           + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutDeterminationHandler);
  swift_retain();
  uint64_t v8 = v7(&v13);
  swift_release();
  if (v8)
  {
    id v9 = sub_100008DCC();
    static os_log_type_t.error.getter();
    sub_1001F081C(&qword_100584B20);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10048FB00;
    *(void *)(v10 + 56) = &type metadata for Int32;
    *(void *)(v10 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v10 + 32) = v8;
    *(void *)(v10 + 96) = &type metadata for Int32;
    *(void *)(v10 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v10 + 72) = HIDWORD(v8);
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  else if (v13)
  {
    v12[1] = v13;
    if (swift_dynamicCast()) {
      return v12[0];
    }
  }
  return 0;
}

uint64_t sub_100207F24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueueAsBarrier(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    id v9 = sub_100008DCC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    *(unsigned char *)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible) = 0;
    *(void *)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem) = 0;
    uint64_t result = swift_release();
    uint64_t v10 = *(void (**)(uint64_t))(a1
                                         + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
    if (v10)
    {
      uint64_t v11 = swift_retain();
      v10(v11);
      return sub_100208490((uint64_t)v10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002080D0()
{
}

uint64_t type metadata accessor for EmergencyCallbackCapabilities()
{
  return self;
}

char *sub_1002081E0(void *a1, void *a2, unsigned char *a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible] = 0;
  id v7 = &a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange];
  void *v7 = 0;
  v7[1] = 0;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem] = 0;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue] = a2;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_callCenterObserver] = a1;
  uint64_t v8 = (uint64_t (**)())&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutDeterminationHandler];
  *uint64_t v8 = sub_1002073C0;
  v8[1] = 0;
  id v9 = (uint64_t (**)(uint64_t))&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchAfterHandler];
  *id v9 = sub_10020742C;
  v9[1] = 0;
  uint64_t v10 = (uint64_t (**)())&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchCancelHandler];
  *uint64_t v10 = sub_10020761C;
  v10[1] = 0;
  v20.receiver = a3;
  v20.super_class = ObjectType;
  id v11 = a2;
  id v12 = a1;
  uint64_t v13 = (char *)objc_msgSendSuper2(&v20, "init");
  uint64_t v14 = *(void **)&v13[OBJC_IVAR___CSDEmergencyCallbackCapabilities_callCenterObserver];
  uint64_t v15 = v13;
  [v14 setTriggers:1];
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19[4] = sub_100208414;
  v19[5] = v16;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_1002F8408;
  v19[3] = &unk_10050C778;
  uint64_t v17 = _Block_copy(v19);
  swift_unknownObjectRetain();
  swift_release();
  [v14 setCallChanged:v17];

  _Block_release(v17);
  swift_unknownObjectRelease();
  return v15;
}

uint64_t sub_1002083E4()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100208504();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_100208414(void *a1)
{
}

uint64_t sub_10020841C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020842C()
{
  return swift_release();
}

uint64_t sub_100208434()
{
  return sub_1002078D0();
}

uint64_t sub_100208458()
{
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100208488()
{
  return sub_100207F24(*(void *)(v0 + 16));
}

uint64_t sub_100208490(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1002084A0()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100208504();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1002084D0()
{
  return sub_100359A8C(*(void *)(v0 + 16));
}

uint64_t sub_1002084D8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100208504()
{
  return v0;
}

uint64_t sub_100208514()
{
  swift_slowDealloc();
  sub_1002087E8(*(void *)(v0 + 24));
  return v0;
}

uint64_t sub_100208544()
{
  sub_100208514();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OneShotCancellationBox()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneShotCancellationBox.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for OneShotCancellationBox.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

void *initializeWithTake for OneShotCancellationBox.State(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1002087A0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1002087B8(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for OneShotCancellationBox.State()
{
  return &type metadata for OneShotCancellationBox.State;
}

unint64_t sub_1002087E8(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

id sub_1002087FC(void *a1, void *a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = OBJC_IVAR___CSDFaceTimeUnknownReporter_idsService;
  id v7 = objc_allocWithZone((Class)IDSService);
  uint64_t v8 = v2;
  *(void *)&v2[v6] = sub_1003088E4(0xD000000000000026, 0x800000010047C590);
  *(void *)&v8[OBJC_IVAR___CSDFaceTimeUnknownReporter_queue] = a1;
  *(void *)&v8[OBJC_IVAR___CSDFaceTimeUnknownReporter_chManager] = a2;
  id v9 = a1;
  id v10 = a2;

  v13.receiver = v8;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, "init");

  return v11;
}

void sub_100208924()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDFaceTimeUnknownReporter_idsService);
  if (v1)
  {
    unsigned int v2 = self;
    id v3 = v1;
    id v4 = [v2 sharedInstance];
    id v5 = [v4 callerID];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      CSDCall.spamModel(with:)(v6, v8, (uint64_t)v20);
      swift_bridgeObjectRelease();
      uint64_t v9 = sub_1002962B4();
      sub_100209B64((uint64_t)v20);
      os_log_type_t v10 = static os_log_type_t.error.getter();
      id v11 = sub_1001B1AC8();
      if (os_log_type_enabled(v11, v10))
      {
        swift_bridgeObjectRetain_n();
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)id v12 = 136315138;
        if (v9)
        {
          swift_bridgeObjectRetain();
          sub_1001F081C((uint64_t *)&unk_100585020);
          uint64_t v13 = String.init<A>(reflecting:)();
          unint64_t v15 = v14;
        }
        else
        {
          unint64_t v15 = 0xE300000000000000;
          uint64_t v13 = 7104878;
        }
        sub_1002344D8(v13, v15, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v10, "FTUR: report unknown, model.dictionary: %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (v9)
      {
        v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v16.super.Class isa = 0;
      }
      [v3 reportSpamMessage:v16.super.isa];

      static os_log_type_t.error.getter();
      id v17 = sub_1001B1AC8();
      os_log(_:dso:log:_:_:)();

      return;
    }
    static os_log_type_t.error.getter();
    id v18 = sub_1001B1AC8();
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    static os_log_type_t.error.getter();
    id v18 = sub_1001B1AC8();
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_100208CD4()
{
  uint64_t v0 = 3553323;
  id v1 = objc_msgSend(self, "tu_defaults");
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 stringForKey:v2];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v7) {
      return v4;
    }
    else {
      swift_bridgeObjectRelease();
    }
  }
  return v0;
}

uint64_t sub_100208DBC()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag()) init];
  if (qword_100583988 != -1) {
    swift_once();
  }
  int v1 = byte_1005863E8;

  if (v1 == 1)
  {
    sub_100208CD4();
    sub_100209C28();
    sub_100209C74();
    char v2 = BidirectionalCollection<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = 1;
  }
  return v2 & 1;
}

id sub_100208EAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1001F081C((uint64_t *)&unk_100584DD0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10048F560;
  uint64_t v7 = self;
  *(void *)(v6 + 32) = [v7 predicateForCallsWithStatusOriginated:1];
  uint64_t v22 = v6;
  specialized Array._endMutation()();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F560;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 predicateForCallsWithRemoteParticipantHandleValue:v9];

  *(void *)(v8 + 32) = v10;
  uint64_t v21 = v8;
  specialized Array._endMutation()();
  unint64_t v11 = v8;
  if (a4)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      id v14 = [v7 predicateForCallsWithRemoteParticipantHandleNormalizedValue:v13];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v11 = v21;
    }
  }
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 >= 2) {
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 > 1)
    {
LABEL_10:
      sub_1001F6204(0, &qword_100587A50);
      sub_10036F610();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_22;
    }
  }
  if (v15)
  {
    sub_1002DE19C(0, (v11 & 0xC000000000000001) == 0, v11);
    if ((v11 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v11 + 32);
    }
    id v18 = v17;
    swift_bridgeObjectRelease();
    id v19 = v18;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_22:
  sub_1001F6204(0, &qword_100587A50);
  return sub_1002D1698();
}

BOOL sub_10020921C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v5 = sub_100208EAC(a1, a2, a3, a4);
  id v6 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  *(void *)(v7 + 56) = sub_1001F6204(0, (unint64_t *)&unk_1005887A0);
  *(void *)(v7 + 64) = sub_100209BC8();
  *(void *)(v7 + 32) = v5;
  id v8 = v5;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v9 = [*(id *)(v4 + OBJC_IVAR___CSDFaceTimeUnknownReporter_chManager) callsWithPredicate:v8 limit:1 offset:0 batchSize:0];
  sub_1001F6204(0, &qword_100585038);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  return v11 == 0;
}

uint64_t sub_1002093A0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  id v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = v2;
  aBlock[4] = sub_100209B44;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  aBlock[3] = &unk_10050C948;
  id v17 = _Block_copy(aBlock);
  id v18 = a2;
  id v19 = v2;
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_1001F5FE0();
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001F6030();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  return swift_release();
}

void sub_1002095C0(void *a1)
{
  id v2 = [self sharedInstance];
  if (!v2)
  {
    __break(1u);
    return;
  }
  id v3 = v2;
  unsigned int v4 = [v2 isGreenTea];

  if (v4)
  {
    if ([a1 isIncoming])
    {
      if ([a1 status] == 6)
      {
        id v5 = [a1 provider];
        unsigned int v6 = [v5 isFaceTimeProvider];

        if (v6)
        {
          uint64_t v7 = sub_1002772CC(a1);
          if (v7)
          {
            uint64_t v8 = *(void *)(v7 + 16);
            swift_bridgeObjectRelease();
            if (v8)
            {
              id v31 = sub_1001B1AC8();
              static os_log_type_t.default.getter();
LABEL_9:
              os_log(_:dso:log:type:_:)();

              return;
            }
          }
          id v9 = [a1 handle];
          if (v9)
          {
            uint64_t v10 = v9;
            id v11 = [v9 value];

            uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v14 = v13;

            id v15 = [a1 handle];
            if (v15)
            {
              uint64_t v16 = sub_1003577F4(v15);
              if (v17)
              {
                uint64_t v18 = v16;
                unint64_t v19 = v17;
                if (sub_100208DBC())
                {
                  BOOL v20 = sub_10020921C(v12, v14, v18, v19);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v31 = sub_1001B1AC8();
                  if (v20)
                  {
                    sub_1001F081C(&qword_100584B20);
                    uint64_t v21 = swift_allocObject();
                    *(_OWORD *)(v21 + 16) = xmmword_10048F550;
                    sub_1001F6204(0, (unint64_t *)&qword_10058A480);
                    id v22 = a1;
                    uint64_t v23 = String.init<A>(reflecting:)();
                    uint64_t v25 = v24;
                    *(void *)(v21 + 56) = &type metadata for String;
                    *(void *)(v21 + 64) = sub_1001F3B08();
                    *(void *)(v21 + 32) = v23;
                    *(void *)(v21 + 40) = v25;
                    static os_log_type_t.default.getter();
                    os_log(_:dso:log:type:_:)();

                    swift_bridgeObjectRelease();
                    sub_100208924();
                    return;
                  }
                  static os_log_type_t.default.getter();
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v31 = sub_1001B1AC8();
                  static os_log_type_t.default.getter();
                }
                goto LABEL_9;
              }
            }
            swift_bridgeObjectRelease();
          }
          id v26 = sub_1001B1AC8();
          sub_1001F081C(&qword_100584B20);
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_10048F550;
          uint64_t v28 = sub_100208CD4();
          uint64_t v30 = v29;
          *(void *)(v27 + 56) = &type metadata for String;
          *(void *)(v27 + 64) = sub_1001F3B08();
          *(void *)(v27 + 32) = v28;
          *(void *)(v27 + 40) = v30;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

void sub_100209A44()
{
}

uint64_t type metadata accessor for FaceTimeUnknownReporter()
{
  return self;
}

uint64_t sub_100209B04()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100209B44()
{
  sub_1002095C0(*(void **)(v0 + 16));
}

uint64_t sub_100209B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100209B5C()
{
  return swift_release();
}

uint64_t sub_100209B64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100209BC8()
{
  unint64_t result = qword_100585030;
  if (!qword_100585030)
  {
    sub_1001F6204(255, (unint64_t *)&unk_1005887A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585030);
  }
  return result;
}

unint64_t sub_100209C28()
{
  unint64_t result = qword_100585040;
  if (!qword_100585040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585040);
  }
  return result;
}

unint64_t sub_100209C74()
{
  unint64_t result = qword_10058B530;
  if (!qword_10058B530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10058B530);
  }
  return result;
}

uint64_t sub_100209D68()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCarPlayManager_carPlayScreenConnectionChanged);
  sub_1002084D8(v1);
  return v1;
}

uint64_t sub_100209DA8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_100209EA4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___CSDCarPlayManager_carPlayScreenConnectionChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDCarPlayManager_carPlayScreenConnectionChanged);
  void *v3 = a1;
  v3[1] = a2;
  return sub_100208490(v4);
}

BOOL sub_100209EF8()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___CSDCarPlayManager_carSessionStatus) currentSession];
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

char *sub_100209F48()
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v32 = v1;
  uint64_t v33 = v2;
  __chkstk_darwin(v1);
  sub_1001F2514();
  uint64_t v31 = v4 - v3;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_1001F6398();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  sub_1001F2514();
  type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v29 = v13;
  uint64_t v30 = v12;
  __chkstk_darwin(v12);
  sub_1001F2514();
  uint64_t v16 = v15 - v14;
  uint64_t v27 = OBJC_IVAR___CSDCarPlayManager_carSessionQueue;
  sub_1001F07DC();
  unint64_t v17 = v0;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10020A6C4((unint64_t *)&qword_100583B00, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1001F081C(&qword_100585100);
  sub_10020A70C((unint64_t *)&qword_100583B10, &qword_100585100);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  *(void *)(v26 + v27) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = &v17[OBJC_IVAR___CSDCarPlayManager_carPlayScreenConnectionChanged];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  id v19 = [objc_allocWithZone((Class)CARSessionStatus) init];
  *(void *)&v17[OBJC_IVAR___CSDCarPlayManager_carSessionStatus] = v19;

  v35.receiver = v17;
  v35.super_class = (Class)type metadata accessor for CarPlayManager();
  id v20 = objc_msgSendSuper2(&v35, "init");
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10020A6A4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C2C88;
  aBlock[3] = &unk_10050C998;
  id v22 = _Block_copy(aBlock);
  uint64_t v23 = (char *)v20;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10020A6C4((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_10020A70C((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v16, v30);
  swift_release();
  swift_release();
  id v24 = *(id *)&v23[OBJC_IVAR___CSDCarPlayManager_carSessionStatus];
  [v24 setSessionObserver:v23];

  return v23;
}

void sub_10020A3D4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = *(id *)(Strong + OBJC_IVAR___CSDCarPlayManager_carSessionStatus);

    [v2 waitForSessionInitialization];
  }
}

id sub_10020A470()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CarPlayManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CarPlayManager()
{
  return self;
}

void sub_10020A58C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void (**)(void))(v2 + OBJC_IVAR___CSDCarPlayManager_carPlayScreenConnectionChanged);
  if (v3)
  {
    swift_retain();
    v3(a2 & 1);
    sub_100208490((uint64_t)v3);
  }
}

uint64_t sub_10020A66C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10020A6A4()
{
}

uint64_t sub_10020A6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020A6BC()
{
  return swift_release();
}

uint64_t sub_10020A6C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10020A70C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001F08B4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10020A75C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020A794(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

void sub_10020A7B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  *(void *)(v1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion) = a1;
}

uint64_t sub_10020A7C8()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v1 = [self sharedInstance];
  id v2 = [v1 routeController];

  uint64_t v3 = (char *)objc_allocWithZone((Class)type metadata accessor for PowerAssertionManager());
  uint64_t v4 = sub_10020B074(v0, v2, v3);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t sub_10020A8A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription + 8);
  id v4 = objc_allocWithZone((Class)IMPowerAssertion);
  swift_bridgeObjectRetain();
  id v5 = sub_10020B010(v2, v3);
  sub_10020A7B4((uint64_t)v5);
  id v6 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10048F550;
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  if (v8)
  {
    sub_1001F6204(0, &qword_100585168);
    id v9 = v8;
    uint64_t v10 = String.init<A>(reflecting:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1001F3B08();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

void sub_10020A9F8(uint64_t a1)
{
  id v2 = sub_100008DCC();
  sub_1001F081C(&qword_100584B20);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10048F550;
  id v4 = *(void **)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  if (v4)
  {
    sub_1001F6204(0, &qword_100585168);
    id v5 = v4;
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1001F3B08();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_10020A7B4(0);
}

void sub_10020AB18(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    id v4 = *(void **)(Strong + OBJC_IVAR___CSDPowerAssertionManager_routeController);
    if (v4)
    {
      id v5 = [v4 pickedRoute];
      if (!v5)
      {
LABEL_15:
        uint64_t v18 = *(void (**)(uint64_t))&v3[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
        if (v18)
        {
          uint64_t v19 = swift_retain();
          v18(v19);
          sub_100208490((uint64_t)v18);
        }
        uint64_t v6 = v3;
        goto LABEL_18;
      }
      uint64_t v6 = v5;
      if (![v5 isHomePodFamily])
      {
LABEL_14:

        goto LABEL_15;
      }
      unint64_t v7 = *(void **)&v3[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver];
      if (v7)
      {
        id v8 = [v7 callContainer];
        aBlock[4] = sub_10020AF1C;
        aBlock[5] = 0;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10039E628;
        aBlock[3] = &unk_10050CAB0;
        id v9 = _Block_copy(aBlock);
        swift_release();
        id v10 = [v8 callsPassingTest:v9];
        swift_unknownObjectRelease();
        _Block_release(v9);
        if (swift_isEscapingClosureAtFileLocation())
        {
          __break(1u);
        }
        else
        {
          sub_1001F6204(0, (unint64_t *)&qword_1005855B0);
          unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (!(v11 >> 62))
          {
            uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_9;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        if (v12)
        {
          id v13 = sub_100008DCC();
          sub_1001F081C(&qword_100584B20);
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_10048F550;
          *(void *)(v14 + 56) = sub_1001F6204(0, (unint64_t *)&qword_10058A480);
          *(void *)(v14 + 64) = sub_10020B388();
          *(void *)(v14 + 32) = a1;
          id v15 = a1;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          swift_bridgeObjectRelease();
          if (!*(void *)&v3[OBJC_IVAR___CSDPowerAssertionManager_powerAssertion])
          {
            uint64_t v16 = *(void (**)(uint64_t))&v3[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
            if (v16)
            {
              uint64_t v17 = swift_retain();
              v16(v17);
              sub_100208490((uint64_t)v16);
            }
          }

LABEL_18:
          return;
        }
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_10020AE44(void *a1)
{
  id v2 = [a1 provider];
  unsigned __int8 v3 = [v2 isFaceTimeProvider];

  if (((v3 & 1) != 0
     || (id v4 = [a1 provider],
         unsigned int v5 = [v4 isTelephonyProvider],
         v4,
         v5)
     && ([a1 isUsingBaseband] & 1) == 0)
    && (sub_10039E598([a1 status], &off_10050AA08) & 1) != 0)
  {
    return [a1 isEndpointOnCurrentDevice] ^ 1;
  }
  else
  {
    return 0;
  }
}

id sub_10020AF20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PowerAssertionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PowerAssertionManager()
{
  return self;
}

id sub_10020B010(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithIdentifier:v3];

  return v4;
}

uint64_t sub_10020B074(void *a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_powerAssertion] = 0;
  unsigned int v5 = &a3[OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription];
  *(void *)unsigned int v5 = 0xD000000000000037;
  *((void *)v5 + 1) = 0x800000010047C720;
  uint64_t v6 = &a3[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  unint64_t v7 = &a3[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver] = a1;
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_routeController] = a2;
  v24.receiver = a3;
  v24.super_class = (Class)type metadata accessor for PowerAssertionManager();
  id v8 = a1;
  id v9 = a2;
  id v10 = (char *)objc_msgSendSuper2(&v24, "init");
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = (uint64_t (**)())&v10[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  uint64_t v13 = *(void *)&v10[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  *uint64_t v12 = sub_10020B320;
  v12[1] = (uint64_t (*)())v11;
  uint64_t v14 = v10;
  sub_100208490(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  uint64_t v16 = (void (**)())&v14[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  uint64_t v17 = *(void *)&v14[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  *uint64_t v16 = sub_10020B328;
  v16[1] = (void (*)())v15;
  uint64_t v18 = v14;
  uint64_t result = sub_100208490(v17);
  id v20 = *(void **)&v18[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver];
  if (v20)
  {
    [v20 setTriggers:33];
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v23[4] = sub_10020B368;
    void v23[5] = v21;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_1002F8408;
    v23[3] = &unk_10050CA88;
    id v22 = _Block_copy(v23);
    swift_unknownObjectRetain();
    swift_release();
    [v20 setCallChanged:v22];

    _Block_release(v22);
    swift_unknownObjectRelease();
    return (uint64_t)v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10020B2E8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020B320()
{
  return sub_10020A8A8(*(void *)(v0 + 16));
}

void sub_10020B328()
{
  sub_10020A9F8(*(void *)(v0 + 16));
}

uint64_t sub_10020B330()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10020B368(void *a1)
{
}

uint64_t sub_10020B370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020B380()
{
  return swift_release();
}

unint64_t sub_10020B388()
{
  unint64_t result = qword_100585160;
  if (!qword_100585160)
  {
    sub_1001F6204(255, (unint64_t *)&qword_10058A480);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585160);
  }
  return result;
}

void *sub_10020B3F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  id v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    id v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    sub_100252BF4(a1, a2, a3, a4);
    id v9 = v8;
    goto LABEL_9;
  }
  id v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    id v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

void sub_10020B4DC()
{
}

Swift::Int sub_10020B504()
{
  return Hasher._finalize()();
}

Swift::Int sub_10020B550()
{
  return Hasher._finalize()();
}

Swift::Int sub_10020B590()
{
  return sub_100202724(*v0);
}

void *sub_10020B5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[2] = a1;
  v3[3] = a2;
  void v3[4] = a3;
  void v3[5] = &_swiftEmptyDictionarySingleton;
  return v3;
}

void sub_10020B5C8(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v114 = a4;
  uint64_t v115 = a5;
  unsigned int v113 = a3;
  LODWORD(v116) = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001F2514();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for DispatchQoS();
  sub_1001F6398();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_1001F2514();
  uint64_t v20 = v19 - v18;
  type metadata accessor for DispatchTimeInterval();
  sub_1001F6398();
  uint64_t v111 = v22;
  uint64_t v112 = v21;
  __chkstk_darwin(v21);
  sub_1001F2514();
  unsigned int v110 = (void *)(v24 - v23);
  uint64_t v25 = type metadata accessor for DispatchTime();
  sub_1001F6398();
  uint64_t v27 = v26;
  uint64_t v29 = __chkstk_darwin(v28);
  char v108 = (char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  char v109 = (char *)&v92 - v31;
  type metadata accessor for OS_dispatch_source.TimerFlags();
  sub_1001F6398();
  __chkstk_darwin(v32);
  sub_1001F2514();
  uint64_t v37 = v36 - v35;
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v95 = v37;
  uint64_t v96 = v34;
  uint64_t v97 = v33;
  uint64_t v99 = v20;
  uint64_t v100 = v16;
  uint64_t v101 = v13;
  uint64_t v102 = v14;
  uint64_t v103 = v9;
  uint64_t v104 = v7;
  uint64_t v38 = v5 + 40;
  swift_beginAccess();
  uint64_t v106 = v5;
  uint64_t v39 = sub_10022307C(*(void *)(v5 + 40));
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  if (qword_100583A08 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  uint64_t v45 = sub_1001F5F88(v44, (uint64_t)qword_100594C10);
  swift_bridgeObjectRetain();
  sub_10020DD70();
  swift_bridgeObjectRetain();
  sub_10020DD70();
  uint64_t v98 = v45;
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  BOOL v48 = os_log_type_enabled(v46, v47);
  uint64_t v105 = v38;
  unint64_t v107 = (uint64_t (*)(uint64_t))v43;
  if (v48)
  {
    uint64_t v93 = v27;
    uint64_t v94 = v25;
    uint64_t v49 = swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    uint64_t v117 = v92;
    *(_DWORD *)uint64_t v49 = 136315906;
    uint64_t v50 = String.init<A>(reflecting:)();
    double aBlock = COERCE_DOUBLE(sub_1002344D8(v50, v51, &v117));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v52 = Set.description.getter();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    double aBlock = COERCE_DOUBLE(sub_1002344D8(v52, v54, &v117));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 22) = 2080;
    LOBYTE(aBlock) = (_BYTE)v116;
    uint64_t v55 = String.init<A>(reflecting:)();
    double aBlock = COERCE_DOUBLE(sub_1002344D8(v55, v56, &v117));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 32) = 2080;
    if (v39)
    {
      double aBlock = *(double *)&v39;
      uint64_t v119 = v41;
      uint64_t v57 = (uint64_t)v107;
      unint64_t v120 = v107;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = String.init<A>(reflecting:)();
      unint64_t v60 = v59;
    }
    else
    {
      unint64_t v60 = 0xE300000000000000;
      uint64_t v58 = 7104878;
      uint64_t v57 = (uint64_t)v107;
    }
    double aBlock = COERCE_DOUBLE(sub_1002344D8(v58, v60, &v117));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10020CA64(v39);
    sub_10020CA64(v39);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "ConversationLinkSync: enqueue action {messageType: %s, destinations: %s, mode: %s, hasExisting: %s}", (uint8_t *)v49, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v43 = v57;
    uint64_t v25 = v94;
    uint64_t v27 = v93;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10020DD8C();
    sub_10020DD8C();
  }
  uint64_t v61 = v106;
  if ((_BYTE)v116)
  {
    if (v116 == 1)
    {
      if (!v39)
      {
        uint64_t v94 = v41;
        swift_bridgeObjectRetain();
        sub_100252B78();
        uint64_t v116 = v73;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      uint64_t v117 = a1;
      swift_bridgeObjectRetain();
      sub_10020DD70();
      uint64_t v62 = swift_bridgeObjectRetain();
      uint64_t v63 = sub_10024DF84(v62);
      sub_100308D94(v63);
      swift_bridgeObjectRelease();
      double aBlock = COERCE_DOUBLE(sub_10020C0B0(v43, v41));
      uint64_t v119 = v64;
      unint64_t v120 = v65;
      char v121 = v66;
      uint64_t v67 = v117;
      swift_bridgeObjectRetain();
      sub_10020C0E4(v67);
      uint64_t v68 = v119;
      uint64_t v69 = (uint64_t)v120;
      unint64_t v70 = (unint64_t)v121;
      uint64_t v71 = swift_unknownObjectRetain();
      uint64_t v116 = sub_10020B3F4(v71, v68, v69, v70);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_17;
    }
    if (v39)
    {
      sub_10020DD8C();
      return;
    }
  }
  swift_bridgeObjectRetain();
  sub_100252B78();
  uint64_t v116 = v72;
  swift_bridgeObjectRelease();
  if (!v39)
  {
    uint64_t v94 = v41;
    goto LABEL_20;
  }
LABEL_17:
  swift_getObjectType();
  sub_10020DD70();
  swift_unknownObjectRetain();
  OS_dispatch_source.cancel()();
  uint64_t v94 = v41;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
LABEL_20:
  sub_10020CAE4();
  double aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10020DBC4(&qword_100585268, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1001F081C(&qword_100585270);
  sub_10020A70C(&qword_100585278, &qword_100585270);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v74 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  sub_1001F7664();
  v75();
  double v76 = (*(double (**)(void, void))(v61 + 24))(v116[2], v113);
  swift_getObjectType();
  uint64_t v77 = v108;
  static DispatchTime.now()();
  uint64_t v78 = v109;
  + infix(_:_:)();
  uint64_t v79 = *(void (**)(char *, uint64_t))(v27 + 8);
  v79(v77, v25);
  sub_10020C25C(v110);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  sub_1001F7664();
  v80();
  v79(v78, v25);
  uint64_t v81 = swift_allocObject();
  swift_weakInit();
  uint64_t v82 = (void *)swift_allocObject();
  uint64_t v83 = v114;
  uint64_t v84 = v115;
  v82[2] = v81;
  v82[3] = v83;
  v82[4] = v84;
  char v122 = sub_10020CB9C;
  unsigned int v123 = v82;
  double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  uint64_t v119 = 1107296256;
  unint64_t v120 = sub_1002C2C88;
  char v121 = &unk_10050CCD0;
  unint64_t v85 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10020C498();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v85);
  sub_1001F7664();
  v86();
  sub_1001F7664();
  v87();
  swift_release();
  swift_release();
  OS_dispatch_source.resume()();
  swift_unknownObjectRetain();
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v88, v89))
  {
    unint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v90 = 134217984;
    double aBlock = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "ConversationLinkSync: Scheduled action {interval: %f}", v90, 0xCu);
    swift_slowDealloc();
  }

  swift_beginAccess();
  swift_unknownObjectRetain();
  uint64_t v91 = (uint64_t)v116;
  swift_bridgeObjectRetain();
  sub_10027F674(v74, v91, 0);
  swift_endAccess();
  sub_10020CA64(v39);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
}

uint64_t sub_10020C0B0(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return a2;
  }
  __break(1u);
  return result;
}

void sub_10020C0E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_10020CBC0(v3);
  uint64_t v5 = v1[2];
  unint64_t v4 = v1[3];
  uint64_t v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = v1[1] + 16 * v5 + 16 * v6;
  if ((v4 & 1) == 0) {
    goto LABEL_7;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8[2];
  if ((void *)v7 != &v8[2 * v9 + 4])
  {
    swift_release();
LABEL_7:
    uint64_t v10 = v6;
    goto LABEL_9;
  }
  unint64_t v11 = v8[3];
  swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v6, v12);
  uint64_t v10 = v6 + v12;
  if (v13)
  {
LABEL_23:
    __break(1u);
    return;
  }
LABEL_9:
  uint64_t v14 = v10 - v6;
  if (__OFSUB__(v10, v6))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_100253284((uint64_t)v18, v7, v10 - v6, a1);
  if (v15 < v3)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v16 = v15;
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v17 = (void *)(v6 + v15);
  if (__OFADD__(v6, v16)) {
    goto LABEL_22;
  }
  sub_10020CCC8(v17);
LABEL_14:
  if (v16 == v14)
  {
    v19[0] = v18[0];
    v19[1] = v18[1];
    v19[2] = v18[2];
    v19[3] = v18[3];
    v19[4] = v18[4];
    sub_10020CD80(v19);
  }
  else
  {
    sub_100206FA0();
  }
}

uint64_t sub_10020C25C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  unint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10020C2D4(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = sub_10022307C(v5);
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6) {
    return result;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v10 >= *(void *)(v8 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v11 = v8 + 16 * v10;
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 40);
  swift_bridgeObjectRetain();
  a2(v12, v13);
  swift_bridgeObjectRelease();
  if (v10 + 1 == *(void *)(v8 + 16))
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10020C560();
      swift_release();
    }
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_10027F674(v6, v8, v10 + 1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return swift_release();
    }
  }
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_10020C498()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10020C560()
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 40) + 16))
  {
    uint64_t result = sub_100233758();
    if (v2)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      OS_dispatch_source.cancel()();
      uint64_t v3 = swift_beginAccess();
      uint64_t v4 = sub_1002CDE5C(v3);
      swift_endAccess();
      sub_10020CA64(v4);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10020C648()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10020C678()
{
  sub_10020C648();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationLinkSyncMessageQueue()
{
  return self;
}

uint64_t sub_10020C6D4()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10020C710(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10020C750(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_10020C7B8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RouteController.PendingRouteContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RouteController.PendingRouteContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.Action()
{
}

uint64_t getEnumTagSinglePayload for SoundDescriptorActionResolver.Sound(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_10020C8E0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10020C97CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.MessageType()
{
}

void type metadata accessor for ConversationLinkSyncMessageQueue.ScheduleMode()
{
}

unint64_t sub_10020C9C8()
{
  unint64_t result = qword_100585250;
  if (!qword_100585250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585250);
  }
  return result;
}

unint64_t sub_10020CA18()
{
  unint64_t result = qword_100585258;
  if (!qword_100585258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585258);
  }
  return result;
}

uint64_t sub_10020CA64(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10020CAA4(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10020CAE4()
{
  unint64_t result = qword_100585260;
  if (!qword_100585260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100585260);
  }
  return result;
}

uint64_t sub_10020CB24()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020CB5C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020CB9C()
{
  return sub_10020C2D4(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_10020CBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020CBB8()
{
  return swift_release();
}

uint64_t sub_10020CBC0(uint64_t result)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = result;
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v6 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  uint64_t v8 = v7[2];
  if ((void *)(v6 + 16 * v3 + 16 * v4) != &v7[2 * v8 + 4])
  {
    swift_release();
LABEL_7:
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  unint64_t v10 = v7[3];
  unint64_t result = swift_release();
  uint64_t v11 = (v10 >> 1) - v8;
  BOOL v12 = __OFADD__(v4, v11);
  uint64_t v9 = v4 + v11;
  if (v12)
  {
LABEL_20:
    __break(1u);
    return result;
  }
LABEL_9:
  unint64_t result = v4 + v5;
  if (__OFADD__(v4, v5))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v9 < result)
  {
    if (v9 + 0x4000000000000000 >= 0)
    {
      uint64_t v13 = 2 * v9;
      if (v13 > result) {
        unint64_t result = v13;
      }
      goto LABEL_14;
    }
    goto LABEL_19;
  }
LABEL_14:

  return sub_10020D1BC(result);
}

void *sub_10020CCC8(void *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  unint64_t result = (void *)swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    unint64_t result = _swiftEmptyArrayStorage;
  }
  uint64_t v8 = result[2];
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = &v7[v8];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v9;
  unint64_t result = (void *)swift_release();
  unint64_t v10 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * (void)v10);
  return result;
}

void *sub_10020CD80(void *result)
{
  unint64_t v2 = v1[3];
  uint64_t v39 = v1[2];
  uint64_t v3 = (v2 >> 1) - v39;
  if (__OFSUB__(v2 >> 1, v39)) {
    goto LABEL_66;
  }
  long long v4 = *((_OWORD *)result + 1);
  long long v42 = *(_OWORD *)result;
  long long v43 = v4;
  unint64_t v44 = result[4];
  unint64_t result = (void *)sub_10020D7DC();
  uint64_t v6 = v42;
  int64_t v7 = *((void *)&v43 + 1);
  unint64_t v8 = v44;
  if (!v5) {
    goto LABEL_55;
  }
  uint64_t v9 = result;
  uint64_t v10 = v5;
  int64_t v40 = (unint64_t)(v43 + 64) >> 6;
  unint64_t v11 = v2;
  uint64_t v33 = *((void *)&v42 + 1);
  uint64_t v35 = v1;
  do
  {
    if (__OFADD__(v3, 1))
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      return result;
    }
    uint64_t v41 = sub_10020D380((void *)v3, v3 + 1, *v1, v1[1], v39, v11);
    BOOL v12 = sub_10020D580();
    sub_10020D59C((uint64_t)&v41, v3, 0, (void (*)(uint64_t, uint64_t))v12);
    swift_release();
    unint64_t result = (void *)swift_release();
    unint64_t v13 = v1[3];
    uint64_t v39 = v1[2];
    if (__OFSUB__(v13 >> 1, v39)) {
      goto LABEL_60;
    }
    unint64_t v37 = v1[3];
    uint64_t v38 = (v13 >> 1) - v39;
    unint64_t v34 = v13 >> 1;
    uint64_t v36 = v1[1];
    if (v13)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t v14 = (void *)swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        uint64_t v14 = _swiftEmptyArrayStorage;
      }
      uint64_t v15 = v14[2];
      if ((void *)(v36 + 16 * v39 + 16 * v38) == &v14[2 * v15 + 4])
      {
        unint64_t v17 = v14[3];
        unint64_t result = (void *)swift_release();
        uint64_t v18 = (v17 >> 1) - v15;
        uint64_t v16 = v38 + v18;
        if (__OFADD__(v38, v18)) {
          goto LABEL_65;
        }
      }
      else
      {
        unint64_t result = (void *)swift_release();
        uint64_t v16 = v38;
      }
    }
    else
    {
      uint64_t v16 = (v13 >> 1) - v39;
    }
    if (v3 >= v16) {
      goto LABEL_44;
    }
    while (1)
    {
      uint64_t v19 = (void *)(v36 + 16 * v39 + 16 * v3);
      void *v19 = v9;
      v19[1] = v10;
      ++v3;
      if (v8)
      {
        unint64_t v20 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v21 = v20 | (v7 << 6);
        goto LABEL_25;
      }
      int64_t v22 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_59;
      }
      if (v22 >= v40)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v8 = 0;
        goto LABEL_44;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v22);
      if (!v23) {
        break;
      }
LABEL_24:
      unint64_t v8 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
      int64_t v7 = v22;
LABEL_25:
      uint64_t v26 = (void *)(*(void *)(v6 + 48) + 16 * v21);
      uint64_t v9 = (void *)*v26;
      uint64_t v10 = v26[1];
      if (v3 >= v16)
      {
        unint64_t result = (void *)swift_bridgeObjectRetain();
        uint64_t v3 = v16;
        goto LABEL_44;
      }
      unint64_t result = (void *)swift_bridgeObjectRetain();
    }
    int64_t v24 = v7 + 2;
    if (v7 + 2 >= v40)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v8 = 0;
      ++v7;
      goto LABEL_44;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v24);
    if (v23) {
      goto LABEL_20;
    }
    int64_t v25 = v7 + 3;
    if (v7 + 3 >= v40) {
      goto LABEL_41;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v25);
    if (v23) {
      goto LABEL_23;
    }
    int64_t v24 = v7 + 4;
    if (v7 + 4 >= v40) {
      goto LABEL_42;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v24);
    if (v23)
    {
LABEL_20:
      int64_t v22 = v24;
      goto LABEL_24;
    }
    int64_t v25 = v7 + 5;
    if (v7 + 5 >= v40)
    {
LABEL_41:
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v8 = 0;
      int64_t v7 = v24;
      goto LABEL_44;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v25);
    if (v23)
    {
LABEL_23:
      int64_t v22 = v25;
      goto LABEL_24;
    }
    int64_t v22 = v7 + 6;
    if (v7 + 6 >= v40)
    {
LABEL_42:
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v8 = 0;
      int64_t v7 = v25;
      goto LABEL_44;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (v23) {
      goto LABEL_24;
    }
    int64_t v27 = v7 + 7;
    while (v27 < v40)
    {
      unint64_t v23 = *(void *)(v33 + 8 * v27++);
      if (v23)
      {
        int64_t v22 = v27 - 1;
        goto LABEL_24;
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v8 = 0;
    int64_t v7 = v40 - 1;
LABEL_44:
    unint64_t v11 = v37;
    uint64_t v1 = v35;
    uint64_t v28 = v3 - v38;
    if (__OFSUB__(v3, v38)) {
      goto LABEL_61;
    }
    if (!v28) {
      continue;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    unint64_t result = (void *)swift_dynamicCastClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      unint64_t result = _swiftEmptyArrayStorage;
    }
    uint64_t v29 = result[2];
    BOOL v30 = __OFADD__(v29, v28);
    uint64_t v31 = v29 + v28;
    if (v30) {
      goto LABEL_62;
    }
    result[2] = v31;
    unint64_t result = (void *)swift_release();
    unint64_t v32 = v34 + v28;
    if (__OFADD__(v34, v28)) {
      goto LABEL_63;
    }
    if ((v32 & 0x8000000000000000) != 0) {
      goto LABEL_64;
    }
    unint64_t v11 = v37 & 1 | (2 * v32);
    uint64_t v1 = v35;
    v35[3] = v11;
  }
  while (v10);
LABEL_55:

  return (void *)sub_100206FA0();
}

size_t sub_10020D1BC(size_t result)
{
  int64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  long long v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull();
  *(void *)uint64_t v1 = v4;
  if ((result & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  int64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v9[2 * v10 + 4])
  {
    unint64_t result = swift_release();
    goto LABEL_23;
  }
  unint64_t v17 = v9[3];
  unint64_t result = swift_release();
  uint64_t v18 = (v17 >> 1) - v10;
  BOOL v19 = __OFADD__(v7, v18);
  v7 += v18;
  if (!v19)
  {
LABEL_23:
    if (v7 >= v2) {
      goto LABEL_21;
    }
LABEL_8:
    uint64_t v11 = *(void *)(v1 + 16);
    int64_t v12 = v5 - v11;
    if (__OFSUB__(v5, v11))
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = *(void *)(v1 + 8);
      if (v12 <= v2) {
        int64_t v14 = v2;
      }
      else {
        int64_t v14 = v5 - v11;
      }
      if (v14)
      {
        sub_1001F081C((uint64_t *)&unk_100585280);
        long long v4 = (void *)swift_allocObject();
        unint64_t result = j__malloc_size(v4);
        _DWORD v4[2] = v12;
        v4[3] = 2 * ((uint64_t)(result - 32) / 16);
      }
      else
      {
        long long v4 = _swiftEmptyArrayStorage;
      }
      if (v5 >= v11)
      {
        unint64_t result = sub_1002DE78C(v13 + 16 * v11, v5 - v11, (unint64_t)(v4 + 4));
        if (!__OFSUB__(0, v11))
        {
          uint64_t v15 = v4[2];
          uint64_t v16 = v11 + v15;
          if (!__OFADD__(v11, v15))
          {
            if (v16 >= v11)
            {
              unint64_t result = swift_unknownObjectRelease();
              if ((v16 & 0x8000000000000000) == 0)
              {
                *(void *)(v1 + 8) = &v4[-2 * v11 + 4];
                *(void *)(v1 + 16) = v11;
                *(void *)(v1 + 24) = (2 * v16) | 1;
LABEL_21:
                *(void *)uint64_t v1 = v4;
                return result;
              }
              goto LABEL_30;
            }
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10020D380(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  uint64_t v13 = a4 + 16 * a5 + 16 * v8;
  if ((void *)v13 == &v11[2 * v12 + 4])
  {
    unint64_t v15 = v11[3];
    unint64_t result = (void *)swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  unint64_t v17 = (void *)swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      unint64_t v17 = _swiftEmptyArrayStorage;
    }
    uint64_t v18 = v17[2];
    if ((void *)v13 == &v17[2 * v18 + 4])
    {
      unint64_t v20 = v17[3];
      unint64_t result = (void *)swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t result = (void *)swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    unint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v19 = v17[2];
  if ((void *)v13 == &v17[2 * v19 + 4])
  {
    unint64_t v23 = v17[3];
    unint64_t result = (void *)swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= (uint64_t)v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = (void *)v25;
  }
  if (!v26) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001F081C((uint64_t *)&unk_100585280);
  int64_t v27 = (void *)swift_allocObject();
  size_t v28 = j__malloc_size(v27);
  v27[2] = v6;
  uint64_t v27[3] = 2 * ((uint64_t)(v28 - 32) / 16);
  return v27;
}

Swift::Void (__swiftcall *sub_10020D580())()
{
  return ScreenSharingActivityManager.carPlayDidDisconnect();
}

uint64_t sub_10020D59C(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  unint64_t v6 = (unint64_t)v4[3] >> 1;
  uint64_t v7 = (void *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)result;
  uint64_t v10 = *(void *)(*(void *)result + 16);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  BOOL v11 = __OFSUB__(v14, v13);
  unint64_t v15 = &v14[-v13];
  if (v11)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v30 = v15;
  unint64_t v17 = (char *)(v9 + 32);
  uint64_t v18 = v9 + 32 + 16 * a2;
  unint64_t v32 = (char *)(v18 + 16 * a3);
  unint64_t result = sub_10020D9A8(v7);
  if (result)
  {
    uint64_t v19 = result;
    uint64_t v29 = v4[2];
    size_t v28 = a4;
    unint64_t v20 = (char *)(v4[1] + 16 * v29);
    swift_arrayDestroy();
    sub_1002DE1C4(v20, a2, v17);
    swift_arrayDestroy();
    v28(v18, a3);
    sub_1002DE1C4(&v20[16 * a2 + 16 * (void)v30], v13, v32);
    uint64_t v21 = v29;
    swift_arrayDestroy();
    *(void *)(v19 + 16) = 0;
    swift_release();
LABEL_15:
    swift_retain();
    swift_unknownObjectRelease();
    unint64_t result = sub_10020D960(v9, v21);
    uint64_t *v4 = result;
    v4[1] = v25;
    _DWORD v4[2] = v26;
    v4[3] = v27;
    return result;
  }
  uint64_t v21 = v4[2];
  uint64_t v22 = v21 + a2;
  if (__OFADD__(v21, a2)) {
    goto LABEL_21;
  }
  if (v22 < v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__(v22, v21))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  unint64_t result = ((uint64_t (*)(char *, uint64_t))a4)(&v17[16 * a2], a3);
  int64_t v23 = (int64_t)&v30[v22];
  if (__OFADD__(v22, v30))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v24 = (unint64_t)v4[3] >> 1;
  if (v24 < v23)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!__OFSUB__(v24, v23))
  {
    swift_arrayInitWithCopy();
    goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10020D7DC()
{
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v3 = (v1 - 1) & v1;
    unint64_t v4 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    uint64_t v5 = *(void *)(*(void *)(*v0 + 48) + 16 * v4);
    swift_bridgeObjectRetain();
LABEL_4:
    v0[3] = v2;
    v0[4] = v3;
    return v5;
  }
  int64_t v7 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    int64_t v8 = (unint64_t)(v0[2] + 64) >> 6;
    if (v7 >= v8)
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
      goto LABEL_4;
    }
    uint64_t v9 = v0[1];
    unint64_t v10 = *(void *)(v9 + 8 * v7);
    if (v10) {
      goto LABEL_8;
    }
    int64_t v11 = v2 + 2;
    if (v2 + 2 < v8)
    {
      unint64_t v10 = *(void *)(v9 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      if (v2 + 3 >= v8) {
        goto LABEL_25;
      }
      unint64_t v10 = *(void *)(v9 + 8 * (v2 + 3));
      if (v10)
      {
        int64_t v7 = v2 + 3;
        goto LABEL_8;
      }
      int64_t v11 = v2 + 4;
      if (v2 + 4 >= v8)
      {
        uint64_t v3 = 0;
        uint64_t v5 = 0;
        v2 += 3;
        goto LABEL_4;
      }
      unint64_t v10 = *(void *)(v9 + 8 * v11);
      if (v10)
      {
LABEL_12:
        int64_t v7 = v11;
LABEL_8:
        uint64_t v3 = (v10 - 1) & v10;
        unint64_t v4 = __clz(__rbit64(v10)) + (v7 << 6);
        int64_t v2 = v7;
        goto LABEL_3;
      }
      int64_t v7 = v2 + 5;
      if (v2 + 5 >= v8)
      {
LABEL_25:
        uint64_t v3 = 0;
        uint64_t v5 = 0;
        int64_t v2 = v11;
        goto LABEL_4;
      }
      unint64_t v10 = *(void *)(v9 + 8 * v7);
      if (v10) {
        goto LABEL_8;
      }
      int64_t v7 = v8 - 1;
      int64_t v12 = v2 + 6;
      while (v12 < v8)
      {
        unint64_t v10 = *(void *)(v9 + 8 * v12++);
        if (v10)
        {
          int64_t v7 = v12 - 1;
          goto LABEL_8;
        }
      }
    }
    uint64_t v3 = 0;
    uint64_t v5 = 0;
    int64_t v2 = v7;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020D960(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t sub_10020D9A8(void *a1)
{
  uint64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v9[2 * v10 + 4])
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = v9[3];
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < (uint64_t)a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = (void *)swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = _swiftEmptyArrayStorage;
    }
    uint64_t v16 = (v8 + 16 * v6 - (uint64_t)a1 - 32) / 16;
    uint64_t isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      uint64_t v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4) {
        return (uint64_t)a1;
      }
LABEL_19:
      sub_10020DB14(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020DB14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 16 * result;
  uint64_t result = swift_arrayDestroy();
  BOOL v9 = __OFSUB__(a3, v4);
  uint64_t v10 = a3 - v4;
  if (v9)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v7 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)sub_1002DE1C4((char *)(v7 + 32 + 16 * a2), v11 - a2, (char *)(v8 + 16 * a3));
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v12, v10);
  uint64_t v13 = v12 + v10;
  if (v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(void *)(v7 + 16) = v13;
LABEL_7:
  if (a3 > 0) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_10020DBC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_10020DC0C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10020DCD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.EnqueueMode()
{
}

unint64_t sub_10020DD10()
{
  unint64_t result = qword_100585290;
  if (!qword_100585290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585290);
  }
  return result;
}

uint64_t sub_10020DD70()
{
  return sub_10020CAA4(v0);
}

uint64_t sub_10020DD8C()
{
  return sub_10020CA64(v0);
}

uint64_t sub_10020DDA8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioInterruptionProviderFactory()
{
  return self;
}

_UNKNOWN **sub_10020DDDC()
{
  return &off_10050E260;
}

_UNKNOWN **sub_10020DDE8()
{
  return &off_10050E870;
}

uint64_t sub_10020DDF4(uint64_t a1)
{
  id v1 = [self retrieveSessionWithID:a1];
  type metadata accessor for AVAudioSessionInterruptionProvider();
  swift_allocObject();
  return sub_10024B414((uint64_t)v1, 0);
}

void destroy for NearbyDeviceRoute(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void **)(a2 + 48);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  id v6 = v4;

  return a1;
}

__n128 initializeWithTake for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyDeviceRoute(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyDeviceRoute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyDeviceRoute()
{
  return &type metadata for NearbyDeviceRoute;
}

void sub_10020E0BC(int a1, Swift::UInt32 a2)
{
}

void sub_10020E0E4(int a1, Swift::UInt a2)
{
}

uint64_t sub_10020E104()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10020E1A4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10020E348()
{
  return String.hash(into:)();
}

void sub_10020E368(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_10020E394()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10020E3FC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(void *)(a1 + 32) != *(void *)(a2 + 32)
    || ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) != 0)
  {
    return 0;
  }
  sub_10020EA08();
  return static NSObject.== infix(_:_:)() & 1;
}

void sub_10020E4AC()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 40) & 1);
  id v1 = *(id *)(v0 + 48);
  NSObject.hash(into:)();
}

Swift::Int sub_10020E56C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10020E5B4()
{
  return Hasher._finalize()();
}

unint64_t sub_10020E5F8()
{
  unint64_t result = qword_100585378;
  if (!qword_100585378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100585378);
  }
  return result;
}

void sub_10020E644(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [self destinationWithDevice:a1];
  uint64_t v5 = sub_1001F612C(a1, (SEL *)&selRef_uniqueIDOverride);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = sub_1001F612C(a1, (SEL *)&selRef_name);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = sub_1001F612C(a1, (SEL *)&selRef_modelIdentifier);
  if (v14)
  {
    uint64_t v15 = sub_10020E720(v13, v14);

    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v15;
    *(unsigned char *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = v4;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10020E720(uint64_t a1, uint64_t a2)
{
  v8._object = (void *)0x800000010047C8B0;
  v8._countAndFlagsBits = 0xD000000000000011;
  if (sub_10020F314(v8))
  {
    uint64_t v4 = 22;
  }
  else
  {
    v9._countAndFlagsBits = 0x6363416F69647541;
    v9._object = (void *)0xEE0079726F737365;
    if (sub_10020F314(v9))
    {
      uint64_t v4 = 6;
    }
    else
    {
      v10._countAndFlagsBits = 1685016681;
      v10._object = (void *)0xE400000000000000;
      if (sub_10020F314(v10))
      {
        uint64_t v4 = 7;
      }
      else
      {
        v11._countAndFlagsBits = 0x3864615069;
        v11._object = (void *)0xE500000000000000;
        if (sub_10020F314(v11))
        {
          uint64_t v4 = 15;
        }
        else
        {
          v12._countAndFlagsBits = 1684099177;
          v12._object = (void *)0xE400000000000000;
          if (sub_10020F314(v12))
          {
            uint64_t v4 = 8;
          }
          else
          {
            v13._countAndFlagsBits = 1667321193;
            v13._object = (void *)0xE400000000000000;
            if (sub_10020F314(v13))
            {
              uint64_t v4 = 9;
            }
            else
            {
              v14._countAndFlagsBits = 0x6B6F6F4263614DLL;
              v14._object = (void *)0xE700000000000000;
              if (sub_10020F314(v14))
              {
                uint64_t v4 = 10;
              }
              else
              {
                v15._countAndFlagsBits = 0x696E696D63614DLL;
                v15._object = (void *)0xE700000000000000;
                if (sub_10020F314(v15))
                {
                  uint64_t v4 = 11;
                }
                else
                {
                  v16._countAndFlagsBits = 0x6F725063614DLL;
                  v16._object = (void *)0xE600000000000000;
                  if (sub_10020F314(v16))
                  {
                    uint64_t v4 = 12;
                  }
                  else
                  {
                    v17._countAndFlagsBits = 0x6863746157;
                    v17._object = (void *)0xE500000000000000;
                    if (sub_10020F314(v17)) {
                      uint64_t v4 = 13;
                    }
                    else {
                      uint64_t v4 = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v5 = a1 == 0x312C363163614DLL && a2 == 0xE700000000000000;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    uint64_t v4 = 10;
  }
  v18._object = (void *)0x800000010047C8D0;
  v18._countAndFlagsBits = 0xD000000000000011;
  BOOL v6 = sub_10020F314(v18);
  swift_bridgeObjectRelease();
  if (v6) {
    return 27;
  }
  else {
    return v4;
  }
}

uint64_t sub_10020E924(uint64_t a1, uint64_t a2)
{
  sub_10020F388();
  uint64_t v5 = v4();
  if (v6)
  {
    return sub_10020E720(v5, v6);
  }
  else if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2) & 2) != 0)
  {
    return 6;
  }
  else
  {
    return 0;
  }
}

BOOL sub_10020E9A4()
{
  sub_10020F388();
  v0();
  if (!v1) {
    return 0;
  }
  v2._countAndFlagsBits = 0x5654656C707041;
  v2._object = (void *)0xE700000000000000;
  Swift::Bool v3 = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_10020EA08()
{
  unint64_t result = qword_1005861B0;
  if (!qword_1005861B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005861B0);
  }
  return result;
}

uint64_t sub_10020EA48@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v8 - 8);
  Swift::String v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51[3] = a2;
  v51[4] = a3;
  sub_1002044D8(v51);
  (*(void (**)(void))(*(void *)(a2 - 8) + 32))();
  uint64_t v11 = sub_10020F39C();
  if ((sub_1003374B4(v11, v12) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v13 = sub_10020F39C();
  v14(v13);
  uint64_t v15 = type metadata accessor for UUID();
  int v16 = sub_1001F758C((uint64_t)v10, 1, v15);
  sub_1002012F4((uint64_t)v10);
  if (v16 == 1)
  {
    sub_10020ED28((uint64_t)v51, (uint64_t)v55);
    sub_10020EF04((uint64_t)v55, v57);
    sub_10020F2F0();
    __chkstk_darwin(v17);
    uint64_t v19 = sub_10020F32C(v18, v50[0]);
    v20(v19);
    uint64_t v21 = sub_10020F358();
    sub_10020ED8C(v21, v22, v23, v24, v25);
    goto LABEL_8;
  }
  uint64_t v26 = sub_10020F39C();
  unint64_t v28 = sub_10020E924(v26, v27);
  if (v28 > 0x1B || ((1 << v28) & 0x8400040) == 0)
  {
    sub_10020ED28((uint64_t)v51, (uint64_t)v50);
    sub_1002018DC((uint64_t)v50);
    goto LABEL_11;
  }
  sub_10020ED28((uint64_t)v51, (uint64_t)v50);
  sub_100204074(v50, v50[3]);
  uint64_t v29 = sub_10020F39C();
  __int16 v31 = v30(v29);
  sub_1002018DC((uint64_t)v50);
  if ((v31 & 0x200) == 0)
  {
LABEL_11:

    goto LABEL_12;
  }
  sub_10020ED28((uint64_t)v51, (uint64_t)v55);
  sub_10020EF04((uint64_t)v55, v57);
  sub_10020F2F0();
  __chkstk_darwin(v32);
  unint64_t v34 = sub_10020F32C(v33, v50[0]);
  v35(v34);
  uint64_t v36 = sub_10020F358();
  sub_10020EFBC(v36, v37, v38, v39, v40);
LABEL_8:
  uint64_t v41 = v52[0];
  uint64_t v42 = v52[1];
  uint64_t v43 = v52[2];
  uint64_t v44 = v52[3];
  uint64_t v45 = v52[4];
  char v46 = v53;
  uint64_t v47 = v54;
  sub_1002018DC((uint64_t)v55);
  sub_10020EF54((uint64_t)v52, (uint64_t)v55);
  if (!v56)
  {
LABEL_12:
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v48 = 0;
    uint64_t v47 = 0;
    goto LABEL_13;
  }
  uint64_t v48 = v46 & 1;
LABEL_13:
  uint64_t result = sub_1002018DC((uint64_t)v51);
  *a4 = v41;
  a4[1] = v42;
  a4[2] = v43;
  a4[3] = v44;
  a4[4] = v45;
  a4[5] = v48;
  a4[6] = v47;
  return result;
}

uint64_t sub_10020ED28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10020ED8C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 32))(v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = v12;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    uint64_t v18 = v17;
    uint64_t v19 = sub_10020E924(a3, a4);
  }
  else
  {

    uint64_t v16 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v19 = 0;
    a2 = 0;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  *a5 = v16;
  a5[1] = v18;
  a5[2] = v15;
  a5[3] = v14;
  a5[4] = v19;
  a5[5] = 0;
  a5[6] = (uint64_t)a2;
  return result;
}

uint64_t sub_10020EF04(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10020EF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C((uint64_t *)&unk_1005865D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020EFBC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_1001F081C((uint64_t *)&unk_100585580);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 - 8);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v19, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  if (sub_1001F758C((uint64_t)v12, 1, v13) == 1)
  {

    sub_1002012F4((uint64_t)v12);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
LABEL_9:
    uint64_t v30 = 0;
    uint64_t v29 = 0;
    goto LABEL_10;
  }
  id v34 = a2;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v16, v12, v13);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v23 = v25;
  if (!v25)
  {

    (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v13);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_9;
  }
  uint64_t v22 = v24;
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v32 = v27;
  uint64_t v33 = v26;
  uint64_t v28 = sub_10020E924(a3, a4);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v13);
  if (v28 == 6)
  {
    uint64_t v30 = 14;
    uint64_t v20 = v33;
    uint64_t v29 = (uint64_t)v34;
    uint64_t v21 = v32;
  }
  else
  {
    uint64_t v20 = v33;
    uint64_t v29 = (uint64_t)v34;
    uint64_t v21 = v32;
    if (v28 == 22)
    {
      uint64_t v30 = 23;
    }
    else if (v28 == 27)
    {
      uint64_t v30 = 28;
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
LABEL_10:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, a3);
  *a5 = v20;
  a5[1] = v21;
  a5[2] = v22;
  a5[3] = v23;
  a5[4] = v30;
  a5[5] = 0;
  a5[6] = v29;
  return result;
}

BOOL sub_10020F314(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

char *sub_10020F32C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10020F358()
{
  return v0;
}

void sub_10020F370(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10020F39C()
{
  return v0;
}

uint64_t sub_10020F3A8()
{
  uint64_t v0 = type metadata accessor for P256.KeyAgreement.PublicKey();
  sub_1001F6398();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_1001F2514();
  uint64_t v6 = v5 - v4;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v7 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return v7;
}

BOOL LetMeInRequestorKeyAgreement.isExhausted.getter()
{
  uint64_t v2 = sub_1001F081C(&qword_100585380);
  uint64_t v3 = sub_100202384(v2);
  __chkstk_darwin(v3);
  sub_100210660();
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-v5];
  uint64_t v7 = v1 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey;
  swift_beginAccess();
  sub_10020F5E0(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for SymmetricKey();
  int v9 = sub_1001F758C((uint64_t)v6, 1, v8);
  sub_100210614((uint64_t)v6, &qword_100585380);
  if (v9 != 1) {
    return 0;
  }
  uint64_t v10 = v1 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey;
  swift_beginAccess();
  sub_10020F5E0(v10, v0);
  BOOL v11 = sub_1001F758C(v0, 1, v8) == 1;
  sub_100210614(v0, &qword_100585380);
  return v11;
}

uint64_t sub_10020F5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100585380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10020F648(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_1001F081C(&qword_100585380);
  uint64_t v7 = sub_100202384(v6);
  __chkstk_darwin(v7);
  sub_1001F7650();
  uint64_t v46 = v8;
  __chkstk_darwin(v9);
  uint64_t v45 = (char *)&v44 - v10;
  uint64_t v11 = type metadata accessor for SymmetricKey();
  sub_1001F6398();
  uint64_t v44 = v12;
  __chkstk_darwin(v13);
  sub_1001F7650();
  uint64_t v49 = v14;
  __chkstk_darwin(v15);
  uint64_t v48 = (char *)&v44 - v16;
  uint64_t v17 = sub_1001F081C(&qword_1005853E0);
  uint64_t v18 = sub_100202384(v17);
  __chkstk_darwin(v18);
  sub_1001F2514();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for P256.KeyAgreement.PublicKey();
  sub_1001F6398();
  uint64_t v47 = v23;
  __chkstk_darwin(v24);
  sub_10021067C();
  uint64_t v25 = &v2[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_localKey];
  uint64_t v26 = v2;
  uint64_t v58 = v25;
  P256.KeyAgreement.PrivateKey.init(compactRepresentable:)();
  unint64_t v51 = &v26[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey];
  sub_1002106F8((uint64_t)&v26[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey], 1);
  uint64_t v52 = &v26[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey];
  sub_1002106F8((uint64_t)&v26[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey], 1);
  uint64_t v56 = a1;
  unint64_t v57 = a2;
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  sub_1001F7440(a1, a2);
  uint64_t v27 = v50;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  if (v27)
  {
    swift_errorRelease();
    sub_1001F0530(v21, 1, 1, v22);
  }
  else
  {
    uint64_t v50 = v11;
    uint64_t v29 = v47;
    uint64_t v28 = (uint64_t)v48;
    uint64_t v30 = v49;
    sub_1001F0530(v21, 0, 1, v22);
    if (sub_1001F758C(v21, 1, v22) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v3, v21, v22);
      sub_1002F5280(v28, v30);
      uint64_t v35 = sub_100210694();
      v36(v35);
      uint64_t v37 = (uint64_t)v45;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
      uint64_t v39 = v50;
      v38(v45, v28, v50);
      sub_1002106F8(v37, 0);
      uint64_t v40 = v46;
      v38((char *)v46, v30, v39);
      sub_1002106F8(v40, 0);
      uint64_t v41 = (uint64_t)v51;
      sub_1002024E8();
      sub_100210560(v37, v41);
      swift_endAccess();
      uint64_t v42 = (uint64_t)v52;
      sub_1002024E8();
      sub_100210560(v40, v42);
      swift_endAccess();

      uint64_t v43 = (objc_class *)type metadata accessor for LetMeInRequestorKeyAgreement();
      v55.receiver = v26;
      v55.super_class = v43;
      uint64_t v33 = (uint64_t *)objc_msgSendSuper2(&v55, "init");
      sub_1001F7498(v53, v54);
      return v33;
    }
  }
  sub_100210614(v21, &qword_1005853E0);
  sub_100210514();
  sub_1002106AC();
  *__int16 v31 = 0;
  swift_willThrow();
  sub_1001F7498(v53, v54);
  type metadata accessor for P256.KeyAgreement.PrivateKey();
  sub_1001F75FC();
  sub_1001F7664();
  v32();
  uint64_t v33 = &qword_100585380;
  sub_100210614((uint64_t)v51, &qword_100585380);
  sub_100210614((uint64_t)v52, &qword_100585380);

  type metadata accessor for LetMeInRequestorKeyAgreement();
  swift_deallocPartialClassInstance();
  return v33;
}

uint64_t sub_10020FAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v54 = a1;
  uint64_t v5 = sub_1001F081C(&qword_1005853F0);
  uint64_t v6 = sub_100202384(v5);
  __chkstk_darwin(v6);
  sub_10021067C();
  type metadata accessor for AES.GCM.SealedBox();
  sub_1001F6398();
  uint64_t v52 = v8;
  uint64_t v53 = v7;
  __chkstk_darwin(v7);
  sub_1001F2514();
  uint64_t v59 = v10 - v9;
  uint64_t v11 = sub_1001F081C(&qword_100585380);
  uint64_t v12 = sub_100202384(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = sub_1002106C4();
  sub_1001F6398();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_1001F2514();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = v2 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey;
  swift_beginAccess();
  sub_10020F5E0(v23, v3);
  if (sub_1001F758C(v3, 1, v16) == 1)
  {
    sub_100210614(v3, &qword_100585380);
    sub_100210514();
    sub_1002106AC();
    *uint64_t v24 = 1;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v22, v3, v16);
    uint64_t v25 = sub_10020F3A8();
    uint64_t v27 = v18;
    if (v26 >> 60 == 15)
    {
      if (qword_100583A08 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_1001F5F88(v28, (uint64_t)qword_100594C10);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_100210730((void *)&_mh_execute_header, v31, v32, "Failed to derive let me in requestor's public key from the locally-generated private key");
        swift_slowDealloc();
      }

      sub_100210514();
      uint64_t v33 = sub_1002106AC();
      sub_100210710(v33, v34);
    }
    else
    {
      unint64_t v35 = v26;
      uint64_t v51 = v25;
      uint64_t v57 = v54;
      uint64_t v58 = v55;
      uint64_t v36 = type metadata accessor for AES.GCM.Nonce();
      sub_1001F0530(v4, 1, 1, v36);
      sub_1002105C8();
      uint64_t v37 = v56;
      static AES.GCM.seal<A>(_:using:nonce:)();
      if (v37)
      {
        sub_1001FCB18(v51, v35);
        sub_100210614(v4, &qword_1005853F0);
      }
      else
      {
        uint64_t v56 = v18;
        sub_100210614(v4, &qword_1005853F0);
        uint64_t v38 = AES.GCM.SealedBox.combined.getter();
        if (v39 >> 60 != 15)
        {
          uint64_t v4 = v38;
          sub_1001F0530((uint64_t)v15, 1, 1, v16);
          sub_1002024E8();
          sub_100210560((uint64_t)v15, v23);
          swift_endAccess();
          sub_1001F7664();
          v49();
          sub_1001F7664();
          v50();
          return v4;
        }
        if (qword_100583A08 != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_1001F5F88(v40, (uint64_t)qword_100594C10);
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        BOOL v43 = os_log_type_enabled(v41, v42);
        uint64_t v27 = v56;
        if (v43)
        {
          *(_WORD *)swift_slowAlloc() = 0;
          sub_100210730((void *)&_mh_execute_header, v44, v45, "Failed to retrieve combined data from encrypted LMI response.");
          swift_slowDealloc();
        }

        sub_100210514();
        uint64_t v46 = sub_1002106AC();
        sub_100210710(v46, v47);
        sub_1001FCB18(v51, v35);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v59, v53);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v22, v16);
  }
  return v4;
}

id sub_10020FFD0(uint64_t a1, unint64_t a2)
{
  type metadata accessor for AES.GCM.SealedBox();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1001F2514();
  uint64_t v7 = sub_1001F081C(&qword_100585380);
  uint64_t v8 = sub_100202384(v7);
  __chkstk_darwin(v8);
  sub_100210660();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1002106C4();
  sub_1001F6398();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1001F2514();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = v3 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey;
  swift_beginAccess();
  sub_10020F5E0(v17, v4);
  if (sub_1001F758C(v4, 1, v10) == 1)
  {
    sub_100210614(v4, &qword_100585380);
    sub_100210514();
    sub_1002106AC();
    *uint64_t v18 = 2;
    swift_willThrow();
    return (id)v2;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v4, v10);
  sub_1001F7440(a1, a2);
  sub_1002E8148(a1, a2);
  if (v30)
  {
    uint64_t v19 = sub_1002106E4();
    v20(v19);
    return (id)v2;
  }
  uint64_t v21 = static AES.GCM.open(_:using:)();
  unint64_t v23 = v22;
  sub_1001F0530(v2, 1, 1, v10);
  sub_1002024E8();
  sub_100210560(v2, v17);
  swift_endAccess();
  id v24 = objc_allocWithZone((Class)CSDMessagingConversationMessage);
  sub_1001F7440(v21, v23);
  id result = sub_1002E8B0C();
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    sub_1001F7498(v21, v23);
    sub_1001F7664();
    v26();
    uint64_t v27 = sub_1002106E4();
    v28(v27);
    return (id)v2;
  }
  __break(1u);
  return result;
}

void LetMeInRequestorKeyAgreement.init()()
{
}

id LetMeInRequestorKeyAgreement.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LetMeInRequestorKeyAgreement();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LetMeInRequestorKeyAgreement()
{
  uint64_t result = qword_1005853C8;
  if (!qword_1005853C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002103E8()
{
  return type metadata accessor for LetMeInRequestorKeyAgreement();
}

void sub_1002103F0()
{
  type metadata accessor for P256.KeyAgreement.PrivateKey();
  if (v0 <= 0x3F)
  {
    sub_1002104BC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1002104BC()
{
  if (!qword_1005853D8)
  {
    type metadata accessor for SymmetricKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005853D8);
    }
  }
}

unint64_t sub_100210514()
{
  unint64_t result = qword_1005853E8;
  if (!qword_1005853E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005853E8);
  }
  return result;
}

uint64_t sub_100210560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F081C(&qword_100585380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002105C8()
{
  unint64_t result = qword_1005853F8;
  if (!qword_1005853F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005853F8);
  }
  return result;
}

uint64_t sub_100210614(uint64_t a1, uint64_t *a2)
{
  sub_1001F081C(a2);
  sub_1001F75FC();
  sub_1001F7664();
  v3();
  return a1;
}

uint64_t sub_100210694()
{
  return v0;
}

uint64_t sub_1002106AC()
{
  return swift_allocError();
}

uint64_t sub_1002106C4()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t sub_1002106E4()
{
  return v0;
}

uint64_t sub_1002106F8(uint64_t a1, uint64_t a2)
{
  return sub_1001F0530(a1, a2, 1, v2);
}

uint64_t sub_100210710(uint64_t a1, unsigned char *a2)
{
  *a2 = 3;
  return swift_willThrow();
}

void sub_100210730(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100210750(uint64_t a1)
{
  sub_100312338(a1);
  uint64_t v2 = sub_10024E030(v1);
  sub_1003128B8(v2);
  char v4 = v3;
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_100210884(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1003128B8(a1);
  if (v5) {
    return 16;
  }
  if ([a4 sharingModeEnabled]) {
    return 21;
  }
  return 0;
}

void sub_1002109C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = sub_100008DCC();
  static os_log_type_t.error.getter();
  sub_1001F081C(&qword_100584B20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10048F550;
  type metadata accessor for CXCallFailureReason(0);
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1001F3B08();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  [a4 fail];
  id v12 = [objc_allocWithZone((Class)CXCallFailureContext) init];
  [v12 setFailureReason:a1];
  if ((unint64_t)(a1 - 16) > 5) {
    uint64_t v13 = 511;
  }
  else {
    uint64_t v13 = qword_100490490[a1 - 16];
  }
  [v12 setProviderEndedReason:v13];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [a2 reportCallWithUUID:isa failedAtDate:0 withContext:v12];
}

id sub_100210C7C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR___CSDBlockUtilities_blocklistUtilities;
  id v3 = objc_allocWithZone((Class)type metadata accessor for BlocklistUtilities());
  char v4 = v0;
  *(void *)&v0[v2] = [v3 init];

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for BlockUtilities()
{
  return self;
}

uint64_t sub_100210D5C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001F6204(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100210DAC(void *a1)
{
  uint64_t v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs] = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs;
  objc_super v6 = v2;
  *(void *)&v2[v5] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v7 = OBJC_IVAR___CSDRTCReporter_userScoreEnabled;
  id v8 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  LOBYTE(v5) = [v8 FTUserScore];

  v6[v7] = v5;
  *(void *)&v6[OBJC_IVAR___CSDRTCReporter_queue] = a1;
  *(void *)&v6[OBJC_IVAR___CSDRTCReporter_chManager] = 0;
  id v9 = objc_allocWithZone((Class)CSDAppleIDUtilities);
  id v10 = a1;
  id v11 = [v9 init];
  *(void *)&v6[OBJC_IVAR___CSDRTCReporter_appleIDUtilities] = v11;

  v14.receiver = v6;
  v14.super_class = ObjectType;
  id v12 = objc_msgSendSuper2(&v14, "init");

  return v12;
}

id sub_100210F98(void *a1, void *a2)
{
  id v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs] = &_swiftEmptyDictionarySingleton;
  uint64_t v7 = OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs;
  id v8 = v3;
  *(void *)&v3[v7] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v9 = OBJC_IVAR___CSDRTCReporter_userScoreEnabled;
  id v10 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  LOBYTE(v7) = [v10 FTUserScore];

  v8[v9] = v7;
  *(void *)&v8[OBJC_IVAR___CSDRTCReporter_queue] = a1;
  *(void *)&v8[OBJC_IVAR___CSDRTCReporter_chManager] = a2;
  id v11 = objc_allocWithZone((Class)CSDAppleIDUtilities);
  id v12 = a1;
  id v13 = a2;
  id v14 = [v11 init];
  *(void *)&v8[OBJC_IVAR___CSDRTCReporter_appleIDUtilities] = v14;

  v17.receiver = v8;
  v17.super_class = ObjectType;
  id v15 = objc_msgSendSuper2(&v17, "init");

  return v15;
}

void sub_1002111B0(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v41 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_type_t v42 = (char *)v40 - v8;
  __chkstk_darwin(v7);
  id v10 = (char *)v40 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (id *)((char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = *(void **)&v1[OBJC_IVAR___CSDRTCReporter_queue];
  void *v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    id v18 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = &v1[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions];
    swift_beginAccess();
    v40[2] = v19;
    uint64_t v20 = sub_100223124(v10, *(void *)v19);
    v40[1] = v1;
    uint64_t v21 = a1;
    unint64_t v22 = (void *)v20;
    swift_endAccess();
    unint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v10, v3);

    id v24 = sub_1001B1AC8();
    sub_1001F081C(&qword_100584B20);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10048F550;
    v40[0] = v21;
    id v26 = [v21 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v42, v10, v3);
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v29 = v28;
    v23(v10, v3);
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_1001F3B08();
    *(void *)(v25 + 32) = v27;
    *(void *)(v25 + 40) = v29;
    static os_log_type_t.default.getter();
    if (v22)
    {
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    else
    {
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      id v30 = v40[0];
      id v31 = [v40[0] reportingHierarchyToken];
      uint64_t v32 = (void *)sub_10021CAB0(v30, v31);

      id v33 = [v30 groupUUID];
      uint64_t v34 = (uint64_t)v41;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      if (v32)
      {
        id v35 = v32;
        sub_10027F6F8((uint64_t)v35, v34);
        v23((char *)v34, v3);
      }
      else
      {
        uint64_t v36 = (void *)sub_1002CE034(v34);
        v23((char *)v34, v3);

        id v35 = 0;
      }
      swift_endAccess();
      id v37 = [v30 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v38 = objc_allocWithZone((Class)type metadata accessor for RTCCSDConversationInfo());
      id v39 = sub_100390510(v30);
      swift_beginAccess();
      sub_10027F6D8((uint64_t)v39, (uint64_t)v10);
      v23(v10, v3);
      swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10021176C(void *a1, uint64_t a2, void *a3)
{
  if ([a1 supportsRelay])
  {
    id v5 = [a3 callUUID];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    uint64_t v9 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
    swift_beginAccess();
    unint64_t v10 = sub_100223128(v6, v8, *v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_endAccess();
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11)
        {
LABEL_5:
          BOOL v12 = __OFSUB__(v11, 1);
          uint64_t v13 = v11 - 1;
          if (v12)
          {
            __break(1u);
          }
          else
          {
            sub_1002DE19C(v13, (v10 & 0xC000000000000001) == 0, v10);
            if ((v10 & 0xC000000000000001) == 0)
            {
              id v14 = *(id *)(v10 + 8 * v13 + 32);
LABEL_8:
              id v15 = v14;
              swift_bridgeObjectRelease();
              v15[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_failed] = 0;

              return;
            }
          }
          id v14 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11) {
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
    }
  }
}

void sub_100211988()
{
  sub_1001FCC38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v5);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_1002024D0();
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v0;
  v7[3] = v2;
  void v7[4] = v4;
  v18[4] = sub_10021E80C;
  void v18[5] = v7;
  v18[0] = _NSConcreteStackBlock;
  sub_10021EAFC(COERCE_DOUBLE(1107296256));
  v18[2] = sub_1002C2C88;
  v18[3] = &unk_10050D898;
  uint64_t v8 = _Block_copy(v18);
  id v9 = v0;
  id v10 = v2;
  id v11 = v4;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  sub_10021EAB4();
  sub_10021EC48();
  _Block_release(v8);
  uint64_t v12 = sub_10021ECA8();
  v13(v12);
  sub_10021EC0C();
  v17(v14, v15, v16);
  swift_release();
  sub_1001FCC08();
}

void sub_100211B8C(char *a1, void *a2, void *a3)
{
  v199 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v215 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v211 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for DispatchQoS();
  uint64_t v204 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  v209 = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v214 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v207 = (void (**)(char *, uint64_t))((char *)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v213 = type metadata accessor for DispatchTime();
  uint64_t v216 = *(void *)(v213 - 8);
  uint64_t v10 = __chkstk_darwin(v213);
  v206 = (char *)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v208 = (char *)&v181 - v12;
  uint64_t v13 = sub_1001F081C((uint64_t *)&unk_100585580);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v181 - v18;
  __chkstk_darwin(v17);
  v203 = (char *)&v181 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  unint64_t v22 = *(void **)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  v201 = (char *)&v181 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v181 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  id v30 = (void (*)(uint64_t, uint64_t))((char *)&v181 - v29);
  __chkstk_darwin(v28);
  v200 = (char *)&v181 - v31;
  if ((sub_1002133D4((uint64_t)a2) & 1) == 0) {
    return;
  }
  v194 = v19;
  v195 = v16;
  uint64_t v197 = v8;
  uint64_t v196 = v5;
  v193 = v27;
  v202 = v22;
  v212 = v30;
  uint64_t v205 = v21;
  unsigned int v32 = [a2 status];
  v198 = (char *)a2;
  unsigned int v33 = v32;
  id v34 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_10048FB00;
  uint64_t v36 = (void ***)&a1[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions];
  swift_beginAccess();
  v192 = v36;
  double aBlock = *v36;
  swift_bridgeObjectRetain();
  sub_1001F081C(&qword_1005855A8);
  uint64_t v37 = String.init<A>(reflecting:)();
  uint64_t v39 = v38;
  *(void *)(v35 + 56) = &type metadata for String;
  unint64_t v40 = sub_1001F3B08();
  *(void *)(v35 + 64) = v40;
  *(void *)(v35 + 32) = v37;
  *(void *)(v35 + 40) = v39;
  unsigned int v41 = v33;
  LODWORD(aBlock) = v33;
  type metadata accessor for TUCallStatus(0);
  uint64_t v42 = String.init<A>(reflecting:)();
  *(void *)(v35 + 96) = &type metadata for String;
  *(void *)(v35 + 104) = v40;
  *(void *)(v35 + 72) = v42;
  *(void *)(v35 + 80) = v43;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  id v44 = sub_1001B1AC8();
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_10048F550;
  uint64_t v46 = a1;
  uint64_t v47 = (void ***)&a1[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions];
  swift_beginAccess();
  double aBlock = *v47;
  swift_bridgeObjectRetain();
  uint64_t v48 = String.init<A>(reflecting:)();
  *(void *)(v45 + 56) = &type metadata for String;
  *(void *)(v45 + 64) = v40;
  *(void *)(v45 + 32) = v48;
  *(void *)(v45 + 40) = v49;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v50 = v198;
  if ([v198 disconnectedReason])
  {
    BOOL v51 = [v50 disconnectedReason] == 6;
    if (v41 - 3 >= 2)
    {
      if (v41 != 1)
      {
        BOOL v52 = v41 == 6;
        uint64_t v53 = v205;
        uint64_t v54 = v212;
        uint64_t v55 = v202;
        uint64_t v56 = v197;
        if (!v52) {
          return;
        }
        goto LABEL_12;
      }
LABEL_18:
      id v74 = [self sharedInstance];
      unint64_t v75 = v50;
      id v76 = [v74 activeConversationForCall:v50 backedByGroupSession:1];

      uint64_t v77 = v205;
      uint64_t v78 = v212;
      uint64_t v79 = v202;
      if (v76)
      {
        id v80 = sub_1001B1AC8();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        id v81 = [v75 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v82 = (void (*)(void, uint64_t))v79[1];
        v82(v78, v77);
        uint64_t v83 = v46;
        id v84 = [v75 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        unint64_t v85 = (void *)sub_1002CE034((uint64_t)v78);
        v82(v78, v77);
        swift_endAccess();

        id v86 = [v76 groupUUID];
        uint64_t v87 = v77;
        uint64_t v88 = v201;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        os_log_type_t v89 = &v83[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo];
        swift_beginAccess();
        uint64_t v90 = sub_100223124(v88, *(void *)v89);
        if (v90)
        {
          uint64_t v91 = (void *)v90;
          swift_endAccess();
          v82(v88, v87);
          sub_10038FA7C(v75);
        }
        else
        {
          swift_endAccess();
          v82(v88, v87);
        }
        id v97 = [v76 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        uint64_t v98 = sub_1002CDF1C(v78);
        swift_endAccess();
        v82(v78, v87);
        if (v98)
        {
          nw_activity_complete_with_reason();
          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v92 = [v75 provider];
        uint64_t v93 = [v92 isFaceTimeProvider];

        if (v93)
        {
          id v94 = sub_1001B1AC8();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          id v95 = [v75 uniqueProxyIdentifierUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_beginAccess();
          uint64_t v96 = sub_1002CDF1C(v78);
          swift_endAccess();
          ((void (*)(void, uint64_t))v79[1])(v78, v77);
          if (v96)
          {
            nw_activity_complete_with_reason();
            swift_unknownObjectRelease();
          }
        }
      }
      return;
    }
  }
  else if (v41 - 3 >= 2)
  {
    if (v41 != 1)
    {
      BOOL v52 = v41 == 6;
      uint64_t v53 = v205;
      uint64_t v54 = v212;
      uint64_t v55 = v202;
      uint64_t v56 = v197;
      if (!v52) {
        return;
      }
      BOOL v51 = 1;
LABEL_12:
      id v57 = [v50 callGroupUUID];
      BOOL v191 = v51;
      if (v57)
      {
        uint64_t v58 = v57;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v59 = (void (*)(char *, void (*)(uint64_t, uint64_t), uint64_t))v55[4];
        uint64_t v60 = (uint64_t)v203;
        v59(v203, v54, v53);
        sub_1001F0530(v60, 0, 1, v53);
        uint64_t v61 = v46;
        if (sub_1001F758C(v60, 1, v53) != 1)
        {
          uint64_t v62 = v200;
          v59(v200, (void (*)(uint64_t, uint64_t))v60, v53);
          uint64_t v63 = &v61[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo];
          swift_beginAccess();
          uint64_t v64 = sub_100223124(v62, *(void *)v63);
          if (v64)
          {
            uint64_t v65 = (void *)v64;
            swift_endAccess();
            sub_10038FA7C(v50);
          }
          else
          {
            swift_endAccess();
          }
          ((void (*)(char *, uint64_t))v55[1])(v62, v53);
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v60 = (uint64_t)v203;
        sub_1001F0530((uint64_t)v203, 1, 1, v53);
        uint64_t v61 = v46;
      }
      sub_10021E23C(v60, (uint64_t *)&unk_100585580);
LABEL_32:
      uint64_t v99 = v214;
      uint64_t v100 = (void ***)sub_10021358C(v50);
      v201 = *(char **)&v61[OBJC_IVAR___CSDRTCReporter_queue];
      v192 = v100;
      v200 = v100;
      uint64_t v101 = v206;
      static DispatchTime.now()();
      uint64_t v102 = v207;
      void *v207 = 5;
      uint64_t v103 = *(void (**)(void))(v99 + 104);
      unsigned int v189 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v190 = v99 + 104;
      v188 = (void (*)(void *, void, uint64_t))v103;
      v103(v102);
      uint64_t v104 = v208;
      + infix(_:_:)();
      uint64_t v105 = *(void (**)(void *, uint64_t))(v99 + 8);
      uint64_t v214 = v99 + 8;
      v187 = v105;
      v105(v102, v56);
      uint64_t v106 = v216 + 8;
      unint64_t v107 = *(void (**)(char *, uint64_t))(v216 + 8);
      char v108 = v101;
      uint64_t v109 = v213;
      v107(v108, v213);
      uint64_t v110 = swift_allocObject();
      *(void *)(v110 + 16) = v61;
      *(void *)(v110 + 24) = v50;
      v222 = sub_10021E818;
      v223 = (void *)v110;
      double aBlock = _NSConcreteStackBlock;
      uint64_t v219 = 1107296256;
      v220 = sub_1002C2C88;
      v221 = &unk_10050D8E8;
      uint64_t v111 = v50;
      uint64_t v112 = _Block_copy(&aBlock);
      v198 = v61;
      v203 = v111;
      unsigned int v113 = v209;
      static DispatchQoS.unspecified.getter();
      v217 = _swiftEmptyArrayStorage;
      uint64_t v114 = sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v115 = sub_1001F081C((uint64_t *)&unk_100584B00);
      uint64_t v116 = sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
      uint64_t v117 = v211;
      uint64_t v185 = v115;
      uint64_t v184 = v116;
      uint64_t v118 = v196;
      uint64_t v186 = v114;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v112);
      uint64_t v119 = *(void (**)(char *, uint64_t))(v215 + 8);
      v215 += 8;
      v183 = v119;
      v119(v117, v118);
      v182 = *(void (**)(char *, uint64_t))(v204 + 8);
      v182(v113, v210);
      unint64_t v120 = v104;
      char v121 = v198;
      id v122 = v203;
      uint64_t v216 = v106;
      v181 = v107;
      v107(v120, v109);
      swift_release();
      id v123 = [v122 uniqueProxyIdentifierUUID];
      uint64_t v124 = (uint64_t)v212;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v125 = (uint64_t)v194;
      uint64_t v126 = v205;
      sub_1001F0530((uint64_t)v194, 1, 1, v205);
      swift_beginAccess();
      sub_1002C25B8(v125, v124);
      swift_endAccess();
      id v127 = [v122 uniqueProxyIdentifierUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      uint64_t v128 = (uint64_t)v195;
      sub_1002CE06C(v124);
      swift_endAccess();
      unsigned int v129 = v202;
      uint64_t v204 = v202[1];
      ((void (*)(uint64_t, uint64_t))v204)(v124, v126);
      if (sub_1001F758C(v128, 1, v126) == 1)
      {
        uint64_t v130 = v200;

        sub_10021E23C(v128, (uint64_t *)&unk_100585580);
        id v131 = [v122 provider];
        unsigned __int8 v132 = [v131 isTelephonyProvider];

        if (v132)
        {
          char v133 = (void *)sub_100213F30(v122);

          char v134 = 0;
          char v135 = 0;
        }
        else
        {
          id v165 = [v122 provider];
          unsigned int v166 = [v165 isFaceTimeProvider];

          if (v166)
          {
            id v167 = [v122 uniqueProxyIdentifierUUID];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            swift_beginAccess();
            uint64_t v168 = sub_1002CDF1C(v124);
            swift_endAccess();
            ((void (*)(uint64_t, uint64_t))v204)(v124, v126);
            if (v168)
            {
              [v122 disconnectedReason];
              nw_activity_complete_with_reason_and_underlying_error();
              swift_unknownObjectRelease();
            }
            id v169 = [v122 uniqueProxyIdentifierUUID];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            swift_beginAccess();
            uint64_t v170 = sub_1002CDF1C(v124);
            swift_endAccess();
            ((void (*)(uint64_t, uint64_t))v204)(v124, v126);
            if (v170)
            {
              [v122 disconnectedReason];
              nw_activity_complete_with_reason_and_underlying_error();
              swift_unknownObjectRelease();
            }
          }
          char v134 = 0;
          char v135 = 0;
          char v133 = v192;
        }
      }
      else
      {
        unsigned int v136 = v200;
        uint64_t v137 = (uint64_t)v193;
        ((void (*)(char *, uint64_t, uint64_t))v129[4])(v193, v128, v126);
        swift_beginAccess();
        uint64_t v138 = (void *)sub_1002CE050(v137);
        swift_endAccess();
        int v139 = v121[OBJC_IVAR___CSDRTCReporter_userScoreEnabled];
        v202 = v138;
        LODWORD(v195) = v139;
        if (v139 == 1)
        {
          char v140 = v138;
          id v141 = [v122 callUUID];
          BOOL v142 = v121;
          uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = v144;

          id v146 = objc_allocWithZone((Class)type metadata accessor for RTCCSDCallInfo());
          unsigned int v147 = v203;
          sub_1002BDE9C(v147, v138);
          uint64_t v149 = v148;
          swift_beginAccess();
          sub_10027F750(v149, (uint64_t)v192, v143, v145);
          swift_endAccess();
          swift_bridgeObjectRelease();
          char v150 = v206;
          static DispatchTime.now()();
          char v151 = v207;
          void *v207 = 120;
          uint64_t v152 = v197;
          v188(v151, v189, v197);
          uint64_t v153 = v208;
          + infix(_:_:)();
          v187(v151, v152);
          unint64_t v154 = v181;
          v181(v150, v213);
          char v155 = (void *)swift_allocObject();
          v155[2] = v142;
          v155[3] = v147;
          char v156 = v199;
          v155[4] = v199;
          v222 = sub_10021E824;
          v223 = v155;
          double aBlock = _NSConcreteStackBlock;
          uint64_t v219 = 1107296256;
          v220 = sub_1002C2C88;
          v221 = &unk_10050D938;
          unsigned int v157 = _Block_copy(&aBlock);
          uint64_t v158 = v142;
          uint64_t v159 = v147;
          id v160 = v156;
          char v161 = v209;
          static DispatchQoS.unspecified.getter();
          v217 = _swiftEmptyArrayStorage;
          char v162 = v211;
          uint64_t v163 = v196;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
          id v122 = v203;
          uint64_t v164 = v205;
          _Block_release(v157);
          v183(v162, v163);
          v182(v161, v210);
          v154(v153, v213);
          uint64_t v126 = v164;
          swift_release();
        }
        else
        {
        }
        uint64_t v171 = v193;
        swift_beginAccess();
        uint64_t v172 = sub_1002CDF1C(v171);
        swift_endAccess();
        if (v172)
        {
          [v122 disconnectedReason];
          nw_activity_complete_with_reason_and_underlying_error();
          swift_unknownObjectRelease();
        }
        swift_beginAccess();
        uint64_t v173 = sub_1002CDF1C(v171);
        swift_endAccess();
        if (v173)
        {
          [v122 disconnectedReason];
          nw_activity_complete_with_reason_and_underlying_error();
          swift_unknownObjectRelease();
        }
        id v174 = [v122 uniqueProxyIdentifierUUID];
        uint64_t v175 = v212;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        uint64_t v176 = sub_1002CDF1C(v175);
        swift_endAccess();
        uint64_t v177 = v175;
        uint64_t v178 = (void (*)(char *, uint64_t))v204;
        ((void (*)(void, uint64_t))v204)(v177, v126);
        if (v176)
        {
          [v122 disconnectedReason];
          nw_activity_complete_with_reason_and_underlying_error();
          swift_unknownObjectRelease();
        }
        v178(v171, v126);
        char v133 = v192;
        char v134 = v202;
        char v135 = (char)v195;
      }
      if (v133)
      {
        if (v135)
        {
        }
        else
        {
          id v179 = v133;
          uint64_t v180 = sub_100213FD4(v122, v134);
          sub_100214680(v179, v180);
          swift_bridgeObjectRelease();
        }
      }

      return;
    }
    goto LABEL_18;
  }
  id v66 = [self sharedInstance];
  id v67 = [v66 activeConversationForCall:v50 backedByGroupSession:1];

  uint64_t v68 = v50;
  uint64_t v69 = v205;
  unint64_t v70 = v212;
  uint64_t v71 = v202;
  if (v67)
  {
    id v72 = [v68 uniqueProxyIdentifierUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v73 = (void *)sub_1002149F4(v67, v70);
    ((void (*)(void, uint64_t))v71[1])(v70, v69);
  }
}

uint64_t sub_1002133D4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v10 = [self sharedInstance];
    id v11 = [v10 queue];

    __chkstk_darwin(v12);
    *(void *)&v13[-16] = a1;
    OS_dispatch_queue.sync<A>(execute:)();

    return v13[15];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021358C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v30 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v8 = (void (*)(uint64_t, uint64_t))((char *)v29 - v7);
  id v9 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
  swift_beginAccess();
  uint64_t v11 = sub_100223124(v8, *v10);
  swift_endAccess();
  uint64_t v12 = *(void (**)(void, uint64_t))(v4 + 8);
  v12(v8, v3);
  if (!v11)
  {
    id v13 = [a1 uniqueProxyIdentifierUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions);
    swift_beginAccess();
    uint64_t v11 = sub_100223124(v8, *v14);
    swift_endAccess();
    v12(v8, v3);
    if (!v11)
    {
      v29[1] = v1;
      id v15 = [a1 provider];
      unsigned int v16 = [v15 isTinCanProvider];

      id v17 = [a1 provider];
      unsigned __int8 v18 = [v17 isFaceTimeProvider];

      if ((v18 & 1) != 0 || v16)
      {
        id v19 = [self sharedInstance];
        v29[0] = [v19 activeConversationForCall:a1 backedByGroupSession:1];

        id v20 = sub_1001B1AC8();
        sub_1001F081C(&qword_100584B20);
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_10048F550;
        id v22 = [a1 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, void (*)(uint64_t, uint64_t), uint64_t))(v4 + 16))(v30, v8, v3);
        uint64_t v23 = String.init<A>(reflecting:)();
        uint64_t v25 = v24;
        v12(v8, v3);
        *(void *)(v21 + 56) = &type metadata for String;
        *(void *)(v21 + 64) = sub_1001F3B08();
        *(void *)(v21 + 32) = v23;
        *(void *)(v21 + 40) = v25;
        uint64_t v26 = (void *)v29[0];
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        if (v26)
        {
          id v27 = [a1 uniqueProxyIdentifierUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v11 = sub_1002149F4(v26, v8);
          v12(v8, v3);
        }
        else
        {
          return sub_100215558(a1);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

void sub_1002139B4(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a2 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  id v8 = (void *)sub_1002CE034((uint64_t)v6);
  id v9 = *(void (**)(char *, uint64_t))(v4 + 8);
  v9(v6, v3);
  swift_endAccess();

  id v10 = [a2 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v11 = (void *)sub_1002CE034((uint64_t)v6);
  v9(v6, v3);
  swift_endAccess();
}

void sub_100213B58(uint64_t a1, id a2)
{
  id v3 = [a2 callUUID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs);
  swift_beginAccess();
  id v8 = (void *)sub_1002231D8(v4, v6, *v7);
  id v10 = v9;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (v8)
  {
    if (v8 == (void *)1) {
      return;
    }
    swift_bridgeObjectRetain();
    sub_100213C54();
    swift_bridgeObjectRelease();
  }
  sub_10021DF2C(v8, v10);
}

void sub_100213C54()
{
  sub_1001FCC38();
  int v20 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  sub_1001F6398();
  __chkstk_darwin(v6);
  sub_10021EA1C();
  sub_1001F6398();
  __chkstk_darwin(v7);
  sub_1002024D0();
  id v8 = sub_1001B1AC8();
  sub_1001F081C(&qword_100584B20);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10048F550;
  swift_bridgeObjectRetain();
  uint64_t v10 = String.init<A>(reflecting:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1001F3B08();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v0;
  *(void *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v3;
  *(_DWORD *)(v13 + 40) = v20;
  void v21[4] = sub_10021DE18;
  void v21[5] = v13;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  void v21[2] = sub_1002C2C88;
  v21[3] = &unk_10050CEC0;
  uint64_t v14 = _Block_copy(v21);
  swift_bridgeObjectRetain();
  id v15 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10021E050((unint64_t *)&qword_100584FF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001F081C((uint64_t *)&unk_100584B00);
  sub_1001FCB74((unint64_t *)&qword_100585000, (uint64_t *)&unk_100584B00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  uint64_t v16 = sub_10021EAE0();
  v17(v16);
  uint64_t v18 = sub_10021EC30();
  v19(v18);
  swift_release();
  sub_1001FCC08();
}

uint64_t sub_100213F30(void *a1)
{
  id v1 = [a1 callUUID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  uint64_t v5 = sub_10021CDF8(v2, v4, 0, 0xD000000000000012, 0x800000010047CF70, 0xD000000000000021, 0x800000010047CF20, 0);
  swift_bridgeObjectRelease();
  return v5;
}