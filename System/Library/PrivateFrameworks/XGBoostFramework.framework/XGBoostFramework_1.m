void sub_22E928180()
{
  __cxa_end_catch();
  JUMPOUT(0x22E9281A4);
}

void sub_22E92818C()
{
}

void sub_22E92819C()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E9281CCLL);
}

void sub_22E9281E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E928238(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::Name()
{
  return "mape";
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v53 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v53 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v53 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v53) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v48 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v48) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v56 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v57 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v48 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v60 = v7;
  v55[0] = v15;
  v55[1] = v16;
  uint64_t v53 = v16;
  uint64_t v54 = 1;
  uint64_t v58 = v13;
  uint64_t v59 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v62.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v62);
    v62.__ptr_ = 0;
    std::vector<double>::vector(&v49, 1uLL, &v62);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v62.__ptr_ = 0;
    v63.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v63.__m_.__opaque, 0, sizeof(v63.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v61[0] = 2;
        v61[1] = v55;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v61, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_50;
          }
          float v32 = *(float *)(v48 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_50:
        }
          std::terminate();
        float v34 = *(float *)(v10 + 4 * v33);
        float v35 = *(float *)(v9 + 4 * v28);
        float v36 = 0.0;
        float v37 = 0.0;
        if (v34 != 0.0)
        {
          if (v35 >= 1.0e-16) {
            float v38 = *(float *)(v9 + 4 * v28);
          }
          else {
            float v38 = 1.0e-16;
          }
          float v37 = -(float)(v34 * logf(v38));
        }
        float v39 = 1.0 - v34;
        if (v39 != 0.0)
        {
          float v40 = 1.0 - v35;
          if ((float)(1.0 - v35) < 1.0e-16) {
            float v40 = 1.0e-16;
          }
          float v36 = -(float)(v39 * logf(v40));
        }
        *(double *)__p = *(double *)__p + (float)(v32 * (float)(v37 + v36));
        double v26 = *(double *)v49 + v32;
        *(double *)v49 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v62);
    std::mutex::~mutex(&v63);
    std::exception_ptr::~exception_ptr(&v62);
    v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v52)
    {
      v41 = (double *)__p;
      do
      {
        double v42 = *v41++;
        double v23 = v23 + v42;
      }
      while (v41 != v52);
    }
    if (v49 != v50)
    {
      double v22 = 0.0;
      v43 = (double *)v49;
      do
      {
        double v44 = *v43++;
        double v22 = v22 + v44;
      }
      while (v43 != v50);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
      v21 = __p;
    }
    if (v21)
    {
      v52 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v62.__ptr_ = *(void **)&v23;
  *(double *)&v63.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v62, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v62.__ptr_;
    double v22 = *(double *)&v63.__m_.__sig;
  }
  double v46 = 1.0;
  if (v22 != 0.0) {
    double v46 = v22;
  }
  return v23 / v46;
}

void sub_22E928998()
{
}

void sub_22E9289A4()
{
}

void sub_22E9289B4()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E9289E4);
}

void sub_22E9289FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E928A50(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::Name()
{
  return "logloss";
}

void std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E248FF0;
  return result;
}

void std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::PseudoErrorLoss::~PseudoErrorLoss(xgboost::metric::PseudoErrorLoss *this)
{
}

void xgboost::metric::PseudoErrorLoss::LoadConfig(xgboost::metric::PseudoErrorLoss *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
  v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::FromJson<xgboost::PesudoHuberParam>(v4, (xgboost::metric::PseudoErrorLoss *)((char *)this + 16), &v7);
  unint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E928C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::metric::PseudoErrorLoss::SaveConfig(xgboost::metric::PseudoErrorLoss *this, xgboost::Json *a2)
{
  v3 = (char *)(*(uint64_t (**)(xgboost::metric::PseudoErrorLoss *))(*(void *)this + 48))(this);
  std::string::basic_string[abi:ne180100]<0>(v5, v3);
  std::vector<std::pair<std::string, std::string>> v7 = &unk_26E24E210;
  uint64_t v8 = 0;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v5;
  uint64_t v10 = v6;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E928DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::metric::PseudoErrorLoss::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::PesudoHuberParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

double xgboost::metric::PseudoErrorLoss::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v50 = *(void *)(a3 + 32);
  if (v50 != *(void *)a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  if (v5 < 0)
  {
    unint64_t v11 = *(uint64_t **)(a3 + 24);
    uint64_t v8 = *v11;
    unint64_t v44 = (v11[1] - *v11) >> 2;
    uint64_t v10 = *(void *)(a3 + 40);
    if (v5 == -1)
    {
      uint64_t v6 = **a2;
      unint64_t v7 = ((*a2)[1] - v6) >> 2;
      uint64_t v43 = **(void **)(a3 + 72);
      unint64_t v9 = (*(void *)(*(void *)(a3 + 72) + 8) - v43) >> 2;
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      unint64_t v9 = 0;
      uint64_t v43 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a3 + 40);
  }
  float v45 = *(float *)(a1 + 20);
  uint64_t v50 = 0;
  if (v45 == 0.0) {
    dmlc::LogCheckFormat<float,double>();
  }
  uint64_t v12 = *(void *)(a1 + 8);
  int v13 = *(_DWORD *)(v12 + 24);
  if (v13 < 0)
  {
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v14 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v14;
    uint64_t v53 = (*(void *)(*(void *)(a3 + 24) + 8) - v14) >> 2;
    uint64_t v54 = v14;
    uint64_t v17 = *(void *)(a3 + 40);
    uint64_t v15 = v17 * v16;
    if (v18) {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = *(void *)(a3 + 40);
  }
  int v57 = v13;
  v52[0] = v16;
  v52[1] = v17;
  uint64_t v50 = v17;
  uint64_t v51 = 1;
  uint64_t v55 = v14;
  uint64_t v56 = v15;
  if (*(_DWORD *)(v12 + 24) == -1)
  {
    v59.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v59);
    v59.__ptr_ = 0;
    std::vector<double>::vector(&v46, 1uLL, &v59);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v59.__ptr_ = 0;
    v60.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v60.__m_.__opaque, 0, sizeof(v60.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v58[0] = 2;
        v58[1] = v52;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v58, *(int8x8_t *)&v26);
        if (v9)
        {
          if (v9 <= v30) {
            goto LABEL_42;
          }
          float v32 = *(float *)(v43 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v10;
        if (v33 >= v44) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v7 <= v28) {
LABEL_42:
        }
          std::terminate();
        float v34 = (float)(*(float *)(v8 + 4 * v33) - *(float *)(v6 + 4 * v28)) / v45;
        *(double *)__p = *(double *)__p
                       + (float)(v32 * (float)((float)(v45 * v45) * (float)(sqrtf((float)(v34 * v34) + 1.0) + -1.0)));
        double v26 = *(double *)v46 + v32;
        *(double *)double v46 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v59);
    std::mutex::~mutex(&v60);
    std::exception_ptr::~exception_ptr(&v59);
    v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v49)
    {
      float v35 = (double *)__p;
      do
      {
        double v36 = *v35++;
        double v23 = v23 + v36;
      }
      while (v35 != v49);
    }
    if (v46 != v47)
    {
      double v22 = 0.0;
      float v37 = (double *)v46;
      do
      {
        double v38 = *v37++;
        double v22 = v22 + v38;
      }
      while (v37 != v47);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
      v21 = __p;
    }
    if (v21)
    {
      v49 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v59.__ptr_ = *(void **)&v23;
  *(double *)&v60.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v59, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v59.__ptr_;
    double v22 = *(double *)&v60.__m_.__sig;
  }
  double v40 = 1.0;
  if (v22 != 0.0) {
    double v40 = v22;
  }
  return v23 / v40;
}

void sub_22E929498()
{
}

void sub_22E9294A4()
{
}

void sub_22E9294B4()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E9294E4);
}

void sub_22E929504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v33 = a32;
  a32 = 0;
  if (v33) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a32, v33);
  }
  _Unwind_Resume(a1);
}

void sub_22E929560(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::PseudoErrorLoss::Name(xgboost::metric::PseudoErrorLoss *this)
{
  return "mphe";
}

void std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E2490D0;
  return result;
}

void std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v49 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v49 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v49 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v49) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    uint64_t v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v44 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v44) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v44 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v52 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v53 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v44 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v56 = v7;
  v51[0] = v15;
  v51[1] = v16;
  uint64_t v49 = v16;
  uint64_t v50 = 1;
  uint64_t v54 = v13;
  uint64_t v55 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v58.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v58);
    v58.__ptr_ = 0;
    std::vector<double>::vector(&v45, 1uLL, &v58);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v58.__ptr_ = 0;
    v59.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v57[0] = 2;
        v57[1] = v51;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v57, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_44;
          }
          float v32 = *(float *)(v44 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_44:
        }
          std::terminate();
        float v34 = *(float *)(v10 + 4 * v33);
        if (*(float *)(v9 + 4 * v28) >= 1.0e-16) {
          float v35 = *(float *)(v9 + 4 * v28);
        }
        else {
          float v35 = 1.0e-16;
        }
        float v36 = lgammaf(v34 + 1.0) + v35;
        *(double *)__p = *(double *)__p + (float)(v32 * (float)(v36 - (float)(logf(v35) * v34)));
        double v26 = *(double *)v45 + v32;
        *(double *)float v45 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v58);
    std::mutex::~mutex(&v59);
    std::exception_ptr::~exception_ptr(&v58);
    v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v48)
    {
      float v37 = (double *)__p;
      do
      {
        double v38 = *v37++;
        double v23 = v23 + v38;
      }
      while (v37 != v48);
    }
    if (v45 != v46)
    {
      double v22 = 0.0;
      float v39 = (double *)v45;
      do
      {
        double v40 = *v39++;
        double v22 = v22 + v40;
      }
      while (v39 != v46);
    }
    if (v45)
    {
      double v46 = v45;
      operator delete(v45);
      v21 = __p;
    }
    if (v21)
    {
      uint64_t v48 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v58);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v58.__ptr_ = *(void **)&v23;
  *(double *)&v59.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v58, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v58.__ptr_;
    double v22 = *(double *)&v59.__m_.__sig;
  }
  double v42 = 1.0;
  if (v22 != 0.0) {
    double v42 = v22;
  }
  return v23 / v42;
}

void sub_22E929C94()
{
}

void sub_22E929CA0()
{
}

void sub_22E929CB0()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E929CE0);
}

void sub_22E929CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E929D4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::Name()
{
  return "poisson-nloglik";
}

void std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E2491B0;
  return result;
}

void std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v49 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v49 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v49 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v49) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    uint64_t v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v44 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v44) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v44 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v52 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v53 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v44 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v56 = v7;
  v51[0] = v15;
  v51[1] = v16;
  uint64_t v49 = v16;
  uint64_t v50 = 1;
  uint64_t v54 = v13;
  uint64_t v55 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v58.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v58);
    v58.__ptr_ = 0;
    std::vector<double>::vector(&v45, 1uLL, &v58);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v58.__ptr_ = 0;
    v59.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v57[0] = 2;
        v57[1] = v51;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v57, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_41;
          }
          float v32 = *(float *)(v44 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_41:
        }
          std::terminate();
        float v34 = *(float *)(v9 + 4 * v28) + 0.000001;
        float v35 = *(float *)(v10 + 4 * v33) + 0.000001;
        float v36 = logf(v34 / v35);
        *(double *)__p = *(double *)__p + (float)(v32 * (float)((float)((float)(v35 / v34) + v36) + -1.0));
        double v26 = *(double *)v45 + v32;
        *(double *)float v45 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v58);
    std::mutex::~mutex(&v59);
    std::exception_ptr::~exception_ptr(&v58);
    v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v48)
    {
      float v37 = (double *)__p;
      do
      {
        double v38 = *v37++;
        double v23 = v23 + v38;
      }
      while (v37 != v48);
    }
    if (v45 != v46)
    {
      double v22 = 0.0;
      float v39 = (double *)v45;
      do
      {
        double v40 = *v39++;
        double v22 = v22 + v40;
      }
      while (v39 != v46);
    }
    if (v45)
    {
      double v46 = v45;
      operator delete(v45);
      v21 = __p;
    }
    if (v21)
    {
      uint64_t v48 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v58);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v58.__ptr_ = *(void **)&v23;
  *(double *)&v59.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v58, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v58.__ptr_;
    double v22 = *(double *)&v59.__m_.__sig;
  }
  double v42 = 0.000000999999997;
  if (v22 > 0.0) {
    double v42 = v22;
  }
  return (v23 + v23) / v42;
}

void sub_22E92A484()
{
}

void sub_22E92A490()
{
}

void sub_22E92A4A0()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E92A4D0);
}

void sub_22E92A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E92A53C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::Name()
{
  return "gamma-deviance";
}

void std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E249290;
  return result;
}

void std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v50 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v50 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v50 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v50) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    uint64_t v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v45 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v45) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v45 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v53 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v54 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v45 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v57 = v7;
  v52[0] = v15;
  v52[1] = v16;
  uint64_t v50 = v16;
  uint64_t v51 = 1;
  uint64_t v55 = v13;
  uint64_t v56 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v59.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v59);
    v59.__ptr_ = 0;
    std::vector<double>::vector(&v46, 1uLL, &v59);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v59.__ptr_ = 0;
    v60.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v60.__m_.__opaque, 0, sizeof(v60.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v58[0] = 2;
        v58[1] = v52;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v58, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_44;
          }
          float v32 = *(float *)(v45 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_44:
        }
          std::terminate();
        float v34 = *(float *)(v10 + 4 * v33);
        float v35 = *(float *)(v9 + 4 * v28);
        if (v35 >= 0.000001) {
          float v36 = -1.0 / v35;
        }
        else {
          float v36 = -1000000.0;
        }
        float v37 = logf(-v36);
        *(double *)__p = *(double *)__p - (float)(v32 * (float)((float)(v37 + (float)(v34 * v36)) + 0.0));
        double v26 = *(double *)v46 + v32;
        *(double *)double v46 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v59);
    std::mutex::~mutex(&v60);
    std::exception_ptr::~exception_ptr(&v59);
    v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v49)
    {
      double v38 = (double *)__p;
      do
      {
        double v39 = *v38++;
        double v23 = v23 + v39;
      }
      while (v38 != v49);
    }
    if (v46 != v47)
    {
      double v22 = 0.0;
      double v40 = (double *)v46;
      do
      {
        double v41 = *v40++;
        double v22 = v22 + v41;
      }
      while (v40 != v47);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
      v21 = __p;
    }
    if (v21)
    {
      uint64_t v49 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v59.__ptr_ = *(void **)&v23;
  *(double *)&v60.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v59, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v59.__ptr_;
    double v22 = *(double *)&v60.__m_.__sig;
  }
  double v43 = 1.0;
  if (v22 != 0.0) {
    double v43 = v22;
  }
  return v23 / v43;
}

void sub_22E92AC80()
{
}

void sub_22E92AC8C()
{
}

void sub_22E92AC9C()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E92ACCCLL);
}

void sub_22E92ACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E92AD38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::Name()
{
  return "gamma-nloglik";
}

void std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E249370;
  return result;
}

void std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::operator()()
{
}

void sub_22E92AF14(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C409B34F632);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v48 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v48 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v48 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v48) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    BOOL v18 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v18;
    unint64_t v11 = (v18[1] - *v18) >> 2;
    uint64_t v17 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v43 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v43) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v43 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    float v15 = *(float *)(a1 + 16);
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v19 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v51 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v52 = v13;
    uint64_t v14 = v17 * v16;
    if (v19) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v43 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    float v15 = *(float *)(a1 + 16);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = *(void *)(a3 + 40);
  }
  int v55 = v7;
  v50[0] = v16;
  v50[1] = v17;
  uint64_t v48 = v17;
  uint64_t v49 = 1;
  uint64_t v53 = v13;
  uint64_t v54 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v57.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v57);
    v57.__ptr_ = 0;
    std::vector<double>::vector(&v44, 1uLL, &v57);
    uint64_t v25 = **(void **)(a3 + 24);
    uint64_t v26 = *(void *)(*(void *)(a3 + 24) + 8);
    v57.__ptr_ = 0;
    v58.__m_.__sig = 850045863;
    double v27 = 0.0;
    memset(v58.__m_.__opaque, 0, sizeof(v58.__m_.__opaque));
    uint64_t v28 = v26 - v25;
    if (v28)
    {
      unint64_t v29 = 0;
      uint64_t v30 = v28 >> 2;
      do
      {
        v56[0] = 2;
        v56[1] = v50;
        unint64_t v31 = xgboost::linalg::UnravelIndex<2ul>(v29, v56, *(int8x8_t *)&v27);
        if (v12)
        {
          if (v12 <= v31) {
            goto LABEL_43;
          }
          float v33 = *(float *)(v43 + 4 * v31);
        }
        else
        {
          float v33 = 1.0;
        }
        unint64_t v34 = v32 + v31 * v17;
        if (v34 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v29) {
LABEL_43:
        }
          std::terminate();
        float v35 = *(float *)(v10 + 4 * v34);
        if (v15 < *(float *)(v9 + 4 * v29)) {
          float v35 = 1.0 - v35;
        }
        *(double *)__p = *(double *)__p + (float)(v33 * v35);
        double v27 = *(double *)v44 + v33;
        *(double *)uint64_t v44 = v27;
        ++v29;
      }
      while (v30 != v29);
    }
    dmlc::OMPException::Rethrow(&v57);
    std::mutex::~mutex(&v58);
    std::exception_ptr::~exception_ptr(&v57);
    double v22 = __p;
    double v23 = 0.0;
    double v24 = 0.0;
    if (__p != v47)
    {
      float v36 = (double *)__p;
      do
      {
        double v37 = *v36++;
        double v24 = v24 + v37;
      }
      while (v36 != v47);
    }
    if (v44 != v45)
    {
      double v23 = 0.0;
      double v38 = (double *)v44;
      do
      {
        double v39 = *v38++;
        double v23 = v23 + v39;
      }
      while (v38 != v45);
    }
    if (v44)
    {
      uint64_t v45 = v44;
      operator delete(v44);
      double v22 = __p;
    }
    if (v22)
    {
      v47 = v22;
      operator delete(v22);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v57);
    double v23 = 0.0;
    double v24 = 0.0;
  }
  v57.__ptr_ = *(void **)&v24;
  *(double *)&v58.__m_.__sig = v23;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v22);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v57, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v24 = *(double *)&v57.__ptr_;
    double v23 = *(double *)&v58.__m_.__sig;
  }
  double v41 = 1.0;
  if (v23 != 0.0) {
    double v41 = v23;
  }
  return v24 / v41;
}

void sub_22E92B5B0()
{
}

void sub_22E92B5BC()
{
}

void sub_22E92B5CC()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E92B5FCLL);
}

void sub_22E92B614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E92B668(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::Name(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_6, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_6))
  {
    unk_26AD716E8 = 0;
    xmmword_26AD716D8 = 0uLL;
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26AD716D8, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_6);
  }
  if (!*(unsigned char *)(a1 + 20)) {
    return "error";
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"error", 5);
  if (*(float *)(a1 + 16) != 0.5)
  {
    LOBYTE(v4) = 64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v4, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (byte_26AD716EF < 0) {
    operator delete((void *)xmmword_26AD716D8);
  }
  xmmword_26AD716D8 = v4;
  unk_26AD716E8 = v5;
  if (v5 >= 0) {
    std::exception_ptr v2 = &xmmword_26AD716D8;
  }
  else {
    std::exception_ptr v2 = (long long *)v4;
  }
  v6[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020](&v8);
  return (const char *)v2;
}

void sub_22E92B8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a12 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a12 + *(void *)(a12 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a13 = MEMORY[0x263F8C318] + 16;
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020](&a29);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::~__func()
{
}

void *std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E249450;
  return result;
}

void std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::operator()()
{
}

void sub_22E92BB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  MEMORY[0x230FA80D0](v12, 0x10E1C40191BE475);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v53 = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v53 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v53 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v53) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    BOOL v18 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v18;
    unint64_t v11 = (v18[1] - *v18) >> 2;
    uint64_t v17 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v48 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v48) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    float v15 = *(float *)(a1 + 16);
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v19 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v56 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v57 = v13;
    uint64_t v14 = v17 * v16;
    if (v19) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v48 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    float v15 = *(float *)(a1 + 16);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = *(void *)(a3 + 40);
  }
  int v60 = v7;
  v55[0] = v16;
  v55[1] = v17;
  uint64_t v53 = v17;
  uint64_t v54 = 1;
  uint64_t v58 = v13;
  uint64_t v59 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v62.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v62);
    v62.__ptr_ = 0;
    std::vector<double>::vector(&v49, 1uLL, &v62);
    uint64_t v25 = **(void **)(a3 + 24);
    uint64_t v26 = *(void *)(*(void *)(a3 + 24) + 8);
    v62.__ptr_ = 0;
    v63.__m_.__sig = 850045863;
    HIDWORD(v27) = 0;
    memset(v63.__m_.__opaque, 0, sizeof(v63.__m_.__opaque));
    uint64_t v28 = v26 - v25;
    if (v28)
    {
      unint64_t v29 = 0;
      uint64_t v30 = v28 >> 2;
      float v31 = 1.0 - v15;
      LODWORD(v27) = 2.0;
      float v32 = 2.0 - v15;
      do
      {
        v61[0] = 2;
        v61[1] = v55;
        unint64_t v33 = xgboost::linalg::UnravelIndex<2ul>(v29, v61, *(int8x8_t *)&v27);
        if (v12)
        {
          if (v12 <= v33) {
            goto LABEL_41;
          }
          float v35 = *(float *)(v48 + 4 * v33);
        }
        else
        {
          float v35 = 1.0;
        }
        unint64_t v36 = v34 + v33 * v17;
        if (v36 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v29) {
LABEL_41:
        }
          std::terminate();
        float v37 = *(float *)(v10 + 4 * v36);
        float v38 = logf(*(float *)(v9 + 4 * v29));
        float v39 = expf(v31 * v38);
        float v40 = expf(v32 * v38);
        *(double *)__p = *(double *)__p + (float)(v35 * (float)((float)(v40 / v32) - (float)((float)(v37 * v39) / v31)));
        double v27 = *(double *)v49 + v35;
        *(double *)uint64_t v49 = v27;
        ++v29;
      }
      while (v30 != v29);
    }
    dmlc::OMPException::Rethrow(&v62);
    std::mutex::~mutex(&v63);
    std::exception_ptr::~exception_ptr(&v62);
    double v22 = __p;
    double v23 = 0.0;
    double v24 = 0.0;
    if (__p != v52)
    {
      double v41 = (double *)__p;
      do
      {
        double v42 = *v41++;
        double v24 = v24 + v42;
      }
      while (v41 != v52);
    }
    if (v49 != v50)
    {
      double v23 = 0.0;
      uint64_t v43 = (double *)v49;
      do
      {
        double v44 = *v43++;
        double v23 = v23 + v44;
      }
      while (v43 != v50);
    }
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
      double v22 = __p;
    }
    if (v22)
    {
      uint64_t v52 = v22;
      operator delete(v22);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
    double v23 = 0.0;
    double v24 = 0.0;
  }
  v62.__ptr_ = *(void **)&v24;
  *(double *)&v63.__m_.__sig = v23;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v22);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v62, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v24 = *(double *)&v62.__ptr_;
    double v23 = *(double *)&v63.__m_.__sig;
  }
  double v46 = 1.0;
  if (v23 != 0.0) {
    double v46 = v23;
  }
  return v24 / v46;
}

void sub_22E92C1F4()
{
}

void sub_22E92C200()
{
}

void sub_22E92C210()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E92C240);
}

void sub_22E92C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E92C2AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

long long *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::Name()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD716D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD716D0))
  {
    unk_26AD71700 = 0;
    xmmword_26AD716F0 = 0uLL;
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26AD716F0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD716D0);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"tweedie-nloglik@", 16);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (byte_26AD71707 < 0) {
    operator delete((void *)xmmword_26AD716F0);
  }
  v0 = &xmmword_26AD716F0;
  xmmword_26AD716F0 = v2;
  unk_26AD71700 = v3;
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  if (v3 < 0) {
    v0 = (long long *)v2;
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020](&v6);
  return v0;
}

void sub_22E92C4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a12 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a12 + *(void *)(a12 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a13 = MEMORY[0x263F8C318] + 16;
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020](&a29);
  _Unwind_Resume(a1);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep xgboost::common::Monitor::Start()
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
  if (*(int *)(result + 4) >= 3)
  {
    long long v4 = v1;
    uint64_t v3 = std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v2 + 24), (const void **)v1, (uint64_t)&std::piecewise_construct, &v4);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = std::chrono::steady_clock::now().__d_.__rep_;
    v3[7] = result;
  }
  return result;
}

int64x2_t xgboost::common::Monitor::Stop()
{
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    uint64_t v6 = v0;
    uint64_t v3 = (int64x2_t *)std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v1 + 24), (const void **)v0, (uint64_t)&std::piecewise_construct, &v6);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    int64x2_t v5 = vdupq_n_s64(1uLL);
    v5.i64[0] = v4.__d_.__rep_ - v3[3].i64[1];
    int64x2_t result = vaddq_s64(v5, v3[4]);
    v3[4] = result;
  }
  return result;
}

void xgboost::common::Monitor::PrintStatistics(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    int64x2_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if (v3[7])
      {
        xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v25);
        int v26 = 4;
        int v6 = *((char *)v3 + 55);
        if (v6 >= 0) {
          uint64_t v7 = (uint64_t)(v3 + 4);
        }
        else {
          uint64_t v7 = v3[4];
        }
        if (v6 >= 0) {
          uint64_t v8 = *((unsigned __int8 *)v3 + 55);
        }
        else {
          uint64_t v8 = v3[5];
        }
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v7, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
        uint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"s, ", 3);
        unint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" calls @ ", 9);
        unint64_t v12 = (void *)std::ostream::operator<<();
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"us", 2);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v14 = std::locale::use_facet((const std::locale *)__p, v5);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v25);
      }
      else if (*(int *)(v4 + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/timer.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v25, (uint64_t)__p, 44, 1);
        BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Timer for ", 10);
        int v19 = *((char *)v3 + 55);
        uint64_t v20 = v19 >= 0 ? (uint64_t)(v3 + 4) : v3[4];
        uint64_t v21 = v19 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
        double v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" did not get stopped properly.", 30);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v25);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      float v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          float v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v3[2];
          BOOL v17 = *v16 == (void)v3;
          uint64_t v3 = v16;
        }
        while (!v17);
      }
      uint64_t v3 = v16;
    }
    while (v16 != v2);
  }
}

void sub_22E92C908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::Monitor::Print(xgboost::common::Monitor *this)
{
  uint64_t v2 = (int *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
  if (v2[1] >= 3)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v2);
    (*(void (**)(void *))(*(void *)Engine + 64))(Engine);
    uint64_t v30 = 0;
    v31[0] = 0;
    unint64_t v29 = &v30;
    uint64_t v4 = (const void **)*((void *)this + 3);
    int v26 = this;
    int64x2_t v5 = (const void ***)((char *)this + 32);
    if (v4 != (const void **)((char *)this + 32))
    {
      do
      {
        uint64_t v6 = (uint64_t)v4[8];
        uint64_t v7 = v4[9];
        uint64_t v8 = &v30;
        uint64_t v9 = &v30;
        uint64_t v10 = v30;
        if (!v30) {
          goto LABEL_12;
        }
        uint64_t v8 = &v30;
        while (1)
        {
          while (1)
          {
            uint64_t v9 = (uint64_t **)v10;
            unint64_t v11 = (const void **)(v10 + 4);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v31, v4 + 4, (const void **)v10 + 4)) {
              break;
            }
            uint64_t v10 = *v9;
            uint64_t v8 = v9;
            if (!*v9) {
              goto LABEL_12;
            }
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v31, v11, v4 + 4)) {
            break;
          }
          uint64_t v8 = v9 + 1;
          uint64_t v10 = v9[1];
          if (!v10) {
            goto LABEL_12;
          }
        }
        unint64_t v12 = *v8;
        if (!*v8)
        {
LABEL_12:
          unint64_t v12 = operator new(0x48uLL);
          uint64_t v13 = (std::string *)(v12 + 4);
          if (*((char *)v4 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v4[4], (std::string::size_type)v4[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v4 + 2);
            v12[6] = v4[6];
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
          v12[7] = 0;
          v12[8] = 0;
          *unint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = v9;
          *uint64_t v8 = v12;
          float v15 = v12;
          if (*v29)
          {
            unint64_t v29 = (uint64_t **)*v29;
            float v15 = *v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v30, v15);
          ++v31[0];
        }
        v12[7] = v7;
        v12[8] = v6 / 1000;
        uint64_t v16 = (const void **)v4[1];
        if (v16)
        {
          do
          {
            BOOL v17 = (const void ***)v16;
            uint64_t v16 = (const void **)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            BOOL v17 = (const void ***)v4[2];
            BOOL v18 = *v17 == v4;
            uint64_t v4 = (const void **)v17;
          }
          while (!v18);
        }
        uint64_t v4 = (const void **)v17;
      }
      while (v17 != v5);
    }
    xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v27);
    int v28 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"======== Monitor (", 18);
    int v19 = (void *)std::ostream::operator<<();
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"): ", 3);
    int v21 = *((char *)v26 + 23);
    if (v21 >= 0) {
      uint64_t v22 = (uint64_t)v26;
    }
    else {
      uint64_t v22 = *(void *)v26;
    }
    if (v21 >= 0) {
      uint64_t v23 = *((unsigned __int8 *)v26 + 23);
    }
    else {
      uint64_t v23 = *((void *)v26 + 1);
    }
    char v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ========", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v27);
    xgboost::common::Monitor::PrintStatistics(v25, &v29);
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy((char *)v30);
  }
}

void sub_22E92CBCC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  int64x2_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int64x2_t result = std::pair<std::string const,xgboost::common::Monitor::Statistics>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22E92CD08(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,xgboost::common::Monitor::Statistics>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[1].__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::steady_clock::now().__d_.__rep_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return this;
}

uint64_t rabit::engine::Init(rabit::engine *this, int a2, char **a3)
{
  {
    uint64_t v6 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v6);
  }
  uint64_t v4 = dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  if (!*(void *)v4)
  {
    *(unsigned char *)(v4 + 8) = 1;
    operator new();
  }
  return 1;
}

void sub_22E92CEEC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B3C40514773F6);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::Finalize(rabit::engine *this)
{
  {
    uint64_t v5 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v5);
  }
  uint64_t v2 = (unsigned char *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  if (*(void *)v2)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 128))(*(void *)v2);
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 112))(v4);
    }
    v2[8] = 0;
  }
  return 1;
}

void *rabit::engine::GetEngine(rabit::engine *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_7, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_7))
  {
    rabit::engine::AllreduceBase::AllreduceBase((rabit::engine::AllreduceBase *)&unk_26AD71710);
    __cxa_atexit((void (*)(void *))rabit::engine::AllreduceBase::~AllreduceBase, &unk_26AD71710, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_7);
  }
  {
    uint64_t v5 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v5);
  }
  uint64_t v3 = dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  uint64_t result = *(void **)v3;
  if (!*(void *)v3)
  {
    rabit::utils::Check((rabit::utils *)(*(unsigned char *)(v3 + 8) == 0), "the rabit has not been initialized", v2);
    return &unk_26AD71710;
  }
  return result;
}

void sub_22E92D12C(_Unwind_Exception *a1)
{
}

void rabit::utils::Check(rabit::utils *this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  if ((this & 1) == 0)
  {
    uint64_t v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    va_copy(v8, va);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 4096);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    operator delete(v4);
  }
}

void sub_22E92D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::Allgather(rabit::engine *this, void *a2)
{
  uint64_t v2 = **(uint64_t (***)(void))rabit::engine::GetEngine(this);

  return v2();
}

uint64_t rabit::engine::Allreduce_(rabit::engine *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 8);

  return v1();
}

void *rabit::engine::ReduceHandle::ReduceHandle(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t rabit::engine::ReduceHandle::TypeSize(unsigned int *a1)
{
  return *a1;
}

void rabit::engine::ReduceHandle::Init(uint64_t a1, uint64_t a2, const char *a3)
{
  rabit::utils::Assert((rabit::utils *)(*(void *)(a1 + 8) == 0), "cannot initialize reduce handle twice", a3);
  *(void *)(a1 + 8) = a2;
}

uint64_t rabit::engine::ReduceHandle::Allreduce(rabit::engine::ReduceHandle *this, void *a2, const char *a3, unint64_t a4, void (*a5)(void *), void *a6)
{
  rabit::utils::Assert((rabit::utils *)(*((void *)this + 1) != 0), "must initialize handle to call AllReduce", a3);
  char v7 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(v6) + 8);

  return v7();
}

void rabit::engine::AllreduceBase::~AllreduceBase(void **this)
{
  *this = &unk_26E24EE18;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  uint64_t v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this + 4;
  std::vector<rabit::engine::AllreduceBase::LinkRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t vars8;

  rabit::engine::AllreduceBase::~AllreduceBase(this);

  JUMPOUT(0x230FA80D0);
}

void std::vector<rabit::engine::AllreduceBase::LinkRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<rabit::engine::AllreduceBase::LinkRecord>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<rabit::engine::AllreduceBase::LinkRecord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void rabit::engine::ThreadLocalEntry::~ThreadLocalEntry(rabit::engine::ThreadLocalEntry *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
  }
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

long long *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71858, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71858))
  {
    xmmword_26AD71A00 = 0u;
    unk_26AD71A10 = 0u;
    xmmword_26AD71A20 = 0u;
    qword_26AD71A30 = (uint64_t)&qword_26AD71A38;
    qword_26AD71A38 = 0;
    qword_26AD71A40 = 0;
    unk_26AD71A48 = 850045863;
    qword_26AD71A80 = 0;
    xmmword_26AD71A50 = 0u;
    unk_26AD71A60 = 0u;
    xmmword_26AD71A70 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::~Registry, &xmmword_26AD71A00, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71858);
  }
  return &xmmword_26AD71A00;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        uint64_t v6 = *(void *)(v5 + 96);
        if (v6 == v5 + 72)
        {
          (*(void (**)(uint64_t))(*(void *)(v5 + 72) + 32))(v5 + 72);
        }
        else if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        uint64_t v10 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  char v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  va_list v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void xgboost::DMatrix::Create<void *,void *,void ()(void *),int ()(void *)>()
{
}

{
  operator new();
}

void sub_22E92DC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  xgboost::DMatrix::~DMatrix(v13);
  MEMORY[0x230FA80D0]();
  _Unwind_Resume(a1);
}

void sub_22E92DDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x230FA80D0](v14, 0x10B3C40450F9410);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::DenseAdapter>()
{
}

{
  while (1)
    ;
}

void sub_22E92DE68(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::ArrayAdapter>()
{
}

void sub_22E92DEF4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::CSRAdapter>()
{
}

void sub_22E92DF80(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::CSCAdapter>()
{
}

{
  while (1)
    ;
}

void sub_22E92E00C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::DataTableAdapter>()
{
}

void sub_22E92E098(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::FileAdapter>()
{
}

{
  while (1)
    ;
}

void sub_22E92E124(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::CSRArrayAdapter>()
{
}

void sub_22E92E1B0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>()
{
}

void sub_22E92E23C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

void xgboost::DMatrix::Create<xgboost::data::RecordBatchesIterAdapter>()
{
}

void sub_22E92E2B8(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::DenseAdapterBatch>(uint64_t **a1, void *a2, int a3, float a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) >> 3) - 1;
  }
  unint64_t v55 = v8;
  long long v52 = v5;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = v8;
  unint64_t v9 = a2[1];
  if (v9)
  {
    unint64_t v11 = a2;
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v52, a2[1], a3);
    uint64_t v13 = operator new(8uLL);
    *uint64_t v13 = 0;
    v59.__m_.__sig = (uint64_t)(v13 + 1);
    *(void *)v59.__m_.__opaque = v13 + 1;
    v58.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v50, a3, (uint64_t)&v58);
    unint64_t v14 = v9 / a3;
    operator delete(v13);
    v58.__ptr_ = 0;
    v59.__m_.__sig = 850045863;
    memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
    unint64_t v46 = v9;
    if (v9 >= a3)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      BOOL v18 = fabsf(a4) == INFINITY;
      int v15 = 1;
      int v19 = *v50;
      unint64_t v47 = v14;
      uint64_t v48 = v11;
      do
      {
        uint64_t v20 = v11[2];
        uint64_t v49 = v16;
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *v11 + v20 * v16;
          do
          {
            float v23 = *(float *)(v22 + 4 * v21);
            if (fabsf(v23) == INFINITY) {
              int v24 = 0;
            }
            else {
              int v24 = v15;
            }
            if (!v18) {
              int v15 = v24;
            }
            unint64_t v57 = v17 - (void)a1[2];
            if (v57 < v55) {
              dmlc::LogCheckFormat<unsigned long,unsigned long>();
            }
            uint64_t v25 = v21 + 1;
            unint64_t v26 = *v19;
            if (*v19 <= v21 + 1) {
              unint64_t v26 = v21 + 1;
            }
            *int v19 = v26;
            if (v23 != a4) {
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v53[0], v54, v57);
            }
            ++v21;
          }
          while (v20 != v25);
        }
        ++v17;
        unint64_t v11 = v48;
        uint64_t v16 = v49 + 4;
        unint64_t v14 = v47;
      }
      while (v17 != v47);
    }
    else
    {
      LOBYTE(v15) = 1;
    }
    dmlc::OMPException::Rethrow(&v58);
    if ((v15 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v56);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v43 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v56);
      double v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: valid", 19);
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v56);
    }
    double v27 = v50;
    if (v50 == v51)
    {
      unint64_t v9 = 0;
    }
    else
    {
      unint64_t v9 = 0;
      do
      {
        int v28 = *v27;
        v27 += 3;
        unint64_t v29 = *v28;
        if (v9 <= *v28) {
          unint64_t v9 = v29;
        }
      }
      while (v27 != v51);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v52);
    if (v46 >= a3)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = *v11;
      do
      {
        uint64_t v33 = v11[2];
        if (v33)
        {
          uint64_t v34 = 0;
          unint64_t v36 = (void *)*((void *)&v52 + 1);
          float v35 = v53[0];
          do
          {
            float v37 = *(float *)(v32 + v33 * v30 + 4 * v34);
            if (v37 != a4)
            {
              uint64_t v38 = v31 - ((void)a1[2] + v54);
              uint64_t v39 = *(void *)(*v35 + 8 * v38);
              *(void *)(*v35 + 8 * v38) = v39 + 1;
              uint64_t v40 = *v36 + 8 * v39;
              *(_DWORD *)uint64_t v40 = v34;
              *(float *)(v40 + 4) = v37;
            }
            ++v34;
          }
          while (v33 != v34);
        }
        ++v31;
        v30 += 4;
      }
      while (v31 != v14);
    }
    dmlc::OMPException::Rethrow(&v58);
    std::mutex::~mutex(&v59);
    std::exception_ptr::~exception_ptr(&v58);
    v58.__ptr_ = &v50;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  }
  v58.__ptr_ = v53;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  return v9;
}

void sub_22E92E708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(void *a1, unint64_t a2, int a3)
{
  unint64_t v6 = a3;
  std::vector<std::vector<unsigned long>>::resize(a1 + 2, a3);
  unint64_t v7 = a2 / v6;
  a1[6] = a2 / v6;
  uint64_t v8 = a1[2];
  if (a1[3] - v8 != 24)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = a1[6];
      uint64_t v12 = 0;
      std::vector<unsigned long>::resize(v8 + v9, v11, &v12);
      ++v10;
      uint64_t v8 = a1[2];
      v9 += 24;
    }
    while (v10 < -1 - 0x5555555555555555 * ((a1[3] - v8) >> 3));
    unint64_t v7 = a1[6];
  }
  uint64_t v12 = 0;
  std::vector<unsigned long>::resize(v8 + 24 * (a3 - 1), a2 - v7 * (a3 - 1), &v12);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage(uint64_t *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 / 24;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    unint64_t v7 = (void *)(v3 + 8);
    do
    {
      v5 += (uint64_t)(*v7 - *(v7 - 1)) >> 3;
      v7 += 3;
      --v6;
    }
    while (v6);
    uint64_t v8 = v5 + 1;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 8);
  if (*(void *)*a1 == v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v10 - 8);
  }
  uint64_t v25 = v11;
  std::vector<unsigned long>::resize(v9, a1[5] + v8, &v25);
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = v14 / 24;
    unint64_t v18 = a1[5] + 1;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    do
    {
      int v19 = *(uint64_t **)(v12 + 24 * v15);
      uint64_t v20 = *(void *)(v12 + 24 * v15 + 8) - (void)v19;
      if (v20)
      {
        unint64_t v21 = v20 >> 3;
        uint64_t v22 = *(void *)*a1;
        unint64_t v23 = (*(void *)(*a1 + 8) - v22) >> 3;
        if (v21 <= 1) {
          unint64_t v21 = 1;
        }
        do
        {
          uint64_t v24 = *v19;
          *int v19 = v25 + v16;
          v16 += v24;
          if (v18 < v23) {
            *(void *)(v22 + 8 * v18++) += v16;
          }
          ++v19;
          --v21;
        }
        while (v21);
      }
      ++v15;
    }
    while (v15 != v17);
  }
  std::vector<xgboost::Entry>::resize(a1[1], *(void *)(*(void *)(*a1 + 8) - 8));
}

unint64_t xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>(uint64_t **a1, uint64_t a2, int a3, float a4)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) >> 3) - 1;
  }
  unint64_t v64 = v8;
  long long v61 = v5;
  memset(v62, 0, sizeof(v62));
  uint64_t v63 = v8;
  unint64_t v9 = *(void *)(a2 + 32);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void **)a2;
  uint64_t v14 = *(void **)(a2 + 8);
  long long v15 = *(_OWORD *)(a2 + 16);
  long long v76 = *(_OWORD *)(a2 + 32);
  long long v75 = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  long long v77 = v16;
  __int16 v78 = *(_WORD *)(a2 + 64);
  v73 = v13;
  v74 = v14;
  unint64_t v79 = v9 - 1;
  if (!*((void *)&v76 + 1)
    || (v65 = &v73,
        unint64_t v66 = v9 - 1,
        *(void *)&long long v67 = *((void *)&v76 + 1) - 1,
        xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v73, &v65, *(float *)&v16), (unint64_t v9 = *(void *)(a2 + 32)) != 0))
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v61, v9, a3);
    unint64_t v17 = operator new(8uLL);
    void *v17 = 0;
    v74 = v17 + 1;
    *(void *)&long long v75 = v17 + 1;
    v73 = v17;
    std::vector<std::vector<unsigned long long>>::vector(&v59, a3, (uint64_t)&v73);
    std::exception_ptr v58 = (long long *)(a2 + 16);
    uint64_t v56 = (void *)a2;
    unint64_t v57 = v9 / a3;
    operator delete(v17);
    v81.__ptr_ = 0;
    v82.__m_.__sig = 850045863;
    memset(v82.__m_.__opaque, 0, sizeof(v82.__m_.__opaque));
    unint64_t v55 = v9;
    if (v9 >= a3)
    {
      uint64_t v20 = 0;
      BOOL v21 = fabsf(a4) == INFINITY;
      int v18 = 1;
      uint64_t v22 = *v59;
      do
      {
        unint64_t v23 = (void *)*v56;
        unint64_t v24 = v56[1];
        __int16 v70 = *((_WORD *)v58 + 24);
        long long v25 = v58[2];
        long long v27 = *v58;
        long long v26 = v58[1];
        long long v68 = v26;
        long long v69 = v25;
        long long v67 = v27;
        v65 = v23;
        unint64_t v66 = v24;
        uint64_t v71 = v20;
        if (*((void *)&v26 + 1))
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t v29 = v71;
            v72[0] = (uint64_t)&v65;
            v72[1] = v71;
            v72[2] = v28;
            float v30 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v65, v72, *(float *)&v26);
            *(float *)&long long v26 = fabsf(v30);
            if (*(float *)&v26 == INFINITY) {
              int v31 = 0;
            }
            else {
              int v31 = v18;
            }
            if (!v21) {
              int v18 = v31;
            }
            v72[0] = v29 - (void)a1[2];
            if (v72[0] < v64) {
              dmlc::LogCheckFormat<unsigned long,unsigned long>();
            }
            unint64_t v32 = v28 + 1;
            uint64_t v33 = *v22;
            if (*v22 <= (unint64_t)(v28 + 1)) {
              uint64_t v33 = v28 + 1;
            }
            *uint64_t v22 = v33;
            if (v30 != a4) {
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v62[0], v63, v72[0]);
            }
            ++v28;
          }
          while (v32 < *((void *)&v68 + 1));
        }
        ++v20;
      }
      while (v20 != v57);
    }
    else
    {
      LOBYTE(v18) = 1;
    }
    dmlc::OMPException::Rethrow(&v81);
    if ((v18 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      long long v52 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: valid", 19);
      uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
    }
    uint64_t v34 = v59;
    if (v59 == v60)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        float v35 = (unint64_t *)*v34;
        v34 += 3;
        unint64_t v36 = *v35;
        if (v19 <= *v35) {
          unint64_t v19 = v36;
        }
      }
      while (v34 != v60);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v61);
    if (v55 >= a3)
    {
      unint64_t v37 = 0;
      do
      {
        uint64_t v38 = (void *)*v56;
        uint64_t v39 = (void *)v56[1];
        __int16 v78 = *((_WORD *)v58 + 24);
        long long v40 = v58[2];
        long long v42 = *v58;
        long long v41 = v58[1];
        long long v76 = v41;
        long long v77 = v40;
        long long v75 = v42;
        v73 = v38;
        v74 = v39;
        unint64_t v79 = v37;
        if (*((void *)&v41 + 1))
        {
          unint64_t v43 = 0;
          do
          {
            unint64_t v44 = v79;
            v80[0] = &v73;
            v80[1] = v79;
            v80[2] = v43;
            *(float *)&long long v41 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v73, v80, *(float *)&v41);
            if (*(float *)&v41 != a4)
            {
              unint64_t v45 = v44 - ((void)a1[2] + v63);
              unint64_t v46 = (void *)*((void *)&v61 + 1);
              uint64_t v47 = *(void *)(*v62[0] + 8 * v45);
              *(void *)(*v62[0] + 8 * v45) = v47 + 1;
              uint64_t v48 = (_DWORD *)(*v46 + 8 * v47);
              *uint64_t v48 = v43;
              v48[1] = v41;
            }
            ++v43;
          }
          while (v43 < *((void *)&v76 + 1));
        }
        ++v37;
      }
      while (v37 != v57);
    }
    dmlc::OMPException::Rethrow(&v81);
    std::mutex::~mutex(&v82);
    std::exception_ptr::~exception_ptr(&v81);
    v81.__ptr_ = &v59;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v49);
  }
  else
  {
LABEL_9:
    unint64_t v19 = 0;
  }
  v81.__ptr_ = v62;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  return v19;
}

void sub_22E92EFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::exception_ptr a41,std::exception_ptr a42)
{
  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v42 - 192));
  *(void *)(v42 - 192) = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v44);
  *(void *)(v42 - 192) = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSRAdapterBatch>(uint64_t **a1, uint64_t *a2, int a3, float a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) >> 3) - 1;
  }
  unint64_t v62 = v8;
  long long v59 = v5;
  memset(v60, 0, sizeof(v60));
  uint64_t v61 = v8;
  unint64_t v9 = a2[3];
  if (v9)
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v59, a2[3], a3);
    uint64_t v13 = operator new(8uLL);
    *uint64_t v13 = 0;
    v66.__m_.__sig = (uint64_t)(v13 + 1);
    *(void *)v66.__m_.__opaque = v13 + 1;
    v65.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v57, a3, (uint64_t)&v65);
    uint64_t v54 = a2;
    unint64_t v56 = v9 / a3;
    operator delete(v13);
    v65.__ptr_ = 0;
    v66.__m_.__sig = 850045863;
    memset(v66.__m_.__opaque, 0, sizeof(v66.__m_.__opaque));
    unint64_t v53 = a3;
    if (v9 >= a3)
    {
      uint64_t v16 = 0;
      BOOL v17 = fabsf(a4) == INFINITY;
      int v14 = 1;
      int v18 = *v57;
      do
      {
        uint64_t v19 = *(void *)(*v54 + 8 * v16);
        uint64_t v55 = v16 + 1;
        uint64_t v20 = *(void *)(*v54 + 8 * (v16 + 1));
        uint64_t v21 = v20 - v19;
        if (v20 != v19)
        {
          uint64_t v22 = (unsigned int *)(v54[1] + 4 * v19);
          unint64_t v23 = (float *)(v54[2] + 4 * v19);
          do
          {
            unsigned int v25 = *v22++;
            uint64_t v24 = v25;
            float v26 = *v23;
            if (fabsf(*v23) == INFINITY) {
              int v27 = 0;
            }
            else {
              int v27 = v14;
            }
            if (!v17) {
              int v14 = v27;
            }
            unint64_t v64 = v16 - (void)a1[2];
            if (v64 < v62) {
              dmlc::LogCheckFormat<unsigned long,unsigned long>();
            }
            if (*v18 <= (unint64_t)(v24 + 1)) {
              uint64_t v28 = v24 + 1;
            }
            else {
              uint64_t v28 = *v18;
            }
            *int v18 = v28;
            if (v26 != a4) {
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v60[0], v61, v64);
            }
            ++v23;
            --v21;
          }
          while (v21);
        }
        ++v16;
      }
      while (v55 != v56);
    }
    else
    {
      LOBYTE(v14) = 1;
    }
    dmlc::OMPException::Rethrow(&v65);
    if ((v14 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v50 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: valid", 19);
      long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v63);
    }
    uint64_t v29 = (unint64_t **)v57;
    if (v57 == (uint64_t **)v58)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = 0;
      do
      {
        float v30 = *v29;
        v29 += 3;
        unint64_t v31 = *v30;
        if (v15 <= *v30) {
          unint64_t v15 = v31;
        }
      }
      while (v29 != v58);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v59);
    if (v9 >= v53)
    {
      uint64_t v32 = 0;
      uint64_t v33 = *v54;
      uint64_t v34 = v54[1];
      uint64_t v35 = v54[2];
      do
      {
        uint64_t v36 = *(void *)(v33 + 8 * v32);
        uint64_t v37 = v32 + 1;
        uint64_t v38 = *(void *)(v33 + 8 * (v32 + 1)) - v36;
        if (v38)
        {
          uint64_t v39 = (int *)(v34 + 4 * v36);
          long long v41 = (void *)*((void *)&v59 + 1);
          long long v40 = v60[0];
          uint64_t v42 = (float *)(v35 + 4 * v36);
          do
          {
            float v43 = *v42;
            if (*v42 != a4)
            {
              int v44 = *v39;
              uint64_t v45 = v32 - ((void)a1[2] + v61);
              uint64_t v46 = *(void *)(*v40 + 8 * v45);
              *(void *)(*v40 + 8 * v45) = v46 + 1;
              uint64_t v47 = (float *)(*v41 + 8 * v46);
              *(_DWORD *)uint64_t v47 = v44;
              v47[1] = v43;
            }
            ++v42;
            ++v39;
            --v38;
          }
          while (v38);
        }
        ++v32;
      }
      while (v37 != v56);
    }
    dmlc::OMPException::Rethrow(&v65);
    std::mutex::~mutex(&v66);
    std::exception_ptr::~exception_ptr(&v65);
    v65.__ptr_ = &v57;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  }
  else
  {
    unint64_t v15 = 0;
  }
  v65.__ptr_ = v60;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  return v15;
}

void sub_22E92F5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>(uint64_t **a1, xgboost::data::CSRArrayAdapterBatch *this, int a3, float a4)
{
  unint64_t v6 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = **a1;
  uint64_t v9 = (*a1)[1];
  BOOL v10 = v9 == v8;
  uint64_t v11 = ((v9 - v8) >> 3) - 1;
  if (v10) {
    uint64_t v11 = 0;
  }
  unint64_t v50 = v11;
  long long v47 = v7;
  memset(v48, 0, sizeof(v48));
  uint64_t v49 = v11;
  unint64_t v12 = *((void *)this + 3);
  if (v12 >= 2)
  {
    xgboost::data::CSRArrayAdapterBatch::GetLine(this, v12 - 2, (uint64_t)v60);
    if (v61) {
      xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v60, v61 - 1, (uint64_t)v55);
    }
    unint64_t v15 = *((void *)this + 3);
    if (v15 >= 2)
    {
      unint64_t v42 = v15 - 1;
      xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v47, v15 - 1, a3);
      uint64_t v16 = operator new(8uLL);
      *uint64_t v16 = 0;
      v60[1] = v16 + 1;
      v60[2] = v16 + 1;
      v60[0] = v16;
      std::vector<std::vector<unsigned long long>>::vector(&v45, a3, (uint64_t)v60);
      float v43 = this;
      unint64_t v44 = v42 / a3;
      operator delete(v16);
      unint64_t v41 = a3;
      v62.__ptr_ = 0;
      v63.__m_.__sig = 850045863;
      memset(v63.__m_.__opaque, 0, sizeof(v63.__m_.__opaque));
      if (v42 >= a3)
      {
        uint64_t v18 = 0;
        BOOL v19 = fabsf(a4) == INFINITY;
        int v17 = 1;
        uint64_t v20 = *v45;
        do
        {
          xgboost::data::CSRArrayAdapterBatch::GetLine(v43, v18, (uint64_t)v55);
          if (v56)
          {
            for (unint64_t i = 0; i < v56; ++i)
            {
              xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v55, i, (uint64_t)&v52);
              if (fabsf(v54) == INFINITY) {
                int v22 = 0;
              }
              else {
                int v22 = v17;
              }
              if (!v19) {
                int v17 = v22;
              }
              unint64_t v51 = v52 - (void)a1[2];
              if (v51 < v50) {
                dmlc::LogCheckFormat<unsigned long,unsigned long>();
              }
              if (*v20 <= (unint64_t)(v53 + 1)) {
                uint64_t v23 = v53 + 1;
              }
              else {
                uint64_t v23 = *v20;
              }
              uint64_t *v20 = v23;
              if (v54 != a4) {
                xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v48[0], v49, v51);
              }
            }
          }
          ++v18;
        }
        while (v18 != v44);
      }
      else
      {
        LOBYTE(v17) = 1;
      }
      dmlc::OMPException::Rethrow(&v62);
      if ((v17 & 1) == 0)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v60);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        uint64_t v38 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v60);
        uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: valid", 19);
        long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v60);
      }
      uint64_t v24 = (unint64_t **)v45;
      if (v45 == (uint64_t **)v46)
      {
        unint64_t v6 = 0;
      }
      else
      {
        unint64_t v6 = 0;
        do
        {
          unsigned int v25 = *v24;
          v24 += 3;
          unint64_t v26 = *v25;
          if (v6 <= *v25) {
            unint64_t v6 = v26;
          }
        }
        while (v24 != v46);
      }
      xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v47);
      if (v42 >= v41)
      {
        uint64_t v27 = 0;
        do
        {
          xgboost::data::CSRArrayAdapterBatch::GetLine(v43, v27, (uint64_t)v60);
          if (v61)
          {
            for (unint64_t j = 0; j < v61; ++j)
            {
              xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v60, j, (uint64_t)&v57);
              float v29 = v59;
              if (v59 != a4)
              {
                int v30 = v58;
                uint64_t v31 = v57 - ((void)a1[2] + v49);
                uint64_t v32 = (void *)*((void *)&v47 + 1);
                uint64_t v33 = *(void *)(*v48[0] + 8 * v31);
                *(void *)(*v48[0] + 8 * v31) = v33 + 1;
                uint64_t v34 = (float *)(*v32 + 8 * v33);
                *(_DWORD *)uint64_t v34 = v30;
                v34[1] = v29;
              }
            }
          }
          ++v27;
        }
        while (v27 != v44);
      }
      dmlc::OMPException::Rethrow(&v62);
      std::mutex::~mutex(&v63);
      std::exception_ptr::~exception_ptr(&v62);
      v62.__ptr_ = &v45;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v35);
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  v62.__ptr_ = v48;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  return v6;
}

void sub_22E92FBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::exception_ptr a49,uint64_t a50,uint64_t a51,uint64_t a52,std::exception_ptr a53)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v53 - 192));
  *(void *)(v53 - 192) = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v55);
  *(void *)(v53 - 192) = a13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  _Unwind_Resume(a1);
}

__n128 xgboost::data::CSRArrayAdapterBatch::GetLine@<Q0>(xgboost::data::CSRArrayAdapterBatch *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, a2);
  unint64_t v7 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, a2 + 1);
  uint64_t v8 = *((void *)this + 7);
  uint64_t v9 = *((void *)this + 8);
  uint64_t v10 = *((void *)this + 9);
  __n128 result = *((__n128 *)this + 7);
  uint64_t v12 = *((void *)this + 16);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)this + 88);
  *(_WORD *)(a3 + 48) = *((_WORD *)this + 52);
  *(_OWORD *)(a3 + 88) = *((_OWORD *)this + 9);
  *(_WORD *)(a3 + 104) = *((_WORD *)this + 80);
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v7 - v6;
  *(__n128 *)(a3 + 56) = result;
  *(void *)(a3 + 72) = v12;
  *(void *)(a3 + 80) = v7 - v6;
  *(void *)(a3 + 112) = a2;
  *(void *)(a3 + 120) = v10 * v6;
  return result;
}

void xgboost::data::CSRArrayAdapterBatch::Line::GetElement(xgboost::data::CSRArrayAdapterBatch::Line *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 14);
  unint64_t v7 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, *((void *)this + 15) + a2);
  float v9 = xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long>(unsigned long &&)::{lambda(float const*)#1}>((uint64_t)this + 56, (uint64_t)this + 56, *((void *)this + 15) + a2, v8);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  *(float *)(a3 + 16) = v9;
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSCAdapterBatch>(uint64_t **a1, uint64_t *a2, float a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)a1;
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v6 - v5) >> 3) - 1;
  }
  unint64_t v60 = v7;
  long long v57 = v4;
  memset(v58, 0, sizeof(v58));
  uint64_t v59 = v7;
  uint64_t v8 = a2[3];
  if (v8)
  {
    uint64_t v10 = (uint64_t *)(*a2 + 8 * v8);
    uint64_t v11 = *(v10 - 1);
    uint64_t v12 = *v10;
    if (v12 == v11) {
      unint64_t v13 = 0;
    }
    else {
      unint64_t v13 = *(unsigned int *)(a2[1] + 4 * v11 + 4 * (v12 + ~v11)) - (void)a1[2];
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(&v57, v13, 1);
    unint64_t v15 = operator new(8uLL);
    *unint64_t v15 = 0;
    v64.__m_.__sig = (uint64_t)(v15 + 1);
    *(void *)v64.__m_.__opaque = v15 + 1;
    v63.__ptr_ = v15;
    std::vector<std::vector<unsigned long long>>::vector(&v55, 1uLL, (uint64_t)&v63);
    operator delete(v15);
    unint64_t v16 = 0;
    uint64_t v53 = v8;
    v63.__ptr_ = 0;
    v64.__m_.__sig = 850045863;
    memset(v64.__m_.__opaque, 0, sizeof(v64.__m_.__opaque));
    BOOL v17 = fabsf(a3) == INFINITY;
    int v18 = 1;
    BOOL v19 = *v55;
    do
    {
      uint64_t v20 = *(void *)(*a2 + 8 * v16++);
      uint64_t v21 = *(void *)(*a2 + 8 * v16);
      uint64_t v22 = v21 - v20;
      if (v21 != v20)
      {
        uint64_t v23 = (unsigned int *)(a2[1] + 4 * v20);
        uint64_t v24 = (float *)(a2[2] + 4 * v20);
        do
        {
          unsigned int v26 = *v23++;
          uint64_t v25 = v26;
          float v27 = *v24;
          if (fabsf(*v24) == INFINITY) {
            int v28 = 0;
          }
          else {
            int v28 = v18;
          }
          if (!v17) {
            int v18 = v28;
          }
          unint64_t v62 = v25 - (void)a1[2];
          if (v62 < v60) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          unint64_t v29 = *v19;
          if (*v19 <= v16) {
            unint64_t v29 = v16;
          }
          *BOOL v19 = v29;
          if (v27 != a3) {
            xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v58[0], v59, v62);
          }
          ++v24;
          --v22;
        }
        while (v22);
      }
    }
    while (v16 != v53);
    dmlc::OMPException::Rethrow(&v63);
    if ((v18 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v61);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      unint64_t v50 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v61);
      unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: valid", 19);
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v61);
    }
    int v30 = v55;
    if (v55 == v56)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      do
      {
        uint64_t v31 = *v30;
        v30 += 3;
        unint64_t v32 = *v31;
        if (v14 <= *v31) {
          unint64_t v14 = v32;
        }
      }
      while (v30 != v56);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage((uint64_t *)&v57);
    uint64_t v33 = 0;
    uint64_t v34 = *a2;
    uint64_t v35 = a2[1];
    uint64_t v36 = a2[2];
    do
    {
      uint64_t v37 = *(void *)(v34 + 8 * v33);
      uint64_t v38 = v33 + 1;
      uint64_t v39 = *(void *)(v34 + 8 * (v33 + 1)) - v37;
      if (v39)
      {
        long long v40 = (unsigned int *)(v35 + 4 * v37);
        unint64_t v42 = (void *)*((void *)&v57 + 1);
        unint64_t v41 = v58[0];
        float v43 = (float *)(v36 + 4 * v37);
        do
        {
          float v44 = *v43;
          if (*v43 != a3)
          {
            uint64_t v45 = *v40 - ((void)a1[2] + v59);
            uint64_t v46 = *(void *)(*v41 + 8 * v45);
            *(void *)(*v41 + 8 * v45) = v46 + 1;
            long long v47 = (float *)(*v42 + 8 * v46);
            *(_DWORD *)long long v47 = v33;
            v47[1] = v44;
          }
          ++v43;
          ++v40;
          --v39;
        }
        while (v39);
      }
      ++v33;
    }
    while (v38 != v53);
    dmlc::OMPException::Rethrow(&v63);
    std::mutex::~mutex(&v64);
    std::exception_ptr::~exception_ptr(&v63);
    v63.__ptr_ = &v55;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  }
  else
  {
    unint64_t v14 = 0;
  }
  v63.__ptr_ = v58;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  return v14;
}

void sub_22E9302F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::mutex *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::exception_ptr a26,uint64_t a27,uint64_t a28,std::exception_ptr a29)
{
  a29.__ptr_ = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29.__ptr_ = a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(void *a1, unint64_t a2, int a3)
{
  std::vector<std::vector<unsigned long>>::resize(a1 + 2, a3);
  unint64_t v6 = a1[5];
  BOOL v7 = a2 >= v6;
  unint64_t v8 = a2 - v6;
  if (v7) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  a1[6] = 0;
  uint64_t v10 = a1[2];
  if (a1[3] - v10 != 24)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = 0;
      std::vector<unsigned long>::resize(v10 + v11, v9, &v13);
      ++v12;
      uint64_t v10 = a1[2];
      v11 += 24;
    }
    while (v12 < -1 - 0x5555555555555555 * ((a1[3] - v10) >> 3));
  }
  uint64_t v13 = 0;
  std::vector<unsigned long>::resize(v10 + 24 * (a3 - 1), v9, &v13);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage(uint64_t *a1)
{
  uint64_t v3 = *(void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  if (v3 == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v2 - 8);
  }
  uint64_t v22 = v4;
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if (v5 == v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = a1[5] + ((uint64_t)(*(void *)(v6 + v7 + 8) - *(void *)(v6 + v7)) >> 3);
      if (v9 >= (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 3)
      {
        std::vector<unsigned long>::resize(*a1, v9 + 1, &v22);
        uint64_t v6 = a1[2];
        uint64_t v5 = a1[3];
      }
      ++v8;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
      v7 += 24;
    }
    while (v8 < v10);
    uint64_t v3 = *(void *)*a1;
    uint64_t v2 = *(void *)(*a1 + 8);
    uint64_t v5 = v6;
  }
  unint64_t v11 = a1[5];
  unint64_t v12 = v11 + 1;
  if (v11 + 1 < (v2 - v3) >> 3)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (void *)(v5 + 8);
    do
    {
      unint64_t v15 = v12;
      unint64_t v16 = v14;
      for (unint64_t i = v10; i; --i)
      {
        uint64_t v18 = *(v16 - 1);
        uint64_t v19 = a1[5];
        if (v11 < v19 + ((*v16 - v18) >> 3))
        {
          unint64_t v20 = v11 - v19;
          uint64_t v21 = *(void *)(v18 + 8 * v20);
          *(void *)(v18 + 8 * v20) = *(void *)(v2 - 8) + v13;
          v13 += v21;
        }
        v16 += 3;
      }
      *(void *)(v3 + 8 * v15) += v13;
      unint64_t v12 = v15 + 1;
      unint64_t v11 = v15;
    }
    while (v15 + 1 != (v2 - v3) >> 3);
  }
  std::vector<xgboost::Entry>::resize(a1[1], *(void *)(v2 - 8));
}

unint64_t xgboost::SparsePage::Push<xgboost::data::DataTableAdapterBatch>(uint64_t **a1, void *a2, float a3)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)a1;
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v6 - v5) >> 3) - 1;
  }
  unint64_t v55 = v7;
  long long v52 = v4;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = v7;
  uint64_t v8 = a2[2];
  if (v8
    && ((xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)&v65, a2, v8 - 1),
         !v66.__m_.__sig)
      ? (unint64_t v12 = 0)
      : (uint64_t v11 = v66.__m_.__sig - 1,
         xgboost::data::DataTableAdapterBatch::Line::DTGetValue(*(uint64_t *)&v66.__m_.__opaque[8], LOBYTE(v65.__ptr_), v66.__m_.__sig - 1), unint64_t v12 = v11 - (void)a1[2]), (v49 = a2[2]) != 0))
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(&v52, v12, 1);
    uint64_t v13 = operator new(8uLL);
    uint64_t v48 = a2;
    *uint64_t v13 = 0;
    v66.__m_.__sig = (uint64_t)(v13 + 1);
    *(void *)v66.__m_.__opaque = v13 + 1;
    v65.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v50, 1uLL, (uint64_t)&v65);
    operator delete(v13);
    uint64_t v14 = 0;
    v65.__ptr_ = 0;
    v66.__m_.__sig = 850045863;
    memset(v66.__m_.__opaque, 0, sizeof(v66.__m_.__opaque));
    BOOL v15 = fabsf(a3) == INFINITY;
    int v16 = 1;
    BOOL v17 = *v50;
    do
    {
      uint64_t v47 = v14;
      xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)v57, v48, v14);
      uint64_t v18 = v58;
      if (v58)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v60;
        int v21 = v57[0];
        unint64_t v22 = v59 + 1;
        do
        {
          float v23 = xgboost::data::DataTableAdapterBatch::Line::DTGetValue(v20, v21, v19);
          if (fabsf(v23) == INFINITY) {
            int v24 = 0;
          }
          else {
            int v24 = v16;
          }
          if (!v15) {
            int v16 = v24;
          }
          unint64_t v56 = v19 - (void)a1[2];
          if (v56 < v55) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          unint64_t v25 = *v17;
          if (*v17 <= v22) {
            unint64_t v25 = v22;
          }
          unint64_t *v17 = v25;
          if (v23 != a3) {
            xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v53[0], v54, v56);
          }
          ++v19;
        }
        while (v18 != v19);
      }
      uint64_t v14 = v47 + 1;
    }
    while (v47 + 1 != v49);
    dmlc::OMPException::Rethrow(&v65);
    if ((v16 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v61);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      float v44 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v61);
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: valid", 19);
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v61);
    }
    unsigned int v26 = v50;
    if (v50 == v51)
    {
      unint64_t v27 = 0;
    }
    else
    {
      unint64_t v27 = 0;
      do
      {
        int v28 = *v26;
        v26 += 3;
        unint64_t v29 = *v28;
        if (v27 <= *v28) {
          unint64_t v27 = v29;
        }
      }
      while (v26 != v51);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage((uint64_t *)&v52);
    for (uint64_t i = 0; i != v49; ++i)
    {
      xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)v61, v48, i);
      uint64_t v31 = v62;
      if (v62)
      {
        uint64_t v32 = 0;
        int v33 = v63;
        uint64_t v34 = v64;
        int v35 = v61[0];
        do
        {
          float v36 = xgboost::data::DataTableAdapterBatch::Line::DTGetValue(v34, v35, v32);
          if (v36 != a3)
          {
            uint64_t v37 = (void *)*((void *)&v52 + 1);
            uint64_t v38 = *v53[0] - 8 * ((void)a1[2] + v54);
            uint64_t v39 = *(void *)(v38 + 8 * v32);
            *(void *)(v38 + 8 * v32) = v39 + 1;
            uint64_t v40 = *v37 + 8 * v39;
            *(_DWORD *)uint64_t v40 = v33;
            *(float *)(v40 + 4) = v36;
          }
          ++v32;
        }
        while (v31 != v32);
      }
    }
    dmlc::OMPException::Rethrow(&v65);
    std::mutex::~mutex(&v66);
    std::exception_ptr::~exception_ptr(&v65);
    v65.__ptr_ = &v50;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v41);
  }
  else
  {
    unint64_t v27 = 0;
  }
  v65.__ptr_ = v53;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  return v27;
}

void sub_22E930B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,std::exception_ptr a33)
{
  std::mutex::~mutex(a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 192));
  *(void *)(v33 - 192) = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(void *)(v33 - 192) = a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 192));
  _Unwind_Resume(a1);
}

void xgboost::data::DataTableAdapterBatch::GetLine(xgboost::data::DataTableAdapterBatch *this, void *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(a2[1] + 8 * a3));
  char v6 = v28;
  if (v28 < 0)
  {
    if (v27 != 4)
    {
      if (v27 != 5)
      {
        if (v27 == 7)
        {
          if (*(_DWORD *)__p != 1634692198 || *(_DWORD *)((char *)__p + 3) != 842232929)
          {
            if (*(_DWORD *)__p == 1634692198 && *(_DWORD *)((char *)__p + 3) == 875983969)
            {
              char v9 = 1;
              goto LABEL_62;
            }
            goto LABEL_61;
          }
          char v9 = 0;
          goto LABEL_62;
        }
LABEL_61:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/adapter.h");
        float v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unknown data table type.", 24);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
        char v9 = 7;
        char v6 = v28;
        goto LABEL_62;
      }
      p_p = (unsigned __int8 *)__p;
      if (*(_DWORD *)__p == 1819242338 && *((unsigned char *)__p + 4) == 56)
      {
        char v9 = 2;
        goto LABEL_62;
      }
      if (*(_DWORD *)__p == 863268457 && *((unsigned char *)__p + 4) == 50)
      {
        char v9 = 3;
        goto LABEL_62;
      }
      if (*(_DWORD *)__p != 829714025 || *((unsigned char *)__p + 4) != 54)
      {
LABEL_57:
        int v19 = *(_DWORD *)p_p;
        int v20 = p_p[4];
        if (v19 != 913600105 || v20 != 52) {
          goto LABEL_61;
        }
        char v9 = 6;
        goto LABEL_62;
      }
LABEL_73:
      char v9 = 5;
      goto LABEL_62;
    }
    if (*(_DWORD *)__p != 947154537) {
      goto LABEL_61;
    }
LABEL_44:
    char v9 = 4;
    goto LABEL_62;
  }
  if (v28 == 4)
  {
    if (__p != 947154537) {
      goto LABEL_61;
    }
    char v6 = 4;
    goto LABEL_44;
  }
  if (v28 == 5)
  {
    if (__p == 1819242338 && BYTE4(__p) == 56)
    {
      char v9 = 2;
    }
    else
    {
      if (__p != 863268457 || BYTE4(__p) != 50)
      {
        if (__p != 829714025 || BYTE4(__p) != 54)
        {
          p_p = (unsigned __int8 *)&__p;
          goto LABEL_57;
        }
        char v6 = 5;
        goto LABEL_73;
      }
      char v9 = 3;
    }
    char v6 = 5;
    goto LABEL_62;
  }
  if (v28 != 7) {
    goto LABEL_61;
  }
  if (__p == 1634692198 && *(_DWORD *)((char *)&__p + 3) == 842232929)
  {
    char v9 = 0;
  }
  else
  {
    if (__p != 1634692198 || *(_DWORD *)((char *)&__p + 3) != 875983969) {
      goto LABEL_61;
    }
    char v9 = 1;
  }
  char v6 = 7;
LABEL_62:
  uint64_t v24 = a2[3];
  uint64_t v25 = *(void *)(*a2 + 8 * a3);
  *(unsigned char *)this = v9;
  *((void *)this + 1) = v24;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = v25;
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_22E930FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::FileAdapterBatch>(uint64_t **a1, unint64_t **a2, int a3, float a4)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) >> 3) - 1;
  }
  unint64_t v67 = v8;
  long long v64 = v5;
  memset(v65, 0, sizeof(v65));
  uint64_t v66 = v8;
  unint64_t v9 = **a2;
  if (v9)
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v64, **a2, a3);
    uint64_t v13 = operator new(8uLL);
    *uint64_t v13 = 0;
    v71.__m_.__sig = (uint64_t)(v13 + 1);
    *(void *)v71.__m_.__opaque = v13 + 1;
    v70.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v62, a3, (uint64_t)&v70);
    uint64_t v59 = a2;
    unint64_t v61 = v9 / a3;
    operator delete(v13);
    v70.__ptr_ = 0;
    v71.__m_.__sig = 850045863;
    memset(v71.__m_.__opaque, 0, sizeof(v71.__m_.__opaque));
    unint64_t v57 = a3;
    unint64_t v58 = v9;
    if (v9 >= a3)
    {
      uint64_t v16 = 0;
      BOOL v17 = fabsf(a4) == INFINITY;
      int v14 = 1;
      uint64_t v18 = *v62;
      do
      {
        int v19 = *v59;
        unint64_t v20 = (*v59)[1];
        uint64_t v21 = *(void *)(v20 + 8 * v16);
        uint64_t v60 = v16 + 1;
        uint64_t v22 = *(void *)(v20 + 8 * (v16 + 1));
        uint64_t v23 = v22 - v21;
        if (v22 != v21)
        {
          uint64_t v24 = (char *)v59[1] + v16;
          unint64_t v25 = v19[7];
          unsigned int v26 = (unsigned int *)(v19[6] + 4 * v21);
          uint64_t v27 = (float *)(v25 + 4 * v21);
          do
          {
            if (v25) {
              float v28 = *v27;
            }
            else {
              float v28 = 1.0;
            }
            uint64_t v29 = *v26;
            if (fabsf(v28) == INFINITY) {
              int v30 = 0;
            }
            else {
              int v30 = v14;
            }
            if (!v17) {
              int v14 = v30;
            }
            unint64_t v69 = v24 - (char *)a1[2];
            if (v69 < v67) {
              dmlc::LogCheckFormat<unsigned long,unsigned long>();
            }
            if (*v18 <= (unint64_t)(v29 + 1)) {
              uint64_t v31 = v29 + 1;
            }
            else {
              uint64_t v31 = *v18;
            }
            *uint64_t v18 = v31;
            if (v28 != a4) {
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v65[0], v66, v69);
            }
            ++v26;
            ++v27;
            --v23;
          }
          while (v23);
        }
        uint64_t v16 = v60;
      }
      while (v60 != v61);
    }
    else
    {
      LOBYTE(v14) = 1;
    }
    dmlc::OMPException::Rethrow(&v70);
    if ((v14 & 1) == 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v68);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v54 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v68);
      unint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: valid", 19);
      unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v68);
    }
    uint64_t v32 = (unint64_t **)v62;
    if (v62 == (uint64_t **)v63)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v33 = *v32;
        v32 += 3;
        unint64_t v34 = *v33;
        if (v15 <= *v33) {
          unint64_t v15 = v34;
        }
      }
      while (v32 != v63);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v64);
    if (v58 >= v57)
    {
      uint64_t v35 = 0;
      unint64_t v36 = (*v59)[1];
      unint64_t v37 = (*v59)[6];
      unint64_t v38 = (*v59)[7];
      do
      {
        uint64_t v39 = *(void *)(v36 + 8 * v35);
        uint64_t v40 = v35 + 1;
        uint64_t v41 = *(void *)(v36 + 8 * (v35 + 1)) - v39;
        if (v41)
        {
          unint64_t v42 = (int *)(v37 + 4 * v39);
          float v43 = (float *)(v38 + 4 * v39);
          float v44 = (char *)v59[1] + v35;
          uint64_t v46 = (void *)*((void *)&v64 + 1);
          uint64_t v45 = v65[0];
          do
          {
            if (v38) {
              float v47 = *v43;
            }
            else {
              float v47 = 1.0;
            }
            if (v47 != a4)
            {
              int v48 = *v42;
              uint64_t v49 = (char *)(v44 - ((char *)a1[2] + v66));
              uint64_t v50 = *(void *)(*v45 + 8 * (void)v49);
              *(void *)(*v45 + 8 * (void)v49) = v50 + 1;
              uint64_t v51 = *v46 + 8 * v50;
              *(_DWORD *)uint64_t v51 = v48;
              *(float *)(v51 + 4) = v47;
            }
            ++v42;
            ++v43;
            --v41;
          }
          while (v41);
        }
        uint64_t v35 = v40;
      }
      while (v40 != v61);
    }
    dmlc::OMPException::Rethrow(&v70);
    std::mutex::~mutex(&v71);
    std::exception_ptr::~exception_ptr(&v70);
    v70.__ptr_ = &v62;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  }
  else
  {
    unint64_t v15 = 0;
  }
  v70.__ptr_ = v65;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v15;
}

void sub_22E931494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::Clear(xgboost::MetaInfo *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E9316A4()
{
}

void xgboost::MetaInfo::SaveBinary(uint64_t a1, uint64_t a2)
{
  xgboost::Version::Save(a2);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, &xgboost::MetaInfo::kNumField, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_row");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_col");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nonzero");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "group_ptr");
  uint64_t v10 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2;
  uint64_t v11 = 1;
  uint64_t v4 = v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v4 = v8;
  }
  uint64_t v12 = v4;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 8);
  if (v12)
  {
    if ((v9 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v6 = v9;
    }
    else {
      uint64_t v6 = v8;
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, p_p, v6);
  }
  LOBYTE(v12) = 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 1);
  LOBYTE(v12) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v10, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v11, 8);
  uint64_t v12 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 8);
  if (v12) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 48), *(void *)(a1 + 56) - *(void *)(a1 + 48));
  }
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_margin");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_lower_bound");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_upper_bound");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_names");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_types");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_weights");
  if ((char)v9 < 0) {
    operator delete(__p);
  }
}

void sub_22E931BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::SaveScalarField<unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  uint64_t v13 = v6;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v13, 8);
  if (v13)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, v8, v9);
  }
  char v12 = 4;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 8))(a1, &v12, 1);
  char v11 = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 8))(a1, &v11, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 8))(a1, a3, 8);
}

uint64_t anonymous namespace'::SaveTensorField<float,2>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  uint64_t v15 = v6;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 8);
  if (v15)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, v8, v9);
  }
  char v10 = 1;
  LOBYTE(v15) = 1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 1);
  LOBYTE(v15) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 1);
  uint64_t v11 = 0;
  do
  {
    char v12 = v10;
    uint64_t v15 = a3[v11 + 1];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 8);
    char v10 = 0;
    uint64_t v11 = 1;
  }
  while ((v12 & 1) != 0);
  uint64_t v13 = (void *)*a3;
  uint64_t v15 = (uint64_t)(v13[1] - *v13) >> 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 8);
  if (v15) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 8))(a1, *v13, v13[1] - *v13);
  }
  return result;
}

uint64_t anonymous namespace'::SaveVectorField<float>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a2[1];
  }
  uint64_t v15 = v8;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 8);
  if (v15)
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      char v10 = a2;
    }
    else {
      char v10 = (uint64_t *)*a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v11 = a2[1];
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, v10, v11);
  }
  LOBYTE(v15) = 1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 1);
  LOBYTE(v15) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v13, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v14, 8);
  uint64_t v15 = (uint64_t)(a5[1] - *a5) >> 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v15, 8);
  if (v15) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 8))(a1, *a5, a5[1] - *a5);
  }
  return result;
}

uint64_t anonymous namespace'::SaveVectorField<std::string>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a2[1];
  }
  uint64_t v23 = v8;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v23, 8);
  if (v23)
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      char v10 = a2;
    }
    else {
      char v10 = (uint64_t *)*a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v11 = a2[1];
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, v10, v11);
  }
  LOBYTE(v23) = 5;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v23, 1);
  LOBYTE(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v23, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v20, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v21, 8);
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (a5[1] - *a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v22, 8);
  uint64_t v13 = (char *)a5[1] - (char *)*a5;
  if (v13) {
    uint64_t v14 = *a5;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13)
  {
    uint64_t v15 = v13 / 24;
    do
    {
      uint64_t v16 = *((unsigned __int8 *)v14 + 23);
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = v14[1];
      }
      uint64_t v23 = v16;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, &v23, 8);
      if (v23)
      {
        int v17 = *((char *)v14 + 23);
        if (v17 >= 0) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = (uint64_t *)*v14;
        }
        if (v17 >= 0) {
          uint64_t v19 = *((unsigned __int8 *)v14 + 23);
        }
        else {
          uint64_t v19 = v14[1];
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 8))(a1, v18, v19);
      }
      v14 += 3;
      --v15;
    }
    while (v15);
  }
  return result;
}

void xgboost::LoadFeatureType(unsigned __int8 ***a1, unint64_t *a2)
{
  a2[1] = *a2;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        int v7 = v2[1];
        if (v7 != (unsigned __int8 *)1)
        {
          if (v7 == (unsigned __int8 *)3)
          {
            if (*(_WORD *)*v2 == 28265 && (*v2)[2] == 116)
            {
LABEL_54:
              char v10 = (unsigned char *)a2[1];
              unint64_t v24 = a2[2];
              if ((unint64_t)v10 >= v24)
              {
                unint64_t v11 = *a2;
                unint64_t v25 = &v10[-*a2];
                unint64_t v26 = (unint64_t)(v25 + 1);
                if ((uint64_t)(v25 + 1) < 0) {
                  goto LABEL_116;
                }
                unint64_t v27 = v24 - v11;
                if (2 * v27 > v26) {
                  unint64_t v26 = 2 * v27;
                }
                if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v15 = v26;
                }
                if (v15) {
                  uint64_t v16 = (char *)operator new(v15);
                }
                else {
                  uint64_t v16 = 0;
                }
                uint64_t v41 = &v25[(void)v16];
                uint64_t v45 = &v25[(void)v16];
                *uint64_t v45 = 0;
                int v30 = v45 + 1;
                if (v10 != (unsigned char *)v11)
                {
                  uint64_t v46 = &v10[~v11];
                  do
                  {
                    char v47 = *--v10;
                    (v46--)[(void)v16] = v47;
                  }
                  while (v10 != (unsigned char *)v11);
                  goto LABEL_110;
                }
                goto LABEL_111;
              }
              goto LABEL_64;
            }
          }
          else if (v7 == (unsigned __int8 *)5 && *(_DWORD *)*v2 == 1634692198 && (*v2)[4] == 116)
          {
LABEL_20:
            char v10 = (unsigned char *)a2[1];
            unint64_t v9 = a2[2];
            if ((unint64_t)v10 >= v9)
            {
              unint64_t v11 = *a2;
              char v12 = &v10[-*a2];
              unint64_t v13 = (unint64_t)(v12 + 1);
              if ((uint64_t)(v12 + 1) < 0) {
                goto LABEL_116;
              }
              unint64_t v14 = v9 - v11;
              if (2 * v14 > v13) {
                unint64_t v13 = 2 * v14;
              }
              if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v15 = v13;
              }
              if (v15) {
                uint64_t v16 = (char *)operator new(v15);
              }
              else {
                uint64_t v16 = 0;
              }
              uint64_t v41 = &v12[(void)v16];
              unint64_t v42 = &v12[(void)v16];
              *unint64_t v42 = 0;
              int v30 = v42 + 1;
              if (v10 != (unsigned char *)v11)
              {
                float v43 = &v10[~v11];
                do
                {
                  char v44 = *--v10;
                  (v43--)[(void)v16] = v44;
                }
                while (v10 != (unsigned char *)v11);
                goto LABEL_110;
              }
              goto LABEL_111;
            }
            goto LABEL_64;
          }
          goto LABEL_69;
        }
        int v17 = **v2;
        if (v17 == 113) {
          goto LABEL_63;
        }
        if (v17 == 105)
        {
LABEL_40:
          char v10 = (unsigned char *)a2[1];
          unint64_t v19 = a2[2];
          if ((unint64_t)v10 >= v19)
          {
            unint64_t v11 = *a2;
            uint64_t v20 = &v10[-*a2];
            unint64_t v21 = (unint64_t)(v20 + 1);
            if ((uint64_t)(v20 + 1) < 0) {
              goto LABEL_116;
            }
            unint64_t v22 = v19 - v11;
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v15 = v21;
            }
            if (v15) {
              uint64_t v16 = (char *)operator new(v15);
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v41 = &v20[(void)v16];
            int v48 = &v20[(void)v16];
            *int v48 = 0;
            int v30 = v48 + 1;
            if (v10 != (unsigned char *)v11)
            {
              uint64_t v49 = &v10[~v11];
              do
              {
                char v50 = *--v10;
                (v49--)[(void)v16] = v50;
              }
              while (v10 != (unsigned char *)v11);
LABEL_110:
              uint64_t v41 = v16;
            }
LABEL_111:
            *a2 = (unint64_t)v41;
            a2[1] = (unint64_t)v30;
            a2[2] = (unint64_t)&v16[v15];
            if (v11) {
              operator delete((void *)v11);
            }
LABEL_113:
            a2[1] = (unint64_t)v30;
            goto LABEL_114;
          }
LABEL_64:
          *char v10 = 0;
          uint64_t v29 = v10 + 1;
LABEL_65:
          int v30 = v29;
          goto LABEL_113;
        }
      }
      else
      {
        int v5 = *((unsigned __int8 *)v2 + 23);
        if (v5 != 1)
        {
          if (v5 == 3)
          {
            if (*(_WORD *)v2 == 28265 && *((unsigned char *)v2 + 2) == 116) {
              goto LABEL_54;
            }
          }
          else if (v5 == 5 && *(_DWORD *)v2 == 1634692198 && *((unsigned char *)v2 + 4) == 116)
          {
            goto LABEL_20;
          }
          goto LABEL_69;
        }
        int v17 = *(unsigned __int8 *)v2;
        if (v17 == 105) {
          goto LABEL_40;
        }
        if (v17 == 113)
        {
LABEL_63:
          char v10 = (unsigned char *)a2[1];
          unint64_t v28 = a2[2];
          if ((unint64_t)v10 >= v28)
          {
            unint64_t v11 = *a2;
            uint64_t v35 = &v10[-*a2];
            unint64_t v36 = (unint64_t)(v35 + 1);
            if ((uint64_t)(v35 + 1) < 0) {
              goto LABEL_116;
            }
            unint64_t v37 = v28 - v11;
            if (2 * v37 > v36) {
              unint64_t v36 = 2 * v37;
            }
            if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v15 = v36;
            }
            if (v15) {
              uint64_t v16 = (char *)operator new(v15);
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v41 = &v35[(void)v16];
            uint64_t v51 = &v35[(void)v16];
            *uint64_t v51 = 0;
            int v30 = v51 + 1;
            if (v10 != (unsigned char *)v11)
            {
              long long v52 = &v10[~v11];
              do
              {
                char v53 = *--v10;
                (v52--)[(void)v16] = v53;
              }
              while (v10 != (unsigned char *)v11);
              goto LABEL_110;
            }
            goto LABEL_111;
          }
          goto LABEL_64;
        }
      }
      if (v17 == 99)
      {
        uint64_t v32 = (unsigned char *)a2[1];
        unint64_t v31 = a2[2];
        if ((unint64_t)v32 >= v31)
        {
          unint64_t v11 = *a2;
          unint64_t v38 = &v32[-*a2];
          unint64_t v39 = (unint64_t)(v38 + 1);
          if ((uint64_t)(v38 + 1) < 0) {
LABEL_116:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          unint64_t v40 = v31 - v11;
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v15 = v39;
          }
          if (v15) {
            uint64_t v16 = (char *)operator new(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v41 = &v38[(void)v16];
          uint64_t v54 = &v38[(void)v16];
          *uint64_t v54 = 1;
          int v30 = v54 + 1;
          if (v32 != (unsigned char *)v11)
          {
            unint64_t v55 = &v32[~v11];
            do
            {
              char v56 = *--v32;
              (v55--)[(void)v16] = v56;
            }
            while (v32 != (unsigned char *)v11);
            goto LABEL_110;
          }
          goto LABEL_111;
        }
        *uint64_t v32 = 1;
        uint64_t v29 = v32 + 1;
        goto LABEL_65;
      }
LABEL_69:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      unint64_t v34 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"All feature_types must be one of {int, float, i, q, c}.", 55);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v57);
LABEL_114:
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_22E932898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 0;
    }
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t xgboost::MetaInfo::LoadBinary(xgboost::MetaInfo *this, dmlc::Stream *a2)
{
  uint64_t v4 = xgboost::Version::Load((uint64_t (***)(void, std::string *, size_t))a2);
  v90[19] = v4;
  int v91 = v5;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v87);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Binary DMatrix generated by XGBoost: ", 37);
  xgboost::Version::String();
  if ((v84 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v84 & 0x80u) == 0) {
    uint64_t v8 = v84;
  }
  else {
    uint64_t v8 = v83;
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
  char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is no longer supported. ", 25);
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Please process and save your data in current version: ", 54);
  unint64_t v79 = (void *)0x600000001;
  LODWORD(v80) = 1;
  xgboost::Version::String();
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v12 = &v97;
  }
  else {
    char v12 = (std::string *)v97.__r_.__value_.__r.__words[0];
  }
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v97.__r_.__value_.__l.__size_;
  }
  unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" again.", 7);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  LODWORD(__p) = v4;
  LODWORD(v79) = 1;
  if (v4 != 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  LODWORD(__p) = HIDWORD(v4);
  LODWORD(v79) = 6;
  if (SHIDWORD(v4) < 6) {
    dmlc::LogCheckFormat<int,int>();
  }
  unint64_t v86 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v86, 8) != 8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: fi->Read(&num_field)", 34);
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"MetaInfo: invalid format", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  uint64_t v85 = 12;
  if (v86 < 0xC) {
    dmlc::LogCheckFormat<unsigned long long,unsigned long>();
  }
  if (v86 >= 0xD && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v97, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)&v97, 287, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"MetaInfo: the given binary file contains extra fields which will be ignored.", 76);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_row");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_col");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nonzero");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "group_ptr");
  std::operator+<char>();
  memset(&v97, 0, sizeof(v97));
  char v96 = 0;
  std::string::size_type v93 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, &v93, 8) != 8
    || (std::string::size_type v15 = v93, std::string::resize(&v97, v93, 0), v93)
    && ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v16 = &v97)
      : (uint64_t v16 = (std::string *)v97.__r_.__value_.__r.__words[0]),
        (**(uint64_t (***)(dmlc::Stream *, std::string *, std::string::size_type))a2)(a2, v16, v15) != v15))
  {
    uint64_t v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    int v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    unint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: strm->Read(&name)", 31);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      uint64_t v33 = &__p;
    }
    else {
      uint64_t v33 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v34 = v84;
    }
    else {
      uint64_t v34 = v83;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
  }
  uint64_t v17 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v97.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = v81;
  if ((v81 & 0x80u) != 0) {
    uint64_t v19 = v80;
  }
  if (v18 != v19) {
    goto LABEL_59;
  }
  if ((v81 & 0x80u) == 0) {
    uint64_t v20 = (unsigned __int8 *)&v79;
  }
  else {
    uint64_t v20 = (unsigned __int8 *)v79;
  }
  if ((*((unsigned char *)&v97.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v97.__r_.__value_.__l.__data_, v20, v97.__r_.__value_.__l.__size_)) {
      goto LABEL_59;
    }
  }
  else if (*((unsigned char *)&v97.__r_.__value_.__s + 23))
  {
    unint64_t v21 = &v97;
    while (v21->__r_.__value_.__s.__data_[0] == *v20)
    {
      unint64_t v21 = (std::string *)((char *)v21 + 1);
      ++v20;
      if (!--v17) {
        goto LABEL_60;
      }
    }
LABEL_59:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v97, (uint64_t)&v79);
  }
LABEL_60:
  char v95 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, &v95, 1) != 1)
  {
    uint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    unint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      unint64_t v39 = &__p;
    }
    else {
      unint64_t v39 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v40 = v84;
    }
    else {
      uint64_t v40 = v83;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
  }
  if (v95 != 3)
  {
    uint64_t v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v42 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: type == expected_type", 35);
    char v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      uint64_t v45 = &__p;
    }
    else {
      uint64_t v45 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v46 = v84;
    }
    else {
      uint64_t v46 = v83;
    }
    char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Expected field of type: ", 24);
    int v48 = (void *)std::ostream::operator<<();
    uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
  }
  if ((**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, &v96, 1) != 1)
  {
    char v50 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    dmlc::LogMessageFatal::Entry::Init(v50, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v51 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    char v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      uint64_t v54 = &__p;
    }
    else {
      uint64_t v54 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v55 = v84;
    }
    else {
      uint64_t v55 = v83;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
  }
  if (v96)
  {
    char v56 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    dmlc::LogMessageFatal::Entry::Init(v56, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    char v57 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
    unint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: !is_scalar", 24);
    uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      uint64_t v60 = &__p;
    }
    else {
      uint64_t v60 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v61 = v84;
    }
    else {
      uint64_t v61 = v83;
    }
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
    int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Expected field ", 15);
    if ((v81 & 0x80u) == 0) {
      long long v64 = &v79;
    }
    else {
      long long v64 = v79;
    }
    if ((v81 & 0x80u) == 0) {
      uint64_t v65 = v81;
    }
    else {
      uint64_t v65 = v80;
    }
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
  }
  std::string::size_type v93 = 0;
  uint64_t v94 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, &v93, 8) != 8)
  {
    unint64_t v67 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    dmlc::LogMessageFatal::Entry::Init(v67, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    long long v68 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    unint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v98);
  }
  if ((**(uint64_t (***)(dmlc::Stream *, uint64_t *, uint64_t))a2)(a2, &v94, 8) != 8)
  {
    std::exception_ptr v70 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    dmlc::LogMessageFatal::Entry::Init(v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    std::mutex v71 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v98);
  }
  int v92 = 1;
  if (v94 != 1) {
    dmlc::LogCheckFormat<unsigned long long,int>();
  }
  std::vector<unsigned int>::size_type v98 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::vector<unsigned int>::size_type *, uint64_t))a2)(a2, &v98, 8) != 8
    || (std::vector<unsigned int>::size_type v22 = v98, std::vector<unsigned int>::resize((std::vector<unsigned int> *)this + 2, v98), v98)
    && (**(uint64_t (***)(dmlc::Stream *, void, uint64_t))a2)(a2, *((void *)this + 6), 4 * v22) != 4 * v22)
  {
    v73 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    dmlc::LogMessageFatal::Entry::Init(v73, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v74 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v98);
    long long v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: strm->Read(field)", 31);
    long long v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    if ((v84 & 0x80u) == 0) {
      long long v77 = &__p;
    }
    else {
      long long v77 = __p;
    }
    if ((v84 & 0x80u) == 0) {
      uint64_t v78 = v84;
    }
    else {
      uint64_t v78 = v83;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v98);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  if ((char)v81 < 0) {
    operator delete(v79);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_margin");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_lower_bound");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_upper_bound");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_names");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_types");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_weights");
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  xgboost::LoadFeatureType((unsigned __int8 ***)this + 15, *((unint64_t **)this + 21));
  v87[0] = *MEMORY[0x263F8C2B8];
  uint64_t v23 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v87 + *(void *)(v87[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v88[0] = v23;
  v88[1] = MEMORY[0x263F8C318] + 16;
  if (v89 < 0) {
    operator delete((void *)v88[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230FA8020](v90);
}

void sub_22E933AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (*(char *)(v55 - 73) < 0) {
    operator delete(*(void **)(v55 - 96));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  int v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22E934030(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x230FA8020](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::LoadScalarField<unsigned long long>(uint64_t (***a1)(void, std::string::size_type *, uint64_t), uint64_t a2, std::string::size_type *a3)
{
  std::operator+<char>();
  memset(&v61, 0, sizeof(v61));
  char v60 = 0;
  std::string::size_type v65 = 0;
  if ((**a1)(a1, &v65, 8) != 8
    || (std::string::size_type v6 = v65, std::string::resize(&v61, v65, 0), v65)
    && ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v7 = &v61)
      : (uint64_t v7 = (std::string *)v61.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    std::string::size_type v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: strm->Read(&name)", 31);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v19 = v64;
    }
    else {
      uint64_t v19 = v63;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
  }
  uint64_t v8 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (size != v10) {
    goto LABEL_23;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&v61.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v61.__r_.__value_.__l.__data_, v12, v61.__r_.__value_.__l.__size_)) {
      goto LABEL_23;
    }
  }
  else if (*((unsigned char *)&v61.__r_.__value_.__s + 23))
  {
    unint64_t v13 = &v61;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      unint64_t v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_23:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v61, a2);
  }
LABEL_24:
  LOBYTE(v65) = 0;
  if ((**a1)(a1, &v65, 1) != 1)
  {
    uint64_t v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    std::vector<unsigned int>::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      unint64_t v24 = &__p;
    }
    else {
      unint64_t v24 = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v25 = v64;
    }
    else {
      uint64_t v25 = v63;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  if (v65 != 4)
  {
    unint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: type == expected_type", 35);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      int v30 = &__p;
    }
    else {
      int v30 = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v31 = v64;
    }
    else {
      uint64_t v31 = v63;
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Expected field of type: ", 24);
    uint64_t v33 = (void *)std::ostream::operator<<();
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  if ((**a1)(a1, (std::string::size_type *)&v60, 1) != 1)
  {
    uint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    unint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      unint64_t v39 = &__p;
    }
    else {
      unint64_t v39 = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v40 = v64;
    }
    else {
      uint64_t v40 = v63;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  if (!v60)
  {
    uint64_t v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v42 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: is_scalar", 23);
    char v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      uint64_t v45 = &__p;
    }
    else {
      uint64_t v45 = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v46 = v64;
    }
    else {
      uint64_t v46 = v63;
    }
    char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Expected field ", 15);
    int v49 = *(char *)(a2 + 23);
    if (v49 >= 0) {
      uint64_t v50 = a2;
    }
    else {
      uint64_t v50 = *(void *)a2;
    }
    if (v49 >= 0) {
      uint64_t v51 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v51 = *(void *)(a2 + 8);
    }
    long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" to be a scalar; got a vector",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  if ((**a1)(a1, a3, 8) != 8)
  {
    char v53 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v53, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v54 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: strm->Read(field)", 31);
    char v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
    if ((v64 & 0x80u) == 0) {
      char v57 = &__p;
    }
    else {
      char v57 = __p;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v58 = v64;
    }
    else {
      uint64_t v58 = v63;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if ((char)v64 < 0) {
    operator delete(__p);
  }
}

void sub_22E9346DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::LoadTensorField<float,2>(uint64_t (***a1)(void, std::string::size_type *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  std::operator+<char>();
  memset(&v71, 0, sizeof(v71));
  char v70 = 0;
  __n[0] = 0;
  if ((**a1)(a1, __n, 8) != 8
    || (std::string::size_type v6 = __n[0], std::string::resize(&v71, __n[0], 0), __n[0])
    && ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v7 = &v71)
      : (uint64_t v7 = (std::string *)v71.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: strm->Read(&name)", 31);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v29 = v74;
    }
    else {
      uint64_t v29 = v73;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  uint64_t v8 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v71.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (size != v10) {
    goto LABEL_23;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v71.__r_.__value_.__l.__data_, v12, v71.__r_.__value_.__l.__size_)) {
      goto LABEL_23;
    }
  }
  else if (*((unsigned char *)&v71.__r_.__value_.__s + 23))
  {
    unint64_t v13 = &v71;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      unint64_t v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_23:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v71, a2);
  }
LABEL_24:
  char v69 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v69, 1) != 1)
  {
    int v30 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v30, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v31 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      uint64_t v34 = &__p;
    }
    else {
      uint64_t v34 = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v35 = v74;
    }
    else {
      uint64_t v35 = v73;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if (v69 != 1)
  {
    unint64_t v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: type == expected_type", 35);
    unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      uint64_t v40 = &__p;
    }
    else {
      uint64_t v40 = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v41 = v74;
    }
    else {
      uint64_t v41 = v73;
    }
    unint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Expected field of type: ", 24);
    float v43 = (void *)std::ostream::operator<<();
    char v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v70, 1) != 1)
  {
    uint64_t v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v46 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      int v49 = &__p;
    }
    else {
      int v49 = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v50 = v74;
    }
    else {
      uint64_t v50 = v73;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if (v70)
  {
    uint64_t v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    long long v52 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    char v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: !is_scalar", 24);
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      uint64_t v55 = &__p;
    }
    else {
      uint64_t v55 = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v56 = v74;
    }
    else {
      uint64_t v56 = v73;
    }
    char v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Expected field ", 15);
    int v59 = *(char *)(a2 + 23);
    if (v59 >= 0) {
      uint64_t v60 = a2;
    }
    else {
      uint64_t v60 = *(void *)a2;
    }
    if (v59 >= 0) {
      uint64_t v61 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v61 = *(void *)(a2 + 8);
    }
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" to be a tensor; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  uint64_t v14 = 0;
  char v15 = 1;
  do
  {
    char v16 = v15;
    if ((**a1)(a1, &__n[v14], 8) != 8)
    {
      uint64_t v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      std::string::size_type v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: strm->Read(&(shape[i]))", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v75);
    }
    char v15 = 0;
    uint64_t v14 = 1;
  }
  while ((v16 & 1) != 0);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)__n;
  uint64_t v20 = *(void *)a3;
  unint64_t v21 = *(void *)(a3 + 16) * *(void *)(a3 + 8);
  LODWORD(v75) = 0;
  std::vector<float>::resize(v20, v21, &v75);
  std::vector<unsigned int>::size_type v22 = *(std::string::size_type ***)a3;
  unint64_t v75 = 0;
  if ((**a1)(a1, &v75, 8) != 8
    || (unint64_t v23 = v75, std::vector<float>::resize((uint64_t)v22, v75), v75) && (**a1)(a1, *v22, 4 * v23) != 4 * v23)
  {
    uint64_t v63 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
    dmlc::LogMessageFatal::Entry::Init(v63, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unsigned __int8 v64 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
    std::string::size_type v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: strm->Read(&field)", 32);
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)": ", 2);
    if ((v74 & 0x80u) == 0) {
      unint64_t v67 = &__p;
    }
    else {
      unint64_t v67 = __p;
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v68 = v74;
    }
    else {
      uint64_t v68 = v73;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v75);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if ((char)v74 < 0) {
    operator delete(__p);
  }
}

void sub_22E934FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::LoadVectorField<float>(uint64_t (***a1)(void, std::string::size_type *, uint64_t), uint64_t a2, std::string::size_type **a3)
{
  std::operator+<char>();
  memset(&v70, 0, sizeof(v70));
  char v69 = 0;
  std::string::size_type __n = 0;
  if ((**a1)(a1, &__n, 8) != 8
    || (std::string::size_type v6 = __n, std::string::resize(&v70, __n, 0), __n)
    && ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v7 = &v70)
      : (uint64_t v7 = (std::string *)v70.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    char v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: strm->Read(&name)", 31);
    std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v20 = v73;
    }
    else {
      uint64_t v20 = v72;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  uint64_t v8 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v70.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (size != v10) {
    goto LABEL_23;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&v70.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v70.__r_.__value_.__l.__data_, v12, v70.__r_.__value_.__l.__size_)) {
      goto LABEL_23;
    }
  }
  else if (*((unsigned char *)&v70.__r_.__value_.__s + 23))
  {
    unint64_t v13 = &v70;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      unint64_t v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_23:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v70, a2);
  }
LABEL_24:
  char v68 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v68, 1) != 1)
  {
    unint64_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    std::vector<unsigned int>::size_type v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      uint64_t v25 = &__p;
    }
    else {
      uint64_t v25 = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v26 = v73;
    }
    else {
      uint64_t v26 = v72;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v68 != 1)
  {
    unint64_t v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: type == expected_type", 35);
    int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      uint64_t v31 = &__p;
    }
    else {
      uint64_t v31 = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v32 = v73;
    }
    else {
      uint64_t v32 = v72;
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Expected field of type: ", 24);
    uint64_t v34 = (void *)std::ostream::operator<<();
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v69, 1) != 1)
  {
    unint64_t v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      uint64_t v40 = &__p;
    }
    else {
      uint64_t v40 = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v41 = v73;
    }
    else {
      uint64_t v41 = v72;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v69)
  {
    unint64_t v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    float v43 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    char v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: !is_scalar", 24);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      uint64_t v46 = &__p;
    }
    else {
      uint64_t v46 = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v47 = v73;
    }
    else {
      uint64_t v47 = v72;
    }
    int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Expected field ", 15);
    int v50 = *(char *)(a2 + 23);
    if (v50 >= 0) {
      uint64_t v51 = a2;
    }
    else {
      uint64_t v51 = *(void *)a2;
    }
    if (v50 >= 0) {
      uint64_t v52 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v52 = *(void *)(a2 + 8);
    }
    char v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  std::string::size_type __n = 0;
  uint64_t v67 = 0;
  if ((**a1)(a1, &__n, 8) != 8)
  {
    uint64_t v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v55 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
  }
  if ((**a1)(a1, (std::string::size_type *)&v67, 8) != 8)
  {
    char v57 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    dmlc::LogMessageFatal::Entry::Init(v57, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v58 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
  }
  if (v67 != 1) {
    dmlc::LogCheckFormat<unsigned long long,int>();
  }
  unint64_t v74 = 0;
  if ((**a1)(a1, &v74, 8) != 8
    || (unint64_t v14 = v74, std::vector<float>::resize((uint64_t)a3, v74), v74) && (**a1)(a1, *a3, 4 * v14) != 4 * v14)
  {
    uint64_t v60 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    dmlc::LogMessageFatal::Entry::Init(v60, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v61 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: strm->Read(field)", 31);
    uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
    if ((v73 & 0x80u) == 0) {
      unsigned __int8 v64 = &__p;
    }
    else {
      unsigned __int8 v64 = __p;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v65 = v73;
    }
    else {
      uint64_t v65 = v72;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if ((char)v73 < 0) {
    operator delete(__p);
  }
}

void sub_22E93598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::LoadVectorField<std::string>(uint64_t (***a1)(void, std::string::size_type *, uint64_t), uint64_t a2, std::vector<std::string> *a3)
{
  std::operator+<char>();
  memset(&v75, 0, sizeof(v75));
  char v74 = 0;
  std::string::size_type __n = 0;
  if ((**a1)(a1, &__n, 8) != 8
    || (std::string::size_type v6 = __n, std::string::resize(&v75, __n, 0), __n)
    && ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v7 = &v75)
      : (uint64_t v7 = (std::string *)v75.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    std::vector<unsigned int>::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: strm->Read(&name)", 31);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    if ((v78 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v78 & 0x80u) == 0) {
      uint64_t v25 = v78;
    }
    else {
      uint64_t v25 = v77;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)p_p, v25);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  uint64_t v8 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (size != v10) {
    goto LABEL_23;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&v75.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v75.__r_.__value_.__l.__data_, v12, v75.__r_.__value_.__l.__size_)) {
      goto LABEL_23;
    }
  }
  else if (*((unsigned char *)&v75.__r_.__value_.__s + 23))
  {
    unint64_t v13 = &v75;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      unint64_t v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_23:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v75, a2);
  }
LABEL_24:
  char v73 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v73, 1) != 1)
  {
    uint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    if ((v78 & 0x80u) == 0) {
      int v30 = &__p;
    }
    else {
      int v30 = __p;
    }
    if ((v78 & 0x80u) == 0) {
      uint64_t v31 = v78;
    }
    else {
      uint64_t v31 = v77;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v73 != 5)
  {
    uint64_t v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v33 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: type == expected_type", 35);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
    if ((v78 & 0x80u) == 0) {
      unint64_t v36 = &__p;
    }
    else {
      unint64_t v36 = __p;
    }
    if ((v78 & 0x80u) == 0) {
      uint64_t v37 = v78;
    }
    else {
      uint64_t v37 = v77;
    }
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Expected field of type: ", 24);
    unint64_t v39 = (void *)std::ostream::operator<<();
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v74, 1) != 1)
  {
    uint64_t v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    unint64_t v42 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    char v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
    if ((v78 & 0x80u) == 0) {
      uint64_t v45 = &__p;
    }
    else {
      uint64_t v45 = __p;
    }
    if ((v78 & 0x80u) == 0) {
      uint64_t v46 = v78;
    }
    else {
      uint64_t v46 = v77;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v74)
  {
    uint64_t v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    int v48 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: !is_scalar", 24);
    int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
    if ((v78 & 0x80u) == 0) {
      uint64_t v51 = &__p;
    }
    else {
      uint64_t v51 = __p;
    }
    if ((v78 & 0x80u) == 0) {
      uint64_t v52 = v78;
    }
    else {
      uint64_t v52 = v77;
    }
    char v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Expected field ", 15);
    int v55 = *(char *)(a2 + 23);
    if (v55 >= 0) {
      uint64_t v56 = a2;
    }
    else {
      uint64_t v56 = *(void *)a2;
    }
    if (v55 >= 0) {
      uint64_t v57 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v57 = *(void *)(a2 + 8);
    }
    uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  std::string::size_type __n = 0;
  uint64_t v72 = 0;
  if ((**a1)(a1, &__n, 8) != 8)
  {
    int v59 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v59, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v60 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if ((**a1)(a1, (std::string::size_type *)&v72, 8) != 8)
  {
    uint64_t v62 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    uint64_t v63 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    unsigned __int8 v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  LODWORD(v79) = 1;
  if (v72 != 1) {
    dmlc::LogCheckFormat<unsigned long long,int>();
  }
  std::vector<std::string>::size_type v79 = 0;
  if ((**a1)(a1, &v79, 8) != 8) {
    goto LABEL_93;
  }
  std::vector<std::string>::size_type v14 = v79;
  std::vector<std::string>::resize(a3, v79);
  std::vector<std::string>::pointer v15 = a3->__end_ == a3->__begin_ ? 0 : a3->__begin_;
  if (v14)
  {
    BOOL v16 = 0;
    uint64_t v17 = 0;
    do
    {
      std::string::size_type v80 = 0;
      if ((**a1)(a1, &v80, 8) != 8) {
        break;
      }
      std::string::size_type v18 = v80;
      std::string::resize(v15, v80, 0);
      if (v80)
      {
        std::vector<std::string>::pointer v19 = v15;
        if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0) {
          std::vector<std::string>::pointer v19 = (std::vector<std::string>::pointer)v15->__r_.__value_.__r.__words[0];
        }
        if ((**a1)(a1, (std::string::size_type *)v19, v18) != v18) {
          break;
        }
      }
      BOOL v16 = ++v17 >= v14;
      ++v15;
    }
    while (v14 != v17);
    if (!v16)
    {
LABEL_93:
      uint64_t v65 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(v65, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v66 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: strm->Read(field)", 31);
      char v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
      if ((v78 & 0x80u) == 0) {
        char v69 = &__p;
      }
      else {
        char v69 = __p;
      }
      if ((v78 & 0x80u) == 0) {
        uint64_t v70 = v78;
      }
      else {
        uint64_t v70 = v77;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
    }
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if ((char)v78 < 0) {
    operator delete(__p);
  }
}

void sub_22E93642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::Slice(xgboost::MetaInfo *a1@<X8>)
{
}

void sub_22E9369DC()
{
  xgboost::MetaInfo::~MetaInfo(v0);
}

void *xgboost::Gather<float>(void *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*a2 == a2[1])
  {
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    uint64_t v7 = *a3;
    uint64_t result = std::vector<float>::vector(result, *a3 * a4);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *a3;
      uint64_t v10 = *a2;
      uint64_t v11 = 4 * a4;
      uint64_t v12 = (_DWORD *)*result;
      do
      {
        if (v8 == v9) {
          std::terminate();
        }
        if (a4)
        {
          unint64_t v13 = (int *)(v10 + v11 * *(int *)(a3[1] + 4 * v8));
          std::vector<std::string>::size_type v14 = v12;
          uint64_t v15 = a4;
          do
          {
            int v16 = *v13++;
            *v14++ = v16;
            --v15;
          }
          while (v15);
        }
        ++v8;
        uint64_t v12 = (_DWORD *)((char *)v12 + v11);
      }
      while (v8 != v7);
    }
  }
  return result;
}

void xgboost::MetaInfo::SetInfo()
{
}

void sub_22E936C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22E936C90()
{
  if (v0)
  {
    if (atomic_fetch_add_explicit(v0 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v0 + 8))(v0);
    }
  }
  JUMPOUT(0x22E936C44);
}

uint64_t xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<void *>(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  uint64_t v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Empty data passed in.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  int v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v2 + 56));
  std::string::size_type v6 = (_DWORD **)v5[2];
  if ((_DWORD **)v5[3] == v6) {
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  }
  return *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v6) + 2);
}

void sub_22E936D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::MetaInfo::SetInfoFromCUDA()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E936E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::MetaInfo::SetInfoFromHost(void *a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a4 == 3)
  {
    if (!memcmp(a3, "qid", 3uLL)) {
      xgboost::HostDeviceVector<unsigned int>::HostDeviceVector();
    }
    goto LABEL_19;
  }
  if (a4 != 5)
  {
    if (a4 == 11 && !memcmp(a3, "base_margin", 0xBuLL))
    {
      uint64_t v8 = *a5;
      uint64_t v34 = v8;
      if (v8) {
        atomic_fetch_add_explicit(v8 + 2, 1u, memory_order_relaxed);
      }
      char v9 = a1 + 10;
      if (v8 && atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      unint64_t v10 = *a1;
      if (*a1 && a1[11] != v10)
      {
        uint64_t v11 = (void *)*v9;
        unint64_t v12 = (uint64_t)(*(void *)(*v9 + 8) - *(void *)*v9) >> 2;
        if (v12 % v10)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          int v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
          uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: this->base_margin_.Size() % this->num_row_ == 0", 61);
          uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Incorrect size for base margin.", 31);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
          uint64_t v11 = (void *)a1[10];
          unint64_t v10 = *a1;
          unint64_t v12 = (uint64_t)(v11[1] - *v11) >> 2;
        }
        unint64_t v13 = v12 / v10;
        a1[11] = v10;
        a1[12] = v13;
        LODWORD(v36.__ptr_) = 0;
        std::vector<float>::resize((uint64_t)v11, v13 * v10, &v36);
      }
      return;
    }
LABEL_19:
    xgboost::HostDeviceVector<float>::HostDeviceVector();
  }
  if (memcmp(a3, "label", 5uLL))
  {
    if (!memcmp(a3, "group", 5uLL)) {
      xgboost::HostDeviceVector<unsigned int>::HostDeviceVector();
    }
    goto LABEL_19;
  }
  std::vector<std::string>::size_type v14 = *a5;
  uint64_t v33 = v14;
  if (v14) {
    atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
  }
  uint64_t v15 = (uint64_t **)(a1 + 3);
  if (v14 && atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  unint64_t v16 = *a1;
  if (*a1 && a1[4] != v16)
  {
    *(void *)__x = (((*v15)[1] - **v15) >> 2) % v16;
    if (*(void *)__x) {
      dmlc::LogCheckFormat<unsigned long long,int>();
    }
    uint64_t v17 = (void *)a1[3];
    unint64_t v18 = *a1;
    unint64_t v19 = (unint64_t)((uint64_t)(v17[1] - *v17) >> 2) / *a1;
    a1[4] = *a1;
    a1[5] = v19;
    LODWORD(v36.__ptr_) = 0;
    std::vector<float>::resize((uint64_t)v17, v19 * v18, &v36);
  }
  uint64_t v21 = **v15;
  uint64_t v20 = (*v15)[1];
  if (v21 != v20)
  {
    uint64_t v22 = v21 + 4;
    do
    {
      BOOL v23 = (*(_DWORD *)(v22 - 4) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      BOOL v24 = (*(_DWORD *)(v22 - 4) & 0x7FFFFFFFu) > 0x7F7FFFFF || v22 == v20;
      v22 += 4;
    }
    while (!v24);
    if (v23)
    {
      uint64_t v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: valid", 19);
      unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Label contains NaN, infinity or a value too large.", 50);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
    }
  }
}

void sub_22E937C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,std::exception_ptr a25)
{
}

void xgboost::anonymous namespace'::CopyTensorInfoImpl<2,float>(_DWORD **a1, uint64_t *a2)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  __int16 v63 = 512;
  long long v61 = 0u;
  *(_OWORD *)__src = 0u;
  memset(v60, 0, sizeof(v60));
  uint64_t v4 = *a1;
  int v5 = v4[3];
  if (v5 == 4)
  {
    uint64_t v7 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v4);
    uint64_t v8 = v7[3] - v7[2];
    *(void *)&long long v54 = v8 >> 3;
    LODWORD(v67.__ptr_) = 1;
    if (v8 != 8) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    char v9 = (_DWORD ***)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*a1);
    std::string::size_type v6 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v9[2]);
  }
  else
  {
    if (v5 != 3) {
      goto LABEL_8;
    }
    std::string::size_type v6 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v4);
  }
  xgboost::ArrayInterface<2,false>::Initialize((uint64_t)v60, (uint64_t)v6 + 16);
LABEL_8:
  if (__src[1])
  {
    if ((*(void *)&v60[0] & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: array.valid.Size() == 0", 37);
      uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Meta info like label or weight can not have missing value.", 58);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
    }
    if (!(_BYTE)v63 || HIBYTE(v63))
    {
      *(_OWORD *)(a2 + 1) = v61;
      unint64_t v12 = (void *)*a2;
      unint64_t v13 = a2[2] * a2[1];
      LODWORD(v70.__ptr_) = 0;
      std::vector<float>::resize((uint64_t)v12, v13, &v70);
      uint64_t v14 = 0;
      uint64_t v16 = *(void *)*a2;
      uint64_t v15 = *(void *)(*a2 + 8);
      uint64_t v17 = (v15 - v16) >> 2;
      uint64_t v56 = v17;
      uint64_t v57 = v16;
      int v59 = -1;
      uint64_t v18 = a2[2];
      *(void *)&long long v55 = a2[1];
      *((void *)&v55 + 1) = v18;
      uint64_t v19 = v18 * v55;
      if (v15 == v16) {
        uint64_t v19 = 0;
      }
      *(void *)&long long v58 = v16;
      *((void *)&v58 + 1) = v19;
      *(void *)&long long v54 = v18;
      *((void *)&v54 + 1) = 1;
      v70.__ptr_ = (void *)v18;
      v71.__m_.__sig = 1;
      while (*(void **)((char *)&v54 + v14) == *(void **)((char *)&v70.__ptr_ + v14))
      {
        v14 += 8;
        if (v14 == 16) {
          goto LABEL_21;
        }
      }
      uint64_t v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      unint64_t v42 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: t.CContiguous()", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      uint64_t v17 = v56;
      uint64_t v16 = v57;
LABEL_21:
      long long v48 = v54;
      long long v49 = v55;
      unint64_t v50 = v17;
      uint64_t v51 = v16;
      long long v52 = v58;
      int v53 = v59;
      uint64_t v20 = *((void *)&v58 + 1);
      if (v17 == *((void *)&v58 + 1)) {
        goto LABEL_33;
      }
      uint64_t v21 = 0;
      v70.__ptr_ = (void *)*((void *)&v49 + 1);
      v71.__m_.__sig = 1;
      while (*(void **)((char *)&v48 + v21) == *(void **)((char *)&v70.__ptr_ + v21))
      {
        v21 += 8;
        if (v21 == 16) {
          goto LABEL_33;
        }
      }
      uint64_t v22 = 0;
      v70.__ptr_ = (void *)1;
      v71.__m_.__sig = v49;
      do
      {
        uint64_t v23 = *(void *)((char *)&v48 + v22);
        uint64_t v24 = *(uint64_t *)((char *)&v70.__ptr_ + v22);
        BOOL v25 = v23 != v24 || v22 == 8;
        v22 += 8;
      }
      while (!v25);
      if (v23 == v24)
      {
LABEL_33:
        v70.__ptr_ = 0;
        v71.__m_.__sig = 850045863;
        int8x8_t v26 = 0;
        memset(v71.__m_.__opaque, 0, sizeof(v71.__m_.__opaque));
        if (*((void *)&v58 + 1))
        {
          unint64_t v27 = 0;
          do
          {
            uint64_t v65 = 2;
            uint64_t v66 = &v55;
            unint64_t v28 = xgboost::linalg::UnravelIndex<2ul>(v27, &v65, v26);
            v67.__ptr_ = v60;
            unint64_t v68 = v28;
            uint64_t v69 = v29;
            *(float *)v26.i32 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>((uint64_t)__src[0], SHIBYTE(v63), &v67, v30);
            *(_DWORD *)(v16 + 4 * v27++) = v26.i32[0];
          }
          while (v20 != v27);
        }
      }
      else
      {
        v70.__ptr_ = 0;
        v71.__m_.__sig = 850045863;
        int8x8_t v31 = 0;
        memset(v71.__m_.__opaque, 0, sizeof(v71.__m_.__opaque));
        if (*((void *)&v58 + 1))
        {
          unint64_t v32 = 0;
          do
          {
            v64[0] = 2;
            v64[1] = &v49;
            unint64_t v33 = xgboost::linalg::UnravelIndex<2ul>(v32, v64, v31);
            unint64_t v36 = v48 * v33 + *((void *)&v48 + 1) * v35;
            if (v36 >= v50) {
              __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
            }
            uint64_t v37 = v52;
            uint64_t v65 = 2;
            uint64_t v66 = &v55;
            unint64_t v38 = xgboost::linalg::UnravelIndex<2ul>(v32, &v65, v34);
            v67.__ptr_ = v60;
            unint64_t v68 = v38;
            uint64_t v69 = v39;
            *(float *)v31.i32 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>((uint64_t)__src[0], SHIBYTE(v63), &v67, v40);
            *(_DWORD *)(v37 + 4 * v36) = v31.i32[0];
            ++v32;
          }
          while (v20 != v32);
        }
      }
      dmlc::OMPException::Rethrow(&v70);
      std::mutex::~mutex(&v71);
      std::exception_ptr::~exception_ptr(&v70);
    }
    else
    {
      *(_OWORD *)(a2 + 1) = v61;
      LODWORD(v70.__ptr_) = 0;
      std::vector<float>::resize(*a2, (unint64_t)__src[1], &v70);
      memcpy(*(void **)*a2, __src[0], 4 * (uint64_t)__src[1]);
      *(void *)&long long v54 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
      v67.__ptr_ = (void *)(a2[2] * a2[1]);
      if ((void *)v54 != v67.__ptr_) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
    }
  }
  else
  {
    *(_OWORD *)(a2 + 1) = v61;
    uint64_t v10 = *a2;
    unint64_t v11 = a2[2] * a2[1];
    LODWORD(v70.__ptr_) = 0;
    std::vector<float>::resize(v10, v11, &v70);
  }
}

void sub_22E938618()
{
}

void sub_22E938624()
{
}

void sub_22E938634()
{
}

void sub_22E938640()
{
}

void sub_22E938658(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E93866C(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E938688(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_22E9386A0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 168);
  *(void *)(v1 - 168) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  }
  _Unwind_Resume(a1);
}

void sub_22E9386E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void xgboost::anonymous namespace'::CopyTensorInfoImpl<1,unsigned int>(_DWORD **a1, void ***a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)v15, a1);
  if (__sz)
  {
    if ((v15[0] & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: array.valid.Size() == 0", 37);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Meta info like label or weight can not have missing value.", 58);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
    }
    if (v19 && v20 == 9)
    {
      std::vector<unsigned int>::size_type v3 = __sz;
      a2[1] = (void **)v16;
      __x[0] = 0;
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v3, __x);
      memcpy(**a2, __src, 4 * __sz);
      uint64_t v4 = ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2;
      uint64_t v21 = a2[1];
      uint64_t v22 = v4;
      if ((void **)v4 != v21) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
    }
    else
    {
      std::vector<unsigned int>::size_type v6 = v16;
      a2[1] = (void **)v16;
      __x[0] = 0;
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v6, __x);
      uint64_t v8 = **a2;
      uint64_t v7 = (*a2)[1];
      char v9 = a2[1];
      *(void *)__x = 0;
      v24.__m_.__sig = 850045863;
      memset(v24.__m_.__opaque, 0, sizeof(v24.__m_.__opaque));
      if (v7 != v8 && v9)
      {
        for (uint64_t i = 0; (void **)i != v9; ++i)
          v8[i] = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned int xgboost::ArrayInterface<1,true>::operator()<unsigned int,unsigned long &>(unsigned long &)::{lambda(unsigned int const*)#1}>((uint64_t)__src, v20, (uint64_t)v15, i);
      }
      dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
      std::mutex::~mutex(&v24);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    }
  }
  else
  {
    std::vector<unsigned int>::size_type v5 = v16;
    a2[1] = (void **)v16;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v5, __x);
  }
}

void sub_22E9389C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, std::exception_ptr a19)
{
}

void xgboost::data::ValidateQueryGroup(unsigned int *a1, uint64_t a2)
{
  if ((unint64_t)(a2 - (void)a1) >= 5)
  {
    unint64_t v2 = (a2 - (uint64_t)a1) >> 2;
    if (v2 <= 2) {
      unint64_t v2 = 2;
    }
    unsigned int v5 = *a1;
    std::vector<unsigned int>::size_type v3 = a1 + 1;
    unsigned int v4 = v5;
    unint64_t v6 = v2 - 1;
    while (1)
    {
      unsigned int v8 = *v3++;
      unsigned int v7 = v8;
      if (v8 < v4) {
        break;
      }
      unsigned int v4 = v7;
      if (!--v6) {
        return;
      }
    }
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/validation.h");
    uint64_t v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: valid_query_group", 31);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid group structure.", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
}

void sub_22E938AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::MetaInfo::SetInfo(int a1, int a2, char *__s, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  switch(a5)
  {
    case 1:
      strlen(__s);
      if (a4 || !a6)
      {
        uint64_t v18 = a6;
        uint64_t v19 = a4;
        int v22 = -1;
        uint64_t v16 = 1;
        uint64_t v17 = a6;
        uint64_t v20 = a4;
        uint64_t v21 = a6;
        xgboost::linalg::ArrayInterface<float,1>();
      }
      return;
    case 2:
      strlen(__s);
      if (a4 || !a6)
      {
        uint64_t v18 = a6;
        uint64_t v19 = a4;
        int v22 = -1;
        uint64_t v16 = 1;
        uint64_t v17 = a6;
        uint64_t v20 = a4;
        uint64_t v21 = a6;
        uint64_t v13 = 0x300000000;
        v14[1] = 0;
        uint64_t v15 = 0;
        __p = &unk_26E24E128;
        v14[0] = &v14[1];
        operator new();
      }
      return;
    case 3:
      strlen(__s);
      if (a4 || !a6)
      {
        uint64_t v18 = a6;
        uint64_t v19 = a4;
        int v22 = -1;
        uint64_t v16 = 1;
        uint64_t v17 = a6;
        uint64_t v20 = a4;
        uint64_t v21 = a6;
        xgboost::linalg::ArrayInterface<unsigned int,1>();
      }
      return;
    case 4:
      strlen(__s);
      if (a4 || !a6)
      {
        uint64_t v18 = a6;
        uint64_t v19 = a4;
        int v22 = -1;
        uint64_t v16 = 1;
        uint64_t v17 = a6;
        uint64_t v20 = a4;
        uint64_t v21 = a6;
        uint64_t v13 = 0x300000000;
        v14[1] = 0;
        uint64_t v15 = 0;
        __p = &unk_26E24E128;
        v14[0] = &v14[1];
        operator new();
      }
      return;
    default:
      char v8 = a5;
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown data type", 17);
      LOBYTE(v16) = v8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v16, 1);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      return;
  }
  std::terminate();
}

void sub_22E939C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56)
  {
    if (atomic_fetch_add_explicit(v56 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v56 + 8))(v56);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::GetInfo(uint64_t a1, char *__s1, uint64_t *a3, int a4, void *a5)
{
  if (a4 == 3)
  {
    if (strcmp(__s1, "group_ptr"))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown uint32 field name: ", 27);
      size_t v20 = strlen(__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__s1, v20);
      uint64_t v21 = (dmlc::LogMessageFatal *)&v27;
      goto LABEL_25;
    }
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56) - v10;
    *a3 = v11 >> 2;
    if (v11) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    if (a4 != 1)
    {
      uint64_t v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unknown data type for getting meta info.", 40);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      return;
    }
    if (!strcmp(__s1, "label"))
    {
      char v9 = (uint64_t **)(a1 + 24);
    }
    else if (!strcmp(__s1, "weight"))
    {
      char v9 = (uint64_t **)(a1 + 72);
    }
    else if (!strcmp(__s1, "base_margin"))
    {
      char v9 = (uint64_t **)(a1 + 80);
    }
    else if (!strcmp(__s1, "label_lower_bound"))
    {
      char v9 = (uint64_t **)(a1 + 104);
    }
    else if (!strcmp(__s1, "label_upper_bound"))
    {
      char v9 = (uint64_t **)(a1 + 112);
    }
    else
    {
      if (strcmp(__s1, "feature_weights"))
      {
        while (1)
        {
          int v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
          dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          uint64_t v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
          std::mutex v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unknown float field name: ", 26);
          size_t v25 = strlen(__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)__s1, v25);
          uint64_t v21 = (dmlc::LogMessageFatal *)&v28;
LABEL_25:
          dmlc::LogMessageFatal::~LogMessageFatal(v21);
          __break(1u);
        }
      }
      char v9 = (uint64_t **)(a1 + 176);
    }
    uint64_t v15 = *v9;
    uint64_t v12 = **v9;
    uint64_t v16 = v15[1] - v12;
    *a3 = v16 >> 2;
    if (!v16) {
      uint64_t v12 = 0;
    }
  }
  *a5 = v12;
}

void sub_22E93A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::MetaInfo::SetFeatureInfo(xgboost::MetaInfo *this, const char *__s1, char **a3, unint64_t a4)
{
  unint64_t v19 = a4;
  if (a4)
  {
    uint64_t v7 = *((void *)this + 1);
    if (v7)
    {
      if (v7 != a4) {
        dmlc::LogCheckFormat<unsigned long long,unsigned long long>();
      }
    }
  }
  if (!strcmp(__s1, "feature_type"))
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 15);
    uint64_t v12 = (unint64_t *)*((void *)this + 21);
    if (v19)
    {
      unint64_t v13 = 0;
      uint64_t v14 = (void *)*((void *)this + 16);
      do
      {
        uint64_t v15 = a3[v13];
        uint64_t v18 = v15;
        if ((unint64_t)v14 >= *((void *)this + 17))
        {
          uint64_t v14 = (void *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)this + 15, &v18);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v14, v15);
          v14 += 3;
          *((void *)this + 16) = v14;
        }
        *((void *)this + 16) = v14;
        ++v13;
      }
      while (v13 < v19);
    }
    xgboost::LoadFeatureType((unsigned __int8 ***)this + 15, v12);
  }
  else if (!strcmp(__s1, "feature_name"))
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 18);
    if (v19)
    {
      unint64_t v16 = 0;
      uint64_t v17 = (void *)*((void *)this + 19);
      do
      {
        if ((unint64_t)v17 >= *((void *)this + 20))
        {
          uint64_t v17 = (void *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)this + 18, a3);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v17, *a3);
          v17 += 3;
          *((void *)this + 19) = v17;
        }
        *((void *)this + 19) = v17;
        ++v16;
        ++a3;
      }
      while (v16 < v19);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    char v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown feature info name: ", 27);
    size_t v11 = strlen(__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__s1, v11);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
}

void sub_22E93A40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::GetFeatureInfo(void *a1, char *__s1, std::vector<std::string> *a3)
{
  if (!strcmp(__s1, "feature_type"))
  {
    std::vector<std::string>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[16] - a1[15]) >> 3));
    uint64_t v10 = (std::string *)a1[15];
    size_t v11 = (std::string *)a1[16];
  }
  else
  {
    if (strcmp(__s1, "feature_name"))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown feature info: ", 22);
      size_t v9 = strlen(__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__s1, v9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
      return;
    }
    std::vector<std::string>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[19] - a1[18]) >> 3));
    uint64_t v10 = (std::string *)a1[18];
    size_t v11 = (std::string *)a1[19];
  }
  begin = a3->__begin_;

  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,0>(v10, v11, begin);
}

void sub_22E93A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::string>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

void xgboost::MetaInfo::Extend(xgboost::MetaInfo *this, const xgboost::MetaInfo *a2, int a3, int a4)
{
  if (a3) {
    *(void *)this += *(void *)a2;
  }
  BOOL v5 = (unint64_t *)((char *)this + 8);
  unint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    if (a4)
    {
      if (v6 != *((void *)a2 + 1)) {
        dmlc::LogCheckFormat<unsigned long long,unsigned long long>();
      }
    }
    else
    {
      if (v6 <= *((void *)a2 + 1)) {
        unint64_t v6 = *((void *)a2 + 1);
      }
      *BOOL v5 = v6;
    }
  }
  *((void *)this + 1) = *((void *)a2 + 1);
  xgboost::linalg::Stack<float,2>((uint64_t)this + 24, (uint64_t)a2 + 24);
}

void sub_22E93A9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v15 = (uint64_t)__p;
  __p = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::linalg::Stack<float,2>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v3 != v5) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
  else
  {
    *unint64_t v2 = *(void *)(a2 + 16);
  }
  xgboost::HostDeviceVector<float>::Extend();
}

void sub_22E93AC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::MetaInfo::Validate(xgboost::MetaInfo *this)
{
  uint64_t result = *((void *)this + 7);
  uint64_t v3 = result - *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(void *)(*((void *)this + 9) + 8) - **((void **)this + 9);
    if (v4)
    {
      if (v3 >> 2 != (v4 >> 2) + 1) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      return result;
    }
    int v5 = *(_DWORD *)(result - 4);
    result -= 4;
    if (*(void *)this != v5) {
      dmlc::LogCheckFormat<unsigned int,unsigned long long>();
    }
  }
  uint64_t v6 = *(void *)(*((void *)this + 9) + 8) - **((void **)this + 9);
  if (v6)
  {
    if (v6 >> 2 != *(void *)this) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
  }
  else if (*(void *)(*((void *)this + 3) + 8) == **((void **)this + 3))
  {
    uint64_t v7 = *(void *)(*((void *)this + 13) + 8) - **((void **)this + 13);
    if (v7)
    {
      if (v7 >> 2 != *(void *)this) {
        dmlc::LogCheckFormat<unsigned long,unsigned long long>();
      }
    }
    else
    {
      uint64_t v8 = *(void *)(*((void *)this + 22) + 8) - **((void **)this + 22);
      if (v8 && v8 >> 2 != *((void *)this + 1)) {
        dmlc::LogCheckFormat<unsigned long,unsigned long long>();
      }
      uint64_t v9 = *(void *)(*((void *)this + 14) + 8) - **((void **)this + 14);
      if (v9)
      {
        if (v9 >> 2 != *(void *)this) {
          dmlc::LogCheckFormat<unsigned long,unsigned long long>();
        }
      }
      else
      {
        uint64_t result = (uint64_t)this + 16;
        if (*((void *)this + 2) > *(void *)this * *((void *)this + 1)) {
          dmlc::LogCheckFormat<unsigned long long,unsigned long long>();
        }
        uint64_t v10 = *(void *)(*((void *)this + 10) + 8) - **((void **)this + 10);
        if (v10 && (unint64_t)(v10 >> 2) % *(void *)this) {
          dmlc::LogCheckFormat<unsigned long long,int>();
        }
      }
    }
  }
  else if (*((void *)this + 4) != *(void *)this)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  return result;
}

void sub_22E93B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::DMatrix::GetThreadLocal(xgboost::DMatrix *this)
{
  uint64_t v3 = (void *)(dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get() + 8);
  unint64_t v2 = (void *)*v3;
  if (!*v3)
  {
LABEL_7:
    uint64_t v6 = (char *)operator new(0xF0uLL);
    uint64_t v8 = v6;
    uint64_t v9 = v3;
    char v10 = 0;
    *((void *)v6 + 4) = this;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *((void *)v6 + 29) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v6 + 40));
  }
  while (1)
  {
    while (1)
    {
      uint64_t v4 = v2;
      unint64_t v5 = v2[4];
      if (v5 <= (unint64_t)this) {
        break;
      }
      unint64_t v2 = (void *)*v4;
      if (!*v4) {
        goto LABEL_7;
      }
    }
    if (v5 >= (unint64_t)this) {
      return v4 + 5;
    }
    unint64_t v2 = (void *)v4[1];
    if (!v2) {
      goto LABEL_7;
    }
  }
}

void sub_22E93B5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get()
{
  {
    unint64_t v2 = (void *)dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *unint64_t v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
}

void xgboost::DMatrix::~DMatrix(xgboost::DMatrix *this)
{
  *(void *)this = &unk_26E249530;
  uint64_t v2 = dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  uint64_t v3 = *(void **)(v2 + 8);
  if (v3)
  {
    uint64_t v4 = v2 + 8;
    do
    {
      unint64_t v5 = v3[4];
      BOOL v6 = v5 >= (unint64_t)this;
      if (v5 >= (unint64_t)this) {
        uint64_t v7 = v3;
      }
      else {
        uint64_t v7 = v3 + 1;
      }
      if (v6) {
        uint64_t v4 = (uint64_t)v3;
      }
      uint64_t v3 = (void *)*v7;
    }
    while (*v7);
    if (v4 != v2 + 8 && *(void *)(v4 + 32) <= (unint64_t)this)
    {
      uint64_t v8 = this;
      std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__erase_unique<xgboost::DMatrix const*>(v2, (unint64_t *)&v8);
    }
  }
}

uint64_t xgboost::TryLoadBinary(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  uint64_t v1 = dmlc::Stream::Create((dmlc::Stream *)a1, "r", (const char *)1);
  if (v1)
  {
    uint64_t v2 = v1;
    int __dst = 0;
    v4[0] = &unk_26E248A20;
    v4[1] = v1;
    long long v5 = 0u;
    long long v6 = 0u;
    if (xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v4, &__dst, 4uLL) == 4
      && __dst == -21759)
    {
      operator new();
    }
    v4[0] = &unk_26E248A20;
    if (SHIBYTE(v6) < 0) {
      operator delete(*((void **)&v5 + 1));
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return 0;
}

void sub_22E93B944(_Unwind_Exception *a1)
{
  *(void *)(v3 - 104) = v2;
  if (*(char *)(v3 - 57) < 0) {
    operator delete(*(void **)(v3 - 80));
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Load(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  memset(&v65, 0, sizeof(v65));
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v7 = std::string::find((const std::string *)a1, 35, 0);
  if (v7 == -1)
  {
    uint64_t v37 = std::string::operator=(&v65, (const std::string *)a1);
  }
  else
  {
    std::string::size_type v8 = v7;
    if (*(char *)(a1 + 23) >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 8);
    }
    std::string::basic_string((std::string *)v69, (const std::string *)a1, v7 + 1, v9, (std::allocator<char> *)&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)v69;
    std::string::basic_string((std::string *)v69, (const std::string *)a1, 0, v8, (std::allocator<char> *)&v67);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    std::string v65 = *(std::string *)v69;
    *(void *)&long long v67 = std::string::find(&__p, 35, 0);
    if ((void)v67 != -1) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    if (!a3)
    {
LABEL_51:
      unint64_t v42 = getenv("XGBOOST_TEST_NPART");
      uint64_t v39 = v42;
      if (v42)
      {
        if (*v42)
        {
          LODWORD(v63.__r_.__value_.__l.__data_) = 0;
          v69[8] = 0;
          *(_OWORD *)&v69[16] = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          __int16 v75 = 0;
          *(void *)uint64_t v69 = &unk_26E245D60;
          v76[8] = 0;
          uint64_t v77 = &v78;
          long long v78 = 0uLL;
          *((void *)&v79 + 1) = 0;
          *(void *)&long long v80 = 0;
          *(void *)&long long v79 = (char *)&v79 + 8;
          std::string::basic_string[abi:ne180100]<0>(&__str, "XGBOOST_TEST_NPART");
          std::string::operator=((std::string *)&v69[24], &__str);
          uint64_t v43 = BYTE7(v72);
          if (SBYTE7(v72) < 0) {
            uint64_t v43 = *((void *)&v71 + 1);
          }
          if (!v43)
          {
            std::string::basic_string[abi:ne180100]<0>(&v67, "int");
            if (SBYTE7(v72) < 0) {
              operator delete((void *)v71);
            }
            long long v71 = v67;
            *(void *)&long long v72 = v68;
          }
          uint64_t v74 = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v67, v39);
          dmlc::parameter::FieldEntry<int>::Set((uint64_t)v69, (uint64_t)&v63, (uint64_t)&v67);
          if (SHIBYTE(v68) < 0) {
            operator delete((void *)v67);
          }
          uint64_t data_low = LODWORD(v63.__r_.__value_.__l.__data_);
          *(void *)uint64_t v69 = &unk_26E245D60;
          std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v79, *((char **)&v79 + 1));
          std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)&v77, (char *)v78);
          dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)v69);
          uint64_t v39 = 0;
          goto LABEL_64;
        }
        uint64_t v39 = 0;
      }
      char v44 = 1;
      uint64_t data_low = 1;
      goto LABEL_69;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v69);
    int v58 = a3;
    xgboost::common::Split(&__p, 0x3Au, (uint64_t *)&v67);
    uint64_t v10 = v67;
    if (*((void *)&v67 + 1) != (void)v67)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        std::string::size_type v13 = std::string::rfind((const std::string *)(v10 + v11), 46, 0xFFFFFFFFFFFFFFFFLL);
        if (v13 == -1)
        {
          int v26 = *(char *)(v67 + v11 + 23);
          if (v26 >= 0) {
            uint64_t v27 = v67 + v11;
          }
          else {
            uint64_t v27 = *(void *)(v67 + v11);
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(v67 + v11 + 23);
          }
          else {
            uint64_t v28 = *(void *)(v67 + v11 + 8);
          }
          uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v27, v28);
          float v30 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".r", 2);
          Engine = rabit::engine::GetEngine(v30);
          (*(void (**)(void *))(*(void *)Engine + 64))(Engine);
          unint64_t v32 = (void *)std::ostream::operator<<();
          unint64_t v33 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-", 1);
          int8x8_t v34 = rabit::engine::GetEngine(v33);
          (*(void (**)(void *))(*(void *)v34 + 72))(v34);
          std::ostream::operator<<();
        }
        else
        {
          std::string::size_type v14 = v13;
          std::string::basic_string(&__str, (const std::string *)(v67 + v11), 0, v13, (std::allocator<char> *)&v63);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)p_str, size);
          uint64_t v18 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)".r", 2);
          unint64_t v19 = rabit::engine::GetEngine(v18);
          (*(void (**)(void *))(*(void *)v19 + 64))(v19);
          size_t v20 = (void *)std::ostream::operator<<();
          uint64_t v21 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-", 1);
          int v22 = rabit::engine::GetEngine(v21);
          (*(void (**)(void *))(*(void *)v22 + 72))(v22);
          uint64_t v23 = (void *)std::ostream::operator<<();
          std::mutex v24 = (const std::string *)(v67 + v11);
          if (*(char *)(v67 + v11 + 23) < 0) {
            std::string::size_type v25 = v24->__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type v25 = *(unsigned __int8 *)(v67 + v11 + 23);
          }
          std::string::basic_string(&v63, v24, v14, v25, (std::allocator<char> *)v59);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v35 = &v63;
          }
          else {
            uint64_t v35 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v36 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v36 = v63.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v35, v36);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        if (++v12 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v67 + 1) - v67) >> 3)) {
          break;
        }
        v63.__r_.__value_.__s.__data_[0] = 58;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)&v63, 1);
        uint64_t v10 = v67;
        v11 += 24;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v67 + 1) - v67) >> 3));
    }
    std::stringbuf::str();
    a3 = v58;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    *(void *)uint64_t v69 = *MEMORY[0x263F8C2C8];
    *(void *)&v69[*(void *)(*(void *)v69 - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
    *(void *)&v69[8] = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v73) < 0) {
      operator delete(*((void **)&v72 + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    uint64_t v37 = (std::string *)MEMORY[0x230FA8020](v76);
  }
  if (!a3) {
    goto LABEL_51;
  }
  unint64_t v38 = rabit::engine::GetEngine((rabit::engine *)v37);
  uint64_t v39 = (char *)(*(uint64_t (**)(void *))(*(void *)v38 + 64))(v38);
  float v40 = rabit::engine::GetEngine((rabit::engine *)v39);
  uint64_t data_low = (*(uint64_t (**)(void *))(*(void *)v40 + 72))(v40);
LABEL_64:
  if (data_low == 1)
  {
    char v44 = 1;
  }
  else
  {
    xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v69);
    int v83 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Load part of data ", 18);
    uint64_t v45 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" of ", 4);
    uint64_t v46 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" parts", 6);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v69);
    char v44 = 0;
  }
LABEL_69:
  int v47 = *(char *)(a4 + 23);
  if (v47 < 0)
  {
    if (*(void *)(a4 + 8) != 4) {
      goto LABEL_84;
    }
    long long v48 = *(const std::string::value_type **)a4;
  }
  else
  {
    long long v48 = (const std::string::value_type *)a4;
    if (v47 != 4) {
      goto LABEL_84;
    }
  }
  char v49 = v44 ^ 1;
  if (*(_DWORD *)v48 != 1869903201) {
    char v49 = 1;
  }
  if (v49)
  {
LABEL_84:
    std::string::size_type v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v52 = __p.__r_.__value_.__l.__size_;
    }
    if (v52)
    {
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v61, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
      }
      else {
        std::string v61 = v65;
      }
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v60 = *(std::string *)a4;
      }
      *(std::string *)uint64_t v69 = v61;
      memset(&v61, 0, sizeof(v61));
      *(_DWORD *)&v69[24] = v39;
      *(_DWORD *)&v69[28] = data_low;
      long long v70 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
      std::string::size_type v56 = v60.__r_.__value_.__r.__words[2];
      memset(&v60, 0, sizeof(v60));
      *(void *)&long long v71 = v56;
      *(void *)&long long v72 = 0;
      uint64_t v82 = 0;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      XGProxyDMatrixCreate();
    }
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v53 = &v65;
    }
    else {
      int v53 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a4 + 23) >= 0) {
      long long v54 = (char *)a4;
    }
    else {
      long long v54 = *(char **)a4;
    }
    dmlc::data::CreateParser_<unsigned int,float>((char *)v53, (uint64_t)v39, data_low, v54);
    *(void *)&long long v67 = v55;
    *(void *)uint64_t v69 = &unk_26E249668;
    *(_OWORD *)&v69[8] = 0uLL;
    *(void *)&v69[24] = v55;
    xgboost::DMatrix::Create<xgboost::data::FileAdapter>();
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = v65;
  }
  uint64_t Binary = xgboost::TryLoadBinary((char *)&v62);
  uint64_t v51 = Binary;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if (!v51) {
      goto LABEL_84;
    }
  }
  else if (!Binary)
  {
    goto LABEL_84;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  return v51;
}

void sub_22E93CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t __str, uint64_t __str_8, uint64_t __str_16, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

void xgboost::data::FileAdapter::~FileAdapter(xgboost::data::FileAdapter *this)
{
  *(void *)this = &unk_26E249668;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x230FA80D0](v2, 0x1060C40C2E02434);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E249668;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x230FA80D0](v2, 0x1060C40C2E02434);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::fileiter::Reset(xgboost::data::fileiter *this, void *a2)
{
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5)) {
      goto LABEL_5;
    }
  }
  else if (*((unsigned char *)this + 55))
  {
    goto LABEL_5;
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/file_iterator.h");
  std::string::size_type v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: !type_.empty()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
LABEL_5:
  uint64_t v3 = (char *)this;
  if (*((char *)this + 23) < 0) {
    uint64_t v3 = *(char **)this;
  }
  uint64_t v4 = (char *)this + 32;
  if (*((char *)this + 55) < 0) {
    uint64_t v4 = *(char **)v4;
  }
  dmlc::data::CreateParser_<unsigned int,float>(v3, *((unsigned int *)this + 6), *((unsigned int *)this + 7), v4);
  return std::unique_ptr<dmlc::Parser<unsigned int,float>>::reset[abi:ne180100]((uint64_t *)this + 8, v5);
}

void sub_22E93D310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::fileiter::Next(xgboost::data::fileiter *this, void *a2)
{
  v24[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 8);
  if (!v3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/file_iterator.h");
    uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: parser_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v17);
    uint64_t v3 = *((void *)this + 8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, a2);
  if (result)
  {
    uint64_t v5 = (long long *)(*(uint64_t (**)(void))(**((void **)this + 8) + 32))(*((void *)this + 8));
    long long v6 = *v5;
    long long v7 = v5[1];
    long long v8 = v5[2];
    *(_OWORD *)((char *)this + 120) = v5[3];
    *(_OWORD *)((char *)this + 104) = v8;
    *(_OWORD *)((char *)this + 88) = v7;
    *(_OWORD *)((char *)this + 72) = v6;
    uint64_t v9 = *((void *)this + 9);
    uint64_t v10 = *((void *)this + 10);
    BOOL v11 = __CFADD__(v9, 1);
    uint64_t v12 = v9 + 1;
    char v13 = v11;
    if (!v10 && (v13 & 1) == 0) {
      std::terminate();
    }
    v17[2] = v12;
    v17[3] = v10;
    int v18 = -1;
    v17[0] = 1;
    v17[1] = v12;
    v17[4] = v10;
    v17[5] = v12;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    uint64_t v22 = 0x300000000;
    v24[0] = 0;
    v24[1] = 0;
    uint64_t v21 = &unk_26E24E128;
    uint64_t v23 = v24;
    operator new();
  }
  return result;
}

void sub_22E93DE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL xgboost::MetaTryLoadFloatInfo(char *a1, char **a2)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  uint64_t v3 = dmlc::Stream::Create((dmlc::Stream *)a1, "r", (const char *)1);
  if (v3)
  {
    dmlc::istream::istream((uint64_t)v18, v3, 0x400uLL);
    a2[1] = *a2;
    int v17 = 0;
    while (1)
    {
      uint64_t v4 = (void *)MEMORY[0x230FA7C70](v18, &v17);
      if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
        break;
      }
      uint64_t v6 = a2[1];
      unint64_t v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        int v8 = *a2;
        uint64_t v9 = (v6 - *a2) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v5 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v12);
          int v8 = *a2;
          uint64_t v6 = a2[1];
        }
        else
        {
          BOOL v13 = 0;
        }
        BOOL v14 = &v13[4 * v9];
        *(_DWORD *)BOOL v14 = v17;
        int v7 = v14 + 4;
        while (v6 != v8)
        {
          int v15 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v6 = v17;
        int v7 = v6 + 4;
      }
      a2[1] = v7;
    }
    MEMORY[0x230FA8020](&v19);
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return v3 != 0;
}

void sub_22E93E334(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void xgboost::SparsePage::GetTranspose(xgboost::SparsePage *a1@<X8>)
{
}

void sub_22E93E8D4()
{
}

void sub_22E93E8E0()
{
}

void sub_22E93E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20)
{
  uint64_t v20 = a20;
  a20 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v20);
  }
  a19 = a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a19);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector();
}

void sub_22E93E904()
{
}

void sub_22E93E910(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::mutex::~mutex(v20);
  std::exception_ptr::~exception_ptr(&a20);
  a19 = a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector();
}

void sub_22E93E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  uint64_t v20 = a20;
  a20 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  }
  JUMPOUT(0x22E93E98CLL);
}

void sub_22E93E940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  uint64_t v20 = a20;
  a20 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  }
  JUMPOUT(0x22E93E98CLL);
}

void sub_22E93E954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E93E960);
}

void sub_22E93E978(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E93E9B0);
}

BOOL xgboost::SparsePage::IsIndicesSorted(uint64_t **this, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v5 = (uint64_t **)*this;
  uint64_t v4 = this[1];
  __x[0] = 0;
  std::vector<int>::vector(&v28, a2, __x);
  uint64_t v6 = **this;
  uint64_t v7 = (*this)[1];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) >> 3) - 1;
  }
  int v29 = 1;
  int v30 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  *(void *)__x = 0;
  v32.__m_.__sig = 850045863;
  memset(v32.__m_.__opaque, 0, sizeof(v32.__m_.__opaque));
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *v5;
    uint64_t v11 = *v4;
    std::vector<int>::pointer begin = v28.__begin_;
    int v13 = *v28.__begin_;
    uint64_t v14 = **v5;
    do
    {
      uint64_t v15 = v10[++v9];
      if (v14 != v15)
      {
        int v17 = (unsigned int *)(v11 + 8 * v14);
        uint64_t v18 = 8 * v15 - 8 * v14 - 8;
        while (v18)
        {
          unint64_t v16 = v17 + 2;
          unsigned int v19 = v17[2];
          unsigned int v20 = *v17;
          v18 -= 8;
          v17 += 2;
          if (v19 < v20) {
            goto LABEL_12;
          }
        }
      }
      unint64_t v16 = (_DWORD *)(v11 + 8 * v15);
LABEL_12:
      if (v16 == (_DWORD *)(v11 + 8 * v15)) {
        ++v13;
      }
      std::string *begin = v13;
      uint64_t v14 = v15;
    }
    while (v9 != v8);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(&v32);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v28.__begin_ == v28.__end_)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = v28.__begin_;
    do
    {
      uint64_t v23 = *v22++;
      v21 += v23;
    }
    while (v22 != v28.__end_);
  }
  uint64_t v25 = **this;
  uint64_t v24 = (*this)[1];
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
  uint64_t v26 = ((v24 - v25) >> 3) - 1;
  if (v24 == v25) {
    uint64_t v26 = 0;
  }
  return v21 == v26;
}

void sub_22E93EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, char a13, std::exception_ptr a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E93EC8C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E93EC84);
}

void xgboost::SparsePage::SortIndices(uint64_t **this, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  uint64_t v5 = **this;
  uint64_t v4 = (*this)[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) >> 3) - 1;
  }
  LODWORD(v15) = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v16.__ptr_ = 0;
  v17.__m_.__sig = 850045863;
  memset(v17.__m_.__opaque, 0, sizeof(v17.__m_.__opaque));
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = (uint64_t *)(*v2 + 8 * i);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      uint64_t v11 = *v3 + 8 * v10;
      unint64_t v12 = (uint64_t *)(*v3 + 8 * v9);
      uint64_t v15 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::Entry::CmpIndex;
      unint64_t v13 = 126 - 2 * __clz(((uint64_t)v12 - v11) >> 3);
      if (v9 == v10) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v13;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v11, v12, &v15, v14, 1);
    }
  }
  dmlc::OMPException::Rethrow(&v16);
  std::mutex::~mutex(&v17);
  std::exception_ptr::~exception_ptr(&v16);
}

void sub_22E93EEEC(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_22E93EF34(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E93EF40);
}

void xgboost::SparsePage::SortRows(uint64_t **this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  std::exception_ptr v3 = this[1];
  uint64_t v5 = **this;
  uint64_t v4 = (*this)[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) >> 3) - 1;
  }
  LODWORD(v13) = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v14.__ptr_ = 0;
  v15.__m_.__sig = 850045863;
  memset(v15.__m_.__opaque, 0, sizeof(v15.__m_.__opaque));
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = (unint64_t *)(*v2 + 8 * i);
      unint64_t v9 = *v8;
      unint64_t v10 = v8[1];
      if (v9 < v10)
      {
        uint64_t v11 = *v3 + 8 * v9;
        unint64_t v12 = (uint64_t *)(*v3 + 8 * v10);
        unint64_t v13 = xgboost::Entry::CmpValue;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v11, v12, (uint64_t (**)(uint64_t *, uint64_t *))&v13, 126 - 2 * __clz(((uint64_t)v12 - v11) >> 3), 1);
      }
    }
  }
  dmlc::OMPException::Rethrow(&v14);
  std::mutex::~mutex(&v15);
  std::exception_ptr::~exception_ptr(&v14);
}

void sub_22E93F1C0(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_22E93F208(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E93F214);
}

void xgboost::SparsePage::Push(uint64_t **this, uint64_t **a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = this[1];
  uint64_t v6 = *a2;
  uint64_t v7 = (const void **)a2[1];
  uint64_t v8 = *(void *)((*this)[1] - 8);
  std::vector<xgboost::Entry>::resize((uint64_t)v5, v8 + (((unsigned char *)v7[1] - (unsigned char *)*v7) >> 3));
  uint64_t v9 = *v5;
  BOOL v10 = v5[1] == *v5 || v9 == 0;
  if (!v10)
  {
    uint64_t v11 = *v7;
    if (v7[1] != *v7 && v11 != 0) {
      memcpy((void *)(v9 + 8 * v8), v11, a2[1][1] - *a2[1]);
    }
  }
  uint64_t v13 = **a2;
  uint64_t v14 = (*a2)[1];
  uint64_t v15 = ((v14 - v13) >> 3) - 1;
  BOOL v10 = v14 == v13;
  uint64_t v16 = **this;
  uint64_t v17 = (*this)[1];
  if (v10) {
    uint64_t v15 = 0;
  }
  uint64_t v18 = v17 - v16;
  std::vector<unsigned long>::resize((uint64_t)v4, v15 + ((v17 - v16) >> 3));
  uint64_t v20 = **a2;
  uint64_t v19 = (*a2)[1];
  if (v19 != v20)
  {
    unint64_t v21 = ((v19 - v20) >> 3) - 1;
    if ((v19 - v20) >> 3 != 1)
    {
      unint64_t v22 = 0;
      uint64_t v23 = *v4 + 8 * (v18 >> 3);
      uint64_t v24 = *v6 + 8;
      do
      {
        *(void *)(v23 + 8 * v22) = *(void *)(v24 + 8 * v22) + v8;
        ++v22;
      }
      while (v21 > v22);
    }
  }
}

void std::vector<xgboost::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<xgboost::Entry>::__append((void **)a1, a2 - v2);
  }
}

void xgboost::SparsePage::PushCSC(xgboost::SparsePage *this, char ***a2)
{
  unint64_t v2 = *(char **)this;
  std::exception_ptr v3 = *a2;
  uint64_t v4 = (void **)a2[1];
  uint64_t v6 = (char *)*v4;
  uint64_t v5 = v4[1];
  if (*v4 != v5)
  {
    uint64_t v7 = (void **)*((void *)this + 1);
    uint64_t v8 = (char *)*v7;
    if (*v7 != v7[1])
    {
      __p[0] = (void *)((uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3);
      unint64_t v44 = (v3[1] - *v3) >> 3;
      if (__p[0] != (void *)v44) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      std::vector<unsigned long>::vector(v42, (v3[1] - *v3) >> 3);
      *(void *)v42[0] = 0;
      std::vector<xgboost::Entry>::vector(__p, (((unsigned char *)v4[1] - (unsigned char *)*v4) >> 3) + (((unsigned char *)v7[1] - (unsigned char *)*v7) >> 3));
      uint64_t v9 = (v3[1] - *v3) >> 3;
      unint64_t v44 = 0;
      unint64_t v39 = 1;
      uint64_t v10 = v9 - 1;
      if (v9 != 1)
      {
        unint64_t v11 = 0;
        do
        {
          unint64_t v12 = *(void **)v2;
          unint64_t v13 = (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3;
          if (v13 <= v11) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v14 = v11 + 1;
          if (v13 <= v11 + 1) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v15 = v12[v11];
          if (v44 > ((char *)__p[1] - (char *)__p[0]) >> 3) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          uint64_t v16 = v12[v11 + 1] - v15;
          if (__p[1] == __p[0]) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = (char *)__p[0];
          }
          uint64_t v18 = &v17[8 * v44];
          if (v7[1] == *v7) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = (char *)*v7;
          }
          memcpy(v18, &v19[8 * v15], 8 * v16);
          unint64_t v20 = v44 + v16;
          v44 += v16;
          unint64_t v21 = *v3;
          unint64_t v22 = (v3[1] - *v3) >> 3;
          if (v22 <= v11) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          if (v22 <= v14) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v23 = *(void *)&v21[8 * v11];
          uint64_t v24 = *(void *)&v21[8 * v11 + 8];
          if (v20 > ((char *)__p[1] - (char *)__p[0]) >> 3) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          uint64_t v25 = v24 - v23;
          if (__p[1] == __p[0]) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = (char *)__p[0];
          }
          uint64_t v27 = &v26[8 * v44];
          if (v4[1] == *v4) {
            std::vector<int> v28 = 0;
          }
          else {
            std::vector<int> v28 = (char *)*v4;
          }
          memcpy(v27, &v28[8 * v23], 8 * v25);
          v44 += v25;
          if (v39 >= ((char *)v42[1] - (char *)v42[0]) >> 3) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          *((void *)v42[0] + v39++) = v44;
          unint64_t v11 = v14;
        }
        while (v14 != v10);
      }
      int v29 = *v7;
      if (*v7)
      {
        v7[1] = v29;
        operator delete(v29);
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
      v7[2] = v41;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v41 = 0;
      int v30 = *(void **)v2;
      if (*(void *)v2)
      {
        *((void *)v2 + 1) = v30;
        operator delete(v30);
        *(void *)unint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        *((void *)v2 + 2) = 0;
        int v30 = __p[0];
      }
      *(_OWORD *)unint64_t v2 = *(_OWORD *)v42;
      *((void *)v2 + 2) = v43;
      v42[0] = 0;
      v42[1] = 0;
      uint64_t v43 = 0;
      if (v30)
      {
        __p[1] = v30;
        operator delete(v30);
        if (v42[0])
        {
          v42[1] = v42[0];
          operator delete(v42[0]);
        }
      }
      return;
    }
    if (v7 != v4)
    {
      size_t v31 = v5 - v6;
      unint64_t v32 = (v5 - v6) >> 3;
      uint64_t v33 = (uint64_t)v7[2];
      if (v32 > (v33 - (uint64_t)v8) >> 3)
      {
        if (v8)
        {
          v7[1] = v8;
          operator delete(v8);
          uint64_t v33 = 0;
          *uint64_t v7 = 0;
          v7[1] = 0;
          v7[2] = 0;
        }
        if ((v31 & 0x8000000000000000) != 0) {
          std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= v32) {
          uint64_t v34 = v32;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        std::vector<xgboost::Json>::__vallocate[abi:ne180100](v7, v35);
        uint64_t v8 = (char *)v7[1];
      }
      memmove(v8, v6, v31);
      v7[1] = &v8[8 * v32];
    }
  }
  if (v2 != (char *)v3)
  {
    std::string::size_type v36 = *v3;
    uint64_t v37 = (uint64_t)v3[1];
    unint64_t v38 = (v37 - (uint64_t)*v3) >> 3;
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v2, v36, v37, v38);
  }
}

void sub_22E93FA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19 = (uint64_t)__p;
  std::string __p = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Info(xgboost::data::IterativeDeviceDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Ctx(xgboost::data::IterativeDeviceDMatrix *this)
{
  return (uint64_t)this + 216;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::SingleColBlock(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 0;
}

void xgboost::data::IterativeDeviceDMatrix::~IterativeDeviceDMatrix(xgboost::data::IterativeDeviceDMatrix *this)
{
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_26E2495C0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::IterativeDeviceDMatrix *)((char *)this + 8));
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Slice()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for Device DMatrix.", 52);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E93FBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::IterativeDeviceDMatrix::GetRowBatches(xgboost::data::IterativeDeviceDMatrix *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  unint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v3, 0);
}

void sub_22E93FC60(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::IterativeDeviceDMatrix::GetColumnBatches(xgboost::data::IterativeDeviceDMatrix *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  unint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v3, 0);
}

void sub_22E93FCEC(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::IterativeDeviceDMatrix::GetSortedColumnBatches(xgboost::data::IterativeDeviceDMatrix *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  unint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v3, 0);
}

void sub_22E93FD78(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::IterativeDeviceDMatrix::GetEllpackBatches()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
  operator new();
}

void sub_22E93FE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void xgboost::data::IterativeDeviceDMatrix::GetGradientIndex()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v2, 0);
}

void sub_22E93FF04(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::IterativeDeviceDMatrix::EllpackExists(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 1;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::SparsePageExists(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 0;
}

void *xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E2496D8;
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E2496D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/simple_batch_iterator.h");
    char v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_22E9400C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::operator++(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::AtEnd(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

float xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, void *a2, float a3)
{
  switch(*(unsigned char *)(a1 + 65))
  {
    case 0:
      return *(float *)(*(void *)(a1 + 48) + 4 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
    case 1:
    case 2:
      return *(double *)(*(void *)(a1 + 48) + 8
                                              * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
    case 3:
      return (float)*(char *)(*(void *)(a1 + 48) + *(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]);
    case 4:
      return (float)*(__int16 *)(*(void *)(a1 + 48)
                               + 2 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
    case 5:
      return (float)*(int *)(*(void *)(a1 + 48)
                           + 4 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
    case 6:
      return (float)*(uint64_t *)(*(void *)(a1 + 48)
                               + 8 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
    case 7:
      LOBYTE(a3) = *(unsigned char *)(*(void *)(a1 + 48) + *(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]);
      goto LABEL_12;
    case 8:
      LOWORD(a3) = *(_WORD *)(*(void *)(a1 + 48)
                            + 2 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
      goto LABEL_12;
    case 9:
      a3 = *(float *)(*(void *)(a1 + 48) + 4 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
LABEL_12:
      float result = (float)LODWORD(a3);
      break;
    case 0xA:
      float result = (float)*(unint64_t *)(*(void *)(a1 + 48)
                                          + 8 * (*(void *)(*a2 + 16) * a2[1] + *(void *)(*a2 + 24) * a2[2]));
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

unint64_t xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(unsigned char *)(a1 + 49))
  {
    case 0:
      unint64_t result = (unint64_t)*(float *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
      break;
    case 1:
    case 2:
      unint64_t result = (unint64_t)*(double *)(*(void *)(a1 + 32) + 8 * *(void *)(a2 + 16) * a3);
      break;
    case 3:
      unint64_t result = *(char *)(*(void *)(a1 + 32) + *(void *)(a2 + 16) * a3);
      break;
    case 4:
      unint64_t result = *(__int16 *)(*(void *)(a1 + 32) + 2 * *(void *)(a2 + 16) * a3);
      break;
    case 5:
      unint64_t result = *(int *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
      break;
    case 6:
    case 0xA:
      unint64_t result = *(void *)(*(void *)(a1 + 32) + 8 * *(void *)(a2 + 16) * a3);
      break;
    case 7:
      unint64_t result = *(unsigned __int8 *)(*(void *)(a1 + 32) + *(void *)(a2 + 16) * a3);
      break;
    case 8:
      unint64_t result = *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * *(void *)(a2 + 16) * a3);
      break;
    case 9:
      unint64_t result = *(unsigned int *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long>(unsigned long &&)::{lambda(float const*)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  switch(*(unsigned char *)(a1 + 49))
  {
    case 0:
      return *(float *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
    case 1:
    case 2:
      return *(double *)(*(void *)(a1 + 32) + 8 * *(void *)(a2 + 16) * a3);
    case 3:
      return (float)*(char *)(*(void *)(a1 + 32) + *(void *)(a2 + 16) * a3);
    case 4:
      return (float)*(__int16 *)(*(void *)(a1 + 32) + 2 * *(void *)(a2 + 16) * a3);
    case 5:
      return (float)*(int *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
    case 6:
      return (float)*(uint64_t *)(*(void *)(a1 + 32) + 8 * *(void *)(a2 + 16) * a3);
    case 7:
      LOBYTE(a4) = *(unsigned char *)(*(void *)(a1 + 32) + *(void *)(a2 + 16) * a3);
      goto LABEL_12;
    case 8:
      LOWORD(a4) = *(_WORD *)(*(void *)(a1 + 32) + 2 * *(void *)(a2 + 16) * a3);
      goto LABEL_12;
    case 9:
      a4 = *(float *)(*(void *)(a1 + 32) + 4 * *(void *)(a2 + 16) * a3);
LABEL_12:
      float result = (float)LODWORD(a4);
      break;
    case 0xA:
      float result = (float)*(unint64_t *)(*(void *)(a1 + 32) + 8 * *(void *)(a2 + 16) * a3);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::data::DataTableAdapterBatch::Line::DTGetValue(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      float result = *(float *)(a1 + 4 * a3);
      if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000) {
        return NAN;
      }
      return result;
    case 1:
      float result = NAN;
      if ((*(void *)(a1 + 8 * a3) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
        return *(double *)(a1 + 8 * a3);
      }
      return result;
    case 2:
      float result = 0.0;
      if (*(unsigned char *)(a1 + a3)) {
        return 1.0;
      }
      return result;
    case 3:
      int v4 = *(_DWORD *)(a1 + 4 * a3);
      float result = (float)v4;
      BOOL v5 = v4 == 0x80000000;
      goto LABEL_16;
    case 4:
      int v6 = *(unsigned __int8 *)(a1 + a3);
      float result = (float)(char)v6;
      BOOL v5 = v6 == 128;
      goto LABEL_16;
    case 5:
      int v10 = *(unsigned __int16 *)(a1 + 2 * a3);
      float result = (float)(__int16)v10;
      BOOL v5 = v10 == 0x8000;
      goto LABEL_16;
    case 6:
      uint64_t v11 = *(void *)(a1 + 8 * a3);
      float result = (float)v11;
      BOOL v5 = v11 == 0x8000000000000000;
LABEL_16:
      if (v5) {
        float result = NAN;
      }
      break;
    default:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/adapter.h");
      uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown data table type.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
      float result = 0.0;
      break;
  }
  return result;
}

void sub_22E9406C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::linalg::ArrayInterface<float,1>()
{
  v3[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = 0x300000000;
  v3[0] = 0;
  v3[1] = 0;
  v0 = &unk_26E24E128;
  uint64_t v2 = v3;
  operator new();
}

void sub_22E940ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (atomic_fetch_add_explicit(v30 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v30 + 8))(v30);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::Json>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    std::vector<xgboost::Json>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_22E941350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<xgboost::Json>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::vector<xgboost::Json>::__construct_at_end(uint64_t result, uint64_t a2)
{
  if (a2) {
    operator new();
  }
  *(void *)(result + 8) = *(void *)(result + 8);
  return result;
}

void sub_22E941450(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]()
{
}

uint64_t *std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_22E9414D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      uint64_t v5 = *a2;
      *uint64_t v4 = *a2;
      if (v5) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      }
      ++a2;
      ++v4;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    float result = v5;
    if (v5)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        float result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t xgboost::ArrayInterface<1,true>::ArrayInterface(uint64_t a1, _DWORD **a2)
{
  *(_WORD *)(a1 + 48) = 512;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v3 = *a2;
  int v4 = (*a2)[3];
  if (v4 == 4)
  {
    int v6 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v3);
    if (v6[3] - v6[2] != 8) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    uint64_t v3 = (_DWORD *)**((void **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*a2) + 2);
  }
  else if (v4 != 3)
  {
    return a1;
  }
  uint64_t v7 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v3);
  xgboost::ArrayInterface<1,true>::Initialize(a1, (uint64_t)v7 + 16);
  return a1;
}

void sub_22E9417C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
}

void xgboost::ArrayInterface<1,true>::Initialize(uint64_t a1, uint64_t a2)
{
  xgboost::ArrayInterfaceHandler::Validate(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "typestr");
  int v4 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at(a2, (const void **)&__p);
  uint64_t v5 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  if (v5[39] < 0) {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
  }
  else {
    std::string v21 = *(std::string *)(v5 + 16);
  }
  if (v20 < 0) {
    operator delete(__p);
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = &v21;
  }
  else {
    int v6 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  xgboost::ArrayInterface<1,true>::AssignType(a1, (unsigned __int8 *)v6, size);
  xgboost::ArrayInterfaceHandler::ExtractShape<1>(a2, a1 + 24);
  char v8 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  BOOL v9 = xgboost::ArrayInterfaceHandler::ExtractStride<1>(a2, v8->__r_.__value_.__s.__data_[2] - 48, a1 + 24, (void *)(a1 + 16));
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v9;
  *(void *)(a1 + 32) = xgboost::ArrayInterfaceHandler::ExtractData(a2, v10);
  std::string __p = 0;
  uint64_t v19 = 0;
  unint64_t Mask = xgboost::ArrayInterfaceHandler::ExtractMask(a2, (unint64_t *)&__p);
  unint64_t v17 = Mask;
  uint64_t v12 = v19;
  *(void *)a1 = __p;
  *(void *)(a1 + 8) = v12;
  if (v12 && Mask != *(void *)(a1 + 40)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "stream");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)&__p);
  if (v20 < 0) {
    operator delete(__p);
  }
  if (a2 + 8 != v13)
  {
    unint64_t v14 = *(_DWORD **)(v13 + 56);
    if (v14[3] != 6)
    {
      xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v14);
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
      uint64_t v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_22E941AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E941B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x22E941B24);
  }
  JUMPOUT(0x22E941B28);
}

_UNKNOWN **xgboost::ArrayInterfaceErrors::Dimension(xgboost::ArrayInterfaceErrors *this)
{
  int v1 = (int)this;
  {
    xgboost::ArrayInterfaceErrors::Dimension(int)::str = 0;
    qword_268618258 = 0;
    unk_268618260 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &xgboost::ArrayInterfaceErrors::Dimension(int)::str, &dword_22E895000);
  }
  if (byte_268618267 < 0)
  {
    *(unsigned char *)xgboost::ArrayInterfaceErrors::Dimension(int)::str = 0;
    qword_268618258 = 0;
  }
  else
  {
    LOBYTE(xgboost::ArrayInterfaceErrors::Dimension(int)::str) = 0;
    byte_268618267 = 0;
  }
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, "Only ");
  std::to_string(&v5, v1);
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v2 = &v5;
  }
  else {
    uint64_t v2 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v5.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, (const std::string::value_type *)v2, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, " dimensional array is valid.");
  if (byte_268618267 >= 0) {
    return &xgboost::ArrayInterfaceErrors::Dimension(int)::str;
  }
  else {
    return (_UNKNOWN **)xgboost::ArrayInterfaceErrors::Dimension(int)::str;
  }
}

void sub_22E941C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::ArrayInterfaceHandler::Validate(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  uint64_t v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = a1 + 8;
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    std::string v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (*((uint64_t *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v2 + 56)) + 2) >= 4)
  {
    int v6 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v6, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "typestr");
  uint64_t v8 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3 == v8)
  {
    BOOL v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  uint64_t v11 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*(xgboost::Value **)(v8 + 56));
  if (v11[39] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 2), *((void *)v11 + 3));
  }
  else {
    std::string __p = *(std::string *)(v11 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == 3) {
      goto LABEL_20;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 3) {
      goto LABEL_20;
    }
  }
  if (size != 4)
  {
    uint64_t v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    char v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    std::string v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: typestr.size() == 3 || typestr.size() == 4", 56);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(v23, "shape");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)v23);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v3 == v13)
  {
    unint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "data");
  uint64_t v16 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)v23);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v3 == v16)
  {
    unint64_t v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22E941F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::ArrayInterface<1,true>::AssignType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = a2[1];
  if (a3 == 4 && v4 == 102)
  {
    int v5 = a2[2];
    if (v5 == 49)
    {
      if (a2[3] == 54)
      {
        *(unsigned char *)(a1 + 49) = 2;
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: sizeof(long double) == 16", 39);
        BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"128-bit floating point is not supported on current platform.", 60);
        p_p = (dmlc::LogMessageFatal *)&__p;
LABEL_26:
        dmlc::LogMessageFatal::~LogMessageFatal(p_p);
        return;
      }
LABEL_17:
      uint64_t v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      xgboost::ArrayInterfaceErrors::UnSupportedType((uint64_t)a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v14 = &__p;
      }
      else {
        unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_p = (dmlc::LogMessageFatal *)&v17;
      goto LABEL_26;
    }
  }
  else
  {
    if (v4 == 117)
    {
      switch(a2[2])
      {
        case '1':
          char v11 = 7;
          goto LABEL_28;
        case '2':
          char v11 = 8;
          goto LABEL_28;
        case '4':
          char v11 = 9;
          goto LABEL_28;
        case '8':
          char v11 = 10;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 == 105)
    {
      switch(a2[2])
      {
        case '1':
          char v11 = 3;
          goto LABEL_28;
        case '2':
          char v11 = 4;
          goto LABEL_28;
        case '4':
          char v11 = 5;
          goto LABEL_28;
        case '8':
          char v11 = 6;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 != 102) {
      goto LABEL_17;
    }
    int v5 = a2[2];
  }
  if (v5 != 56)
  {
    if (v5 == 52)
    {
      *(unsigned char *)(a1 + 49) = 0;
      return;
    }
    goto LABEL_17;
  }
  char v11 = 1;
LABEL_28:
  *(unsigned char *)(a1 + 49) = v11;
}

void sub_22E942254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  _Unwind_Resume(a1);
}

void xgboost::ArrayInterfaceHandler::ExtractShape<1>(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  int v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&__p);
  int v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (v18 < 0) {
    operator delete(__p);
  }
  unint64_t v6 = (uint64_t)(v5[3] - v5[2]) >> 3;
  unint64_t v15 = 0;
  std::vector<unsigned long>::vector(&__p, v6, &v15);
  uint64_t v7 = (atomic_uint **)v5[2];
  uint64_t v8 = (atomic_uint **)v5[3];
  if (v7 != v8)
  {
    BOOL v9 = __p;
    do
    {
      uint64_t v10 = *v7;
      if (*v7) {
        atomic_fetch_add_explicit(v10 + 2, 1u, memory_order_relaxed);
      }
      *BOOL v9 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v10) + 2);
      if (v10 && atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
      }
      ++v7;
      ++v9;
    }
    while (v7 != v8);
  }
  xgboost::ArrayInterfaceHandler::HandleRowVector<1>((uint64_t)&__p, (uint64_t)&__p);
  unint64_t v15 = 0;
  char v11 = v17;
  if (v17 == __p)
  {
    unint64_t v12 = 0;
    goto LABEL_19;
  }
  unint64_t v12 = 0;
  do
  {
    if (v12) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    unint64_t v13 = v15;
    char v11 = __p;
    unint64_t v14 = v17;
    *(void *)(a2 + 8 * v15) = *((void *)__p + v15);
    unint64_t v12 = v13 + 1;
    unint64_t v15 = v13 + 1;
  }
  while (v13 + 1 < (v14 - v11) >> 3);
  if (v13 > 0x7FFFFFFFFFFFFFFELL)
  {
LABEL_19:
    memset_pattern16((void *)(a2 + 8 * v12), &unk_22EA1BD00, 8 - 8 * v12);
    if (!v11) {
      return;
    }
  }
  char v17 = v11;
  operator delete(v11);
}

void sub_22E94255C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::ArrayInterfaceHandler::ExtractStride<1>(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  uint64_t v7 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 8 == v7 || *(_DWORD *)(*(void *)(v7 + 56) + 12) == 6)
  {
    BOOL v8 = 1;
    *a4 = 1;
    return v8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  BOOL v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)__p);
  uint64_t v10 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v9);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = (uint64_t)(v10[3] - v10[2]) >> 3;
  std::vector<int> v28 = 0;
  std::vector<unsigned long>::vector(__p, v11, &v28);
  unint64_t v12 = (atomic_uint **)v10[2];
  unint64_t v13 = (atomic_uint **)v10[3];
  if (v12 != v13)
  {
    unint64_t v14 = __p[0];
    do
    {
      unint64_t v15 = *v12;
      if (*v12) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      *unint64_t v14 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v15) + 2);
      if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
      }
      ++v12;
      ++v14;
    }
    while (v12 != v13);
  }
  uint64_t v16 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v7 + 56));
  uint64_t v17 = (uint64_t)(v16[3] - v16[2]) >> 3;
  uint64_t v30 = (uint64_t)(v10[3] - v10[2]) >> 3;
  unint64_t v31 = v17;
  if (v17 != v30) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v18 = (uint64_t)(v16[3] - v16[2]) >> 3;
  unint64_t v31 = 0;
  std::vector<unsigned long>::vector(&v28, v18, &v31);
  uint64_t v19 = (atomic_uint **)v16[2];
  char v20 = (atomic_uint **)v16[3];
  if (v19 != v20)
  {
    std::string v21 = v28;
    do
    {
      unint64_t v22 = *v19;
      if (*v19) {
        atomic_fetch_add_explicit(v22 + 2, 1u, memory_order_relaxed);
      }
      void *v21 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v22) + 2);
      if (v22 && atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
      }
      ++v19;
      ++v21;
    }
    while (v19 != v20);
  }
  xgboost::ArrayInterfaceHandler::HandleRowVector<1>((uint64_t)__p, (uint64_t)&v28);
  unint64_t v31 = 0;
  uint64_t v23 = v29;
  if (v29 == v28)
  {
    unint64_t v24 = 0;
    goto LABEL_34;
  }
  unint64_t v24 = 0;
  do
  {
    if (v24) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    unint64_t v25 = v31;
    uint64_t v23 = v28;
    uint64_t v26 = (char *)v29;
    a4[v31] = v28[v31] / a2;
    unint64_t v24 = v25 + 1;
    unint64_t v31 = v25 + 1;
  }
  while (v25 + 1 < (v26 - v23) >> 3);
  if (v25 > 0x7FFFFFFFFFFFFFFELL)
  {
LABEL_34:
    memset_pattern16(&a4[v24], &unk_22EA1BD00, 8 - 8 * v24);
    BOOL v8 = *a4 == 1;
    if (!v23) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  BOOL v8 = *a4 == 1;
LABEL_35:
  int v29 = v23;
  operator delete(v23);
LABEL_36:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8;
}

void sub_22E942AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::ArrayInterfaceHandler::ExtractData(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  xgboost::ArrayInterfaceHandler::Validate(a1);
  uint64_t PtrFromArray = xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<void *>(a1);
  if (!PtrFromArray)
  {
    int v6 = 0;
    if (a2) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  return PtrFromArray;
}

void sub_22E942D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::ArrayInterfaceHandler::ExtractMask(uint64_t a1, unint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v30, "mask");
  uint64_t v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&v30);
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  if (a1 + 8 == v4) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "mask");
  int v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&v30);
  int v6 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  uint64_t v7 = (uint64_t)(v6 + 16);
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  xgboost::ArrayInterfaceHandler::Validate(v7);
  uint64_t PtrFromArray = xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<unsigned char *>(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  BOOL v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v7, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v10 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v9);
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)&v30, v10[2], v10[3], v10[3] - v10[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v26 = (void *)((v31 - (unsigned char *)v30) >> 3);
  LODWORD(v23[0]) = 1;
  if (v31 - (unsigned char *)v30 != 8) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "typestr");
  unint64_t v11 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at(v7, (const void **)&v26);
  unint64_t v12 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v11);
  if (v12[39] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v12 + 2), *((void *)v12 + 3));
  }
  else {
    std::string __p = *(std::string *)(v12 + 16);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
  uint64_t v25 = 0;
  uint64_t v25 = *std::string::at(&__p, 2uLL) - 48;
  if (*std::string::at(&__p, 1uLL) == 116)
  {
    LODWORD(v23[0]) = 1;
    if (v25 != 1) {
      dmlc::LogCheckFormat<long long,int>();
    }
  }
  else if (*std::string::at(&__p, 1uLL) == 105)
  {
    LODWORD(v23[0]) = 1;
    if (v25 != 1) {
      dmlc::LogCheckFormat<long long,int>();
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    unint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"mask must be of integer type or bit field type.", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
  if (v31 == (unsigned char *)v30) {
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v13 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v30) + 2);
  std::string::basic_string[abi:ne180100]<0>(&v26, "strides");
  uint64_t v16 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v7, (const void **)&v26);
  uint64_t v17 = v6 + 24;
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
  if (v17 != (char *)v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "strides");
    unint64_t v18 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)v23);
    uint64_t v19 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v18);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)&v26, v19[2], v19[3], v19[3] - v19[2]);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v27 - (unsigned char *)v26 != 8) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    if (v27 == v26) {
      std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
    }
    char v20 = xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)v26);
    if (v20[2] != v25) {
      dmlc::LogCheckFormat<long long,long long>();
    }
    v23[0] = &v26;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  }
  unint64_t v21 = vcvtpd_u64_f64((double)v13 * 0.125);
  if (!PtrFromArray && v21) {
    std::terminate();
  }
  *a2 = v21;
  a2[1] = PtrFromArray;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v13;
}

void sub_22E943478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v30 - 88);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_22E9435F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x22E943608);
  }
  JUMPOUT(0x22E9435F0);
}

void xgboost::ArrayInterfaceErrors::UnSupportedType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  xgboost::ArrayInterfaceErrors::TypeStr((xgboost::ArrayInterfaceErrors *)*(char *)(a1 + 1), &v7);
  uint64_t v4 = std::string::append(&v7, "-");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v8, *(unsigned char *)(a1 + 2));
  std::string v9 = v8;
  memset(&v8, 0, sizeof(v8));
  int v6 = std::string::append(&v9, " is not supported.");
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_22E9436F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::ArrayInterfaceErrors::TypeStr@<X0>(xgboost::ArrayInterfaceErrors *this@<X0>, void *a2@<X8>)
{
  char v2 = (char)this;
  if ((int)this <= 97)
  {
    switch((int)this)
    {
      case 'M':
        uint64_t v4 = "Datetime";
        goto LABEL_19;
      case 'O':
        uint64_t v4 = "Object";
        goto LABEL_19;
      case 'S':
        uint64_t v4 = "String";
        goto LABEL_19;
      case 'U':
        uint64_t v4 = "Unicode";
        goto LABEL_19;
      case 'V':
        uint64_t v4 = "Other";
        goto LABEL_19;
      default:
LABEL_17:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        int v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
        std::string v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Invalid type code: ", 19);
        char v15 = v2;
        std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v15, 1);
        unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"of your input data complies to: ", 32);
        unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"https://docs.scipy.org/doc/numpy/reference/arrays.interface.html", 64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nOr open an issue.", 18);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
        float result = std::string::basic_string[abi:ne180100]<0>(a2, (char *)&unk_22EA3D4EA);
        break;
    }
  }
  else
  {
    switch((int)this)
    {
      case 'b':
        uint64_t v4 = "Boolean";
        break;
      case 'c':
        uint64_t v4 = "Complex floating point";
        break;
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
        goto LABEL_17;
      case 'f':
        uint64_t v4 = "Floating point";
        break;
      case 'i':
        uint64_t v4 = "Integer";
        break;
      case 'm':
        uint64_t v4 = "Timedelta";
        break;
      default:
        if (this == 117)
        {
          uint64_t v4 = "Unsigned integer";
        }
        else
        {
          if (this != 116) {
            goto LABEL_17;
          }
          uint64_t v4 = "Bit field";
        }
        break;
    }
LABEL_19:
    return std::string::basic_string[abi:ne180100]<0>(a2, v4);
  }
  return result;
}

void sub_22E943930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void xgboost::ArrayInterfaceHandler::HandleRowVector<1>(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 == 16)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    if (v4 != 1 && v3 != 1)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      std::string v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
      std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: m == 1 || n == 1", 30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
      return;
    }
    if (v4 == 1)
    {
      **(void **)a2 = *(void *)(*(void *)a2 + 8);
    }
    else if (v3 != 1)
    {
      return;
    }
    std::vector<unsigned long>::resize(a2, 1uLL);
  }
}

void sub_22E943A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<unsigned char *>(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  uint64_t v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Empty data passed in.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  long long v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v2 + 56));
  int v6 = (_DWORD **)v5[2];
  if ((_DWORD **)v5[3] == v6) {
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  }
  return *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v6) + 2);
}

void sub_22E943B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]()
{
}

void dmlc::LogCheckFormat<long long,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  int v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E943D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<long long,long long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  int v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E943EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::linalg::ArrayInterface<unsigned int,1>()
{
  v3[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = 0x300000000;
  v3[0] = 0;
  v3[1] = 0;
  v0 = &unk_26E24E128;
  uint64_t v2 = v3;
  operator new();
}

void sub_22E94470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (atomic_fetch_add_explicit(v30 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v30 + 8))(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::FileAdapter::BeforeFirst(xgboost::data::FileAdapter *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x230FA80D0](v2, 0x1060C40C2E02434);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  *((void *)this + 1) = 0;
  return result;
}

void xgboost::data::FileAdapter::Next(xgboost::data::FileAdapter *this)
{
}

void sub_22E944AB8(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1060C40C2E02434);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::FileAdapter::Value(xgboost::data::FileAdapter *this)
{
  return *((void *)this + 2);
}

uint64_t std::unique_ptr<dmlc::Parser<unsigned int,float>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void xgboost::data::FileIterator::~FileIterator(xgboost::data::FileIterator *this)
{
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  std::unique_ptr<dmlc::Parser<unsigned int,float>>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void xgboost::SparsePage::SparsePage(xgboost::SparsePage *this)
{
}

void sub_22E944CA4()
{
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  long long v5 = value;
  std::string v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      std::string v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11) {
      unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_22E944E1C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void dmlc::LogCheckFormat<std::string,std::string>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" (", 2);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  size_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
  operator new();
}

void sub_22E944FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<unsigned long long,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E9451BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    size_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  char v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_22E945358(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22E945360(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22E945468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void xgboost::ArrayInterface<2,false>::Initialize(uint64_t a1, uint64_t a2)
{
  xgboost::ArrayInterfaceHandler::Validate(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "typestr");
  uint64_t v4 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at(a2, (const void **)__p);
  int v5 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  if (v5[39] < 0) {
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
  }
  else {
    std::string v22 = *(std::string *)(v5 + 16);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v22;
  }
  else {
    uint64_t v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  xgboost::ArrayInterface<2,false>::AssignType(a1, (unsigned __int8 *)v6, size);
  xgboost::ArrayInterfaceHandler::ExtractShape<2>(a2, a1 + 32);
  unint64_t v8 = &v22;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  *(unsigned char *)(a1 + 64) = xgboost::ArrayInterfaceHandler::ExtractStride<2>(a2, v8->__r_.__value_.__s.__data_[2] - 48, a1 + 32, (void *)(a1 + 16));
  uint64_t v9 = *(void *)(a1 + 40) * *(void *)(a1 + 32);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 48) = xgboost::ArrayInterfaceHandler::ExtractData(a2, v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "mask");
  uint64_t v10 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)__p);
  uint64_t v11 = a2 + 8;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v11 != v10)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: array.find(\"mask\") == array.cend()", 48);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Masked array is not yet supported.", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stream");
  uint64_t v12 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v11 != v12)
  {
    size_t v13 = *(_DWORD **)(v12 + 56);
    if (v13[3] != 6)
    {
      xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v13);
      uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
      char v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_22E9457A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E945814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0x22E945808);
  }
  JUMPOUT(0x22E94580CLL);
}

void xgboost::ArrayInterface<2,false>::AssignType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = a2[1];
  if (a3 == 4 && v4 == 102)
  {
    int v5 = a2[2];
    if (v5 == 49)
    {
      if (a2[3] == 54)
      {
        *(unsigned char *)(a1 + 65) = 2;
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        long long v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: sizeof(long double) == 16", 39);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"128-bit floating point is not supported on current platform.", 60);
        p_p = (dmlc::LogMessageFatal *)&__p;
LABEL_26:
        dmlc::LogMessageFatal::~LogMessageFatal(p_p);
        return;
      }
LABEL_17:
      uint64_t v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      size_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      xgboost::ArrayInterfaceErrors::UnSupportedType((uint64_t)a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &__p;
      }
      else {
        uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_p = (dmlc::LogMessageFatal *)&v17;
      goto LABEL_26;
    }
  }
  else
  {
    if (v4 == 117)
    {
      switch(a2[2])
      {
        case '1':
          char v11 = 7;
          goto LABEL_28;
        case '2':
          char v11 = 8;
          goto LABEL_28;
        case '4':
          char v11 = 9;
          goto LABEL_28;
        case '8':
          char v11 = 10;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 == 105)
    {
      switch(a2[2])
      {
        case '1':
          char v11 = 3;
          goto LABEL_28;
        case '2':
          char v11 = 4;
          goto LABEL_28;
        case '4':
          char v11 = 5;
          goto LABEL_28;
        case '8':
          char v11 = 6;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 != 102) {
      goto LABEL_17;
    }
    int v5 = a2[2];
  }
  if (v5 != 56)
  {
    if (v5 == 52)
    {
      *(unsigned char *)(a1 + 65) = 0;
      return;
    }
    goto LABEL_17;
  }
  char v11 = 1;
LABEL_28:
  *(unsigned char *)(a1 + 65) = v11;
}

void sub_22E945A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  _Unwind_Resume(a1);
}

void xgboost::ArrayInterfaceHandler::ExtractShape<2>(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  int v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&__p);
  int v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (v17 < 0) {
    operator delete(__p);
  }
  unint64_t v6 = (uint64_t)(v5[3] - v5[2]) >> 3;
  uint64_t v14 = 0;
  std::vector<unsigned long>::vector(&__p, v6, &v14);
  long long v7 = (atomic_uint **)v5[2];
  unint64_t v8 = (atomic_uint **)v5[3];
  uint64_t v9 = __p;
  if (v7 != v8)
  {
    do
    {
      uint64_t v10 = *v7;
      if (*v7) {
        atomic_fetch_add_explicit(v10 + 2, 1u, memory_order_relaxed);
      }
      *uint64_t v9 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v10) + 2);
      if (v10 && atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
      }
      ++v7;
      ++v9;
    }
    while (v7 != v8);
    uint64_t v9 = __p;
  }
  uint64_t v14 = 0;
  if (v16 == v9)
  {
    uint64_t v11 = 0;
    goto LABEL_19;
  }
  uint64_t v11 = 0;
  do
  {
    if ((unint64_t)v11 > 1) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    uint64_t v12 = v14;
    uint64_t v9 = __p;
    size_t v13 = v16;
    *(void *)(a2 + 8 * v14) = *((void *)__p + v14);
    uint64_t v11 = v12 + 1;
    uint64_t v14 = v11;
  }
  while (v11 < (unint64_t)(v13 - v9));
  if (v11 < 2)
  {
LABEL_19:
    memset_pattern16((void *)(a2 + 8 * v11), &unk_22EA1BD00, 16 - 8 * v11);
    if (!v9) {
      return;
    }
  }
  uint64_t v16 = v9;
  operator delete(v9);
}

void sub_22E945D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::ArrayInterfaceHandler::ExtractStride<2>(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  uint64_t v8 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 8 == v8 || *(_DWORD *)(*(void *)(v8 + 56) + 12) == 6)
  {
    BOOL v9 = 1;
    a4[1] = 1;
    *a4 = *(void *)(a3 + 8);
    return v9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  uint64_t v10 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)__p);
  uint64_t v11 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v10);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v12 = (uint64_t)(v11[3] - v11[2]) >> 3;
  uint64_t v30 = 0;
  std::vector<unsigned long>::vector(__p, v12, &v30);
  uint64_t v29 = a3;
  size_t v13 = (atomic_uint **)v11[2];
  uint64_t v14 = (atomic_uint **)v11[3];
  if (v13 != v14)
  {
    char v15 = __p[0];
    do
    {
      uint64_t v16 = *v13;
      if (*v13) {
        atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
      }
      *char v15 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v16) + 2);
      if (v16 && atomic_fetch_add_explicit(v16 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
      }
      ++v13;
      ++v15;
    }
    while (v13 != v14);
  }
  char v17 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v8 + 56));
  uint64_t v18 = (uint64_t)(v17[3] - v17[2]) >> 3;
  uint64_t v32 = (uint64_t)(v11[3] - v11[2]) >> 3;
  uint64_t v33 = v18;
  if (v18 != v32) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v19 = (uint64_t)(v17[3] - v17[2]) >> 3;
  uint64_t v33 = 0;
  std::vector<unsigned long>::vector(&v30, v19, &v33);
  char v20 = (atomic_uint **)v17[2];
  char v21 = (atomic_uint **)v17[3];
  std::string v22 = v30;
  if (v20 != v21)
  {
    do
    {
      uint64_t v23 = *v20;
      if (*v20) {
        atomic_fetch_add_explicit(v23 + 2, 1u, memory_order_relaxed);
      }
      *std::string v22 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v23) + 2);
      if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
      }
      ++v20;
      ++v22;
    }
    while (v20 != v21);
    std::string v22 = v30;
  }
  uint64_t v33 = 0;
  if (v31 == v22)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    do
    {
      if ((unint64_t)v24 > 1) {
        dmlc::LogCheckFormat<unsigned long,int>();
      }
      uint64_t v25 = v33;
      std::string v22 = v30;
      uint64_t v26 = v31;
      a4[v33] = v30[v33] / a2;
      uint64_t v24 = v25 + 1;
      uint64_t v33 = v24;
    }
    while (v24 < (unint64_t)(v26 - v22));
    if (v24 > 1) {
      goto LABEL_35;
    }
  }
  memset_pattern16(&a4[v24], &unk_22EA1BD00, 16 - 8 * v24);
LABEL_35:
  BOOL v9 = *(void *)(v29 + 8) == *a4 && a4[1] == 1;
  if (v22)
  {
    unint64_t v31 = v22;
    operator delete(v22);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_22E9462C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E946414(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E94640CLL);
}

float xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, char a2, void *a3, float a4)
{
  switch(a2)
  {
    case 0:
      return *(float *)(a1 + 4 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
    case 1:
    case 2:
      return *(double *)(a1 + 8 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
    case 3:
      return (float)*(char *)(a1 + *(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]);
    case 4:
      return (float)*(__int16 *)(a1 + 2 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
    case 5:
      return (float)*(int *)(a1 + 4 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
    case 6:
      return (float)*(uint64_t *)(a1 + 8 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
    case 7:
      LOBYTE(a4) = *(unsigned char *)(a1 + *(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]);
      goto LABEL_12;
    case 8:
      LOWORD(a4) = *(_WORD *)(a1 + 2 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
      goto LABEL_12;
    case 9:
      a4 = *(float *)(a1 + 4 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
LABEL_12:
      float result = (float)LODWORD(a4);
      break;
    case 10:
      float result = (float)*(unint64_t *)(a1
                                          + 8 * (*(void *)(*a3 + 16) * a3[1] + *(void *)(*a3 + 24) * a3[2]));
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

uint64_t xgboost::ArrayInterface<1,true>::DispatchCall<unsigned int xgboost::ArrayInterface<1,true>::operator()<unsigned int,unsigned long &>(unsigned long &)::{lambda(unsigned int const*)#1}>(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *(float *)(a1 + 4 * *(void *)(a3 + 16) * a4);
      break;
    case 1:
    case 2:
      uint64_t result = *(double *)(a1 + 8 * *(void *)(a3 + 16) * a4);
      break;
    case 3:
      uint64_t result = *(char *)(a1 + *(void *)(a3 + 16) * a4);
      break;
    case 4:
      uint64_t result = *(__int16 *)(a1 + 2 * *(void *)(a3 + 16) * a4);
      break;
    case 5:
    case 9:
      uint64_t result = *(unsigned int *)(a1 + 4 * *(void *)(a3 + 16) * a4);
      break;
    case 6:
      uint64_t result = *(void *)(a1 + 8 * *(void *)(a3 + 16) * a4);
      break;
    case 7:
      uint64_t result = *(unsigned __int8 *)(a1 + *(void *)(a3 + 16) * a4);
      break;
    case 8:
      uint64_t result = *(unsigned __int16 *)(a1 + 2 * *(void *)(a3 + 16) * a4);
      break;
    case 10:
      uint64_t result = *(void *)(a1 + 8 * *(void *)(a3 + 16) * a4);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long &>(unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  switch(a2)
  {
    case 0:
      return *(float *)(a1 + 4 * *(void *)(a3 + 16) * a4);
    case 1:
    case 2:
      return *(double *)(a1 + 8 * *(void *)(a3 + 16) * a4);
    case 3:
      return (float)*(char *)(a1 + *(void *)(a3 + 16) * a4);
    case 4:
      return (float)*(__int16 *)(a1 + 2 * *(void *)(a3 + 16) * a4);
    case 5:
      return (float)*(int *)(a1 + 4 * *(void *)(a3 + 16) * a4);
    case 6:
      return (float)*(uint64_t *)(a1 + 8 * *(void *)(a3 + 16) * a4);
    case 7:
      LOBYTE(a5) = *(unsigned char *)(a1 + *(void *)(a3 + 16) * a4);
      goto LABEL_12;
    case 8:
      LOWORD(a5) = *(_WORD *)(a1 + 2 * *(void *)(a3 + 16) * a4);
      goto LABEL_12;
    case 9:
      a5 = *(float *)(a1 + 4 * *(void *)(a3 + 16) * a4);
LABEL_12:
      float result = (float)LODWORD(a5);
      break;
    case 10:
      float result = (float)*(unint64_t *)(a1 + 8 * *(void *)(a3 + 16) * a4);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

void dmlc::LogCheckFormat<unsigned long long,unsigned long long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E946980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    int v5 = __str;
    do
      std::string __str = std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return __str;
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (unsigned int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      unsigned int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    int v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    char v21 = &__src[4 * a5];
    uint64_t v23 = (unsigned int *)*((void *)p_end_cap - 1);
LABEL_17:
    uint64_t v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  char v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_22E946BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  long long v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    long long v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--long long v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    long long v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  size_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void dmlc::LogCheckFormat<unsigned int,unsigned long long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E946E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(*result);
    std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(v1[1]);
    xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v1 + 5));
  }
  return result;
}

void xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry(xgboost::XGBAPIThreadLocalEntry *this)
{
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry(xgboost::XGBAPIThreadLocalEntry *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E94705C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v4 = *(void **)(v2 + 120);
  if (v4)
  {
    *(void *)(v2 + 128) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(v2 + 96);
  if (v5)
  {
    *(void *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::vector<unsigned int>::pointer v6 = *(void **)(v2 + 72);
  if (v6)
  {
    *(void *)(v2 + 80) = v6;
    operator delete(v6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v7 = *(void **)(v2 + 24);
  if (v7)
  {
    *(void *)(v2 + 32) = v7;
    operator delete(v7);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v1 + 40));
    }
    operator delete((void *)v1);
  }
}

uint64_t std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__erase_unique<xgboost::DMatrix const*>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    int v4 = (uint64_t *)(a1 + 8);
    do
    {
      unint64_t v5 = v2[4];
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        long long v7 = v2;
      }
      else {
        long long v7 = v2 + 1;
      }
      if (v6) {
        int v4 = v2;
      }
      uint64_t v2 = (void *)*v7;
    }
    while (*v7);
    if (v4 != (uint64_t *)(a1 + 8) && v3 >= v4[4])
    {
      std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__remove_node_pointer((uint64_t **)a1, v4);
      xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v4 + 5));
    }
  }
  return 0;
}

uint64_t *std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  long long v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      long long v7 = 0;
      float result = (uint64_t *)v2;
    }
    else
    {
      long long v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      float result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        float result = v7;
      }
      long long v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)vXGDMatrixFree(*((void *)this + 7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v2(*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    long long v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    size_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *size_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      float result = v7;
    }
    long long v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *long long v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)vXGDMatrixFree(*((void *)this + 7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v2(*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Max,unsigned long long>(unint64_t *result, unint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unint64_t v5 = *result++;
      unint64_t v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<std::vector<unsigned long>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (void *)*a1;
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*a1] >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    uint64_t v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v4) >> 3) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v4[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v3) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v11);
    size_t v13 = &v12[24 * v5];
    uint64_t v15 = &v12[24 * v14];
    bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
    uint64_t v16 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
    unint64_t v17 = (void *)*a1;
    uint64_t v18 = (void *)a1[1];
    if (v18 == (void *)*a1)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (!v18) {
        return;
      }
    }
    else
    {
      do
      {
        *((void *)v13 - 3) = 0;
        *((void *)v13 - 2) = 0;
        v13 -= 24;
        *((void *)v13 + 2) = 0;
        long long v19 = *(_OWORD *)(v18 - 3);
        v18 -= 3;
        *(_OWORD *)size_t v13 = v19;
        *((void *)v13 + 2) = v18[2];
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      while (v18 != v17);
      uint64_t v18 = (void *)*a1;
      uint64_t v20 = (void *)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (v20 != v18)
      {
        BOOL v21 = v20;
        do
        {
          uint64_t v23 = (void *)*(v21 - 3);
          v21 -= 3;
          uint64_t v22 = v23;
          if (v23)
          {
            *(v20 - 2) = v22;
            operator delete(v22);
          }
          uint64_t v20 = v21;
        }
        while (v21 != v18);
      }
      if (!v18) {
        return;
      }
    }
    operator delete(v18);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v24 = (char *)&v3[3 * a2];
    if (v4 != v24)
    {
      uint64_t v25 = (char *)a1[1];
      do
      {
        uint64_t v27 = (void *)*((void *)v25 - 3);
        v25 -= 24;
        uint64_t v26 = v27;
        if (v27)
        {
          *((void *)v4 - 2) = v26;
          operator delete(v26);
        }
        unint64_t v4 = v25;
      }
      while (v25 != v24);
    }
    a1[1] = v24;
  }
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  uint64_t v4 = *a1;
  unint64_t v5 = a3 - a2 + 1;
  if (v5 > (a1[1] - *a1) >> 3)
  {
    uint64_t v7 = 0;
    std::vector<unsigned long>::resize((uint64_t)a1, v5, &v7);
    uint64_t v4 = *a1;
  }
  ++*(void *)(v4 + 8 * v3);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22E947890(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::Entry::CmpIndex(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unint64_t v11 = (uint64_t *)result;
  while (2)
  {
    uint64_t v12 = a2 - 1;
    uint64_t v66 = a2;
    long long v67 = a2 - 2;
    std::string v65 = a2 - 3;
    size_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float result = (*a3)(v12, v11);
                if (result)
                {
                  uint64_t v31 = *v11;
                  *unint64_t v11 = *v12;
                  *uint64_t v12 = v31;
                }
                break;
              case 3uLL:
                float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11, v11 + 1, v12, a3);
                break;
              case 4uLL:
                float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11, v11 + 1, v11 + 2, v12, a3);
                break;
              case 5uLL:
                float result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11, v11 + 1, v11 + 2, v11 + 3, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v32 = v11 + 1;
            BOOL v34 = v11 == a2 || v32 == a2;
            if (a5)
            {
              if (!v34)
              {
                uint64_t v35 = 0;
                uint64_t v36 = v11;
                do
                {
                  uint64_t v37 = v36;
                  uint64_t v36 = v32;
                  float result = (*a3)(v32, v37);
                  if (result)
                  {
                    uint64_t v70 = *v36;
                    uint64_t v38 = v35;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v38 + 8) = *(uint64_t *)((char *)v11 + v38);
                      if (!v38) {
                        break;
                      }
                      v38 -= 8;
                      float result = (*a3)(&v70, (uint64_t *)((char *)v11 + v38));
                      if ((result & 1) == 0)
                      {
                        unint64_t v39 = (uint64_t *)((char *)v11 + v38 + 8);
                        goto LABEL_81;
                      }
                    }
                    unint64_t v39 = v11;
LABEL_81:
                    *unint64_t v39 = v70;
                  }
                  uint64_t v32 = v36 + 1;
                  v35 += 8;
                }
                while (v36 + 1 != a2);
              }
            }
            else if (!v34)
            {
              std::string v62 = v11 - 1;
              do
              {
                std::string v63 = v11;
                unint64_t v11 = v32;
                float result = (*a3)(v32, v63);
                if (result)
                {
                  uint64_t v70 = *v11;
                  unsigned __int8 v64 = v62;
                  do
                  {
                    void v64[2] = v64[1];
                    float result = (*a3)(&v70, v64--);
                  }
                  while ((result & 1) != 0);
                  void v64[2] = v70;
                }
                uint64_t v32 = v11 + 1;
                ++v62;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v40 = (v15 - 2) >> 1;
              int64_t v68 = v40;
              do
              {
                int64_t v41 = v40;
                if (v68 >= v40)
                {
                  uint64_t v42 = (2 * v40) | 1;
                  uint64_t v43 = &v11[v42];
                  if (2 * v40 + 2 < (uint64_t)v15 && (*a3)(&v11[v42], v43 + 1))
                  {
                    ++v43;
                    uint64_t v42 = 2 * v41 + 2;
                  }
                  unint64_t v44 = &v11[v41];
                  float result = (*a3)(v43, v44);
                  if ((result & 1) == 0)
                  {
                    uint64_t v70 = *v44;
                    do
                    {
                      uint64_t v45 = v43;
                      *unint64_t v44 = *v43;
                      if (v68 < v42) {
                        break;
                      }
                      uint64_t v46 = (2 * v42) | 1;
                      uint64_t v43 = &v11[v46];
                      uint64_t v47 = 2 * v42 + 2;
                      if (v47 < (uint64_t)v15 && (*a3)(&v11[v46], v43 + 1))
                      {
                        ++v43;
                        uint64_t v46 = v47;
                      }
                      float result = (*a3)(v43, &v70);
                      unint64_t v44 = v45;
                      uint64_t v42 = v46;
                    }
                    while (!result);
                    *uint64_t v45 = v70;
                  }
                }
                int64_t v40 = v41 - 1;
              }
              while (v41);
              uint64_t v48 = (unint64_t)v14 >> 3;
              char v49 = v66;
              do
              {
                uint64_t v50 = 0;
                uint64_t v69 = *v11;
                uint64_t v51 = v11;
                do
                {
                  std::string::size_type v52 = &v51[v50 + 1];
                  uint64_t v53 = (2 * v50) | 1;
                  uint64_t v54 = 2 * v50 + 2;
                  if (v54 < v48)
                  {
                    float result = (*a3)(&v51[v50 + 1], &v51[v50 + 2]);
                    if (result)
                    {
                      ++v52;
                      uint64_t v53 = v54;
                    }
                  }
                  *uint64_t v51 = *v52;
                  uint64_t v51 = v52;
                  uint64_t v50 = v53;
                }
                while (v53 <= (uint64_t)((unint64_t)(v48 - 2) >> 1));
                uint64_t v55 = v49 - 1;
                if (v52 == v55)
                {
                  std::string::size_type v56 = v55;
                  uint64_t *v52 = v69;
                }
                else
                {
                  uint64_t *v52 = *v55;
                  std::string::size_type v56 = v55;
                  *uint64_t v55 = v69;
                  uint64_t v57 = (char *)v52 - (char *)v11 + 8;
                  if (v57 >= 9)
                  {
                    unint64_t v58 = (((unint64_t)v57 >> 3) - 2) >> 1;
                    int v59 = &v11[v58];
                    float result = (*a3)(v59, v52);
                    if (result)
                    {
                      uint64_t v70 = *v52;
                      do
                      {
                        std::string v60 = v59;
                        uint64_t *v52 = *v59;
                        if (!v58) {
                          break;
                        }
                        unint64_t v58 = (v58 - 1) >> 1;
                        int v59 = &v11[v58];
                        float result = (*a3)(v59, &v70);
                        std::string::size_type v52 = v60;
                      }
                      while ((result & 1) != 0);
                      *std::string v60 = v70;
                    }
                  }
                }
                BOOL v61 = v48-- <= 2;
                char v49 = v56;
              }
              while (!v61);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          unint64_t v17 = &v11[v15 >> 1];
          if ((unint64_t)v14 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11, &v11[v15 >> 1], v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11 + 1, v17 - 1, v67, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11 + 2, &v11[v16 + 1], v65, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v17 - 1, v17, &v11[v16 + 1], a3);
            uint64_t v18 = *v11;
            *unint64_t v11 = *v17;
            uint64_t *v17 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(&v11[v15 >> 1], v11, v12, a3);
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(v11 - 1, v11)) {
            break;
          }
          uint64_t v70 = *v11;
          float result = (*a3)(&v70, v12);
          if (result)
          {
            size_t v13 = v11;
            a2 = v66;
            do
              float result = (*a3)(&v70, ++v13);
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v27 = v11 + 1;
            a2 = v66;
            do
            {
              size_t v13 = v27;
              if (v27 >= v66) {
                break;
              }
              float result = (*a3)(&v70, v27);
              uint64_t v27 = v13 + 1;
            }
            while (!result);
          }
          uint64_t v28 = a2;
          if (v13 < a2)
          {
            uint64_t v28 = a2;
            do
              float result = (*a3)(&v70, --v28);
            while ((result & 1) != 0);
          }
          while (v13 < v28)
          {
            uint64_t v29 = *v13;
            *size_t v13 = *v28;
            *uint64_t v28 = v29;
            do
              ++v13;
            while (!(*a3)(&v70, v13));
            do
              float result = (*a3)(&v70, --v28);
            while ((result & 1) != 0);
          }
          uint64_t v30 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *unint64_t v11 = *v30;
          }
          a5 = 0;
          *uint64_t v30 = v70;
        }
        uint64_t v19 = 0;
        uint64_t v70 = *v11;
        do
          ++v19;
        while (((*a3)(&v11[v19], &v70) & 1) != 0);
        uint64_t v20 = &v11[v19];
        BOOL v21 = v66;
        BOOL v6 = v19 == 1;
        a2 = v66;
        if (v6)
        {
          BOOL v21 = v66;
          do
          {
            if (v20 >= v21) {
              break;
            }
            --v21;
          }
          while (((*a3)(v21, &v70) & 1) == 0);
        }
        else
        {
          do
            --v21;
          while (!(*a3)(v21, &v70));
        }
        if (v20 < v21)
        {
          uint64_t v22 = v20;
          uint64_t v23 = v21;
          do
          {
            uint64_t v24 = *v22;
            *uint64_t v22 = *v23;
            *uint64_t v23 = v24;
            do
              ++v22;
            while (((*a3)(v22, &v70) & 1) != 0);
            do
              --v23;
            while (!(*a3)(v23, &v70));
          }
          while (v22 < v23);
          uint64_t v25 = v22 - 1;
        }
        else
        {
          uint64_t v25 = v20 - 1;
        }
        if (v25 != v11) {
          *unint64_t v11 = *v25;
        }
        *uint64_t v25 = v70;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        float result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v11, v25, a3, a4, a5 & 1);
        a5 = 0;
        size_t v13 = v25 + 1;
      }
      BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v11, v25, a3);
      size_t v13 = v25 + 1;
      float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v25 + 1, v66, a3);
      if (result) {
        break;
      }
      if (!v26) {
        goto LABEL_33;
      }
    }
    a2 = v25;
    if (!v26) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          unint64_t v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL xgboost::Entry::CmpValue(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

void std::vector<xgboost::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<void *>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *std::vector<xgboost::Entry>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22E9487A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned long long>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 3 * a2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = operator new(24 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v7, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_22E948880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E948900(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        size_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_rank_obj__(xgboost::obj *this)
{
  return 0;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::~LambdaRankObj()
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (unsigned char *)(a1 + 16));
  size_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E948B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "rank:pairwise");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)size_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E948CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (unsigned char *)(a1 + 16), a2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v7 = a3;
  uint64_t v156 = *MEMORY[0x263EF8340];
  std::string __p = (void *)(((*a2)[1] - **a2) >> 2);
  v147.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8)
                                                               - **(void **)(a3 + 24)) >> 2);
  if (__p != v147.__begin_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v147, 2uLL, __x);
  uint64_t v9 = (std::vector<unsigned int> *)(v7 + 48);
  uint64_t v10 = *(unsigned int **)(v7 + 48);
  uint64_t v11 = (uint64_t)(*(void *)(*(void *)(v7 + 24) + 8) - **(void **)(v7 + 24)) >> 2;
  std::vector<unsigned int>::pointer begin = v147.__begin_;
  v147.__begin_[1] = v11;
  uint64_t v13 = *(unsigned int **)(v7 + 56);
  if (v13 == v10) {
    uint64_t v9 = &v147;
  }
  else {
    std::vector<unsigned int>::pointer begin = v10;
  }
  v139 = v9;
  if (v13 == v10) {
    p_std::vector<int>::pointer end = &v147.__end_;
  }
  else {
    p_std::vector<int>::pointer end = (std::vector<unsigned int>::pointer *)(v7 + 56);
  }
  if (*p_end == begin || v11 != *(*p_end - 1))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v123 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)": ", 2);
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"group structure not consistent with #rows", 41);
    v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"group ponter size: ", 19);
    v128 = (void *)std::ostream::operator<<();
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"labels size: ", 13);
    v130 = (void *)std::ostream::operator<<();
    v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"rank:pairwise", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (SHIBYTE(v150) < 0) {
      operator delete(__p);
    }
  }
  size_t v17 = &v147.__end_;
  if (v13 != v10) {
    size_t v17 = (std::vector<unsigned int>::pointer *)(v7 + 56);
  }
  unint64_t v18 = (unint64_t)((char *)*v17 - (char *)v139->__begin_) >> 2;
  uint64_t v19 = (v18 - 1);
  if (v18 == 1)
  {
    float v20 = 0.0;
  }
  else
  {
    float v20 = 0.0;
    BOOL v21 = **(float ***)(v7 + 72);
    uint64_t v22 = (v18 - 1);
    do
    {
      if (*(void *)(*(void *)(v7 + 72) + 8) == **(void **)(v7 + 72)) {
        float v23 = 1.0;
      }
      else {
        float v23 = *v21;
      }
      float v20 = v20 + v23;
      ++v21;
      --v22;
    }
    while (v22);
  }
  uint64_t v24 = *(uint64_t **)(v7 + 24);
  uint64_t v25 = v24[1];
  uint64_t v136 = *(void *)(v7 + 40);
  uint64_t v137 = *v24;
  uint64_t v26 = *a5;
  v135 = *a2;
  unint64_t v27 = (v135[1] - *v135) >> 2;
  *(void *)__x = 0;
  v138 = (uint64_t *)v26;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v26, v27, __x);
  *(void *)__x = 0;
  v155[0].__m_.__sig = 850045863;
  memset(v155[0].__m_.__opaque, 0, sizeof(v155[0].__m_.__opaque));
  unint64_t v28 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  unsigned int v29 = 1111 * a4
      + 1111
      + (((v28 + ((1111 * a4 + 1111 - v28) >> 1)) >> 30) | ((v28
                                                                                       + ((1111 * a4 + 1111 - v28) >> 1)) >> 30 << 31));
  if (v29 <= 1) {
    unsigned int v29 = 1;
  }
  unsigned int v151 = v29;
  std::string __p = 0;
  v149 = 0;
  uint64_t v150 = 0;
  if (v19)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    BOOL v34 = 0;
    float v35 = (float)v19 / v20;
    unint64_t v134 = (v25 - v137) >> 2;
    uint64_t v144 = v7;
    uint64_t v132 = v19;
    while (1)
    {
      uint64_t v145 = v30;
      v146 = v34;
      v141 = v32;
      unint64_t v36 = v139->__begin_[v30];
      uint64_t v37 = v31;
      uint64_t v140 = v30 + 1;
      if (v36 < v139->__begin_[v30 + 1])
      {
        do
        {
          unint64_t v38 = v36 * v136;
          if (v36 * v136 >= v134) {
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          }
          uint64_t v39 = *v135;
          if (v37 >= v141)
          {
            uint64_t v42 = v31;
            unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v31) >> 2);
            unint64_t v44 = v43 + 1;
            if (v43 + 1 > 0x1555555555555555) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v141 - v42) >> 2) > v44) {
              unint64_t v44 = 0x5555555555555556 * ((v141 - v42) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v141 - v42) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v45 = 0x1555555555555555;
            }
            else {
              unint64_t v45 = v44;
            }
            uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v45);
            int v48 = *(_DWORD *)(v137 + 4 * v38);
            char v49 = &v46[12 * v43];
            *(_DWORD *)char v49 = *(_DWORD *)(v39 + 4 * v36);
            *((_DWORD *)v49 + 1) = v48;
            *((_DWORD *)v49 + 2) = v36;
            uint64_t v31 = v49;
            if (v37 == v42)
            {
              uint64_t v41 = v140;
            }
            else
            {
              uint64_t v41 = v140;
              do
              {
                uint64_t v50 = *(void *)(v37 - 12);
                v37 -= 12;
                int v51 = *((_DWORD *)v37 + 2);
                *(void *)(v31 - 12) = v50;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v51;
              }
              while (v37 != v42);
            }
            v141 = &v46[12 * v47];
            uint64_t v37 = v49 + 12;
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            int v40 = *(_DWORD *)(v137 + 4 * v38);
            *(_DWORD *)uint64_t v37 = *(_DWORD *)(v39 + 4 * v36);
            *((_DWORD *)v37 + 1) = v40;
            *((_DWORD *)v37 + 2) = v36;
            v37 += 12;
            uint64_t v41 = v140;
          }
          *(void *)(*v138 + 8 * v36++) = 0;
        }
        while (v36 < v139->__begin_[v41]);
      }
      v152 = xgboost::obj::ListEntry::CmpPred;
      if (v37 - v31 < 1537)
      {
        std::string::size_type v52 = 0;
        uint64_t v54 = 0;
      }
      else
      {
        std::string::size_type v52 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v37 - v31) >> 2));
        uint64_t v54 = v53;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v31, v37, (uint64_t (**)(uint64_t, uint64_t))&v152, 0xAAAAAAAAAAAAAAABLL * ((v37 - v31) >> 2), (uint64_t)v52, v54);
      if (v52) {
        operator delete(v52);
      }
      std::vector<std::pair<float,unsigned int>>::resize(&__p, 0xAAAAAAAAAAAAAAABLL * ((v37 - v31) >> 2));
      std::string::size_type v56 = __p;
      if (v37 != v31)
      {
        uint64_t v57 = (float *)((char *)__p + 4);
        unint64_t v58 = (float *)(v31 + 4);
        unsigned int v59 = 1;
        do
        {
          float v60 = *v58;
          v58 += 3;
          float v55 = v60;
          *(v57 - 1) = v60;
          *(_DWORD *)uint64_t v57 = v59 - 1;
          v57 += 2;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v37 - v31) >> 2) > v59++);
      }
      std::string v62 = v149;
      v153 = xgboost::common::CmpFirst;
      unint64_t v63 = ((char *)v149 - v56) >> 3;
      if ((char *)v149 - v56 < 1)
      {
        unsigned __int8 v64 = 0;
        uint64_t v66 = 0;
      }
      else
      {
        unsigned __int8 v64 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v149 - v56) >> 3);
        uint64_t v66 = v65;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v56, v62, (uint64_t (**)(uint64_t *, uint64_t *))&v153, v63, v64, v66, v55);
      if (v64) {
        operator delete(v64);
      }
      v142 = v31;
      long long v67 = (float *)__p;
      int64_t v68 = (char *)v149;
      if (v149 != __p) {
        break;
      }
      long long v72 = v33;
LABEL_108:
      float v103 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      float v104 = *(float *)(a1 + 32);
      if (v104 == 0.0)
      {
        uint64_t v105 = v132;
        uint64_t v31 = v142;
        uint64_t v30 = v140;
      }
      else
      {
        uint64_t v30 = v140;
        float v103 = v103 * (float)(v104 / (float)(v139->__begin_[v140] - v139->__begin_[v145]));
        uint64_t v105 = v132;
        uint64_t v31 = v142;
      }
      if (v33 != v72)
      {
        uint64_t v106 = *v138;
        v107 = (float *)v33;
        do
        {
          v108 = (float *)&v31[12 * *(unsigned int *)v107];
          v109 = (float *)&v142[12 * *((unsigned int *)v107 + 1)];
          float v110 = v103 * v107[2];
          float v111 = *v108 - *v109;
          if (v111 >= -88.7) {
            float v112 = -v111;
          }
          else {
            float v112 = 88.7;
          }
          float v113 = 1.0 / (float)((float)(expf(v112) + 1.0) + 1.0e-16);
          float v114 = v113 + -1.0;
          float v115 = v113 * (float)(1.0 - v113);
          if (v115 < 1.0e-16) {
            float v115 = 1.0e-16;
          }
          float v116 = (float)(v110 + v110) * v115;
          v117 = (float *)(v106 + 8 * *((unsigned int *)v108 + 2));
          float v118 = v117[1] + v116;
          float *v117 = *v117 + (float)(v110 * v114);
          v117[1] = v118;
          uint64_t v119 = *((unsigned int *)v109 + 2);
          uint64_t v31 = v142;
          v120 = (float *)(v106 + 8 * v119);
          float v121 = v120[1] + v116;
          float *v120 = *v120 - (float)(v110 * v114);
          v120[1] = v121;
          v107 += 3;
        }
        while (v107 != (float *)v72);
        uint64_t v30 = v140;
      }
      uint64_t v32 = v141;
      BOOL v34 = v146;
      if (v30 == v105)
      {
        if (__p)
        {
          v149 = __p;
          operator delete(__p);
        }
        if (v31) {
          operator delete(v31);
        }
        if (v33) {
          operator delete(v33);
        }
        goto LABEL_131;
      }
    }
    unint64_t v69 = 0;
    unsigned int v70 = 0;
    unint64_t v71 = ((char *)v149 - (unsigned char *)__p) >> 3;
    long long v72 = v33;
    while (1)
    {
      long long v73 = &v67[2 * v69];
      int v74 = v71 - 2;
      int v75 = 1;
      do
      {
        int v76 = v75;
        int v77 = v74;
        unint64_t v69 = v70 + v75;
        if (v71 <= v69) {
          break;
        }
        ++v75;
        --v74;
      }
      while (v67[2 * v69] == *v73);
      if (v77 != -1)
      {
        int v78 = *(_DWORD *)(a1 + 24);
        if (v78) {
          break;
        }
      }
LABEL_105:
      unint64_t v71 = (v68 - (char *)v67) >> 3;
      unsigned int v70 = v69;
      if (v71 <= v69) {
        goto LABEL_108;
      }
    }
    while (1)
    {
      int v143 = v78;
      if (v70 < v69) {
        break;
      }
LABEL_103:
      int v78 = v143 - 1;
      if (v143 == 1)
      {
        long long v67 = (float *)__p;
        int64_t v68 = (char *)v149;
        goto LABEL_105;
      }
    }
    uint64_t v79 = v70;
    while (1)
    {
      LODWORD(v153) = 0;
      HIDWORD(v153) = v77;
      unsigned int v80 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v151, &v153);
      if (v80 >= v70)
      {
        uint64_t v83 = **(void **)(v7 + 72);
        if (*(void *)(*(void *)(v7 + 72) + 8) == v83) {
          float v84 = 1.0;
        }
        else {
          float v84 = *(float *)(v83 + 4 * v145);
        }
        uint64_t v85 = (char *)__p + 8 * v79 + 4;
        unint64_t v86 = (char *)__p + 8 * v76 + 8 * v80 + 4;
        float v87 = v35 * v84;
        if (v72 >= v146)
        {
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v33) >> 2) + 1;
          if (v98 > 0x1555555555555555) {
LABEL_123:
          }
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v146 - v33) >> 2) > v98) {
            unint64_t v98 = 0x5555555555555556 * ((v146 - v33) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v146 - v33) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v99 = 0x1555555555555555;
          }
          else {
            unint64_t v99 = v98;
          }
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v99);
          int v100 = *(_DWORD *)v86;
          std::string::size_type v93 = &v90[4 * ((v72 - v33) >> 2)];
          *(_DWORD *)std::string::size_type v93 = *(_DWORD *)v85;
          *((_DWORD *)v93 + 1) = v100;
          *((float *)v93 + 2) = v87;
          uint64_t v94 = v93;
          if (v72 != v33)
          {
            uint64_t v7 = v144;
            do
            {
              uint64_t v101 = *(void *)(v72 - 12);
              v72 -= 12;
              int v102 = *((_DWORD *)v72 + 2);
              *(void *)(v94 - 12) = v101;
              v94 -= 12;
              *((_DWORD *)v94 + 2) = v102;
            }
            while (v72 != v33);
            goto LABEL_99;
          }
LABEL_98:
          uint64_t v7 = v144;
LABEL_99:
          v146 = &v90[12 * v91];
          long long v72 = v93 + 12;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v33 = v94;
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v81 = **(void **)(v7 + 72);
        if (*(void *)(*(void *)(v7 + 72) + 8) == v81) {
          float v82 = 1.0;
        }
        else {
          float v82 = *(float *)(v81 + 4 * v145);
        }
        uint64_t v85 = (char *)__p + 8 * v80 + 4;
        unint64_t v86 = (char *)__p + 8 * v79 + 4;
        float v87 = v35 * v82;
        if (v72 >= v146)
        {
          unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v33) >> 2) + 1;
          if (v88 > 0x1555555555555555) {
            goto LABEL_123;
          }
          if (0x5555555555555556 * ((v146 - v33) >> 2) > v88) {
            unint64_t v88 = 0x5555555555555556 * ((v146 - v33) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v146 - v33) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v89 = 0x1555555555555555;
          }
          else {
            unint64_t v89 = v88;
          }
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v89);
          int v92 = *(_DWORD *)v86;
          std::string::size_type v93 = &v90[4 * ((v72 - v33) >> 2)];
          *(_DWORD *)std::string::size_type v93 = *(_DWORD *)v85;
          *((_DWORD *)v93 + 1) = v92;
          *((float *)v93 + 2) = v87;
          uint64_t v94 = v93;
          if (v72 == v33) {
            goto LABEL_98;
          }
          uint64_t v7 = v144;
          do
          {
            uint64_t v95 = *(void *)(v72 - 12);
            v72 -= 12;
            int v96 = *((_DWORD *)v72 + 2);
            *(void *)(v94 - 12) = v95;
            v94 -= 12;
            *((_DWORD *)v94 + 2) = v96;
          }
          while (v72 != v33);
          goto LABEL_99;
        }
      }
      int v97 = *(_DWORD *)v86;
      *(_DWORD *)long long v72 = *(_DWORD *)v85;
      *((_DWORD *)v72 + 1) = v97;
      *((float *)v72 + 2) = v87;
      v72 += 12;
LABEL_102:
      if (++v79 == v69) {
        goto LABEL_103;
      }
    }
  }
LABEL_131:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v155);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v147.__begin_)
  {
    v147.__end_ = v147.__begin_;
    operator delete(v147.__begin_);
  }
}

void sub_22E949AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a37);
  if (v37) {
    operator delete(v37);
  }
  JUMPOUT(0x22E949C34);
}

void sub_22E949AC0(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4) {
    operator delete(v4);
  }
  if (v3) {
    operator delete(v3);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E949928);
  }
  JUMPOUT(0x22E949BB4);
}

void sub_22E949AD0(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3) {
    operator delete(v3);
  }
  if (v2) {
    operator delete(v2);
  }
  if (a2 == v4 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E949928);
  }
  JUMPOUT(0x22E949BB4);
}

void sub_22E949AEC()
{
}

void sub_22E949B84()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E949BECLL);
}

void sub_22E949B90()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E949BECLL);
}

void sub_22E949BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v35) {
    operator delete(v35);
  }
  JUMPOUT(0x22E949C34);
}

void sub_22E949BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v38 = a37;
  a37 = 0;
  if (v38) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a37, v38);
  }
  _Unwind_Resume(a1);
}

void sub_22E949BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_22E949C00(_Unwind_Exception *a1)
{
}

void sub_22E949C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_22E949C2C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E949C34);
  }
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::Task()
{
  return 4;
}

void xgboost::FromJson<xgboost::obj::LambdaRankParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, unsigned char *a3)
{
  uint64_t v5 = (xgboost::obj::LambdaRankParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  char v6 = (void *)*((void *)v5 + 2);
  uint64_t v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      size_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      unint64_t v15 = (long long *)(v6 + 4);
      std::exception_ptr v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      uint64_t v5 = (xgboost::obj::LambdaRankParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          char v6 = v11;
        }
        while (!v12);
      }
      char v6 = v11;
    }
    while (v11 != v7);
  }
  if (*a3)
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71B30, (uint64_t)a3, v13, v14, 0, a1, 0);
  }
  else
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71B30, (uint64_t)a3, v13, v14, a1, 0);
    *a3 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E949DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::obj::LambdaRankParam>(xgboost::obj::LambdaRankParam *a1)
{
  *((void *)a1 + 1) = 0x300000000;
  *(void *)a1 = &unk_26E24E128;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 2) = (char *)a1 + 24;
  uint64_t v1 = (uint64_t)a1 + 16;
  *((void *)a1 + 4) = 0;
  xgboost::obj::LambdaRankParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_26AD71B30, &v3);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v4, (const void **)&v3.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v3.__end_->first.__r_.__value_.__l.__data_);
  uint64_t v6 = &v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  uint64_t v2 = v4;
  if ((void **)v4 != &v5)
  {
    xgboost::JsonString::JsonString(&v3, (long long *)(v4 + 56));
    uint64_t v6 = (std::vector<std::pair<std::string, std::string>> *)(v2 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1, (const void **)(v2 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v6);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v4, v5);
}

void sub_22E949F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::obj::LambdaRankParam *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71B30, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71B30, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E94A080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::obj::ListEntry::CmpPred(float *a1, float *a2)
{
  return *a1 > *a2;
}

void std::vector<std::pair<float,unsigned int>>::resize(void *a1, unint64_t a2)
{
  std::vector<std::pair<std::string, std::string>> v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    float v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7, v11);
  uint64_t v13 = &v12[8 * v5];
  unint64_t v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  uint64_t v16 = &v13[8 * v6];
  unint64_t v18 = (char *)*a1;
  size_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    size_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

void *std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v1 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(12 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = a2 - 12;
      uint64_t result = (*a3)((uint64_t)(a2 - 12), result);
      if (result)
      {
        int v10 = *(_DWORD *)(v8 + 8);
        uint64_t v11 = *(void *)v8;
        int v12 = *((_DWORD *)a2 - 1);
        *(void *)uint64_t v8 = *(void *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(void *)uint64_t v9 = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v24 = a5;
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = result + 12 * (a4 >> 1);
      unint64_t v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v26, a3, v27, a5);
        uint64_t v28 = v24 + 12 * v25;
        uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8 + 12 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        unint64_t v29 = v24 + 12 * a4;
        uint64_t v30 = v28;
        while (v30 != v29)
        {
          uint64_t result = (*a3)(v30, v24);
          if (result)
          {
            uint64_t v31 = *(void *)v30;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v30 + 8);
            *(void *)uint64_t v8 = v31;
            v30 += 12;
          }
          else
          {
            uint64_t v32 = *(void *)v24;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v24 + 8);
            *(void *)uint64_t v8 = v32;
            v24 += 12;
          }
          v8 += 12;
          if (v24 == v28)
          {
            if (v30 != v29)
            {
              uint64_t v33 = 0;
              do
              {
                uint64_t v34 = v8 + v33;
                uint64_t v35 = *(void *)(v30 + v33);
                *(_DWORD *)(v34 + 8) = *(_DWORD *)(v30 + v33 + 8);
                *(void *)uint64_t v34 = v35;
                v33 += 12;
              }
              while (v30 + v33 != v29);
            }
            return result;
          }
        }
        if (v24 != v28)
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = v8 + v36;
            uint64_t v38 = *(void *)(v24 + v36);
            *(_DWORD *)(v37 + 8) = *(_DWORD *)(v24 + v36 + 8);
            *(void *)uint64_t v37 = v38;
            v36 += 12;
          }
          while (v24 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8 + 12 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v24, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8, (char *)(v8 + 12 * (a4 >> 1)), a2, (uint64_t (**)(char *, char *))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v24, a6);
      }
    }
    else if ((char *)result != a2)
    {
      uint64_t v14 = result + 12;
      if ((char *)(result + 12) != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = result;
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = v14;
          uint64_t result = (*a3)(v14, v17);
          if (result)
          {
            uint64_t v18 = *(void *)v16;
            int v40 = *(_DWORD *)(v16 + 8);
            uint64_t v39 = v18;
            uint64_t v19 = v15;
            while (1)
            {
              uint64_t v20 = v8 + v19;
              *(void *)(v20 + 12) = *(void *)(v8 + v19);
              *(_DWORD *)(v20 + 20) = *(_DWORD *)(v8 + v19 + 8);
              if (!v19) {
                break;
              }
              v19 -= 12;
              uint64_t result = (*a3)((uint64_t)&v39, v19 + v8);
              if ((result & 1) == 0)
              {
                uint64_t v21 = v8 + v19 + 12;
                goto LABEL_15;
              }
            }
            uint64_t v21 = v8;
LABEL_15:
            uint64_t v22 = v39;
            *(_DWORD *)(v21 + 8) = v40;
            *(void *)uint64_t v21 = v22;
          }
          uint64_t v14 = v16 + 12;
          v15 += 12;
        }
        while ((char *)(v16 + 12) != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t v11 = (uint64_t *)(a2 - 12);
      uint64_t result = (*a3)(a2 - 12, result);
      if (result)
      {
        uint64_t v12 = *v11;
        *(_DWORD *)(v5 + 8) = *((_DWORD *)v11 + 2);
        *(void *)uint64_t v5 = v12;
        uint64_t v13 = *(void *)v9;
        int v14 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        uint64_t v23 = *(void *)v9;
        *(_DWORD *)(v5 + 8) = *(_DWORD *)(v9 + 8);
        *(void *)uint64_t v5 = v23;
        uint64_t v13 = *v11;
        int v14 = *((_DWORD *)v11 + 2);
      }
      *(_DWORD *)(v5 + 20) = v14;
      *(void *)(v5 + 12) = v13;
    }
    else if (a4 == 1)
    {
      uint64_t v10 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v24 = result + 12 * (a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v24, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v9 + 12 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v5 + 12 * (a4 >> 1), a4 - (a4 >> 1));
      uint64_t v25 = v9 + 12 * (a4 >> 1);
      while (v25 != a2)
      {
        uint64_t result = (*a3)(v25, v9);
        if (result)
        {
          uint64_t v26 = *(void *)v25;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v25 + 8);
          *(void *)uint64_t v5 = v26;
          v25 += 12;
        }
        else
        {
          uint64_t v27 = *(void *)v9;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v9 + 8);
          *(void *)uint64_t v5 = v27;
          v9 += 12;
        }
        v5 += 12;
        if (v9 == v24)
        {
          if (v25 != a2)
          {
            uint64_t v28 = 0;
            do
            {
              uint64_t v29 = v5 + v28;
              uint64_t v30 = *(void *)(v25 + v28);
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v25 + v28 + 8);
              *(void *)uint64_t v29 = v30;
              v28 += 12;
            }
            while (v25 + v28 != a2);
          }
          return result;
        }
      }
      if (v9 != v24)
      {
        uint64_t v31 = 0;
        do
        {
          uint64_t v32 = v5 + v31;
          uint64_t v33 = *(void *)(v9 + v31);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v9 + v31 + 8);
          *(void *)uint64_t v32 = v33;
          v31 += 12;
        }
        while (v9 + v31 != v24);
      }
    }
    else if (result != a2)
    {
      uint64_t v15 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v15;
      uint64_t v16 = result + 12;
      if (result + 12 != a2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a5;
        do
        {
          uint64_t v19 = v18;
          v18 += 12;
          uint64_t result = (*a3)(v16, v19);
          uint64_t v20 = v18;
          if (result)
          {
            *(void *)uint64_t v18 = *(void *)v19;
            *(_DWORD *)(v18 + 8) = *(_DWORD *)(v19 + 8);
            uint64_t v20 = v5;
            if (v19 != v5)
            {
              uint64_t v21 = v17;
              while (1)
              {
                uint64_t v20 = v5 + v21;
                uint64_t result = (*a3)(v16, v5 + v21 - 12);
                if (!result) {
                  break;
                }
                *(void *)uint64_t v20 = *(void *)(v5 + v21 - 12);
                *(_DWORD *)(v20 + 8) = *(_DWORD *)(v5 + v21 - 4);
                v21 -= 12;
                if (!v21)
                {
                  uint64_t v20 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v22 = *(void *)v16;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)uint64_t v20 = v22;
          v16 += 12;
          v17 += 12;
        }
        while (v16 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(char *, char *), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v94 = a6;
  if (a6)
  {
    uint64_t v13 = (char *)result;
    while (a5 > a8 && v94 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v14 = 0;
      uint64_t v15 = -a5;
      while (1)
      {
        uint64_t v16 = &v13[v14];
        uint64_t result = (*a4)(a2, &v13[v14]);
        if (result) {
          break;
        }
        v14 += 12;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v15;
      uint64_t v19 = v94;
      int v92 = a3;
      if (-v15 >= v94)
      {
        if (v15 == -1)
        {
          int v76 = &v13[v14];
          int v104 = *(_DWORD *)&v13[v14 + 8];
          uint64_t v99 = *(void *)&v13[v14];
          uint64_t v77 = *(void *)a2;
          *((_DWORD *)v76 + 2) = *((_DWORD *)a2 + 2);
          *(void *)int v76 = v77;
          *(void *)a2 = v99;
          *((_DWORD *)a2 + 2) = v104;
          return result;
        }
        if (v15 > 0) {
          uint64_t v18 = 1 - v15;
        }
        uint64_t v24 = v18 >> 1;
        uint64_t v26 = a3;
        uint64_t v22 = &v13[12 * (v18 >> 1) + v14];
        uint64_t v25 = a2;
        if (a2 != v26)
        {
          uint64_t v81 = v18 >> 1;
          uint64_t v83 = a4;
          float v87 = v13;
          uint64_t v27 = *a4;
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v92 - a2) >> 2);
          __srca = a2;
          do
          {
            uint64_t v29 = &a2[12 * (v28 >> 1)];
            int v30 = v27(v29, v22);
            if (v30) {
              v28 += ~(v28 >> 1);
            }
            else {
              v28 >>= 1;
            }
            if (v30) {
              a2 = v29 + 12;
            }
          }
          while (v28);
          uint64_t v13 = v87;
          uint64_t v24 = v81;
          a4 = v83;
          uint64_t v25 = __srca;
          uint64_t v19 = v94;
        }
        uint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v25) >> 2);
      }
      else
      {
        if (v94 >= 0) {
          uint64_t v20 = v94;
        }
        else {
          uint64_t v20 = v94 + 1;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = a2;
        a2 += 12 * (v20 >> 1);
        __src = v22;
        if (v22 - v13 != v14)
        {
          uint64_t v82 = v20 >> 1;
          unint64_t v86 = v13;
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v13 - v14) >> 2);
          uint64_t v22 = v16;
          do
          {
            if ((*a4)(a2, &v22[12 * (v23 >> 1)]))
            {
              v23 >>= 1;
            }
            else
            {
              v22 += 12 * (v23 >> 1) + 12;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          uint64_t v13 = v86;
          uint64_t v19 = v94;
          uint64_t v21 = v82;
        }
        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v13 - v14) >> 2);
        uint64_t v25 = __src;
      }
      if (v22 == v25)
      {
        uint64_t v35 = a2;
      }
      else
      {
        uint64_t v31 = a2 - v25;
        if (a2 == v25)
        {
          uint64_t v35 = v22;
        }
        else
        {
          uint64_t v32 = v22 + 12;
          if (v22 + 12 == v25)
          {
            int v101 = *((_DWORD *)v22 + 2);
            uint64_t v96 = *(void *)v22;
            unint64_t v88 = a7;
            uint64_t v38 = v24;
            uint64_t v84 = v21;
            memmove(v22, v25, a2 - v25);
            uint64_t v21 = v84;
            uint64_t v24 = v38;
            a7 = v88;
            uint64_t v19 = v94;
            uint64_t v39 = &v22[v31];
            *(void *)uint64_t v39 = v96;
            uint64_t v35 = &v22[v31];
            *((_DWORD *)v39 + 2) = v101;
          }
          else
          {
            uint64_t v33 = v25 + 12;
            if (v25 + 12 == a2)
            {
              int v102 = *((_DWORD *)a2 - 1);
              uint64_t v97 = *(void *)(a2 - 12);
              if (a2 - 12 != v22)
              {
                unint64_t v89 = a7;
                uint64_t v40 = v24;
                uint64_t v85 = v21;
                memmove(v22 + 12, v22, a2 - 12 - v22);
                uint64_t v21 = v85;
                uint64_t v24 = v40;
                a7 = v89;
                uint64_t v19 = v94;
              }
              uint64_t v35 = v22 + 12;
              *((_DWORD *)v22 + 2) = v102;
              *(void *)uint64_t v22 = v97;
            }
            else
            {
              unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v22) >> 2);
              if (v34 == 0xAAAAAAAAAAAAAAABLL * (v31 >> 2))
              {
                uint64_t v35 = v25;
                do
                {
                  int v100 = *((_DWORD *)v32 - 1);
                  uint64_t v95 = *(void *)(v32 - 12);
                  uint64_t v36 = *(void *)(v33 - 12);
                  *((_DWORD *)v32 - 1) = *((_DWORD *)v33 - 1);
                  *(void *)(v32 - 12) = v36;
                  *(void *)(v33 - 12) = v95;
                  *((_DWORD *)v33 - 1) = v100;
                  if (v32 == v25) {
                    break;
                  }
                  v32 += 12;
                  BOOL v37 = v33 == a2;
                  v33 += 12;
                }
                while (!v37);
              }
              else
              {
                uint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 2);
                unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v22) >> 2);
                do
                {
                  uint64_t v43 = v42;
                  unint64_t v42 = v41;
                  uint64_t v41 = v43 % v41;
                }
                while (v41);
                if (v42)
                {
                  unint64_t v44 = &v22[12 * v42];
                  do
                  {
                    uint64_t v45 = *(void *)(v44 - 12);
                    v44 -= 12;
                    int v103 = *((_DWORD *)v44 + 2);
                    uint64_t v98 = v45;
                    uint64_t v46 = &v44[4 * ((v25 - v22) >> 2)];
                    uint64_t v47 = v44;
                    do
                    {
                      int v48 = v46;
                      uint64_t v49 = *(void *)v46;
                      *((_DWORD *)v47 + 2) = *((_DWORD *)v48 + 2);
                      *(void *)uint64_t v47 = v49;
                      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v48) >> 2);
                      uint64_t v46 = (char *)v48 + 4 * ((v25 - v22) >> 2);
                      BOOL v51 = __OFSUB__(v34, v50);
                      uint64_t v53 = v34 - v50;
                      char v52 = (v53 < 0) ^ v51;
                      uint64_t v54 = &v22[12 * v53];
                      if (!v52) {
                        uint64_t v46 = v54;
                      }
                      uint64_t v47 = (char *)v48;
                    }
                    while (v46 != v44);
                    *((_DWORD *)v48 + 2) = v103;
                    *int v48 = v98;
                  }
                  while (v44 != v22);
                }
                uint64_t v35 = &v22[4 * (v31 >> 2)];
              }
            }
          }
        }
      }
      a5 = -(v24 + v15);
      if (v24 + v21 >= v19 - (v24 + v21) - v15)
      {
        unint64_t v58 = v35;
        uint64_t v59 = v24;
        uint64_t v60 = a5;
        uint64_t v61 = v21;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v35, a2, v92, a4, v60, v19 - v21, a7, a8);
        a2 = v22;
        uint64_t v57 = v61;
        a5 = v59;
        a3 = v58;
      }
      else
      {
        float v55 = &v13[v14];
        uint64_t v16 = v35;
        uint64_t v56 = v19 - v21;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v55, v22, v35, a4, v24, v21, a7, a8);
        uint64_t v57 = v56;
        a3 = v92;
      }
      uint64_t v94 = v57;
      uint64_t v13 = v16;
      if (!v57) {
        return result;
      }
    }
    if (a5 <= v94)
    {
      if (v13 != a2)
      {
        unint64_t v70 = 0;
        do
        {
          unint64_t v71 = &a7[v70];
          uint64_t v72 = *(void *)&v13[v70];
          *((_DWORD *)v71 + 2) = *(_DWORD *)&v13[v70 + 8];
          *(void *)unint64_t v71 = v72;
          v70 += 12;
        }
        while (&v13[v70] != a2);
        if (v70)
        {
          long long v73 = a7;
          while (a2 != a3)
          {
            uint64_t result = (*a4)(a2, v73);
            if (result)
            {
              uint64_t v74 = *(void *)a2;
              *((_DWORD *)v13 + 2) = *((_DWORD *)a2 + 2);
              *(void *)uint64_t v13 = v74;
              a2 += 12;
            }
            else
            {
              uint64_t v75 = *(void *)v73;
              *((_DWORD *)v13 + 2) = *((_DWORD *)v73 + 2);
              *(void *)uint64_t v13 = v75;
              v73 += 12;
            }
            v13 += 12;
            if (&a7[v70] == v73) {
              return result;
            }
          }
          return (uint64_t)memmove(v13, v73, a7 - v73 + v70);
        }
      }
    }
    else if (a3 != a2)
    {
      unint64_t v62 = 0;
      do
      {
        unint64_t v63 = &a7[v62];
        uint64_t v64 = *(void *)&a2[v62];
        *((_DWORD *)v63 + 2) = *(_DWORD *)&a2[v62 + 8];
        *(void *)unint64_t v63 = v64;
        v62 += 12;
      }
      while (&a2[v62] != a3);
      if (v62)
      {
        uint64_t v65 = &a7[v62];
        uint64_t v66 = a3 - 12;
        while (a2 != v13)
        {
          uint64_t result = (*a4)(v65 - 12, a2 - 12);
          if (result) {
            long long v67 = a2 - 12;
          }
          else {
            long long v67 = v65 - 12;
          }
          if (result) {
            a2 -= 12;
          }
          int v68 = *((_DWORD *)v67 + 2);
          uint64_t v69 = *(void *)v67;
          if (!result) {
            v65 -= 12;
          }
          *(void *)uint64_t v66 = v69;
          *((_DWORD *)v66 + 2) = v68;
          v66 -= 12;
          if (v65 == a7) {
            return result;
          }
        }
        unint64_t v78 = 0;
        do
        {
          uint64_t v79 = &v66[v78];
          uint64_t v80 = *(void *)&v65[v78 - 12];
          *((_DWORD *)v79 + 2) = *(_DWORD *)&v65[v78 - 4];
          *(void *)uint64_t v79 = v80;
          v78 -= 12;
        }
        while (&v65[v78] != a7);
      }
    }
  }
  return result;
}

uint64_t std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a2[1];
  int v3 = v2 - *a2;
  if (v2 == *a2) {
    return v2;
  }
  unsigned int v4 = v3 + 1;
  if (v3 == -1)
  {
    uint64_t v20 = a1;
    long long v21 = xmmword_22EA1BD20;
    int64x2_t v22 = vdupq_n_s64(2uLL);
    long long v23 = xmmword_22EA1BD30;
    return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v20);
  }
  uint64_t v6 = __clz(v4);
  uint64_t v7 = 31;
  if (((v4 << v6) & 0x7FFFFFFF) != 0) {
    uint64_t v7 = 32;
  }
  unint64_t v8 = v7 - v6;
  uint64_t v20 = a1;
  *(void *)&long long v21 = v7 - v6;
  BOOL v9 = (unint64_t)(v7 - v6) >= 0x1E;
  uint64_t v10 = v7 - v6 - 30;
  if (!v9) {
    uint64_t v10 = v8;
  }
  BOOL v11 = v10 != 0;
  if (v8 <= 0x1D) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = v8 / v12;
  *((void *)&v21 + 1) = v13;
  v22.i64[0] = v12;
  unsigned int v14 = (-1 << v13) & 0x7FFFFFFE;
  if (v13 >= 0x20) {
    unsigned int v14 = 0;
  }
  LODWORD(v23) = v14;
  if (v14 / v12 < (v14 ^ 0x7FFFFFFE))
  {
    unint64_t v13 = v8 / ++v12;
    *((void *)&v21 + 1) = v13;
    v22.i64[0] = v12;
    if (v13 > 0x1F)
    {
      LODWORD(v23) = 0;
      v22.i64[1] = v12 - (v8 % v12);
      unint64_t v13 = 32;
      goto LABEL_19;
    }
    LODWORD(v23) = (-1 << (v8 / v12)) & 0x7FFFFFFE;
  }
  v22.i64[1] = v12 - v8 % v12;
  if (v13 > 0x1E)
  {
LABEL_19:
    int v15 = 0;
    DWORD1(v23) = 0;
    goto LABEL_20;
  }
  DWORD1(v23) = (-2 << v13) & 0x7FFFFFFE;
  int v15 = 1;
LABEL_20:
  unsigned int v16 = 0xFFFFFFFF >> -(char)v13;
  if (!v13) {
    unsigned int v16 = 0;
  }
  unsigned int v17 = 0xFFFFFFFF >> ~(_BYTE)v13;
  if (!v15) {
    unsigned int v17 = -1;
  }
  *((void *)&v23 + 1) = __PAIR64__(v17, v16);
  do
    unsigned int v18 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v20);
  while (v18 >= v4);
  return *a2 + v18;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    LODWORD(result) = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      int v12 = result << v5;
      if (v5 >= 0x20) {
        int v12 = 0;
      }
      uint64_t result = ((v6 - 1) & *(_DWORD *)(a1 + 48)) + v12;
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v13 = *(void *)(a1 + 24);
  if (v2 < v13)
  {
    unsigned int v14 = *(unsigned int **)a1;
    unsigned int v15 = *(_DWORD *)(a1 + 44);
    unint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(a1 + 52);
    unsigned int v18 = *v14;
    while (1)
    {
      unsigned int v19 = v18 / 0xADC8;
      unsigned int v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      BOOL v9 = v20 >= v19;
      unsigned int v21 = v20 - v19;
      if (v9) {
        int v22 = 0;
      }
      else {
        int v22 = 0x7FFFFFFF;
      }
      unsigned int v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        int v23 = result << (v16 + 1);
        if (v16 >= 0x1F) {
          int v23 = 0;
        }
        uint64_t result = ((v18 - 1) & v17) + v23;
        if (++v2 == v13) {
          break;
        }
      }
    }
    *unsigned int v14 = v18;
  }
  return result;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::~LambdaRankObj()
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (unsigned char *)(a1 + 16));
  unsigned int v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E94B2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "rank:ndcg");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)unsigned int v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E94B49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (unsigned char *)(a1 + 16), a2);
  int v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  std::string __p = (void *)((uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2);
  v181.__ptr_ = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if (__p != v181.__ptr_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v180, 2uLL, __x);
  unsigned int v8 = *(unsigned int **)(a3 + 48);
  uint64_t v9 = (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2;
  std::vector<unsigned int>::pointer begin = v180.__begin_;
  v180.__begin_[1] = v9;
  int v11 = *(unsigned int **)(a3 + 56);
  if (v11 == v8)
  {
    int v12 = &v180;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = v8;
    int v12 = (std::vector<unsigned int> *)(a3 + 48);
  }
  if (v11 == v8) {
    p_std::vector<int>::pointer end = &v180.__end_;
  }
  else {
    p_std::vector<int>::pointer end = (std::vector<unsigned int>::pointer *)(a3 + 56);
  }
  if (*p_end == begin || v9 != *(*p_end - 1))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v153 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)": ", 2);
    uint64_t v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"group structure not consistent with #rows", 41);
    v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"group ponter size: ", 19);
    v158 = (void *)std::ostream::operator<<();
    v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"labels size: ", 13);
    v160 = (void *)std::ostream::operator<<();
    v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    unsigned int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"rank:ndcg", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (v189 < 0) {
      operator delete(__p);
    }
  }
  unint64_t v16 = &v180.__end_;
  if (v11 != v8) {
    unint64_t v16 = (std::vector<unsigned int>::pointer *)(a3 + 56);
  }
  unint64_t v17 = (unint64_t)((char *)*v16 - (char *)v12->__begin_) >> 2;
  uint64_t v18 = (v17 - 1);
  if (v17 == 1)
  {
    float v19 = 0.0;
  }
  else
  {
    float v19 = 0.0;
    unsigned int v20 = **(float ***)(a3 + 72);
    uint64_t v21 = (v17 - 1);
    do
    {
      if (*(void *)(*(void *)(a3 + 72) + 8) == **(void **)(a3 + 72)) {
        float v22 = 1.0;
      }
      else {
        float v22 = *v20;
      }
      float v19 = v19 + v22;
      ++v20;
      --v21;
    }
    while (v21);
  }
  int v23 = *(void **)a2;
  uint64_t v24 = *(uint64_t **)(a3 + 24);
  uint64_t v25 = v24[1];
  uint64_t v170 = *(void *)(a3 + 40);
  uint64_t v171 = *v24;
  uint64_t v26 = *a5;
  unint64_t v27 = (uint64_t)(v23[1] - *v23) >> 2;
  *(void *)__x = 0;
  v172 = (uint64_t *)v26;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v26, v27, __x);
  *(void *)__x = 0;
  v191[0].__m_.__sig = 850045863;
  memset(v191[0].__m_.__opaque, 0, sizeof(v191[0].__m_.__opaque));
  unint64_t v28 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  unsigned int v29 = 1111 * a4
      + 1111
      + (((v28 + ((1111 * a4 + 1111 - v28) >> 1)) >> 30) | ((v28
                                                                                       + ((1111 * a4 + 1111 - v28) >> 1)) >> 30 << 31));
  if (v29 <= 1) {
    unsigned int v29 = 1;
  }
  unsigned int v184 = v29;
  v181.__ptr_ = 0;
  v182 = 0;
  uint64_t v183 = 0;
  if (v18)
  {
    int v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    v179 = 0;
    float v33 = (float)v18 / v19;
    unint64_t v169 = (v25 - v171) >> 2;
    uint64_t v34 = 0;
    v166 = v12;
    v162 = v23;
    uint64_t v163 = v18;
    while (1)
    {
      unint64_t v35 = v12->__begin_[v34];
      uint64_t v177 = v34;
      uint64_t v173 = v34 + 1;
      v174 = v31;
      uint64_t v36 = v30;
      if (v35 < v12->__begin_[v34 + 1])
      {
        do
        {
          unint64_t v37 = v35 * v170;
          if (v35 * v170 >= v169) {
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          }
          uint64_t v38 = v36;
          uint64_t v39 = *v23;
          if (v38 >= v174)
          {
            unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v30) >> 2);
            unint64_t v42 = v41 + 1;
            if (v41 + 1 > 0x1555555555555555) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v43 = v38;
            if (0x5555555555555556 * ((v174 - v30) >> 2) > v42) {
              unint64_t v42 = 0x5555555555555556 * ((v174 - v30) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v174 - v30) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v44 = 0x1555555555555555;
            }
            else {
              unint64_t v44 = v42;
            }
            uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v44);
            int v47 = *(_DWORD *)(v171 + 4 * v37);
            int v48 = &v45[12 * v41];
            *(_DWORD *)int v48 = *(_DWORD *)(v39 + 4 * v35);
            *((_DWORD *)v48 + 1) = v47;
            *((_DWORD *)v48 + 2) = v35;
            uint64_t v49 = v48;
            while (v43 != v30)
            {
              uint64_t v50 = *(void *)(v43 - 12);
              v43 -= 12;
              int v51 = *((_DWORD *)v43 + 2);
              *(void *)(v49 - 12) = v50;
              v49 -= 12;
              *((_DWORD *)v49 + 2) = v51;
            }
            v174 = &v45[12 * v46];
            uint64_t v36 = v48 + 12;
            if (v30) {
              operator delete(v30);
            }
            int v30 = v49;
          }
          else
          {
            int v40 = *(_DWORD *)(v171 + 4 * v37);
            *(_DWORD *)uint64_t v38 = *(_DWORD *)(v39 + 4 * v35);
            *((_DWORD *)v38 + 1) = v40;
            *((_DWORD *)v38 + 2) = v35;
            uint64_t v36 = v38 + 12;
          }
          *(void *)(*v172 + 8 * v35++) = 0;
        }
        while (v35 < v12->__begin_[v173]);
      }
      v185 = xgboost::obj::ListEntry::CmpPred;
      v167 = v36;
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2);
      if (v36 - v30 < 1537)
      {
        uint64_t v53 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v53 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2));
        uint64_t v55 = v54;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v30, v167, (uint64_t (**)(uint64_t, uint64_t))&v185, v52, (uint64_t)v53, v55);
      if (v53) {
        operator delete(v53);
      }
      std::vector<std::pair<float,unsigned int>>::resize(&v181, v52);
      ptr = v181.__ptr_;
      if (v167 != v30)
      {
        unint64_t v58 = (float *)((char *)v181.__ptr_ + 4);
        uint64_t v59 = (float *)(v30 + 4);
        unsigned int v60 = 1;
        do
        {
          float v61 = *v59;
          v59 += 3;
          float v56 = v61;
          *(v58 - 1) = v61;
          *(_DWORD *)unint64_t v58 = v60 - 1;
          v58 += 2;
          BOOL v62 = v52 > v60++;
        }
        while (v62);
      }
      unint64_t v164 = v52;
      unint64_t v63 = v182;
      v186 = xgboost::common::CmpFirst;
      unint64_t v64 = ((char *)v182 - ptr) >> 3;
      if ((char *)v182 - ptr < 1)
      {
        uint64_t v65 = 0;
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v65 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v182 - ptr) >> 3);
        uint64_t v67 = v66;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)ptr, v63, (uint64_t (**)(uint64_t *, uint64_t *))&v186, v64, v65, v67, v56);
      if (v65) {
        operator delete(v65);
      }
      v165 = v30;
      int v68 = (float *)v181.__ptr_;
      uint64_t v69 = (char *)v182;
      if (v182 != v181.__ptr_)
      {
        unint64_t v70 = 0;
        unsigned int v71 = 0;
        unint64_t v72 = ((char *)v182 - (char *)v181.__ptr_) >> 3;
        long long v73 = v32;
        while (1)
        {
          uint64_t v74 = &v68[2 * v70];
          int v75 = v72 - 2;
          int v76 = 1;
          do
          {
            int v77 = v76;
            int v78 = v75;
            unint64_t v70 = v71 + v76;
            if (v72 <= v70) {
              break;
            }
            ++v76;
            --v75;
          }
          while (v68[2 * v70] == *v74);
          if (v78 != -1)
          {
            int v79 = *(_DWORD *)(a1 + 24);
            if (v79) {
              break;
            }
          }
LABEL_104:
          unint64_t v72 = (v69 - (char *)v68) >> 3;
          unsigned int v71 = v70;
          if (v72 <= v70) {
            goto LABEL_107;
          }
        }
        while (1)
        {
          int v175 = v79;
          if (v71 < v70) {
            break;
          }
LABEL_102:
          int v79 = v175 - 1;
          if (v175 == 1)
          {
            int v68 = (float *)v181.__ptr_;
            uint64_t v69 = (char *)v182;
            goto LABEL_104;
          }
        }
        uint64_t v80 = v71;
        while (2)
        {
          LODWORD(v186) = 0;
          HIDWORD(v186) = v78;
          unsigned int v81 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v184, &v186);
          if (v81 >= v71)
          {
            uint64_t v84 = **(void **)(a3 + 72);
            if (*(void *)(*(void *)(a3 + 72) + 8) == v84) {
              float v85 = 1.0;
            }
            else {
              float v85 = *(float *)(v84 + 4 * v177);
            }
            int v100 = (char *)v181.__ptr_ + 8 * v80 + 4;
            int v101 = (int *)((char *)v181.__ptr_ + 8 * v77 + 8 * v81 + 4);
            float v88 = v33 * v85;
            if (v73 >= v179)
            {
              unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v32) >> 2) + 1;
              if (v102 > 0x1555555555555555) {
LABEL_152:
              }
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v179 - v32) >> 2) > v102) {
                unint64_t v102 = 0x5555555555555556 * ((v179 - v32) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v179 - v32) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v103 = 0x1555555555555555;
              }
              else {
                unint64_t v103 = v102;
              }
              std::string::size_type v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v103);
              int v104 = *v101;
              uint64_t v96 = &v93[4 * ((v73 - v32) >> 2)];
              *(_DWORD *)uint64_t v96 = *v100;
              *((_DWORD *)v96 + 1) = v104;
              *((float *)v96 + 2) = v88;
              uint64_t v97 = v96;
              while (v73 != v32)
              {
                uint64_t v105 = *(void *)(v73 - 12);
                v73 -= 12;
                int v106 = *((_DWORD *)v73 + 2);
                *(void *)(v97 - 12) = v105;
                v97 -= 12;
                *((_DWORD *)v97 + 2) = v106;
              }
              goto LABEL_98;
            }
            int v89 = *v100;
            int v90 = *v101;
LABEL_88:
            *(_DWORD *)long long v73 = v89;
            *((_DWORD *)v73 + 1) = v90;
            *((float *)v73 + 2) = v88;
            v73 += 12;
          }
          else
          {
            uint64_t v82 = **(void **)(a3 + 72);
            if (*(void *)(*(void *)(a3 + 72) + 8) == v82) {
              float v83 = 1.0;
            }
            else {
              float v83 = *(float *)(v82 + 4 * v177);
            }
            unint64_t v86 = (int *)((char *)v181.__ptr_ + 8 * v81 + 4);
            float v87 = (int *)((char *)v181.__ptr_ + 8 * v80 + 4);
            float v88 = v33 * v83;
            if (v73 < v179)
            {
              int v89 = *v86;
              int v90 = *v87;
              goto LABEL_88;
            }
            unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v32) >> 2) + 1;
            if (v91 > 0x1555555555555555) {
              goto LABEL_152;
            }
            if (0x5555555555555556 * ((v179 - v32) >> 2) > v91) {
              unint64_t v91 = 0x5555555555555556 * ((v179 - v32) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v179 - v32) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v92 = 0x1555555555555555;
            }
            else {
              unint64_t v92 = v91;
            }
            std::string::size_type v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v92);
            int v95 = *v87;
            uint64_t v96 = &v93[4 * ((v73 - v32) >> 2)];
            *(_DWORD *)uint64_t v96 = *v86;
            *((_DWORD *)v96 + 1) = v95;
            *((float *)v96 + 2) = v88;
            uint64_t v97 = v96;
            while (v73 != v32)
            {
              uint64_t v98 = *(void *)(v73 - 12);
              v73 -= 12;
              int v99 = *((_DWORD *)v73 + 2);
              *(void *)(v97 - 12) = v98;
              v97 -= 12;
              *((_DWORD *)v97 + 2) = v99;
            }
LABEL_98:
            v179 = &v93[12 * v94];
            long long v73 = v96 + 12;
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v97;
          }
          if (++v80 == v70) {
            goto LABEL_102;
          }
          continue;
        }
      }
      long long v73 = v32;
LABEL_107:
      int v30 = v165;
      int v23 = v162;
      v107 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      std::vector<float>::vector(&__p, v164);
      v109 = (float *)__p;
      if (v167 != v165)
      {
        if (v164 <= 1) {
          uint64_t v110 = 1;
        }
        else {
          uint64_t v110 = v164;
        }
        float v111 = (float *)(v165 + 4);
        float v112 = (float *)__p;
        do
        {
          float v113 = *v111;
          v111 += 3;
          float v108 = v113;
          *v112++ = v113;
          --v110;
        }
        while (v110);
      }
      float v114 = v188;
      unint64_t v176 = v188 - v109;
      if ((char *)v188 - (char *)v109 < 513)
      {
LABEL_117:
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v109, v114, v176, 0, 0, v108);
      }
      else
      {
        unint64_t v115 = v188 - v109;
        while (1)
        {
          float v116 = (float *)operator new(4 * v115, v107);
          if (v116) {
            break;
          }
          BOOL v62 = v115 > 1;
          v115 >>= 1;
          if (!v62) {
            goto LABEL_117;
          }
        }
        v117 = v116;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v109, v114, v176, v116, v115, v108);
        operator delete(v117);
      }
      float v118 = (float *)__p;
      int v12 = v166;
      if ((((char *)v188 - (unsigned char *)__p) & 0x3FFFFFFFCLL) == 0) {
        break;
      }
      uint64_t v119 = 0;
      uint64_t v120 = ((unint64_t)((char *)v188 - (unsigned char *)__p) >> 2);
      double v121 = 0.0;
      do
      {
        unsigned int v122 = v118[v119];
        if (v122) {
          float v123 = (float)~(-1 << v122) / log2f((float)(v119 + 2));
        }
        else {
          float v123 = 0.0;
        }
        double v121 = v121 + v123;
        ++v119;
      }
      while (v120 != v119);
      float v124 = v121;
      v188 = v118;
      operator delete(v118);
      if (v124 == 0.0) {
        goto LABEL_134;
      }
      if (v32 != v73)
      {
        v125 = (float *)v32;
        float v126 = 1.0 / v124;
        do
        {
          unsigned int v127 = *((_DWORD *)v125 + 1);
          int v128 = (int)*(float *)&v165[12 * *(unsigned int *)v125 + 4];
          int v129 = (int)*(float *)&v165[12 * v127 + 4];
          float v130 = 1.0 / log2f((float)*(unsigned int *)v125 + 2.0);
          float v131 = log2f((float)v127 + 2.0);
          float v132 = v126
               * (float)((float)((float)((float)(1.0 / v131) * (float)~(-1 << v129))
                               + (float)((float)~(-1 << v128) * v130))
                       - (float)((float)((float)(1.0 / v131) * (float)~(-1 << v128))
                               + (float)((float)~(-1 << v129) * v130)));
          float v133 = -v132;
          if (v132 >= 0.0) {
            float v133 = v132;
          }
          v125[2] = v125[2] * v133;
          v125 += 3;
        }
        while (v125 != (float *)v73);
      }
LABEL_137:
      float v135 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      float v136 = *(float *)(a1 + 32);
      if (v136 != 0.0) {
        float v135 = v135 * (float)(v136 / (float)(v166->__begin_[v173] - v166->__begin_[v177]));
      }
      uint64_t v31 = v174;
      if (v32 == v73)
      {
        uint64_t v34 = v173;
      }
      else
      {
        uint64_t v137 = *v172;
        v138 = (float *)v32;
        do
        {
          v139 = (float *)&v165[12 * *(unsigned int *)v138];
          uint64_t v140 = (float *)&v165[12 * *((unsigned int *)v138 + 1)];
          float v141 = v135 * v138[2];
          float v142 = *v139 - *v140;
          if (v142 >= -88.7) {
            float v143 = -v142;
          }
          else {
            float v143 = 88.7;
          }
          float v144 = 1.0 / (float)((float)(expf(v143) + 1.0) + 1.0e-16);
          float v145 = v144 + -1.0;
          float v146 = v144 * (float)(1.0 - v144);
          if (v146 < 1.0e-16) {
            float v146 = 1.0e-16;
          }
          float v147 = (float)(v141 + v141) * v146;
          v148 = (float *)(v137 + 8 * *((unsigned int *)v139 + 2));
          float v149 = v148[1] + v147;
          float *v148 = *v148 + (float)(v141 * v145);
          v148[1] = v149;
          uint64_t v150 = (float *)(v137 + 8 * *((unsigned int *)v140 + 2));
          float v151 = v150[1] + v147;
          *uint64_t v150 = *v150 - (float)(v141 * v145);
          v150[1] = v151;
          v138 += 3;
        }
        while (v138 != (float *)v73);
        uint64_t v34 = v173;
        uint64_t v31 = v174;
      }
      if (v34 == v163)
      {
        if (v181.__ptr_)
        {
          v182 = v181.__ptr_;
          operator delete(v181.__ptr_);
        }
        if (v165) {
          operator delete(v165);
        }
        if (v32) {
          operator delete(v32);
        }
        goto LABEL_160;
      }
    }
    if (__p)
    {
      v188 = (float *)__p;
      operator delete(__p);
    }
LABEL_134:
    if (v32 != v73)
    {
      unint64_t v134 = v32;
      do
      {
        *((_DWORD *)v134 + 2) = 0;
        v134 += 12;
      }
      while (v134 != v73);
    }
    goto LABEL_137;
  }
LABEL_160:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v191);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v180.__begin_)
  {
    v180.__end_ = v180.__begin_;
    operator delete(v180.__begin_);
  }
}

void sub_22E94C468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a41);
  if (v41) {
    operator delete(v41);
  }
  JUMPOUT(0x22E94C5F0);
}

void sub_22E94C478(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3) {
    operator delete(v3);
  }
  if (v4) {
    operator delete(v4);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E94C2E4);
  }
  JUMPOUT(0x22E94C570);
}

void sub_22E94C48C(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3) {
    operator delete(v3);
  }
  if (v4) {
    operator delete(v4);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E94C2E4);
  }
  JUMPOUT(0x22E94C570);
}

void sub_22E94C4A8()
{
}

void sub_22E94C540()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E94C5A8);
}

void sub_22E94C54C()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E94C5A8);
}

void sub_22E94C55C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (v43) {
    operator delete(v43);
  }
  JUMPOUT(0x22E94C5F0);
}

void sub_22E94C564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v42 = a41;
  a41 = 0;
  if (v42) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a41, v42);
  }
  _Unwind_Resume(a1);
}

void sub_22E94C584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_22E94C5BC(_Unwind_Exception *a1)
{
}

void sub_22E94C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_22E94C5E8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E94C5F0);
  }
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::Task()
{
  return 4;
}

float std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *a1, float *a2, unint64_t a3, float *a4, uint64_t a5, float result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      uint64_t result = *(a2 - 1);
      float v8 = *a1;
      if (result > *a1)
      {
        *a1 = result;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v17 = a4;
      unint64_t v18 = a3 >> 1;
      float v19 = &a1[a3 >> 1];
      unint64_t v20 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        float v21 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, v20, a4, result);
        float v22 = &v17[v18];
        uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v22, v21);
        int v23 = &v17[a3];
        uint64_t v24 = v22;
        while (v24 != v23)
        {
          uint64_t v25 = v24;
          uint64_t result = *v24;
          float v26 = *v17;
          BOOL v27 = *v24 <= *v17;
          BOOL v28 = *v24 > *v17;
          unsigned int v29 = v27;
          if (v27) {
            float v30 = *v17;
          }
          else {
            float v30 = result;
          }
          v17 += v29;
          uint64_t v24 = &v25[v28];
          *v7++ = v30;
          if (v17 == v22)
          {
            if (v24 != v23)
            {
              uint64_t v31 = 0;
              if (result > v26) {
                char v32 = 1;
              }
              else {
                char v32 = 2;
              }
              float v33 = &v25[v32 & 1];
              do
              {
                uint64_t result = v33[v31];
                v7[v31++] = result;
              }
              while (&v33[v31] != v23);
            }
            return result;
          }
        }
        if (v17 != v22)
        {
          uint64_t v34 = 0;
          do
          {
            uint64_t result = v17[v34];
            v7[v34++] = result;
          }
          while (&v17[v34] != v22);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, v20, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v17, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v7, &v7[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v17, a5);
      }
    }
    else if (a1 != a2)
    {
      unsigned int v10 = a1 + 1;
      if (a1 + 1 != a2)
      {
        uint64_t v11 = 0;
        int v12 = a1;
        do
        {
          float v13 = *v12;
          int v12 = v10;
          uint64_t result = *v10;
          if (*v10 > v13)
          {
            uint64_t v14 = v11;
            while (1)
            {
              *(float *)((char *)a1 + v14 + 4) = v13;
              if (!v14) {
                break;
              }
              float v13 = *(float *)((char *)a1 + v14 - 4);
              v14 -= 4;
              if (result <= v13)
              {
                unsigned int v15 = (float *)((char *)a1 + v14 + 4);
                goto LABEL_15;
              }
            }
            unsigned int v15 = a1;
LABEL_15:
            *unsigned int v15 = result;
          }
          unsigned int v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *a1, float *a2, unint64_t a3, float *a4, float result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      uint64_t result = *v7;
      *uint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = *(a2 - 1);
      BOOL v10 = v9 <= *a1;
      if (v9 <= *a1) {
        float v9 = *a1;
      }
      *a4 = v9;
      uint64_t v5 = a4 + 1;
      if (v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      float v19 = &a1[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        float v21 = v20;
        uint64_t result = *v20;
        float v22 = *v7;
        BOOL v23 = *v20 <= *v7;
        BOOL v24 = *v20 > *v7;
        if (v23) {
          float v25 = *v7;
        }
        else {
          float v25 = result;
        }
        unint64_t v20 = &v21[v24];
        v7 += v23;
        *v5++ = v25;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v26 = 0;
            BOOL v27 = &v21[result > v22];
            do
            {
              uint64_t result = v27[v26];
              v5[v26++] = result;
            }
            while (&v27[v26] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v28 = 0;
        do
        {
          uint64_t result = v7[v28];
          v5[v28++] = result;
        }
        while (&v7[v28] != v19);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v11 = a1 + 1;
      uint64_t result = *a1;
      *a4 = *a1;
      if (a1 + 1 != a2)
      {
        uint64_t v12 = 0;
        float v13 = a4;
        uint64_t v14 = a4;
        do
        {
          float v15 = *v14++;
          uint64_t result = v15;
          if (*v11 <= v15)
          {
            *uint64_t v14 = *v11;
          }
          else
          {
            v13[1] = result;
            unint64_t v16 = a4;
            if (v13 != a4)
            {
              uint64_t v17 = v12;
              while (1)
              {
                unint64_t v16 = (float *)((char *)a4 + v17);
                float v18 = *(float *)((char *)a4 + v17 - 4);
                if (*v11 <= v18) {
                  break;
                }
                *unint64_t v16 = v18;
                v17 -= 4;
                if (!v17)
                {
                  unint64_t v16 = a4;
                  break;
                }
              }
            }
            uint64_t result = *v11;
            *unint64_t v16 = *v11;
          }
          ++v11;
          v12 += 4;
          float v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

float *std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    uint64_t v11 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v12 = 0;
      float v13 = *a2;
      uint64_t v14 = -a4;
      while (1)
      {
        float v15 = v11[v12 / 4];
        if (v13 > v15) {
          break;
        }
        v12 += 4;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v14;
      float v18 = &v11[v12 / 4];
      if (-v14 >= v7)
      {
        if (v14 == -1)
        {
          v11[v12 / 4] = v13;
          *a2 = v15;
          return result;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v28 = v17 >> 1;
        float v22 = &v11[(v17 >> 1) + v12 / 4];
        float v21 = a2;
        if (a2 != a3)
        {
          unint64_t v29 = a3 - a2;
          float v21 = a2;
          do
          {
            unint64_t v30 = v29 >> 1;
            uint64_t v31 = &v21[v29 >> 1];
            float v33 = *v31;
            char v32 = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v33 > *v22) {
              float v21 = v32;
            }
            else {
              unint64_t v29 = v30;
            }
          }
          while (v29);
        }
        uint64_t v20 = v21 - a2;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = v7 + 1;
        }
        uint64_t v20 = v19 >> 1;
        float v21 = &a2[v19 >> 1];
        float v22 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          unint64_t v23 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 2;
          float v22 = &v11[v12 / 4];
          do
          {
            unint64_t v24 = v23 >> 1;
            float v25 = &v22[v23 >> 1];
            float v27 = *v25;
            uint64_t v26 = v25 + 1;
            v23 += ~(v23 >> 1);
            if (*v21 > v27) {
              unint64_t v23 = v24;
            }
            else {
              float v22 = v26;
            }
          }
          while (v23);
        }
        uint64_t v28 = (uint64_t)((char *)v22 - (char *)v11 - v12) >> 2;
      }
      if (v22 == a2)
      {
        a2 = v21;
      }
      else
      {
        uint64_t v34 = (char *)v21 - (char *)a2;
        if (v21 == a2)
        {
          a2 = v22;
        }
        else
        {
          unint64_t v35 = v22 + 1;
          if (v22 + 1 == a2)
          {
            float v40 = *v22;
            float v83 = a6;
            uint64_t v85 = a7;
            unint64_t v41 = a3;
            uint64_t v79 = v20;
            uint64_t v81 = v28;
            memmove(v22, a2, (char *)v21 - (char *)a2);
            uint64_t v20 = v79;
            uint64_t v28 = v81;
            float v18 = &v11[v12 / 4];
            a6 = v83;
            a7 = v85;
            a3 = v41;
            a2 = (float *)((char *)v22 + v34);
            *(float *)((char *)v22 + v34) = v40;
          }
          else
          {
            uint64_t v36 = a2 + 1;
            if (a2 + 1 == v21)
            {
              int v42 = *((_DWORD *)v21 - 1);
              a2 = v22 + 1;
              if (v21 - 1 != v22)
              {
                uint64_t v84 = a6;
                uint64_t v86 = a7;
                uint64_t v43 = a3;
                uint64_t v80 = v20;
                uint64_t v82 = v28;
                memmove(v22 + 1, v22, (char *)(v21 - 1) - (char *)v22);
                uint64_t v20 = v80;
                uint64_t v28 = v82;
                float v18 = &v11[v12 / 4];
                a6 = v84;
                a7 = v86;
                a3 = v43;
              }
              *(_DWORD *)float v22 = v42;
            }
            else
            {
              uint64_t v37 = a2 - v22;
              if (v37 == v34 >> 2)
              {
                do
                {
                  int v38 = *((_DWORD *)v35 - 1);
                  *(v35 - 1) = *(v36 - 1);
                  *((_DWORD *)v36 - 1) = v38;
                  if (v35 == a2) {
                    break;
                  }
                  ++v35;
                }
                while (v36++ != v21);
              }
              else
              {
                uint64_t v44 = v34 >> 2;
                uint64_t v45 = a2 - v22;
                do
                {
                  uint64_t v46 = v45;
                  uint64_t v45 = v44;
                  uint64_t v44 = v46 % v44;
                }
                while (v44);
                if (v45)
                {
                  int v47 = &v22[v45];
                  do
                  {
                    int v48 = *((_DWORD *)v47-- - 1);
                    int v49 = v48;
                    uint64_t v50 = &v47[v37];
                    int v51 = v47;
                    do
                    {
                      unint64_t v52 = v50;
                      *int v51 = *v50;
                      uint64_t v53 = &v50[v37];
                      BOOL v54 = __OFSUB__(v37, v21 - v50);
                      uint64_t v56 = v37 - (v21 - v50);
                      char v55 = (v56 < 0) ^ v54;
                      uint64_t v50 = &v22[v56];
                      if (v55) {
                        uint64_t v50 = v53;
                      }
                      int v51 = v52;
                    }
                    while (v50 != v47);
                    *(_DWORD *)unint64_t v52 = v49;
                  }
                  while (v47 != v22);
                }
                a2 = &v22[v34 >> 2];
              }
            }
          }
        }
      }
      a4 = -(v28 + v14);
      uint64_t v57 = v7 - v20;
      if (v28 + v20 >= v7 - (v28 + v20) - v14)
      {
        unint64_t v63 = a2;
        unint64_t v64 = v21;
        uint64_t v65 = v28;
        uint64_t v66 = -(v28 + v14);
        uint64_t v67 = v20;
        uint64_t v68 = v7 - v20;
        uint64_t v59 = a6;
        uint64_t v60 = a7;
        uint64_t v69 = v18;
        uint64_t result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a2, v64, a3, v66, v68);
        BOOL v62 = v69;
        a2 = v22;
        uint64_t v57 = v67;
        a4 = v65;
        a3 = v63;
      }
      else
      {
        unint64_t v58 = &v11[v12 / 4];
        uint64_t v59 = a6;
        uint64_t v60 = a7;
        float v61 = a3;
        uint64_t result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v58, v22, a2, v28, v20);
        a3 = v61;
        BOOL v62 = a2;
        a2 = v21;
      }
      uint64_t v7 = v57;
      uint64_t v11 = v62;
      a6 = v59;
      a7 = v60;
      if (!v57) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (v11 != a2)
      {
        uint64_t v74 = 0;
        do
        {
          a6[v74] = v11[v74];
          ++v74;
        }
        while (&v11[v74] != a2);
        if (v74 * 4)
        {
          int v75 = a6;
          while (a2 != a3)
          {
            float v76 = *a2;
            BOOL v77 = *a2 <= *v75;
            if (*a2 <= *v75) {
              float v76 = *v75;
            }
            a2 += *a2 > *v75;
            v75 += v77;
            *v11++ = v76;
            if (&a6[v74] == v75) {
              return result;
            }
          }
          return (float *)memmove(v11, v75, (char *)a6 - (char *)v75 + v74 * 4);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v70 = 0;
      do
      {
        a6[v70] = a2[v70];
        ++v70;
      }
      while (&a2[v70] != a3);
      if (v70 * 4)
      {
        unsigned int v71 = &a6[v70];
        unint64_t v72 = a3 - 1;
        while (a2 != v11)
        {
          float v73 = *(v71 - 1);
          if (v73 <= *(a2 - 1)) {
            --v71;
          }
          else {
            float v73 = *--a2;
          }
          *v72-- = v73;
          if (v71 == a6) {
            return result;
          }
        }
        uint64_t v78 = 0;
        do
        {
          v72[v78] = v71[v78 - 1];
          --v78;
        }
        while (&v71[v78] != a6);
      }
    }
  }
  return result;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::~LambdaRankObj()
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (unsigned char *)(a1 + 16));
  float v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E94D0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "rank:map");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)float v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E94D240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (unsigned char *)(a1 + 16), a2);
  int v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v189 = *MEMORY[0x263EF8340];
  std::string __p = (void *)(((*a2)[1] - **a2) >> 2);
  v180.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8)
                                                               - **(void **)(a3 + 24)) >> 2);
  if (__p != v180.__begin_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v180, 2uLL, __x);
  float v8 = *(unsigned int **)(a3 + 48);
  uint64_t v9 = (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2;
  std::vector<unsigned int>::pointer begin = v180.__begin_;
  v180.__begin_[1] = v9;
  uint64_t v11 = *(unsigned int **)(a3 + 56);
  if (v11 == v8)
  {
    unint64_t v12 = &v180;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = v8;
    unint64_t v12 = (std::vector<unsigned int> *)(a3 + 48);
  }
  if (v11 == v8) {
    p_std::vector<int>::pointer end = &v180.__end_;
  }
  else {
    p_std::vector<int>::pointer end = (std::vector<unsigned int>::pointer *)(a3 + 56);
  }
  if (*p_end == begin || v9 != *(*p_end - 1))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v154 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    uint64_t v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)": ", 2);
    v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"group structure not consistent with #rows", 41);
    v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"group ponter size: ", 19);
    v159 = (void *)std::ostream::operator<<();
    v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"labels size: ", 13);
    v161 = (void *)std::ostream::operator<<();
    v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"rank:map", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (SHIBYTE(v183) < 0) {
      operator delete(__p);
    }
  }
  unint64_t v16 = &v180.__end_;
  if (v11 != v8) {
    unint64_t v16 = (std::vector<unsigned int>::pointer *)(a3 + 56);
  }
  unint64_t v17 = (unint64_t)((char *)*v16 - (char *)v12->__begin_) >> 2;
  uint64_t v18 = (v17 - 1);
  if (v17 == 1)
  {
    float v19 = 0.0;
  }
  else
  {
    float v19 = 0.0;
    uint64_t v20 = **(float ***)(a3 + 72);
    uint64_t v21 = (v17 - 1);
    do
    {
      if (*(void *)(*(void *)(a3 + 72) + 8) == **(void **)(a3 + 72)) {
        float v22 = 1.0;
      }
      else {
        float v22 = *v20;
      }
      float v19 = v19 + v22;
      ++v20;
      --v21;
    }
    while (v21);
  }
  unint64_t v23 = *(uint64_t **)(a3 + 24);
  uint64_t v24 = v23[1];
  uint64_t v171 = *(void *)(a3 + 40);
  uint64_t v172 = *v23;
  uint64_t v25 = *a5;
  uint64_t v170 = *a2;
  unint64_t v26 = ((*a2)[1] - **a2) >> 2;
  *(void *)__x = 0;
  uint64_t v173 = (uint64_t *)v25;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v25, v26, __x);
  *(void *)__x = 0;
  v188[0].__m_.__sig = 850045863;
  memset(v188[0].__m_.__opaque, 0, sizeof(v188[0].__m_.__opaque));
  unint64_t v27 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  unsigned int v28 = 1111 * a4
      + 1111
      + (((v27 + ((1111 * a4 + 1111 - v27) >> 1)) >> 30) | ((v27
                                                                                       + ((1111 * a4 + 1111 - v27) >> 1)) >> 30 << 31));
  if (v28 <= 1) {
    unsigned int v28 = 1;
  }
  unsigned int v184 = v28;
  std::string __p = 0;
  v182 = 0;
  uint64_t v183 = 0;
  if (v18)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    char v32 = 0;
    float v33 = 0;
    float v34 = (float)v18 / v19;
    unint64_t v169 = (v24 - v172) >> 2;
    uint64_t v164 = v18;
    uint64_t v163 = v12;
    while (1)
    {
      unint64_t v35 = v12->__begin_[v29];
      uint64_t v178 = v29;
      uint64_t v36 = v30;
      uint64_t v174 = v29 + 1;
      int v175 = v31;
      if (v35 < v12->__begin_[v29 + 1])
      {
        do
        {
          unint64_t v37 = v35 * v171;
          if (v35 * v171 >= v169) {
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          }
          int v38 = v36;
          uint64_t v39 = *v170;
          if (v38 >= v175)
          {
            int v42 = v12;
            unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v30) >> 2);
            unint64_t v44 = v43 + 1;
            if (v43 + 1 > 0x1555555555555555) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = v38;
            if (0x5555555555555556 * ((v175 - v30) >> 2) > v44) {
              unint64_t v44 = 0x5555555555555556 * ((v175 - v30) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v175 - v30) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v46 = 0x1555555555555555;
            }
            else {
              unint64_t v46 = v44;
            }
            int v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v46);
            int v49 = *(_DWORD *)(v172 + 4 * v37);
            uint64_t v50 = &v47[12 * v43];
            *(_DWORD *)uint64_t v50 = *(_DWORD *)(v39 + 4 * v35);
            *((_DWORD *)v50 + 1) = v49;
            *((_DWORD *)v50 + 2) = v35;
            int v51 = v50;
            if (v45 == v30)
            {
              uint64_t v41 = v174;
            }
            else
            {
              uint64_t v41 = v174;
              do
              {
                uint64_t v52 = *(void *)(v45 - 12);
                v45 -= 12;
                int v53 = *((_DWORD *)v45 + 2);
                *(void *)(v51 - 12) = v52;
                v51 -= 12;
                *((_DWORD *)v51 + 2) = v53;
              }
              while (v45 != v30);
            }
            int v175 = &v47[12 * v48];
            uint64_t v36 = v50 + 12;
            if (v30) {
              operator delete(v30);
            }
            unint64_t v30 = v51;
            unint64_t v12 = v42;
          }
          else
          {
            int v40 = *(_DWORD *)(v172 + 4 * v37);
            *(_DWORD *)int v38 = *(_DWORD *)(v39 + 4 * v35);
            *((_DWORD *)v38 + 1) = v40;
            *((_DWORD *)v38 + 2) = v35;
            uint64_t v36 = v38 + 12;
            uint64_t v41 = v174;
          }
          *(void *)(*v173 + 8 * v35++) = 0;
        }
        while (v35 < v12->__begin_[v41]);
      }
      v185 = xgboost::obj::ListEntry::CmpPred;
      if (v36 - v30 < 1537)
      {
        BOOL v54 = 0;
        uint64_t v56 = 0;
      }
      else
      {
        BOOL v54 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2));
        uint64_t v56 = v55;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v30, v36, (uint64_t (**)(uint64_t, uint64_t))&v185, 0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2), (uint64_t)v54, v56);
      if (v54) {
        operator delete(v54);
      }
      std::vector<std::pair<float,unsigned int>>::resize(&__p, 0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2));
      unint64_t v58 = __p;
      if (v36 != v30)
      {
        uint64_t v59 = (float *)((char *)__p + 4);
        uint64_t v60 = (float *)(v30 + 4);
        unsigned int v61 = 1;
        do
        {
          float v62 = *v60;
          v60 += 3;
          float v57 = v62;
          *(v59 - 1) = v62;
          *(_DWORD *)uint64_t v59 = v61 - 1;
          v59 += 2;
          BOOL v125 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2) > v61++;
        }
        while (v125);
      }
      unint64_t v63 = v182;
      v186 = xgboost::common::CmpFirst;
      unint64_t v64 = ((char *)v182 - v58) >> 3;
      uint64_t v65 = v33;
      if ((char *)v182 - v58 < 1)
      {
        uint64_t v68 = 0;
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v66 = ((char *)v182 - v58) >> 3;
        uint64_t v67 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v66);
        unint64_t v64 = v66;
        uint64_t v68 = v67;
        uint64_t v70 = v69;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v58, v63, (uint64_t (**)(uint64_t *, uint64_t *))&v186, v64, v68, v70, v57);
      if (v68) {
        operator delete(v68);
      }
      unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v30) >> 2);
      v166 = v36;
      v167 = (float *)v30;
      unsigned int v71 = (float *)__p;
      unint64_t v72 = (char *)v182;
      if (v182 != __p) {
        break;
      }
      float v76 = v32;
LABEL_108:
      unint64_t v30 = (char *)v167;
      float v33 = v65;
      if (v166 == (char *)v167)
      {
        v117 = 0;
        float v108 = 0;
        unint64_t v12 = v163;
      }
      else
      {
        unint64_t v12 = v163;
        if (v165 >> 60) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        float v108 = (char *)operator new(16 * v165);
        bzero(v108, 16 * v165);
        unint64_t v110 = 0;
        if (v165 <= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = v165;
        }
        float v112 = v167 + 1;
        float32x2_t v113 = 0;
        float v114 = 0.0;
        unint64_t v115 = v108;
        int32x2_t v116 = 0;
        do
        {
          ++v110;
          if (*v112 > 0.0)
          {
            *(float *)v116.i32 = *(float *)v116.i32 + 1.0;
            v109.f32[0] = (float)v110;
            float v114 = v114 + (float)(*(float *)v116.i32 / (float)v110);
            float32x2_t v109 = vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32(v116, 0), (float32x2_t)0x3F800000BF800000), (float32x2_t)vdup_lane_s32((int32x2_t)v109, 0));
            float32x2_t v113 = vadd_f32(v113, v109);
          }
          *(float *)unint64_t v115 = v114;
          *(float32x2_t *)(v115 + 4) = v113;
          *((_DWORD *)v115 + 3) = v116.i32[0];
          v115 += 16;
          v112 += 3;
        }
        while (v111 != v110);
        v117 = &v108[16 * v165];
      }
      uint64_t v31 = v175;
      if (v32 != v76)
      {
        float v118 = (float *)&v108[16 * ((unint64_t)(v117 - v108) >> 4) - 4];
        uint64_t v119 = v32;
        do
        {
          int v120 = *(_DWORD *)v119;
          int v121 = *((_DWORD *)v119 + 1);
          float v122 = 0.0;
          if (*(_DWORD *)v119 != v121 && *v118 != 0.0)
          {
            float v123 = v167[3 * v120 + 1];
            float v124 = v167[3 * v121 + 1];
            BOOL v125 = v120 <= v121;
            if (v120 > v121) {
              int v126 = *((_DWORD *)v119 + 1);
            }
            else {
              int v126 = *(_DWORD *)v119;
            }
            if (v120 <= v121) {
              int v120 = *((_DWORD *)v119 + 1);
            }
            if (v125) {
              float v127 = v123;
            }
            else {
              float v127 = v167[3 * v121 + 1];
            }
            if (!v125) {
              float v124 = v123;
            }
            float v128 = *(float *)&v108[16 * v120];
            if (v126) {
              float v128 = v128 - *(float *)&v108[16 * v126 - 16];
            }
            BOOL v125 = v127 <= 0.0;
            float v122 = 0.0;
            if (v125) {
              float v129 = 0.0;
            }
            else {
              float v129 = 1.0;
            }
            if (v124 <= 0.0) {
              float v130 = 0.0;
            }
            else {
              float v130 = 1.0;
            }
            if (v129 != v130)
            {
              uint64_t v131 = v120 - 1;
              if (v129 >= v130)
              {
                float v133 = *(float *)&v108[16 * v131 + 4] - *(float *)&v108[16 * v126 + 4];
                float v134 = *(float *)&v108[16 * v120 + 12];
                int v126 = v120;
              }
              else
              {
                float v132 = (float *)&v108[16 * v126];
                float v133 = *(float *)&v108[16 * v131 + 8] - v132[2];
                float v134 = v132[3] + 1.0;
              }
              float v135 = (float)((float)((float)(v133 + 0.0) + (float)(v134 / (float)(v126 + 1))) - v128) / *v118;
              if (v135 >= 0.0) {
                float v122 = (float)((float)((float)(v133 + 0.0) + (float)(v134 / (float)(v126 + 1))) - v128) / *v118;
              }
              else {
                float v122 = -v135;
              }
            }
          }
          *((float *)v119 + 2) = v122 * *((float *)v119 + 2);
          v119 += 12;
        }
        while (v119 != v76);
      }
      if (v108) {
        operator delete(v108);
      }
      float v136 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      float v137 = *(float *)(a1 + 32);
      if (v137 != 0.0) {
        float v136 = v136 * (float)(v137 / (float)(v12->__begin_[v174] - v12->__begin_[v178]));
      }
      if (v32 == v76)
      {
        uint64_t v29 = v174;
      }
      else
      {
        uint64_t v138 = *v173;
        v139 = (float *)v32;
        do
        {
          uint64_t v140 = &v167[3 * *(unsigned int *)v139];
          float v141 = &v167[3 * *((unsigned int *)v139 + 1)];
          float v142 = v136 * v139[2];
          float v143 = *v140 - *v141;
          if (v143 >= -88.7) {
            float v144 = -v143;
          }
          else {
            float v144 = 88.7;
          }
          float v145 = 1.0 / (float)((float)(expf(v144) + 1.0) + 1.0e-16);
          float v146 = v145 + -1.0;
          float v147 = v145 * (float)(1.0 - v145);
          if (v147 < 1.0e-16) {
            float v147 = 1.0e-16;
          }
          float v148 = (float)(v142 + v142) * v147;
          float v149 = (float *)(v138 + 8 * *((unsigned int *)v140 + 2));
          float v150 = v149[1] + v148;
          float *v149 = *v149 + (float)(v142 * v146);
          v149[1] = v150;
          float v151 = (float *)(v138 + 8 * *((unsigned int *)v141 + 2));
          float v152 = v151[1] + v148;
          *float v151 = *v151 - (float)(v142 * v146);
          v151[1] = v152;
          v139 += 3;
        }
        while (v139 != (float *)v76);
        uint64_t v29 = v174;
        uint64_t v31 = v175;
      }
      if (v29 == v164)
      {
        if (__p)
        {
          v182 = __p;
          operator delete(__p);
        }
        if (v167) {
          operator delete(v167);
        }
        if (v32) {
          operator delete(v32);
        }
        goto LABEL_175;
      }
    }
    unint64_t v73 = 0;
    unsigned int v74 = 0;
    unint64_t v75 = ((char *)v182 - (unsigned char *)__p) >> 3;
    float v76 = v32;
    while (1)
    {
      BOOL v77 = &v71[2 * v73];
      int v78 = v75 - 2;
      int v79 = 1;
      do
      {
        int v80 = v79;
        int v81 = v78;
        unint64_t v73 = v74 + v79;
        if (v75 <= v73) {
          break;
        }
        ++v79;
        --v78;
      }
      while (v71[2 * v73] == *v77);
      if (v81 != -1)
      {
        int v82 = *(_DWORD *)(a1 + 24);
        if (v82) {
          break;
        }
      }
LABEL_105:
      unint64_t v75 = (v72 - (char *)v71) >> 3;
      unsigned int v74 = v73;
      if (v75 <= v73) {
        goto LABEL_108;
      }
    }
    int v177 = v80;
    while (1)
    {
      int v176 = v82;
      if (v74 < v73) {
        break;
      }
LABEL_103:
      int v82 = v176 - 1;
      if (v176 == 1)
      {
        unsigned int v71 = (float *)__p;
        unint64_t v72 = (char *)v182;
        goto LABEL_105;
      }
    }
    uint64_t v83 = v74;
    while (1)
    {
      LODWORD(v186) = 0;
      HIDWORD(v186) = v81;
      unsigned int v84 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v184, &v186);
      if (v84 >= v74)
      {
        uint64_t v88 = **(void **)(a3 + 72);
        unint64_t v86 = (unint64_t)v65;
        if (*(void *)(*(void *)(a3 + 72) + 8) == v88) {
          float v89 = 1.0;
        }
        else {
          float v89 = *(float *)(v88 + 4 * v178);
        }
        int v90 = (char *)__p + 8 * v83 + 4;
        unint64_t v91 = (char *)__p + 8 * v177 + 8 * v84 + 4;
        float v92 = v34 * v89;
        if ((unint64_t)v76 >= v86)
        {
          unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((v76 - v32) >> 2) + 1;
          if (v103 > 0x1555555555555555) {
LABEL_166:
          }
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v86 - (void)v32) >> 2) > v103) {
            unint64_t v103 = 0x5555555555555556 * ((uint64_t)(v86 - (void)v32) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (void)v32) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v104 = 0x1555555555555555;
          }
          else {
            unint64_t v104 = v103;
          }
          int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v104);
          int v105 = *(_DWORD *)v91;
          uint64_t v98 = &v95[4 * ((v76 - v32) >> 2)];
          *(_DWORD *)uint64_t v98 = *(_DWORD *)v90;
          *((_DWORD *)v98 + 1) = v105;
          *((float *)v98 + 2) = v92;
          int v99 = v98;
          while (v76 != v32)
          {
            uint64_t v106 = *(void *)(v76 - 12);
            v76 -= 12;
            int v107 = *((_DWORD *)v76 + 2);
            *(void *)(v99 - 12) = v106;
            v99 -= 12;
            *((_DWORD *)v99 + 2) = v107;
          }
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v85 = **(void **)(a3 + 72);
        unint64_t v86 = (unint64_t)v65;
        if (*(void *)(*(void *)(a3 + 72) + 8) == v85) {
          float v87 = 1.0;
        }
        else {
          float v87 = *(float *)(v85 + 4 * v178);
        }
        int v90 = (char *)__p + 8 * v84 + 4;
        unint64_t v91 = (char *)__p + 8 * v83 + 4;
        float v92 = v34 * v87;
        if ((unint64_t)v76 >= v86)
        {
          unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((v76 - v32) >> 2) + 1;
          if (v93 > 0x1555555555555555) {
            goto LABEL_166;
          }
          if (0x5555555555555556 * ((uint64_t)(v86 - (void)v32) >> 2) > v93) {
            unint64_t v93 = 0x5555555555555556 * ((uint64_t)(v86 - (void)v32) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (void)v32) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v94 = 0x1555555555555555;
          }
          else {
            unint64_t v94 = v93;
          }
          int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v94);
          int v97 = *(_DWORD *)v91;
          uint64_t v98 = &v95[4 * ((v76 - v32) >> 2)];
          *(_DWORD *)uint64_t v98 = *(_DWORD *)v90;
          *((_DWORD *)v98 + 1) = v97;
          *((float *)v98 + 2) = v92;
          int v99 = v98;
          while (v76 != v32)
          {
            uint64_t v100 = *(void *)(v76 - 12);
            v76 -= 12;
            int v101 = *((_DWORD *)v76 + 2);
            *(void *)(v99 - 12) = v100;
            v99 -= 12;
            *((_DWORD *)v99 + 2) = v101;
          }
LABEL_99:
          uint64_t v65 = &v95[12 * v96];
          float v76 = v98 + 12;
          if (v32) {
            operator delete(v32);
          }
          char v32 = v99;
          goto LABEL_102;
        }
      }
      int v102 = *(_DWORD *)v91;
      *(_DWORD *)float v76 = *(_DWORD *)v90;
      *((_DWORD *)v76 + 1) = v102;
      *((float *)v76 + 2) = v92;
      v76 += 12;
      uint64_t v65 = (char *)v86;
LABEL_102:
      if (++v83 == v73) {
        goto LABEL_103;
      }
    }
  }
LABEL_175:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v188);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v180.__begin_)
  {
    v180.__end_ = v180.__begin_;
    operator delete(v180.__begin_);
  }
}

void sub_22E94E1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a39);
  if (v39) {
    operator delete(v39);
  }
  JUMPOUT(0x22E94E370);
}

void sub_22E94E1F8(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4) {
    operator delete(v4);
  }
  if (v3) {
    operator delete(v3);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E94E064);
  }
  JUMPOUT(0x22E94E2F0);
}

void sub_22E94E20C(void *a1, int a2)
{
  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4) {
    operator delete(v4);
  }
  if (v3) {
    operator delete(v3);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x22E94E064);
  }
  JUMPOUT(0x22E94E2F0);
}

void sub_22E94E228()
{
}

void sub_22E94E2C0()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E94E328);
}

void sub_22E94E2CC()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E94E328);
}

void sub_22E94E2DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (v37) {
    operator delete(v37);
  }
  JUMPOUT(0x22E94E370);
}

void sub_22E94E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v40 = a39;
  a39 = 0;
  if (v40) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a39, v40);
  }
  _Unwind_Resume(a1);
}

void sub_22E94E304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_22E94E33C(_Unwind_Exception *a1)
{
}

void sub_22E94E344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_22E94E368(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E94E370);
  }
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::Task()
{
  return 4;
}

void rabit::c_api::Allreduce(rabit::engine *a1, const char *a2, int a3, int a4)
{
  switch(a4)
  {
    case 0:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_12;
        default:
          goto LABEL_8;
      }
    case 1:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_12;
        default:
          goto LABEL_8;
      }
    case 2:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_12;
        default:
          goto LABEL_8;
      }
    case 3:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
LABEL_12:
          uint64_t v5 = *(void (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 8);
          v5();
          break;
        case 6:
        case 7:
          uint64_t v4 = "DataType does not support bitwise or operation";
          goto LABEL_9;
        default:
LABEL_8:
          uint64_t v4 = "unknown data_type";
          goto LABEL_9;
      }
      break;
    default:
      uint64_t v4 = "unknown enum_op";
LABEL_9:
      rabit::utils::Error((rabit::utils *)v4, a2);
      break;
  }
}

void rabit::utils::Error(rabit::utils *this, const char *a2, ...)
{
  va_start(va, a2);
  int v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  va_copy(v7, va);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
  uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v3, 4096);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
  operator delete(v3);
}

void sub_22E94EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void rabit::c_api::Allgather(rabit::c_api *this, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      char v6 = **(void (***)(void))rabit::engine::GetEngine(this);
      v6();
      break;
    default:
      rabit::utils::Error((rabit::utils *)"unknown data_type", a2);
      break;
  }
}

uint64_t RabitInit(rabit::engine *a1, int a2, char **a3)
{
  uint64_t v3 = rabit::engine::Init(a1, a2, a3);
  if ((v3 & 1) == 0) {
    XGBAPISetLastError("Failed to initialize RABIT.");
  }
  return v3;
}

uint64_t RabitFinalize(rabit::engine *a1)
{
  uint64_t v1 = rabit::engine::Finalize(a1);
  if ((v1 & 1) == 0) {
    XGBAPISetLastError("Failed to shutdown RABIT worker.");
  }
  return v1;
}

uint64_t RabitGetRingPrevRank(rabit::engine *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 56);

  return v1();
}

uint64_t RabitGetRank(rabit::engine *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 64);

  return v1();
}

uint64_t RabitGetWorldSize(rabit::engine *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 72);

  return v1();
}

uint64_t RabitIsDistributed(rabit::engine *a1)
{
  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(void *)Engine + 80))(Engine);
}

uint64_t RabitTrackerPrint(char *__s)
{
  uint64_t v1 = (rabit::engine *)std::string::basic_string[abi:ne180100]<0>(__p, __s);
  Engine = rabit::engine::GetEngine(v1);
  (*(void (**)(void *, void **))(*(void *)Engine + 96))(Engine, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_22E94EEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::string *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2 == 2)
  {
    unint64_t v16 = __cxa_begin_catch(exception_object);
    unint64_t v17 = (const char *)(*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
    XGBAPISetLastError(v17);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v18 = __cxa_begin_catch(exception_object);
    float v19 = (char *)(*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
    std::string::basic_string[abi:ne180100]<0>(&a11, v19);
    std::runtime_error::runtime_error(&a10, (const std::string *)&a11);
    a10.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v20 = std::runtime_error::what(&a10);
    XGBAPISetLastError(v20);
    std::runtime_error::~runtime_error(&a10);
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E94EED8);
}

void RabitGetProcessorName(rabit::engine *a1, std::string::size_type *a2, std::string::size_type a3)
{
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(std::string *__return_ptr))(*(void *)Engine + 88))(&v10);
  std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  unsigned __int8 v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  if (size > a3)
  {
    std::string::resize(&v10, a3 - 1, 0);
    unsigned __int8 v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  if ((v8 & 0x80) != 0)
  {
    std::exception_ptr v9 = (void *)v10.__r_.__value_.__r.__words[0];
    strcpy((char *)a1, v10.__r_.__value_.__l.__data_);
    *a2 = v10.__r_.__value_.__l.__size_;
    operator delete(v9);
  }
  else
  {
    strcpy((char *)a1, (const char *)&v10);
    *a2 = v8;
  }
}

void sub_22E94F0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RabitBroadcast(rabit::engine *a1, uint64_t a2, uint64_t a3)
{
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, rabit::engine *, uint64_t, uint64_t))(*(void *)Engine + 16))(Engine, a1, a2, a3);
  return 0;
}

uint64_t RabitAllgather(rabit::c_api *a1, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6)
{
  return 0;
}

uint64_t RabitAllreduce(rabit::engine *a1, const char *a2, int a3, int a4)
{
  return 0;
}

uint64_t RabitLoadCheckPoint(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  va_list v7 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_10, memory_order_acquire) & 1) == 0)
  {
    a1 = (uint64_t **)__cxa_guard_acquire(&_MergedGlobals_10);
    if (a1)
    {
      qword_26AD71B90 = 0;
      unk_26AD71B98 = 0;
      qword_26AD71B88 = 0;
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26AD71B88, &dword_22E895000);
      __cxa_guard_release(&_MergedGlobals_10);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71B80, memory_order_acquire) & 1) == 0)
  {
    a1 = (uint64_t **)__cxa_guard_acquire(&qword_26AD71B80);
    if (a1)
    {
      qword_26AD71BA8 = 0;
      unk_26AD71BB0 = 0;
      qword_26AD71BA0 = 0;
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26AD71BA0, &dword_22E895000);
      __cxa_guard_release(&qword_26AD71B80);
    }
  }
  v21[0] = &unk_26E249A68;
  v21[1] = &qword_26AD71B88;
  v20[0] = &unk_26E249A68;
  v20[1] = &qword_26AD71BA0;
  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  std::string v10 = *(uint64_t (**)(void *, void *, void *, uint64_t))(*(void *)Engine + 24);
  if (a3)
  {
    uint64_t result = v10(Engine, v21, v20, v9);
    if (byte_26AD71B9F < 0)
    {
      if (qword_26AD71B90) {
        unint64_t v12 = (uint64_t *)qword_26AD71B88;
      }
      else {
        unint64_t v12 = 0;
      }
    }
    else if (byte_26AD71B9F)
    {
      unint64_t v12 = &qword_26AD71B88;
    }
    else
    {
      unint64_t v12 = 0;
    }
    *va_list v7 = v12;
    uint64_t v14 = byte_26AD71B9F;
    if (byte_26AD71B9F < 0) {
      uint64_t v14 = qword_26AD71B90;
    }
    *a2 = v14;
    if (byte_26AD71BB7 < 0)
    {
      float v15 = (uint64_t *)qword_26AD71BA0;
      if (!qword_26AD71BA8) {
        float v15 = 0;
      }
    }
    else if (byte_26AD71BB7)
    {
      float v15 = &qword_26AD71BA0;
    }
    else
    {
      float v15 = 0;
    }
    *a3 = v15;
    unint64_t v16 = &qword_26AD71BA8;
    unint64_t v17 = &byte_26AD71BB7;
    a2 = a4;
  }
  else
  {
    uint64_t result = v10(Engine, v21, 0, v9);
    if (byte_26AD71B9F < 0)
    {
      if (qword_26AD71B90) {
        float v13 = (uint64_t *)qword_26AD71B88;
      }
      else {
        float v13 = 0;
      }
    }
    else if (byte_26AD71B9F)
    {
      float v13 = &qword_26AD71B88;
    }
    else
    {
      float v13 = 0;
    }
    *va_list v7 = v13;
    unint64_t v16 = &qword_26AD71B90;
    unint64_t v17 = &byte_26AD71B9F;
  }
  uint64_t v18 = *v17;
  uint64_t v19 = *v16;
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  *a2 = v19;
  return result;
}

uint64_t RabitCheckPoint(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = &unk_26E249AC0;
  v9[1] = a1;
  v9[2] = a2;
  v8[0] = &unk_26E249AC0;
  v8[1] = a3;
  v8[2] = a4;
  Engine = rabit::engine::GetEngine(a1);
  if (a3) {
    char v6 = v8;
  }
  else {
    char v6 = 0;
  }
  return (*(uint64_t (**)(void *, void *, void *))(*(void *)Engine + 32))(Engine, v9, v6);
}

uint64_t RabitVersionNumber(rabit::engine *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)rabit::engine::GetEngine(a1) + 48);

  return v1();
}

uint64_t RabitLinkTag()
{
  return 0;
}

void rabit::c_api::ReadWrapper::~ReadWrapper(rabit::c_api::ReadWrapper *this)
{
}

void rabit::c_api::ReadWrapper::Load(uint64_t a1, uint64_t (***a2)(void, std::string::size_type *, uint64_t))
{
  std::string::size_type __n = 0;
  BOOL v4 = (**a2)(a2, &__n, 8) != 0;
  rabit::utils::Assert((rabit::utils *)v4, "Read pickle string", v5);
  std::string::resize(*(std::string **)(a1 + 8), __n, 0);
  if (__n)
  {
    char v6 = *(uint64_t ***)(a1 + 8);
    if (*((char *)v6 + 23) < 0) {
      char v6 = (uint64_t **)*v6;
    }
    BOOL v7 = ((uint64_t (*)(uint64_t (***)(void, std::string::size_type *, uint64_t), uint64_t **))**a2)(a2, v6) != 0;
    rabit::utils::Assert((rabit::utils *)v7, "Read pickle string", v8);
  }
}

void rabit::c_api::ReadWrapper::Save(uint64_t a1, const char *a2)
{
}

void rabit::c_api::WriteWrapper::~WriteWrapper(rabit::c_api::WriteWrapper *this)
{
}

void rabit::c_api::WriteWrapper::Load(uint64_t a1, const char *a2)
{
}

uint64_t rabit::c_api::WriteWrapper::Save(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int16 *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

char *rabit::op::Reducer<rabit::op::Max,char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v5 = *result++;
      char v4 = v5;
      if ((char)*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *rabit::op::Reducer<rabit::op::Max,unsigned char>(unsigned __int8 *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *result++;
      char v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Max,int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v5 = *result++;
      int v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned int *rabit::op::Reducer<rabit::op::Max,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *result++;
      unsigned int v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Max,long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v5 = *result++;
      uint64_t v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *rabit::op::Reducer<rabit::op::Max,float>(float *result, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (*a2 < *result) {
        *a2 = *result;
      }
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double *rabit::op::Reducer<rabit::op::Max,double>(double *result, double *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (*a2 < *result) {
        *a2 = *result;
      }
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Min,char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v5 = *result++;
      char v4 = v5;
      if ((char)*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *rabit::op::Reducer<rabit::op::Min,unsigned char>(unsigned __int8 *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *result++;
      char v4 = v5;
      if (*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Min,int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v5 = *result++;
      int v4 = v5;
      if (*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned int *rabit::op::Reducer<rabit::op::Min,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *result++;
      unsigned int v4 = v5;
      if (*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Min,long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v5 = *result++;
      uint64_t v4 = v5;
      if (*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Min,unsigned long>(unint64_t *result, unint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unint64_t v5 = *result++;
      unint64_t v4 = v5;
      if (*a2 > v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *rabit::op::Reducer<rabit::op::Min,float>(float *result, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (*a2 > *result) {
        *a2 = *result;
      }
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double *rabit::op::Reducer<rabit::op::Min,double>(double *result, double *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (*a2 > *result) {
        *a2 = *result;
      }
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Sum,char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Sum,unsigned char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Sum,int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Sum,unsigned int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Sum,long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::BitOR,char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::BitOR,unsigned char>(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,unsigned int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::BitOR,long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::BitOR,unsigned long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t dmlc::RecordIOWriter::WriteRecord(dmlc::RecordIOWriter *this, char *a2, unint64_t a3)
{
  unsigned int v3 = a3;
  if (a3 >> 29)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
    BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    unsigned __int8 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: size < (1 << 29U)", 31);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RecordIO only accept record less than 2^29 bytes", 48);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  int v18 = -824761590;
  if (v3 <= 3) {
    goto LABEL_17;
  }
  unint64_t v10 = 0;
  int v11 = 0;
  do
  {
    if (a2[v10] == v18
      && __PAIR64__(a2[v10 + 2], a2[v10 + 1]) == __PAIR64__(BYTE2(v18), BYTE1(v18))
      && a2[v10 + 3] == HIBYTE(v18))
    {
      if (v11) {
        int v12 = 0x40000000;
      }
      else {
        int v12 = 0x20000000;
      }
      int v17 = v12 | (v10 - v11);
      (*(void (**)(void, int *, uint64_t))(**(void **)this + 8))(*(void *)this, &v18, 4);
      (*(void (**)(void, int *, uint64_t))(**(void **)this + 8))(*(void *)this, &v17, 4);
      if (v10 != v11) {
        (*(void (**)(void, char *, void))(**(void **)this + 8))(*(void *)this, &a2[v11], (v10 - v11));
      }
      ++*((void *)this + 2);
      int v11 = v10 + 4;
    }
    v10 += 4;
  }
  while (v10 < (v3 & 0xFFFFFFFC));
  if (v11)
  {
    int v13 = 1610612736;
  }
  else
  {
LABEL_17:
    int v11 = 0;
    int v13 = 0;
  }
  unsigned int v14 = (v3 + 3) & 0xFFFFFFFC;
  int v17 = v13 | (v3 - v11);
  (*(void (**)(void, int *, uint64_t))(**(void **)this + 8))(*(void *)this, &v18, 4);
  uint64_t result = (*(uint64_t (**)(void, int *, uint64_t))(**(void **)this + 8))(*(void *)this, &v17, 4);
  if (v3 != v11) {
    uint64_t result = (*(uint64_t (**)(void, char *, void))(**(void **)this + 8))(*(void *)this, &a2[v11], v3 - v11);
  }
  int v16 = 0;
  if (v14 != v3) {
    return (*(uint64_t (**)(void, int *, void))(**(void **)this + 8))(*(void *)this, &v16, v14 - v3);
  }
  return result;
}

void sub_22E9501D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

uint64_t dmlc::RecordIOReader::NextRecord(void *a1, std::string *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a1 + 16)) {
    return 0;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  }
  std::string::size_type v5 = 0;
  while (1)
  {
    uint64_t result = (**(uint64_t (***)(void, int *, uint64_t))*a1)(*a1, &v25, 8);
    if (result == 8) {
      goto LABEL_10;
    }
    if (!result) {
      break;
    }
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
    BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    unsigned __int8 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: nread == sizeof(header)", 37);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Inavlid RecordIO File", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
LABEL_10:
    if (v25 != -824761590)
    {
      unint64_t v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      int v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: header[0] == RecordIOWriter::kMagic", 49);
      int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid RecordIO File", 21);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
    }
    unsigned int v14 = v26;
    unsigned int v15 = v26 & 0x1FFFFFFF;
    uint64_t v16 = ((v26 & 0x1FFFFFFF) + 3) & 0x3FFFFFFC;
    std::string::resize(a2, v5 + v16, 0);
    if (v16)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v17 = a2->__r_.__value_.__l.__size_ ? a2->__r_.__value_.__r.__words[0] : 0;
      }
      else {
        uint64_t v17 = *((unsigned char *)&a2->__r_.__value_.__s + 23) ? (uint64_t)a2 : 0;
      }
      if ((**(uint64_t (***)(void, std::string::size_type, uint64_t))*a1)(*a1, v17 + v5, v16) != v16)
      {
        int v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: stream_->Read(BeginPtr(*out_rec) + size, upper_align) == upper_align", 82);
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Invalid RecordIO File upper_align=", 34);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
      }
    }
    std::string::size_type v22 = v5 + v15;
    std::string::resize(a2, v22, 0);
    if (!(v14 >> 29) || v14 >> 29 == 3) {
      return 1;
    }
    std::string::size_type v5 = v22 + 4;
    std::string::resize(a2, v22 + 4, 0);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      if (a2->__r_.__value_.__l.__size_) {
        unint64_t v23 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else {
        unint64_t v23 = 0;
      }
    }
    else if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
    {
      unint64_t v23 = a2;
    }
    else
    {
      unint64_t v23 = 0;
    }
    *(_DWORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = -824761590;
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_22E9504E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *dmlc::RecordIOChunkReader::RecordIOChunkReader(void *a1, uint64_t a2, char *a3, unsigned int a4, unsigned int a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v9 = ((unint64_t)&a3[a5 - 1] / a5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = v9 * a4;
  if (v10 >= (unint64_t)a3) {
    unint64_t v10 = (unint64_t)a3;
  }
  int v11 = &a3[a2];
  NextRecordIOHead = dmlc::FindNextRecordIOHead((dmlc *)(a2 + v10), &a3[a2], a3);
  unint64_t v14 = v9 * (a4 + 1);
  if (v14 >= (unint64_t)a3) {
    unint64_t v14 = (unint64_t)a3;
  }
  a1[3] = NextRecordIOHead;
  a1[4] = dmlc::FindNextRecordIOHead((dmlc *)(a2 + v14), v11, v13);
  return a1;
}

void sub_22E9505D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *dmlc::FindNextRecordIOHead(dmlc *this, char *a2, char *a3)
{
  unsigned int v3 = a2;
  if ((this & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if ((a2 & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  uint64_t v4 = (_DWORD *)((char *)this + 4);
  if ((char *)this + 4 < a2)
  {
    while (*(v4 - 1) != -824761590 || *v4 >> 30)
    {
      if (++v4 >= (_DWORD *)a2) {
        return v3;
      }
    }
    return (char *)(v4 - 1);
  }
  return v3;
}

void sub_22E9507C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL dmlc::RecordIOChunkReader::NextRecord(std::string *this, void *a2)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  std::string::size_type size = this[1].__r_.__value_.__l.__size_;
  if ((unint64_t)data < size)
  {
    if (*(_DWORD *)data != -824761590)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      unsigned __int8 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
    }
    unsigned int v9 = *((_DWORD *)data + 1);
    if (v9 >> 29 != 1)
    {
      if (!(v9 >> 29))
      {
        unsigned int v10 = v9 & 0x1FFFFFFF;
        std::string::size_type v11 = this[1].__r_.__value_.__l.__size_;
        std::string::size_type v12 = this[1].__r_.__value_.__r.__words[0] + 8;
        *a2 = v12;
        std::string::size_type v13 = v12 + ((v10 + 3) & 0x3FFFFFFC);
        this[1].__r_.__value_.__r.__words[0] = v13;
        if (v13 > v11)
        {
          unint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
          dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
          unsigned int v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
          uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: pbegin_ <= pend_", 30);
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Invalid RecordIO Format", 23);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
        }
        std::string::size_type v18 = v10;
LABEL_46:
        a2[1] = v18;
        return (unint64_t)data < size;
      }
      uint64_t v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: cflag == 1U", 25);
      std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
    }
    std::string::resize(this, 0, 0);
    while (1)
    {
      std::string::pointer v23 = this[1].__r_.__value_.__l.__data_;
      if ((unint64_t)(v23 + 8) > this[1].__r_.__value_.__l.__size_)
      {
        char v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        int v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        unsigned int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: pbegin_ + 2 * sizeof(uint32_t) <= pend_", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
        std::string::pointer v23 = this[1].__r_.__value_.__l.__data_;
      }
      if (*(_DWORD *)v23 != -824761590)
      {
        uint64_t v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
        dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        unsigned int v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
      }
      unsigned int v30 = *((_DWORD *)v23 + 1);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v31 = this->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v31 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      std::string::resize(this, v31 + (v30 & 0x1FFFFFFF), 0);
      if ((v30 & 0x1FFFFFFF) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_) {
            char v32 = (std::string *)this->__r_.__value_.__r.__words[0];
          }
          else {
            char v32 = 0;
          }
        }
        else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
        {
          char v32 = this;
        }
        else
        {
          char v32 = 0;
        }
        memcpy((char *)v32 + v31, (const void *)(this[1].__r_.__value_.__r.__words[0] + 8), v30 & 0x1FFFFFFF);
        v31 += v30 & 0x1FFFFFFF;
      }
      this[1].__r_.__value_.__r.__words[0] += (((v30 & 0x1FFFFFFF) + 3) & 0x3FFFFFFC) + 8;
      if (v30 >> 29 == 3) {
        break;
      }
      std::string::resize(this, v31 + 4, 0);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        if (this->__r_.__value_.__l.__size_) {
          float v33 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        else {
          float v33 = 0;
        }
      }
      else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
      {
        float v33 = this;
      }
      else
      {
        float v33 = 0;
      }
      *(_DWORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = -824761590;
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_) {
        float v34 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else {
        float v34 = 0;
      }
    }
    else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
    {
      float v34 = this;
    }
    else
    {
      float v34 = 0;
    }
    *a2 = v34;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v18 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v18 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    goto LABEL_46;
  }
  return (unint64_t)data < size;
}

void sub_22E950B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
}

unint64_t xgboost::Version::Load(xgboost::Version *this, const xgboost::Json *a2)
{
  unsigned int v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)this) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  uint64_t v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  std::string::size_type v5 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)this) + 24;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v5 == (char *)v4)
  {
    unint64_t v16 = 0xFFFFFFFF00000000;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "version");
    char v6 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)this + 24))(*(void *)this, __p);
    BOOL v7 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v6);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    unsigned __int8 v8 = (_DWORD **)v7[2];
    if ((_DWORD **)v7[3] == v8
      || (unsigned int v9 = (unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v8),
          uint64_t v10 = v7[2],
          (unint64_t)(v7[3] - v10) < 9)
      || (std::string::size_type v11 = v9,
          std::string::size_type v12 = xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v10 + 8)),
          uint64_t v13 = v7[2],
          (unint64_t)(v7[3] - v13) <= 0x10))
    {
      std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v14 = v12;
    xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v13 + 16));
    uint64_t v15 = v11[4];
    unint64_t v16 = v14[2] << 32;
  }
  return v16 | v15;
}

void sub_22E950D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Invaid version format in loaded JSON object: ", 45);
    xgboost::operator<<(v18, *v15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x22E950D24);
  }
  _Unwind_Resume(a1);
}

void sub_22E950DF4(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  __cxa_end_catch();
  JUMPOUT(0x22E950D64);
}

void *xgboost::operator<<(void *a1, atomic_uint *a2)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v7 = a2;
  if (a2) {
    atomic_fetch_add_explicit(a2 + 2, 1u, memory_order_relaxed);
  }
  xgboost::Json::Dump(&v7, &__p, 16);
  if (a2 && atomic_fetch_add_explicit(a2 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)a2 + 8))(a2);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_22E950EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Version::Load(uint64_t (***a1)(void, std::string *, size_t))
{
  uint64_t v46 = 0;
  int v45 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Incorrect version format found in binary file.  Binary file from XGBoost < 1.0.0 is no longer supported. Please generate it again.");
  std::string::basic_string[abi:ne180100]<0>(&__s1, "version:");
  memset(&v38, 0, sizeof(v38));
  if ((v41 & 0x80u) == 0) {
    size_t v2 = v41;
  }
  else {
    size_t v2 = __n;
  }
  std::string::resize(&v38, v2, 0);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v3 = &v38;
  }
  else {
    unsigned int v3 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v41 & 0x80u) == 0) {
    size_t v4 = v41;
  }
  else {
    size_t v4 = __n;
  }
  uint64_t v5 = (**a1)(a1, v3, v4);
  size_t v6 = v41;
  if ((v41 & 0x80u) != 0) {
    size_t v6 = __n;
  }
  if (v5 != v6) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v7 = v41;
  if ((v41 & 0x80u) == 0) {
    size_t v8 = v41;
  }
  else {
    size_t v8 = __n;
  }
  std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v38.__r_.__value_.__l.__size_;
  }
  if (v8 == size)
  {
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v38;
    }
    else {
      uint64_t v10 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v41 & 0x80) != 0)
    {
      if (!memcmp(__s1, v10, __n)) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v41) {
        goto LABEL_37;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == v10->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        uint64_t v10 = (std::string *)((char *)v10 + 1);
        if (!--v7) {
          goto LABEL_37;
        }
      }
    }
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
  uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
  if ((v44 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v15 = v44;
  }
  else {
    uint64_t v15 = v43;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
LABEL_37:
  if ((**a1)(a1, (std::string *)((char *)&v46 + 4), 4) != 4)
  {
    char v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&major)", 30);
    std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    if ((v44 & 0x80u) == 0) {
      std::string::pointer v23 = &__p;
    }
    else {
      std::string::pointer v23 = __p;
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v24 = v44;
    }
    else {
      uint64_t v24 = v43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
  }
  if ((**a1)(a1, (std::string *)&v46, 4) != 4)
  {
    int v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    unsigned int v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: fi->Read(&minor)", 30);
    unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    if ((v44 & 0x80u) == 0) {
      uint64_t v29 = &__p;
    }
    else {
      uint64_t v29 = __p;
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v30 = v44;
    }
    else {
      uint64_t v30 = v43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
  }
  if ((**a1)(a1, (std::string *)&v45, 4) != 4)
  {
    std::string::size_type v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    char v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    float v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&patch)", 30);
    float v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    if ((v44 & 0x80u) == 0) {
      unint64_t v35 = &__p;
    }
    else {
      unint64_t v35 = __p;
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v36 = v44;
    }
    else {
      uint64_t v36 = v43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
  }
  uint64_t v17 = v46;
  uint64_t v16 = HIDWORD(v46);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((char)v41 < 0) {
    operator delete(__s1);
  }
  if ((char)v44 < 0) {
    operator delete(__p);
  }
  return v16 | (v17 << 32);
}

void sub_22E9513F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Version::Save(xgboost::Version *this, xgboost::Json *a2)
{
}

void sub_22E951844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v20 - 144) = v19;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 144));
  *(void *)(v20 - 144) = &a19;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 144));
  uint64_t v22 = 16;
  while (1)
  {
    std::string::pointer v23 = *(atomic_uint **)(v20 - 96 + v22);
    if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
    }
    v22 -= 8;
    if (v22 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t xgboost::Version::Self(xgboost::Version *this)
{
  return 0x600000001;
}

void xgboost::Version::Save(uint64_t a1)
{
  int v7 = 6;
  int v8 = 1;
  int v6 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "version:");
  if ((v5 & 0x80u) == 0) {
    size_t v2 = __p;
  }
  else {
    size_t v2 = (void **)__p[0];
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v3 = v5;
  }
  else {
    unint64_t v3 = (unint64_t)__p[1];
  }
  (*(void (**)(uint64_t, void **, unint64_t))(*(void *)a1 + 8))(a1, v2, v3);
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 8))(a1, &v8, 4);
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 8))(a1, &v7, 4);
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 8))(a1, &v6, 4);
  if ((char)v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E951A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Version::String()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)".", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2B8];
  uint64_t v2 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  void v4[2] = v2;
  v4[3] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230FA8020](&v6);
}

void sub_22E951C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::Version::Same(_DWORD *a1)
{
  return *a1 == 1 && a1[1] == 6 && a1[2] == 1;
}

uint64_t xgboost::data::SparsePageDMatrix::Info(xgboost::data::SparsePageDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t xgboost::data::detail::NSamplesDevice(xgboost::data::detail *this, xgboost::data::DMatrixProxy *a2)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  unint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return 0;
}

void sub_22E951CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::detail::NFeaturesDevice(xgboost::data::detail *this, xgboost::data::DMatrixProxy *a2)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  unint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return 0;
}

void sub_22E951D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::SparsePageDMatrix::SparsePageDMatrix(void *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = &unk_26E249B08;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E952590(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, xgboost::MetaInfo *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::string::size_type v31 = *(std::__shared_weak_count **)(a13 + 472);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  char v32 = *(std::__shared_weak_count **)(a13 + 456);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  float v33 = *(std::__shared_weak_count **)(a13 + 440);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  float v34 = *(std::__shared_weak_count **)(a13 + 424);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unint64_t v35 = *(std::__shared_weak_count **)(a13 + 408);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(a13 + 392);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*(char *)(a13 + 375) < 0) {
    operator delete(*a14);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*a9);
  xgboost::MetaInfo::~MetaInfo(a15);
}

uint64_t xgboost::data::MakeProxy(xgboost::data *this, void *a2)
{
  if (!this)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./proxy_dmatrix.h");
    char v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: proxy_handle", 26);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid proxy handle.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  return *(void *)this;
}

void sub_22E95282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::SparsePageDMatrix::GetRowBatchesImpl(std::__shared_weak_count **this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  xgboost::data::SparsePageDMatrix::InitializeSparsePage((xgboost::data::SparsePageDMatrix *)this);
  char v5 = this[48];
  size_t v4 = this[49];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void xgboost::data::SparsePageDMatrix::InitializeSparsePage(xgboost::data::SparsePageDMatrix *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".row.page");
  if (*((char *)this + 375) < 0) {
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 44), *((void *)this + 45));
  }
  else {
    std::string v15 = *(std::string *)((char *)this + 352);
  }
  xgboost::data::MakeCache((long long *)v18, (uint64_t)this, (const void **)__p, (uint64_t)&v15, (uint64_t)this + 256);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (!**(unsigned char **)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v18))
  {
    xgboost::data::MakeProxy(*((xgboost::data **)this + 35), v2);
    size_t v4 = (std::__shared_weak_count *)*((void *)this + 49);
    *((void *)this + 48) = 0;
    *((void *)this + 49) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    char v5 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v18);
    int v6 = *((_DWORD *)this + 78);
    uint64_t v7 = *((void *)this + 2);
    int v8 = *((_DWORD *)this + 94);
    uint64_t v10 = *v5;
    uint64_t v9 = v5[1];
    std::string::size_type v11 = (char *)operator new(0xD0uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)std::string::size_type v11 = &unk_26E249E20;
    if (v9)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v11 + 4) = 850045863;
    *((void *)v11 + 3) = &unk_26E249F00;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 97) = 0u;
    *((_DWORD *)v11 + 29) = v6;
    *((_DWORD *)v11 + 30) = 1;
    *((_DWORD *)v11 + 31) = v7;
    *((_DWORD *)v11 + 32) = 0;
    *((_DWORD *)v11 + 33) = v8;
    *((void *)v11 + 17) = v10;
    *((void *)v11 + 18) = v9;
    *((void *)v11 + 19) = 0;
    operator new();
  }
  uint64_t v3 = *((void *)this + 48);
  if (!v3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
    uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v20);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: sparse_page_source_", 33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v20);
    uint64_t v3 = *((void *)this + 48);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_22E952D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::MakeCache(long long *a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v16 = *(std::string *)a4;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  std::ostream::operator<<();
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v16.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, size + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v16;
    }
    else {
      uint64_t v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    memmove(v9, v10, size);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + size) = 45;
  std::stringbuf::str();
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v11 = __p;
  }
  else {
    std::string::size_type v11 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v12 = v20;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  uint64_t v13 = std::string::append(&v21, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v17 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  v22[0] = *(long long **)MEMORY[0x263F8C2B8];
  std::string v15 = *(long long **)(MEMORY[0x263F8C2B8] + 72);
  *(long long **)((char *)v22 + *((void *)v22[0] - (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3)) = *(long long **)(MEMORY[0x263F8C2B8] + 64);
  v22[2] = v15;
  v22[3] = (long long *)(MEMORY[0x263F8C318] + 16);
  if (v23 < 0) {
    operator delete(v22[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230FA8020](&v24);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v17, a3, (uint64_t)a1);
  if (a5 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a5, (const void **)a1))
  {
    v22[0] = a1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (const void **)a1, v22);
    operator new();
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_22E95341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::locale a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x230FA80D0](v51, 0x1012C40982C4C30);
  if (*(char *)(v50 + 23) < 0) {
    operator delete(*(void **)v50);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void sub_22E9535A0()
{
}

void xgboost::data::SparsePageDMatrix::GetColumnBatches(xgboost::data::SparsePageDMatrix *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".col.page");
  if (*((char *)this + 375) < 0) {
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 44), *((void *)this + 45));
  }
  else {
    std::string v16 = *(std::string *)((char *)this + 352);
  }
  xgboost::data::MakeCache((long long *)v19, (uint64_t)this, (const void **)__p, (uint64_t)&v16, (uint64_t)this + 256);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (!*(void *)((**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this) + 8)) {
    dmlc::LogCheckFormat<unsigned long long,int>();
  }
  xgboost::data::SparsePageDMatrix::InitializeSparsePage(this);
  uint64_t v4 = *((void *)this + 52);
  if (!v4)
  {
    uint64_t v5 = (**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this);
    int v6 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v19);
    int v7 = *((_DWORD *)this + 78);
    uint64_t v8 = *(void *)(v5 + 8);
    int v9 = *((_DWORD *)this + 94);
    uint64_t v11 = *v6;
    uint64_t v10 = v6[1];
    std::string::size_type v12 = (char *)operator new(0xC0uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)std::string::size_type v12 = &unk_26E249F50;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)this + 49);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v12 + 4) = 850045863;
    *((void *)v12 + 3) = &unk_26E24A098;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 97) = 0u;
    *((_DWORD *)v12 + 29) = v7;
    *((_DWORD *)v12 + 30) = 1;
    *((_DWORD *)v12 + 31) = v8;
    *((_DWORD *)v12 + 32) = 0;
    *((_DWORD *)v12 + 33) = v9;
    *((void *)v12 + 17) = v11;
    *((void *)v12 + 18) = v10;
    *((void *)v12 + 19) = 0;
    operator new();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v14 = *((void *)this + 52);
  std::string v15 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a2 = v14;
  a2[1] = v15;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_22E9539A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  xgboost::data::PageSourceIncMixIn<xgboost::CSCPage>::~PageSourceIncMixIn(v35);
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    if (!v33) {
      goto LABEL_4;
    }
  }
  else if (!v33)
  {
LABEL_4:
    std::__shared_weak_count::~__shared_weak_count(v32);
    operator delete(v37);
    if (a32 < 0) {
      operator delete(a27);
    }
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  goto LABEL_4;
}

void xgboost::data::SparsePageDMatrix::GetSortedColumnBatches(xgboost::data::SparsePageDMatrix *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".sorted.col.page");
  if (*((char *)this + 375) < 0) {
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 44), *((void *)this + 45));
  }
  else {
    std::string v16 = *(std::string *)((char *)this + 352);
  }
  xgboost::data::MakeCache((long long *)v19, (uint64_t)this, (const void **)__p, (uint64_t)&v16, (uint64_t)this + 256);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (!*(void *)((**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this) + 8)) {
    dmlc::LogCheckFormat<unsigned long long,int>();
  }
  xgboost::data::SparsePageDMatrix::InitializeSparsePage(this);
  uint64_t v4 = *((void *)this + 54);
  if (!v4)
  {
    uint64_t v5 = (**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this);
    int v6 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v19);
    int v7 = *((_DWORD *)this + 78);
    uint64_t v8 = *(void *)(v5 + 8);
    int v9 = *((_DWORD *)this + 94);
    uint64_t v11 = *v6;
    uint64_t v10 = v6[1];
    std::string::size_type v12 = (char *)operator new(0xC0uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)std::string::size_type v12 = &unk_26E24A210;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)this + 49);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v12 + 4) = 850045863;
    *((void *)v12 + 3) = &unk_26E24A358;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 97) = 0u;
    *((_DWORD *)v12 + 29) = v7;
    *((_DWORD *)v12 + 30) = 1;
    *((_DWORD *)v12 + 31) = v8;
    *((_DWORD *)v12 + 32) = 0;
    *((_DWORD *)v12 + 33) = v9;
    *((void *)v12 + 17) = v11;
    *((void *)v12 + 18) = v10;
    *((void *)v12 + 19) = 0;
    operator new();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v14 = *((void *)this + 54);
  std::string v15 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a2 = v14;
  a2[1] = v15;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_22E953ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  xgboost::data::PageSourceIncMixIn<xgboost::SortedCSCPage>::~PageSourceIncMixIn(v35);
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    if (!v33) {
      goto LABEL_4;
    }
  }
  else if (!v33)
  {
LABEL_4:
    std::__shared_weak_count::~__shared_weak_count(v32);
    operator delete(v37);
    if (a32 < 0) {
      operator delete(a27);
    }
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  goto LABEL_4;
}

void xgboost::data::SparsePageDMatrix::GetGradientIndex(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  LODWORD(v36) = a2[1];
  LODWORD(__p[0]) = 2;
  if ((int)v36 < 2) {
    dmlc::LogCheckFormat<int,int>();
  }
  std::string::basic_string[abi:ne180100]<0>(v34, ".gradient_index.page");
  int v6 = (_OWORD *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 352), *(void *)(a1 + 360));
  }
  else
  {
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *v6;
    v33.__r_.__value_.__r.__words[2] = *(void *)(a1 + 368);
  }
  int v7 = (void *)(a1 + 256);
  xgboost::data::MakeCache(&v36, a1, v34, (uint64_t)&v33, a1 + 256);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete((void *)v34[0]);
  }
  xgboost::data::SparsePageDMatrix::InitializeSparsePage((xgboost::data::SparsePageDMatrix *)a1);
  if (!**(unsigned char **)std::map<std::string,xgboost::Json>::at(a1 + 256, (const void **)&v36)) {
    goto LABEL_25;
  }
  v8.n128_u64[0] = *(void *)(a1 + 248);
  int v11 = *a2;
  int v10 = a2[1];
  v9.n128_u64[0] = *((void *)a2 + 4);
  if (*((void *)a2 + 1))
  {
    if (v11 != -1 || v10 || *((void *)a2 + 2)) {
      goto LABEL_18;
    }
  }
  else if (v11 != -1 || v10)
  {
LABEL_18:
    if (!*((unsigned char *)a2 + 24)
      && *(_DWORD *)(a1 + 216) == v11
      && *(_DWORD *)(a1 + 220) == v10
      && v8.n128_f64[0] == v9.n128_f64[0])
    {
      goto LABEL_22;
    }
LABEL_25:
    uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 256, (const void **)&v36);
    if (a1 + 264 != v13)
    {
      uint64_t v14 = (uint64_t *)v13;
      std::string v15 = *(void **)(v13 + 8);
      if (v15)
      {
        do
        {
          std::string v16 = v15;
          std::string v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        char v17 = (void *)v13;
        do
        {
          std::string v16 = (void *)v17[2];
          BOOL v18 = *v16 == (void)v17;
          char v17 = v16;
        }
        while (!v18);
      }
      if (*v7 == v13) {
        *int v7 = v16;
      }
      char v19 = *(uint64_t **)(a1 + 264);
      --*(void *)(a1 + 272);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v19, v14);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)(v14 + 4));
      operator delete(v14);
    }
    std::string::basic_string[abi:ne180100]<0>(v29, ".gradient_index.page");
    if (*(char *)(a1 + 375) < 0)
    {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 352), *(void *)(a1 + 360));
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v6;
      v28.__r_.__value_.__r.__words[2] = *(void *)(a1 + 368);
    }
    xgboost::data::MakeCache(&v31, a1, v29, (uint64_t)&v28, a1 + 256);
    if (v32 < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v30 < 0) {
      operator delete((void *)v29[0]);
    }
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v27, (uint64_t)__p, 167, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Generating new Gradient Index.", 30);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v27);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    xgboost::common::SketchOnDMatrix((xgboost::common::HistogramCuts *)&v27);
  }
LABEL_22:
  uint64_t v12 = *(void *)(a1 + 464);
  if (!v12)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
    char v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ghist_index_source_", 33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
    uint64_t v12 = *(void *)(a1 + 464);
  }
  (*(void (**)(uint64_t, __n128, __n128))(*(void *)v12 + 56))(v12, v8, v9);
  uint64_t v20 = *(void *)(a1 + 464);
  std::string v21 = *(std::__shared_weak_count **)(a1 + 472);
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  *a3 = v20;
  a3[1] = v21;
  if (v37 < 0) {
    operator delete((void *)v36);
  }
}

void sub_22E95480C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(a1);
}

void xgboost::common::SketchOnDMatrix(xgboost::common::HistogramCuts *a1@<X8>)
{
}

void sub_22E954FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl((uint64_t)va);
  __n128 v9 = *(void **)(v8 - 136);
  if (v9)
  {
    *(void *)(v8 - 128) = v9;
    operator delete(v9);
  }
  *(void *)(v8 - 136) = v8 - 112;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 136));
  xgboost::common::HistogramCuts::~HistogramCuts(v7);
}

BOOL xgboost::DMatrix::IsDense(xgboost::DMatrix *this)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(xgboost::DMatrix *))(*(void *)this + 24))(this) + 16);
  uint64_t v3 = *(void *)(*(uint64_t (**)(xgboost::DMatrix *))(*(void *)this + 24))(this);
  return v2 == *(void *)((*(uint64_t (**)(xgboost::DMatrix *))(*(void *)this + 24))(this) + 8) * v3;
}

void xgboost::common::HistogramCuts::~HistogramCuts(xgboost::common::HistogramCuts *this)
{
}

void xgboost::data::SparsePageDMatrix::GetEllpackBatches(uint64_t a1@<X0>, void *a2@<X8>)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  uint64_t v7 = *(void *)(a1 + 400);
  int v6 = *(std::__shared_weak_count **)(a1 + 408);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *a2 = v7;
  a2[1] = v6;
}

void sub_22E9552B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SparsePageDMatrix::Ctx(xgboost::data::SparsePageDMatrix *this)
{
  return (uint64_t)this + 320;
}

uint64_t xgboost::data::SparsePageDMatrix::SingleColBlock(xgboost::data::SparsePageDMatrix *this)
{
  return 0;
}

void xgboost::data::SparsePageDMatrix::~SparsePageDMatrix(xgboost::data::SparsePageDMatrix *this)
{
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  xgboost::data::SparsePageDMatrix *v7;
  uint64_t v8;
  xgboost::data::Cache *v9;
  std::error_code *v10;
  const std::__fs::filesystem::path *v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  xgboost::data::SparsePageDMatrix *v16;
  xgboost::data::SparsePageDMatrix *v17;
  BOOL v18;
  std::string *Entry;
  void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  void *v28[2];
  unsigned __int8 v29;
  void *__p[2];
  char v31;
  void v32[35];

  *(void *)this = &unk_26E249B08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (xgboost::data::SparsePageDMatrix *)*((void *)this + 32);
  if (v7 != (xgboost::data::SparsePageDMatrix *)((char *)this + 264))
  {
    char v8 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    do
    {
      __n128 v9 = (xgboost::data::Cache *)*((void *)v7 + 7);
      if (!v9)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_dmatrix.h");
        uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
        std::string v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: kv.second", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v32);
        __n128 v9 = (xgboost::data::Cache *)*((void *)v7 + 7);
      }
      xgboost::data::Cache::ShardName(v9, (uint64_t)v28);
      if ((v29 & 0x80u) == 0) {
        int v11 = (const std::__fs::filesystem::path *)v28;
      }
      else {
        int v11 = (const std::__fs::filesystem::path *)v28[0];
      }
      if (remove(v11, v10) && *(int *)(v8 + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v32, (uint64_t)__p, 32, 1);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Couldn't remove external memory cache file ", 43);
        uint64_t v13 = (v29 & 0x80u) == 0 ? v28 : (void **)v28[0];
        uint64_t v14 = (v29 & 0x80u) == 0 ? (void *)v29 : v28[1];
        std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, (uint64_t)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; you may want to remove it manually",
          36);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v32);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
      }
      if ((char)v29 < 0) {
        operator delete(v28[0]);
      }
      std::string v16 = (xgboost::data::SparsePageDMatrix *)*((void *)v7 + 1);
      if (v16)
      {
        do
        {
          char v17 = v16;
          std::string v16 = *(xgboost::data::SparsePageDMatrix **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = (xgboost::data::SparsePageDMatrix *)*((void *)v7 + 2);
          BOOL v18 = *(void *)v17 == (void)v7;
          uint64_t v7 = v17;
        }
        while (!v18);
      }
      uint64_t v7 = v17;
    }
    while (v17 != (xgboost::data::SparsePageDMatrix *)((char *)this + 264));
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  char v23 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  char v26 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*((void **)this + 33));
  xgboost::MetaInfo::~MetaInfo((xgboost::data::SparsePageDMatrix *)((char *)this + 8));
}

uint64_t xgboost::data::SparsePageDMatrix::Slice()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for external memory.", 53);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E955374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::SparsePageDMatrix::EllpackExists(xgboost::data::SparsePageDMatrix *this)
{
  return *((void *)this + 50) != 0;
}

BOOL xgboost::data::SparsePageDMatrix::SparsePageExists(xgboost::data::SparsePageDMatrix *this)
{
  return *((void *)this + 48) != 0;
}

void dmlc::any::~any(dmlc::any *this)
{
  if (*(void *)this)
  {
    uint64_t v2 = **(void (***)(char *))this;
    if (v2) {
      v2((char *)this + 8);
    }
    *(void *)this = 0;
  }
}

void dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: type_ != nullptr", 30);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"The any container is empty", 26);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" requested=", 11);
    size_t v9 = strlen((const char *)(0x800000022EA1BFC3 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, 0x800000022EA1BFC3 & 0x7FFFFFFFFFFFFFFFLL, v9);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    uint64_t v2 = *a1;
  }
  {
    int v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    int v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"The stored type mismatch", 24);
    std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" stored=", 8);
    std::string v16 = (const char *)(*(void *)(*(void *)(*a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v17 = strlen(v16);
    BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" requested=", 11);
    size_t v20 = strlen((const char *)(0x800000022EA1BFC3 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, 0x800000022EA1BFC3 & 0x7FFFFFFFFFFFFFFFLL, v20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
}

void sub_22E9555AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: type_ != nullptr", 30);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"The any container is empty", 26);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" requested=", 11);
    size_t v9 = strlen((const char *)(0x800000022EA1BFFALL & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, 0x800000022EA1BFFALL & 0x7FFFFFFFFFFFFFFFLL, v9);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    uint64_t v2 = *a1;
  }
  {
    int v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    int v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"The stored type mismatch", 24);
    std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" stored=", 8);
    std::string v16 = (const char *)(*(void *)(*(void *)(*a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v17 = strlen(v16);
    BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" requested=", 11);
    size_t v20 = strlen((const char *)(0x800000022EA1BFFALL & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, 0x800000022EA1BFFALL & 0x7FFFFFFFFFFFFFFFLL, v20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
}

void sub_22E955790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::Cache::ShardName(xgboost::data::Cache *this@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v5 = *(std::string *)((char *)this + 8);
  }
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 32);
  }
  xgboost::data::Cache::ShardName((const void **)&v5.__r_.__value_.__l.__data_, (char *)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22E95586C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, const void **a2, long long **a3)
{
  std::string v5 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(a1, &v17, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    char v8 = *a3;
    int v6 = operator new(0x48uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    char v16 = 0;
    size_t v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v6[6] = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v16 = 1;
    uint64_t v11 = v17;
    *int v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *uint64_t v7 = v6;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = v6;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_22E955990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<xgboost::data::Cache>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<xgboost::data::Cache>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 56);
    if (v2)
    {
      *(void *)(v1 + 64) = v2;
      operator delete(v2);
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

uint64_t xgboost::data::Cache::ShardName@<X0>(const void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2;
  if (a2[23] < 0) {
    uint64_t v4 = *(char **)a2;
  }
  char v6 = 46;
  if (*v4 != 46) {
    dmlc::LogCheckFormat<char,char>(v4, &v6);
  }
  return std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (const void **)a2, a3);
}

void sub_22E955C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SortedSketchContainer::~SortedSketchContainer(xgboost::common::SortedSketchContainer *this)
{
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  xgboost::common::Monitor::~Monitor((char **)this + 14);
  char v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  std::string v5 = (void **)((char *)this + 24);
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::string v5 = (void **)this;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void xgboost::common::SortedSketchContainer::SortedSketchContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  uint64_t v5 = **(void **)(a3 + 168);
  uint64_t v6 = *(void *)(*(void *)(a3 + 168) + 8) - v5;
  uint64_t v7 = v5;
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SketchContainerImpl();
}

void sub_22E955EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  char v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 184) = v21;
    operator delete(v21);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v18);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::SortedQuantile>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::common::SortedQuantile>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

void std::vector<xgboost::common::SortedQuantile>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[48 * v8];
    std::string v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    char v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::LimitSizeLevel(unint64_t a1, uint64_t *a2, unint64_t *a3, double a4)
{
  uint64_t v4 = 1;
  do
  {
    *a2 = v4;
    unint64_t v5 = vcvtpd_u64_f64((double)(unint64_t)v4 / a4);
    if (v5 + 1 < a1) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = a1;
    }
    *a3 = v6;
    uint64_t v4 = *a2 + 1;
  }
  while (v6 << *a2 < a1);
  unint64_t v7 = (unint64_t)((double)v6 * a4);
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  if (*a2 > v7)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/quantile.h");
    unint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: nlevel <= std::max(static_cast<size_t>(1), static_cast<size_t>(limit_size * eps))", 95);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"invalid init parameter", 22);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  }
}

void sub_22E9561DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::HistogramCuts::HistogramCuts(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = -1082130432;
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void xgboost::common::HistogramCuts::Swap()
{
}

void sub_22E9563E8()
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::GHistIndexMatrix>::~PageSourceIncMixIn(void *a1)
{
  *a1 = &unk_26E249C48;
  unint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::~SparsePageSourceImpl((uint64_t)a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 72);
  }
  return result;
}

void sub_22E9564FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::GHistIndexMatrix>::operator++(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v10, (std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 160)) {
    xgboost::data::SparsePageSource::operator++(*(void *)(a1 + 144));
  }
  int v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  BOOL v7 = v2 == *(_DWORD *)(a1 + 108);
  *(unsigned char *)(a1 + 88) = v7;
  if (v7)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (!*(unsigned char *)v3)
    {
      unint64_t v5 = *(uint64_t **)(v3 + 56);
      uint64_t v4 = *(uint64_t **)(v3 + 64);
      char v6 = v5 + 1;
      BOOL v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        uint64_t v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(unsigned char *)uint64_t v3 = 1;
    }
    if (!v2) {
      dmlc::LogCheckFormat<unsigned int,int>();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  if (*(unsigned char *)(a1 + 160) && *(_DWORD *)(*(void *)(a1 + 144) + 104) != *(_DWORD *)(a1 + 104)) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  std::mutex::unlock(v10);
  return a1;
}

void sub_22E956768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::Reset(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_22E956858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t xgboost::data::SparsePageSource::operator++(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v15, (std::mutex *)(a1 + 8));
  int v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  if (**(unsigned char **)(a1 + 112)) {
    BOOL v3 = v2 == *(_DWORD *)(a1 + 108);
  }
  else {
    BOOL v3 = (*(unsigned int (**)(void))(a1 + 160))(*(void *)(a1 + 144)) == 0;
  }
  int v4 = v3;
  *(unsigned char *)(a1 + 88) = v4;
  if (!v4) {
    xgboost::data::SparsePageSource::Fetch((xgboost::data::SparsePageSource *)a1);
  }
  uint64_t v5 = *(void *)(a1 + 112);
  if (!*(unsigned char *)v5)
  {
    BOOL v7 = *(uint64_t **)(v5 + 56);
    char v6 = *(uint64_t **)(v5 + 64);
    uint64_t v8 = v7 + 1;
    if (v7 != v6 && v8 != v6)
    {
      uint64_t v10 = *v7;
      do
      {
        v10 += *v8;
        *v8++ = v10;
      }
      while (v8 != v6);
    }
    *(unsigned char *)uint64_t v5 = 1;
  }
  int v11 = *(_DWORD *)(a1 + 108);
  int v12 = *(_DWORD *)(a1 + 104);
  if (v11)
  {
    if (v12 != v11) {
      dmlc::LogCheckFormat<unsigned int,unsigned int>();
    }
    int v12 = *(_DWORD *)(a1 + 104);
  }
  int v14 = 1;
  if (!v12) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  *(void *)(a1 + 168) = 0;
  std::mutex::unlock(v15);
  return a1;
}

void sub_22E956AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
}

xgboost::data::TryLockGuard *xgboost::data::TryLockGuard::TryLockGuard(xgboost::data::TryLockGuard *this, std::mutex *a2)
{
  *(void *)this = a2;
  if (!std::mutex::try_lock(a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: lock_.try_lock()", 30);
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Multiple threads attempting to use Sparse DMatrix.", 50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  return this;
}

void sub_22E956BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::SparsePageSource::Fetch(xgboost::data::SparsePageSource *this)
{
}

void sub_22E956D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    int v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
  }
  int v2 = *(unsigned char **)(a1 + 112);
  int v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = *(void *)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 128) = 0;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::resize(*(atomic_ullong **)(a1 + 136), *(unsigned int *)(a1 + 108));
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    if (v5 >= 4) {
      uint64_t v5 = 4;
    }
    else {
      uint64_t v5 = v5;
    }
    uint64_t v30 = v5;
    LODWORD(v29) = 0;
    if (!v5) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    unint64_t v6 = *(unsigned int *)(a1 + 104);
    unint64_t v29 = v6;
    unint64_t v7 = v30;
    if (v30)
    {
      unint64_t v8 = 0;
      do
      {
        unint64_t v9 = v6 % *(unsigned int *)(a1 + 108);
        unint64_t v29 = v9;
        uint64_t v10 = *(void **)(a1 + 136);
        if (v9 >= (uint64_t)(v10[1] - *v10) >> 3) {
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        }
        if (!*(void *)(*v10 + 8 * v9))
        {
          unint64_t v28 = (uint64_t)(*(void *)(*(void *)(a1 + 112) + 64) - *(void *)(*(void *)(a1 + 112) + 56)) >> 3;
          if (v9 >= v28) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          *(void *)&long long v27 = v29;
          *((void *)&v27 + 1) = a1;
          std::async[abi:ne180100]<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>(1, &v28);
          int v11 = *(uint64_t **)(a1 + 136);
          uint64_t v12 = *v11;
          if (v29 >= (v11[1] - *v11) >> 3) {
            std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v13 = v28;
          unint64_t v28 = 0;
          int v14 = *(atomic_ullong **)(v12 + 8 * v29);
          *(void *)(v12 + 8 * v29) = v13;
          if (v14 && !atomic_fetch_add(v14 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
            (*(void (**)(atomic_ullong *))(*v14 + 16))(v14);
          }
          unint64_t v15 = v28;
          if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            (*(void (**)(unint64_t))(*(void *)v15 + 16))(v15);
          }
          unint64_t v9 = v29;
          unint64_t v7 = v30;
        }
        ++v8;
        unint64_t v6 = v9 + 1;
        unint64_t v29 = v6;
      }
      while (v8 < v7);
    }
    uint64_t v16 = *(void *)(a1 + 136);
    uint64_t v17 = *(void **)v16;
    uint64_t v18 = *(void **)(v16 + 8);
    if (v17 == v18)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        if (*v17++) {
          ++v19;
        }
      }
      while (v17 != v18);
    }
    unint64_t v28 = v19;
    if (v19 != v7) {
      dmlc::LogCheckFormat<long,unsigned long>();
    }
    std::future<std::shared_ptr<xgboost::SparsePage>>::get((atomic_ullong **)(**(void **)(a1 + 136) + 8 * *(unsigned int *)(a1 + 104)), &v27);
    long long v21 = v27;
    long long v27 = 0uLL;
    char v22 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v21;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (*((void *)&v27 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
      }
    }
  }
  return v3 != 0;
}

void sub_22E957214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void _ZN7xgboost4data19HostAdapterDispatchIZNS0_16SparsePageSource5FetchEvEUlRKT_E_EEDcPKNS0_12DMatrixProxyES3_Pb(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v37 = v5;
  if (v5)
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(&v38, a1 + 224);
    uint64_t v6 = *(void *)(v37 + 16);
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8C288];
  }
  if (v37 && *(void *)v37) {
    (*(void (**)(uint64_t *))v37)(&v38);
  }
  if (v7)
  {
    unint64_t v8 = *(void (***)(void *))(a1 + 216);
    char v35 = v8;
    if (v8) {
      ((void (*)(void *, uint64_t))v8[1])(v36, a1 + 224);
    }
    dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>((uint64_t *)&v35);
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v36[0] + 32))(v36[0]);
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v37 = *(void *)v9;
    uint64_t v38 = v10;
    long long v11 = *(_OWORD *)(v9 + 16);
    long long v12 = *(_OWORD *)(v9 + 32);
    LOWORD(v41) = *(_WORD *)(v9 + 48);
    long long v40 = v12;
    long long v39 = v11;
    uint64_t v13 = *(void *)(v9 + 64);
    *((void *)&v41 + 1) = *(void *)(v9 + 56);
    uint64_t v42 = v13;
    __int16 v14 = *(_WORD *)(v9 + 104);
    long long v15 = *(_OWORD *)(v9 + 88);
    long long v43 = *(_OWORD *)(v9 + 72);
    long long v44 = v15;
    __int16 v45 = v14;
    uint64_t v16 = *(void *)(v9 + 120);
    uint64_t v46 = *(void *)(v9 + 112);
    uint64_t v47 = v16;
    long long v17 = *(_OWORD *)(v9 + 128);
    long long v18 = *(_OWORD *)(v9 + 144);
    __int16 v50 = *(_WORD *)(v9 + 160);
    long long v49 = v18;
    long long v48 = v17;
    int v51 = *(_DWORD *)(v9 + 168);
    if (v35 && *v35) {
      (*v35)(v36);
    }
    if (a3) {
      *a3 = 0;
    }
    xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>();
  }
  uint64_t v19 = *(void *)(a1 + 216);
  uint64_t v37 = v19;
  if (v19)
  {
    (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(&v38, a1 + 224);
    uint64_t v20 = *(void *)(v37 + 16);
  }
  else
  {
    uint64_t v20 = MEMORY[0x263F8C288];
  }
  if (v37 && *(void *)v37) {
    (*(void (**)(uint64_t *))v37)(&v38);
  }
  if (v21)
  {
    char v22 = *(void (***)(void *))(a1 + 216);
    char v35 = v22;
    if (v22) {
      ((void (*)(void *, uint64_t))v22[1])(v36, a1 + 224);
    }
    dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>((uint64_t *)&v35);
    uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v36[0] + 32))(v36[0]);
    uint64_t v24 = *(void *)(v23 + 8);
    uint64_t v37 = *(void *)v23;
    uint64_t v38 = v24;
    long long v26 = *(_OWORD *)(v23 + 32);
    long long v25 = *(_OWORD *)(v23 + 48);
    long long v27 = *(_OWORD *)(v23 + 16);
    LOWORD(v42) = *(_WORD *)(v23 + 64);
    long long v41 = v25;
    long long v39 = v27;
    long long v40 = v26;
    if (v35 && *v35) {
      (*v35)(v36);
    }
    if (a3) {
      *a3 = 0;
    }
    xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>();
  }
  if (a3)
  {
    *a3 = 1;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./proxy_dmatrix.h");
    unint64_t v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unknown type: ", 14);
    uint64_t v31 = *(void *)(a1 + 216);
    uint64_t v37 = v31;
    if (v31 && ((*(void (**)(uint64_t *, uint64_t))(v31 + 8))(&v38, a1 + 224), v37)) {
      uint64_t v32 = *(void *)(v37 + 16);
    }
    else {
      uint64_t v32 = MEMORY[0x263F8C288];
    }
    std::string v33 = (const char *)(*(void *)(v32 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v34 = strlen(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v33, v34);
    if (v37 && *(void *)v37) {
      (*(void (**)(uint64_t *))v37)(&v38);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
  }
}

void sub_22E957658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::WriteCache(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 112))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    long long v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !cache_info_->written", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  uint64_t v2 = xgboost::data::CreatePageFormat<xgboost::SparsePage>((uint64_t)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  if (!v3)
  {
    xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a1 + 112), (uint64_t)__p);
    if (v30 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    uint64_t v5 = dmlc::Stream::Create((dmlc::Stream *)v4, "w", 0);
    uint64_t v6 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = *(void *)(a1 + 128);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v2 + 24))(v2, *(void *)(a1 + 72), v3);
  std::chrono::steady_clock::now();
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v27, 164, 2);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" MB written in ", 15);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" seconds.", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  uint64_t v10 = *(void **)(a1 + 112);
  long long v11 = (uint64_t *)v10[8];
  unint64_t v12 = v10[9];
  if ((unint64_t)v11 >= v12)
  {
    __int16 v14 = (uint64_t *)v10[7];
    uint64_t v15 = v11 - v14;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = v12 - (void)v14;
    unint64_t v17 = (uint64_t)(v12 - (void)v14) >> 2;
    if (v17 <= v15 + 1) {
      unint64_t v17 = v15 + 1;
    }
    if (v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 9), v18);
      __int16 v14 = (uint64_t *)v10[7];
      long long v11 = (uint64_t *)v10[8];
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (uint64_t *)&v19[8 * v15];
    BOOL v21 = &v19[8 * v18];
    uint64_t *v20 = v7;
    uint64_t v13 = v20 + 1;
    while (v11 != v14)
    {
      uint64_t v22 = *--v11;
      *--uint64_t v20 = v22;
    }
    v10[7] = v20;
    v10[8] = v13;
    v10[9] = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *long long v11 = v7;
    uint64_t v13 = v11 + 1;
  }
  v10[8] = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_22E9579EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  v0 = operator new(0x30uLL);
  _ZNSt3__120__shared_ptr_emplaceIN7xgboost10SparsePageENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v0);
}

void sub_22E957AD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN7xgboost10SparsePageENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E249D28;
  xgboost::SparsePage::SparsePage((xgboost::SparsePage *)(a1 + 3));
}

void sub_22E957B30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::SparsePage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::SparsePage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::SparsePage>::__on_zero_shared()
{
}

void std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::resize(atomic_ullong *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](a1, *a1 + 8 * a2);
    }
  }
  else
  {
    std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__append(a1, a2 - v2);
  }
}

uint64_t std::async[abi:ne180100]<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>();
  }
  if ((result & 2) != 0) {
    std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>();
  }
  *a2 = 0;
  return result;
}

void sub_22E957CB8(_Unwind_Exception *a1)
{
}

void std::future<std::shared_ptr<xgboost::SparsePage>>::get(atomic_ullong **a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::move((uint64_t)v2, a2);
  if (v2 && !atomic_fetch_add(v2 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void (**)(atomic_ullong *))(*v2 + 16);
    v3(v2);
  }
}

void sub_22E957D4C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v1 + 16))(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    __int16 v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    unint64_t v16 = &v15[8 * a2];
    std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer((atomic_ullong *)&v14);
  }
}

void sub_22E957E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *--a3;
      *(void *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>::operator()[abi:ne180100]((atomic_ullong *)a1);
  }
  return a1;
}

atomic_ullong *std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>::operator()[abi:ne180100](atomic_ullong *result)
{
  uint64_t v1 = *(atomic_ullong ***)(result[2] + 8);
  for (uint64_t i = *(atomic_ullong ***)(result[1] + 8); v1 != i; ++v1)
  {
    uint64_t result = *v1;
    if (*v1)
    {
      if (!atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
        uint64_t result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
      }
    }
  }
  return result;
}

atomic_ullong *std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer(atomic_ullong *a1)
{
  if (*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

atomic_ullong *std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::__destruct_at_end[abi:ne180100](atomic_ullong *result, uint64_t a2)
{
  atomic_ullong v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = *(atomic_ullong **)(v2 - 8);
      void v4[2] = v2 - 8;
      if (result)
      {
        if (!atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
          uint64_t result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
        }
      }
      atomic_ullong v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

atomic_ullong *std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](atomic_ullong *result, atomic_ullong a2)
{
  uint64_t v3 = result;
  for (atomic_ullong i = result[1]; i != a2; i -= 8)
  {
    uint64_t v5 = *(atomic_ullong **)(i - 8);
    uint64_t result = v5;
    if (v5 && !atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      uint64_t result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
    }
  }
  v3[1] = a2;
  return result;
}

void std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>()
{
}

void sub_22E9582B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
  if (!atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>()
{
}

void sub_22E958408(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(v2, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__assoc_sub_state::__execute(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  atomic_ullong v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  atomic_ullong v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::__on_zero_shared((uint64_t)a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
}

void sub_22E9585E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22E9585D0);
}

void sub_22E958624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    atomic_ullong v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

void std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::set_value<std::shared_ptr<xgboost::SparsePage>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_22E95873C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::future_category();
  MEMORY[0x230FA7BB0](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x263F8C1A0], MEMORY[0x263F8C0C0]);
}

void sub_22E9587A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}::operator()(void *a1)
{
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  xgboost::data::CreatePageFormat<xgboost::SparsePage>((uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a1[1] + 112), (uint64_t)v10);
  uint64_t v9 = 0;
  uint64_t v2 = *(void *)(a1[1] + 112);
  uint64_t v3 = *(void *)(v2 + 56);
  if (*a1 < (unint64_t)((*(void *)(v2 + 64) - v3) >> 3))
  {
    uint64_t v9 = *(void **)(v3 + 8 * *a1);
    if (v11 >= 0) {
      uint64_t v4 = (dmlc::SeekStream *)v10;
    }
    else {
      uint64_t v4 = (dmlc::SeekStream *)v10[0];
    }
    uint64_t v5 = dmlc::SeekStream::CreateForRead(v4, 0);
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, v9);
    std::exception_ptr v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    if (v6 != v9) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_22E958AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  long long v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

void sub_22E958BF8(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E958C04);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::SparsePage>(uint64_t a1)
{
  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  uint64_t v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  uint64_t v3 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v2 + 3), (const void **)a1);
  if ((long long *)((char *)v2 + 56) == (long long *)v3 || (uint64_t v4 = *(void *)(v3 + 56)) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown format type ", 20);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const void *)a1;
    }
    else {
      uint64_t v12 = *(const void **)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
    return 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 96);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    std::exception_ptr v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
    return v6();
  }
}

void sub_22E958D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*,void>()
{
}

void sub_22E958E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  uint64_t v7 = (const void **)a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *v7;
  *uint64_t v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = (void (*)(void *))v7[1];
  uint64_t v4 = (uint64_t)v7[2];
  uint64_t v5 = (char *)v7[3] + (v4 >> 1);
  if (v4) {
    uint64_t v3 = *(void (**)(void *))(*v5 + v3);
  }
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_22E958EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0) {
    std::__throw_future_error[abi:ne180100](1u);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 136) = v3 | 2;

  std::mutex::unlock(v2);
}

void sub_22E958FD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__deferred_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::~__deferred_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x230FA80D0);
}

void std::__deferred_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
}

void sub_22E95911C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22E95910CLL);
}

void sub_22E959160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void dmlc::LogCheckFormat<long,unsigned long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E959314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_22E9593E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::~SparsePageSourceImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26E249CD8;
  int v3 = (void ***)(a1 + 136);
  uint64_t v2 = *(atomic_ullong ****)(a1 + 136);
  uint64_t v4 = *v2;
  std::exception_ptr v5 = v2[1];
  while (v4 != v5)
  {
    if (*v4)
    {
      std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>::get(v4, &v10);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    ++v4;
  }
  std::unique_ptr<std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>>::reset[abi:ne180100](v3, 0);
  uint64_t v6 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  std::exception_ptr v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  char v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>::get(atomic_ullong **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  std::__assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>>::move((uint64_t)v2, a2);
  if (v2 && !atomic_fetch_add(v2 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v3 = *(void (**)(atomic_ullong *))(*v2 + 16);
    v3(v2);
  }
}

void sub_22E959580(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v1 + 16))(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_22E959668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    int v3 = v2;
    std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100]((atomic_ullong *)v2, (atomic_ullong)*v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_22E9599E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::~SparsePageSourceImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26E249F00;
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  int v3 = (atomic_ullong **)*v2;
  uint64_t v4 = (atomic_ullong **)v2[1];
  if ((atomic_ullong **)*v2 == v4)
  {
    *(void *)(a1 + 136) = 0;
LABEL_9:
    if (*v2)
    {
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](v2, *v2);
      operator delete((void *)*v2);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
    goto LABEL_12;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::SparsePage>>::get(v3, &v9);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v5 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  std::exception_ptr v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::exception_ptr v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void xgboost::data::SparsePageSource::~SparsePageSource(xgboost::data::SparsePageSource *this)
{
  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::~SparsePageSourceImpl((uint64_t)this);

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 72);
  }
  return result;
}

void sub_22E959CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void xgboost::data::SparsePageSource::Reset(xgboost::data::SparsePageSource *this)
{
  if (*((void *)this + 21))
  {
    xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)((char *)this + 8));
    (*((void (**)(void))this + 19))(*((void *)this + 18));
    std::mutex::unlock(v2);
  }
  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Reset((uint64_t)this);
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)((char *)this + 8));
  *((void *)this + 22) = 0;
  std::mutex::unlock(v2);
}

void sub_22E959D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Reset(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_22E959E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E249F50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::CSCPageSource::Fetch(xgboost::data::CSCPageSource *this)
{
  if (*((unsigned char *)this + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    uint64_t v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::string v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (!**((unsigned char **)this + 14))
  {
    (*(void (**)(pthread_t *__return_ptr))(**((void **)this + 18) + 40))(&v34);
    operator new();
  }
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    *((void *)this + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *((void *)this + 17);
    unint64_t v4 = *((unsigned int *)this + 27);
    char v6 = *(void **)v3;
    uint64_t v5 = *(void **)(v3 + 8);
    unint64_t v7 = ((uint64_t)v5 - *(void *)v3) >> 3;
    if (v4 <= v7)
    {
      if (v4 < v7) {
        std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](*((atomic_ullong **)this + 17), (atomic_ullong)&v6[v4]);
      }
    }
    else
    {
      unint64_t v8 = v4 - v7;
      uint64_t v9 = *(void *)(v3 + 16);
      if (v4 - v7 <= (v9 - (uint64_t)v5) >> 3)
      {
        bzero(*(void **)(v3 + 8), 8 * v8);
        *(void *)(v3 + 8) = &v5[v8];
      }
      else
      {
        uint64_t v10 = v9 - (void)v6;
        if (v10 >> 2 > v4) {
          unint64_t v4 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v4;
        }
        if (v11 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v12 = (char *)operator new(8 * v11);
        uint64_t v13 = &v12[8 * v7];
        std::exception_ptr v14 = &v12[8 * v11];
        bzero(v13, 8 * v8);
        long long v15 = &v13[8 * v8];
        if (v5 == v6)
        {
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
        }
        else
        {
          do
          {
            uint64_t v16 = *--v5;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
            *uint64_t v5 = 0;
          }
          while (v5 != v6);
          uint64_t v5 = *(void **)v3;
          unint64_t v17 = *(void **)(v3 + 8);
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
          while (v17 != v5)
          {
            uint64_t v19 = (atomic_ullong *)*--v17;
            uint64_t v18 = v19;
            if (v19 && !atomic_fetch_add(v18 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
              (*(void (**)(atomic_ullong *))(*v18 + 16))(v18);
            }
          }
        }
        if (v5) {
          operator delete(v5);
        }
      }
    }
  }
  LODWORD(v20) = *((_DWORD *)this + 27);
  if (v20 >= 4) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = v20;
  }
  long long v36 = (char *)v20;
  LODWORD(v37) = 0;
  if (!v20) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  unint64_t v21 = *((unsigned int *)this + 26);
  unint64_t v35 = v21;
  if (v36)
  {
    for (unint64_t i = 0; i < (unint64_t)v36; ++i)
    {
      unint64_t v23 = v21 % *((unsigned int *)this + 27);
      unint64_t v35 = v23;
      uint64_t v24 = **((void **)this + 17);
      if (v23 >= (*(void *)(*((void *)this + 17) + 8) - v24) >> 3) {
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (!*(void *)(v24 + 8 * v23))
      {
        if (v23 >= (uint64_t)(*(void *)(*((void *)this + 14) + 64) - *(void *)(*((void *)this + 14) + 56)) >> 3) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        operator new();
      }
      unint64_t v21 = v23 + 1;
      unint64_t v35 = v21;
    }
  }
  uint64_t v25 = *((void *)this + 17);
  long long v26 = *(void **)v25;
  long long v27 = *(void **)(v25 + 8);
  if (v26 == v27)
  {
    char v28 = 0;
  }
  else
  {
    char v28 = 0;
    do
    {
      if (*v26++) {
        ++v28;
      }
    }
    while (v26 != v27);
  }
  uint64_t v37 = v28;
  if (v28 != v36) {
    dmlc::LogCheckFormat<long,unsigned long>();
  }
  std::future<std::shared_ptr<xgboost::CSCPage>>::get(__p, (uint64_t *)(**((void **)this + 17) + 8 * *((unsigned int *)this + 26)));
  char v30 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)__p;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_22E95AB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E95AB70);
}

void sub_22E95AB8C()
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::CSCPage>::~PageSourceIncMixIn(void *a1)
{
  *a1 = &unk_26E24A048;
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)a1);
}

void xgboost::data::CSCPageSource::~CSCPageSource(xgboost::data::CSCPageSource *this)
{
  *(void *)this = &unk_26E24A048;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E24A048;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)this);

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    unint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 72);
  }
  return result;
}

void sub_22E95AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::CSCPage>::operator++(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v10, (std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 160)) {
    xgboost::data::SparsePageSource::operator++(*(void *)(a1 + 144));
  }
  int v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  BOOL v7 = v2 == *(_DWORD *)(a1 + 108);
  *(unsigned char *)(a1 + 88) = v7;
  if (v7)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (!*(unsigned char *)v3)
    {
      uint64_t v5 = *(uint64_t **)(v3 + 56);
      unint64_t v4 = *(uint64_t **)(v3 + 64);
      char v6 = v5 + 1;
      BOOL v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        uint64_t v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(unsigned char *)uint64_t v3 = 1;
    }
    if (!v2) {
      dmlc::LogCheckFormat<unsigned int,int>();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  if (*(unsigned char *)(a1 + 160) && *(_DWORD *)(*(void *)(a1 + 144) + 104) != *(_DWORD *)(a1 + 104)) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  std::mutex::unlock(v10);
  return a1;
}

void sub_22E95AFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::Reset(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_22E95B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void std::shared_ptr<xgboost::CSCPage>::reset[abi:ne180100]<xgboost::CSCPage,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::CSCPage>::shared_ptr[abi:ne180100]<xgboost::CSCPage,void>(&v2, a2);
}

void std::future<std::shared_ptr<xgboost::CSCPage>>::get(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  uint64_t v4 = *(void *)(v3 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v7, (const std::exception_ptr *)(v3 + 16));
    v6.__ptr_ = &v7;
    std::rethrow_exception(v6);
    __break(1u);
  }
  else
  {
    *a1 = *(_OWORD *)(v3 + 144);
    *(void *)(v3 + 144) = 0;
    *(void *)(v3 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 16);
      v5(v3);
    }
  }
}

void sub_22E95B20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr(&a10);
  if (a12) {
    std::mutex::unlock(a11);
  }
  if (v12)
  {
    if (!atomic_fetch_add(v12 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v12 + 16))(v12);
    }
  }
  _Unwind_Resume(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  long long v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  long long v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return std::__assoc_state<std::shared_ptr<xgboost::CSCPage>>::__on_zero_shared((uint64_t)a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}::operator()((uint64_t)v1, (void *)(a1 + 160));
}

void sub_22E95B3F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22E95B3E0);
}

void sub_22E95B434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t std::__assoc_state<std::shared_ptr<xgboost::CSCPage>>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    long long v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

void std::__assoc_state<std::shared_ptr<xgboost::CSCPage>>::set_value<std::shared_ptr<xgboost::CSCPage>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_22E95B54C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::CSCPage>(uint64_t a1)
{
  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  long long v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  uint64_t v3 = (const void **)v2 + 7;
  uint64_t v4 = (char *)*((void *)v2 + 7);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = (uint64_t)(v2 + 4);
  std::exception_ptr v6 = (const void **)v2 + 7;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)v4 + 4, (const void **)a1);
    uint64_t v8 = (char **)(v4 + 8);
    if (!v7)
    {
      uint64_t v8 = (char **)v4;
      std::exception_ptr v6 = (const void **)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v6 == v3
    || std::less<std::string>::operator()[abi:ne180100](v5, (const void **)a1, v6 + 4)
    || (uint64_t v9 = v6[7]) == 0)
  {
LABEL_13:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    std::exception_ptr v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unknown format type ", 20);
    int v16 = *(char *)(a1 + 23);
    if (v16 >= 0) {
      unint64_t v17 = (const void *)a1;
    }
    else {
      unint64_t v17 = *(const void **)a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
    return 0;
  }
  else
  {
    uint64_t v10 = v9[12];
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 48);
    return v11();
  }
}

void sub_22E95B6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::CSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::CSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A148;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::CSCPage>::__on_zero_shared()
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  uint64_t v8 = a1;
  long long v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  uint64_t v5 = (void (*)(void *))a1[1];
  std::exception_ptr v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_22E95B80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::shared_ptr<xgboost::CSCPage>::shared_ptr[abi:ne180100]<xgboost::CSCPage,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_22E95B908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<xgboost::CSCPage>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2) {
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector();
  }
}

uint64_t *std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2) {
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector();
  }
  return result;
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26E24A098;
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  uint64_t v3 = (uint64_t *)*v2;
  uint64_t v4 = (uint64_t *)v2[1];
  if ((uint64_t *)*v2 == v4)
  {
    *(void *)(a1 + 136) = 0;
LABEL_9:
    if (*v2)
    {
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](v2, *v2);
      operator delete((void *)*v2);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
    goto LABEL_12;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::CSCPage>>::get(&v9, v3);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v5 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  std::exception_ptr v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::SortedCSCPageSource::Fetch(xgboost::data::SortedCSCPageSource *this)
{
  if (*((unsigned char *)this + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    uint64_t v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::string v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (!**((unsigned char **)this + 14))
  {
    (*(void (**)(pthread_t *__return_ptr))(**((void **)this + 18) + 40))(&v34);
    operator new();
  }
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    *((void *)this + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *((void *)this + 17);
    unint64_t v4 = *((unsigned int *)this + 27);
    std::exception_ptr v6 = *(void **)v3;
    uint64_t v5 = *(void **)(v3 + 8);
    unint64_t v7 = ((uint64_t)v5 - *(void *)v3) >> 3;
    if (v4 <= v7)
    {
      if (v4 < v7) {
        std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](*((atomic_ullong **)this + 17), (atomic_ullong)&v6[v4]);
      }
    }
    else
    {
      unint64_t v8 = v4 - v7;
      uint64_t v9 = *(void *)(v3 + 16);
      if (v4 - v7 <= (v9 - (uint64_t)v5) >> 3)
      {
        bzero(*(void **)(v3 + 8), 8 * v8);
        *(void *)(v3 + 8) = &v5[v8];
      }
      else
      {
        uint64_t v10 = v9 - (void)v6;
        if (v10 >> 2 > v4) {
          unint64_t v4 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v4;
        }
        if (v11 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v12 = (char *)operator new(8 * v11);
        uint64_t v13 = &v12[8 * v7];
        std::exception_ptr v14 = &v12[8 * v11];
        bzero(v13, 8 * v8);
        long long v15 = &v13[8 * v8];
        if (v5 == v6)
        {
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
        }
        else
        {
          do
          {
            uint64_t v16 = *--v5;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
            *uint64_t v5 = 0;
          }
          while (v5 != v6);
          uint64_t v5 = *(void **)v3;
          unint64_t v17 = *(void **)(v3 + 8);
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
          while (v17 != v5)
          {
            char v19 = (atomic_ullong *)*--v17;
            uint64_t v18 = v19;
            if (v19 && !atomic_fetch_add(v18 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
              (*(void (**)(atomic_ullong *))(*v18 + 16))(v18);
            }
          }
        }
        if (v5) {
          operator delete(v5);
        }
      }
    }
  }
  LODWORD(v20) = *((_DWORD *)this + 27);
  if (v20 >= 4) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = v20;
  }
  long long v36 = (char *)v20;
  LODWORD(v37) = 0;
  if (!v20) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  unint64_t v21 = *((unsigned int *)this + 26);
  unint64_t v35 = v21;
  if (v36)
  {
    for (unint64_t i = 0; i < (unint64_t)v36; ++i)
    {
      unint64_t v23 = v21 % *((unsigned int *)this + 27);
      unint64_t v35 = v23;
      uint64_t v24 = **((void **)this + 17);
      if (v23 >= (*(void *)(*((void *)this + 17) + 8) - v24) >> 3) {
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (!*(void *)(v24 + 8 * v23))
      {
        if (v23 >= (uint64_t)(*(void *)(*((void *)this + 14) + 64) - *(void *)(*((void *)this + 14) + 56)) >> 3) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        operator new();
      }
      unint64_t v21 = v23 + 1;
      unint64_t v35 = v21;
    }
  }
  uint64_t v25 = *((void *)this + 17);
  long long v26 = *(void **)v25;
  long long v27 = *(void **)(v25 + 8);
  if (v26 == v27)
  {
    char v28 = 0;
  }
  else
  {
    char v28 = 0;
    do
    {
      if (*v26++) {
        ++v28;
      }
    }
    while (v26 != v27);
  }
  uint64_t v37 = v28;
  if (v28 != v36) {
    dmlc::LogCheckFormat<long,unsigned long>();
  }
  std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(__p, (uint64_t *)(**((void **)this + 17) + 8 * *((unsigned int *)this + 26)));
  char v30 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)__p;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_22E95CACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E95CAD8);
}

void sub_22E95CAF4()
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::SortedCSCPage>::~PageSourceIncMixIn(void *a1)
{
  *a1 = &unk_26E24A308;
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)a1);
}

void xgboost::data::SortedCSCPageSource::~SortedCSCPageSource(xgboost::data::SortedCSCPageSource *this)
{
  *(void *)this = &unk_26E24A308;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E24A308;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)this);

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    unint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 72);
  }
  return result;
}

void sub_22E95CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::SortedCSCPage>::operator++(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v10, (std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 160)) {
    xgboost::data::SparsePageSource::operator++(*(void *)(a1 + 144));
  }
  int v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  BOOL v7 = v2 == *(_DWORD *)(a1 + 108);
  *(unsigned char *)(a1 + 88) = v7;
  if (v7)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (!*(unsigned char *)v3)
    {
      uint64_t v5 = *(uint64_t **)(v3 + 56);
      unint64_t v4 = *(uint64_t **)(v3 + 64);
      char v6 = v5 + 1;
      BOOL v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        uint64_t v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(unsigned char *)uint64_t v3 = 1;
    }
    if (!v2) {
      dmlc::LogCheckFormat<unsigned int,int>();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  if (*(unsigned char *)(a1 + 160) && *(_DWORD *)(*(void *)(a1 + 144) + 104) != *(_DWORD *)(a1 + 104)) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  std::mutex::unlock(v10);
  return a1;
}

void sub_22E95CF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::Reset(uint64_t a1)
{
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_22E95D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void std::shared_ptr<xgboost::SortedCSCPage>::reset[abi:ne180100]<xgboost::SortedCSCPage,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::SortedCSCPage>::shared_ptr[abi:ne180100]<xgboost::SortedCSCPage,void>(&v2, a2);
}

void std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  uint64_t v4 = *(void *)(v3 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v7, (const std::exception_ptr *)(v3 + 16));
    v6.__ptr_ = &v7;
    std::rethrow_exception(v6);
    __break(1u);
  }
  else
  {
    *a1 = *(_OWORD *)(v3 + 144);
    *(void *)(v3 + 144) = 0;
    *(void *)(v3 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 16);
      v5(v3);
    }
  }
}

void sub_22E95D174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr(&a10);
  if (a12) {
    std::mutex::unlock(a11);
  }
  if (v12)
  {
    if (!atomic_fetch_add(v12 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v12 + 16))(v12);
    }
  }
  _Unwind_Resume(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  long long v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  long long v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return std::__assoc_state<std::shared_ptr<xgboost::CSCPage>>::__on_zero_shared((uint64_t)a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}::operator()((uint64_t)v1, (void *)(a1 + 160));
}

void sub_22E95D358(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22E95D348);
}

void sub_22E95D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::__assoc_state<std::shared_ptr<xgboost::SortedCSCPage>>::set_value<std::shared_ptr<xgboost::SortedCSCPage>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_22E95D44C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  xgboost::data::CreatePageFormat<xgboost::SortedCSCPage>((uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a2[1] + 112), (uint64_t)v12);
  unint64_t v11 = 0;
  uint64_t v3 = *(void *)(a2[1] + 112);
  uint64_t v4 = *(void *)(v3 + 56);
  if (*a2 < (unint64_t)((*(void *)(v3 + 64) - v4) >> 3))
  {
    unint64_t v11 = *(void **)(v4 + 8 * *a2);
    if (v13 >= 0) {
      uint64_t v5 = (dmlc::SeekStream *)v12;
    }
    else {
      uint64_t v5 = (dmlc::SeekStream *)v12[0];
    }
    uint64_t v6 = dmlc::SeekStream::CreateForRead(v5, 0);
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v11);
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    if (v8 != v11) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    std::exception_ptr v7 = operator new(0x30uLL);
    v7[1] = 0;
    v7[2] = 0;
    *std::exception_ptr v7 = &unk_26E24A408;
    xgboost::SparsePage::SparsePage((xgboost::SparsePage *)(v7 + 3));
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_22E95D7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

void sub_22E95D8E0(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E95D8ECLL);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::SortedCSCPage>(uint64_t a1)
{
  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  long long v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  uint64_t v3 = (const void **)v2 + 7;
  uint64_t v4 = (char *)*((void *)v2 + 7);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = (uint64_t)(v2 + 4);
  uint64_t v6 = (const void **)v2 + 7;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)v4 + 4, (const void **)a1);
    uint64_t v8 = (char **)(v4 + 8);
    if (!v7)
    {
      uint64_t v8 = (char **)v4;
      uint64_t v6 = (const void **)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v6 == v3
    || std::less<std::string>::operator()[abi:ne180100](v5, (const void **)a1, v6 + 4)
    || (uint64_t v9 = v6[7]) == 0)
  {
LABEL_13:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    std::exception_ptr v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unknown format type ", 20);
    int v16 = *(char *)(a1 + 23);
    if (v16 >= 0) {
      unint64_t v17 = (const void *)a1;
    }
    else {
      unint64_t v17 = *(const void **)a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
    return 0;
  }
  else
  {
    uint64_t v10 = v9[12];
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 48);
    return v11();
  }
}

void sub_22E95DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::SortedCSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::SortedCSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24A408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::SortedCSCPage>::__on_zero_shared()
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  uint64_t v8 = a1;
  long long v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  uint64_t v5 = (void (*)(void *))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_22E95DBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::SortedCSCPage>::shared_ptr[abi:ne180100]<xgboost::SortedCSCPage,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_22E95DC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26E24A358;
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  uint64_t v3 = (uint64_t *)*v2;
  uint64_t v4 = (uint64_t *)v2[1];
  if ((uint64_t *)*v2 == v4)
  {
    *(void *)(a1 + 136) = 0;
LABEL_9:
    if (*v2)
    {
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](v2, *v2);
      operator delete((void *)*v2);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
    goto LABEL_12;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(&v9, v3);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v2 = *(atomic_ullong **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v5 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::GHistIndexMatrix::GHistIndexMatrix(xgboost::GHistIndexMatrix *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 18) = 1;
  *((void *)this + 10) = xgboost::common::Index::GetValueFromUint8;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  xgboost::common::HistogramCuts::HistogramCuts((xgboost::GHistIndexMatrix *)((char *)this + 112));
}

void sub_22E95DF70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xgboost::common::HistogramCuts::~HistogramCuts(v10);
}

void xgboost::common::Index::~Index(xgboost::common::Index *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void xgboost::GHistIndexMatrix::GHistIndexMatrix(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = xgboost::common::Index::GetValueFromUint8;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  xgboost::common::HistogramCuts::HistogramCuts((xgboost::common::HistogramCuts *)(a1 + 112));
}

void sub_22E95E0F8()
{
  uint64_t v3 = *(void **)(v0 + 168);
  if (v3)
  {
    *(void *)(v0 + 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100]((uint64_t)v2, v4);
  }
  xgboost::common::HistogramCuts::~HistogramCuts(v1);
}

void xgboost::GHistIndexMatrix::Init()
{
  xgboost::common::SketchOnDMatrix((xgboost::common::HistogramCuts *)&v0);
}

void sub_22E95E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
}

void xgboost::GHistIndexMatrix::~GHistIndexMatrix(xgboost::GHistIndexMatrix *this)
{
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100]((uint64_t)this + 160, v3);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::GHistIndexMatrix::PushBatch(uint64_t a1, std::mutex **a2, unint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  unint64_t v11 = *a2;
  uint64_t sig = (*a2)->__m_.__sig;
  uint64_t v12 = *(void *)(*a2)->__m_.__opaque;
  uint64_t v14 = ((v12 - sig) >> 3) - 1;
  if (v12 == sig) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = ((v12 - sig) >> 3) - 1;
  }
  if (v15 >= a7) {
    unint64_t v16 = a7;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = a2[1]->__m_.__sig;
  unint64_t v178 = v17;
  if (v17 > 0x80)
  {
    char v19 = malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    int v177 = v19;
    if (!v19)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      float v149 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v149, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    unint64_t v11 = *a2;
    uint64_t v20 = (*a2)->__m_.__sig;
    uint64_t v12 = *(void *)(*a2)->__m_.__opaque;
    uint64_t v14 = ((v12 - v20) >> 3) - 1;
  }
  else
  {
    char v19 = v179;
    int v177 = v179;
    uint64_t v20 = (*a2)->__m_.__sig;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v12 == v20) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v14;
  }
  unint64_t v24 = v23 / v17;
  v184.__ptr_ = 0;
  v185.__m_.__uint64_t sig = 850045863;
  memset(v185.__m_.__opaque, 0, sizeof(v185.__m_.__opaque));
  unint64_t v25 = v17 - 1;
  uint64_t v26 = 8 * a4 + 8;
  uint64_t v27 = 8 * v24;
  char v28 = (uint64_t *)(sig + 8);
  do
  {
    if (v22 == v25)
    {
      uint64_t v29 = *(void *)v11->__m_.__opaque - v11->__m_.__sig;
      if (!v29) {
        goto LABEL_27;
      }
      unint64_t v30 = (v29 >> 3) - 1;
    }
    else
    {
      unint64_t v30 = v24 + v24 * v22;
    }
    if (v22 * v24 < v30)
    {
      uint64_t v31 = 0;
      uint64_t v32 = v30 + v21;
      std::string v33 = v28;
      uint64_t v34 = v26;
      do
      {
        uint64_t v36 = *(v33 - 1);
        uint64_t v35 = *v33;
        if (!v18 && v35 != v36) {
          goto LABEL_157;
        }
        ++v33;
        v31 += v35 - v36;
        *(void *)(*(void *)a1 + v34) = v31;
        v34 += 8;
        --v32;
      }
      while (v32);
    }
LABEL_27:
    ++v22;
    v21 -= v24;
    v26 += v27;
    char v28 = (uint64_t *)((char *)v28 + v27);
  }
  while (v22 != v17);
  *char v19 = a5;
  if (v16 > 1)
  {
    uint64_t v37 = v19 + 1;
    uint64_t v38 = (void *)(*(void *)a1 + 8 * (a4 + v24));
    unint64_t v39 = v17 - 1;
    do
    {
      a5 += *v38;
      *v37++ = a5;
      uint64_t v38 = (void *)((char *)v38 + v27);
      --v39;
    }
    while (v39);
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 8 * a4 + 8;
  while (2)
  {
    if (v41 != v25)
    {
      unint64_t v44 = v24 + v24 * v41;
      goto LABEL_36;
    }
    uint64_t v43 = *(void *)v11->__m_.__opaque - v11->__m_.__sig;
    if (v43)
    {
      unint64_t v44 = (v43 >> 3) - 1;
LABEL_36:
      if (v41 * v24 < v44)
      {
        uint64_t v45 = v44 + v40;
        uint64_t v46 = (void *)(*(void *)a1 + v42);
        do
        {
          *v46++ += v19[v41];
          --v45;
        }
        while (v45);
      }
    }
    ++v41;
    v40 -= v24;
    v42 += v27;
    if (v41 != v17) {
      continue;
    }
    break;
  }
  int v150 = a7;
  dmlc::OMPException::Rethrow(&v184);
  uint64_t v47 = (*a2)->__m_.__sig;
  uint64_t v48 = *(void *)(*a2)->__m_.__opaque;
  if (v48 == v47) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = ((unint64_t)(v48 - v47) >> 3) - 1;
  }
  unint64_t v50 = *(void *)(*(void *)a1 + 8 * (v49 + a4));
  xgboost::GHistIndexMatrix::ResizeIndex((std::vector<char> *)a1, v50, *(unsigned __int8 *)(a1 + 192));
  uint64_t v51 = **(void **)(a1 + 120);
  uint64_t v52 = *(void *)(*(void *)(a1 + 120) + 8);
  int v182 = 0;
  uint64_t v53 = v52 - v51;
  v183.__ptr_ = (void *)(v53 >> 2);
  if (!v53) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (!*(unsigned char *)(a1 + 192))
  {
    BOOL v54 = (uint64_t *)(a1 + 24);
    goto LABEL_76;
  }
  BOOL v54 = (uint64_t *)(a1 + 24);
  xgboost::common::Index::SetBinOffset((std::vector<unsigned int> *)(a1 + 24), *(const void ***)(a1 + 128));
  if (!*(unsigned char *)(a1 + 192))
  {
LABEL_76:
    uint64_t v79 = *v54;
    if (v50) {
      BOOL v80 = v79 == 0;
    }
    else {
      BOOL v80 = 0;
    }
    if (v80) {
      goto LABEL_157;
    }
    unint64_t v81 = *a3;
    unint64_t v174 = a3[1];
    uint64_t v164 = a2[1]->__m_.__sig;
    uint64_t v156 = *a2;
    uint64_t v83 = (*a2)->__m_.__sig;
    uint64_t v82 = *(void *)(*a2)->__m_.__opaque;
    uint64_t v84 = (v82 - v83) >> 3;
    uint64_t v85 = v82 - v83;
    if (v85) {
      unint64_t v86 = v84 - 1;
    }
    else {
      unint64_t v86 = 0;
    }
    unint64_t v180 = v86;
    v183.__ptr_ = (void *)v84;
    if (v86 >= v85 >> 3) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    float v87 = *(uint64_t **)(a1 + 120);
    uint64_t v88 = *(uint64_t **)(a1 + 128);
    unint64_t v160 = v180;
    LODWORD(v183.__ptr_) = v17;
    int v182 = 1;
    if ((int)v17 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v186.__ptr_ = 0;
    v187.__m_.__uint64_t sig = 850045863;
    memset(v187.__m_.__opaque, 0, sizeof(v187.__m_.__opaque));
    if (!v180) {
      goto LABEL_158;
    }
    uint64_t v89 = 0;
    while (1)
    {
      uint64_t v90 = *(void *)(*(void *)a1 + 8 * (v89 + a4));
      unint64_t v91 = *(void **)(*(void *)a1 + 8 * (v89 + 1 + a4));
      v183.__ptr_ = v91;
      uint64_t v92 = *(void *)(v156->__m_.__sig + 8 * (v89 + 1));
      uint64_t v93 = *(void *)(v156->__m_.__sig + 8 * v89);
      if (!v164 && v92 != v93) {
        goto LABEL_157;
      }
      uint64_t v169 = v89 + 1;
      unint64_t v94 = v92 - v93;
      std::exception_ptr v181 = (void *)(v92 - v93 + v90);
      if (v181 != v91) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (v92 != v93)
      {
        uint64_t v95 = 0;
        uint64_t v96 = v164 + 8 * v93;
        unsigned int v97 = 1;
        do
        {
          uint64_t v98 = (float *)(v96 + 8 * v95);
          uint64_t v99 = *(void *)v98;
          if (!v81) {
            goto LABEL_98;
          }
          if (v81 <= v99) {
            goto LABEL_157;
          }
          if (*(unsigned char *)(v174 + *(void *)v98) == 1) {
            unsigned int v100 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v98, v98[1]);
          }
          else {
LABEL_98:
          }
            unsigned int v100 = xgboost::common::HistogramCuts::SearchBin(v99, *v88, *v87, *((float *)&v99 + 1));
          *(_DWORD *)(v79 + 4 * (v95 + v90)) = v100;
          ++*(void *)(*(void *)(a1 + 168) + 8 * v100);
          uint64_t v95 = v97;
          BOOL v78 = v94 > v97++;
        }
        while (v78);
      }
      uint64_t v89 = v169;
      if (v169 == v160) {
        goto LABEL_158;
      }
    }
  }
  uint64_t v55 = *(void *)(a1 + 48);
  int v56 = *(_DWORD *)(a1 + 72);
  if (v56 == 2)
  {
    uint64_t v101 = *v54;
    if (v50) {
      BOOL v102 = v101 == 0;
    }
    else {
      BOOL v102 = 0;
    }
    if (v102) {
      goto LABEL_157;
    }
    unint64_t v103 = *a3;
    unint64_t v170 = a3[1];
    uint64_t v161 = a2[1]->__m_.__sig;
    v153 = *a2;
    uint64_t v105 = (*a2)->__m_.__sig;
    uint64_t v104 = *(void *)(*a2)->__m_.__opaque;
    uint64_t v106 = (v104 - v105) >> 3;
    uint64_t v107 = v104 - v105;
    if (v107) {
      unint64_t v108 = v106 - 1;
    }
    else {
      unint64_t v108 = 0;
    }
    unint64_t v180 = v108;
    v183.__ptr_ = (void *)v106;
    if (v108 >= v107 >> 3) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    float32x2_t v109 = *(uint64_t **)(a1 + 120);
    int v175 = *(uint64_t **)(a1 + 128);
    unint64_t v157 = v180;
    LODWORD(v183.__ptr_) = v17;
    int v182 = 1;
    if ((int)v17 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v186.__ptr_ = 0;
    v187.__m_.__uint64_t sig = 850045863;
    memset(v187.__m_.__opaque, 0, sizeof(v187.__m_.__opaque));
    if (!v180) {
      goto LABEL_158;
    }
    uint64_t v110 = 0;
    while (1)
    {
      uint64_t v111 = *(void *)(*(void *)a1 + 8 * (v110 + a4));
      float v112 = *(void **)(*(void *)a1 + 8 * (v110 + 1 + a4));
      v183.__ptr_ = v112;
      uint64_t v113 = *(void *)(v153->__m_.__sig + 8 * (v110 + 1));
      uint64_t v114 = *(void *)(v153->__m_.__sig + 8 * v110);
      if (!v161 && v113 != v114) {
        goto LABEL_157;
      }
      uint64_t v165 = v110 + 1;
      unint64_t v115 = v113 - v114;
      std::exception_ptr v181 = (void *)(v113 - v114 + v111);
      if (v181 != v112) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (v113 != v114)
      {
        uint64_t v116 = 0;
        uint64_t v117 = v161 + 8 * v114;
        unsigned int v118 = 1;
        do
        {
          uint64_t v119 = (float *)(v117 + 8 * v116);
          uint64_t v120 = *(void *)v119;
          if (!v103) {
            goto LABEL_125;
          }
          if (v103 <= v120) {
            goto LABEL_157;
          }
          if (*(unsigned char *)(v170 + *(void *)v119) == 1) {
            unsigned int v121 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v119, v119[1]);
          }
          else {
LABEL_125:
          }
            unsigned int v121 = xgboost::common::HistogramCuts::SearchBin(v120, *v175, *v109, *((float *)&v120 + 1));
          *(_WORD *)(v101 + 2 * (v116 + v111)) = v121 - *(_DWORD *)(v55 + 4 * v116);
          ++*(void *)(*(void *)(a1 + 168) + 8 * v121);
          uint64_t v116 = v118;
          BOOL v78 = v115 > v118++;
        }
        while (v78);
      }
      uint64_t v110 = v165;
      if (v165 == v157) {
        goto LABEL_158;
      }
    }
  }
  if (v56 != 1)
  {
    LODWORD(v183.__ptr_) = 4;
    if (v56 != 4) {
      dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>();
    }
    uint64_t v122 = *v54;
    if (v50) {
      BOOL v123 = v122 == 0;
    }
    else {
      BOOL v123 = 0;
    }
    if (v123) {
      goto LABEL_157;
    }
    unint64_t v124 = *a3;
    unint64_t v171 = a3[1];
    uint64_t v162 = a2[1]->__m_.__sig;
    v154 = *a2;
    uint64_t v126 = (*a2)->__m_.__sig;
    uint64_t v125 = *(void *)(*a2)->__m_.__opaque;
    uint64_t v127 = (v125 - v126) >> 3;
    uint64_t v128 = v125 - v126;
    if (v128) {
      unint64_t v129 = v127 - 1;
    }
    else {
      unint64_t v129 = 0;
    }
    unint64_t v180 = v129;
    v183.__ptr_ = (void *)v127;
    if (v129 >= v128 >> 3) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    float v130 = *(uint64_t **)(a1 + 120);
    int v176 = *(uint64_t **)(a1 + 128);
    unint64_t v158 = v180;
    LODWORD(v183.__ptr_) = v17;
    int v182 = 1;
    if ((int)v17 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v186.__ptr_ = 0;
    v187.__m_.__uint64_t sig = 850045863;
    memset(v187.__m_.__opaque, 0, sizeof(v187.__m_.__opaque));
    if (!v180) {
      goto LABEL_158;
    }
    uint64_t v131 = 0;
    while (1)
    {
      uint64_t v132 = *(void *)(*(void *)a1 + 8 * (v131 + a4));
      float v133 = *(void **)(*(void *)a1 + 8 * (v131 + 1 + a4));
      v183.__ptr_ = v133;
      uint64_t v134 = *(void *)(v154->__m_.__sig + 8 * (v131 + 1));
      uint64_t v135 = *(void *)(v154->__m_.__sig + 8 * v131);
      if (!v162 && v134 != v135) {
        break;
      }
      unint64_t v136 = v134 - v135;
      std::exception_ptr v181 = (void *)(v134 - v135 + v132);
      uint64_t v166 = v131 + 1;
      if (v181 != v133) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (v134 != v135)
      {
        uint64_t v137 = 0;
        uint64_t v138 = v162 + 8 * v135;
        unsigned int v139 = 1;
        do
        {
          uint64_t v140 = (float *)(v138 + 8 * v137);
          uint64_t v141 = *(void *)v140;
          if (!v124) {
            goto LABEL_153;
          }
          if (v124 <= v141) {
            goto LABEL_157;
          }
          if (*(unsigned char *)(v171 + *(void *)v140) == 1) {
            unsigned int v142 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v140, v140[1]);
          }
          else {
LABEL_153:
          }
            unsigned int v142 = xgboost::common::HistogramCuts::SearchBin(v141, *v176, *v130, *((float *)&v141 + 1));
          *(_DWORD *)(v122 + 4 * (v137 + v132)) = v142 - *(_DWORD *)(v55 + 4 * v137);
          ++*(void *)(*(void *)(a1 + 168) + 8 * v142);
          uint64_t v137 = v139;
          BOOL v78 = v136 > v139++;
        }
        while (v78);
      }
      uint64_t v131 = v166;
      if (v166 == v158) {
        goto LABEL_158;
      }
    }
LABEL_157:
    std::terminate();
  }
  uint64_t v57 = *v54;
  if (v50) {
    BOOL v58 = v57 == 0;
  }
  else {
    BOOL v58 = 0;
  }
  if (v58) {
    goto LABEL_157;
  }
  unint64_t v59 = *a3;
  unint64_t v168 = a3[1];
  uint64_t v159 = a2[1]->__m_.__sig;
  float v152 = *a2;
  uint64_t v61 = (*a2)->__m_.__sig;
  uint64_t v60 = *(void *)(*a2)->__m_.__opaque;
  uint64_t v62 = (v60 - v61) >> 3;
  uint64_t v63 = v60 - v61;
  if (v63) {
    unint64_t v64 = v62 - 1;
  }
  else {
    unint64_t v64 = 0;
  }
  unint64_t v180 = v64;
  v183.__ptr_ = (void *)v62;
  if (v64 >= v63 >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v65 = *(uint64_t **)(a1 + 120);
  uint64_t v173 = *(uint64_t **)(a1 + 128);
  unint64_t v155 = v180;
  LODWORD(v183.__ptr_) = v17;
  int v182 = 1;
  if ((int)v17 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v186.__ptr_ = 0;
  v187.__m_.__uint64_t sig = 850045863;
  memset(v187.__m_.__opaque, 0, sizeof(v187.__m_.__opaque));
  if (v180)
  {
    uint64_t v66 = 0;
    do
    {
      uint64_t v67 = *(void *)(*(void *)a1 + 8 * (v66 + a4));
      uint64_t v68 = *(void **)(*(void *)a1 + 8 * (v66 + 1 + a4));
      v183.__ptr_ = v68;
      uint64_t v69 = *(void *)(v152->__m_.__sig + 8 * (v66 + 1));
      uint64_t v70 = *(void *)(v152->__m_.__sig + 8 * v66);
      if (!v159 && v69 != v70) {
        goto LABEL_157;
      }
      unint64_t v71 = v69 - v70;
      std::exception_ptr v181 = (void *)(v69 - v70 + v67);
      uint64_t v163 = v66 + 1;
      if (v181 != v68) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (v69 != v70)
      {
        uint64_t v72 = 0;
        uint64_t v73 = v159 + 8 * v70;
        unsigned int v74 = 1;
        do
        {
          unint64_t v75 = (float *)(v73 + 8 * v72);
          uint64_t v76 = *(void *)v75;
          if (!v59) {
            goto LABEL_70;
          }
          if (v59 <= v76) {
            goto LABEL_157;
          }
          if (*(unsigned char *)(v168 + *(void *)v75) == 1) {
            unsigned int v77 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v75, v75[1]);
          }
          else {
LABEL_70:
          }
            unsigned int v77 = xgboost::common::HistogramCuts::SearchBin(v76, *v173, *v65, *((float *)&v76 + 1));
          *(unsigned char *)(v57 + v72 + v67) = v77 - *(_DWORD *)(v55 + 4 * v72);
          ++*(void *)(*(void *)(a1 + 168) + 8 * v77);
          uint64_t v72 = v74;
          BOOL v78 = v71 > v74++;
        }
        while (v78);
      }
      uint64_t v66 = v163;
    }
    while (v163 != v155);
  }
LABEL_158:
  dmlc::OMPException::Rethrow(&v186);
  std::mutex::~mutex(&v187);
  std::exception_ptr::~exception_ptr(&v186);
  LODWORD(v183.__ptr_) = v150;
  int v182 = 1;
  if (v150 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v186.__ptr_ = 0;
  v187.__m_.__uint64_t sig = 850045863;
  memset(v187.__m_.__opaque, 0, sizeof(v187.__m_.__opaque));
  if (a6)
  {
    uint64_t v143 = 0;
    do
    {
      uint64_t v144 = *(void *)(a1 + 168);
      uint64_t v145 = *(void *)(a1 + 88);
      unsigned int v146 = v143;
      uint64_t v147 = v150;
      do
      {
        *(void *)(v145 + 8 * v143) += *(void *)(v144 + 8 * v146);
        *(void *)(v144 + 8 * v146) = 0;
        v146 += a6;
        --v147;
      }
      while (v147);
      ++v143;
    }
    while (v143 != a6);
  }
  dmlc::OMPException::Rethrow(&v186);
  std::mutex::~mutex(&v187);
  std::exception_ptr::~exception_ptr(&v186);
  std::mutex::~mutex(&v185);
  std::exception_ptr::~exception_ptr(&v184);
  if (v178 >= 0x81) {
    free(v177);
  }
}

void sub_22E95FFC4()
{
}

void sub_22E960094()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9600A8()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9600BC()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9600D0()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9600E4()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9600F8()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E96010C()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E960140(_Unwind_Exception *a1)
{
  uint64_t v3 = STACK[0x4D8];
  STACK[0x4D8] = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  }
  std::mutex::~mutex(v4);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 240));
  if (v6 >= 0x81) {
    free(v5);
  }
  _Unwind_Resume(a1);
}

void sub_22E960160()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E960174()
{
}

void sub_22E96018C()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9601A4()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9601B8()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x22E960144);
}

void sub_22E9601C8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E960200);
}

void xgboost::GHistIndexMatrix::ResizeIndex(std::vector<char> *this, unint64_t a2, int a3)
{
  std::vector<char>::pointer begin = this[6].__begin_;
  if ((unint64_t)(begin - 1) <= 0xFF && a3 != 0)
  {
    std::vector<char>::pointer v6 = this[1].__begin_;
    LODWORD(this[3].__begin_) = 1;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint8;
    BOOL v7 = (char *)(this[1].__end_ - v6);
    BOOL v8 = a2 >= (unint64_t)v7;
    std::vector<char>::size_type v9 = a2 - (void)v7;
    if (v9 == 0 || !v8)
    {
      if (v8) {
        return;
      }
      unint64_t v15 = &v6[a2];
      goto LABEL_22;
    }
    uint64_t v10 = this + 1;
    std::vector<char>::size_type v11 = v9;
LABEL_15:
    std::vector<char>::__append(v10, v11);
    return;
  }
  if ((unint64_t)(begin - 257) >> 8 > 0xFE || a3 == 0)
  {
    LODWORD(this[3].__begin_) = 4;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint32;
    unint64_t v12 = 4 * a2;
  }
  else
  {
    LODWORD(this[3].__begin_) = 2;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint16;
    unint64_t v12 = 2 * a2;
  }
  std::vector<char>::pointer v13 = this[1].__begin_;
  uint64_t v14 = (char *)(this[1].__end_ - v13);
  std::vector<char>::size_type v11 = v12 - (void)v14;
  if (v12 > (unint64_t)v14)
  {
    uint64_t v10 = this + 1;
    goto LABEL_15;
  }
  if (v12 >= (unint64_t)v14) {
    return;
  }
  unint64_t v15 = &v13[v12];
LABEL_22:
  this[1].__end_ = v15;
}

std::vector<unsigned int>::pointer xgboost::common::Index::SetBinOffset(std::vector<unsigned int> *a1, const void **a2)
{
  std::vector<unsigned int>::resize(a1 + 1, (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 2) - 1);
  std::vector<unsigned int>::pointer result = a1[1].__begin_;
  std::vector<unsigned int>::pointer end = a1[1].__end_;
  if (end != result)
  {
    std::vector<char>::pointer v6 = *a2;
    return (std::vector<unsigned int>::pointer)memmove(result, v6, (char *)end - (char *)result);
  }
  return result;
}

void xgboost::common::ColumnMatrix::Init(xgboost::common::ColumnMatrix *this, const xgboost::SparsePage *a2, const xgboost::GHistIndexMatrix *a3, double a4, int a5)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)(*((void *)a3 + 16) + 8) - **((void **)a3 + 16);
  unint64_t v168 = v7 >> 2;
  unint64_t v8 = (v7 >> 2) - 1;
  uint64_t v9 = *((void *)a3 + 1) - *(void *)a3;
  uint64_t v10 = (uint64_t *)((char *)this + 24);
  std::vector<unsigned long>::resize((uint64_t)this + 24, v8);
  uint64_t v11 = *((void *)this + 6);
  unint64_t v12 = *((void *)this + 7) - v11;
  int v175 = (BOOL **)((char *)this + 48);
  if (v8 <= v12)
  {
    if (v8 < v12) {
      *((void *)this + 7) = v11 + v8;
    }
  }
  else
  {
    std::vector<xgboost::common::ColumnType>::__append((uint64_t)this + 48, v8 - v12);
  }
  uint64_t v13 = v9 >> 3;
  uint64_t v14 = *((void *)this + 3);
  uint64_t v15 = *((void *)this + 4) - v14;
  if (v15 >= 1) {
    bzero(*((void **)this + 3), 8 * (((unint64_t)v15 >> 3) - ((unint64_t)v15 > 7)) + 8);
  }
  unint64_t v16 = v13 - 1;
  if (v8)
  {
    uint64_t v17 = 0;
    do
    {
      LODWORD(v183) = *(_DWORD *)(**((void **)a3 + 16) + v17 + 4) - *(_DWORD *)(**((void **)a3 + 16) + v17);
      v17 += 4;
    }
    while (4 * v8 != v17);
    LOBYTE(v18) = *((unsigned char *)a3 + 192) != 0;
    xgboost::GHistIndexMatrix::GetFeatureCounts(*((void *)a3 + 11), **((unint64_t ***)a3 + 16), *(void *)(*((void *)a3 + 16) + 8), *v10);
    char v19 = (unint64_t *)*v10;
    double v20 = (double)v16 * a4;
    uint64_t v21 = *v175;
    uint64_t v22 = (v7 >> 2) - 1;
    do
    {
      unint64_t v23 = *v19++;
      int v18 = (v20 <= (double)v23) & v18;
      *v21++ = v20 > (double)v23;
      --v22;
    }
    while (v22);
  }
  else
  {
    int v18 = *((unsigned char *)a3 + 192) != 0;
    xgboost::GHistIndexMatrix::GetFeatureCounts(*((void *)a3 + 11), **((unint64_t ***)a3 + 16), *(void *)(*((void *)a3 + 16) + 8), v14);
  }
  unint64_t v24 = (uint64_t **)((char *)this + 96);
  unint64_t v25 = (v7 >> 2);
  std::vector<unsigned long>::resize((uint64_t)this + 96, v25);
  uint64_t v26 = (void *)*((void *)this + 12);
  *uint64_t v26 = 0;
  if (v168 >= 2)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = *v175;
    do
    {
      unint64_t v30 = v16;
      if (v29[v27]) {
        unint64_t v30 = *(void *)(*v10 + 8 * v27);
      }
      v28 += v30;
      v26[++v27] = v28;
    }
    while (v25 - 1 != v27);
  }
  unint64_t v31 = *((void *)a3 + 18) - 1;
  if (v31 <= 0xFF)
  {
    uint64_t v32 = 1;
  }
  else if (v31 >> 16)
  {
    uint64_t v32 = 4;
  }
  else
  {
    uint64_t v32 = 2;
  }
  *((_DWORD *)this + 38) = v32;
  unint64_t v33 = v26[v8] * v32;
  LOBYTE(__p) = 0;
  unint64_t v34 = *((void *)this + 1) - *(void *)this;
  if (v33 <= v34)
  {
    if (v33 < v34) {
      *((void *)this + 1) = *(void *)this + v33;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(this, v33 - v34, &__p);
    uint64_t v26 = (void *)*((void *)this + 12);
  }
  if ((v18 & 1) == 0)
  {
    std::vector<unsigned long>::resize((uint64_t)this + 72, v26[v8]);
    uint64_t v26 = (void *)*((void *)this + 12);
  }
  *((void *)this + 15) = **((void **)a3 + 16);
  uint64_t v35 = *(void *)(*(void *)a3 + 8 * v16);
  unint64_t v36 = v16 * v8;
  BOOL v37 = v16 * v8 != v35;
  *((unsigned char *)this + 156) = v37;
  uint64_t v38 = (void *)((char *)this + 128);
  *((void *)this + 17) = 0;
  std::vector<BOOL>::resize((uint64_t)this + 128, v26[v8], v37);
  if (v18)
  {
    int v39 = *((_DWORD *)a3 + 18);
    LODWORD(v186) = v39;
    if (v39 == 2)
    {
      uint64_t v76 = (_WORD *)*((void *)a3 + 3);
      uint64_t v77 = *(void *)this;
      if (v36 == v35)
      {
        LODWORD(v183) = a5;
        LODWORD(v189) = 1;
        if (a5 < 1) {
          dmlc::LogCheckFormat<int,int>();
        }
        std::string __p = 0;
        v191.__m_.__uint64_t sig = 850045863;
        memset(v191.__m_.__opaque, 0, sizeof(v191.__m_.__opaque));
        if (v16)
        {
          uint64_t v152 = 0;
          do
          {
            uint64_t v153 = v152 + 1;
            if (v152 * v8 < (v152 + 1) * v8)
            {
              v154 = *v24;
              unint64_t v155 = v8;
              uint64_t v156 = v76;
              do
              {
                uint64_t v158 = *v154++;
                uint64_t v157 = v158;
                LOWORD(v158) = *v156++;
                *(_WORD *)(v77 + 2 * (v157 + v152)) = v158;
                --v155;
              }
              while (v155);
            }
            v76 += v8;
            ++v152;
          }
          while (v153 != v16);
        }
        goto LABEL_188;
      }
      std::exception_ptr v183 = 0;
      std::vector<unsigned long>::vector(&__p, v8, &v183);
      BOOL v78 = *(void **)a2;
      unint64_t v171 = *(void **)a2;
      uint64_t v178 = **((void **)a2 + 1);
      uint64_t v79 = *((void *)a3 + 1);
      if (v79 == *(void *)a3) {
        BOOL v80 = 0;
      }
      else {
        BOOL v80 = (void *)(((v79 - *(void *)a3) >> 3) - 1);
      }
      std::exception_ptr v183 = v80;
      unint64_t v188 = (uint64_t)(v78[1] - *v78) >> 3;
      if ((unint64_t)v80 >= v188) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (!v183) {
        goto LABEL_112;
      }
      uint64_t v81 = 0;
      while (1)
      {
        uint64_t v82 = *(void *)a3;
        unint64_t v83 = *(void *)(*(void *)a3 + 8 * v81);
        unint64_t v189 = 0;
        unint64_t v84 = v81 + 1;
        unint64_t v85 = *(void *)(v82 + 8 * (v81 + 1));
        unint64_t v189 = v85;
        uint64_t v86 = *(void *)(*v171 + 8 * (v81 + 1));
        uint64_t v87 = *(void *)(*v171 + 8 * v81);
        if (!v178 && v86 != v87) {
          goto LABEL_164;
        }
        uint64_t v88 = v86 - v87;
        unint64_t v187 = v86 - v87 + v83;
        if (v187 != v85) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        if (v83 < v189) {
          break;
        }
LABEL_91:
        ++v81;
        if (v84 >= (unint64_t)v183) {
          goto LABEL_112;
        }
      }
      uint64_t v89 = (int *)(v178 + 8 * v87);
      while (v88)
      {
        int v90 = *v89;
        v89 += 2;
        unint64_t v91 = (*v24)[v90] + v81;
        *(_WORD *)(v77 + 2 * v91) = v76[v83];
        *(void *)(*v38 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v91);
        ++v83;
        --v88;
        if (v83 >= v189) {
          goto LABEL_91;
        }
      }
    }
    else
    {
      if (v39 == 1)
      {
        uint64_t v40 = *((void *)a3 + 3);
        uint64_t v41 = *(void *)this;
        if (v36 != v35)
        {
          std::exception_ptr v183 = 0;
          std::vector<unsigned long>::vector(&__p, v8, &v183);
          uint64_t v42 = *(void **)a2;
          uint64_t v169 = *(void **)a2;
          uint64_t v176 = **((void **)a2 + 1);
          uint64_t v43 = *((void *)a3 + 1);
          if (v43 == *(void *)a3) {
            unint64_t v44 = 0;
          }
          else {
            unint64_t v44 = (void *)(((v43 - *(void *)a3) >> 3) - 1);
          }
          std::exception_ptr v183 = v44;
          unint64_t v188 = (uint64_t)(v42[1] - *v42) >> 3;
          if ((unint64_t)v44 >= v188) {
            dmlc::LogCheckFormat<unsigned long,unsigned long>();
          }
          if (v183)
          {
            uint64_t v45 = 0;
            while (1)
            {
              uint64_t v46 = *(void *)a3;
              unint64_t v47 = *(void *)(*(void *)a3 + 8 * v45);
              unint64_t v189 = 0;
              unint64_t v48 = v45 + 1;
              unint64_t v49 = *(void *)(v46 + 8 * (v45 + 1));
              unint64_t v189 = v49;
              uint64_t v50 = *(void *)(*v169 + 8 * (v45 + 1));
              uint64_t v51 = *(void *)(*v169 + 8 * v45);
              if (!v176 && v50 != v51) {
                goto LABEL_164;
              }
              uint64_t v52 = v50 - v51;
              unint64_t v187 = v50 - v51 + v47;
              if (v187 != v49) {
                dmlc::LogCheckFormat<unsigned long,unsigned long>();
              }
              if (v47 < v189) {
                break;
              }
LABEL_49:
              ++v45;
              if (v48 >= (unint64_t)v183) {
                goto LABEL_112;
              }
            }
            uint64_t v53 = (int *)(v176 + 8 * v51);
            while (v52)
            {
              int v54 = *v53;
              v53 += 2;
              unint64_t v55 = (*v24)[v54] + v45;
              *(unsigned char *)(v41 + v55) = *(unsigned char *)(v40 + v47);
              *(void *)(*v38 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v55);
              ++v47;
              --v52;
              if (v47 >= v189) {
                goto LABEL_49;
              }
            }
            goto LABEL_164;
          }
LABEL_112:
          unint64_t v108 = __p;
          if (__p)
          {
            v191.__m_.__uint64_t sig = (uint64_t)__p;
LABEL_163:
            operator delete(v108);
            return;
          }
          return;
        }
        LODWORD(v183) = a5;
        LODWORD(v189) = 1;
        if (a5 < 1) {
          dmlc::LogCheckFormat<int,int>();
        }
        std::string __p = 0;
        v191.__m_.__uint64_t sig = 850045863;
        memset(v191.__m_.__opaque, 0, sizeof(v191.__m_.__opaque));
        if (v16)
        {
          uint64_t v149 = 0;
          do
          {
            uint64_t v150 = v149 + 1;
            if (v149 * v8 < (v149 + 1) * v8)
            {
              uint64_t v151 = 0;
              do
              {
                *(unsigned char *)(v41 + (*v24)[v151] + v149) = *(unsigned char *)(v40 + v151);
                ++v151;
              }
              while (v8 != v151);
            }
            v40 += v8;
            ++v149;
          }
          while (v150 != v16);
        }
LABEL_188:
        dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
        std::mutex::~mutex(&v191);
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
        return;
      }
      LODWORD(v183) = 4;
      if (v39 != 4) {
        dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>();
      }
      uint64_t v92 = (_DWORD *)*((void *)a3 + 3);
      uint64_t v93 = *(void *)this;
      if (v36 == v35)
      {
        LODWORD(v183) = a5;
        LODWORD(v189) = 1;
        if (a5 < 1) {
          dmlc::LogCheckFormat<int,int>();
        }
        std::string __p = 0;
        v191.__m_.__uint64_t sig = 850045863;
        memset(v191.__m_.__opaque, 0, sizeof(v191.__m_.__opaque));
        if (v16)
        {
          uint64_t v159 = 0;
          do
          {
            uint64_t v160 = v159 + 1;
            if (v159 * v8 < (v159 + 1) * v8)
            {
              uint64_t v161 = *v24;
              unint64_t v162 = v8;
              uint64_t v163 = v92;
              do
              {
                uint64_t v165 = *v161++;
                uint64_t v164 = v165;
                LODWORD(v165) = *v163++;
                *(_DWORD *)(v93 + 4 * (v164 + v159)) = v165;
                --v162;
              }
              while (v162);
            }
            v92 += v8;
            ++v159;
          }
          while (v160 != v16);
        }
        goto LABEL_188;
      }
      std::exception_ptr v183 = 0;
      std::vector<unsigned long>::vector(&__p, v8, &v183);
      unint64_t v94 = *(void **)a2;
      uint64_t v172 = *(void **)a2;
      uint64_t v179 = **((void **)a2 + 1);
      uint64_t v95 = *((void *)a3 + 1);
      if (v95 == *(void *)a3) {
        uint64_t v96 = 0;
      }
      else {
        uint64_t v96 = (void *)(((v95 - *(void *)a3) >> 3) - 1);
      }
      std::exception_ptr v183 = v96;
      unint64_t v188 = (uint64_t)(v94[1] - *v94) >> 3;
      if ((unint64_t)v96 >= v188) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (!v183) {
        goto LABEL_112;
      }
      uint64_t v97 = 0;
      while (1)
      {
        uint64_t v98 = *(void *)a3;
        unint64_t v99 = *(void *)(*(void *)a3 + 8 * v97);
        unint64_t v189 = 0;
        unint64_t v100 = v97 + 1;
        unint64_t v101 = *(void *)(v98 + 8 * (v97 + 1));
        unint64_t v189 = v101;
        uint64_t v102 = *(void *)(*v172 + 8 * (v97 + 1));
        uint64_t v103 = *(void *)(*v172 + 8 * v97);
        if (!v179 && v102 != v103) {
          goto LABEL_164;
        }
        uint64_t v104 = v102 - v103;
        unint64_t v187 = v102 - v103 + v99;
        if (v187 != v101) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        if (v99 < v189) {
          break;
        }
LABEL_111:
        ++v97;
        if (v100 >= (unint64_t)v183) {
          goto LABEL_112;
        }
      }
      uint64_t v105 = (int *)(v179 + 8 * v103);
      while (v104)
      {
        int v106 = *v105;
        v105 += 2;
        unint64_t v107 = (*v24)[v106] + v97;
        *(_DWORD *)(v93 + 4 * v107) = v92[v99];
        *(void *)(*v38 + ((v107 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v107);
        ++v99;
        --v104;
        if (v99 >= v189) {
          goto LABEL_111;
        }
      }
    }
LABEL_164:
    std::terminate();
  }
  int v56 = *((_DWORD *)this + 38);
  if (v56 == 2)
  {
    uint64_t v109 = *((void *)a3 + 3);
    uint64_t v110 = *(void *)this;
    std::exception_ptr v183 = 0;
    std::exception_ptr v184 = 0;
    uint64_t v185 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v183, v8);
    if (v184 - (unsigned char *)v183 >= 1) {
      bzero(v183, 8 * (((unint64_t)(v184 - (unsigned char *)v183) >> 3) - ((unint64_t)(v184 - (unsigned char *)v183) > 7)) + 8);
    }
    unint64_t v189 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v189);
    uint64_t v111 = *(void **)a2;
    uint64_t v173 = *(void **)a2;
    uint64_t v180 = **((void **)a2 + 1);
    uint64_t v112 = *((void *)a3 + 1);
    if (v112 == *(void *)a3) {
      unint64_t v113 = 0;
    }
    else {
      unint64_t v113 = ((v112 - *(void *)a3) >> 3) - 1;
    }
    unint64_t v189 = v113;
    unint64_t v187 = (uint64_t)(v111[1] - *v111) >> 3;
    if (v113 >= v187) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    if (v189)
    {
      uint64_t v114 = 0;
      while (1)
      {
        uint64_t v115 = *(void *)a3;
        unint64_t v116 = *(void *)(*(void *)a3 + 8 * v114);
        unint64_t v188 = 0;
        unint64_t v117 = v114 + 1;
        unint64_t v118 = *(void *)(v115 + 8 * (v114 + 1));
        unint64_t v188 = v118;
        uint64_t v119 = *(void *)(*v173 + 8 * (v114 + 1));
        uint64_t v120 = *(void *)(*v173 + 8 * v114);
        if (!v180 && v119 != v120) {
          goto LABEL_164;
        }
        uint64_t v121 = v119 - v120;
        unint64_t v186 = v119 - v120 + v116;
        if (v186 != v118) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        if (v116 < v188) {
          break;
        }
LABEL_134:
        ++v114;
        if (v117 >= v189) {
          goto LABEL_159;
        }
      }
      uint64_t v122 = (unsigned int *)(v180 + 8 * v120);
      BOOL v123 = v183;
      while (v121)
      {
        uint64_t v124 = *v122;
        uint64_t v125 = *(void *)(*((void *)this + 12) + 8 * v124);
        uint64_t v126 = v110 + 2 * v125;
        int v127 = *(_DWORD *)(v109 + 4 * v116) - *(_DWORD *)(*((void *)this + 15) + 4 * v124);
        if (*(unsigned char *)(*((void *)this + 6) + v124))
        {
          uint64_t v128 = v123[v124];
          *(_WORD *)(v126 + 2 * v128) = v127;
          *(void *)(*((void *)this + 9) + 8 * (v128 + v125)) = v114;
          ++v123[v124];
        }
        else
        {
          *(_WORD *)(v126 + 2 * v114) = v127;
          *(void *)(*v38 + (((unint64_t)(v125 + v114) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v125 + v114));
        }
        ++v116;
        v122 += 2;
        --v121;
        if (v116 >= v188) {
          goto LABEL_134;
        }
      }
      goto LABEL_164;
    }
  }
  else if (v56 == 1)
  {
    uint64_t v57 = *((void *)a3 + 3);
    uint64_t v58 = *(void *)this;
    std::exception_ptr v183 = 0;
    std::exception_ptr v184 = 0;
    uint64_t v185 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v183, v8);
    if (v184 - (unsigned char *)v183 >= 1) {
      bzero(v183, 8 * (((unint64_t)(v184 - (unsigned char *)v183) >> 3) - ((unint64_t)(v184 - (unsigned char *)v183) > 7)) + 8);
    }
    unint64_t v189 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v189);
    unint64_t v59 = *(void **)a2;
    unint64_t v170 = *(void **)a2;
    uint64_t v177 = **((void **)a2 + 1);
    uint64_t v60 = *((void *)a3 + 1);
    if (v60 == *(void *)a3) {
      unint64_t v61 = 0;
    }
    else {
      unint64_t v61 = ((v60 - *(void *)a3) >> 3) - 1;
    }
    unint64_t v189 = v61;
    unint64_t v187 = (uint64_t)(v59[1] - *v59) >> 3;
    if (v61 >= v187) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    if (v189)
    {
      uint64_t v62 = 0;
      while (1)
      {
        uint64_t v63 = *(void *)a3;
        unint64_t v64 = *(void *)(*(void *)a3 + 8 * v62);
        unint64_t v188 = 0;
        unint64_t v65 = v62 + 1;
        unint64_t v66 = *(void *)(v63 + 8 * (v62 + 1));
        unint64_t v188 = v66;
        uint64_t v67 = *(void *)(*v170 + 8 * (v62 + 1));
        uint64_t v68 = *(void *)(*v170 + 8 * v62);
        if (!v177 && v67 != v68) {
          goto LABEL_164;
        }
        uint64_t v69 = v67 - v68;
        unint64_t v186 = v67 - v68 + v64;
        if (v186 != v66) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        if (v64 < v188) {
          break;
        }
LABEL_73:
        ++v62;
        if (v65 >= v189) {
          goto LABEL_159;
        }
      }
      uint64_t v70 = (unsigned int *)(v177 + 8 * v68);
      while (v69)
      {
        uint64_t v71 = *v70;
        uint64_t v72 = v58 + *(void *)(*((void *)this + 12) + 8 * v71);
        int v73 = *(_DWORD *)(v57 + 4 * v64) - *(_DWORD *)(*((void *)this + 15) + 4 * v71);
        if (*(unsigned char *)(*((void *)this + 6) + v71))
        {
          *(unsigned char *)(v72 + *((void *)v183 + v71)) = v73;
          unsigned int v74 = v183;
          *(void *)(*((void *)this + 9)
                    + 8 * (*((void *)v183 + v71) + *(void *)(*((void *)this + 12) + 8 * v71))) = v62;
          ++v74[v71];
        }
        else
        {
          *(unsigned char *)(v72 + v62) = v73;
          unint64_t v75 = (*v24)[v71] + v62;
          *(void *)(*v38 + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v75);
        }
        ++v64;
        v70 += 2;
        --v69;
        if (v64 >= v188) {
          goto LABEL_73;
        }
      }
      goto LABEL_164;
    }
  }
  else
  {
    LODWORD(v183) = 4;
    if (v56 != 4) {
      dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>();
    }
    uint64_t v129 = *((void *)a3 + 3);
    uint64_t v130 = *(void *)this;
    std::exception_ptr v183 = 0;
    std::exception_ptr v184 = 0;
    uint64_t v185 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v183, v8);
    if (v184 - (unsigned char *)v183 >= 1) {
      bzero(v183, 8 * (((unint64_t)(v184 - (unsigned char *)v183) >> 3) - ((unint64_t)(v184 - (unsigned char *)v183) > 7)) + 8);
    }
    unint64_t v189 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v189);
    uint64_t v131 = *(void **)a2;
    unint64_t v174 = *(void **)a2;
    uint64_t v181 = **((void **)a2 + 1);
    uint64_t v132 = *((void *)a3 + 1);
    if (v132 == *(void *)a3) {
      unint64_t v133 = 0;
    }
    else {
      unint64_t v133 = ((v132 - *(void *)a3) >> 3) - 1;
    }
    unint64_t v189 = v133;
    unint64_t v187 = (uint64_t)(v131[1] - *v131) >> 3;
    if (v133 >= v187) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    if (v189)
    {
      uint64_t v134 = 0;
      while (1)
      {
        uint64_t v135 = *(void *)a3;
        unint64_t v136 = *(void *)(*(void *)a3 + 8 * v134);
        unint64_t v188 = 0;
        unint64_t v137 = v134 + 1;
        unint64_t v138 = *(void *)(v135 + 8 * (v134 + 1));
        unint64_t v188 = v138;
        uint64_t v139 = *(void *)(*v174 + 8 * (v134 + 1));
        uint64_t v140 = *(void *)(*v174 + 8 * v134);
        if (!v181 && v139 != v140) {
          goto LABEL_164;
        }
        uint64_t v141 = v139 - v140;
        unint64_t v186 = v139 - v140 + v136;
        if (v186 != v138) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        if (v136 < v188) {
          break;
        }
LABEL_158:
        ++v134;
        if (v137 >= v189) {
          goto LABEL_159;
        }
      }
      unsigned int v142 = (unsigned int *)(v181 + 8 * v140);
      uint64_t v143 = v183;
      while (v141)
      {
        uint64_t v144 = *v142;
        uint64_t v145 = *(void *)(*((void *)this + 12) + 8 * v144);
        uint64_t v146 = v130 + 4 * v145;
        int v147 = *(_DWORD *)(v129 + 4 * v136) - *(_DWORD *)(*((void *)this + 15) + 4 * v144);
        if (*(unsigned char *)(*((void *)this + 6) + v144))
        {
          uint64_t v148 = v143[v144];
          *(_DWORD *)(v146 + 4 * v148) = v147;
          *(void *)(*((void *)this + 9) + 8 * (v148 + v145)) = v134;
          ++v143[v144];
        }
        else
        {
          *(_DWORD *)(v146 + 4 * v134) = v147;
          *(void *)(*v38 + (((unint64_t)(v145 + v134) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v145 + v134));
        }
        ++v136;
        v142 += 2;
        --v141;
        if (v136 >= v188) {
          goto LABEL_158;
        }
      }
      goto LABEL_164;
    }
  }
LABEL_159:
  if (__p)
  {
    v191.__m_.__uint64_t sig = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v108 = v183;
  if (v183)
  {
    std::exception_ptr v184 = v183;
    goto LABEL_163;
  }
}

void sub_22E961DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::GHistIndexMatrix::Init(uint64_t a1, uint64_t a2, int a3, xgboost::common::HistogramCuts *a4, uint64_t a5, char a6, int a7)
{
  if (a7 >= 1)
  {
    *(void *)(a1 + 152) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 192) = a6;
    xgboost::common::HistogramCuts::Copy((xgboost::common::HistogramCuts *)(a1 + 112), a4);
  }
  dmlc::LogCheckFormat<int,int>();
}

void sub_22E962348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::GHistIndexMatrix::Transpose(xgboost::GHistIndexMatrix *this)
{
  uint64_t result = *((void *)this + 20);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: columns_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *((void *)this + 20);
  }
  return result;
}

void sub_22E962410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::GHistIndexMatrix::ReadColumnPage(uint64_t a1, uint64_t (***a2)(void, unint64_t *, uint64_t))
{
  return xgboost::common::ColumnMatrix::Read(*(std::vector<char> **)(a1 + 160), a2, **(char ***)(a1 + 128));
}

uint64_t xgboost::common::ColumnMatrix::Read(std::vector<char> *a1, uint64_t (***a2)(void, unint64_t *, uint64_t), char *a3)
{
  unint64_t v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    unint64_t v6 = v19;
    unint64_t v7 = a1->__end_ - a1->__begin_;
    BOOL v8 = v19 >= v7;
    if (v19 <= v7)
    {
      unint64_t v9 = v19;
      if (!v8)
      {
        a1->__end_ = &a1->__begin_[v19];
        unint64_t v9 = v6;
      }
    }
    else
    {
      std::vector<char>::__append(a1, v19 - v7);
      unint64_t v9 = v19;
    }
    if (v9) {
      (**a2)(a2, (unint64_t *)a1->__begin_, v6);
    }
  }
  unint64_t v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    unint64_t v10 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[1], v19);
    if (v19) {
      (**a2)(a2, (unint64_t *)a1[1].__begin_, 8 * v10);
    }
  }
  unint64_t v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    unint64_t v11 = v19;
    std::vector<char>::pointer begin = a1[2].__begin_;
    unint64_t v13 = a1[2].__end_ - begin;
    BOOL v14 = v19 >= v13;
    if (v19 <= v13)
    {
      unint64_t v15 = v19;
      if (!v14)
      {
        a1[2].__end_ = &begin[v19];
        unint64_t v15 = v11;
      }
    }
    else
    {
      std::vector<xgboost::common::ColumnType>::__append((uint64_t)&a1[2], v19 - v13);
      unint64_t v15 = v19;
    }
    if (v15) {
      (**a2)(a2, (unint64_t *)a1[2].__begin_, v11);
    }
  }
  unint64_t v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    unint64_t v16 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[3], v19);
    if (v19) {
      (**a2)(a2, (unint64_t *)a1[3].__begin_, 8 * v16);
    }
  }
  unint64_t v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    unint64_t v17 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[4], v19);
    if (v19) {
      (**a2)(a2, (unint64_t *)a1[4].__begin_, 8 * v17);
    }
  }
  a1[5].__begin_ = a3;
  (**a2)(a2, (unint64_t *)&a1[6].__end_, 4);
  (**a2)(a2, (unint64_t *)((char *)&a1[6].__end_ + 4), 1);
  return 1;
}

uint64_t xgboost::GHistIndexMatrix::WriteColumnPage(uint64_t a1, uint64_t a2)
{
  return xgboost::common::ColumnMatrix::Write(*(void **)(a1 + 160), a2);
}

uint64_t xgboost::common::ColumnMatrix::Write(void *a1, uint64_t a2)
{
  uint64_t v15 = a1[1] - *a1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v15, 8);
  if (v15) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *a1, a1[1] - *a1);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v15, 8);
  if (v15) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  }
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v15 = a1[7] - a1[6];
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v15, 8);
  if (v15) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v15 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v15, 8);
  if (v15) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  uint64_t v8 = a1[9];
  uint64_t v9 = a1[10];
  uint64_t v15 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v15, 8);
  if (v15) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  }
  uint64_t v11 = a1[12];
  uint64_t v10 = a1[13];
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 19, 4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, (uint64_t)a1 + 156, 1);
  return v14 + v4 + v7 + v9 + v10 - (v13 + v5 + v6 + v8 + v11) + 45;
}

uint64_t xgboost::GHistIndexMatrix::GetFeatureCounts(uint64_t this, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 - (uint64_t)a2) >> 2 != 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((unsigned int *)a2 + v4);
      unsigned int v6 = v4 + 1;
      uint64_t v7 = *((unsigned int *)a2 + (v4 + 1));
      if (v5 < v7)
      {
        uint64_t v8 = *(void *)(a4 + 8 * v4);
        uint64_t v9 = v7 - v5;
        uint64_t v10 = (uint64_t *)(this + 8 * v5);
        do
        {
          uint64_t v11 = *v10++;
          v8 += v11;
          *(void *)(a4 + 8 * v4) = v8;
          --v9;
        }
        while (v9);
      }
      ++v4;
    }
    while (((a3 - (uint64_t)a2) >> 2) - 1 > (unint64_t)v6);
  }
  return this;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      uint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      unint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      unint64_t v17 = v19;
      LODWORD(v18) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      unint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_22E962CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::ColumnType>::__append(uint64_t a1, size_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(void *)a1;
    uint64_t v7 = &v5[-*(void *)a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[(void)v11];
    uint64_t v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = v12;
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = &v12[a2];
    *(void *)(a1 + 16) = v13;
    if (v6)
    {
      operator delete((void *)v6);
    }
  }
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v8[(void)v12];
    char v15 = &v8[(void)v12 + v4];
    long long v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    unint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--unint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_22E963014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*a1 + 8 * v8) = 0;
LABEL_9:
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = *a1 + 8 * (v4 >> 6);
  uint64_t v18 = *(void *)a2;
  int v19 = v9;
  uint64_t v16 = v10;
  int v17 = v11;
  uint64_t v14 = v12;
  int v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      char *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void xgboost::common::HistogramCuts::Copy(xgboost::common::HistogramCuts *this, const xgboost::common::HistogramCuts *a2)
{
  unint64_t v4 = (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 2;
  int v7 = 0;
  std::vector<float>::resize(*((void *)this + 1), v4, &v7);
  std::vector<unsigned int>::size_type v5 = (uint64_t)(*(void *)(*((void *)a2 + 2) + 8) - **((void **)a2 + 2)) >> 2;
  std::vector<unsigned int>::value_type __x = 0;
  std::vector<unsigned int>::resize(*((std::vector<unsigned int> **)this + 2), v5, &__x);
  unint64_t v6 = (uint64_t)(*(void *)(*((void *)a2 + 3) + 8) - **((void **)a2 + 3)) >> 2;
  int v9 = 0;
  std::vector<float>::resize(*((void *)this + 3), v6, &v9);
  xgboost::HostDeviceVector<float>::Copy();
}

uint64_t xgboost::common::Index::GetValueFromUint8(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return a2[(void)this];
}

uint64_t xgboost::common::Index::GetValueFromUint16(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return *((unsigned __int16 *)this + (void)a2);
}

uint64_t xgboost::common::Index::GetValueFromUint32(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return *((unsigned int *)this + (void)a2);
}

void dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E9637B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = *(void **)(a2 + 128);
    if (v3) {
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a2 + 96);
    if (v4)
    {
      *(void *)(a2 + 104) = v4;
      operator delete(v4);
    }
    std::vector<unsigned int>::size_type v5 = *(void **)(a2 + 72);
    if (v5)
    {
      *(void *)(a2 + 80) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(a2 + 48);
    if (v6)
    {
      *(void *)(a2 + 56) = v6;
      operator delete(v6);
    }
    int v7 = *(void **)(a2 + 24);
    if (v7)
    {
      *(void *)(a2 + 32) = v7;
      operator delete(v7);
    }
    int64_t v8 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v8;
      operator delete(v8);
    }
    JUMPOUT(0x230FA80D0);
  }
}

uint64_t xgboost::common::HistogramCuts::SearchCatBin(uint64_t *a1, uint64_t *a2, unsigned int a3, float a4)
{
  unint64_t v4 = a3 + 1;
  uint64_t v5 = *a2;
  if (v4 >= (a2[1] - *a2) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 4 * v6;
  uint64_t v9 = *(unsigned int *)(v5 + 4 * a3);
  if (v6 != v9)
  {
    float v10 = (float)(int)a4;
    uint64_t v11 = (float *)(v7 + 4 * v9);
    unint64_t v12 = (v8 - (uint64_t)v11) >> 2;
    do
    {
      unint64_t v13 = v12 >> 1;
      uint64_t v14 = &v11[v12 >> 1];
      float v16 = *v14;
      uint64_t v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < v10) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v12 = v13;
      }
    }
    while (v12);
    uint64_t v8 = (uint64_t)v11;
  }
  return ((v8 - v7) >> 2) - ((v8 - v7) >> 2 == v6);
}

uint64_t xgboost::common::HistogramCuts::SearchBin(unsigned int a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 4 * (a1 + 1));
  uint64_t v5 = *(unsigned int *)(a2 + 4 * a1);
  uint64_t v6 = (float *)(a3 + 4 * v4);
  if (v4 != v5)
  {
    uint64_t v7 = (float *)(a3 + 4 * v5);
    unint64_t v8 = v6 - v7;
    do
    {
      unint64_t v9 = v8 >> 1;
      float v10 = &v7[v8 >> 1];
      float v12 = *v10;
      uint64_t v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 > a4) {
        unint64_t v8 = v9;
      }
      else {
        uint64_t v7 = v11;
      }
    }
    while (v8);
    uint64_t v6 = v7;
  }
  return (((unint64_t)v6 - a3) >> 2)
       - (v4 == (((unint64_t)v6 - a3) >> 2));
}

double xgboost::metric::BinaryROCAUC(unint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(&__p, a1);
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = *a2;
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  unint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  float v14 = *((float *)a3 + 4);
  uint64_t v41 = v11;
  LODWORD(v40) = 0;
  if (!v11) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  unint64_t v40 = v7;
  uint64_t v41 = v11;
  if (v11 != v7) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v15 = *(void *)__p;
  unint64_t v16 = *(void *)__p * v8;
  if (v16 >= v9) {
    goto LABEL_26;
  }
  float v17 = *(float *)(v10 + 4 * v16);
  float v18 = v14;
  if (v12)
  {
    if (v12 <= v15) {
LABEL_27:
    }
      std::terminate();
    float v18 = *(float *)(v13 + 4 * v15);
  }
  double v19 = (1.0 - v17) * v18;
  double v20 = (float)(v17 * v18);
  if ((unint64_t)(v39 - (unsigned char *)__p) >= 9)
  {
    unint64_t v21 = (v39 - (unsigned char *)__p) >> 3;
    if (v21 <= 2) {
      unint64_t v21 = 2;
    }
    float v22 = *(float *)(v6 + 4 * v15);
    unint64_t v23 = v21 - 1;
    int v24 = (unint64_t *)((char *)__p + 8);
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    while (1)
    {
      float v28 = v22;
      unint64_t v30 = *v24++;
      unint64_t v29 = v30;
      float v22 = *(float *)(v6 + 4 * v30);
      BOOL v31 = v22 == v28;
      double v32 = v27 + (v26 + v20) * vabdd_f64(v25, v19) * 0.5;
      if (!v31)
      {
        double v27 = v32;
        double v26 = v20;
        double v25 = v19;
      }
      if (v29 * v8 >= v9) {
        break;
      }
      float v33 = *(float *)(v10 + 4 * v29 * v8);
      float v34 = v14;
      if (v12)
      {
        if (v12 <= v29) {
          goto LABEL_27;
        }
        float v34 = *(float *)(v13 + 4 * v29);
      }
      double v19 = v19 + (float)((float)(1.0 - v33) * v34);
      double v20 = v20 + (float)(v33 * v34);
      if (!--v23) {
        goto LABEL_19;
      }
    }
LABEL_26:
    __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
  }
LABEL_19:
  BOOL v35 = v19 <= 0.0;
  if (v20 <= 0.0) {
    BOOL v35 = 1;
  }
  if (v35) {
    double v36 = 0.0;
  }
  else {
    double v36 = v19;
  }
  int v39 = __p;
  operator delete(__p);
  return v36;
}

void sub_22E963D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(void *a1, unint64_t *a2)
{
  unint64_t v3 = (unint64_t **)std::vector<unsigned long>::vector(a1, *a2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *v3;
    do
      *v7++ = v6++;
    while (v7 != v5);
  }
  uint64_t v11 = a2;
  if ((char *)v5 - (char *)v4 < 1025)
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = (unint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v5 - v4);
    uint64_t v10 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v4, v5, &v11, v5 - v4, v8, v10);
  if (v8) {
    operator delete(v8);
  }
}

void sub_22E963E20(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::metric::GroupRankingROC(unint64_t *a1, uint64_t a2, float a3)
{
  xgboost::common::Span<float,18446744073709551615ul>::subspan((void *)(a2 + 16), 0, *(void *)(a2 + 40), v27);
  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(v26, v27);
  unint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 - 1;
    uint64_t v9 = (char *)v26[0] + 8;
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      uint64_t v12 = v7 + 1;
      if (v7 + 1 < v6)
      {
        unint64_t v13 = *((void *)v26[0] + v7);
        if (*a1 > v13)
        {
          float v14 = (unint64_t *)v9;
          unint64_t v15 = v8;
          while (1)
          {
            unint64_t v17 = *v14++;
            unint64_t v16 = v17;
            if (*a1 <= v17) {
              break;
            }
            float v18 = *(float *)(a1[1] + 4 * v13) - *(float *)(a1[1] + 4 * v16);
            BOOL v19 = v18 <= 0.0;
            if (v18 == 0.0) {
              float v20 = 0.5;
            }
            else {
              float v20 = 0.0;
            }
            if (!v19) {
              float v20 = 1.0;
            }
            double v11 = v11 + (float)((float)(a3 * a3) * v20);
            double v10 = v10 + (float)(a3 * a3);
            if (!--v15) {
              goto LABEL_13;
            }
          }
        }
        std::terminate();
      }
LABEL_13:
      --v8;
      v9 += 8;
      uint64_t v7 = v12;
    }
    while (v12 != v6);
    if (v10 == 0.0) {
      double v21 = 1.0;
    }
    else {
      double v21 = v10;
    }
    double v22 = v11 / v21;
    if (v11 / v21 > 1.0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)" (", 2);
      unint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" vs. ", 5);
      int v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") ", 2);
      operator new();
    }
  }
  else
  {
    double v22 = 0.0;
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  return v22;
}

void sub_22E964178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  MEMORY[0x230FA80D0](v16, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double xgboost::metric::BinaryPRAUC(unint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(&__p, a1);
  uint64_t v6 = a2[5];
  if (!v6) {
    goto LABEL_32;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = *a3;
  double v10 = 0.0;
  double v11 = 0.0;
  do
  {
    uint64_t v12 = (float *)(a3 + 2);
    if (v9)
    {
      if (v9 <= v8) {
        goto LABEL_42;
      }
      uint64_t v12 = (float *)(a3[1] + v7);
    }
    uint64_t v13 = *a2;
    unint64_t v14 = *a2 * v8;
    unint64_t v15 = a2[2];
    if (v14 >= v15) {
      __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
    }
    uint64_t v16 = a2[4];
    float v17 = *(float *)(v16 + 4 * v14);
    double v11 = v11 + (float)(*v12 * v17);
    double v10 = v10 + (float)(*v12 * (float)(1.0 - v17));
    ++v8;
    v7 += 4;
  }
  while (v6 != v8);
  if (v11 > 0.0 && v10 > 0.0)
  {
    unint64_t v18 = *a1;
    unint64_t v19 = a1[1];
    uint64_t v20 = a3[1];
    float v21 = *((float *)a3 + 4);
    unint64_t v62 = v18;
    uint64_t v63 = v6;
    if (v6 != v18) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    double v22 = __p;
    unint64_t v23 = *(void *)__p;
    unint64_t v24 = *(void *)__p * v13;
    if (v24 >= v15) {
      goto LABEL_43;
    }
    float v25 = *(float *)(v16 + 4 * v24);
    float v26 = v21;
    if (v9)
    {
      if (v9 <= v23) {
LABEL_42:
      }
        std::terminate();
      float v26 = *(float *)(v20 + 4 * v23);
    }
    double v27 = (1.0 - v25) * v26;
    double v28 = (float)(v25 * v26);
    double v29 = 0.0;
    if ((unint64_t)(v61 - (unsigned char *)__p) >= 9)
    {
      unint64_t v30 = (v61 - (unsigned char *)__p) >> 3;
      if (v30 <= 2) {
        unint64_t v30 = 2;
      }
      float v31 = *(float *)(v19 + 4 * v23);
      unint64_t v32 = v30 - 1;
      float v33 = (unint64_t *)((char *)__p + 8);
      double v34 = 0.0;
      float v35 = 1.0;
      double v36 = 0.0;
      float v57 = v21;
      while (1)
      {
        float v37 = v31;
        unint64_t v39 = *v33++;
        unint64_t v38 = v39;
        float v31 = *(float *)(v19 + 4 * v39);
        if (v31 != v37)
        {
          double v40 = v36 / v11;
          double v41 = 1.0;
          double v42 = v28 / v11;
          if (v28 == v36
            || (double v44 = (v27 - v34) / (v28 - v36), v41 = v44 + 1.0, v45 = (v34 - v44 * v36) / v11, v45 == 0.0))
          {
            double v43 = v42 - v40;
          }
          else
          {
            double v58 = v42 - v40;
            double v59 = v29;
            double v46 = log(v45 + v41 * v42);
            long double v47 = log(v45 + v41 * v40);
            float v35 = 1.0;
            double v29 = v59;
            long double v48 = v46 - v47;
            float v21 = v57;
            double v43 = v58 + -v45 / v41 * v48;
          }
          double v29 = v29 + v43 / v41;
          double v36 = v28;
          double v34 = v27;
        }
        if (v38 * v13 >= v15) {
          break;
        }
        float v49 = *(float *)(v16 + 4 * v38 * v13);
        float v50 = v21;
        if (v9)
        {
          if (v9 <= v38) {
            goto LABEL_42;
          }
          float v50 = *(float *)(v20 + 4 * v38);
        }
        double v27 = v27 + (float)((float)(v35 - v49) * v50);
        double v28 = v28 + (float)(v49 * v50);
        if (!--v32) {
          goto LABEL_35;
        }
      }
LABEL_43:
      __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
    }
    double v36 = 0.0;
    double v34 = 0.0;
LABEL_35:
    double v51 = v36 / v11;
    double v52 = v28 / v11;
    if (v28 != v36)
    {
      double v53 = (v27 - v34) / (v28 - v36);
      double v54 = v53 + 1.0;
      double v55 = (v34 - v53 * v36) / v11;
      if (v55 != 0.0)
      {
        log(v55 + v54 * v52);
        log(v55 + v54 * v51);
      }
    }
  }
  else
  {
LABEL_32:
    double v22 = __p;
    if (!__p) {
      return 1.0;
    }
  }
  unint64_t v61 = v22;
  operator delete(v22);
  return 1.0;
}

void sub_22E96464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  uint64_t v19 = a18;
  a18 = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a18, v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::metric::GPUBinaryROCAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_22E964704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::metric::GPUMultiClassROCAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_22E96477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::metric::GPURankingAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E9647F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::metric::GPUBinaryPRAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_22E964878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::metric::GPUMultiClassPRAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_22E9648F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::metric::GPURankingPRAUC()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E96496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unint64_t *std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unint64_t v8 = (char *)result;
    if (a4 == 2)
    {
      unint64_t v9 = *(a2 - 1);
      unint64_t v10 = **a3;
      if (v10 > v9)
      {
        unint64_t v11 = *result;
        if (v10 > *result)
        {
          if (*(float *)((*a3)[1] + 4 * v9) > *(float *)((*a3)[1] + 4 * v11))
          {
            void *result = v9;
            *(a2 - 1) = v11;
          }
          return result;
        }
      }
LABEL_46:
      std::terminate();
    }
    if ((uint64_t)a4 > 128)
    {
      float v25 = (char *)a5;
      unint64_t v26 = a4 >> 1;
      double v27 = &result[a4 >> 1];
      unint64_t v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5);
        double v29 = (unint64_t *)&v25[8 * v26];
        uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>((unint64_t *)&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v29);
        unint64_t v30 = &v25[8 * a4];
        float v31 = *a3;
        unint64_t v32 = v29;
        while (v32 != (unint64_t *)v30)
        {
          float v33 = v32;
          unint64_t v34 = *v32;
          if (*v31 <= v34) {
            goto LABEL_46;
          }
          unint64_t v35 = *(void *)v25;
          if (*v31 <= *(void *)v25) {
            goto LABEL_46;
          }
          unint64_t v36 = v31[1];
          float v37 = *(float *)(v36 + 4 * v34);
          float v38 = *(float *)(v36 + 4 * v35);
          if (v37 > v38) {
            unint64_t v35 = v34;
          }
          v25 += 8 * (v37 <= v38);
          unint64_t v32 = &v33[v37 > v38];
          *(void *)unint64_t v8 = v35;
          v8 += 8;
          if (v25 == (char *)v29)
          {
            if (v32 != (unint64_t *)v30)
            {
              uint64_t v39 = 0;
              if (v37 > v38) {
                char v40 = 1;
              }
              else {
                char v40 = 2;
              }
              double v41 = &v33[v40 & 1];
              do
              {
                *(void *)&v8[v39 * 8] = v41[v39];
                ++v39;
              }
              while (&v41[v39] != (unint64_t *)v30);
            }
            return result;
          }
        }
        if (v25 != (char *)v29)
        {
          uint64_t v42 = 0;
          do
          {
            *(void *)&v8[v42] = *(void *)&v25[v42];
            v42 += 8;
          }
          while (&v25[v42] != (char *)v29);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25, a6);
        return (unint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v8, &v8[8 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v13 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v14 = 0;
        unint64_t v15 = *a3;
        uint64_t v16 = result;
        while (1)
        {
          float v17 = v13;
          unint64_t v18 = *v13;
          if (*v15 <= v18) {
            goto LABEL_46;
          }
          unint64_t v19 = *v16;
          if (*v15 <= *v16) {
            goto LABEL_46;
          }
          unint64_t v20 = v15[1];
          float v21 = *(float *)(v20 + 4 * v18);
          if (v21 > *(float *)(v20 + 4 * v19))
          {
            uint64_t v22 = v14;
            while (1)
            {
              *(unint64_t *)((char *)result + v22 + 8) = v19;
              if (!v22) {
                break;
              }
              if (*v15 <= v18) {
                goto LABEL_46;
              }
              unint64_t v19 = *(unint64_t *)((char *)result + v22 - 8);
              if (*v15 <= v19) {
                goto LABEL_46;
              }
              v22 -= 8;
              if (v21 <= *(float *)(v20 + 4 * v19))
              {
                unint64_t v23 = (unint64_t *)((char *)result + v22 + 8);
                goto LABEL_21;
              }
            }
            unint64_t v23 = result;
LABEL_21:
            *unint64_t v23 = v18;
          }
          uint64_t v13 = v17 + 1;
          v14 += 8;
          uint64_t v16 = v17;
          if (v17 + 1 == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *uint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v10 = *(a2 - 1);
      unint64_t v11 = **a3;
      if (v11 > v10 && v11 > *result)
      {
        unint64_t v12 = (*a3)[1];
        float v13 = *(float *)(v12 + 4 * v10);
        float v14 = *(float *)(v12 + 4 * *result);
        if (v13 <= v14) {
          unint64_t v10 = *result;
        }
        *a5 = v10;
        uint64_t v5 = a5 + 1;
        if (v13 <= v14) {
          uint64_t v7 = a2 - 1;
        }
        goto LABEL_10;
      }
LABEL_46:
      std::terminate();
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v26, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (unint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      double v27 = *a3;
      unint64_t v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        double v29 = v28;
        unint64_t v30 = *v28;
        if (*v27 <= v30) {
          goto LABEL_46;
        }
        unint64_t v31 = *v7;
        if (*v27 <= *v7) {
          goto LABEL_46;
        }
        unint64_t v32 = v27[1];
        float v33 = *(float *)(v32 + 4 * v30);
        float v34 = *(float *)(v32 + 4 * v31);
        if (v33 > v34) {
          unint64_t v31 = v30;
        }
        unint64_t v28 = &v29[v33 > v34];
        v7 += v33 <= v34;
        *v5++ = v31;
        if (v7 == v26)
        {
          if (v28 != a2)
          {
            uint64_t v35 = 0;
            unint64_t v36 = &v29[v33 > v34];
            do
            {
              v5[v35] = v36[v35];
              ++v35;
            }
            while (&v36[v35] != a2);
          }
          return result;
        }
      }
      if (v7 != v26)
      {
        uint64_t v37 = 0;
        do
        {
          v5[v37] = v7[v37];
          ++v37;
        }
        while (&v7[v37] != v26);
      }
    }
    else if (result != a2)
    {
      unint64_t v15 = *a3;
      uint64_t v16 = (uint64_t *)(result + 1);
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v17 = 0;
        unint64_t v18 = (uint64_t *)a5;
        while (1)
        {
          uint64_t v19 = *v16;
          if (*v15 <= *v16) {
            goto LABEL_46;
          }
          uint64_t v20 = *v18;
          if (*v15 <= *v18) {
            goto LABEL_46;
          }
          float v21 = v18 + 1;
          unint64_t v22 = v15[1];
          if (*(float *)(v22 + 4 * v19) <= *(float *)(v22 + 4 * v20))
          {
            uint64_t *v21 = v19;
          }
          else
          {
            v18[1] = v20;
            unint64_t v23 = a5;
            if (v18 != (uint64_t *)a5)
            {
              uint64_t v24 = v17;
              while (1)
              {
                if (*v15 <= *v16) {
                  goto LABEL_46;
                }
                unint64_t v25 = *(unint64_t *)((char *)a5 + v24 - 8);
                if (*v15 <= v25) {
                  goto LABEL_46;
                }
                if (*(float *)(v22 + 4 * *v16) <= *(float *)(v22 + 4 * v25)) {
                  break;
                }
                *(unint64_t *)((char *)a5 + v24) = v25;
                v24 -= 8;
                if (!v24)
                {
                  unint64_t v23 = a5;
                  goto LABEL_28;
                }
              }
              unint64_t v23 = (unint64_t *)((char *)a5 + v24);
            }
LABEL_28:
            *unint64_t v23 = *v16;
          }
          ++v16;
          v17 += 8;
          unint64_t v18 = v21;
          if (v16 == (uint64_t *)a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, char *a3, unint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    float v13 = result;
    while (a5 > a8 && v10 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v14 = *(void *)a2;
      unint64_t v15 = **a4;
      if (v15 <= *(void *)a2) {
        goto LABEL_70;
      }
      uint64_t v16 = 0;
      uint64_t v17 = -a5;
      while (1)
      {
        unint64_t v18 = *(void *)&v13[v16];
        if (v15 <= v18) {
          goto LABEL_70;
        }
        unint64_t v19 = (*a4)[1];
        if (*(float *)(v19 + 4 * v14) > *(float *)(v19 + 4 * v18)) {
          break;
        }
        v16 += 8;
        if (__CFADD__(v17++, 1)) {
          return result;
        }
      }
      unint64_t v64 = a4;
      __src = a7;
      uint64_t v62 = a8;
      uint64_t v63 = a3;
      unint64_t v61 = &v13[v16];
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          *(void *)&v13[v16] = v14;
          *(void *)a2 = v18;
          return result;
        }
        if (v17 <= 0) {
          uint64_t v31 = -v17;
        }
        else {
          uint64_t v31 = 1 - v17;
        }
        uint64_t v30 = v31 >> 1;
        uint64_t v24 = &v13[8 * (v31 >> 1) + v16];
        unint64_t v23 = a2;
        if (a2 != a3)
        {
          unint64_t v32 = *(void *)v24;
          unint64_t v33 = (a3 - a2) >> 3;
          unint64_t v23 = a2;
          while (1)
          {
            unint64_t v34 = v33 >> 1;
            uint64_t v35 = &v23[8 * (v33 >> 1)];
            if (v15 <= *(void *)v35 || v15 <= v32) {
              break;
            }
            float v36 = *(float *)(v19 + 4 * *(void *)v35);
            uint64_t v37 = v35 + 8;
            v33 += ~v34;
            if (v36 > *(float *)(v19 + 4 * v32)) {
              unint64_t v23 = v37;
            }
            else {
              unint64_t v33 = v34;
            }
            if (!v33) {
              goto LABEL_38;
            }
          }
LABEL_70:
          std::terminate();
        }
LABEL_38:
        uint64_t v22 = (v23 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v21 = v10;
        }
        else {
          uint64_t v21 = v10 + 1;
        }
        uint64_t v22 = v21 >> 1;
        unint64_t v23 = &a2[8 * (v21 >> 1)];
        uint64_t v24 = a2;
        if (a2 - v13 != v16)
        {
          if (v15 > *(void *)v23)
          {
            unint64_t v25 = (a2 - v13 - v16) >> 3;
            uint64_t v24 = &v13[v16];
            while (1)
            {
              unint64_t v26 = v25 >> 1;
              double v27 = &v24[8 * (v25 >> 1)];
              if (v15 <= *(void *)v27) {
                break;
              }
              float v28 = *(float *)(v19 + 4 * *(void *)v27);
              double v29 = v27 + 8;
              v25 += ~v26;
              if (*(float *)(v19 + 4 * *(void *)v23) > v28) {
                unint64_t v25 = v26;
              }
              else {
                uint64_t v24 = v29;
              }
              if (!v25) {
                goto LABEL_25;
              }
            }
          }
          goto LABEL_70;
        }
LABEL_25:
        uint64_t v30 = (v24 - v13 - v16) >> 3;
      }
      a5 = -v30 - v17;
      uint64_t v38 = v10 - v22;
      uint64_t v39 = v30;
      char v40 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v24, a2, v23);
      uint64_t v41 = v39;
      uint64_t v42 = v40;
      if (v41 + v22 >= v10 - (v41 + v22) - v17)
      {
        double v45 = v23;
        a4 = v64;
        uint64_t v46 = v41;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v40, v45, v63, v64, a5, v10 - v22, __src, v62);
        a2 = v24;
        a8 = v62;
        uint64_t v38 = v22;
        a7 = __src;
        a5 = v46;
        a3 = v42;
        float v13 = v61;
      }
      else
      {
        double v43 = v24;
        uint64_t v44 = v22;
        a7 = __src;
        a8 = v62;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v13[v16], v43, v40, v64, v41, v44, __src, v62);
        float v13 = v42;
        a2 = v23;
        a4 = v64;
        a3 = v63;
      }
      uint64_t v10 = v38;
      if (!v38) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        uint64_t v53 = 0;
        do
        {
          *(void *)&a7[v53] = *(void *)&v13[v53];
          v53 += 8;
        }
        while (&v13[v53] != a2);
        if (v53)
        {
          double v54 = *a4;
          double v55 = a7;
          while (a2 != a3)
          {
            uint64_t v56 = *(void *)a2;
            if (*v54 <= *(void *)a2 || *v54 <= *(void *)v55) {
              goto LABEL_70;
            }
            unint64_t v57 = v54[1];
            float v58 = *(float *)(v57 + 4 * v56);
            float v59 = *(float *)(v57 + 4 * *(void *)v55);
            if (v58 <= v59) {
              uint64_t v56 = *(void *)v55;
            }
            a2 += 8 * (v58 > v59);
            v55 += 8 * (v58 <= v59);
            *(void *)float v13 = v56;
            v13 += 8;
            if (&a7[v53] == v55) {
              return result;
            }
          }
          return (char *)memmove(v13, v55, a7 - v55 + v53);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v47 = 0;
      do
      {
        *(void *)&a7[v47] = *(void *)&a2[v47];
        v47 += 8;
      }
      while (&a2[v47] != a3);
      if (v47)
      {
        long double v48 = &a7[v47];
        float v49 = a3 - 8;
        while (a2 != v13)
        {
          unint64_t v50 = *((void *)v48 - 1);
          unint64_t v51 = **a4;
          if (v51 <= v50) {
            goto LABEL_70;
          }
          unint64_t v52 = *((void *)a2 - 1);
          if (v51 <= v52) {
            goto LABEL_70;
          }
          if (*(float *)((*a4)[1] + 4 * v50) <= *(float *)((*a4)[1] + 4 * v52))
          {
            v48 -= 8;
          }
          else
          {
            unint64_t v50 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)float v49 = v50;
          v49 -= 8;
          if (v48 == a7) {
            return result;
          }
        }
        uint64_t v60 = 0;
        do
        {
          *(void *)&v49[v60] = *(void *)&v48[v60 - 8];
          v60 -= 8;
        }
        while (&v48[v60] != a7);
      }
    }
  }
  return result;
}

void xgboost::metric::EvalROCAUC::~EvalROCAUC(xgboost::metric::EvalROCAUC *this)
{
  *(void *)this = &unk_26E24A5B8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E24A5B8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::metric::EvalAUC<xgboost::metric::EvalROCAUC>::Eval(rabit::engine *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  double v52 = 0.0;
  unint64_t v50 = (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2;
  unint64_t v51 = ((*a2)[1] - **a2) >> 2;
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), void, void))(*(void *)Engine + 8))(Engine, &v50, 8, 2, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  if (v50)
  {
    unint64_t v9 = *(rabit::engine **)(a3 + 48);
    unint64_t v8 = *(rabit::engine **)(a3 + 56);
    if (v9 == v8)
    {
      if (v50 == v51 || v51 % v50)
      {
        uint64_t v15 = **a2;
        double v16 = 0.0;
        uint64_t v17 = (*a2)[1] - v15;
        if (v17)
        {
          uint64_t v18 = **(void **)(a3 + 24);
          double v19 = 0.0;
          double v20 = 0.0;
          uint64_t v21 = *(void *)(*(void *)(a3 + 24) + 8) - v18;
          if (v21)
          {
            if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
            {
              *(void *)&long long v72 = v17 >> 2;
              *((void *)&v72 + 1) = v15;
              if (!v18) {
LABEL_71:
              }
                std::terminate();
              int8x16_t v46 = *(int8x16_t *)(a3 + 32);
              int8x16_t v78 = vextq_s8(v46, v46, 8uLL);
              *(void *)&long long v79 = v21 >> 2;
              *((void *)&v79 + 1) = v18;
              *(void *)&long long v80 = v18;
              *((void *)&v80 + 1) = v46.i64[0];
              LODWORD(v81) = -1;
              uint64_t v47 = **(void **)(a3 + 72);
              std::string __p = (void *)((*(void *)(*(void *)(a3 + 72) + 8) - v47) >> 2);
              uint64_t v57 = v47;
              LODWORD(v58) = 1065353216;
              double v19 = xgboost::metric::BinaryROCAUC((unint64_t *)&v72, v78.i64, (uint64_t *)&__p);
            }
            else
            {
              xgboost::metric::GPUBinaryROCAUC();
              double v19 = 0.0;
              double v20 = 0.0;
              double v16 = 0.0;
            }
            double v52 = v16;
          }
        }
        else
        {
          double v19 = 0.0;
          double v20 = 0.0;
        }
        *(double *)&std::string __p = v19 * v20;
        *(double *)v78.i64 = v16;
        *(double *)&v78.i64[1] = v19 * v20;
        long double v48 = rabit::engine::GetEngine(v8);
        (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)v48 + 8))(v48, &v78, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        std::string __p = (void *)v78.i64[1];
        double v52 = *(double *)v78.i64;
        if (*(double *)&v78.i64[1] <= 0.0)
        {
          double v43 = NAN;
        }
        else
        {
          if (*(double *)v78.i64 > *(double *)&v78.i64[1]) {
            dmlc::LogCheckFormat<double,double>();
          }
          double v43 = v52 / *(double *)&__p;
        }
      }
      else
      {
        *(void *)&long long v72 = v51 / v50;
        LODWORD(__p) = 0;
        if (v50 > v51) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string __p = *(void **)&v72;
        LODWORD(v66) = 0;
        if (!(void)v72) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
        {
          uint64_t v49 = **a2;
          v78.i64[0] = ((*a2)[1] - v49) >> 2;
          v78.i64[1] = v49;
          double v43 = xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>(v78.i64, (uint64_t *)a3, (uint64_t)__p, 1, (void (*)(uint64_t *, void *, void *))xgboost::metric::BinaryROCAUC);
        }
        else
        {
          xgboost::metric::GPUMultiClassROCAUC();
          double v43 = 0.0;
        }
      }
      double v52 = v43;
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a3 + 72) + 8) - **(void **)(a3 + 72);
      if (v10)
      {
        std::string __p = (void *)(v10 >> 2);
        *(void *)&long long v72 = ((v8 - v9) >> 2) - 1;
        if (v10 >> 2 != (void)v72) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        unint64_t v8 = *(rabit::engine **)(a3 + 56);
      }
      uint64_t v11 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
      if (v11)
      {
        int v12 = *((_DWORD *)v8 - 1);
        std::string __p = (void *)(v11 >> 2);
        if (v11 >> 2 != v12) {
          dmlc::LogCheckFormat<unsigned int,unsigned long>();
        }
        if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
        {
          uint64_t v22 = *a2;
          uint64_t v23 = *(void *)(a3 + 56) - *(void *)(a3 + 48);
          std::string __p = (void *)(v23 >> 2);
          LODWORD(v72) = 2;
          if ((unint64_t)v23 < 8) {
            dmlc::LogCheckFormat<unsigned long,int>();
          }
          uint64_t v24 = *v22;
          v65[0] = (v22[1] - *v22) >> 2;
          v65[1] = v24;
          uint64_t v25 = *(void *)(a3 + 32);
          uint64_t v26 = **(void **)(a3 + 24);
          BOOL v27 = *(void *)(*(void *)(a3 + 24) + 8) == v26;
          uint64_t v60 = (*(void *)(*(void *)(a3 + 24) + 8) - v26) >> 2;
          uint64_t v61 = v26;
          int v64 = -1;
          uint64_t v28 = *(void *)(a3 + 48);
          uint64_t v29 = *(void *)(a3 + 56);
          uint64_t v30 = *(void **)(a3 + 40);
          uint64_t v58 = v25;
          float v59 = v30;
          std::string __p = v30;
          uint64_t v57 = 1;
          uint64_t v31 = (void)v30 * v25;
          if (v27) {
            uint64_t v31 = 0;
          }
          uint64_t v62 = v26;
          uint64_t v63 = v31;
          unint64_t v32 = *(uint64_t **)(a3 + 72);
          uint64_t v34 = *v32;
          uint64_t v33 = v32[1];
          unsigned int v55 = 0;
          v78.i64[0] = 0;
          std::vector<double>::vector(&v53, 1uLL, &v78);
          unint64_t v35 = (unint64_t)(v29 - v28) >> 2;
          v78.i64[0] = 0;
          v78.i64[1] = 850045863;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          uint64_t v82 = 0;
          uint64_t v36 = (v35 - 1);
          if (v35 != 1)
          {
            unint64_t v37 = 0;
            do
            {
              if (v33 == v34)
              {
                float v38 = 1.0;
              }
              else
              {
                if ((v33 - v34) >> 2 <= v37) {
                  goto LABEL_71;
                }
                float v38 = *(float *)(v34 + 4 * v37);
              }
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v65, *(unsigned int *)(*(void *)(a3 + 48) + 4 * v37), (*(_DWORD *)(*(void *)(a3 + 48) + 4 * v37 + 4)- *(_DWORD *)(*(void *)(a3 + 48) + 4 * v37)), v77);
              xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>((uint64_t)&v72, (uint64_t *)&__p, *(_DWORD *)(*(void *)(a3 + 48) + 4 * v37), *(_DWORD *)(*(void *)(a3 + 48) + 4 * v37 + 4));
              if (*((void *)&v75 + 1) >= 3uLL)
              {
                v71[0] = v77[0];
                v71[1] = v77[1];
                long long v66 = v72;
                uint64_t v67 = v73;
                uint64_t v68 = v74;
                long long v69 = v75;
                int v70 = v76;
                double v39 = xgboost::metric::GroupRankingROC(v71, (uint64_t)&v66, v38);
              }
              else
              {
                atomic_fetch_add((atomic_uint *volatile)&v55, 1u);
                double v39 = 0.0;
              }
              *(double *)uint64_t v53 = v39 + *(double *)v53;
              ++v37;
            }
            while (v36 != v37);
          }
          dmlc::OMPException::Rethrow((std::exception_ptr *)&v78);
          std::mutex::~mutex((std::mutex *)&v78.u64[1]);
          std::exception_ptr::~exception_ptr((std::exception_ptr *)&v78);
          char v40 = (double *)v53;
          if (v53 == v54)
          {
            double v13 = 0.0;
          }
          else
          {
            double v41 = 0.0;
            do
            {
              double v42 = *v40++;
              double v41 = v41 + v42;
            }
            while (v40 != v54);
            double v13 = v41;
          }
          unsigned int v44 = atomic_load(&v55);
          if (v53)
          {
            double v54 = v53;
            operator delete(v53);
          }
          unsigned int v14 = v36 - v44;
        }
        else
        {
          xgboost::metric::GPURankingAUC();
          double v13 = 0.0;
          unsigned int v14 = 0;
        }
        double v52 = v13;
        unint64_t v8 = *(rabit::engine **)(a3 + 56);
      }
      else
      {
        unsigned int v14 = 0;
      }
      if ((((uint64_t)v8 - *(void *)(a3 + 48)) >> 2) - 1 != v14) {
        xgboost::metric::InvalidGroupAUC(v8);
      }
      *(double *)v78.i64 = v52;
      *(double *)&v78.i64[1] = (double)v14;
      double v45 = rabit::engine::GetEngine(v8);
      (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)v45 + 8))(v45, &v78, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
      if (*(double *)&v78.i64[1])
      {
        double v52 = *(double *)v78.i64 / (double)*(double *)&v78.i64[1];
        LODWORD(v53) = 1;
        if (v52 > 1.0) {
          dmlc::LogCheckFormat<double,int>();
        }
      }
      else
      {
        double v52 = NAN;
      }
    }
  }
  else
  {
    double v52 = NAN;
    v7.n128_u64[0] = 0x7FF8000000000000;
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v78, (uint64_t)&__p, 330, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Dataset is empty, or contains only positive or negative samples.", 64);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v78);
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_22E9660C4()
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  if (!v2) {
    _Unwind_Resume(v0);
  }
  JUMPOUT(0x22E9661ACLL);
}

void sub_22E966144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  uint64_t v49 = a49;
  a49 = 0;
  if (v49) {
    JUMPOUT(0x22E966200);
  }
  JUMPOUT(0x22E96621CLL);
}

void sub_22E966158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_22E966178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0x22E966200);
  }
  _Unwind_Resume(v19);
}

void sub_22E966180()
{
}

void sub_22E96618C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a52);
  if (a24 < 0) {
    JUMPOUT(0x22E9661ACLL);
  }
  _Unwind_Resume(v52);
}

void sub_22E9661B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  uint64_t v49 = a49;
  a49 = 0;
  if (v49) {
    JUMPOUT(0x22E966200);
  }
  JUMPOUT(0x22E96621CLL);
}

void sub_22E9661C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9661D0);
}

void sub_22E9661E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9661F0);
}

void sub_22E966208(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

const char *xgboost::metric::EvalROCAUC::Name(xgboost::metric::EvalROCAUC *this)
{
  return "auc";
}

void xgboost::metric::InvalidGroupAUC(xgboost::metric *this)
{
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v7, (uint64_t)__p, 103, 2);
    uint64_t v1 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid group with less than 3 samples is found on worker ", 58);
    Engine = rabit::engine::GetEngine(v1);
    (*(void (**)(void *))(*(void *)Engine + 64))(Engine);
    std::exception_ptr v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)".  Calculating AUC value requires at ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"least 2 pairs of samples.", 25);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22E966318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a2[2] < (unint64_t)a4) {
    __assert_rtn("MakeSliceDim", "linalg.h", 274, "static_cast<decltype(shape_[old_dim])>(range.end) <= shape_[old_dim]");
  }
  uint64_t v6 = a4 - a3;
  uint64_t v7 = *a2;
  unint64_t v8 = a2 + 4;
  if (a2[4]) {
    unint64_t v9 = *a2 * a3;
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t result = xgboost::common::Span<float,18446744073709551615ul>::subspan(v8, v9, 0xFFFFFFFFFFFFFFFFLL, v15);
  int v11 = *((_DWORD *)a2 + 16);
  unint64_t v12 = v15[0];
  unint64_t v13 = v15[1];
  if (v15[0]) {
    uint64_t v14 = v6;
  }
  else {
    uint64_t v14 = 0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 48) = v11;
  return result;
}

void dmlc::LogCheckFormat<double,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E966588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, void (*a5)(uint64_t *, void *, void *))
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v58 = a3;
  LODWORD(v54[0]) = 0;
  if (!a3) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  unint64_t v8 = (uint64_t *)a2[3];
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = a2[5];
  if (a2[4])
  {
    v54[0] = a2[5];
    LODWORD(v61[0]) = 1;
    if (v11 != 1) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  v75.__ptr_ = 0;
  unint64_t v12 = (rabit::engine *)std::vector<double>::vector(&__p, 3 * v58, &v75);
  unint64_t v13 = (double *)__p;
  uint64_t v53 = v58;
  if (v57 != __p && !__p
    || (unint64_t v14 = (v57 - (unsigned char *)__p) >> 3, v15 = v57 != __p, v49 = v14 - v15, v14 < v15)
    || !__p && v14 != v15
    || v14 < 2 * (unint64_t)(v57 != __p)
    || (uint64_t v16 = 2 * (v57 != __p), !__p) && v14 != v16)
  {
LABEL_59:
    std::terminate();
  }
  uint64_t v17 = (char *)__p + 8 * v15;
  unint64_t v48 = v14 - v16;
  uint64_t v18 = (char *)__p + 16 * (v57 != __p);
  double v19 = a1;
  uint64_t v20 = *(void *)(a2[9] + 8);
  uint64_t v52 = *(void *)a2[9];
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  int v55 = -1;
  uint64_t v23 = *a2;
  v54[4] = v21;
  v54[5] = v22;
  v54[2] = v23;
  v54[3] = v58;
  v54[0] = v58;
  v54[1] = 1;
  uint64_t v24 = v23 * v58;
  if (!v21) {
    uint64_t v24 = 0;
  }
  v54[6] = v22;
  v54[7] = v24;
  if (*(void *)(a2[3] + 8) != *(void *)a2[3])
  {
    LODWORD(v61[0]) = a4;
    LODWORD(v72) = 1;
    if (a4 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v75.__ptr_ = 0;
    v76.__m_.__uint64_t sig = 850045863;
    memset(v76.__m_.__opaque, 0, sizeof(v76.__m_.__opaque));
    if (v58)
    {
      unint64_t v25 = 0;
      unint64_t v26 = (v9 - v10) >> 2;
      uint64_t v50 = (v20 - v52) >> 2;
      if (v49 >= v48) {
        unint64_t v27 = v48;
      }
      else {
        unint64_t v27 = v49;
      }
      do
      {
        unint64_t v74 = v25;
        std::vector<float>::vector(&v72, (uint64_t)(*(void *)(a2[3] + 8) - *(void *)a2[3]) >> 2);
        std::vector<float>::vector(&v70, (uint64_t)(*(void *)(a2[3] + 8) - *(void *)a2[3]) >> 2);
        uint64_t v69 = 0;
        if (v73 == (unsigned char *)v72)
        {
          uint64_t v67 = 0;
          uint64_t v68 = v73;
          ptr = v70.__ptr_;
          uint64_t v33 = v71;
          if (!v70.__ptr_ && v71) {
            goto LABEL_59;
          }
        }
        else
        {
          do
          {
            uint64_t v28 = (_DWORD *)xgboost::linalg::TensorView<float const,2>::operator()<unsigned long &,unsigned long &>(v54, &v69, &v74);
            uint64_t v29 = v69;
            uint64_t v30 = v72;
            v72[v69] = *v28;
            if (v29 * v11 >= v26) {
              __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
            }
            if (*(float *)(v10 + 4 * v29 * v11) == (float)v74) {
              float v31 = 1.0;
            }
            else {
              float v31 = 0.0;
            }
            ptr = v70.__ptr_;
            *((float *)v70.__ptr_ + v29) = v31;
            uint64_t v69 = v29 + 1;
          }
          while (v29 + 1 < (unint64_t)((v73 - (unsigned char *)v30) >> 2));
          uint64_t v67 = (v73 - (unsigned char *)v30) >> 2;
          uint64_t v68 = v30;
          uint64_t v33 = v71;
        }
        uint64_t v62 = (v33 - ptr) >> 2;
        uint64_t v63 = ptr;
        int v64 = ptr;
        uint64_t v65 = v62;
        int v66 = -1;
        v61[0] = 1;
        v61[1] = v62;
        v59[0] = v50;
        v59[1] = v52;
        int v60 = 1065353216;
        a5(&v67, v61, v59);
        unint64_t v37 = 3 * v74;
        if (3 * v74 >= v27) {
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        }
        *(void *)&v17[24 * v74] = v35;
        *(void *)&v18[8 * v37] = v36;
        if (v37 >= v14) {
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        }
        v13[v37] = v34 * *(double *)&v17[8 * v37];
        if (v70.__ptr_)
        {
          uint64_t v71 = v70.__ptr_;
          operator delete(v70.__ptr_);
        }
        if (v72)
        {
          uint64_t v73 = v72;
          operator delete(v72);
        }
        ++v25;
      }
      while (v25 != v53);
    }
    dmlc::OMPException::Rethrow(&v75);
    std::mutex::~mutex(&v76);
    std::exception_ptr::~exception_ptr(&v75);
  }
  Engine = rabit::engine::GetEngine(v12);
  (*(void (**)(void *, double *, uint64_t, unint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, v13, 8, v14, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
  uint64_t v39 = v58;
  if (v58)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v49;
    if (v48 < v49) {
      unint64_t v41 = v48;
    }
    double v42 = 0.0;
    double v43 = 0.0;
    do
    {
      if (v40 >= v14) {
        goto LABEL_58;
      }
      double v44 = v13[v40];
      if (v44 == 0.0) {
        goto LABEL_52;
      }
      if (v40 >= v41) {
LABEL_58:
      }
        __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
      double v45 = *(double *)&v17[8 * v40];
      double v43 = v43 + *(double *)&v18[8 * v40] / v44 * v45;
      double v42 = v42 + v45;
      v40 += 3;
      --v39;
    }
    while (v39);
    double v46 = NAN;
    if (v42 != 0.0) {
      double v46 = v43 / v42;
    }
  }
  else
  {
LABEL_52:
    double v46 = NAN;
  }
  if (__p)
  {
    uint64_t v57 = __p;
    operator delete(__p);
  }
  return v46;
}

void sub_22E966D70()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 184));
  JUMPOUT(0x22E966E48);
}

void sub_22E966D7C()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 184));
  JUMPOUT(0x22E966E48);
}

void sub_22E966D88(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_22E966E34();
}

void sub_22E966D90()
{
}

void sub_22E966DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_22E966DF0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  sub_22E966E34();
}

void sub_22E966DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  uint64_t v11 = *(void *)(v10 - 184);
  *(void *)(v10 - 184) = 0;
  if (v11) {
    std::default_delete<std::string>::operator()[abi:ne180100](v10 - 184);
  }
  JUMPOUT(0x22E966E58);
}

void sub_22E966E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E966E18);
}

uint64_t sub_22E966E30(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  return sub_22E966E34();
}

void sub_22E966E34()
{
}

void sub_22E966E40()
{
}

void dmlc::LogCheckFormat<double,double>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E966FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::metric::EvalPRAUC::~EvalPRAUC(xgboost::metric::EvalPRAUC *this)
{
  *(void *)this = &unk_26E24A6B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E24A6B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::metric::EvalAUC<xgboost::metric::EvalPRAUC>::Eval(rabit::engine *a1, void ***a2, uint64_t a3)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  double v58 = 0.0;
  unint64_t v56 = (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2;
  unint64_t v57 = ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2;
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), void, void))(*(void *)Engine + 8))(Engine, &v56, 8, 2, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  if (v56)
  {
    uint64_t v9 = *(rabit::engine **)(a3 + 48);
    unint64_t v8 = *(rabit::engine **)(a3 + 56);
    if (v9 == v8)
    {
      if (v56 == v57 || v57 % v56)
      {
        unint64_t v15 = **a2;
        double v16 = 0.0;
        uint64_t v17 = (unsigned char *)(*a2)[1] - v15;
        if (v17)
        {
          uint64_t v18 = **(void **)(a3 + 24);
          double v19 = 0.0;
          double v20 = 0.0;
          uint64_t v21 = *(void *)(*(void *)(a3 + 24) + 8) - v18;
          if (v21)
          {
            if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
            {
              *(void *)&long long v80 = v17 >> 2;
              *((void *)&v80 + 1) = v15;
              if (!v18) {
LABEL_76:
              }
                std::terminate();
              int8x16_t v52 = *(int8x16_t *)(a3 + 32);
              *(int8x16_t *)&v86[0].__ptr_ = vextq_s8(v52, v52, 8uLL);
              *(void *)&long long v87 = v21 >> 2;
              *((void *)&v87 + 1) = v18;
              *(void *)&long long v88 = v18;
              *((void *)&v88 + 1) = v52.i64[0];
              LODWORD(v89) = -1;
              uint64_t v53 = **(void **)(a3 + 72);
              std::string __p = (void *)((*(void *)(*(void *)(a3 + 72) + 8) - v53) >> 2);
              uint64_t v63 = v53;
              LODWORD(v64) = 1065353216;
              double v19 = xgboost::metric::BinaryPRAUC((unint64_t *)&v80, (uint64_t *)v86, (uint64_t *)&__p);
            }
            else
            {
              xgboost::metric::GPUBinaryPRAUC();
              double v19 = 0.0;
              double v20 = 0.0;
              double v16 = 0.0;
            }
            double v58 = v16;
          }
        }
        else
        {
          double v19 = 0.0;
          double v20 = 0.0;
        }
        *(double *)&std::string __p = v19 * v20;
        v86[0] = *(std::exception_ptr *)&v16;
        *(double *)&v86[1].__ptr_ = v19 * v20;
        double v54 = rabit::engine::GetEngine(v8);
        (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)v54 + 8))(v54, v86, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        double v58 = *(double *)&v86[0].__ptr_;
        std::string __p = v86[1].__ptr_;
        if (*(double *)&v86[1].__ptr_ <= 0.0)
        {
          double v26 = NAN;
        }
        else
        {
          if (*(double *)&v86[0].__ptr_ > *(double *)&v86[1].__ptr_) {
            dmlc::LogCheckFormat<double,double>();
          }
          double v26 = v58 / *(double *)&__p;
        }
      }
      else
      {
        std::string __p = (void *)(v57 / v56);
        LODWORD(v80) = 0;
        if (v56 > v57) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
        {
          int v55 = **a2;
          v86[0].__ptr_ = (void *)(((unsigned char *)(*a2)[1] - v55) >> 2);
          v86[1].__ptr_ = v55;
          double v26 = xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>((uint64_t *)v86, (uint64_t *)a3, (uint64_t)__p, 1, (void (*)(uint64_t *, void *, void *))xgboost::metric::BinaryPRAUC);
        }
        else
        {
          xgboost::metric::GPUMultiClassPRAUC();
          double v26 = 0.0;
        }
      }
      double v58 = v26;
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a3 + 72) + 8) - **(void **)(a3 + 72);
      if (v10)
      {
        std::string __p = (void *)(v10 >> 2);
        *(void *)&long long v80 = ((v8 - v9) >> 2) - 1;
        if (v10 >> 2 != (void)v80) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        unint64_t v8 = *(rabit::engine **)(a3 + 56);
      }
      uint64_t v11 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
      if (v11)
      {
        int v12 = *((_DWORD *)v8 - 1);
        std::string __p = (void *)(v11 >> 2);
        if (v11 >> 2 != v12) {
          dmlc::LogCheckFormat<unsigned int,unsigned long>();
        }
        if (*(_DWORD *)(*((void *)a1 + 1) + 24) == -1)
        {
          uint64_t v22 = **(float ***)(a3 + 24);
          uint64_t v23 = *(void *)(*(void *)(a3 + 24) + 8) - (void)v22;
          if (v23)
          {
            uint64_t v24 = v23 >> 2;
            while (1)
            {
              if (!v24) {
                goto LABEL_76;
              }
              if (*v22 < 0.0 || *v22 > 1.0) {
                break;
              }
              ++v22;
              if (!--v24) {
                goto LABEL_38;
              }
            }
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.h");
            uint64_t v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"PR-AUC supports only binary relevance for learning to rank.", 59);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
          }
LABEL_38:
          uint64_t v29 = *a2;
          uint64_t v30 = *(void *)(a3 + 56) - *(void *)(a3 + 48);
          std::string __p = (void *)(v30 >> 2);
          LODWORD(v80) = 2;
          if ((unint64_t)v30 < 8) {
            dmlc::LogCheckFormat<unsigned long,int>();
          }
          float v31 = *v29;
          v71[0] = ((unsigned char *)v29[1] - (unsigned char *)*v29) >> 2;
          v71[1] = v31;
          uint64_t v32 = *(void *)(a3 + 32);
          uint64_t v33 = **(void **)(a3 + 24);
          BOOL v34 = *(void *)(*(void *)(a3 + 24) + 8) == v33;
          uint64_t v66 = (*(void *)(*(void *)(a3 + 24) + 8) - v33) >> 2;
          uint64_t v67 = v33;
          int v70 = -1;
          uint64_t v35 = *(void *)(a3 + 48);
          uint64_t v36 = *(void *)(a3 + 56);
          unint64_t v37 = *(void **)(a3 + 40);
          uint64_t v64 = v32;
          uint64_t v65 = v37;
          std::string __p = v37;
          uint64_t v63 = 1;
          uint64_t v38 = (void)v37 * v32;
          if (v34) {
            uint64_t v38 = 0;
          }
          uint64_t v68 = v33;
          uint64_t v69 = v38;
          uint64_t v39 = *(uint64_t **)(a3 + 72);
          uint64_t v41 = *v39;
          uint64_t v40 = v39[1];
          unsigned int v61 = 0;
          v86[0].__ptr_ = 0;
          std::vector<double>::vector(&v59, 1uLL, v86);
          unint64_t v42 = (unint64_t)(v36 - v35) >> 2;
          v86[0].__ptr_ = 0;
          v86[1].__ptr_ = (void *)850045863;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          uint64_t v90 = 0;
          uint64_t v43 = (v42 - 1);
          if (v42 != 1)
          {
            unint64_t v44 = 0;
            do
            {
              if (v40 == v41)
              {
                float v45 = 1.0;
              }
              else
              {
                if ((v40 - v41) >> 2 <= v44) {
                  goto LABEL_76;
                }
                float v45 = *(float *)(v41 + 4 * v44);
              }
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v71, *(unsigned int *)(*(void *)(a3 + 48) + 4 * v44), (*(_DWORD *)(*(void *)(a3 + 48) + 4 * v44 + 4)- *(_DWORD *)(*(void *)(a3 + 48) + 4 * v44)), v85);
              xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>((uint64_t)&v80, (uint64_t *)&__p, *(_DWORD *)(*(void *)(a3 + 48) + 4 * v44), *(_DWORD *)(*(void *)(a3 + 48) + 4 * v44 + 4));
              v79[0] = v85[0];
              v79[1] = v85[1];
              long long v74 = v80;
              uint64_t v75 = v81;
              uint64_t v76 = v82;
              long long v77 = v83;
              int v78 = v84;
              v72[0] = 0;
              v72[1] = 0;
              float v73 = v45;
              xgboost::metric::BinaryPRAUC(v79, (uint64_t *)&v74, v72);
              *(double *)float v59 = v46 + *(double *)v59;
              ++v44;
            }
            while (v43 != v44);
          }
          dmlc::OMPException::Rethrow(v86);
          std::mutex::~mutex((std::mutex *)&v86[1]);
          std::exception_ptr::~exception_ptr(v86);
          uint64_t v47 = (double *)v59;
          if (v59 == v60)
          {
            double v13 = 0.0;
          }
          else
          {
            double v48 = 0.0;
            do
            {
              double v49 = *v47++;
              double v48 = v48 + v49;
            }
            while (v47 != v60);
            double v13 = v48;
          }
          unsigned int v50 = atomic_load(&v61);
          if (v59)
          {
            int v60 = v59;
            operator delete(v59);
          }
          unsigned int v14 = v43 - v50;
        }
        else
        {
          xgboost::metric::GPURankingPRAUC();
          double v13 = 0.0;
          unsigned int v14 = 0;
        }
        double v58 = v13;
        unint64_t v8 = *(rabit::engine **)(a3 + 56);
      }
      else
      {
        unsigned int v14 = 0;
      }
      if ((((uint64_t)v8 - *(void *)(a3 + 48)) >> 2) - 1 != v14) {
        xgboost::metric::InvalidGroupAUC(v8);
      }
      v86[0] = *(std::exception_ptr *)&v58;
      *(double *)&v86[1].__ptr_ = (double)v14;
      unint64_t v51 = rabit::engine::GetEngine(v8);
      (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)v51 + 8))(v51, v86, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
      if (*(double *)&v86[1].__ptr_)
      {
        double v58 = *(double *)&v86[0].__ptr_ / (double)*(double *)&v86[1].__ptr_;
        LODWORD(v59) = 1;
        if (v58 > 1.0) {
          dmlc::LogCheckFormat<double,int>();
        }
      }
      else
      {
        double v58 = NAN;
      }
    }
  }
  else
  {
    double v58 = NAN;
    v7.n128_u64[0] = 0x7FF8000000000000;
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v86, (uint64_t)&__p, 330, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Dataset is empty, or contains only positive or negative samples.", 64);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v86);
      if (SHIBYTE(v64) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_22E967D80()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v3);
  if (!v2) {
    _Unwind_Resume(v1);
  }
  JUMPOUT(0x22E967E64);
}

void sub_22E967DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  uint64_t v51 = a51;
  a51 = 0;
  if (v51) {
    JUMPOUT(0x22E967EB8);
  }
  JUMPOUT(0x22E967ED4);
}

void sub_22E967E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_22E967E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    JUMPOUT(0x22E967EB8);
  }
  _Unwind_Resume(v18);
}

void sub_22E967E38()
{
}

void sub_22E967E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a54);
  if (a23 < 0) {
    JUMPOUT(0x22E967E64);
  }
  _Unwind_Resume(v54);
}

void sub_22E967E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  uint64_t v51 = a51;
  a51 = 0;
  if (v51) {
    JUMPOUT(0x22E967EB8);
  }
  JUMPOUT(0x22E967ED4);
}

void sub_22E967E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E967E88);
}

void sub_22E967E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E967EA8);
}

void sub_22E967EC0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

const char *xgboost::metric::EvalPRAUC::Name(xgboost::metric::EvalPRAUC *this)
{
  return "aucpr";
}

uint64_t dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get()
{
  uint64_t v1 = &dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst;
  if ((*v0 & 1) == 0)
  {
    *(_DWORD *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst) = 5489;
    do
    {
      uint64_t v5 = v4(v3);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(void *)(v4(v3) + 2496) = 0;
    *(unsigned char *)v9(v8) = 1;
  }
  return (*v1)(v1);
}

uint64_t xgboost::common::AllVisibleGPUs(xgboost::common *this)
{
  return 0;
}

std::string *xgboost::FeatureInteractionConstraintHost::Configure(std::string *this, const xgboost::tree::TrainParam *a2, int a3)
{
  uint64_t v4 = (uint64_t)this;
  if (*((char *)a2 + 127) < 0)
  {
    if (*((void *)a2 + 14)) {
      goto LABEL_3;
    }
LABEL_7:
    this[4].__r_.__value_.__s.__data_[4] = 0;
    return this;
  }
  if (!*((unsigned char *)a2 + 127)) {
    goto LABEL_7;
  }
LABEL_3:
  this[4].__r_.__value_.__s.__data_[4] = 1;
  std::string::operator=(this + 3, (const std::string *)((char *)a2 + 104));
  *(_DWORD *)(v4 + 96) = a3;

  return (std::string *)xgboost::FeatureInteractionConstraintHost::Reset(v4);
}

uint64_t xgboost::FeatureInteractionConstraintHost::Reset(uint64_t this)
{
  if (*(unsigned char *)(this + 100))
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    xgboost::ParseInteractionConstraint();
  }
  return this;
}

void sub_22E968278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::unordered_set<unsigned int>>::resize(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *result) >> 3);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      uint64_t v21 = v5 + 40 * a2;
      while (v6 != v21)
      {
        v6 -= 40;
        uint64_t result = (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v6);
      }
      v4[1] = v21;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t)(result + 2);
    uint64_t v11 = v4[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v6) >> 3) >= v8)
    {
      unint64_t v22 = v6 + 40 * v8;
      uint64_t v23 = 40 * a2 - 40 * v7;
      do
      {
        uint64_t result = (uint64_t *)std::unordered_set<unsigned int>::unordered_set(v6, a3);
        v6 += 40;
        v23 -= 40;
      }
      while (v23);
      v4[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= a2) {
        uint64_t v13 = a2;
      }
      if (v12 >= 0x333333333333333) {
        unint64_t v14 = 0x666666666666666;
      }
      else {
        unint64_t v14 = v13;
      }
      unint64_t v27 = v4 + 2;
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(v10, v14);
      uint64_t v16 = (uint64_t)&v15[40 * v7];
      v24[0] = v15;
      v24[1] = v16;
      uint64_t v25 = v16;
      double v26 = &v15[40 * v17];
      uint64_t v18 = 5 * a2;
      double v19 = &v15[40 * a2];
      uint64_t v20 = 8 * v18 - 40 * v7;
      do
      {
        std::unordered_set<unsigned int>::unordered_set(v16, a3);
        v16 += 40;
        v20 -= 40;
      }
      while (v20);
      uint64_t v25 = (uint64_t)v19;
      std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(v4, v24);
      return (uint64_t *)std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer((uint64_t)v24);
    }
  }
  return result;
}

void sub_22E96854C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::FeatureInteractionConstraintHost::SplitImpl(xgboost::FeatureInteractionConstraintHost *this, int a2, unsigned int a3, int a4, int a5)
{
  v39[0] = a3;
  if (a4 <= a5) {
    int v8 = a5;
  }
  else {
    int v8 = a4;
  }
  uint64_t v9 = (uint64_t *)((char *)this + 48);
  std::unordered_set<unsigned int>::unordered_set((uint64_t)v36, *((void *)this + 6) + 40 * a2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v36, v39, v39);
  signed int v10 = v8 + 1;
  int v11 = v8 + 1;
  uint64_t v13 = *((void *)this + 6);
  uint64_t v12 = *((void *)this + 7);
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v13) >> 3);
  unint64_t v15 = v8 + 1 - v14;
  if (v8 + 1 <= v14)
  {
    if (v10 < v14)
    {
      uint64_t v23 = v13 + 40 * v11;
      while (v12 != v23)
        uint64_t v12 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v12 - 40);
      *((void *)this + 7) = v23;
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v12) >> 3) >= v15)
    {
      unint64_t v24 = v12 + 40 * v15;
      do
      {
        *(_OWORD *)uint64_t v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_DWORD *)(v12 + 32) = 1065353216;
        v12 += 40;
      }
      while (v12 != v24);
      *((void *)this + 7) = v24;
    }
    else
    {
      if (v8 <= -2) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v10) {
        uint64_t v18 = v10;
      }
      if (v17 >= 0x333333333333333) {
        unint64_t v19 = 0x666666666666666;
      }
      else {
        unint64_t v19 = v18;
      }
      unint64_t v42 = (char *)this + 64;
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>((uint64_t)this + 64, v19);
      uint64_t v21 = &v20[40 * v14];
      *(void *)&long long v40 = v20;
      *((void *)&v40 + 1) = v21;
      *((void *)&v41 + 1) = &v20[40 * v22];
      do
      {
        *(_OWORD *)uint64_t v21 = 0uLL;
        *((_OWORD *)v21 + 1) = 0uLL;
        *((_DWORD *)v21 + 8) = 1065353216;
        v21 += 40;
      }
      while (v21 != &v20[40 * v11]);
      *(void *)&long long v41 = &v20[40 * v11];
      std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(v9, &v40);
      std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer((uint64_t)&v40);
    }
  }
  uint64_t v25 = *v9;
  uint64_t v26 = *v9 + 40 * a4;
  if ((unsigned char *)v26 != v36)
  {
    *(_DWORD *)(v26 + 32) = v38;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((void *)v26, v37);
    uint64_t v25 = *v9;
  }
  uint64_t v27 = v25 + 40 * a5;
  if ((unsigned char *)v27 != v36)
  {
    *(_DWORD *)(v27 + 32) = v38;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((void *)v27, v37);
  }
  v39[1] = 0;
  v39[2] = v10;
  if (!v10) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v28 = (void *)((char *)this + 24);
  long long v40 = 0u;
  long long v41 = 0u;
  LODWORD(v42) = 1065353216;
  std::vector<std::unordered_set<unsigned int>>::resize((uint64_t *)this + 3, v10, (uint64_t)&v40);
  int v29 = a5;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v40);
  for (int i = v37; i; int i = (uint64_t **)*i)
  {
    LODWORD(v40) = *((_DWORD *)i + 4);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * a4, (unsigned int *)&v40, &v40);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * v29, (unsigned int *)&v40, &v40);
  }
  uint64_t v32 = *(void **)this;
  for (unint64_t j = (void *)*((void *)this + 1); v32 != j; v32 += 5)
  {
    uint64_t v33 = v37;
    if (v37)
    {
      while (1)
      {
        LODWORD(v40) = *((_DWORD *)v33 + 4);
        if (!std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(v32, (unsigned int *)&v40))break; {
        uint64_t v33 = (uint64_t **)*v33;
        }
        if (!v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      for (k = (uint64_t *)v32[2]; k; k = (uint64_t *)*k)
      {
        LODWORD(v40) = *((_DWORD *)k + 4);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * a4, (unsigned int *)&v40, &v40);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * v29, (unsigned int *)&v40, &v40);
      }
    }
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
}

void sub_22E968924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned int>::unordered_set<std::__wrap_iter<unsigned int const*>>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_22E9689EC(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      *(void *)(v6 - 40) = v8;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 32) = 0;
      uint64_t v9 = *(void *)(v2 + v5 - 24);
      *(void *)(v4 + v5 - 24) = v9;
      uint64_t v10 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 16) = v10;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      if (v10)
      {
        unint64_t v11 = *(void *)(v9 + 8);
        unint64_t v12 = *(void *)(v6 - 32);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            v11 %= v12;
          }
        }
        else
        {
          v11 &= v12 - 1;
        }
        *(void *)(v8 + 8 * v11) = v4 + v5 - 24;
        *(void *)(v2 + v5 - 24) = 0;
        *(void *)(v2 + v5 - 16) = 0;
      }
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v13 = *result;
  void *result = v4;
  a2[1] = v13;
  uint64_t v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>(void *a1, uint64_t **a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v4; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      unint64_t v7 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v6 + 4) = v7;
      uint64_t v8 = (uint64_t *)*v6;
      v6[1] = v7;
      inserted = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare((uint64_t)a1, v7, (_DWORD *)v6 + 4);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(a1, v6, inserted);
      a2 = (uint64_t **)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v13 = (uint64_t *)*v6;
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      unint64_t v10 = *((unsigned int *)a2 + 4);
      unint64_t v11 = operator new(0x18uLL);
      v11[4] = v10;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = v10;
      unint64_t v12 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare((uint64_t)a1, v10, v11 + 4);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(a1, v11, v12);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_22E968C18(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_22E968C38(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      uint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      uint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            uint64_t v16 = (uint64_t **)i;
          }
          else
          {
            unint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                unint64_t v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *uint64_t v16 = v24;
              *uint64_t v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              uint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      uint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    uint64_t v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t xgboost::predictor::__dmlc_registry_file_tag_cpu_predictor__(xgboost::predictor *this)
{
  return 0;
}

float xgboost::predictor::PredValue(unint64_t *a1, uint64_t *a2, void *a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v12 = *a1;
  if (*a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = *a1;
    while (v15 < v16)
    {
      unint64_t v17 = a1[1];
      unint64_t v18 = *(unsigned int *)(v17 + v13);
      if (v18 < (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
      {
        *(_DWORD *)(*(void *)a5 + 4 * v18) = *(_DWORD *)(v17 + v13 + 4);
        ++v14;
        unint64_t v16 = *a1;
      }
      if (v15 == v16) {
        break;
      }
      ++v15;
      v13 += 8;
      if (v12 == v15) {
        goto LABEL_10;
      }
    }
LABEL_27:
    std::terminate();
  }
  unint64_t v16 = 0;
  uint64_t v14 = 0;
LABEL_10:
  *(unsigned char *)(a5 + 24) = v14 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2;
  float v19 = 0.0;
  if (a6 < a7)
  {
    uint64_t v20 = a7;
    uint64_t v21 = a6;
    do
    {
      if (*(_DWORD *)(*a3 + 4 * v21) == a4)
      {
        uint64_t v22 = *a2;
        unint64_t v23 = *(uint64_t **)(*a2 + 8 * v21);
        uint64_t v24 = v23[32];
        uint64_t v25 = v23[33];
        uint64_t v26 = v23[29];
        v35[0] = v23[30] - v26;
        v35[1] = v26;
        uint64_t v27 = v23[35];
        v35[4] = (v23[36] - v27) >> 4;
        v35[5] = v27;
        uint64_t v28 = v25 - v24;
        v35[2] = v28 >> 2;
        v35[3] = v24;
        if (v28)
        {
          int Leaf = xgboost::predictor::GetLeafIndex<true,true>((uint64_t)v23, a5, v35);
          uint64_t v22 = *a2;
        }
        else
        {
          int Leaf = xgboost::predictor::GetLeafIndex<true,false>(v23[20], *(void *)a5);
        }
        float v19 = v19 + *(float *)(*(void *)(*(void *)(v22 + 8 * v21) + 160) + 20 * Leaf + 16);
      }
      ++v21;
    }
    while (v20 != v21);
    unint64_t v16 = *a1;
  }
  if (v16)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    unint64_t v32 = v16;
    while (v31 < v32)
    {
      unint64_t v33 = *(unsigned int *)(a1[1] + v30);
      if (v33 < (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
      {
        *(_DWORD *)(*(void *)a5 + 4 * v33) = -1;
        unint64_t v32 = *a1;
      }
      if (v31 == v32) {
        break;
      }
      ++v31;
      v30 += 8;
      if (v16 == v31) {
        goto LABEL_26;
      }
    }
    goto LABEL_27;
  }
LABEL_26:
  *(unsigned char *)(a5 + 24) = 1;
  return v19;
}

uint64_t xgboost::predictor::GetLeafIndex<true,true>(uint64_t a1, uint64_t Next, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 160);
  if (*(_DWORD *)(v3 + 4) == -1) {
    return 0;
  }
  uint8x8_t v5 = (void *)Next;
  uint64_t v7 = 0;
  LODWORD(Next) = 0;
  do
  {
    uint64_t v8 = v3 + 20 * v7;
    float v9 = *(float *)(*v5 + 4 * (*(_DWORD *)(v8 + 12) & 0x7FFFFFFF));
    Next = xgboost::predictor::GetNextNode<true,true>(v8, Next, LODWORD(v9) == -1, a3, v9);
    uint64_t v7 = (int)Next;
    uint64_t v3 = *(void *)(a1 + 160);
  }
  while (*(_DWORD *)(v3 + 20 * (int)Next + 4) != -1);
  return Next;
}

uint64_t xgboost::predictor::GetLeafIndex<true,false>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *(_DWORD *)(a1 + 20 * v3 + 12);
    float v5 = *(float *)(a2 + 4 * (v4 & 0x7FFFFFFF));
    if (v5 == NAN)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 20 * v3 + 8);
      if (v4 >= 0) {
        uint64_t v6 = v7;
      }
      else {
        uint64_t v6 = v2;
      }
    }
    else if (*(float *)(a1 + 20 * v3 + 16) > v5)
    {
      uint64_t v6 = v2;
    }
    else
    {
      uint64_t v6 = v2 + 1;
    }
    uint64_t v3 = (int)v6;
    unsigned int v2 = *(_DWORD *)(a1 + 20 * (int)v6 + 4);
  }
  while (v2 != -1);
  return v6;
}

uint64_t xgboost::predictor::PredictByAllTrees(uint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v38 = result;
  if (a2 < a3)
  {
    do
    {
      uint64_t v9 = *(int *)(*(void *)(v38 + 224) + 4 * a2);
      unint64_t v10 = *(uint64_t **)(*(void *)(v38 + 176) + 8 * a2);
      uint64_t v11 = v10[29];
      unint64_t v45 = v10[30] - v11;
      uint64_t v46 = v11;
      uint64_t v13 = v10[32];
      uint64_t v12 = v10[33];
      uint64_t v14 = v10[35];
      unint64_t v48 = (v10[36] - v14) >> 4;
      uint64_t v49 = v14;
      uint64_t v15 = v12 - v13;
      v47[0] = v15 >> 2;
      v47[1] = v13;
      unint64_t v39 = a2;
      if (v15)
      {
        if (a9)
        {
          uint64_t v16 = 0;
          while (1)
          {
            uint64_t v17 = *a7 + 32 * (v16 + a8);
            if (!*(unsigned char *)(v17 + 24)) {
              break;
            }
            uint64_t result = xgboost::predictor::GetLeafIndex<true,true>((uint64_t)v10, *a7 + 32 * (v16 + a8), &v45);
            uint64_t v18 = v10[20];
LABEL_34:
            *(float *)(*a4 + 4 * (v9 + (v16 + a5) * a6)) = *(float *)(v18 + 20 * (int)result + 16)
                                                         + *(float *)(*a4 + 4 * (v9 + (v16 + a5) * a6));
            if (++v16 == a9) {
              goto LABEL_49;
            }
          }
          uint64_t v18 = v10[20];
          unsigned int v19 = *(_DWORD *)(v18 + 4);
          if (v19 == -1)
          {
            uint64_t result = 0;
            goto LABEL_34;
          }
          uint64_t v20 = 0;
          LODWORD(result) = 0;
          while (2)
          {
            uint64_t v21 = v18 + 20 * v20;
            int v23 = *(_DWORD *)(v21 + 12);
            uint64_t v22 = (_DWORD *)(v21 + 12);
            float v24 = *(float *)(*(void *)v17 + 4 * (v23 & 0x7FFFFFFF));
            if (!v45) {
              goto LABEL_25;
            }
            if (v45 <= result) {
              goto LABEL_51;
            }
            if (*(unsigned char *)(v46 + result) == 1)
            {
              if (v48 <= (int)result) {
                goto LABEL_51;
              }
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v47, *(void *)(v49 + 16 * (int)result), *(void *)(v49 + 16 * (int)result + 8), v50);
              if (v24 >= 0.0 && v24 < 16777000.0 && v24 < (float)(32 * v50[0]))
              {
                if (v50[0] > (unint64_t)v24 >> 5)
                {
                  unint64_t v27 = (unint64_t)(int)v24 >> 5;
                  if (v27 >= v50[0]) {
LABEL_51:
                  }
                    std::terminate();
                  if ((*(_DWORD *)(v50[1] + 4 * v27) >> ~(int)v24)) {
                    goto LABEL_24;
                  }
                }
LABEL_29:
                uint64_t v28 = (unsigned int *)(v18 + 20 * v20 + 4);
              }
              else
              {
                if ((*v22 & 0x80000000) != 0) {
                  goto LABEL_29;
                }
LABEL_24:
                uint64_t v28 = (unsigned int *)(v18 + 20 * v20 + 8);
              }
              uint64_t result = *v28;
              uint64_t v18 = v10[20];
            }
            else
            {
LABEL_25:
              if (*(float *)(v18 + 20 * v20 + 16) > v24) {
                uint64_t result = v19;
              }
              else {
                uint64_t result = v19 + 1;
              }
            }
            uint64_t v20 = (int)result;
            unsigned int v19 = *(_DWORD *)(v18 + 20 * (int)result + 4);
            if (v19 == -1) {
              goto LABEL_34;
            }
            continue;
          }
        }
      }
      else if (a9)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *a7;
        uint64_t v31 = *a4;
        do
        {
          uint64_t v32 = v30 + 32 * (v29 + a8);
          uint64_t v33 = *(void *)v32;
          uint64_t v34 = v10[20];
          if (*(unsigned char *)(v32 + 24))
          {
            uint64_t result = xgboost::predictor::GetLeafIndex<true,false>(v10[20], v33);
          }
          else
          {
            unsigned int v35 = *(_DWORD *)(v34 + 4);
            if (v35 == -1)
            {
              uint64_t result = 0;
            }
            else
            {
              uint64_t v36 = 0;
              do
              {
                if (*(float *)(v34 + 20 * v36 + 16) > *(float *)(v33
                                                                + 4 * (*(_DWORD *)(v34 + 20 * v36 + 12) & 0x7FFFFFFF)))
                  uint64_t result = v35;
                else {
                  uint64_t result = v35 + 1;
                }
                uint64_t v36 = (int)result;
                unsigned int v35 = *(_DWORD *)(v34 + 20 * (int)result + 4);
              }
              while (v35 != -1);
            }
          }
          *(float *)(v31 + 4 * (v9 + (v29 + a5) * a6)) = *(float *)(v34 + 20 * (int)result + 16)
                                                       + *(float *)(v31 + 4 * (v9 + (v29 + a5) * a6));
          ++v29;
        }
        while (v29 != a9);
      }
LABEL_49:
      a2 = v39 + 1;
    }
    while (v39 + 1 != a3);
  }
  return result;
}

void xgboost::predictor::FillNodeMeanValues(uint64_t a1, int a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = v5 + 20 * a2;
  int v8 = *(_DWORD *)(v6 + 4);
  unsigned int v7 = (int *)(v6 + 4);
  if (v8 == -1)
  {
    float v11 = *(float *)(v5 + 20 * a2 + 16);
  }
  else
  {
    float v10 = ((float (*)(void))xgboost::predictor::FillNodeMeanValues)()
        * *(float *)(*(void *)(a1 + 208) + 16 * *v7 + 4);
    float v11 = (float)(v10
                + (float)(xgboost::predictor::FillNodeMeanValues(a1, *(unsigned int *)(v5 + 20 * (int)v4 + 8), a3)
                        * *(float *)(*(void *)(a1 + 208) + 16 * *(int *)(v5 + 20 * (int)v4 + 8) + 4)))
        / *(float *)(*(void *)(a1 + 208) + 16 * v4 + 4);
  }
  *(float *)(*a3 + 4 * v4) = v11;
}

void xgboost::predictor::FillNodeMeanValues(uint64_t a1, void *a2)
{
  unint64_t v3 = *(int *)(a1 + 12);
  if (v3 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    std::vector<float>::resize((uint64_t)a2, v3);
    xgboost::predictor::FillNodeMeanValues(a1, 0, a2);
  }
}

uint64_t xgboost::predictor::GetNextNode<true,true>(uint64_t a1, unsigned int a2, int a3, void *a4, float a5)
{
  if (a3)
  {
    if (*(int *)(a1 + 12) >= 0) {
      uint64_t v6 = (unsigned int *)(a1 + 8);
    }
    else {
      uint64_t v6 = (unsigned int *)(a1 + 4);
    }
    return *v6;
  }
  if (*a4)
  {
    if (*a4 <= (unint64_t)a2) {
      goto LABEL_20;
    }
    if (*(unsigned char *)(a4[1] + a2) == 1)
    {
      if (a4[4] > (unint64_t)(int)a2)
      {
        uint64_t v9 = (unint64_t *)(a4[5] + 16 * (int)a2);
        xgboost::common::Span<float,18446744073709551615ul>::subspan(a4 + 2, *v9, v9[1], v12);
        if (a5 < 0.0 || a5 >= 16777000.0 || (float)(32 * v12[0]) <= a5)
        {
          if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_22;
        }
        if (v12[0] <= (unint64_t)a5 >> 5) {
          goto LABEL_22;
        }
        unint64_t v10 = (unint64_t)(int)a5 >> 5;
        if (v10 < v12[0])
        {
          if ((*(_DWORD *)(v12[1] + 4 * v10) >> ~(int)a5))
          {
LABEL_16:
            uint64_t v6 = (unsigned int *)(a1 + 8);
            return *v6;
          }
LABEL_22:
          uint64_t v6 = (unsigned int *)(a1 + 4);
          return *v6;
        }
      }
LABEL_20:
      std::terminate();
    }
  }
  unsigned int v11 = *(_DWORD *)(a1 + 4);
  if (*(float *)(a1 + 16) > a5) {
    return v11;
  }
  else {
    return v11 + 1;
  }
}

void std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__func()
{
}

void *std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24A738;
  return result;
}

void std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24A738;
}

void std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::predictor::CPUPredictor::~CPUPredictor(xgboost::predictor::CPUPredictor *this)
{
}

void xgboost::predictor::CPUPredictor::PredictBatch(xgboost::predictor::CPUPredictor *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, const xgboost::gbm::GBTreeModel *a4)
{
  v13[13] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  uint64_t v6 = (**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  if ((unint64_t)(*(void *)(v6 + 8) * v5) <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 8) * v5;
  }
  double v8 = (double)*(unint64_t *)((**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) + 16) / (double)v7;
  memset(v13, 0, 24);
  if (v8 <= 0.5) {
    int v9 = 1;
  }
  else {
    int v9 = 64;
  }
  xgboost::predictor::CPUPredictor::InitThreadTemp(v9, v13);
  (*(void (**)(uint64_t *__return_ptr, xgboost::DMatrix *))(*(void *)a2 + 72))(&v11, a2);
  void v10[2] = v11;
  v10[3] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v10, 0);
}

void sub_22E96A1F0()
{
}

void sub_22E96A1FC()
{
}

void sub_22E96A210()
{
}

void sub_22E96A21C()
{
}

void sub_22E96A22C()
{
}

void sub_22E96A234()
{
}

void sub_22E96A24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char *a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,char a30)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v30 - 184));
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  a26 = &a30;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void sub_22E96A264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void **a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30)
{
  uint64_t v32 = *(void *)(v30 - 184);
  *(void *)(v30 - 184) = 0;
  if (v32) {
    std::default_delete<std::string>::operator()[abi:ne180100](v30 - 184, v32);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  a26 = (void **)&a30;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_22E96A2C8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E96A310);
}

BOOL xgboost::predictor::CPUPredictor::InplacePredict(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, float a8)
{
  uint64_t v207 = *MEMORY[0x263EF8340];
  if (*a2) {
    uint64_t v15 = *(void *)(*a2 + 16);
  }
  else {
    uint64_t v15 = MEMORY[0x263F8C288];
  }
  {
    uint64_t v16 = *(uint64_t (****)(void, uint64_t))a3;
    uint64_t v17 = *(std::__shared_weak_count **)(a3 + 8);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *a2;
    uint64_t v177 = v17;
    if (!*a2)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: type_ != nullptr", 30);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"The any container is empty", 26);
      float v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" requested=", 11);
      size_t v25 = strlen((const char *)(0x800000022EA1CE7FLL & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x800000022EA1CE7FLL & 0x7FFFFFFFFFFFFFFFLL, v25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v205);
      uint64_t v18 = *a2;
    }
    {
      uint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      unint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"The stored type mismatch", 24);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" stored=", 8);
      size_t v32 = strlen((const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, *(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL, v32);
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" requested=", 11);
      size_t v35 = strlen((const char *)(0x800000022EA1CE7FLL & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, 0x800000022EA1CE7FLL & 0x7FFFFFFFFFFFFFFFLL, v35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v205);
    }
    uint64_t v36 = a2[1];
    uint64_t v37 = a2[2];
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v191 = *(void *)(v36 + 48);
    uint64_t v38 = *(void *)(a4 + 8);
    int v40 = *(_DWORD *)(v38 + 4);
    uint64_t v39 = v38 + 4;
    uint64_t v176 = (std::__shared_weak_count *)v37;
    if (v191 != v40) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (!v16) {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v205);
    }
    uint64_t v41 = *(void *)(v36 + 40);
    *(void *)(**v16)(v16, v39) = v41;
    unint64_t v42 = (unint64_t *)((uint64_t (*)(uint64_t (***)(void, uint64_t)))**v16)(v16);
    xgboost::Predictor::InitOutPredictions(a1, v42, a5, a4);
    std::vector<xgboost::Entry>::vector(&v199, 8 * *(void *)(v36 + 48));
    unint64_t v186 = (uint64_t *)*a5;
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(64, (uint64_t *)&v196);
    uint64_t v191 = v36;
    float v192 = a8;
    uint64_t v193 = (v200 - (unsigned char *)v199) >> 3;
    v194 = v199;
    v205.__ptr_ = 0;
    std::vector<unsigned long>::vector(__p, 1uLL, &v205);
    uint64_t v183 = *(int *)(*(void *)(a4 + 8) + 8);
    LODWORD(v203) = *(_DWORD *)(a4 + 44);
    LODWORD(v201) = 0;
    if (v203) {
      dmlc::LogCheckFormat<int,int>();
    }
    uint64_t v73 = *(void *)(v191 + 40);
    unint64_t v74 = *(int *)(*(void *)(a4 + 8) + 4);
    LODWORD(v72) = vcvtpd_u64_f64((double)v73 * 0.015625);
    v205.__ptr_ = 0;
    v206[0].__m_.__uint64_t sig = 850045863;
    *(_OWORD *)v206[0].__m_.__opaque = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[32] = 0u;
    *(void *)&v206[0].__m_.__opaque[48] = 0;
    unint64_t v188 = v72;
    if (v72)
    {
      uint64_t v75 = 0;
      unint64_t v179 = a6;
      uint64_t v181 = v73;
      unint64_t v76 = a7;
      do
      {
        uint64_t v77 = (void)v75 << 6;
        if ((unint64_t)(v181 - ((void)v75 << 6)) >= 0x40) {
          uint64_t v78 = 64;
        }
        else {
          uint64_t v78 = v181 - ((void)v75 << 6);
        }
        if (v78)
        {
          for (uint64_t i = 0; i != v78; ++i)
          {
            long long v80 = v196;
            uint64_t v81 = (void **)&v196[4 * i];
            if (v81[1] == *v81)
            {
              std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)&v196[4 * i], v74);
              uint64_t v82 = (unsigned char *)v81[1] - (unsigned char *)*v81;
              if (v82 >= 1) {
                memset(*v81, 255, 4 * (((unint64_t)v82 >> 2) - ((unint64_t)v82 > 3)) + 4);
              }
              LOBYTE(v80[4 * i + 3]) = 1;
            }
            xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](&v201, (uint64_t)&v191, i + v77);
            uint64_t v83 = v201;
            if (v201)
            {
              uint64_t v84 = 0;
              unint64_t v85 = (_DWORD *)(v202 + 4);
              do
              {
                unint64_t v86 = *(v85 - 1);
                if (v86 < ((unsigned char *)v81[1] - (unsigned char *)*v81) >> 2)
                {
                  *((_DWORD *)*v81 + v86) = *v85;
                  ++v84;
                }
                v85 += 2;
                --v83;
              }
              while (v83);
            }
            else
            {
              uint64_t v84 = 0;
            }
            LOBYTE(v80[4 * i + 3]) = v84 != ((unsigned char *)v81[1] - (unsigned char *)*v81) >> 2;
          }
        }
        xgboost::predictor::PredictByAllTrees(a4, v179, v76, v186, (void)v75 << 6, v183, (uint64_t *)&v196, 0, v78);
        if (v78)
        {
          for (uint64_t j = 0; j != v78; ++j)
          {
            long long v88 = v196;
            xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](&v203, (uint64_t)&v191, j + v77);
            uint64_t v89 = v203;
            if (v203)
            {
              uint64_t v90 = &v88[4 * j];
              uint64_t v91 = v204;
              do
              {
                unsigned int v93 = *v91;
                v91 += 2;
                uint64_t v92 = v93;
                if (v93 < (unint64_t)((uint64_t)(v90[1] - *v90) >> 2)) {
                  *(_DWORD *)(*v90 + 4 * v92) = -1;
                }
                --v89;
              }
              while (v89);
            }
            LOBYTE(v88[4 * j + 3]) = 1;
          }
        }
        uint64_t v75 = (std::mutex *)((char *)v75 + 1);
      }
      while (v75 != v188);
    }
    goto LABEL_145;
  }
  if (*a2) {
    uint64_t v43 = *(void *)(*a2 + 16);
  }
  else {
    uint64_t v43 = MEMORY[0x263F8C288];
  }
  {
    unint64_t v44 = *(uint64_t (****)(void, uint64_t))a3;
    unint64_t v45 = *(std::__shared_weak_count **)(a3 + 8);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = *a2;
    uint64_t v178 = v45;
    if (!*a2)
    {
      uint64_t v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      unint64_t v48 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: type_ != nullptr", 30);
      unsigned int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"The any container is empty", 26);
      int8x16_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" requested=", 11);
      size_t v53 = strlen((const char *)(0x800000022EA1CEB3 & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, 0x800000022EA1CEB3 & 0x7FFFFFFFFFFFFFFFLL, v53);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v205);
      uint64_t v46 = *a2;
    }
    {
      double v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      int v55 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v205);
      unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
      unint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      double v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"The stored type mismatch", 24);
      float v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" stored=", 8);
      size_t v60 = strlen((const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      unsigned int v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, *(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL, v60);
      uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" requested=", 11);
      size_t v63 = strlen((const char *)(0x800000022EA1CEB3 & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, 0x800000022EA1CEB3 & 0x7FFFFFFFFFFFFFFFLL, v63);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v205);
    }
    uint64_t v64 = a2[1];
    uint64_t v65 = a2[2];
    if (v65) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v191 = *(void *)(v64 + 56);
    uint64_t v66 = *(void *)(a4 + 8);
    int v68 = *(_DWORD *)(v66 + 4);
    uint64_t v67 = v66 + 4;
    uint64_t v185 = (std::__shared_weak_count *)v65;
    if (v191 != v68) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (!v44) {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v205);
    }
    uint64_t v69 = *(void *)(v64 + 48);
    *(void *)(**v44)(v44, v67) = v69;
    int v70 = (unint64_t *)((uint64_t (*)(uint64_t (***)(void, uint64_t)))**v44)(v44);
    xgboost::Predictor::InitOutPredictions(a1, v70, a5, a4);
    std::vector<xgboost::Entry>::vector(&v199, 8 * *(void *)(v64 + 56));
    uint64_t v104 = (uint64_t *)*a5;
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(1, (uint64_t *)&v196);
    uint64_t v191 = v64;
    float v192 = a8;
    uint64_t v193 = (v200 - (unsigned char *)v199) >> 3;
    v194 = v199;
    v205.__ptr_ = 0;
    std::vector<unsigned long>::vector(__p, 1uLL, &v205);
    uint64_t v105 = *(int *)(*(void *)(a4 + 8) + 8);
    LODWORD(v203) = *(_DWORD *)(a4 + 44);
    LODWORD(v201) = 0;
    if (v203) {
      dmlc::LogCheckFormat<int,int>();
    }
    uint64_t v106 = *(unsigned int *)(v191 + 48);
    unint64_t v107 = *(int *)(*(void *)(a4 + 8) + 4);
    v205.__ptr_ = 0;
    v206[0].__m_.__uint64_t sig = 850045863;
    *(_OWORD *)v206[0].__m_.__opaque = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[32] = 0u;
    *(void *)&v206[0].__m_.__opaque[48] = 0;
    if (v106)
    {
      for (uint64_t k = 0; k != v106; ++k)
      {
        uint64_t v109 = v196;
        if (v196[1] == *v196)
        {
          std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)v196, v107);
          uint64_t v110 = v109[1] - *v109;
          if (v110 >= 1) {
            memset((void *)*v109, 255, 4 * (((unint64_t)v110 >> 2) - ((unint64_t)v110 > 3)) + 4);
          }
          *((unsigned char *)v109 + 24) = 1;
        }
        xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](&v201, (uint64_t)&v191, k);
        uint64_t v111 = v201;
        if (v201)
        {
          uint64_t v112 = 0;
          unint64_t v113 = (_DWORD *)(v202 + 4);
          do
          {
            unint64_t v114 = *(v113 - 1);
            if (v114 < (uint64_t)(v109[1] - *v109) >> 2)
            {
              *(_DWORD *)(*v109 + 4 * v114) = *v113;
              ++v112;
            }
            v113 += 2;
            --v111;
          }
          while (v111);
        }
        else
        {
          uint64_t v112 = 0;
        }
        *((unsigned char *)v109 + 24) = v112 != (uint64_t)(v109[1] - *v109) >> 2;
        xgboost::predictor::PredictByAllTrees(a4, a6, a7, v104, k, v105, (uint64_t *)&v196, 0, 1);
        uint64_t v115 = v196;
        xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](&v203, (uint64_t)&v191, k);
        uint64_t v116 = v203;
        if (v203)
        {
          unint64_t v117 = v204;
          do
          {
            unsigned int v119 = *v117;
            v117 += 2;
            uint64_t v118 = v119;
            if (v119 < (unint64_t)((uint64_t)(v115[1] - *v115) >> 2)) {
              *(_DWORD *)(*v115 + 4 * v118) = -1;
            }
            --v116;
          }
          while (v116);
        }
        *((unsigned char *)v115 + 24) = 1;
      }
    }
    goto LABEL_179;
  }
  if (*a2) {
    uint64_t v71 = *(void *)(*a2 + 16);
  }
  else {
    uint64_t v71 = MEMORY[0x263F8C288];
  }
  {
    if (*a2) {
      uint64_t v103 = *(void *)(*a2 + 16);
    }
    else {
      uint64_t v103 = MEMORY[0x263F8C288];
    }
    if (!result) {
      return result;
    }
    uint64_t v121 = *(uint64_t (****)(void, uint64_t))a3;
    uint64_t v122 = *(std::__shared_weak_count **)(a3 + 8);
    if (v122) {
      atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v178 = v122;
    dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>(a2);
    uint64_t v123 = a2[1];
    uint64_t v124 = a2[2];
    if (v124) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v191 = *(void *)(v123 + 360);
    uint64_t v125 = *(void *)(a4 + 8);
    int v127 = *(_DWORD *)(v125 + 4);
    uint64_t v126 = v125 + 4;
    uint64_t v185 = (std::__shared_weak_count *)v124;
    if (v191 != v127) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (!v121) {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v205);
    }
    uint64_t v128 = *(void *)(v123 + 216);
    uint64_t v129 = (void *)(**v121)(v121, v126);
    uint64_t v130 = v128 - 1;
    if (!v128) {
      uint64_t v130 = 0;
    }
    void *v129 = v130;
    uint64_t v131 = (unint64_t *)((uint64_t (*)(uint64_t (***)(void, uint64_t)))**v121)(v121);
    xgboost::Predictor::InitOutPredictions(a1, v131, a5, a4);
    std::vector<xgboost::Entry>::vector(&v199, 8 * *(void *)(v123 + 360));
    uint64_t v157 = (uint64_t *)*a5;
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(1, (uint64_t *)&v196);
    uint64_t v191 = v123;
    float v192 = a8;
    uint64_t v193 = (v200 - (unsigned char *)v199) >> 3;
    v194 = v199;
    v205.__ptr_ = 0;
    std::vector<unsigned long>::vector(__p, 1uLL, &v205);
    uint64_t v158 = *(int *)(*(void *)(a4 + 8) + 8);
    LODWORD(v203) = *(_DWORD *)(a4 + 44);
    LODWORD(v201) = 0;
    if (v203) {
      dmlc::LogCheckFormat<int,int>();
    }
    uint64_t v159 = *(void *)(v191 + 216);
    BOOL v160 = v159 != 0;
    unsigned int v161 = v159 - 1;
    if (!v160) {
      unsigned int v161 = 0;
    }
    unint64_t v162 = *(int *)(*(void *)(a4 + 8) + 4);
    v205.__ptr_ = 0;
    v206[0].__m_.__uint64_t sig = 850045863;
    *(_OWORD *)v206[0].__m_.__opaque = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v206[0].__m_.__opaque[32] = 0u;
    *(void *)&v206[0].__m_.__opaque[48] = 0;
    uint64_t v163 = v161;
    if (v161)
    {
      uint64_t v164 = 0;
      do
      {
        uint64_t v165 = v196;
        if (v196[1] == *v196)
        {
          std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)v196, v162);
          uint64_t v166 = v165[1] - *v165;
          if (v166 >= 1) {
            memset((void *)*v165, 255, 4 * (((unint64_t)v166 >> 2) - ((unint64_t)v166 > 3)) + 4);
          }
          *((unsigned char *)v165 + 24) = 1;
        }
        xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](&v201, (uint64_t)&v191, v164);
        uint64_t v167 = v201;
        if (v201)
        {
          uint64_t v168 = 0;
          uint64_t v169 = (_DWORD *)(v202 + 4);
          do
          {
            unint64_t v170 = *(v169 - 1);
            if (v170 < (uint64_t)(v165[1] - *v165) >> 2)
            {
              *(_DWORD *)(*v165 + 4 * v170) = *v169;
              ++v168;
            }
            v169 += 2;
            --v167;
          }
          while (v167);
        }
        else
        {
          uint64_t v168 = 0;
        }
        *((unsigned char *)v165 + 24) = v168 != (uint64_t)(v165[1] - *v165) >> 2;
        xgboost::predictor::PredictByAllTrees(a4, a6, a7, v157, v164, v158, (uint64_t *)&v196, 0, 1);
        unint64_t v171 = v196;
        xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](&v203, (uint64_t)&v191, v164);
        uint64_t v172 = v203;
        if (v203)
        {
          uint64_t v173 = v204;
          do
          {
            unsigned int v175 = *v173;
            v173 += 2;
            uint64_t v174 = v175;
            if (v175 < (unint64_t)((uint64_t)(v171[1] - *v171) >> 2)) {
              *(_DWORD *)(*v171 + 4 * v174) = -1;
            }
            --v172;
          }
          while (v172);
        }
        *((unsigned char *)v171 + 24) = 1;
        ++v164;
      }
      while (v164 != v163);
    }
LABEL_179:
    dmlc::OMPException::Rethrow(&v205);
    std::mutex::~mutex(v206);
    std::exception_ptr::~exception_ptr(&v205);
    v154 = __p[0];
    unint64_t v155 = v178;
    uint64_t v156 = v185;
    if (!__p[0]) {
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  unint64_t v94 = *(uint64_t (****)(void, uint64_t))a3;
  uint64_t v95 = *(std::__shared_weak_count **)(a3 + 8);
  if (v95) {
    atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v177 = v95;
  dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>(a2);
  uint64_t v96 = a2[1];
  uint64_t v97 = a2[2];
  if (v97) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v191 = *(void *)(v96 + 128);
  uint64_t v98 = *(void *)(a4 + 8);
  int v100 = *(_DWORD *)(v98 + 4);
  uint64_t v99 = v98 + 4;
  uint64_t v176 = (std::__shared_weak_count *)v97;
  if (v191 != v100) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (!v94) {
    xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v205);
  }
  uint64_t v101 = *(void *)(v96 + 120);
  *(void *)(**v94)(v94, v99) = v101;
  uint64_t v102 = (unint64_t *)((uint64_t (*)(uint64_t (***)(void, uint64_t)))**v94)(v94);
  xgboost::Predictor::InitOutPredictions(a1, v102, a5, a4);
  std::vector<xgboost::Entry>::vector(&v199, 8 * *(void *)(v96 + 128));
  unint64_t v187 = (uint64_t *)*a5;
  v196 = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  xgboost::predictor::CPUPredictor::InitThreadTemp(64, (uint64_t *)&v196);
  uint64_t v191 = v96;
  float v192 = a8;
  uint64_t v193 = (v200 - (unsigned char *)v199) >> 3;
  v194 = v199;
  v205.__ptr_ = 0;
  std::vector<unsigned long>::vector(__p, 1uLL, &v205);
  uint64_t v184 = *(int *)(*(void *)(a4 + 8) + 8);
  LODWORD(v203) = *(_DWORD *)(a4 + 44);
  LODWORD(v201) = 0;
  if (v203) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v133 = *(void *)(v191 + 120);
  unint64_t v134 = *(int *)(*(void *)(a4 + 8) + 4);
  LODWORD(v132) = vcvtpd_u64_f64((double)v133 * 0.015625);
  v205.__ptr_ = 0;
  v206[0].__m_.__uint64_t sig = 850045863;
  *(_OWORD *)v206[0].__m_.__opaque = 0u;
  *(_OWORD *)&v206[0].__m_.__opaque[16] = 0u;
  *(_OWORD *)&v206[0].__m_.__opaque[32] = 0u;
  *(void *)&v206[0].__m_.__opaque[48] = 0;
  unint64_t v189 = v132;
  if (v132)
  {
    uint64_t v135 = 0;
    unint64_t v180 = a6;
    uint64_t v182 = v133;
    unint64_t v136 = a7;
    do
    {
      uint64_t v137 = (void)v135 << 6;
      if ((unint64_t)(v182 - ((void)v135 << 6)) >= 0x40) {
        uint64_t v138 = 64;
      }
      else {
        uint64_t v138 = v182 - ((void)v135 << 6);
      }
      if (v138)
      {
        for (uint64_t m = 0; m != v138; ++m)
        {
          uint64_t v140 = v196;
          uint64_t v141 = (void **)&v196[4 * m];
          if (v141[1] == *v141)
          {
            std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)&v196[4 * m], v134);
            uint64_t v142 = (unsigned char *)v141[1] - (unsigned char *)*v141;
            if (v142 >= 1) {
              memset(*v141, 255, 4 * (((unint64_t)v142 >> 2) - ((unint64_t)v142 > 3)) + 4);
            }
            LOBYTE(v140[4 * m + 3]) = 1;
          }
          xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](&v201, (uint64_t)&v191, m + v137);
          uint64_t v143 = v201;
          if (v201)
          {
            uint64_t v144 = 0;
            uint64_t v145 = (_DWORD *)(v202 + 4);
            do
            {
              unint64_t v146 = *(v145 - 1);
              if (v146 < ((unsigned char *)v141[1] - (unsigned char *)*v141) >> 2)
              {
                *((_DWORD *)*v141 + v146) = *v145;
                ++v144;
              }
              v145 += 2;
              --v143;
            }
            while (v143);
          }
          else
          {
            uint64_t v144 = 0;
          }
          LOBYTE(v140[4 * m + 3]) = v144 != ((unsigned char *)v141[1] - (unsigned char *)*v141) >> 2;
        }
      }
      xgboost::predictor::PredictByAllTrees(a4, v180, v136, v187, (void)v135 << 6, v184, (uint64_t *)&v196, 0, v138);
      if (v138)
      {
        for (uint64_t n = 0; n != v138; ++n)
        {
          uint64_t v148 = v196;
          xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](&v203, (uint64_t)&v191, n + v137);
          uint64_t v149 = v203;
          if (v203)
          {
            uint64_t v150 = &v148[4 * n];
            uint64_t v151 = v204;
            do
            {
              unsigned int v153 = *v151;
              v151 += 2;
              uint64_t v152 = v153;
              if (v153 < (unint64_t)((uint64_t)(v150[1] - *v150) >> 2)) {
                *(_DWORD *)(*v150 + 4 * v152) = -1;
              }
              --v149;
            }
            while (v149);
          }
          LOBYTE(v148[4 * n + 3]) = 1;
        }
      }
      uint64_t v135 = (std::mutex *)((char *)v135 + 1);
    }
    while (v135 != v189);
  }
LABEL_145:
  dmlc::OMPException::Rethrow(&v205);
  std::mutex::~mutex(v206);
  std::exception_ptr::~exception_ptr(&v205);
  v154 = __p[0];
  unint64_t v155 = v177;
  uint64_t v156 = v176;
  if (__p[0])
  {
LABEL_146:
    __p[1] = v154;
    operator delete(v154);
  }
LABEL_147:
  v205.__ptr_ = &v196;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v156) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v156);
  }
  if (v155) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v155);
  }
  return 1;
}

void sub_22E96BC30()
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v7);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v6 = (void **)&v3;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x22E96BF88);
}

void sub_22E96BDA0()
{
}

void sub_22E96BDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a35);
  uint64_t v37 = a37;
  a37 = 0;
  if (v37) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a37, v37);
  }
  if (v39) {
    operator delete(v39);
  }
  uint64_t v43 = (void **)&v40;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v43);
  if (v41)
  {
    unint64_t v42 = v41;
    operator delete(v41);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  JUMPOUT(0x22E96BF88);
}

void sub_22E96BDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E96BDE4);
}

void sub_22E96BE00()
{
}

void sub_22E96BE28()
{
}

void sub_22E96BE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a37);
  if (v37) {
    ((void (*)())std::__shared_weak_count::__release_shared[abi:ne180100])();
  }
  JUMPOUT(0x22E96BFA4);
}

void sub_22E96BE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_22E96BEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E96BEC4);
}

void sub_22E96BEE0()
{
}

void sub_22E96BEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a37);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  JUMPOUT(0x22E96BFA4);
}

void sub_22E96BEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a37);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  JUMPOUT(0x22E96BFA4);
}

void sub_22E96BF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_22E96BF74()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  JUMPOUT(0x22E96BFA4);
}

void sub_22E96BF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_22E96BF9C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E96BFA4);
  }
  __clang_call_terminate(a1);
}

void xgboost::predictor::CPUPredictor::PredictInstance(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, int a5)
{
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  std::vector<xgboost::RegTree::FVec>::resize(v19, 1uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = v19[0];
  std::vector<xgboost::RegTree::FVec::Entry>::resize(v19[0], *(unsigned int *)(*(void *)(a4 + 8) + 4));
  uint64_t v10 = *(void *)(v9 + 8) - *(void *)v9;
  if (v10 >= 1) {
    memset(*(void **)v9, 255, 4 * (((unint64_t)v10 >> 2) - ((unint64_t)v10 > 3)) + 4);
  }
  *(unsigned char *)(v9 + 24) = 1;
  int v11 = *(_DWORD *)(*(void *)(a4 + 8) + 8);
  unint64_t v12 = (v11 * a5);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a4 + 184) - *(void *)(a4 + 176);
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(a4 + 184) - *(void *)(a4 + 176);
  if (v12 > v13 >> 3) {
LABEL_9:
  }
    unint64_t v12 = (unint64_t)v13 >> 3;
  std::vector<float>::resize((uint64_t)a3, (v11 + v11 * *(_DWORD *)(a4 + 44)));
  if (*(_DWORD *)(*(void *)(a4 + 8) + 8))
  {
    unint64_t v14 = 0;
    do
    {
      float v15 = xgboost::predictor::PredValue(a2, (uint64_t *)(a4 + 176), (void *)(a4 + 224), v14, v19[0], 0, v12);
      uint64_t v16 = *(void *)(a4 + 8);
      *(float *)(*a3 + 4 * v14++) = v15 + *(float *)v16;
    }
    while (v14 < *(unsigned int *)(v16 + 8));
  }
  __p[0] = v19;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22E96C128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::string __p = &a14;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void xgboost::predictor::CPUPredictor::PredictLeaf(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  v15[19] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  xgboost::predictor::CPUPredictor::InitThreadTemp(1, v15);
  uint64_t v9 = (void *)(**(uint64_t (***)(uint64_t))a2)(a2);
  if (a5)
  {
    uint64_t v10 = a5;
    uint64_t v11 = *(void *)(a4 + 184) - *(void *)(a4 + 176);
    if (a5 <= (unint64_t)(v11 >> 3))
    {
LABEL_6:
      std::vector<float>::resize(*a3, *v9 * v10);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 72))(&v13, a2);
      unint64_t v12[2] = v13;
      void v12[3] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v12, 0);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a4 + 184) - *(void *)(a4 + 176);
  }
  uint64_t v10 = ((unint64_t)v11 >> 3);
  goto LABEL_6;
}

void sub_22E96C5EC()
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E96C654);
}

void sub_22E96C64C()
{
}

void xgboost::predictor::CPUPredictor::PredictContribution(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(int *)(a4[1] + 4);
  memset(v26, 0, sizeof(v26));
  xgboost::predictor::CPUPredictor::InitThreadTemp(1, v26);
  uint64_t v9 = (void *)(**(uint64_t (***)(uint64_t))a2)(a2);
  if (v5)
  {
    uint64_t v10 = a4[23] - a4[22];
    if (v5 <= (unint64_t)(v10 >> 3))
    {
LABEL_6:
      int v25 = *(_DWORD *)(a4[1] + 8);
      LODWORD(v27.__ptr_) = v25;
      LODWORD(v21) = 0;
      if (v25)
      {
        LODWORD(v27.__ptr_) = 0;
        uint64_t v24 = v17 + 1;
        if (v17 != -1)
        {
          uint64_t v11 = *a3;
          std::vector<float>::resize(v11, v24 * *v9 * *(unsigned int *)(a4[1] + 8));
          uint64_t v12 = *(void *)(v11 + 8) - *(void *)v11;
          if (v12 >= 1) {
            bzero(*(void **)v11, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
          }
          uint64_t v13 = v5;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          int v23 = 0;
          v28.__ptr_ = &v21;
          LOBYTE(v29.__m_.__sig) = 0;
          if (v5)
          {
            uint64_t v14 = (char *)operator new(24 * v5);
            uint64_t v21 = v14;
            int v23 = &v14[24 * v5];
            bzero(v14, 24 * ((24 * (unint64_t)v5 - 24) / 0x18) + 24);
            uint64_t v15 = 0;
            uint64_t v16 = 0;
            uint64_t v22 = &v14[24 * ((24 * v13 - 24) / 0x18uLL) + 24];
            v28.__ptr_ = 0;
            v29.__m_.__uint64_t sig = 850045863;
            memset(v29.__m_.__opaque, 0, sizeof(v29.__m_.__opaque));
            do
            {
              xgboost::predictor::FillNodeMeanValues(*(void *)(a4[22] + v16), &v21[v15]);
              v16 += 8;
              v15 += 24;
            }
            while (8 * v13 != v16);
          }
          else
          {
            v28.__ptr_ = 0;
            v29.__m_.__uint64_t sig = 850045863;
            memset(v29.__m_.__opaque, 0, sizeof(v29.__m_.__opaque));
          }
          dmlc::OMPException::Rethrow(&v28);
          std::mutex::~mutex(&v29);
          std::exception_ptr::~exception_ptr(&v28);
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 72))(&v19, a2);
          v18[2] = v19;
          v18[3] = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v18, 0);
        }
        dmlc::LogCheckFormat<unsigned long,int>();
      }
      dmlc::LogCheckFormat<int,int>();
    }
  }
  else
  {
    uint64_t v10 = a4[23] - a4[22];
  }
  unint64_t v5 = (unint64_t)v10 >> 3;
  goto LABEL_6;
}

void sub_22E96D17C()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 168));
  JUMPOUT(0x22E96D29CLL);
}

void sub_22E96D20C()
{
}

void sub_22E96D214()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 192));
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1) {
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168);
  }
  JUMPOUT(0x22E96D2ACLL);
}

void sub_22E96D224()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 192));
  JUMPOUT(0x22E96D230);
}

void sub_22E96D270()
{
}

void xgboost::predictor::CPUPredictor::PredictInteractionContributions(uint64_t a1, uint64_t (***a2)(void), uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (void *)(**a2)(a2);
  uint64_t v7 = *(unsigned int *)(*(void *)(a4 + 8) + 4);
  std::vector<float>::resize(*a3, (v7 + 1) * *v6 * (v7 + 1) * *(int *)(*(void *)(a4 + 8) + 8));
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E96D618()
{
}

void xgboost::predictor::CPUPredictor::InitThreadTemp(int a1, uint64_t *a2)
{
  if ((int)((unint64_t)(a2[1] - *a2) >> 5) < a1)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v3 = 0u;
    std::vector<xgboost::RegTree::FVec>::resize(a2, a1, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_22E96D6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::RegTree::FVec>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 32 * a2;
      if (v4 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          uint64_t v10 = *(void **)(v8 - 32);
          v8 -= 32;
          uint64_t v9 = v10;
          if (v10)
          {
            *(void *)(v4 - 24) = v9;
            operator delete(v9);
          }
          uint64_t v4 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<xgboost::RegTree::FVec>::__append(a1, v6, a3);
  }
}

void *std::vector<xgboost::RegTree::FVec>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  BOOL result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      uint64_t v16 = 32 * a2;
      uint64_t v17 = v9 + 32 * a2;
      do
      {
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        BOOL result = std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>((void *)v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        *(unsigned char *)(v9 + 24) = *(unsigned char *)(a3 + 24);
        v9 += 32;
        v16 -= 32;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 5);
    if (v11 >> 59) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 5;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 4 > v11) {
      unint64_t v11 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    uint64_t v22 = result;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>>((uint64_t)result, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v18 = v15;
    uint64_t v19 = &v15[32 * v12];
    uint64_t v20 = v19;
    uint64_t v21 = &v15[32 * v14];
    std::__split_buffer<xgboost::RegTree::FVec>::__construct_at_end(&v18, a2, a3);
    std::vector<xgboost::RegTree::FVec>::__swap_out_circular_buffer(a1, &v18);
    return (void *)std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer((uint64_t)&v18);
  }
  return result;
}

void sub_22E96D890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<xgboost::RegTree::FVec>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  long long v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = 32 * a2;
    uint64_t v7 = v4 + 32 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      BOOL result = std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>((void *)v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      *(unsigned char *)(v4 + 24) = *(unsigned char *)(a3 + 24);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    uint64_t v4 = v7;
  }
  v3[2] = v4;
  return result;
}

void sub_22E96D92C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::RegTree::FVec>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost::RegTree::FVec::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E96DA0C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::RegTree::FVec::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    long long v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<xgboost::RegTree::FVec>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void *xgboost::predictor::FVecFill<xgboost::predictor::SparsePageView<8ul>>(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  if (result)
  {
    long long v8 = result;
    uint64_t v9 = 0;
    unint64_t v10 = a3;
    do
    {
      uint64_t v11 = *a5;
      uint64_t v12 = *a5 + 32 * (void)v9;
      if (*(void *)(v12 + 8) == *(void *)v12)
      {
        std::vector<xgboost::RegTree::FVec::Entry>::resize(*a5 + 32 * (void)v9, v10);
        uint64_t result = *(void **)v12;
        uint64_t v13 = *(void *)(v12 + 8) - *(void *)v12;
        if (v13 >= 1) {
          uint64_t result = memset(result, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
        }
        *(unsigned char *)(v11 + 32 * (void)v9 + 24) = 1;
      }
      long long v14 = (uint64_t *)(*(void *)(a4 + 16) + 8 * ((void)v9 + a2));
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      uint64_t v17 = v15 - *v14;
      uint64_t v18 = *(void *)(a4 + 32);
      if (v17) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19) {
        std::terminate();
      }
      if (v15 == v16)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_DWORD *)(v18 + 8 * v16 + 4);
        do
        {
          unint64_t v22 = *(v21 - 1);
          if (v22 < (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2)
          {
            *(_DWORD *)(*(void *)v12 + 4 * v22) = *v21;
            ++v20;
          }
          v21 += 2;
          --v17;
        }
        while (v17);
      }
      *(unsigned char *)(v11 + 32 * (void)v9 + 24) = v20 != (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2;
      uint64_t v9 = (char *)v9 + 1;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t xgboost::predictor::FVecDrop<xgboost::predictor::SparsePageView<8ul>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (result)
  {
    for (uint64_t i = 0; i != result; ++i)
    {
      uint64_t v5 = (uint64_t *)(*(void *)(a3 + 16) + 8 * (i + a2));
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      uint64_t v8 = v6 - *v5;
      uint64_t v9 = *(void *)(a3 + 32);
      if (v8) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        std::terminate();
      }
      uint64_t v11 = *a4;
      if (v6 != v7)
      {
        uint64_t v12 = (void *)(v11 + 32 * i);
        uint64_t v13 = (unsigned int *)(v9 + 8 * v7);
        do
        {
          unsigned int v15 = *v13;
          v13 += 2;
          uint64_t v14 = v15;
          if (v15 < (unint64_t)((uint64_t)(v12[1] - *v12) >> 2)) {
            *(_DWORD *)(*v12 + 4 * v14) = -1;
          }
          --v8;
        }
        while (v8);
      }
      *(unsigned char *)(v11 + 32 * i + 24) = 1;
    }
  }
  return result;
}

void std::vector<xgboost::RegTree::FVec::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<xgboost::RegTree::FVec::Entry>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::RegTree::FVec::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 2);
    if (v9 >> 62) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 1 > v9) {
      unint64_t v9 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v10];
    unsigned int v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    uint64_t v16 = &v14[4 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::RegTree::FVec>::__clear[abi:ne180100]((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<xgboost::RegTree::FVec>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 48);
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 32))();
  uint64_t v8 = v7[2];
  unint64_t v9 = **(void **)(a2 + 32) * v6;
  unint64_t v10 = v9;
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *v7 + 4 * v8 * a3;
    unint64_t v10 = **(void **)(a2 + 32) * v6;
    do
    {
      float v13 = *(float *)(v12 + 4 * v11);
      if (*(float *)(a2 + 8) != v13)
      {
        if (*(void *)(a2 + 16) <= v10) {
          std::terminate();
        }
        uint64_t v14 = *(void *)(a2 + 24) + 8 * v10;
        *(_DWORD *)uint64_t v14 = v11;
        *(float *)(v14 + 4) = v13;
        ++v10;
      }
      ++v11;
    }
    while (v8 != v11);
  }
  uint64_t result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(v19, (void *)(a2 + 16), v9, v10 - v9);
  uint64_t v16 = *(uint64_t **)(a2 + 32);
  if (*v16 == 7) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *v16 + 1;
  }
  *uint64_t v16 = v17;
  unint64_t v18 = v19[1];
  *a1 = v19[0];
  a1[1] = v18;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 56);
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 32))();
  uint64_t v8 = (uint64_t *)(*v7 + 8 * a3);
  uint64_t v9 = *v8;
  unint64_t v10 = **(void **)(a2 + 32) * v6;
  unint64_t v11 = v10;
  uint64_t v12 = v8[1] - *v8;
  if (v12)
  {
    float v13 = (int *)(v7[1] + 4 * v9);
    uint64_t v14 = (float *)(v7[2] + 4 * v9);
    unint64_t v11 = **(void **)(a2 + 32) * v6;
    do
    {
      int v16 = *v13++;
      int v15 = v16;
      float v17 = *v14;
      if (*(float *)(a2 + 8) != *v14)
      {
        if (*(void *)(a2 + 16) <= v11) {
          std::terminate();
        }
        unint64_t v18 = (float *)(*(void *)(a2 + 24) + 8 * v11);
        *(_DWORD *)unint64_t v18 = v15;
        v18[1] = v17;
        ++v11;
      }
      ++v14;
      --v12;
    }
    while (v12);
  }
  uint64_t result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(v23, (void *)(a2 + 16), v10, v11 - v10);
  uint64_t v20 = *(uint64_t **)(a2 + 32);
  if (*v20 == 7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *v20 + 1;
  }
  uint64_t *v20 = v21;
  unint64_t v22 = v23[1];
  *a1 = v23[0];
  a1[1] = v22;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 128);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  long long v10 = *(_OWORD *)(v7 + 16);
  long long v11 = *(_OWORD *)(v7 + 32);
  long long v12 = *(_OWORD *)(v7 + 48);
  __int16 v25 = *(_WORD *)(v7 + 64);
  long long v24 = v12;
  long long v23 = v11;
  long long v22 = v10;
  v21[0] = v8;
  v21[1] = v9;
  uint64_t v26 = a3;
  unint64_t v13 = **(void **)(a2 + 32) * v6;
  unint64_t v14 = v13;
  if (*((void *)&v11 + 1))
  {
    unint64_t v15 = 0;
    unint64_t v14 = v13;
    do
    {
      std::exception_ptr v27 = v21;
      uint64_t v28 = v26;
      unint64_t v29 = v15;
      *(float *)&long long v10 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)v21, &v27, *(float *)&v10);
      if (*(float *)(a2 + 8) != *(float *)&v10)
      {
        if (*(void *)(a2 + 16) <= v14) {
          std::terminate();
        }
        int v16 = (_DWORD *)(*(void *)(a2 + 24) + 8 * v14);
        *int v16 = v15;
        v16[1] = v10;
        ++v14;
      }
      ++v15;
    }
    while (v15 < *((void *)&v23 + 1));
  }
  uint64_t result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan((unint64_t *)&v27, (void *)(a2 + 16), v13, v14 - v13);
  unint64_t v18 = *(uint64_t **)(a2 + 32);
  if (*v18 == 7) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *v18 + 1;
  }
  *unint64_t v18 = v19;
  uint64_t v20 = v28;
  *a1 = v27;
  a1[1] = v20;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 360);
  uint64_t v7 = (xgboost::data::CSRArrayAdapterBatch *)(*(uint64_t (**)(void))(**(void **)a2 + 32))();
  xgboost::data::CSRArrayAdapterBatch::GetLine(v7, a3, (uint64_t)v20);
  unint64_t v8 = **(void **)(a2 + 32) * v6;
  unint64_t v9 = v8;
  if (v21)
  {
    unint64_t v10 = 0;
    unint64_t v9 = v8;
    do
    {
      xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v20, v10, (uint64_t)&v17);
      float v11 = v19;
      if (*(float *)(a2 + 8) != v19)
      {
        if (*(void *)(a2 + 16) <= v9) {
          std::terminate();
        }
        long long v12 = (float *)(*(void *)(a2 + 24) + 8 * v9);
        *(_DWORD *)long long v12 = v18;
        v12[1] = v11;
        ++v9;
      }
      ++v10;
    }
    while (v10 < v21);
  }
  uint64_t result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v17, (void *)(a2 + 16), v8, v9 - v8);
  unint64_t v14 = *(uint64_t **)(a2 + 32);
  if (*v14 == 7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *v14 + 1;
  }
  *unint64_t v14 = v15;
  uint64_t v16 = v18;
  *a1 = v17;
  a1[1] = v16;
  return result;
}

uint64_t dmlc::io::LineSplitter::SeekRecordBegin(uint64_t a1, uint64_t (***a2)(void, char *, uint64_t))
{
  uint64_t v3 = 0;
  char v7 = 0;
  while ((**a2)(a2, &v7, 1))
  {
    ++v3;
    if (v7 == 13 || v7 == 10)
    {
      while ((**a2)(a2, &v7, 1))
      {
        if (v7 != 13 && v7 != 10) {
          break;
        }
        ++v3;
      }
      return v3;
    }
  }
  return v3;
}

const char *dmlc::io::LineSplitter::FindLastRecordBegin(dmlc::io::LineSplitter *this, const char *a2, const char *a3)
{
  uint64_t v4 = a2;
  if (a2 == a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/line_split.cc");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: begin != end", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  unint64_t v8 = a3 - 1;
  while (v8 != v4)
  {
    int v10 = *(unsigned __int8 *)v8--;
    int v9 = v10;
    if (v10 == 13 || v9 == 10) {
      return v8 + 2;
    }
  }
  return v4;
}

void sub_22E96E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL dmlc::io::LineSplitter::ExtractNextRecord(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (unsigned __int8 *)*a3;
  uint64_t v4 = (unsigned __int8 *)a3[1];
  if ((unsigned __int8 *)*a3 != v4)
  {
    uint64_t v5 = (unsigned __int8 *)*a3;
    while (1)
    {
      int v6 = *v5;
      if (v6 == 10 || v6 == 13) {
        break;
      }
      if (++v5 == v4)
      {
        uint64_t v5 = (unsigned __int8 *)a3[1];
        break;
      }
    }
    while (v5 != v4)
    {
      int v8 = *v5;
      if (v8 != 13 && v8 != 10)
      {
        int v10 = v5 - 1;
        goto LABEL_17;
      }
      ++v5;
    }
    int v10 = (unsigned __int8 *)a3[1];
    uint64_t v5 = v10;
LABEL_17:
    *int v10 = 0;
    float v11 = &v5[-*a3];
    *a2 = *a3;
    a2[1] = v11;
    *a3 = v5;
  }
  return v3 != v4;
}

uint64_t dmlc::io::InputSplitBase::NextRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 112;
  do
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, v4);
  while ((v5 & 1) == 0 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v4) & 1) != 0);
  return v5;
}

BOOL dmlc::io::InputSplitBase::NextChunk(void *a1, void *a2)
{
  uint64_t v4 = a1 + 14;
  while (1)
  {
    uint64_t v5 = a1[14];
    uint64_t v6 = a1[15];
    if (v5 != v6) {
      break;
    }
    if (((*(uint64_t (**)(void *, void *))(*a1 + 96))(a1, v4) & 1) == 0) {
      return v5 != v6;
    }
  }
  *a2 = v5;
  a2[1] = v6 - v5;
  *uint64_t v4 = v6;
  return v5 != v6;
}

uint64_t dmlc::InputSplit::NextBatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void dmlc::io::LineSplitter::~LineSplitter(dmlc::io::LineSplitter *this)
{
  dmlc::io::InputSplitBase::~InputSplitBase(this);

  JUMPOUT(0x230FA80D0);
}

void sub_22E96E844(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B3C40F1CB0773);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LineSplitter::IsTextParser(dmlc::io::LineSplitter *this)
{
  return 1;
}

uint64_t dmlc::io::InputSplitBase::NextChunkEx(dmlc::io::InputSplitBase *this, dmlc::io::InputSplitBase::Chunk *a2)
{
  return dmlc::io::InputSplitBase::Chunk::Load(a2, this, *((void *)this + 19));
}

uint64_t dmlc::io::InputSplitBase::NextBatchEx(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t xgboost::Metric::Create(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = xgboost::CreateMetricImpl<xgboost::MetricReg>(a1);
  if (!v4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/metric.cc");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown metric function ", 24);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  }
  *(void *)(v4 + 8) = a2;
  return v4;
}

void sub_22E96E944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::CreateMetricImpl<xgboost::MetricReg>(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    std::string __str = *(std::string *)a1;
LABEL_4:
    std::string v19 = *(std::string *)a1;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_5:
  std::string::size_type v2 = std::string::find(&__str, 64, 0);
  if (v2 == -1)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_36;
      }
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_36;
      }
      p_str = &__str;
    }
    if (p_str->__r_.__value_.__s.__data_[size - 1] == 45)
    {
      std::string::basic_string(&v18, &__str, 0, size - 1, (std::allocator<char> *)&__p);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      std::string v19 = v18;
      char v12 = "-";
LABEL_37:
      dmlc::Registry<xgboost::MetricReg>::Get();
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v13 = &v19;
      }
      else {
        char v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v13);
      dmlc::Registry<xgboost::MetricReg>::Get();
      unint64_t v14 = std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>((const void **)&v18.__r_.__value_.__l.__data_);
      if (v14 == &qword_26AD71C50) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v14[7];
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (v15) {
          goto LABEL_45;
        }
      }
      else if (v15)
      {
LABEL_45:
        uint64_t v11 = std::function<xgboost::Metric * ()(char const*)>::operator()(*(void *)(v15 + 96), (uint64_t)v12);
        goto LABEL_48;
      }
      uint64_t v11 = 0;
      goto LABEL_48;
    }
LABEL_36:
    std::string::operator=(&v19, &__str);
    char v12 = 0;
    goto LABEL_37;
  }
  std::string::size_type v3 = v2;
  std::string::basic_string(&v18, &__str, 0, v2, (std::allocator<char> *)&__p);
  dmlc::Registry<xgboost::MetricReg>::Get();
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v18;
  }
  else {
    uint64_t v4 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v4);
  dmlc::Registry<xgboost::MetricReg>::Get();
  uint64_t v5 = std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>((const void **)&__p.__r_.__value_.__l.__data_);
  if (v5 == &qword_26AD71C50) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5[7];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_17:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&__p, &__str, v3 + 1, v9, (std::allocator<char> *)&v21);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = std::function<xgboost::Metric * ()(char const*)>::operator()(*(void *)(v6 + 96), (uint64_t)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_27;
    }
  }
  else if (v6)
  {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
LABEL_27:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_22E96EC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::GPUMetric::CreateGPUMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = xgboost::CreateMetricImpl<xgboost::MetricGPUReg>(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    *(void *)(v4 + 8) = a2;
  }
  else if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/metric.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 60, 1);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Cannot find a GPU metric builder for metric ", 44);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)". Resorting to the CPU builder", 30);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v5;
}

void sub_22E96ED5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::CreateMetricImpl<xgboost::MetricGPUReg>(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    std::string __str = *(std::string *)a1;
LABEL_4:
    std::string v19 = *(std::string *)a1;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_5:
  std::string::size_type v2 = std::string::find(&__str, 64, 0);
  if (v2 == -1)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_36;
      }
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_36;
      }
      p_str = &__str;
    }
    if (p_str->__r_.__value_.__s.__data_[size - 1] == 45)
    {
      std::string::basic_string(&v18, &__str, 0, size - 1, (std::allocator<char> *)&__p);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      std::string v19 = v18;
      char v12 = "-";
LABEL_37:
      dmlc::Registry<xgboost::MetricGPUReg>::Get();
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v13 = &v19;
      }
      else {
        char v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v13);
      dmlc::Registry<xgboost::MetricGPUReg>::Get();
      unint64_t v14 = std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>((const void **)&v18.__r_.__value_.__l.__data_);
      if (v14 == &qword_26AD71CD8) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v14[7];
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (v15) {
          goto LABEL_45;
        }
      }
      else if (v15)
      {
LABEL_45:
        uint64_t v11 = std::function<xgboost::Metric * ()(char const*)>::operator()(*(void *)(v15 + 96), (uint64_t)v12);
        goto LABEL_48;
      }
      uint64_t v11 = 0;
      goto LABEL_48;
    }
LABEL_36:
    std::string::operator=(&v19, &__str);
    char v12 = 0;
    goto LABEL_37;
  }
  std::string::size_type v3 = v2;
  std::string::basic_string(&v18, &__str, 0, v2, (std::allocator<char> *)&__p);
  dmlc::Registry<xgboost::MetricGPUReg>::Get();
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v18;
  }
  else {
    uint64_t v4 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v4);
  dmlc::Registry<xgboost::MetricGPUReg>::Get();
  uint64_t v5 = std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>((const void **)&__p.__r_.__value_.__l.__data_);
  if (v5 == &qword_26AD71CD8) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5[7];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_17:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&__p, &__str, v3 + 1, v9, (std::allocator<char> *)&v21);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = std::function<xgboost::Metric * ()(char const*)>::operator()(*(void *)(v6 + 96), (uint64_t)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_27;
    }
  }
  else if (v6)
  {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
LABEL_27:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_22E96F02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Registry<xgboost::MetricReg>::~Registry(uint64_t a1)
{
  std::string::size_type v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        std::string::size_type v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        std::string::size_type v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

long long *dmlc::Registry<xgboost::MetricGPUReg>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71C10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71C10))
  {
    qword_26AD71CD8 = 0;
    xmmword_26AD71CB0 = 0u;
    unk_26AD71CC0 = 0u;
    xmmword_26AD71CA0 = 0u;
    qword_26AD71CD0 = (uint64_t)&qword_26AD71CD8;
    qword_26AD71CE0 = 0;
    unk_26AD71CE8 = 850045863;
    xmmword_26AD71CF0 = 0u;
    unk_26AD71D00 = 0u;
    xmmword_26AD71D10 = 0u;
    qword_26AD71D20 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::MetricGPUReg>::~Registry, &xmmword_26AD71CA0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71C10);
  }
  return &xmmword_26AD71CA0;
}

uint64_t dmlc::Registry<xgboost::MetricGPUReg>::~Registry(uint64_t a1)
{
  std::string::size_type v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        std::string::size_type v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        std::string::size_type v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t std::function<xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>(const void **a1)
{
  uint64_t v1 = qword_26AD71C50;
  if (!qword_26AD71C50) {
    return &qword_26AD71C50;
  }
  uint64_t v3 = &qword_26AD71C50;
  do
  {
    BOOL v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71C58, (const void **)(v1 + 32), a1);
    uint64_t v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      uint64_t v5 = (uint64_t *)v1;
      uint64_t v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_26AD71C50
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71C58, a1, (const void **)v3 + 4))
  {
    return &qword_26AD71C50;
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>(const void **a1)
{
  uint64_t v1 = qword_26AD71CD8;
  if (!qword_26AD71CD8) {
    return &qword_26AD71CD8;
  }
  uint64_t v3 = &qword_26AD71CD8;
  do
  {
    BOOL v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71CE0, (const void **)(v1 + 32), a1);
    uint64_t v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      uint64_t v5 = (uint64_t *)v1;
      uint64_t v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_26AD71CD8
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71CE0, a1, (const void **)v3 + 4))
  {
    return &qword_26AD71CD8;
  }
  return v3;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_refresh__(xgboost::tree *this)
{
  return 0;
}

void sub_22E96F5CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 104) = v4;
    operator delete(v4);
  }
  MEMORY[0x230FA80D0](v1, 0x10F3C4086137120);
  _Unwind_Resume(a1);
}

void xgboost::tree::TreeRefresher::~TreeRefresher(void **this)
{
  *this = &unk_26E24A970;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_26E24A970;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::tree::TreeRefresher::LoadConfig(xgboost::tree::TreeRefresher *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  BOOL v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::TreeRefresher *)((char *)this + 16), &v7);
  int v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E96F7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::TreeRefresher::SaveConfig(xgboost::tree::TreeRefresher *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::TreeRefresher *)((char *)this + 16), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E96F888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void xgboost::tree::TreeRefresher::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t xgboost::tree::TreeRefresher::CanModifyTree(xgboost::tree::TreeRefresher *this)
{
  return 1;
}

void xgboost::tree::TreeRefresher::Update(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v52 = a3;
  if (a4[1] != *a4)
  {
    uint64_t v6 = *a2;
    uint64_t v49 = 0;
    unsigned int v50 = 0;
    uint64_t v51 = 0;
    memset(v48, 0, sizeof(v48));
    int v47 = 1;
    long long v57 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::vector<xgboost::RegTree::FVec>::resize(v48, 1uLL, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::vector<std::pair<std::string, std::string>> v7 = v50;
    unint64_t v8 = ((char *)v50 - (char *)v49) / 24;
    if (v50 == v49)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v51 - (uint64_t)v50) >> 3) >= 1 - v8)
      {
        std::string v19 = &v50[3 * (1 - v8)];
        uint64_t v20 = 24 - 24 * v8;
        do
        {
          *std::vector<std::pair<std::string, std::string>> v7 = 0;
          v7[1] = 0;
          v7[2] = 0;
          std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(v7, 0, 0, 0);
          v7 += 3;
          v20 -= 24;
        }
        while (v20);
        unsigned int v50 = v19;
      }
      else
      {
        unint64_t v13 = 0x5555555555555556 * ((v51 - (uint64_t)v49) >> 3);
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v51 - (uint64_t)v49) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        *(void *)&long long v58 = &v51;
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)&v51, v14);
        uint64_t v16 = 24 * v8;
        __p[0] = v15;
        __p[1] = &v15[24 * v8];
        *(void **)&long long v57 = __p[1];
        *((void *)&v57 + 1) = &v15[24 * v17];
        do
        {
          std::string v18 = &v15[v16];
          *(void *)std::string v18 = 0;
          *((void *)v18 + 1) = 0;
          *((void *)v18 + 2) = 0;
          std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(&v15[v16], 0, 0, 0);
          v16 += 24;
        }
        while (v16 != 24);
        *(void *)&long long v57 = v15 + 24;
        std::vector<std::vector<xgboost::tree::GradStats>>::__swap_out_circular_buffer((uint64_t *)&v49, __p);
        std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)__p);
      }
    }
    else if (v8 >= 2)
    {
      std::string::size_type v9 = v49 + 3;
      if (v50 != v49 + 3)
      {
        uint64_t v10 = v50;
        do
        {
          char v12 = (void *)*(v10 - 3);
          v10 -= 3;
          uint64_t v11 = v12;
          if (v12)
          {
            *(v7 - 2) = v11;
            operator delete(v11);
          }
          std::vector<std::pair<std::string, std::string>> v7 = v10;
        }
        while (v10 != v9);
      }
      unsigned int v50 = v9;
    }
    __p[0] = 0;
    __p[1] = (void *)850045863;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    uint64_t v60 = 0;
    char v21 = *a4;
    long long v22 = a4[1];
    if (*a4 == v22)
    {
      unint64_t v23 = 0;
    }
    else
    {
      LODWORD(v23) = 0;
      do
      {
        uint64_t v24 = *v21++;
        unint64_t v23 = *(int *)(v24 + 12) + (uint64_t)(int)v23;
      }
      while (v21 != v22);
    }
    long long v53 = 0uLL;
    std::vector<xgboost::tree::GradStats>::resize((uint64_t)v49, v23, &v53);
    uint64_t v25 = v49[1] - *v49;
    if (v25 >= 1) {
      bzero((void *)*v49, 16 * (((unint64_t)v25 >> 4) - ((unint64_t)v25 > 0xF)) + 16);
    }
    uint64_t v26 = v48[0];
    std::vector<xgboost::RegTree::FVec::Entry>::resize(v48[0], *(unsigned int *)(**a4 + 24));
    uint64_t v27 = *(void *)(v26 + 8) - *(void *)v26;
    if (v27 >= 1) {
      memset(*(void **)v26, 255, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
    }
    *(unsigned char *)(v26 + 24) = 1;
    dmlc::OMPException::Rethrow((std::exception_ptr *)__p);
    unint64_t v29 = (unsigned char *)*v49;
    uint64_t v28 = (unsigned char *)v49[1];
    int v55 = 0;
    uint64_t v30 = operator new(0x40uLL);
    *uint64_t v30 = &unk_26E24A9E0;
    v30[1] = &v52;
    if (v28 == v29) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v29;
    }
    v30[2] = a1;
    v30[3] = v48;
    v30[4] = a4;
    v30[5] = v6;
    v30[6] = &v49;
    v30[7] = &v47;
    int v55 = v30;
    rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 152), v31, (const char *)0x10, (v28 - v29) >> 4, (void (*)(void *))rabit::InvokeLambda, v54);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v54);
    float v38 = *(float *)(a1 + 20);
    uint64_t v40 = *a4;
    uint64_t v39 = a4[1];
    BOOL v41 = v39 == *a4;
    *(float *)&double v42 = v38 / (float)(unint64_t)(v39 - *a4);
    *(_DWORD *)(a1 + 20) = LODWORD(v42);
    if (!v41)
    {
      int v43 = 0;
      do
      {
        uint64_t v45 = *v40++;
        uint64_t v44 = v45;
        uint64_t v46 = (void *)*v49;
        if (v49[1] == *v49) {
          uint64_t v46 = 0;
        }
        xgboost::tree::TreeRefresher::Refresh(a1, (uint64_t)v46 + 16 * v43, 0, v44, v42, v32, v33, v34, v35, v36, v37);
        v43 += *(_DWORD *)(v44 + 12);
      }
      while (v40 != v39);
    }
    *(float *)(a1 + 20) = v38;
    std::mutex::~mutex((std::mutex *)&__p[1]);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__p);
    __p[0] = v48;
    std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v49;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_22E96FD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::exception_ptr a25,uint64_t a26)
{
  a18.__ptr_ = &a11;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a11 = &a14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

const char *xgboost::tree::TreeRefresher::Name(xgboost::tree::TreeRefresher *this)
{
  return "refresh";
}

float64x2_t rabit::ReducerSafeImpl<xgboost::tree::GradStats,&xgboost::tree::GradStats::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float64x2_t v4 = *a1++;
      float64x2_t result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t xgboost::tree::TreeRefresher::Refresh(uint64_t result, uint64_t a2, int a3, uint64_t a4, double a5, int8x16_t a6, double a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11)
{
  uint64_t v14 = result;
  v15.f64[0] = NAN;
  v15.f64[1] = NAN;
  int8x16_t v79 = (int8x16_t)vnegq_f64(v15);
  while (1)
  {
    uint64_t v16 = (double *)(a2 + 16 * a3);
    double v17 = *v16;
    double v18 = v16[1];
    double v19 = *(float *)(v14 + 48);
    BOOL v20 = v18 <= 0.0 || v18 < v19;
    a8.i64[0] = 0;
    if (!v20)
    {
      float v21 = *(float *)(v14 + 56);
      double v22 = v21;
      BOOL v20 = v17 < (float)-v21;
      double v23 = v17 + v21;
      if (!v20) {
        double v23 = 0.0;
      }
      BOOL v24 = v17 <= v22;
      double v25 = v17 - v22;
      if (!v24) {
        double v23 = v25;
      }
      *(double *)a8.i64 = -v23 / (v18 + *(float *)(v14 + 52));
      float v26 = *(float *)(v14 + 60);
      if (v26 != 0.0)
      {
        *(double *)a9.i64 = v26;
        if (fabs(*(double *)a8.i64) > *(double *)a9.i64)
        {
          a10.i64[1] = v79.i64[1];
          a8.i64[0] = vbslq_s8(v79, a9, a8).u64[0];
        }
      }
    }
    int v27 = a3;
    float v28 = *(double *)a8.i64;
    unint64_t v29 = (float *)(*(void *)(a4 + 208) + 16 * a3);
    float v30 = v18;
    v29[1] = v30;
    v29[2] = v28;
    uint64_t v31 = *(void *)(a4 + 160);
    uint64_t v32 = v31 + 20 * a3;
    uint64_t v35 = *(int *)(v32 + 4);
    int8x16_t v34 = (void *)(v32 + 4);
    uint64_t v33 = v35;
    if (v35 == -1) {
      break;
    }
    int8x16_t v36 = (double *)(a2 + 16 * v33);
    double v37 = v36[1];
    double v38 = 0.0;
    double v39 = 0.0;
    if (v37 >= v19)
    {
      double v40 = *v36;
      float v41 = *(float *)(v14 + 60);
      if (v41 == 0.0)
      {
        float v42 = *(float *)(v14 + 56);
        if (v42 == 0.0)
        {
          double v43 = v40 * v40;
        }
        else
        {
          double v49 = v42;
          if (v40 <= v42)
          {
            double v51 = (float)-v42;
            double v50 = 0.0;
            if (v40 < v51) {
              double v50 = v40 + v49;
            }
          }
          else
          {
            double v50 = v40 - v49;
          }
          double v43 = v50 * v50;
        }
        double v39 = v43 / (v37 + *(float *)(v14 + 52));
      }
      else
      {
        if (v37 <= 0.0)
        {
          float v44 = *(float *)(v14 + 56);
          double v48 = v37 + *(float *)(v14 + 52);
          a10.i64[0] = 0;
        }
        else
        {
          float v44 = *(float *)(v14 + 56);
          double v45 = v44;
          double v46 = v40 + v44;
          if (v40 >= (float)-v44) {
            double v46 = 0.0;
          }
          BOOL v24 = v40 <= v45;
          double v47 = v40 - v45;
          if (v24) {
            double v47 = v46;
          }
          double v48 = v37 + *(float *)(v14 + 52);
          *(double *)a10.i64 = -v47 / v48;
          *(double *)v11.i64 = v41;
          if (fabs(*(double *)a10.i64) > *(double *)v11.i64) {
            a10 = vbslq_s8(v79, v11, a10);
          }
        }
        double v39 = -(v48 * (*(double *)a10.i64 * *(double *)a10.i64) + (v40 + v40) * *(double *)a10.i64);
        if (v44 != 0.0) {
          double v39 = v39 + v44 * fabs(*(double *)a10.i64);
        }
      }
    }
    uint64_t v52 = (double *)(a2 + 16 * *(int *)(v31 + 20 * v27 + 8));
    double v53 = v52[1];
    if (v53 >= v19)
    {
      double v54 = *v52;
      float v55 = *(float *)(v14 + 60);
      if (v55 == 0.0)
      {
        float v56 = *(float *)(v14 + 56);
        if (v56 == 0.0)
        {
          double v57 = v54 * v54;
        }
        else
        {
          double v63 = v56;
          if (v54 <= v56)
          {
            double v65 = (float)-v56;
            double v64 = 0.0;
            if (v54 < v65) {
              double v64 = v54 + v63;
            }
          }
          else
          {
            double v64 = v54 - v63;
          }
          double v57 = v64 * v64;
        }
        double v38 = v57 / (v53 + *(float *)(v14 + 52));
      }
      else
      {
        if (v53 <= 0.0)
        {
          float v58 = *(float *)(v14 + 56);
          double v62 = v53 + *(float *)(v14 + 52);
          a10.i64[0] = 0;
        }
        else
        {
          float v58 = *(float *)(v14 + 56);
          double v59 = v58;
          double v60 = v54 + v58;
          if (v54 >= (float)-v58) {
            double v60 = 0.0;
          }
          BOOL v24 = v54 <= v59;
          double v61 = v54 - v59;
          if (v24) {
            double v61 = v60;
          }
          double v62 = v53 + *(float *)(v14 + 52);
          *(double *)a10.i64 = -v61 / v62;
          *(double *)v11.i64 = v55;
          if (fabs(*(double *)a10.i64) > *(double *)v11.i64) {
            a10.i64[0] = vbslq_s8(v79, v11, a10).u64[0];
          }
        }
        double v38 = -(v62 * (*(double *)a10.i64 * *(double *)a10.i64) + (v54 + v54) * *(double *)a10.i64);
        if (v58 != 0.0) {
          double v38 = v38 + v58 * fabs(*(double *)a10.i64);
        }
      }
    }
    double v66 = 0.0;
    if (v18 >= v19)
    {
      float v67 = *(float *)(v14 + 60);
      if (v67 == 0.0)
      {
        float v68 = *(float *)(v14 + 56);
        if (v68 == 0.0)
        {
          double v69 = v17 * v17;
        }
        else
        {
          double v75 = v68;
          if (v17 <= v68)
          {
            double v77 = (float)-v68;
            double v76 = 0.0;
            if (v17 < v77) {
              double v76 = v17 + v75;
            }
          }
          else
          {
            double v76 = v17 - v75;
          }
          double v69 = v76 * v76;
        }
        double v66 = v69 / (v18 + *(float *)(v14 + 52));
      }
      else
      {
        if (v18 <= 0.0)
        {
          float v70 = *(float *)(v14 + 56);
          double v74 = v18 + *(float *)(v14 + 52);
          a6.i64[0] = 0;
        }
        else
        {
          float v70 = *(float *)(v14 + 56);
          double v71 = v70;
          double v72 = v17 + v70;
          if (v17 >= (float)-v70) {
            double v72 = 0.0;
          }
          BOOL v24 = v17 <= v71;
          double v73 = v17 - v71;
          if (v24) {
            double v73 = v72;
          }
          double v74 = v18 + *(float *)(v14 + 52);
          *(double *)a6.i64 = -v73 / v74;
          *(double *)a11.i64 = v67;
          if (fabs(*(double *)a6.i64) > *(double *)a11.i64) {
            a6.i64[0] = vbslq_s8(v79, a11, a6).u64[0];
          }
        }
        double v66 = -(v74 * (*(double *)a6.i64 * *(double *)a6.i64) + (v17 + v17) * *(double *)a6.i64);
        if (v70 != 0.0) {
          double v66 = v66 + v70 * fabs(*(double *)a6.i64);
        }
      }
    }
    float v78 = v39 + v38 - v66;
    *unint64_t v29 = v78;
    float64x2_t result = xgboost::tree::TreeRefresher::Refresh(v14, a2);
    a3 = *(_DWORD *)(*(void *)(a4 + 160) + 20 * v27 + 8);
  }
  if (*(unsigned char *)(v14 + 93))
  {
    *(float *)(v31 + 20 * v27 + 16) = *(float *)(v14 + 20) * v28;
    *int8x16_t v34 = -1;
  }
  return result;
}

uint64_t std::vector<std::vector<xgboost::tree::GradStats>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E97041C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<xgboost::tree::GradStats>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<xgboost::tree::GradStats>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::tree::GradStats>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::tree::GradStats>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float64x2_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    }
    else {
      float64x2_t v15 = 0;
    }
    double v18 = &v15[16 * v12];
    double v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    float v21 = v18;
    do
    {
      *(_OWORD *)float v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    double v22 = &v15[16 * v14];
    BOOL v24 = (char *)*a1;
    double v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      double v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t rabit::InvokeLambda(rabit *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

void std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26E24A9E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E24A9E0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  (****(void (*****)(void))(a1 + 8))(**(void **)(a1 + 8));
  (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 8) + 72))(&v3);
  v2[2] = v3;
  uint64_t v2[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v2, 0);
}

void sub_22E970E78()
{
}

void sub_22E970E84()
{
}

void sub_22E970E90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_22E970F18()
{
}

uint64_t std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::target_type()
{
}

void *std::operator>>(void *a1, char **a2)
{
  a2[1] = *a2;
  uint64_t v4 = MEMORY[0x263EF8318];
  while (1)
  {
    int v5 = std::istream::peek();
    unsigned int v6 = v5 << 24;
    __darwin_ct_rune_t v7 = (char)v5;
    if (v5 << 24 < 0)
    {
      std::istream::get();
      goto LABEL_9;
    }
    uint64_t v8 = v4 + 4 * (char)v5;
    int v10 = *(_DWORD *)(v8 + 60);
    uint64_t v9 = (_DWORD *)(v8 + 60);
    if ((v10 & 0x400) != 0)
    {
      unint64_t v11 = (void *)MEMORY[0x230FA7C80](a1, __p);
      if ((*((unsigned char *)v11 + *(void *)(*v11 - 24) + 32) & 5) == 0)
      {
        unint64_t v12 = (unint64_t)a2[2];
        uint64_t v13 = a2[1];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v31 = *a2;
          uint64_t v32 = (v13 - *a2) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v12 - (void)v31;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            int8x16_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v35);
            uint64_t v31 = *a2;
            uint64_t v13 = a2[1];
          }
          else
          {
            int8x16_t v36 = 0;
          }
          double v37 = &v36[4 * v32];
          double v38 = &v36[4 * v35];
          *(_DWORD *)double v37 = __p[0];
          unint64_t v14 = v37 + 4;
          while (v13 != v31)
          {
            int v39 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v37 - 1) = v39;
            v37 -= 4;
          }
          *a2 = v37;
          a2[1] = v14;
          a2[2] = v38;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v13 = __p[0];
          unint64_t v14 = v13 + 4;
        }
        a2[1] = v14;
      }
      return a1;
    }
    std::istream::get();
    if (v6 == 671088640) {
      break;
    }
    if (v6 > 0x7F000000)
    {
LABEL_9:
      if (!__maskrune(v7, 0x4000uLL))
      {
LABEL_10:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
        return a1;
      }
    }
    else if ((*v9 & 0x4000) == 0)
    {
      goto LABEL_10;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  float v42 = 0;
  while (1)
  {
    int v15 = std::istream::peek();
    if ((v15 << 24) <= 0x7F000000) {
      break;
    }
    if (!__maskrune((char)v15, 0x4000uLL)) {
      goto LABEL_20;
    }
LABEL_19:
    std::istream::get();
  }
  if ((*(_DWORD *)(v4 + 4 * (char)v15 + 60) & 0x4000) != 0) {
    goto LABEL_19;
  }
LABEL_20:
  if (std::istream::peek() == 41)
  {
    std::istream::get();
LABEL_22:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
LABEL_24:
    uint64_t v16 = (void *)MEMORY[0x230FA7C80](a1, &v43);
    if ((*((unsigned char *)v16 + *(void *)(*v16 - 24) + 32) & 5) != 0) {
      goto LABEL_57;
    }
    double v17 = (char *)__p[1];
    if (__p[1] >= v42)
    {
      double v19 = (char *)__p[0];
      int64_t v20 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v42 - (char *)__p[0];
      if ((v42 - (char *)__p[0]) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        BOOL v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v23);
        double v19 = (char *)__p[0];
        double v17 = (char *)__p[1];
      }
      else
      {
        BOOL v24 = 0;
      }
      double v25 = &v24[4 * v20];
      *(_DWORD *)double v25 = v43;
      double v18 = v25 + 4;
      while (v17 != v19)
      {
        int v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      __p[0] = v25;
      __p[1] = v18;
      float v42 = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = v43;
      double v18 = v17 + 4;
    }
    __p[1] = v18;
    do
    {
      while (1)
      {
        int v27 = std::istream::get();
        if ((v27 << 24) <= 0x7F000000) {
          break;
        }
        if (!__maskrune((char)v27, 0x4000uLL)) {
          goto LABEL_46;
        }
      }
    }
    while ((*(_DWORD *)(v4 + 4 * (char)v27 + 60) & 0x4000) != 0);
LABEL_46:
    if (v27 << 24 == 1275068416) {
      int v27 = std::istream::get();
    }
    if (v27 << 24 == 738197504)
    {
      while (1)
      {
        int v28 = std::istream::peek();
        int v29 = v28 << 24;
        if ((v28 << 24) <= 0x7F000000)
        {
          if ((*(_DWORD *)(v4 + 4 * (char)v28 + 60) & 0x4000) == 0)
          {
LABEL_54:
            if (v29 == 687865856)
            {
              std::istream::get();
              goto LABEL_57;
            }
            goto LABEL_24;
          }
        }
        else if (!__maskrune((char)v28, 0x4000uLL))
        {
          goto LABEL_54;
        }
        std::istream::get();
      }
    }
    if (v27 << 24 != 687865856)
    {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
      goto LABEL_22;
    }
LABEL_57:
    float v30 = *a2;
    if (*a2)
    {
      a2[1] = v30;
      operator delete(v30);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    a2[2] = v42;
  }
  return a1;
}

void sub_22E971410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::ParseInteractionConstraint()
{
}

void sub_22E971A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, atomic_uint *a19)
{
  if (a19)
  {
    if (atomic_fetch_add_explicit(a19 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a19 + 8))(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_hinge_obj__(xgboost::obj *this)
{
  return 0;
}

void xgboost::obj::HingeObj::~HingeObj(xgboost::obj::HingeObj *this)
{
}

void xgboost::obj::HingeObj::SaveConfig(xgboost::obj::HingeObj *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "binary:hinge");
  unsigned int v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E971D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::HingeObj::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(a3 + 24) + 8) == **(void **)(a3 + 24)) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (((*a2)[1] - **a2) >> 2 != (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  uint64_t v36 = ((*a2)[1] - **a2) >> 2;
  int v10 = *(uint64_t **)(a3 + 72);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v11 - *v10;
  if (v13)
  {
    if (v13 >> 2 != v9) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  }
  v37.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v37);
  if ((*(_DWORD *)(*(void *)(a1 + 8) + 24) & 0x80000000) != 0)
  {
    v37.__ptr_ = 0;
    v38.__m_.__uint64_t sig = 850045863;
    memset(v38.__m_.__opaque, 0, sizeof(v38.__m_.__opaque));
    if (v36)
    {
      uint64_t v17 = *(void *)*a5;
      uint64_t v16 = *(void *)(*a5 + 8);
      if (v17 || !v16)
      {
        uint64_t v18 = **a2;
        uint64_t v19 = (*a2)[1];
        if (v18 || !v19)
        {
          int64_t v20 = *(uint64_t **)(a3 + 24);
          uint64_t v21 = *v20;
          uint64_t v22 = v20[1];
          if (*v20 || !v22)
          {
            unint64_t v23 = *(uint64_t **)(a3 + 72);
            uint64_t v24 = *v23;
            uint64_t v25 = v23[1];
            if (*v23 || !v25)
            {
              unint64_t v26 = 0;
              uint64_t v27 = (v16 - v17) >> 3;
              uint64_t v28 = (v19 - v18) >> 2;
              uint64_t v29 = (v22 - v21) >> 2;
              unint64_t v30 = (v25 - v24) >> 2;
              uint64_t v31 = (float *)(v17 + 4);
              while (v28 != v26)
              {
                if (v11 == v12)
                {
                  float v32 = 1.0;
                }
                else
                {
                  if (v30 <= v26) {
                    break;
                  }
                  float v32 = *(float *)(v24 + 4 * v26);
                }
                if (v29 == v26 || v27 == v26) {
                  break;
                }
                float v33 = *(float *)(v21 + 4 * v26) * 2.0 + -1.0;
                float v34 = 1.1755e-38;
                if ((float)(*(float *)(v18 + 4 * v26) * v33) < 1.0) {
                  float v34 = v32;
                }
                float v35 = -(float)(v33 * v32);
                if ((float)(*(float *)(v18 + 4 * v26) * v33) >= 1.0) {
                  float v35 = 0.0;
                }
                *(v31 - 1) = v35;
                *uint64_t v31 = v34;
                ++v26;
                v31 += 2;
                if (v36 == v26) {
                  goto LABEL_33;
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_33:
    dmlc::OMPException::Rethrow(&v37);
    std::mutex::~mutex(&v38);
    std::exception_ptr::~exception_ptr(&v37);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    int v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
  }
}

void sub_22E972250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::exception_ptr a11)
{
  std::mutex::~mutex(v11);
  std::exception_ptr::~exception_ptr(&a11);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::HingeObj::DefaultEvalMetric(xgboost::obj::HingeObj *this)
{
  return "error";
}

void xgboost::obj::HingeObj::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__uint64_t sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v3 != v2)
  {
    if (v2) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v3 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v3 - v2;
      while (v5)
      {
        if (*v2 <= 0.0) {
          float v6 = 0.0;
        }
        else {
          float v6 = 1.0;
        }
        *v2++ = v6;
        if (!--v5) {
          goto LABEL_13;
        }
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_22E9723CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::HingeObj::Task(xgboost::obj::HingeObj *this)
{
  return 0;
}

uint64_t dmlc::Registry<xgboost::GradientBoosterReg>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  float v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  std::exception_ptr v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t xgboost::GradientBooster::Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  float v6 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_26AD72910, (const void **)a1);
  if (v6 == &qword_26AD72918 || (uint64_t v7 = v6[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbm.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown gbm type ", 17);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const void *)a1;
    }
    else {
      uint64_t v12 = *(const void **)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    uint64_t v7 = 0;
  }
  return std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(v7 + 72, a3, a2);
}

void sub_22E9725B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t xgboost::detail::ToCharsFloatImpl(xgboost::detail *this, float a2, char *a3)
{
  uint64_t v5 = LODWORD(a2) & 0x7FFFFF;
  uint64_t v6 = (LODWORD(a2) >> 23);
  if (v6 == 255 || (v6 | v5) == 0)
  {
    if (v5)
    {
      *((unsigned char *)this + 2) = 78;
      *(_WORD *)this = 24910;
      return 3;
    }
    else
    {
      if ((LODWORD(a2) & 0x80000000) != 0) {
        *(unsigned char *)this = 45;
      }
      int v10 = (char *)this + (LODWORD(a2) >> 31);
      if ((LODWORD(a2) >> 23))
      {
        *(void *)int v10 = 0x7974696E69666E49;
        BOOL v11 = a2 < 0.0;
        unsigned int v12 = 8;
      }
      else
      {
        void v10[2] = 48;
        *(_WORD *)int v10 = 17712;
        BOOL v11 = a2 < 0.0;
        unsigned int v12 = 3;
      }
      if (v11) {
        return v12 + 1;
      }
      else {
        return v12;
      }
    }
  }
  else
  {
    unint64_t v9 = xgboost::detail::PowerBaseComputer::Binary2Decimal(v5 | (v6 << 32));
    return xgboost::detail::RyuPrinter::PrintBase10Float(v9, LODWORD(a2) >> 31, this);
  }
}

unint64_t xgboost::detail::PowerBaseComputer::Binary2Decimal(uint64_t a1)
{
  int v1 = a1 | 0x800000;
  if (!HIDWORD(a1)) {
    int v1 = a1;
  }
  uint64_t v2 = 4294967145;
  if (HIDWORD(a1)) {
    uint64_t v2 = (HIDWORD(a1) - 152);
  }
  BOOL v3 = (v1 & 1) == 0;
  if (a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = HIDWORD(a1) >= 2;
  }
  int v5 = !v4;
  __int16 v8 = 0;
  unsigned int v6 = xgboost::detail::PowerBaseComputer::ToDecimalBase((v1 & 1) == 0, v5, v2 | ((unint64_t)(~v5 + 4 * v1) << 32), (4 * v1) | ((unint64_t)(((4 * v1) | 2u) >> 1) << 33), v9, (BOOL *)&v8 + 1, (char *)&v8);
  return xgboost::detail::PowerBaseComputer::ShortestRepresentation(HIBYTE(v8), v8, v6, v3, v9[0], v9[1]);
}

uint64_t xgboost::detail::RyuPrinter::PrintBase10Float(uint64_t a1, int a2, unsigned char *a3)
{
  unsigned int v3 = a1;
  if (a2)
  {
    *a3 = 45;
    unsigned int v4 = 1;
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (a1 > 0x3B9AC9FF) {
    __assert_rtn("OutputLength", "charconv.cc", 548, "v < Tens(9)");
  }
  int v5 = &a3[v4];
  if (a1 >= 0x5F5E100)
  {
    unsigned int v6 = 9;
    goto LABEL_20;
  }
  if (a1 > 0x98967F)
  {
    unsigned int v6 = 8;
    goto LABEL_20;
  }
  if (a1 > 0xF423F)
  {
    unsigned int v6 = 7;
    goto LABEL_20;
  }
  if (a1 >> 5 > 0xC34)
  {
    unsigned int v6 = 6;
    goto LABEL_20;
  }
  if (a1 >> 4 > 0x270)
  {
    unsigned int v6 = 5;
LABEL_20:
    unsigned int v7 = 0;
    __int16 v8 = &v5[v6];
    do
    {
      unsigned int v9 = v3;
      v3 /= 0x2710u;
      unsigned __int16 v10 = v9 - 10000 * v3;
      BOOL v11 = &v8[-v7];
      *(_WORD *)(v11 - 1) = *((_WORD *)&xgboost::detail::kItoaLut + v10 % 0x64u);
      *(_WORD *)(v11 - 3) = *((_WORD *)&xgboost::detail::kItoaLut + v10 / 0x64u);
      v7 += 4;
    }
    while (v9 >= 0x5F5E100);
    goto LABEL_22;
  }
  if (a1 > 0x3E7)
  {
    unsigned int v6 = 4;
  }
  else if (a1 > 0x63)
  {
    unsigned int v6 = 3;
  }
  else if (a1 < 0xA)
  {
    unsigned int v6 = 1;
  }
  else
  {
    unsigned int v6 = 2;
  }
  unsigned int v7 = 0;
  __int16 v8 = &v5[v6];
LABEL_22:
  if (v3 >= 0x64)
  {
    *(_WORD *)&v8[~(unint64_t)v7] = *((_WORD *)&xgboost::detail::kItoaLut + (unsigned __int16)v3 % 0x64u);
    v7 |= 2u;
    unsigned int v3 = (unsigned __int16)v3 / 0x64u;
  }
  if (v3 < 0xA)
  {
    char v13 = v3 + 48;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    a3[v6 + v4 - v7] = *((unsigned char *)&xgboost::detail::kItoaLut + (v12 & 0xFFFFFFFE) + 1);
    char v13 = *((unsigned char *)&xgboost::detail::kItoaLut + v12);
  }
  *int v5 = v13;
  if (v6 < 2)
  {
    unsigned int v14 = 1;
  }
  else
  {
    v5[1] = 46;
    unsigned int v14 = v6 + 1;
  }
  unint64_t v15 = v14 + (unint64_t)v4;
  uint64_t v16 = v15 + 1;
  a3[v15] = 69;
  unsigned int v17 = v6 + HIDWORD(a1);
  if (((int)(v6 + HIDWORD(a1)) < 0) ^ __OFADD__(v6, HIDWORD(a1)) | (v6 + HIDWORD(a1) == 0))
  {
    a3[v16] = 45;
    LODWORD(v16) = v15 + 2;
    unsigned int v18 = 1 - v17;
  }
  else
  {
    unsigned int v18 = v17 - 1;
  }
  if (v18 < 0xA)
  {
    uint64_t result = (v16 + 1);
    a3[(int)v16] = v18 + 48;
  }
  else
  {
    *(_WORD *)&a3[(int)v16] = *((_WORD *)&xgboost::detail::kItoaLut + v18);
    return (v16 + 2);
  }
  return result;
}

unsigned char *xgboost::detail::ItoaUnsignedImpl(unsigned char *this, char *a2, unint64_t a3)
{
  if (a3 >= 0x64)
  {
    unsigned int v4 = a2 - 1;
    do
    {
      unint64_t v3 = a3 / 0x64;
      int v5 = (char *)&xgboost::detail::kItoaLut + 2 * (a3 % 0x64);
      this[v4] = v5[1];
      this[v4 - 1] = *v5;
      v4 -= 2;
      unint64_t v6 = a3 >> 4;
      a3 /= 0x64uLL;
    }
    while (v6 > 0x270);
  }
  else
  {
    unint64_t v3 = a3;
  }
  if (v3 < 0xA)
  {
    char v8 = v3 + 48;
  }
  else
  {
    unsigned int v7 = (char *)&xgboost::detail::kItoaLut + 2 * v3;
    char v8 = *v7;
    this[1] = v7[1];
  }
  *this = v8;
  return this;
}

char *xgboost::detail::ToCharsUnsignedImpl(xgboost::detail *this, xgboost::detail *a2, char *a3)
{
  unint64_t v3 = (char *)a2;
  if ((unint64_t)a3 >= 0xA)
  {
    uint64_t v5 = 4;
    unint64_t v6 = (unint64_t)a3;
    while (1)
    {
      if (v6 < 0x64)
      {
        uint64_t v5 = (v5 - 2);
        goto LABEL_11;
      }
      if (v6 < 0x3E8) {
        break;
      }
      if (v6 >> 4 < 0x271) {
        goto LABEL_11;
      }
      unint64_t v7 = v6 >> 5;
      v6 /= 0x2710uLL;
      uint64_t v5 = (v5 + 4);
      if (v7 <= 0xC34)
      {
        uint64_t v5 = (v5 - 3);
        goto LABEL_11;
      }
    }
    uint64_t v5 = (v5 - 1);
  }
  else
  {
    uint64_t v5 = 1;
  }
LABEL_11:
  if (a2 != this)
  {
    xgboost::detail::ItoaUnsignedImpl(this, (char *)v5, (unint64_t)a3);
    return (char *)this + v5;
  }
  return v3;
}

unsigned char *xgboost::detail::FromCharFloatImpl(unsigned char *this, const char *a2, float *a3, float *a4)
{
  if (!a2) {
    return this;
  }
  int v5 = *this;
  int v6 = v5 == 45;
  if (v6 >= (int)a2)
  {
    int v8 = 0;
    unsigned int v7 = 0;
    BOOL v15 = 0;
    int v10 = (int)a2;
    int v11 = (int)a2;
    goto LABEL_14;
  }
  unsigned int v7 = 0;
  int v8 = 0;
  uint64_t v9 = v5 == 45;
  int v10 = (int)a2;
  int v11 = (int)a2;
  while (1)
  {
    int v12 = (char)this[v9];
    if (v12 == 46)
    {
      if (v10 != a2) {
        goto LABEL_38;
      }
      int v10 = v9;
      goto LABEL_11;
    }
    if ((v12 - 58) < 0xF6u) {
      break;
    }
    if (v8 > 8)
    {
LABEL_38:
      this += v9;
      return this;
    }
    int v13 = v12 + 10 * v7;
    unsigned int v7 = v13 - 48;
    if (v13 != 48) {
      ++v8;
    }
LABEL_11:
    if (a2 == ++v9)
    {
      int v14 = 0;
      goto LABEL_20;
    }
  }
  if ((this[v9] | 0x20) != 0x65)
  {
    BOOL v15 = 0;
    int v11 = (int)a2;
    int v6 = v9;
    goto LABEL_14;
  }
  int v6 = v9 + 1;
  if ((int)v9 + 1 < (int)a2 && ((int v25 = this[v6], v25 == 43) || v25 == 45))
  {
    BOOL v15 = v25 == 45;
    int v6 = v9 + 2;
  }
  else
  {
    BOOL v15 = 0;
  }
  int v26 = a2 - v6;
  if ((int)a2 <= v6)
  {
    int v11 = v9;
LABEL_14:
    if (v6 < (int)a2)
    {
      this += v6;
      return this;
    }
    int v14 = 0;
LABEL_18:
    if (v15) {
      int v14 = -v14;
    }
LABEL_20:
    if (v10 >= v11) {
      int v16 = 0;
    }
    else {
      int v16 = v11 + ~v10;
    }
    if (!v7 || (unsigned int v17 = (xgboost::detail::RyuPowLogUtils *)(v14 - v16), (int)v17 + v8 <= -46))
    {
      this = 0;
      float v18 = -0.0;
      if (v5 != 45) {
        float v18 = 0.0;
      }
LABEL_68:
      *a3 = v18;
      return this;
    }
    if ((int)v17 + v8 >= 40)
    {
LABEL_66:
      this = 0;
      float v18 = INFINITY;
      if (v5 == 45) {
        float v18 = -INFINITY;
      }
      goto LABEL_68;
    }
    unsigned int v19 = __clz(v7);
    if ((v17 & 0x80000000) != 0)
    {
      unsigned int v28 = v16 - v14;
      signed int v20 = v14
          - v16
          - v19
          + ~xgboost::detail::RyuPowLogUtils::Log2Pow5((xgboost::detail::RyuPowLogUtils *)(v16 - v14))
          + 7;
      char v29 = xgboost::detail::RyuPowLogUtils::Log2Pow5((xgboost::detail::RyuPowLogUtils *)-(int)v17);
      int v30 = v20 - v17;
      unint64_t v23 = (((xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v28] * (unint64_t)v7) >> 32)
           + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v28]) * (unint64_t)v7) >> (v29 + v20 - v17 + 27);
      if (v20 >= (int)v17)
      {
        char v24 = 0;
        if (v30 > 31 || __clz(__rbit32(v7)) < v30)
        {
LABEL_65:
          unsigned int v33 = __clz(v23);
          unsigned int v34 = (v20 - v33 + 158) & ~((int)(v20 - v33 + 158) >> 31);
          if (v34 < 0xFF)
          {
            if (v34 <= 1) {
              int v35 = 1;
            }
            else {
              int v35 = v34;
            }
            int v36 = v35 - v20;
            char v37 = v35 - v20 + 106;
            if (v36 - 150 < 0) {
              __assert_rtn("FromCharFloatImpl", "charconv.cc", 914, "shift >= 0");
            }
            char v38 = v36 + 105;
            unsigned int v39 = v23 >> v38;
            char v40 = v24 ^ 1;
            if ((v23 & ~(-1 << v38)) != 0) {
              char v40 = 1;
            }
            unsigned int v41 = v23 >> v37;
            int v42 = v41 & 1;
            if (v40) {
              int v42 = 1;
            }
            if ((v39 & 1) == 0) {
              int v42 = 0;
            }
            if (v42 + v41 >= 0x1000001) {
              __assert_rtn("FromCharFloatImpl", "charconv.cc", 929, "f_m2 <= (1u << (IEEE754::kFloatMantissaBits + 1))");
            }
            this = 0;
            int v43 = (v42 + v41) & 0x7FFFFF;
            if (v43) {
              int v42 = 0;
            }
            *(_DWORD *)a3 = ((v5 == 45) << 31) | ((v42 + v34) << 23) | v43;
            return this;
          }
          goto LABEL_66;
        }
      }
      if (-858993459 * v7 <= 0x33333333)
      {
        unsigned int v31 = 0;
        do
        {
          v7 /= 5u;
          ++v31;
        }
        while (-858993459 * v7 < 0x33333334);
      }
      else
      {
        unsigned int v31 = 0;
      }
      BOOL v32 = v31 >= v28;
    }
    else
    {
      signed int v20 = v17 - v19 + xgboost::detail::RyuPowLogUtils::Log2Pow5(v17) + 7;
      int v21 = v20 - v17;
      unsigned int v22 = v20 - v17 + ~xgboost::detail::RyuPowLogUtils::Log2Pow5(v17);
      if ((int)(v22 + 61) < 0) {
        __assert_rtn("FromCharFloatImpl", "charconv.cc", 857, "j >= 0");
      }
      unint64_t v23 = (((xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v17] * (unint64_t)v7) >> 32)
           + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v17])
           * (unint64_t)v7) >> (v22 + 29);
      if (v20 < (int)v17)
      {
        char v24 = 1;
        goto LABEL_65;
      }
      if (v21 > 31)
      {
        char v24 = 0;
        goto LABEL_65;
      }
      BOOL v32 = __clz(__rbit32(v7)) >= v21;
    }
    char v24 = v32;
    goto LABEL_65;
  }
  int v14 = 0;
  unsigned int v27 = 0;
  this += v6;
  while ((*this - 58) >= 0xF6u && v27 <= 3)
  {
    int v14 = (char)*this + 10 * v14 - 48;
    if (v14) {
      ++v27;
    }
    ++this;
    if (!--v26)
    {
      int v11 = v9;
      goto LABEL_18;
    }
  }
  return this;
}

uint64_t xgboost::detail::RyuPowLogUtils::Log2Pow5(xgboost::detail::RyuPowLogUtils *this)
{
  if ((this & 0x80000000) != 0) {
    __assert_rtn("Log2Pow5", "charconv.cc", 237, "e >= 0");
  }
  if (this >= 0xDC9) {
    __assert_rtn("Log2Pow5", "charconv.cc", 238, "e <= 3528");
  }
  return (1217359 * this) >> 19;
}

uint64_t xgboost::detail::PowerBaseComputer::ToDecimalBase(int a1, int a2, unint64_t a3, unint64_t a4, _DWORD *a5, BOOL *a6, char *a7)
{
  unint64_t v7 = HIDWORD(a3);
  unint64_t v8 = HIDWORD(a4);
  if ((a3 & 0x80000000) != 0)
  {
    uint64_t v19 = -(int)a3;
    if (v19 > 0x8000) {
      __assert_rtn("Log10Pow5", "charconv.cc", 311, "expoent <= 1 << 15");
    }
    unint64_t v20 = (unint64_t)(0xB2EFB2BD8218 * v19) >> 48;
    int v21 = v19 - v20;
    uint64_t v22 = xgboost::detail::RyuPowLogUtils::kFloatPow5Split[(v19 - v20)];
    unint64_t v23 = (((v22 * (unint64_t)HIDWORD(a4)) >> 32) + HIDWORD(v22) * (unint64_t)HIDWORD(a4)) >> (v20 + 28 - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    a5[2] = (((v22 * (unint64_t)a4) >> 32)
           + HIDWORD(v22) * (unint64_t)a4) >> (v20
                                                                  + 28
                                                                  - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    a5[3] = v23;
    unint64_t v24 = (((v22 * (unint64_t)HIDWORD(a3)) >> 32) + HIDWORD(v22) * (unint64_t)HIDWORD(a3)) >> (v20 + 28 - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    *a5 = v20 + a3;
    a5[1] = v24;
    if (v20)
    {
      if (((int)v23 - 1) / 0xAu <= v24 / 0xA)
      {
        uint64_t v29 = xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v21 + 1];
        unsigned int v18 = ((((v29 * (unint64_t)a4) >> 32)
                            + HIDWORD(v29) * (unint64_t)a4) >> (v20
                                                                                   + 28
                                                                                   + ~((unint64_t)(0x949A784BCD1BLL * (v21 + 1)) >> 46)))
            % 0xA;
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      if (v20 > 1)
      {
        if (v20 > 0x1E) {
          return v18;
        }
        BOOL v27 = __clz(__rbit32(a4)) >= (int)v20 - 1;
        goto LABEL_30;
      }
    }
    else
    {
      LOBYTE(v18) = 0;
    }
    *a7 = 1;
    if (a1)
    {
      BOOL v30 = a2 == 1;
LABEL_37:
      *a6 = v30;
      return v18;
    }
    int v31 = v23 - 1;
LABEL_41:
    a5[3] = v31;
    return v18;
  }
  if (a3 > 0x8000) {
    __assert_rtn("Log10Pow2", "charconv.cc", 302, "e <= 1 << 15");
  }
  unint64_t v9 = (0x9A209A84FBCFLL * (unint64_t)a3) >> 49;
  char v10 = v9 - a3;
  unint64_t v11 = xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v9];
  unint64_t v12 = HIDWORD(v11);
  unsigned int v13 = v11;
  char v14 = v10 + ((0x949A784BCD1BLL * v9) >> 46) + 27;
  unint64_t v15 = (((v11 * (unint64_t)v7) >> 32)
       + HIDWORD(v11) * (unint64_t)v7) >> v14;
  *a5 = v9;
  a5[1] = v15;
  unint64_t v16 = (((v11 * (unint64_t)a4) >> 32)
       + HIDWORD(v11) * (unint64_t)a4) >> v14;
  unint64_t v17 = (((v13 * (unint64_t)HIDWORD(a4)) >> 32) + v12 * (unint64_t)HIDWORD(a4)) >> v14;
  a5[2] = v16;
  a5[3] = v17;
  if (!v9)
  {
    LOBYTE(v18) = 0;
LABEL_13:
    if ((-858993459 * a4) > 0x33333333)
    {
      if (a1)
      {
        if ((-858993459 * v7) <= 0x33333333)
        {
          unsigned int v25 = 0;
          do
          {
            LODWORD(v7) = v7 / 5;
            ++v25;
          }
          while ((-858993459 * v7) < 0x33333334);
        }
        else
        {
          unsigned int v25 = 0;
        }
        BOOL v30 = v25 >= v9;
        goto LABEL_37;
      }
      if ((-858993459 * HIDWORD(a4)) <= 0x33333333)
      {
        unsigned int v28 = 0;
        do
        {
          LODWORD(v8) = v8 / 5;
          ++v28;
        }
        while ((-858993459 * v8) < 0x33333334);
      }
      else
      {
        unsigned int v28 = 0;
      }
      int v31 = v17 - (v28 >= v9);
      goto LABEL_41;
    }
    unsigned int v26 = 0;
    do
    {
      LODWORD(a4) = a4 / 5;
      ++v26;
    }
    while ((-858993459 * a4) < 0x33333334);
    BOOL v27 = v26 >= v9;
LABEL_30:
    char v32 = v27;
    *a7 = v32;
    return v18;
  }
  if (((int)v17 - 1) / 0xAu <= v15 / 0xA) {
    unsigned int v18 = ((((xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[(v9 - 1)]
  }
                          * (unint64_t)a4) >> 32)
                        + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[(v9 - 1)])
                        * (unint64_t)a4) >> (v10
                                                                + ((0x949A784BCD1BLL
                                                                                   * (unint64_t)(v9 - 1)) >> 46)
                                                                + 26))
        % 0xA;
  else {
    LOBYTE(v18) = 0;
  }
  if (v9 <= 9) {
    goto LABEL_13;
  }
  return v18;
}

unint64_t xgboost::detail::PowerBaseComputer::ShortestRepresentation(int a1, int a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6 = HIDWORD(a5);
  unsigned int v7 = HIDWORD(a6) / 0xA;
  unsigned int v8 = HIDWORD(a5) / 0xA;
  if (a1 & 1) != 0 || (a2)
  {
    if (v7 <= v8)
    {
      int v9 = 0;
      unsigned int v14 = a6;
    }
    else
    {
      int v9 = 0;
      unsigned int v11 = HIDWORD(a5) / 0xA;
      unint64_t v12 = HIDWORD(a5);
      do
      {
        LODWORD(v6) = v11;
        HIDWORD(v13) = -858993459 * v12;
        LODWORD(v13) = -858993459 * v12;
        a1 = a1 & ((v13 >> 1) < 0x1999999A);
        a2 = a2 & (a3 == 0);
        unsigned int v14 = a6 / 0xA;
        a3 = a6 % 0xA;
        ++v9;
        v7 /= 0xAu;
        v11 /= 0xAu;
        LODWORD(a6) = a6 / 0xA;
        LODWORD(v12) = v6;
      }
      while (v7 > v11);
    }
    if (a1) {
      BOOL v17 = v6 % 0xA == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      do
      {
        a2 = a2 & (a3 == 0);
        LODWORD(a6) = v14 / 0xA;
        a3 = v14 % 0xA;
        LODWORD(v6) = v6 / 0xA;
        ++v9;
        HIDWORD(v18) = -858993459 * v6;
        LODWORD(v18) = -858993459 * v6;
        v14 /= 0xAu;
      }
      while ((v18 >> 1) < 0x1999999A);
    }
    else
    {
      LODWORD(a6) = v14;
    }
    BOOL v16 = (a6 == v6) & ~(a1 & a4) | ((a3 != 5) | ~a2 | a6) & (a3 > 4);
  }
  else
  {
    if (v7 <= v8)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      do
      {
        char v10 = a6;
        LODWORD(v6) = v8;
        LODWORD(a6) = a6 / 0xA;
        ++v9;
        v7 /= 0xAu;
        v8 /= 0xAu;
      }
      while (v7 > v8);
      a3 = (v10 - 10 * a6);
    }
    BOOL v16 = a6 == v6 || a3 > 4;
  }
  return (a6 + v16) | ((unint64_t)(v9 + a5) << 32);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_sync__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::TreeSyncher::~TreeSyncher(xgboost::tree::TreeSyncher *this)
{
}

void xgboost::tree::TreeSyncher::Update(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  Engine = rabit::engine::GetEngine(a1);
  unint64_t v6 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)Engine + 72))(Engine);
  if (v6 != 1)
  {
    memset(&v23, 0, sizeof(v23));
    v21[0] = (uint64_t (**)(void, uint64_t, uint64_t))&unk_26E2482F0;
    v21[1] = (uint64_t (**)(void, uint64_t, uint64_t))&v23;
    uint64_t v22 = 0;
    unsigned int v7 = rabit::engine::GetEngine(v6);
    unsigned int v8 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)v7 + 64))(v7);
    if (!v8)
    {
      uint64_t v19 = *a4;
      unint64_t v20 = a4[1];
      while (v19 != v20)
        unsigned int v8 = (rabit::engine *)xgboost::RegTree::Save(*v19++, (uint64_t)v21);
    }
    uint64_t v22 = 0;
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    std::string::size_type v24 = size;
    char v10 = rabit::engine::GetEngine(v8);
    unsigned int v11 = (rabit::engine *)(*(uint64_t (**)(void *, std::string::size_type *, uint64_t, void))(*(void *)v10 + 16))(v10, &v24, 8, 0);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = v23.__r_.__value_.__l.__size_;
    }
    if (v12 != v24)
    {
      std::string::resize(&v23, v24, 0);
      std::string::size_type v12 = v24;
    }
    if (v12)
    {
      int v13 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = v23.__r_.__value_.__r.__words[0];
      unint64_t v15 = rabit::engine::GetEngine(v11);
      if (v13 >= 0) {
        BOOL v16 = &v23;
      }
      else {
        BOOL v16 = (std::string *)v14;
      }
      (*(void (**)(void *, std::string *, std::string::size_type, void))(*(void *)v15 + 16))(v15, v16, v12, 0);
    }
    unint64_t v18 = *a4;
    BOOL v17 = a4[1];
    while (v18 != v17)
      xgboost::RegTree::Load(*v18++, v21);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E9738E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *xgboost::tree::TreeSyncher::Name(xgboost::tree::TreeSyncher *this)
{
  return "prune";
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_multiclass_obj__(xgboost::obj *this)
{
  return 0;
}

void sub_22E9739E4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407F06B5FFLL);
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::~SoftmaxMultiClassObj(xgboost::obj::SoftmaxMultiClassObj *this)
{
  *(void *)this = &unk_26E24ACD8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

{
  *(void *)this = &unk_26E24ACD8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

void xgboost::obj::SoftmaxMultiClassObj::LoadConfig(xgboost::obj::SoftmaxMultiClassObj *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_multiclass_param");
  unsigned int v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  int v5 = (xgboost::obj::SoftmaxMultiClassParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  unint64_t v6 = (void *)*((void *)v5 + 2);
  unsigned int v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      unsigned int v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      unint64_t v20 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      int v5 = (xgboost::obj::SoftmaxMultiClassParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      char v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          unsigned int v11 = v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          unint64_t v6 = v11;
        }
        while (!v12);
      }
      unint64_t v6 = v11;
    }
    while (v11 != v7);
  }
  int v14 = *((unsigned __int8 *)this + 20);
  int v13 = (char *)this + 20;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD71D40, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD71D40, (uint64_t)v13, v18, v19, &v17, 0);
    *int v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  unint64_t v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E973CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
  *(void *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::SaveConfig(xgboost::obj::SoftmaxMultiClassObj *this, xgboost::Json *a2)
{
  if (*((unsigned char *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v3, "multi:softprob");
    int v5 = &unk_26E24E210;
    uint64_t v6 = 0;
    *(_OWORD *)unsigned int v7 = *(_OWORD *)v3;
    uint64_t v8 = v4;
    v3[0] = 0;
    v3[1] = 0;
    uint64_t v4 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "name");
    (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
    xgboost::Json::operator=();
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "multi:softmax");
  int v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)unsigned int v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E974038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::SoftmaxMultiClassObj::Configure(unsigned char *a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 20;
  if (a1[20])
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    xgboost::obj::SoftmaxMultiClassParam::__MANAGER__((xgboost::obj::SoftmaxMultiClassParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD71D40, (uint64_t)v3, *a2, a2[1], 0, &v4, 0);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    xgboost::obj::SoftmaxMultiClassParam::__MANAGER__((xgboost::obj::SoftmaxMultiClassParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD71D40, (uint64_t)v3, *a2, a2[1], &v4, 0);
    unsigned char *v3 = 1;
  }
  unsigned int v7 = (void **)&v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_22E9741C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
  if (v5)
  {
    uint64_t v6 = a3;
    unsigned int v7 = a2;
    unint64_t v8 = ((*a2)[1] - **a2) >> 2;
    int v78 = *(_DWORD *)(a1 + 24);
    unint64_t v83 = v78;
    uint64_t v74 = a1;
    if (v8 != (v5 >> 2) * v78)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/multiclass_obj.cu");
      double v64 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      double v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: preds.Size() == (static_cast<size_t>(param_.num_class) * info.labels.Size())", 90);
      double v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)": ", 2);
      float v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"SoftmaxMultiClassObj: label size and pred size does not match.\n", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"label.Size() * num_class: ", 26);
      float v68 = (void *)std::ostream::operator<<();
      double v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"num_class: ", 11);
      float v70 = (void *)std::ostream::operator<<();
      double v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"preds.Size(): ", 14);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      a1 = v74;
      unint64_t v8 = ((*v7)[1] - **v7) >> 2;
      unint64_t v83 = *(int *)(v74 + 24);
      int v78 = *(_DWORD *)(v74 + 24);
    }
    int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
    unsigned int v11 = (void ***)(a1 + 32);
    char v10 = *(std::vector<int> **)(a1 + 32);
    __x[0] = 0;
    std::vector<int>::resize(v10, 1uLL, __x);
    unint64_t v12 = ((*v7)[1] - **v7) >> 2;
    *(void *)std::vector<unsigned int>::value_type __x = 0;
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v12, __x);
    int v13 = **v11;
    uint64_t v14 = (unsigned char *)(*v11)[1] - v13;
    if (v14 >= 1) {
      memset_pattern16(v13, &unk_22EA18320, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
    }
    unint64_t v15 = *(uint64_t **)(v6 + 72);
    unint64_t v81 = v8 / v83;
    uint64_t v76 = *v15;
    uint64_t v77 = v15[1];
    uint64_t v16 = v77 - *v15;
    if (v77 != v76 && v16 >> 2 != v81)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)" (", 2);
      std::vector<std::pair<std::string, std::string>> v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vs. ", 5);
      unint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") ", 2);
      operator new();
    }
    if (v9 < 0)
    {
      *(void *)std::vector<unsigned int>::value_type __x = 0;
      v90.__m_.__uint64_t sig = 850045863;
      memset(v90.__m_.__opaque, 0, sizeof(v90.__m_.__opaque));
      uint64_t v21 = v74;
      if (v8 >= v83)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        uint64_t v29 = 4;
        double v72 = v7;
        uint64_t v73 = v6;
        while (1)
        {
          uint64_t v30 = *(void *)(*a5 + 8);
          if (*(void *)*a5) {
            BOOL v31 = 1;
          }
          else {
            BOOL v31 = v30 == 0;
          }
          if (!v31) {
            goto LABEL_68;
          }
          uint64_t v82 = *(void *)*a5;
          char v32 = *(uint64_t **)(v6 + 24);
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          if (!*v32 && v34 != 0) {
            goto LABEL_68;
          }
          uint64_t v37 = **v7;
          uint64_t v36 = (*v7)[1];
          v86[0] = (v36 - v37) >> 2;
          v86[1] = v37;
          if (!v37 && v36 != 0) {
            goto LABEL_68;
          }
          uint64_t v85 = v29;
          unsigned int v39 = *(uint64_t **)(v6 + 72);
          uint64_t v41 = *v39;
          uint64_t v40 = v39[1];
          if (!*v39 && v40 != 0) {
            goto LABEL_68;
          }
          int v43 = *(void **)(v21 + 32);
          double v45 = (_DWORD *)*v43;
          float v44 = (_DWORD *)v43[1];
          long long v80 = v45;
          if (!v45)
          {
            if (v44) {
              goto LABEL_68;
            }
          }
          int8x16_t v79 = v44;
          xgboost::common::Span<float,18446744073709551615ul>::subspan(v86, v28 * v83, v83, &v87);
          unint64_t v46 = v87;
          if (v87)
          {
            uint64_t v75 = v30;
            uint64_t v47 = 0;
            double v48 = v88;
            float v49 = 1.1755e-38;
            do
              float v49 = fmaxf(v88[v47++], v49);
            while (v87 != v47);
            double v50 = 0.0;
            unint64_t v51 = v87;
            do
            {
              float v52 = *v48++;
              double v50 = v50 + expf(v52 - v49);
              --v51;
            }
            while (v51);
            float v53 = v50;
            uint64_t v21 = v74;
            uint64_t v30 = v75;
          }
          else
          {
            float v53 = 0.0;
            float v49 = 1.1755e-38;
          }
          if ((v34 - v33) >> 2 <= v28) {
            goto LABEL_68;
          }
          float v54 = *(float *)(v33 + 4 * v28);
          if (v54 < 0.0 || v54 >= (float)v78)
          {
            if (v79 == v80) {
              goto LABEL_68;
            }
            *long long v80 = 0;
            float v54 = 0.0;
          }
          if (v77 == v76)
          {
            float v56 = 1.0;
          }
          else
          {
            if ((v40 - v41) >> 2 <= v28) {
              goto LABEL_68;
            }
            float v56 = *(float *)(v41 + 4 * v28);
          }
          if (v78 >= 1) {
            break;
          }
LABEL_66:
          ++v28;
          unsigned int v7 = v72;
          uint64_t v29 = v85 + 8 * v78;
          v27 += v78;
          uint64_t v6 = v73;
          if (v28 == v81) {
            goto LABEL_12;
          }
        }
        uint64_t v57 = 0;
        unint64_t v58 = (v30 - v82) >> 3;
        double v59 = v88;
        double v60 = (float *)(v82 + v85);
        while (v46 != v57 && v58 > v27 + v57)
        {
          float v61 = expf(v59[v57] - v49) / v53;
          float v62 = v61 + -1.0;
          if (v54 != (float)(int)v57) {
            float v62 = v61;
          }
          *(v60 - 1) = v56 * v62;
          *double v60 = fmaxf(v56 * (float)((float)(v61 + v61) * (float)(1.0 - v61)), 1.0e-16);
          ++v57;
          v60 += 2;
          if (v78 == v57) {
            goto LABEL_66;
          }
        }
LABEL_68:
        std::terminate();
      }
LABEL_12:
      dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
      std::mutex::~mutex(&v90);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    }
    else
    {
      uint64_t v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
      uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      uint64_t v21 = v74;
    }
    uint64_t v22 = *(void *)(v21 + 32);
    std::string v23 = *(_DWORD **)v22;
    std::string::size_type v24 = *(_DWORD **)(v22 + 8);
    if (*(_DWORD **)v22 != v24)
    {
      do
      {
        if (*v23 != 1)
        {
          unsigned int v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/multiclass_obj.cu");
          unsigned int v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"SoftmaxMultiClassObj: label must be in [0, num_class).", 54);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        }
        ++v23;
      }
      while (v23 != v24);
    }
  }
}

void sub_22E974A3C(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_22E974A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  MEMORY[0x230FA80D0](v32, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_22E974AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

const char *xgboost::obj::SoftmaxMultiClassObj::DefaultEvalMetric(xgboost::obj::SoftmaxMultiClassObj *this)
{
  return "mlogloss";
}

void xgboost::obj::SoftmaxMultiClassObj::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 24);
  unint64_t v3 = ((*a2)[1] - **a2) >> 2;
  if (!*(unsigned char *)(a1 + 16)) {
    xgboost::HostDeviceVector<float>::HostDeviceVector();
  }
  long long v5 = xmmword_22EA1A8F0;
  unint64_t v6 = v3 / v2;
  uint64_t v7 = 1;
  LODWORD(v4.__ptr_) = v2;
  unint64_t v8 = 0xFFFFFFFF00000001;
  xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>((int *)&v4, a2);
}

void sub_22E974DD0()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E974E20);
}

void sub_22E974E14()
{
}

void xgboost::obj::SoftmaxMultiClassObj::EvalTransform(uint64_t a1, uint64_t **a2)
{
  unint64_t v2 = *(int *)(a1 + 24);
  unint64_t v3 = (((*a2)[1] - **a2) >> 2) / v2;
  long long v5 = xmmword_22EA1A8F0;
  unint64_t v6 = v3;
  uint64_t v7 = 1;
  int v4 = v2;
  unint64_t v8 = 0xFFFFFFFF00000001;
  xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>(&v4, a2);
}

uint64_t xgboost::obj::SoftmaxMultiClassObj::Task(xgboost::obj::SoftmaxMultiClassObj *this)
{
  return 2;
}

void xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>(int *a1, uint64_t **a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[11] < 0)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = *((void *)a1 + 3);
    LODWORD(v22) = a1[10];
    LODWORD(v21[0]) = 1;
    if ((int)v22 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v24.__ptr_ = 0;
    v25.__m_.__uint64_t sig = 850045863;
    memset(v25.__m_.__opaque, 0, sizeof(v25.__m_.__opaque));
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v9 = **a2;
        uint64_t v8 = (*a2)[1];
        v21[0] = (v8 - v9) >> 2;
        v21[1] = v9;
        if (v9) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v8 == 0;
        }
        if (!v10
          || (xgboost::common::Span<float,18446744073709551615ul>::subspan(v21, i * v5, v5, &v22), (unint64_t v11 = v22) == 0))
        {
LABEL_23:
          std::terminate();
        }
        unint64_t v12 = v23;
        float v13 = *v23;
        uint64_t v14 = v22 - 1;
        if (v22 != 1)
        {
          unint64_t v15 = v23 + 1;
          do
          {
            float v16 = *v15++;
            float v13 = fmaxf(v16, v13);
            --v14;
          }
          while (v14);
        }
        uint64_t v17 = 0;
        double v18 = 0.0;
        do
        {
          if (v11 == v17) {
            goto LABEL_23;
          }
          float v19 = expf(v12[v17] - v13);
          v12[v17] = v19;
          double v18 = v18 + v19;
          ++v17;
        }
        while (v11 != v17);
        do
        {
          if (!v11) {
            goto LABEL_23;
          }
          float v20 = v18;
          *unint64_t v12 = *v12 / v20;
          ++v12;
          --v11;
        }
        while (v11);
      }
    }
    dmlc::OMPException::Rethrow(&v24);
    std::mutex::~mutex(&v25);
    std::exception_ptr::~exception_ptr(&v24);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    unint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
  }
}

void sub_22E975194()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E975220);
}

void sub_22E9751CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a15;
  a15 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  }
  _Unwind_Resume(a1);
}

void sub_22E9751FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void sub_22E97520C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E9752F4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407F06B5FFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_multiclass_metric__(xgboost::metric *this)
{
  return 0;
}

void xgboost::metric::EvalMatchError::~EvalMatchError(xgboost::metric::EvalMatchError *this)
{
}

double xgboost::metric::EvalMClassBase<xgboost::metric::EvalMatchError>::Eval(rabit::engine *a1, float ***a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
  if (v8)
  {
    if (((*a2)[1] - **a2) % (unint64_t)(v8 >> 2))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v66);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      float v49 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v66);
      double v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: preds.Size() % info.labels.Size() == 0", 52);
      unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"label and prediction size not match", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v66);
    }
  }
  else
  {
    char v38 = **a2;
    unsigned int v39 = (*a2)[1];
    LODWORD(v60) = 0;
    uint64_t v40 = (char *)v39 - (char *)v38;
    std::string __p = (void *)(v40 >> 2);
    if (v40) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  double v64 = 0.0;
  double v65 = 0.0;
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
  if (!v9)
  {
    double v13 = 0.0;
    double v12 = 0.0;
    if (!a4) {
      return v12 / v13;
    }
    goto LABEL_45;
  }
  uint64_t v10 = (char *)(*a2)[1] - (char *)**a2;
  unint64_t v11 = v9 >> 2;
  LODWORD(__p) = 1;
  if (v11 > v10 >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  double v12 = 0.0;
  double v13 = 0.0;
  if ((*(_DWORD *)(*((void *)v7 + 1) + 24) & 0x80000000) != 0)
  {
    unint64_t v59 = (v10 >> 2) / v11;
    uint64_t v14 = *(uint64_t **)(a3 + 72);
    unint64_t v15 = *(uint64_t **)(a3 + 24);
    uint64_t v16 = *a2;
    uint64_t v18 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v20 = *v14;
    uint64_t v19 = v14[1];
    v66.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v66);
    v66.__ptr_ = 0;
    std::vector<double>::vector(&v60, 1uLL, &v66);
    v66.__ptr_ = 0;
    v67.__m_.__uint64_t sig = 850045863;
    memset(v67.__m_.__opaque, 0, sizeof(v67.__m_.__opaque));
    if (v17 == v18)
    {
      LODWORD(v28) = 0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = (v17 - v18) >> 2;
      uint64_t v24 = *v15;
      std::mutex v25 = (double *)__p;
      uint64_t v26 = v60;
      do
      {
        float v27 = 1.0;
        if (v19 != v20) {
          float v27 = *(float *)(*v14 + 4 * v22);
        }
        uint64_t v28 = (int)*(float *)(v24 + 4 * v22);
        if ((v28 & 0x80000000) == 0 && (int)v28 < (int)v59)
        {
          uint64_t v29 = &(*v16)[v22 * v59];
          if (v59)
          {
            float v30 = *v29;
            uint64_t v31 = 4 * v59;
            uint64_t v32 = (uint64_t)&(*v16)[v22 * v59];
            uint64_t v33 = (float *)v32;
            uint64_t v34 = (float *)v32;
            do
            {
              float v35 = *v34++;
              float v36 = v35;
              if (v35 > v30)
              {
                float v30 = v36;
                uint64_t v33 = (float *)v32;
              }
              uint64_t v32 = (uint64_t)v34;
              v31 -= 4;
            }
            while (v31);
          }
          else
          {
            uint64_t v33 = *v16;
          }
          if (v33 == &v29[v28]) {
            float v37 = 0.0;
          }
          else {
            float v37 = 1.0;
          }
          *std::mutex v25 = *v25 + (float)(v27 * v37);
          *uint64_t v26 = *v26 + v27;
          uint64_t v28 = v21;
        }
        ++v22;
        uint64_t v21 = v28;
      }
      while (v22 != v23);
    }
    dmlc::OMPException::Rethrow(&v66);
    std::mutex::~mutex(&v67);
    std::exception_ptr::~exception_ptr(&v66);
    uint64_t v41 = (double *)__p;
    double v13 = 0.0;
    double v12 = 0.0;
    while (v41 != v63)
    {
      double v42 = *v41++;
      double v12 = v12 + v42;
    }
    int v43 = v60;
    if (v60 != v61)
    {
      double v13 = 0.0;
      float v44 = v60;
      do
      {
        double v45 = *v44++;
        double v13 = v13 + v45;
      }
      while (v44 != v61);
    }
    if ((v28 & 0x80000000) != 0 || (int)v28 >= (int)v59)
    {
      float v52 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v66);
      dmlc::LogMessageFatal::Entry::Init(v52, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      float v53 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v66);
      float v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: label_error >= 0 && label_error < static_cast<int32_t>(n_class)", 77);
      float v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
      float v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"MultiClassEvaluation: label must be in [0, num_class),", 54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" num_class=", 11);
      uint64_t v57 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" but found ", 11);
      unint64_t v58 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in label", 9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v66);
      int v43 = v60;
      if (!v60)
      {
LABEL_42:
        a1 = (rabit::engine *)__p;
        if (__p)
        {
          double v63 = (double *)__p;
          operator delete(__p);
        }
        goto LABEL_44;
      }
    }
    else if (!v60)
    {
      goto LABEL_42;
    }
    float v61 = v43;
    operator delete(v43);
    goto LABEL_42;
  }
LABEL_44:
  double v64 = v12;
  double v65 = v13;
  if (a4)
  {
LABEL_45:
    Engine = rabit::engine::GetEngine(a1);
    (*(void (**)(void *, double *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v64, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v12 = v64;
    double v13 = v65;
  }
  return v12 / v13;
}

void sub_22E975A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

const char *xgboost::metric::EvalMatchError::Name(xgboost::metric::EvalMatchError *this)
{
  return "merror";
}

void xgboost::metric::EvalMultiLogLoss::~EvalMultiLogLoss(xgboost::metric::EvalMultiLogLoss *this)
{
}

double xgboost::metric::EvalMClassBase<xgboost::metric::EvalMultiLogLoss>::Eval(rabit::engine *a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
  if (v8)
  {
    if ((((*a2)[1] - **a2) >> 2) % (unint64_t)(v8 >> 2))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      float v44 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      double v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: preds.Size() % info.labels.Size() == 0", 52);
      unint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"label and prediction size not match", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v64);
    }
  }
  else
  {
    uint64_t v33 = **a2;
    uint64_t v34 = (*a2)[1];
    LODWORD(v58) = 0;
    uint64_t v35 = v34 - v33;
    std::string __p = (void *)(v35 >> 2);
    if (v35) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  double v62 = 0.0;
  double v63 = 0.0;
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24);
  if (!v9)
  {
    double v13 = 0.0;
    double v12 = 0.0;
    if (!a4) {
      return v12 / v13;
    }
    goto LABEL_37;
  }
  uint64_t v10 = (*a2)[1] - **a2;
  unint64_t v11 = v9 >> 2;
  unint64_t v57 = (v10 >> 2) / v11;
  LODWORD(__p) = 1;
  if (v11 > v10 >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  double v12 = 0.0;
  double v13 = 0.0;
  if ((*(_DWORD *)(*((void *)v7 + 1) + 24) & 0x80000000) != 0)
  {
    uint64_t v14 = *(void **)(a3 + 72);
    unint64_t v15 = *(uint64_t **)(a3 + 24);
    float v56 = *a2;
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *v14;
    uint64_t v54 = v14[1];
    float v55 = v14;
    v64.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v64);
    v64.__ptr_ = 0;
    std::vector<double>::vector(&v58, 1uLL, &v64);
    v64.__ptr_ = 0;
    v65.__m_.__uint64_t sig = 850045863;
    memset(v65.__m_.__opaque, 0, sizeof(v65.__m_.__opaque));
    uint64_t v20 = v54;
    uint64_t v19 = v55;
    if (v16 == v17)
    {
      LODWORD(v29) = 0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = (v16 - v17) >> 2;
      uint64_t v25 = *v15;
      uint64_t v26 = (double *)__p;
      float v27 = v58;
      do
      {
        if (v20 == v18) {
          float v28 = 1.0;
        }
        else {
          float v28 = *(float *)(*v19 + 4 * v23);
        }
        uint64_t v29 = (int)*(float *)(v25 + 4 * v23);
        if ((v29 & 0x80000000) == 0 && (int)v29 < (int)v57)
        {
          float v30 = *(float *)(*v56 + 4 * v29 + v21);
          float v31 = 36.841;
          if (v30 > 1.0e-16)
          {
            float v32 = logf(v30);
            uint64_t v20 = v54;
            uint64_t v19 = v55;
            float v31 = -v32;
          }
          *uint64_t v26 = *v26 + (float)(v28 * v31);
          *float v27 = *v27 + v28;
          uint64_t v29 = v22;
        }
        ++v23;
        v21 += 4 * v57;
        uint64_t v22 = v29;
      }
      while (v24 != v23);
    }
    dmlc::OMPException::Rethrow(&v64);
    std::mutex::~mutex(&v65);
    std::exception_ptr::~exception_ptr(&v64);
    float v36 = (double *)__p;
    double v13 = 0.0;
    double v12 = 0.0;
    if (__p != v61)
    {
      do
      {
        double v37 = *v36++;
        double v12 = v12 + v37;
      }
      while (v36 != v61);
    }
    char v38 = v58;
    if (v58 != v59)
    {
      double v13 = 0.0;
      unsigned int v39 = v58;
      do
      {
        double v40 = *v39++;
        double v13 = v13 + v40;
      }
      while (v39 != v59);
    }
    if ((v29 & 0x80000000) != 0 || (int)v29 >= (int)v57)
    {
      uint64_t v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      double v48 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      float v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: label_error >= 0 && label_error < static_cast<int32_t>(n_class)", 77);
      double v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
      unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"MultiClassEvaluation: label must be in [0, num_class),", 54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" num_class=", 11);
      float v52 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" but found ", 11);
      float v53 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" in label", 9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v64);
      char v38 = v58;
      if (!v58)
      {
LABEL_34:
        a1 = (rabit::engine *)__p;
        if (__p)
        {
          float v61 = __p;
          operator delete(__p);
        }
        goto LABEL_36;
      }
    }
    else if (!v58)
    {
      goto LABEL_34;
    }
    unint64_t v59 = v38;
    operator delete(v38);
    goto LABEL_34;
  }
LABEL_36:
  double v62 = v12;
  double v63 = v13;
  if (a4)
  {
LABEL_37:
    Engine = rabit::engine::GetEngine(a1);
    (*(void (**)(void *, double *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v62, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v12 = v62;
    double v13 = v63;
  }
  return v12 / v13;
}

void sub_22E976218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

const char *xgboost::metric::EvalMultiLogLoss::Name(xgboost::metric::EvalMultiLogLoss *this)
{
  return "mlogloss";
}

void dmlc::parameter::FieldEntry<xgboost::common::ProbabilityDistributionType>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::CustomLogMessage::Log()
{
  uint64_t v1 = &dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst;
  if ((*v0 & 1) == 0)
  {
    *(void *)dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst) = xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke;
    *(unsigned char *)v7(v6) = 1;
  }
  unint64_t v2 = *(uint64_t (**)(uint64_t *))(*v1)(v1);
  if (*((char *)v3 + 23) >= 0) {
    int v4 = v3;
  }
  else {
    int v4 = (uint64_t *)*v3;
  }

  return v2(v4);
}

void xgboost::ConsoleLogger::~ConsoleLogger(xgboost::ConsoleLogger *this)
{
  int v3 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  if (v2 == 4 || v3 >= v2)
  {
    std::stringbuf::str();
    uint64_t v6 = &dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst;
    if ((*v5 & 1) == 0)
    {
      *(void *)dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst) = xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke;
      *(unsigned char *)v12(v11) = 1;
    }
    uint64_t v7 = *(void (**)(void *))(*v6)(v6);
    if (v14 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    v7(p_p);
    if (v14 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v9 = MEMORY[0x263F8C2C8];
  uint64_t v10 = *MEMORY[0x263F8C2C8];
  *(void *)this = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v10 - 24)) = *(void *)(v9 + 24);
  *((void *)this + 1) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020]((char *)this + 112);
}

BOOL xgboost::ConsoleLogger::ShouldLog()
{
  int v1 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  return v0 == 4 || v1 >= v0;
}

void xgboost::TrackerLogger::~TrackerLogger(xgboost::TrackerLogger *this)
{
  LOBYTE(__p[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)__p, 1);
  int v2 = (rabit::engine *)std::stringbuf::str();
  Engine = rabit::engine::GetEngine(v2);
  (*(void (**)(void *, void **))(*(void *)Engine + 96))(Engine, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = MEMORY[0x263F8C2C8];
  uint64_t v5 = *MEMORY[0x263F8C2C8];
  *(void *)this = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v5 - 24)) = *(void *)(v4 + 24);
  *((void *)this + 1) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020]((char *)this + 112);
}

void xgboost::ConsoleLogger::Configure(__n128 a1)
{
  int v1 = (xgboost::GlobalConfiguration *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a1);
  xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(v1, v2, v3);
  uint64_t v4 = (void **)v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::GlobalConfiguration *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::GlobalConfiguration::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E9768CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::ConsoleLogger::DefaultVerbosity(xgboost::ConsoleLogger *this)
{
  return 1;
}

uint64_t xgboost::ConsoleLogger::GlobalVerbosity(xgboost::ConsoleLogger *this)
{
  unsigned int v1 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  if (v1 >= 4) {
    return 1;
  }
  else {
    return v1;
  }
}

xgboost::BaseLogger *xgboost::ConsoleLogger::ConsoleLogger(xgboost::BaseLogger *a1, int a2)
{
  uint64_t result = xgboost::BaseLogger::BaseLogger(a1);
  *((_DWORD *)result + 66) = a2;
  return result;
}

{
  xgboost::BaseLogger *result;

  uint64_t result = xgboost::BaseLogger::BaseLogger(a1);
  *((_DWORD *)result + 66) = a2;
  return result;
}

xgboost::BaseLogger *xgboost::BaseLogger::BaseLogger(xgboost::BaseLogger *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"[", 1);
  uint64_t v4 = dmlc::DateLogger::HumanDate((dmlc::DateLogger *)v8);
  size_t v5 = strlen((const char *)v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
  return this;
}

void sub_22E9769EC(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

xgboost::BaseLogger *xgboost::ConsoleLogger::ConsoleLogger(xgboost::BaseLogger *a1, uint64_t a2, uint64_t a3, int a4)
{
  *((_DWORD *)xgboost::BaseLogger::BaseLogger(a1) + 66) = a4;
  char v7 = "DEBUG: ";
  uint64_t v8 = 7;
  uint64_t v9 = a1;
  switch(a4)
  {
    case 1:
      char v7 = "WARNING: ";
      uint64_t v8 = 9;
      goto LABEL_4;
    case 2:
      char v7 = "INFO: ";
      uint64_t v8 = 6;
      goto LABEL_4;
    case 3:
LABEL_4:
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, v8);
      goto LABEL_5;
    case 4:
LABEL_5:
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *(void *)a2;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v12 = *(void *)(a2 + 8);
      }
      double v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
      char v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_22E976B10(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke(const char *a1)
{
  size_t v2 = strlen(a1);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)a1, v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_22E976BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *dmlc::Parameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::GlobalConfiguration *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::locale v6 = xgboost::GlobalConfiguration::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E976C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_histmaker__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::CQHistMaker::~CQHistMaker(void **this)
{
  xgboost::tree::CQHistMaker::~CQHistMaker(this);

  JUMPOUT(0x230FA80D0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *this = &unk_26E24B0D0;
  int v10 = this + 92;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 735) < 0) {
    operator delete(this[89]);
  }
  int v10 = this + 82;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  size_t v2 = this[79];
  if (v2)
  {
    this[80] = v2;
    operator delete(v2);
  }
  int v10 = this + 76;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v10 = this + 73;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v10 = this + 70;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v3 = this[67];
  if (v3)
  {
    this[68] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[64];
  if (v4)
  {
    this[65] = v4;
    operator delete(v4);
  }
  size_t v5 = this[61];
  if (v5)
  {
    this[62] = v5;
    operator delete(v5);
  }
  std::locale v6 = this[58];
  if (v6)
  {
    this[59] = v6;
    operator delete(v6);
  }
  *this = &unk_26E24B1A0;
  char v7 = this[54];
  if (v7)
  {
    this[55] = v7;
    operator delete(v7);
  }
  int v10 = this + 47;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v8 = this[44];
  if (v8)
  {
    this[45] = v8;
    operator delete(v8);
  }
  uint64_t v9 = this[41];
  if (v9)
  {
    this[42] = v9;
    operator delete(v9);
  }
  xgboost::tree::BaseMaker::~BaseMaker(this);
}

void xgboost::tree::BaseMaker::LoadConfig(xgboost::tree::BaseMaker *this, const xgboost::Json *a2)
{
  int v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  uint64_t v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::BaseMaker *)((char *)this + 16), &v7);
  uint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E976EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::BaseMaker::SaveConfig(xgboost::tree::BaseMaker *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::BaseMaker *)((char *)this + 16), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E976FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void xgboost::tree::BaseMaker::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v2);
  int v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

std::string *xgboost::tree::HistMaker::Update(float *a1, void *a2, uint64_t (***a3)(void), void **a4)
{
  uint64_t v8 = (std::string *)(a1 + 56);
  uint64_t v9 = (const xgboost::tree::TrainParam *)(a1 + 4);
  uint64_t v10 = (**a3)(a3);
  uint64_t result = xgboost::FeatureInteractionConstraintHost::Configure(v8, v9, *(_DWORD *)(v10 + 8));
  float v12 = a1[5];
  unint64_t v15 = a4;
  double v13 = *a4;
  char v14 = v15[1];
  for (a1[5] = v12 / (float)(unint64_t)(v14 - v13);
        v13 != v14;
        uint64_t result = (std::string *)(*(uint64_t (**)(float *, void, uint64_t (***)(void), uint64_t))(*(void *)a1 + 80))(a1, *a2, a3, v16))
  {
    uint64_t v16 = *v13++;
  }
  a1[5] = v12;
  return result;
}

const char *xgboost::tree::CQHistMaker::Name(xgboost::tree::CQHistMaker *this)
{
  return "grow_local_histmaker";
}

void xgboost::tree::BaseMaker::SetNonDefaultPositionCol(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  xgboost::tree::BaseMaker::GetSplitSet(*a2, a2[1], a4, &__p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 88))(&v6, a3);
  v5[2] = v6;
  v5[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v5, 0);
}

void sub_22E977388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistMaker::UpdateTree(uint64_t a1, void *a2, uint64_t a3, xgboost::RegTree *a4)
{
  uint64_t v300 = *MEMORY[0x263EF8340];
  v278 = a2;
  if (*(int *)(a1 + 28) <= 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v298);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
    v271 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v298);
    v272 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)"Check failed: param_.max_depth > 0", 34);
    v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)"max_depth must be larger than 0", 31);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v298);
    a2 = v278;
  }
  uint64_t v6 = (void **)(a1 + 200);
  std::vector<int>::resize((std::vector<int> *)(a1 + 200), (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v7 = *(int **)(a1 + 200);
  uint64_t v8 = *(int **)(a1 + 208);
  uint64_t v9 = (char *)v8 - (char *)v7;
  if ((char *)v8 - (char *)v7 >= 1) {
    bzero(*v6, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  }
  if (v8 != v7)
  {
    uint64_t v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v11 = (float *)(*v278 + 4);
    do
    {
      if (*v11 < 0.0) {
        *uint64_t v7 = ~*v7;
      }
      ++v7;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  if (*(float *)(a1 + 64) < 1.0)
  {
    int v12 = *(_DWORD *)(a1 + 68);
    LODWORD(v293) = 0;
    if (v12) {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>();
    }
    float v13 = *(float *)(a1 + 64);
    uint64_t v14 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    unint64_t v15 = *(_DWORD **)(a1 + 200);
    if (*(_DWORD **)(a1 + 208) != v15)
    {
      uint64_t v16 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v14;
      unint64_t v17 = 0;
      double v18 = v13;
      uint64_t v19 = 4;
      do
      {
        if (*(float *)(*v278 + v19) >= 0.0)
        {
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v16);
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v16);
          unint64_t v15 = *v6;
          if (((double)v20 + (double)v21 * 4294967300.0) * 5.42101086e-20 + 0.0 >= v18) {
            v15[v17] = ~v15[v17];
          }
        }
        ++v17;
        v19 += 8;
      }
      while (v17 < (uint64_t)(*(void *)(a1 + 208) - (void)v15) >> 2);
    }
  }
  v281 = (char *)(a1 + 152);
  std::vector<int>::reserve((std::vector<int> *)(a1 + 152), 0x100uLL);
  uint64_t v22 = *(_DWORD **)(a1 + 152);
  unint64_t v23 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v22;
  if ((unint64_t)v22 >= v23)
  {
    uint64_t v25 = v23 - (void)v22;
    uint64_t v26 = v25 >> 1;
    if ((unint64_t)(v25 >> 1) <= 1) {
      uint64_t v26 = 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    float v28 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v27);
    uint64_t v29 = *(char **)(a1 + 152);
    float v30 = *(char **)(a1 + 160);
    float v32 = &v28[v31];
    *float v28 = 0;
    uint64_t v24 = v28 + 1;
    while (v30 != v29)
    {
      int v33 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *--float v28 = v33;
    }
    *(void *)(a1 + 152) = v28;
    *(void *)(a1 + 160) = v24;
    *(void *)(a1 + 168) = v32;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *uint64_t v22 = 0;
    uint64_t v24 = v22 + 1;
  }
  uint64_t v34 = *(void **)(a1 + 176);
  *(void *)(a1 + 160) = v24;
  v282 = (std::vector<int> *)(a1 + 176);
  uint64_t v35 = *(void *)(a1 + 184) - (void)v34;
  if (v35 >= 1) {
    memset(v34, 255, 4 * (((unint64_t)v35 >> 2) - ((unint64_t)v35 > 3)) + 4);
  }
  std::vector<int>::resize(v282, *((int *)a4 + 3));
  uint64_t v36 = *(void *)(a1 + 152);
  uint64_t v37 = *(void *)(a1 + 160);
  uint64_t v38 = v37 - v36;
  if (v37 != v36)
  {
    uint64_t v39 = 0;
    unint64_t v40 = v38 >> 2;
    std::vector<int>::pointer begin = v282->__begin_;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    do
    {
      begin[*(int *)(v36 + 4 * v39)] = v39;
      ++v39;
    }
    while (v40 != v39);
  }
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  v288 = (xgboost::FeatureInteractionConstraintHost *)(a1 + 224);
  xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 224), (const xgboost::tree::TrainParam *)(a1 + 16), *(_DWORD *)(v42 + 8));
  v287 = (uint64_t *)(a1 + 432);
  (*(void (**)(uint64_t, uint64_t, xgboost::RegTree *))(*(void *)a1 + 96))(a1, a3, a4);
  uint64_t v43 = *((void *)a4 + 20);
  *(_DWORD *)(v43 + 16) = 0;
  *(void *)(v43 + 4) = 0xFFFFFFFFLL;
  if (*(int *)(a1 + 28) >= 1)
  {
    int v275 = 0;
    v44.f64[0] = NAN;
    v44.f64[1] = NAN;
    int8x16_t v286 = (int8x16_t)vnegq_f64(v44);
    v274 = a4;
    double v45 = v278;
    while (1)
    {
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t *, xgboost::RegTree *))(*(void *)a1 + 88))(a1, v45, a3, v287, a4);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t *, xgboost::RegTree *))(*(void *)a1 + 112))(a1, v278, a3, v287, a4);
      uint64_t v47 = *(void *)(a1 + 432);
      uint64_t v46 = *(void *)(a1 + 440);
      uint64_t v48 = *(void *)(a1 + 152);
      uint64_t v49 = *(void *)(a1 + 160);
      v294 = 0;
      v295 = 0;
      v293 = 0;
      v298.__ptr_ = &v293;
      LOBYTE(v299.__m_.__sig) = 0;
      uint64_t v50 = v49 - v48;
      if (v49 == v48)
      {
        std::vector<unsigned int> __p = 0;
        v291 = 0;
        uint64_t v53 = v49;
        uint64_t v292 = 0;
      }
      else
      {
        if ((unint64_t)v50 >= 0xCCCCCCCCCCCCCCDLL) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v51 = (char *)operator new(80 * (v50 >> 2));
        v293 = v51;
        v295 = &v51[80 * (v50 >> 2)];
        bzero(v51, 80 * ((80 * (v50 >> 2) - 80) / 0x50uLL) + 80);
        v294 = &v51[80 * ((80 * (v50 >> 2) - 80) / 0x50uLL) + 80];
        std::vector<unsigned int> __p = 0;
        v291 = 0;
        uint64_t v292 = 0;
        std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](&__p, v50 >> 2);
        float v52 = (char *)v291;
        bzero(v291, 4 * v50);
        v291 = &v52[4 * v50];
        uint64_t v49 = *(void *)(a1 + 152);
        uint64_t v53 = *(void *)(a1 + 160);
      }
      uint64_t v283 = (v46 - v47) >> 2;
      v298.__ptr_ = 0;
      v299.__m_.__uint64_t sig = 850045863;
      unint64_t v284 = (v53 - v49) >> 2;
      memset(v299.__m_.__opaque, 0, sizeof(v299.__m_.__opaque));
      uint64_t v276 = v53;
      uint64_t v277 = v49;
      if (v53 != v49) {
        break;
      }
LABEL_171:
      dmlc::OMPException::Rethrow(&v298);
      std::mutex::~mutex(&v299);
      std::exception_ptr::~exception_ptr(&v298);
      a4 = v274;
      if (v276 != v277)
      {
        uint64_t v155 = 0;
        unsigned int v156 = 1;
        do
        {
          uint64_t v157 = *(void **)(a1 + 376);
          uint64_t v158 = *(unsigned int *)(*v157 + 4 * (v283 + v155 * (v283 + 1)));
          uint64_t v159 = v157[2];
          BOOL v160 = (double *)(v159 + 16 * v158);
          double v162 = *v160;
          double v161 = v160[1];
          double v163 = *(float *)(a1 + 48);
          BOOL v164 = v161 < v163 || v161 <= 0.0;
          v152.i64[0] = 0;
          if (!v164)
          {
            float v165 = *(float *)(a1 + 56);
            double v166 = v165;
            BOOL v184 = v162 < (float)-v165;
            double v167 = v162 + v165;
            if (!v184) {
              double v167 = 0.0;
            }
            BOOL v87 = v162 <= v166;
            double v168 = v162 - v166;
            if (!v87) {
              double v167 = v168;
            }
            *(double *)v152.i64 = -v167 / (v161 + *(float *)(a1 + 52));
            float v169 = *(float *)(a1 + 60);
            if (v169 != 0.0)
            {
              *(double *)v153.i64 = v169;
              if (fabs(*(double *)v152.i64) > *(double *)v153.i64) {
                int8x16_t v152 = vbslq_s8(v286, v153, v152);
              }
            }
          }
          uint64_t v170 = *(int *)(*(void *)(a1 + 152) + 4 * v155);
          unint64_t v171 = v293;
          uint64_t v172 = (float *)&v293[80 * v155];
          float v173 = *(double *)v152.i64;
          uint64_t v174 = *((void *)v274 + 26) + 16 * v170;
          float v175 = v161;
          *(float *)(v174 + 4) = v175;
          *(float *)(v174 + 8) = v173;
          float v176 = *v172;
          *(float *)uint64_t v174 = *v172;
          if (v176 <= 0.000001)
          {
            uint64_t v236 = *((void *)v274 + 20) + 20 * (int)v170;
            *(float *)(v236 + 16) = *(float *)(a1 + 20) * v173;
            v151.i64[1] = -1;
            *(void *)(v236 + 4) = -1;
          }
          else
          {
            v153.i64[0] = 0;
            v152.i64[0] = 0;
            if (!v164)
            {
              float v177 = *(float *)(a1 + 56);
              double v178 = v177;
              BOOL v184 = v162 < (float)-v177;
              double v179 = v162 + v177;
              if (!v184) {
                double v179 = 0.0;
              }
              BOOL v87 = v162 <= v178;
              double v180 = v162 - v178;
              if (!v87) {
                double v179 = v180;
              }
              *(double *)v152.i64 = -v179 / (v161 + *(float *)(a1 + 52));
              float v181 = *(float *)(a1 + 60);
              if (v181 != 0.0)
              {
                *(double *)v154.i64 = v181;
                if (fabs(*(double *)v152.i64) > *(double *)v154.i64) {
                  v152.i64[0] = vbslq_s8(v286, v154, v152).u64[0];
                }
              }
            }
            uint64_t v182 = &v171[80 * v155];
            double v183 = *((double *)v182 + 7);
            BOOL v184 = v183 <= 0.0 || v183 < v163;
            if (!v184)
            {
              double v185 = *((double *)v182 + 6);
              float v186 = *(float *)(a1 + 56);
              double v187 = v186;
              BOOL v184 = v185 < (float)-v186;
              double v188 = v185 + v186;
              if (!v184) {
                double v188 = 0.0;
              }
              BOOL v87 = v185 <= v187;
              double v189 = v185 - v187;
              if (v87) {
                double v189 = v188;
              }
              *(double *)v153.i64 = -v189 / (v183 + *(float *)(a1 + 52));
              float v190 = *(float *)(a1 + 60);
              if (v190 != 0.0)
              {
                *(double *)v154.i64 = v190;
                if (fabs(*(double *)v153.i64) > *(double *)v154.i64) {
                  v153.i64[0] = vbslq_s8(v286, v154, v153).u64[0];
                }
              }
            }
            uint64_t v191 = &v171[80 * v155];
            double v192 = *((double *)v191 + 9);
            v154.i64[0] = 0;
            if (v192 > 0.0 && v192 >= v163)
            {
              double v194 = *((double *)v191 + 8);
              float v195 = *(float *)(a1 + 56);
              double v196 = v195;
              BOOL v184 = v194 < (float)-v195;
              double v197 = v194 + v195;
              if (!v184) {
                double v197 = 0.0;
              }
              BOOL v87 = v194 <= v196;
              double v198 = v194 - v196;
              if (v87) {
                double v198 = v197;
              }
              *(double *)v154.i64 = -v198 / (v192 + *(float *)(a1 + 52));
              float v199 = *(float *)(a1 + 60);
              if (v199 != 0.0)
              {
                *(double *)v151.i64 = v199;
                if (fabs(*(double *)v154.i64) > *(double *)v151.i64) {
                  v154.i64[0] = vbslq_s8(v286, v151, v154).u64[0];
                }
              }
            }
            float v200 = *(double *)v152.i64;
            double v201 = *(float *)(a1 + 20);
            float v202 = *(double *)v153.i64 * v201;
            uint64_t v203 = &v171[80 * v155];
            unsigned int v205 = *((_DWORD *)v203 + 1);
            v204 = v203 + 4;
            float v206 = *(double *)v154.i64 * v201;
            float v207 = v183;
            float v208 = v192;
            xgboost::RegTree::ExpandNode(v274, v170, v205 & 0x7FFFFFFF, *((float *)v204 + 1), v205 >> 31, v200, v202, v206, v176, v175, v207, v208, -1);
            v210 = (uint64_t *)((char *)__p + 16 * v155);
            v152.i64[0] = *v210;
            v154.i64[0] = v210[1];
            *(double *)v153.i64 = *(float *)(a1 + 48);
            v151.i64[0] = 0;
            v211.i64[0] = 0;
            if (*(double *)v154.i64 > 0.0)
            {
              v211.i64[0] = 0;
              if (*(double *)v154.i64 >= *(double *)v153.i64)
              {
                float v212 = *(float *)(a1 + 56);
                double v213 = v212;
                BOOL v184 = *(double *)v152.i64 < (float)-v212;
                double v214 = *(double *)v152.i64 + v212;
                if (!v184) {
                  double v214 = 0.0;
                }
                BOOL v87 = *(double *)v152.i64 <= v213;
                double v215 = *(double *)v152.i64 - v213;
                if (!v87) {
                  double v214 = v215;
                }
                *(double *)v211.i64 = -v214 / (*(double *)v154.i64 + *(float *)(a1 + 52));
                float v216 = *(float *)(a1 + 60);
                if (v216 != 0.0)
                {
                  *(double *)v209.i64 = v216;
                  if (fabs(*(double *)v211.i64) > *(double *)v209.i64) {
                    v211.i64[0] = vbslq_s8(v286, v209, v211).u64[0];
                  }
                }
              }
            }
            double v217 = *v160;
            double v218 = *(double *)(v159 + 16 * v158 + 8) - *(double *)v154.i64;
            uint64_t v219 = *((void *)v274 + 20) + 20 * (int)v170;
            uint64_t v220 = *(int *)(v219 + 4);
            uint64_t v221 = *(int *)(v219 + 8);
            float v222 = *(double *)v211.i64;
            uint64_t v223 = *((void *)v274 + 26);
            uint64_t v224 = v223 + 16 * v220;
            float v225 = *(double *)v154.i64;
            *(float *)(v224 + 4) = v225;
            *(float *)(v224 + 8) = v222;
            if (v218 > 0.0 && v218 >= *(double *)v153.i64)
            {
              double v227 = v217 - *(double *)v152.i64;
              float v228 = *(float *)(a1 + 56);
              double v229 = v228;
              BOOL v184 = v227 < (float)-v228;
              double v230 = v227 + v228;
              if (!v184) {
                double v230 = 0.0;
              }
              BOOL v87 = v227 <= v229;
              double v231 = v227 - v229;
              if (v87) {
                double v231 = v230;
              }
              *(double *)v151.i64 = -v231 / (v218 + *(float *)(a1 + 52));
              float v232 = *(float *)(a1 + 60);
              if (v232 != 0.0)
              {
                *(double *)v152.i64 = v232;
                if (fabs(*(double *)v151.i64) > *(double *)v152.i64)
                {
                  v153.i64[1] = v286.i64[1];
                  int8x16_t v151 = vbslq_s8(v286, v152, v151);
                }
              }
            }
            float v233 = *(double *)v151.i64;
            uint64_t v234 = v223 + 16 * v221;
            float v235 = v218;
            *(float *)(v234 + 4) = v235;
            *(float *)(v234 + 8) = v233;
            if (*(unsigned char *)(a1 + 324)) {
              xgboost::FeatureInteractionConstraintHost::SplitImpl(v288, v170, *(_DWORD *)v204 & 0x7FFFFFFF, v220, v221);
            }
          }
          uint64_t v155 = v156;
          BOOL v87 = v284 > v156++;
        }
        while (v87);
      }
      if (__p)
      {
        v291 = __p;
        operator delete(__p);
      }
      v298.__ptr_ = &v293;
      std::vector<xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
      (*(void (**)(uint64_t, uint64_t, xgboost::RegTree *))(*(void *)a1 + 104))(a1, a3, v274);
      v298.__ptr_ = 0;
      v299.__m_.__uint64_t sig = 0;
      *(void *)v299.__m_.__opaque = 0;
      v237 = *(int **)(a1 + 152);
      v238 = *(int **)(a1 + 160);
      if (v237 == v238)
      {
        uint64_t sig = 0;
      }
      else
      {
        uint64_t sig = 0;
        do
        {
          int v240 = *v237;
          int v241 = *(_DWORD *)(*((void *)v274 + 20) + 20 * *v237 + 4);
          if (v241 != -1)
          {
            v242 = *(char **)v299.__m_.__opaque;
            if ((unint64_t)sig >= *(void *)v299.__m_.__opaque)
            {
              ptr = (char *)v298.__ptr_;
              uint64_t v245 = (sig - (char *)v298.__ptr_) >> 2;
              unint64_t v246 = v245 + 1;
              if ((unint64_t)(v245 + 1) >> 62) {
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              }
              int64_t v247 = *(void *)v299.__m_.__opaque - (unint64_t)v298.__ptr_;
              if ((uint64_t)(*(void *)v299.__m_.__opaque - (unint64_t)v298.__ptr_) >> 1 > v246) {
                unint64_t v246 = v247 >> 1;
              }
              if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v248 = v246;
              }
              if (v248)
              {
                v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v299.__m_.__opaque, v248);
                ptr = (char *)v298.__ptr_;
                uint64_t sig = (char *)v299.__m_.__sig;
              }
              else
              {
                v249 = 0;
              }
              v250 = &v249[4 * v245];
              *(_DWORD *)v250 = v241;
              v243 = v250 + 4;
              while (sig != ptr)
              {
                int v251 = *((_DWORD *)sig - 1);
                sig -= 4;
                *((_DWORD *)v250 - 1) = v251;
                v250 -= 4;
              }
              v242 = &v249[4 * v248];
              v298.__ptr_ = v250;
              v299.__m_.__uint64_t sig = (uint64_t)v243;
              *(void *)v299.__m_.__opaque = v242;
              if (ptr)
              {
                operator delete(ptr);
                v242 = *(char **)v299.__m_.__opaque;
              }
            }
            else
            {
              *(_DWORD *)uint64_t sig = v241;
              v243 = sig + 4;
            }
            v299.__m_.__uint64_t sig = (uint64_t)v243;
            int v252 = *(_DWORD *)(*((void *)v274 + 20) + 20 * v240 + 8);
            if (v243 >= v242)
            {
              v253 = (char *)v298.__ptr_;
              uint64_t v254 = (v243 - (char *)v298.__ptr_) >> 2;
              unint64_t v255 = v254 + 1;
              if ((unint64_t)(v254 + 1) >> 62) {
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v256 = v242 - (char *)v298.__ptr_;
              if (v256 >> 1 > v255) {
                unint64_t v255 = v256 >> 1;
              }
              if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v257 = v255;
              }
              if (v257)
              {
                v258 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v299.__m_.__opaque, v257);
                v253 = (char *)v298.__ptr_;
                v243 = (char *)v299.__m_.__sig;
              }
              else
              {
                v258 = 0;
              }
              v259 = &v258[4 * v254];
              *(_DWORD *)v259 = v252;
              uint64_t sig = v259 + 4;
              while (v243 != v253)
              {
                int v260 = *((_DWORD *)v243 - 1);
                v243 -= 4;
                *((_DWORD *)v259 - 1) = v260;
                v259 -= 4;
              }
              v298.__ptr_ = v259;
              v299.__m_.__uint64_t sig = (uint64_t)sig;
              *(void *)v299.__m_.__opaque = &v258[4 * v257];
              if (v253) {
                operator delete(v253);
              }
            }
            else
            {
              *(_DWORD *)v243 = v252;
              uint64_t sig = v243 + 4;
            }
            v299.__m_.__uint64_t sig = (uint64_t)sig;
          }
          ++v237;
        }
        while (v237 != v238);
      }
      double v45 = v278;
      if (v281 != (char *)&v298) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v281, (char *)v298.__ptr_, (uint64_t)sig, (sig - (char *)v298.__ptr_) >> 2);
      }
      v261 = *(void **)(a1 + 176);
      uint64_t v262 = *(void *)(a1 + 184) - (void)v261;
      if (v262 >= 1) {
        memset(v261, 255, 4 * (((unint64_t)v262 >> 2) - ((unint64_t)v262 > 3)) + 4);
      }
      std::vector<int>::resize(v282, *((int *)v274 + 3));
      v264 = *(int **)(a1 + 152);
      v263 = *(int **)(a1 + 160);
      if (v263 != v264)
      {
        uint64_t v265 = 0;
        unint64_t v266 = v263 - v264;
        std::vector<int>::pointer v267 = v282->__begin_;
        if (v266 <= 1) {
          unint64_t v266 = 1;
        }
        do
        {
          v267[v264[v265]] = v265;
          ++v265;
        }
        while (v266 != v265);
      }
      if (v298.__ptr_)
      {
        v299.__m_.__uint64_t sig = (uint64_t)v298.__ptr_;
        operator delete(v298.__ptr_);
        v264 = *(int **)(a1 + 152);
        v263 = *(int **)(a1 + 160);
      }
      if (v263 != v264 && ++v275 < *(_DWORD *)(a1 + 28)) {
        continue;
      }
      goto LABEL_294;
    }
    uint64_t v54 = 0;
    uint64_t v280 = v283 + 1;
    while (1)
    {
      uint64_t v289 = *(int *)(*(void *)v281 + 4 * v54);
      int v55 = v282->__begin_[v289];
      int v296 = v54;
      int v297 = v55;
      if (v55 != v54) {
        dmlc::LogCheckFormat<int,int>();
      }
      uint64_t v56 = *(void *)(a1 + 432);
      if (*(void *)(a1 + 440) != v56) {
        break;
      }
LABEL_170:
      if (++v54 == v284) {
        goto LABEL_171;
      }
    }
    uint64_t v57 = 0;
    unint64_t v58 = (float *)&v293[80 * v54];
    unint64_t v59 = (float64x2_t *)(*(void *)(*(void *)(a1 + 376) + 16)
                        + 16 * *(unsigned int *)(**(void **)(a1 + 376) + 4 * (v54 * v280 + v283)));
    v285 = &v59->f64[1];
    double v60 = (unsigned int *)(v58 + 1);
    float v61 = v58 + 2;
    double v62 = v58 + 10;
    double v63 = (float64x2_t *)(v58 + 12);
    std::exception_ptr v64 = (float64x2_t *)(v58 + 16);
LABEL_51:
    BOOL v65 = xgboost::FeatureInteractionConstraintHost::Query(v288, v289, *(_DWORD *)(v56 + 4 * v57));
    uint64_t v56 = *v287;
    if (!v65) {
      goto LABEL_169;
    }
    double v72 = *(void **)(a1 + 376);
    uint64_t v73 = (unsigned int *)(*v72 + 4 * (v57 + v54 * v280));
    uint64_t v74 = *v73;
    LODWORD(v73) = v73[1];
    uint64_t v75 = (v73 - v74);
    if (v73 == v74) {
      goto LABEL_169;
    }
    double v76 = *v285;
    double v77 = *(float *)(a1 + 48);
    double v78 = 0.0;
    if (*v285 >= v77)
    {
      double v79 = v59->f64[0];
      float v80 = *(float *)(a1 + 60);
      if (v80 == 0.0)
      {
        float v81 = *(float *)(a1 + 56);
        if (v81 != 0.0)
        {
          double v82 = v81;
          BOOL v184 = v79 < (float)-v81;
          double v83 = v79 + v81;
          if (!v184) {
            double v83 = 0.0;
          }
          if (v79 > v82) {
            double v79 = v79 - v82;
          }
          else {
            double v79 = v83;
          }
        }
        double v78 = v79 * v79 / (v76 + *(float *)(a1 + 52));
      }
      else
      {
        if (v76 <= 0.0)
        {
          float v84 = *(float *)(a1 + 56);
          double v89 = v76 + *(float *)(a1 + 52);
          v66.i64[0] = 0;
        }
        else
        {
          float v84 = *(float *)(a1 + 56);
          double v85 = v84;
          double v86 = v79 + v84;
          if (v79 >= (float)-v84) {
            double v86 = 0.0;
          }
          BOOL v87 = v79 <= v85;
          double v88 = v79 - v85;
          if (v87) {
            double v88 = v86;
          }
          double v89 = v76 + *(float *)(a1 + 52);
          *(double *)v66.i64 = -v88 / v89;
          *(double *)v68.i64 = v80;
          if (fabs(*(double *)v66.i64) > *(double *)v68.i64) {
            v66.i64[0] = vbslq_s8(v286, v68, v66).u64[0];
          }
        }
        double v78 = -(v89 * (*(double *)v66.i64 * *(double *)v66.i64) + (v79 + v79) * *(double *)v66.i64);
        double v90 = v78 + v84 * fabs(*(double *)v66.i64);
        if (v84 != 0.0) {
          double v78 = v90;
        }
      }
    }
    uint64_t v91 = v72[2];
    uint64_t v92 = v72[1] + 4 * v74;
    unsigned int v93 = *(_DWORD *)(v56 + 4 * v57);
    unint64_t v94 = (float64x2_t *)(v91 + 16 * v74);
    uint64_t v95 = (float64x2_t *)__p;
    float64x2_t v96 = 0uLL;
    uint64_t v97 = v94;
    uint64_t v98 = (int *)v92;
    uint64_t v99 = v75;
    while (1)
    {
      float64x2_t v96 = vaddq_f64(v96, *v97);
      if (v96.f64[1] < v77) {
        goto LABEL_119;
      }
      float64x2_t v100 = vsubq_f64(*v59, v96);
      if (v100.f64[1] < v77) {
        goto LABEL_119;
      }
      double v101 = 0.0;
      double v102 = 0.0;
      if (v96.f64[1] >= v77)
      {
        float v103 = *(float *)(a1 + 60);
        if (v103 == 0.0)
        {
          float v104 = *(float *)(a1 + 56);
          if (v104 == 0.0)
          {
            double v102 = vmulq_f64(v96, v96).f64[0] / (v96.f64[1] + *(float *)(a1 + 52));
          }
          else
          {
            double v110 = v104;
            BOOL v184 = v96.f64[0] < (float)-v104;
            double v111 = v96.f64[0] + v104;
            if (!v184) {
              double v111 = 0.0;
            }
            if (v96.f64[0] > v110) {
              double v111 = v96.f64[0] - v110;
            }
            double v102 = v111 * v111 / (v96.f64[1] + *(float *)(a1 + 52));
          }
        }
        else
        {
          if (v96.f64[1] <= 0.0)
          {
            float v105 = *(float *)(a1 + 56);
            double v109 = v96.f64[1] + *(float *)(a1 + 52);
            v69.i64[0] = 0;
          }
          else
          {
            float v105 = *(float *)(a1 + 56);
            double v106 = v105;
            double v107 = v96.f64[0] + v105;
            if (v96.f64[0] >= (float)-v105) {
              double v107 = 0.0;
            }
            BOOL v87 = v96.f64[0] <= v106;
            double v108 = v96.f64[0] - v106;
            if (v87) {
              double v108 = v107;
            }
            double v109 = v96.f64[1] + *(float *)(a1 + 52);
            *(double *)v69.i64 = -v108 / v109;
            *(double *)v71.i64 = v103;
            if (fabs(*(double *)v69.i64) > *(double *)v71.i64) {
              int8x16_t v69 = vbslq_s8(v286, v71, v69);
            }
          }
          double v102 = -(v109 * (*(double *)v69.i64 * *(double *)v69.i64) + (v96.f64[0] + v96.f64[0]) * *(double *)v69.i64);
          if (v105 != 0.0) {
            double v102 = v102 + v105 * fabs(*(double *)v69.i64);
          }
        }
      }
      if (v100.f64[1] >= v77)
      {
        float v112 = *(float *)(a1 + 60);
        if (v112 == 0.0)
        {
          float v113 = *(float *)(a1 + 56);
          if (v113 == 0.0)
          {
            double v101 = vmulq_f64(v100, v100).f64[0] / (v100.f64[1] + *(float *)(a1 + 52));
          }
          else
          {
            double v119 = v113;
            BOOL v184 = v100.f64[0] < (float)-v113;
            double v120 = v100.f64[0] + v113;
            if (!v184) {
              double v120 = 0.0;
            }
            if (v100.f64[0] > v119) {
              double v120 = v100.f64[0] - v119;
            }
            double v101 = v120 * v120 / (v100.f64[1] + *(float *)(a1 + 52));
          }
        }
        else
        {
          if (v100.f64[1] <= 0.0)
          {
            float v114 = *(float *)(a1 + 56);
            double v118 = v100.f64[1] + *(float *)(a1 + 52);
            v67.i64[0] = 0;
          }
          else
          {
            float v114 = *(float *)(a1 + 56);
            double v115 = v114;
            double v116 = v100.f64[0] + v114;
            if (v100.f64[0] >= (float)-v114) {
              double v116 = 0.0;
            }
            BOOL v87 = v100.f64[0] <= v115;
            double v117 = v100.f64[0] - v115;
            if (v87) {
              double v117 = v116;
            }
            double v118 = v100.f64[1] + *(float *)(a1 + 52);
            *(double *)v67.i64 = -v117 / v118;
            *(double *)v70.i64 = v112;
            if (fabs(*(double *)v67.i64) > *(double *)v70.i64)
            {
              v71.i64[1] = v286.i64[1];
              int8x16_t v67 = vbslq_s8(v286, v70, v67);
            }
          }
          double v101 = -(v118 * (*(double *)v67.i64 * *(double *)v67.i64) + (v100.f64[0] + v100.f64[0]) * *(double *)v67.i64);
          if (v114 != 0.0) {
            double v101 = v101 + v114 * fabs(*(double *)v67.i64);
          }
        }
      }
      float v121 = v102 + v101 - v78;
      if (fabsf(v121) == INFINITY) {
        goto LABEL_119;
      }
      int v122 = *v98;
      float v123 = *v58;
      if ((*v60 & 0x7FFFFFFF) > v93) {
        break;
      }
      if (v123 < v121) {
        goto LABEL_118;
      }
LABEL_119:
      ++v98;
      ++v97;
      if (!--v99)
      {
        uint64_t v124 = (v75 - 1);
        if (v75 != 1)
        {
          unsigned int v125 = v75 - 2;
          float64x2_t v126 = 0uLL;
          while (1)
          {
            float64x2_t v126 = vaddq_f64(v126, v94[v124]);
            if (v126.f64[1] < v77) {
              goto LABEL_168;
            }
            float64x2_t v127 = vsubq_f64(*v59, v126);
            if (v127.f64[1] < v77) {
              goto LABEL_168;
            }
            double v128 = 0.0;
            double v129 = 0.0;
            if (v126.f64[1] >= v77)
            {
              float v130 = *(float *)(a1 + 60);
              if (v130 == 0.0)
              {
                float v131 = *(float *)(a1 + 56);
                if (v131 == 0.0)
                {
                  double v129 = vmulq_f64(v126, v126).f64[0] / (v126.f64[1] + *(float *)(a1 + 52));
                }
                else
                {
                  double v137 = v131;
                  BOOL v184 = v126.f64[0] < (float)-v131;
                  double v138 = v126.f64[0] + v131;
                  if (!v184) {
                    double v138 = 0.0;
                  }
                  if (v126.f64[0] > v137) {
                    double v138 = v126.f64[0] - v137;
                  }
                  double v129 = v138 * v138 / (v126.f64[1] + *(float *)(a1 + 52));
                }
              }
              else
              {
                if (v126.f64[1] <= 0.0)
                {
                  float v132 = *(float *)(a1 + 56);
                  double v136 = v126.f64[1] + *(float *)(a1 + 52);
                  v69.i64[0] = 0;
                }
                else
                {
                  float v132 = *(float *)(a1 + 56);
                  double v133 = v132;
                  double v134 = v126.f64[0] + v132;
                  if (v126.f64[0] >= (float)-v132) {
                    double v134 = 0.0;
                  }
                  BOOL v87 = v126.f64[0] <= v133;
                  double v135 = v126.f64[0] - v133;
                  if (v87) {
                    double v135 = v134;
                  }
                  double v136 = v126.f64[1] + *(float *)(a1 + 52);
                  *(double *)v69.i64 = -v135 / v136;
                  *(double *)v71.i64 = v130;
                  if (fabs(*(double *)v69.i64) > *(double *)v71.i64) {
                    int8x16_t v69 = vbslq_s8(v286, v71, v69);
                  }
                }
                double v129 = -(v136 * (*(double *)v69.i64 * *(double *)v69.i64)
                       + (v126.f64[0] + v126.f64[0]) * *(double *)v69.i64);
                if (v132 != 0.0) {
                  double v129 = v129 + v132 * fabs(*(double *)v69.i64);
                }
              }
            }
            if (v127.f64[1] >= v77)
            {
              float v139 = *(float *)(a1 + 60);
              if (v139 == 0.0)
              {
                float v140 = *(float *)(a1 + 56);
                if (v140 == 0.0)
                {
                  double v128 = vmulq_f64(v127, v127).f64[0] / (v127.f64[1] + *(float *)(a1 + 52));
                }
                else
                {
                  double v146 = v140;
                  BOOL v184 = v127.f64[0] < (float)-v140;
                  double v147 = v127.f64[0] + v140;
                  if (!v184) {
                    double v147 = 0.0;
                  }
                  if (v127.f64[0] > v146) {
                    double v147 = v127.f64[0] - v146;
                  }
                  double v128 = v147 * v147 / (v127.f64[1] + *(float *)(a1 + 52));
                }
              }
              else
              {
                if (v127.f64[1] <= 0.0)
                {
                  float v141 = *(float *)(a1 + 56);
                  double v145 = v127.f64[1] + *(float *)(a1 + 52);
                  v67.i64[0] = 0;
                }
                else
                {
                  float v141 = *(float *)(a1 + 56);
                  double v142 = v141;
                  double v143 = v127.f64[0] + v141;
                  if (v127.f64[0] >= (float)-v141) {
                    double v143 = 0.0;
                  }
                  BOOL v87 = v127.f64[0] <= v142;
                  double v144 = v127.f64[0] - v142;
                  if (v87) {
                    double v144 = v143;
                  }
                  double v145 = v127.f64[1] + *(float *)(a1 + 52);
                  *(double *)v67.i64 = -v144 / v145;
                  *(double *)v70.i64 = v139;
                  if (fabs(*(double *)v67.i64) > *(double *)v70.i64)
                  {
                    v71.i64[1] = v286.i64[1];
                    int8x16_t v67 = vbslq_s8(v286, v70, v67);
                  }
                }
                double v128 = -(v145 * (*(double *)v67.i64 * *(double *)v67.i64)
                       + (v127.f64[0] + v127.f64[0]) * *(double *)v67.i64);
                if (v141 != 0.0) {
                  double v128 = v128 + v141 * fabs(*(double *)v67.i64);
                }
              }
            }
            float v148 = v129 + v128 - v78;
            if (fabsf(v148) == INFINITY) {
              goto LABEL_168;
            }
            int v149 = *(_DWORD *)(v92 + 4 * v125);
            float v150 = *v58;
            if ((*v60 & 0x7FFFFFFF) > v93) {
              break;
            }
            if (v150 < v148) {
              goto LABEL_167;
            }
LABEL_168:
            --v125;
            if (!--v124) {
              goto LABEL_169;
            }
          }
          if (v150 > v148) {
            goto LABEL_168;
          }
LABEL_167:
          *unint64_t v58 = v148;
          *double v60 = v93 | 0x80000000;
          *float v61 = v149;
          *double v62 = 0;
          *double v63 = v127;
          *std::exception_ptr v64 = v126;
          v95[v54] = v127;
          goto LABEL_168;
        }
LABEL_169:
        if (++v57 >= (unint64_t)((*(void *)(a1 + 440) - v56) >> 2)) {
          goto LABEL_170;
        }
        goto LABEL_51;
      }
    }
    if (v123 > v121) {
      goto LABEL_119;
    }
LABEL_118:
    *unint64_t v58 = v121;
    *double v60 = v93;
    *float v61 = v122;
    *double v62 = 0;
    *double v63 = v96;
    *std::exception_ptr v64 = v100;
    v95[v54] = v96;
    goto LABEL_119;
  }
  v264 = *(int **)(a1 + 152);
  v263 = *(int **)(a1 + 160);
LABEL_294:
  while (v264 != v263)
  {
    uint64_t v268 = *v264++;
    uint64_t v269 = *((void *)a4 + 20) + 20 * (int)v268;
    *(float *)(v269 + 16) = *(float *)(*((void *)a4 + 26) + 16 * v268 + 8) * *(float *)(a1 + 20);
    *(void *)(v269 + 4) = -1;
  }
}

void sub_22E978AB0()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  JUMPOUT(0x22E978BA4);
}

void sub_22E978AC0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E978BA4);
}

void sub_22E978B24()
{
}

void sub_22E978B4C()
{
  uint64_t v1 = *(void **)(v0 - 184);
  if (v1)
  {
    *(void *)(v0 - 176) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x22E978BA4);
}

void sub_22E978B7C()
{
}

void xgboost::tree::CQHistMaker::ResetPosAndPropose(uint64_t a1, uint64_t a2, uint64_t (***a3)(void), int **a4, uint64_t a5)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v7 = (unint64_t *)(**a3)(a3);
  std::vector<int>::resize((std::vector<int> *)(a1 + 488), *(unsigned int *)(a5 + 24));
  uint64_t v8 = *(void **)(a1 + 488);
  uint64_t v9 = *(void *)(a1 + 496) - (void)v8;
  if (v9 >= 1) {
    memset(v8, 255, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  }
  double v77 = (std::vector<unsigned int> *)(a1 + 512);
  uint64_t v10 = *(void *)(a1 + 512);
  *(void *)(a1 + 520) = v10;
  uint64_t v11 = *a4;
  int v12 = a4[1];
  if (*a4 == v12)
  {
    uint64_t v25 = v10;
  }
  else
  {
    do
    {
      uint64_t v13 = *v11;
      if (xgboost::tree::BaseMaker::FMetaHelper::Type((xgboost::tree::BaseMaker::FMetaHelper *)(a1 + 464), *v11) == 2)
      {
        uint64_t v14 = *(char **)(a1 + 520);
        unint64_t v15 = *(char **)(a1 + 512);
        uint64_t v16 = (v14 - v15) >> 2;
        *(_DWORD *)(*(void *)(a1 + 488) + 4 * v13) = v16;
        unint64_t v17 = *(void *)(a1 + 528);
        if ((unint64_t)v14 >= v17)
        {
          unint64_t v19 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v17 - (void)v15;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 528, v21);
            uint64_t v14 = *(char **)(a1 + 520);
            unint64_t v15 = *(char **)(a1 + 512);
          }
          else
          {
            uint64_t v22 = 0;
          }
          unint64_t v23 = &v22[4 * v16];
          *(_DWORD *)unint64_t v23 = v13;
          double v18 = v23 + 4;
          while (v14 != v15)
          {
            int v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(void *)(a1 + 512) = v23;
          *(void *)(a1 + 520) = v18;
          *(void *)(a1 + 528) = &v22[4 * v21];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v14 = v13;
          double v18 = v14 + 4;
        }
        *(void *)(a1 + 520) = v18;
      }
      else
      {
        *(_DWORD *)(*(void *)(a1 + 488) + 4 * v13) = -2;
      }
      ++v11;
    }
    while (v11 != v12);
    uint64_t v25 = *(void *)(a1 + 520);
    uint64_t v10 = *(void *)(a1 + 512);
  }
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 736), ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2) * ((v25 - v10) >> 2));
  uint64_t v26 = *(unint64_t **)(a1 + 736);
  unint64_t v27 = *(unint64_t **)(a1 + 744);
  if (v26 == v27)
  {
    uint64_t v30 = *(void *)(a1 + 736);
  }
  else
  {
    float v28 = v26 + 5;
    do
    {
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::LimitSizeLevel(*v7, (uint64_t *)v28 - 1, v28, *(float *)(a1 + 84));
      std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)(v28 - 5), 1uLL);
      *(v28 - 2) = 0;
      v28[5] = v28[4];
      v28[2] = v28[1];
      uint64_t v29 = v28 + 12;
      v28 += 17;
    }
    while (v29 != v27);
    uint64_t v30 = *(void *)(a1 + 744);
    uint64_t v26 = *(unint64_t **)(a1 + 736);
  }
  uint64_t v31 = (uint64_t *)(a1 + 656);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 656), 0xF0F0F0F0F0F0F0F1 * ((v30 - (uint64_t)v26) >> 3));
  unsigned int v74 = xgboost::tree::TrainParam::MaxSketchSize(v32, *(float *)(a1 + 84), *(float *)(a1 + 88));
  uint64_t v33 = *(void *)(a1 + 744);
  double v76 = (void *)a1;
  uint64_t v34 = *(void *)(a1 + 736);
  if (v33 != v34)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    do
    {
      uint64_t v37 = *v31;
      uint64_t v38 = *v31 + v35;
      uint64_t v39 = (uint64_t *)(v38 + 16);
      if (v74 > (unint64_t)((uint64_t)(*(void *)(v38 + 24) - *(void *)(v38 + 16)) >> 4))
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v39, v74);
        if (*(void *)(v38 + 24) == *v39) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = *v39;
        }
        *(void *)(v37 + v35) = v40;
        uint64_t v33 = v76[93];
        uint64_t v34 = v76[92];
      }
      ++v36;
      v35 += 40;
    }
    while (v36 < 0xF0F0F0F0F0F0F0F1 * ((v33 - v34) >> 3));
  }
  uint64_t v41 = v76;
  uint64_t v42 = (void *)v76[71];
  uint64_t v43 = (void *)v76[70];
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (v42 - v43);
  if (v42 == v43)
  {
    uint64_t v50 = v76[72];
    double v45 = a3;
    if (0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v42) >> 3) >= 1 - v44)
    {
      *uint64_t v42 = 0;
      v42[1] = 0;
      v42[2] = 0;
      v76[71] = v42 + 3;
    }
    else
    {
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v43) >> 3);
      uint64_t v52 = 2 * v51;
      if (2 * v51 <= 1) {
        uint64_t v52 = 1;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      if (v53 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v54 = 3 * v53;
      int v55 = (char *)operator new(24 * v53);
      uint64_t v56 = &v55[24 * v44];
      *((void *)v56 + 1) = 0;
      *((void *)v56 + 2) = 0;
      *(void *)uint64_t v56 = 0;
      uint64_t v57 = &v55[8 * v54];
      uint64_t v41 = v76;
      v76[70] = v56;
      v76[71] = v56 + 24;
      v76[72] = v57;
      if (v42) {
        operator delete(v42);
      }
    }
  }
  else
  {
    double v45 = a3;
    if (v44 >= 2)
    {
      uint64_t v46 = v43 + 3;
      if (v42 != v43 + 3)
      {
        uint64_t v47 = (void *)v76[71];
        do
        {
          uint64_t v49 = (void *)*(v47 - 3);
          v47 -= 3;
          uint64_t v48 = v49;
          if (v49)
          {
            *(v42 - 2) = v48;
            operator delete(v48);
          }
          uint64_t v42 = v47;
        }
        while (v47 != v46);
      }
      uint64_t v41 = v76;
      v76[71] = v46;
    }
  }
  uint64_t v58 = *(void *)(**v45)(v45);
  v82.__ptr_ = 0;
  v83.__m_.__uint64_t sig = 850045863;
  memset(v83.__m_.__opaque, 0, sizeof(v83.__m_.__opaque));
  if (v58)
  {
    uint64_t v59 = 0;
    uint64_t v60 = v41[25];
    uint64_t v61 = *(void *)(a5 + 160);
    do
    {
      int v62 = *(_DWORD *)(v60 + 4 * v59);
      uint64_t v63 = v62 ^ (v62 >> 31);
      int v64 = *(_DWORD *)(v61 + 20 * v63 + 4);
      if (v64 == -1)
      {
        if (*(_DWORD *)(v61 + 20 * (int)v63 + 8) == -1) {
          *(_DWORD *)(v60 + 4 * v59) = ~v63;
        }
      }
      else
      {
        int v65 = v62 >> 31;
        if ((*(_DWORD *)(v61 + 20 * (int)v63 + 12) & 0x80000000) != 0) {
          int v66 = v64 ^ v65;
        }
        else {
          int v66 = *(_DWORD *)(v61 + 20 * (int)v63 + 8) ^ v65;
        }
        *(_DWORD *)(v60 + 4 * v59) = v66;
      }
      ++v59;
    }
    while (v58 != v59);
  }
  dmlc::OMPException::Rethrow(&v82);
  std::mutex::~mutex(&v83);
  std::exception_ptr::~exception_ptr(&v82);
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v77, v41[65], (char *)v41[67], (char *)v41[68], (uint64_t)(v41[68] - v41[67]) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  int8x16_t v67 = (int *)v41[64];
  int8x16_t v68 = (int *)v41[65];
  if (v67 == v68)
  {
    int8x16_t v68 = (int *)v41[64];
  }
  else
  {
    int8x16_t v69 = v67 + 1;
    do
    {
      if (v69 == v68) {
        goto LABEL_78;
      }
      int v70 = *(v69 - 1);
      int v71 = *v69++;
    }
    while (v70 != v71);
    double v72 = v69 - 2;
    while (v69 != v68)
    {
      int v73 = v70;
      int v70 = *v69;
      if (v73 != *v69)
      {
        v72[1] = v70;
        ++v72;
      }
      ++v69;
    }
    int8x16_t v68 = v72 + 1;
  }
LABEL_78:
  std::vector<unsigned int>::resize(v77, v68 - v67);
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(void)))(*v45)[11])(&v80, v45);
  unint64_t v79[2] = v80;
  v79[3] = v81;
  if (v81) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v79, 0);
}

void sub_22E97A448()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v4);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22E97A578);
}

void sub_22E97A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::exception_ptr a62)
{
  std::mutex::~mutex(v63);
  std::exception_ptr::~exception_ptr(&v67);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  _Unwind_Resume(a1);
}

void sub_22E97A540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void xgboost::tree::CQHistMaker::InitWorkSet(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  if (*(void *)(a1 + 456) != a2)
  {
    std::vector<float>::resize(a1 + 464, (2 * *(_DWORD *)(a3 + 24)));
    uint64_t v6 = *(void **)(a1 + 464);
    uint64_t v7 = *(void *)(a1 + 472) - (void)v6;
    if (v7 >= 1) {
      memset_pattern16(v6, &unk_22EA1DB80, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)a2 + 88))(&v45);
    long long v43 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
    if (v45.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&__n, 0);
  }
  uint64_t v8 = *(void *)(a1 + 472) - *(void *)(a1 + 464);
  if (v8) {
    uint64_t v9 = *(void *)(a1 + 464);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v8 >> 2;
  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float *(*)(float *, float *, int), void, void))(*(void *)Engine + 8))(Engine, v9, 4, v10, rabit::op::Reducer<rabit::op::Max,float>, 0, 0);
  float v12 = *(float *)(a1 + 80);
  unint64_t begin = (unint64_t)a4->__begin_;
  a4->__end_ = a4->__begin_;
  if (*(void *)(a1 + 472) == *(void *)(a1 + 464))
  {
    uint64_t v27 = begin;
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = v14 >> 1;
      if (xgboost::tree::BaseMaker::FMetaHelper::Type((xgboost::tree::BaseMaker::FMetaHelper *)(a1 + 464), v14 >> 1))
      {
        std::vector<unsigned int>::pointer end = a4->__end_;
        value = a4->__end_cap_.__value_;
        if (end >= value)
        {
          std::vector<unsigned int>::pointer v19 = a4->__begin_;
          uint64_t v20 = end - a4->__begin_;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = (char *)value - (char *)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v23);
            std::vector<unsigned int>::pointer v19 = a4->__begin_;
            std::vector<unsigned int>::pointer end = a4->__end_;
          }
          else
          {
            int v24 = 0;
          }
          uint64_t v25 = (unsigned int *)&v24[4 * v20];
          *uint64_t v25 = v15;
          double v18 = v25 + 1;
          while (end != v19)
          {
            unsigned int v26 = *--end;
            *--uint64_t v25 = v26;
          }
          a4->__begin_ = v25;
          a4->__end_ = v18;
          a4->__end_cap_.__value_ = (unsigned int *)&v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer end = v15;
          double v18 = end + 1;
        }
        a4->__end_ = v18;
      }
      v14 += 2;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 2);
    unint64_t begin = (unint64_t)a4->__begin_;
    uint64_t v27 = (uint64_t)a4->__end_;
  }
  uint64_t v28 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(begin, v27, v28);
  std::vector<unsigned int>::resize(a4, (float)(v12 * (float)(unint64_t)((uint64_t)(v27 - begin) >> 2)));
  memset(&v45, 0, sizeof(v45));
  *(void *)&long long v43 = &unk_26E2482F0;
  *((void *)&v43 + 1) = &v45;
  uint64_t v44 = 0;
  uint64_t v30 = rabit::engine::GetEngine(v29);
  uint64_t v31 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)v30 + 64))(v30);
  if (!v31)
  {
    std::string::size_type __n = a4->__end_ - a4->__begin_;
    uint64_t v31 = (rabit::engine *)(*(uint64_t (**)(long long *, std::string::size_type *, uint64_t))(v43 + 8))(&v43, &__n, 8);
    if (__n) {
      uint64_t v31 = (rabit::engine *)(*(uint64_t (**)(long long *, std::vector<unsigned int>::pointer, int64_t))(v43 + 8))(&v43, a4->__begin_, (char *)a4->__end_ - (char *)a4->__begin_);
    }
  }
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  std::string::size_type __n = size;
  uint64_t v33 = rabit::engine::GetEngine(v31);
  uint64_t v34 = (rabit::engine *)(*(uint64_t (**)(void *, std::string::size_type *, uint64_t, void))(*(void *)v33 + 16))(v33, &__n, 8, 0);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = v45.__r_.__value_.__l.__size_;
  }
  if (v35 != __n)
  {
    std::string::resize(&v45, __n, 0);
    std::string::size_type v35 = __n;
  }
  if (v35)
  {
    int v36 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    std::string::size_type v37 = v45.__r_.__value_.__r.__words[0];
    uint64_t v38 = rabit::engine::GetEngine(v34);
    if (v36 >= 0) {
      uint64_t v39 = &v45;
    }
    else {
      uint64_t v39 = (std::string *)v37;
    }
    (*(void (**)(void *, std::string *, std::string::size_type, void))(*(void *)v38 + 16))(v38, v39, v35, 0);
  }
  std::string::size_type __n = 0;
  if ((*(uint64_t (**)(long long *, std::string::size_type *, uint64_t))v43)(&v43, &__n, 8) == 8)
  {
    std::string::size_type v40 = __n;
    std::vector<unsigned int>::resize(a4, __n);
    if (__n) {
      (*(void (**)(long long *, std::vector<unsigned int>::pointer, std::string::size_type))v43)(&v43, a4->__begin_, 4 * v40);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

void sub_22E97AC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::CQHistMaker::ResetPositionAfterSplit(xgboost::tree::CQHistMaker *this, xgboost::DMatrix *a2, const xgboost::RegTree *a3)
{
}

void *xgboost::tree::CQHistMaker::CreateHist(uint64_t a1, uint64_t a2, uint64_t (***a3)(void), uint64_t *a4, uint64_t a5)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v34 = a3;
  uint64_t v9 = (**a3)(a3);
  std::vector<int>::resize((std::vector<int> *)(a1 + 488), *(unsigned int *)(a5 + 24));
  uint64_t v10 = *(void *)(a1 + 488);
  uint64_t v11 = *(void *)(a1 + 496) - v10;
  if (v11 >= 1) {
    memset(*(void **)(a1 + 488), 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t v14 = v13 - *a4;
  if (v13 != *a4)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v14 >> 2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    do
    {
      *(_DWORD *)(v10 + 4 * *(unsigned int *)(v12 + 4 * v15)) = v15;
      ++v15;
    }
    while (v16 != v15);
  }
  unint64_t v17 = *(_OWORD **)(a1 + 376);
  double v18 = *(_OWORD **)(a1 + 384);
  if (v18 == v17)
  {
    if (*(_OWORD **)(a1 + 392) == v18)
    {
      unint64_t v21 = operator new(0x28uLL);
      _OWORD *v21 = 0u;
      v21[1] = 0u;
      *((void *)v21 + 4) = 0;
      *(void *)(a1 + 376) = v21;
      *(void *)(a1 + 384) = (char *)v21 + 40;
      *(void *)(a1 + 392) = (char *)v21 + 40;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *((void *)v18 + 4) = 0;
      *double v18 = 0u;
      v18[1] = 0u;
      *(void *)(a1 + 384) = (char *)v18 + 40;
    }
  }
  else if (0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)v17) >> 3) >= 2)
  {
    std::vector<unsigned int>::pointer v19 = (_OWORD *)((char *)v17 + 40);
    while (v18 != v19)
    {
      uint64_t v20 = (void *)*((void *)v18 - 3);
      if (v20)
      {
        *((void *)v18 - 2) = v20;
        operator delete(v20);
      }
      double v18 = (_OWORD *)((char *)v18 - 40);
    }
    *(void *)(a1 + 384) = v19;
  }
  uint64_t v22 = *(void **)(a1 + 376);
  unint64_t v23 = (unsigned char *)v22[2];
  int v24 = (unsigned char *)v22[3];
  if (v23 != v24)
  {
    bzero(v23, (v24 - v23) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = *(void **)(a1 + 376);
  }
  if (*(void *)(a1 + 336) == *(void *)(a1 + 328)) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(void *)(a1 + 328);
  }
  *uint64_t v22 = v25;
  uint64_t v26 = *(void *)(a1 + 352);
  uint64_t v27 = *(void *)(a1 + 360) - v26;
  if (!v27) {
    uint64_t v26 = 0;
  }
  v22[1] = v26;
  long long v35 = 0uLL;
  std::vector<xgboost::tree::GradStats>::resize((uint64_t)(v22 + 2), v27 >> 2, &v35);
  uint64_t v28 = *(void *)(*(void *)(a1 + 376) + 16);
  uint64_t v29 = *(void *)(*(void *)(a1 + 376) + 24);
  uint64_t v30 = v29 - v28;
  if (v29 == v28) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void **)(*(void *)(a1 + 376) + 16);
  }
  float v32 = operator new(0x38uLL);
  *float v32 = &unk_26E24B288;
  v32[1] = a1;
  v32[2] = &v34;
  v32[3] = a4;
  v32[4] = a2;
  v32[5] = v9;
  v32[6] = a5;
  void v36[3] = v32;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 400), v31, (const char *)0x10, v30 >> 4, (void (*)(void *))rabit::InvokeLambda, v36);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v36);
}

void sub_22E97AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::BaseMaker::~BaseMaker(void **this)
{
  *this = &unk_26E24B228;
  size_t v2 = this + 28;
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  uint64_t v7 = this + 34;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = this + 31;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v3 = this[25];
  if (v3)
  {
    this[26] = v3;
    operator delete(v3);
  }
  std::exception_ptr v4 = this[22];
  if (v4)
  {
    this[23] = v4;
    operator delete(v4);
  }
  size_t v5 = this[19];
  if (v5)
  {
    this[20] = v5;
    operator delete(v5);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v6 = this[12];
  if (v6)
  {
    this[13] = v6;
    operator delete(v6);
  }
}

const char *xgboost::tree::HistMaker::Name(xgboost::tree::HistMaker *this)
{
  return "grow_histmaker";
}

void xgboost::tree::HistMaker::InitWorkSet(int a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::resize(this, *(unsigned int *)(a3 + 24));
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  uint64_t v7 = (char *)end - (char *)this->__begin_;
  if (end != this->__begin_)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v9 != v8);
  }
}

void rabit::SerializeReducerFuncImpl<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v17 = 0;
      long long v15 = 0u;
      *(_OWORD *)unint64_t v16 = 0u;
      uint64_t v14 = 0;
      long long v12 = 0u;
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      v11[0] = (uint64_t (**)(void, uint64_t, uint64_t))&unk_26E248458;
      v11[1] = (uint64_t (**)(void, uint64_t, uint64_t))(a1 + v6);
      v11[2] = (uint64_t (**)(void, uint64_t, uint64_t))v7;
      void v11[3] = 0;
      v9[0] = (uint64_t (**)(void, uint64_t, uint64_t))&unk_26E248458;
      v9[1] = (uint64_t (**)(void, uint64_t, uint64_t))(a2 + v6);
      unint64_t v9[2] = (uint64_t (**)(void, uint64_t, uint64_t))v7;
      uint64_t v10 = 0;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>((uint64_t *)&v15, v11);
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>((uint64_t *)&v12, v9);
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Reduce((uint64_t)&v12, (uint64_t)&v15, v7);
      uint64_t v10 = 0;
      v9[0][1](v9, (uint64_t)&v12 + 8, 8);
      if (*((void *)&v12 + 1)) {
        v9[0][1](v9, v12, 16 * *((void *)&v12 + 1));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
      v6 += v7;
      --v8;
    }
    while (v8);
  }
}

void sub_22E97B254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>(uint64_t *a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  if ((**a2)(a2, (uint64_t)(a1 + 1), 8) != 8) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v4 = a1[1];
  if (v4 > (a1[3] - a1[2]) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 2), v4);
    unint64_t v4 = a1[1];
    if (a1[3] == a1[2]) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a1[2];
    }
    *a1 = v5;
  }
  if (v4)
  {
    if ((**a2)(a2, *a1, 16 * v4) != 16 * a1[1]) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
}

void sub_22E97B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::BaseMaker::GetSplitSet(int *a1, int *a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  std::vector<unsigned int>::pointer begin = a4->__begin_;
  a4->__end_ = a4->__begin_;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    p_end_cap = &a4->__end_cap_;
    do
    {
      uint64_t v10 = *(void *)(a3 + 160);
      if (*(_DWORD *)(v10 + 20 * *v8 + 4) != -1)
      {
        int v11 = *(_DWORD *)(v10 + 20 * *v8 + 12) & 0x7FFFFFFF;
        if (begin >= p_end_cap->__value_)
        {
          std::vector<unsigned int>::pointer v13 = a4->__begin_;
          uint64_t v14 = begin - a4->__begin_;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = (char *)p_end_cap->__value_ - (char *)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v17);
            uint64_t v19 = v18;
            std::vector<unsigned int>::pointer v13 = a4->__begin_;
            std::vector<unsigned int>::pointer begin = a4->__end_;
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (int *)(v17 + 4 * v14);
          int *v20 = v11;
          long long v12 = (unsigned int *)(v20 + 1);
          while (begin != v13)
          {
            int v21 = *--begin;
            *--uint64_t v20 = v21;
          }
          a4->__begin_ = (std::vector<unsigned int>::pointer)v20;
          a4->__end_ = v12;
          a4->__end_cap_.__value_ = (unsigned int *)(v17 + 4 * v19);
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          unsigned int *begin = v11;
          long long v12 = begin + 1;
        }
        a4->__end_ = v12;
        std::vector<unsigned int>::pointer begin = v12;
      }
      ++v8;
    }
    while (v8 != a2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::vector<unsigned int>::pointer v22 = a4->__begin_;
  std::vector<unsigned int>::pointer end = a4->__end_;
  if (a4->__begin_ == end)
  {
    std::vector<unsigned int>::pointer end = a4->__begin_;
  }
  else
  {
    std::vector<unsigned int>::pointer v24 = v22 + 1;
    while (v24 != end)
    {
      unsigned int v25 = *(v24 - 1);
      int v26 = *v24++;
      if (v25 == v26)
      {
        std::vector<unsigned int>::pointer v27 = v24 - 2;
        while (v24 != end)
        {
          unsigned int v28 = v25;
          unsigned int v25 = *v24;
          if (v28 != *v24)
          {
            v27[1] = v25;
            ++v27;
          }
          ++v24;
        }
        std::vector<unsigned int>::pointer end = v27 + 1;
        break;
      }
    }
  }
  std::vector<unsigned int>::resize(a4, end - v22);
}

void std::vector<xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  size_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 8);
        if (v6)
        {
          *((void *)v4 - 7) = v6;
          operator delete(v6);
        }
        v4 -= 80;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t xgboost::tree::BaseMaker::FMetaHelper::Type(xgboost::tree::BaseMaker::FMetaHelper *this, int a2)
{
  unint64_t v2 = (2 * a2) | 1u;
  if ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 2 <= v2) {
    dmlc::LogCheckFormat<unsigned int,unsigned long>();
  }
  float v3 = *(float *)(*(void *)this + 4 * (2 * a2));
  if (*(float *)(*(void *)this + 4 * v2) == (float)-v3) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3 == -3.4028e38) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_22E97B9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::TrainParam::MaxSketchSize(xgboost::tree::TrainParam *this, float a2, float a3)
{
  unsigned int v5 = (float)(a3 / a2);
  int v4 = 0;
  if (!v5) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  return v5;
}

void sub_22E97BB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void rabit::SerializeReduceClosure<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>::Invoke(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v4 = (void (*)(uint64_t))a1[3];
  if (v4) {
    v4(a1[4]);
  }
  if (a1[2])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (uint64_t **)a1[5];
      int v8 = *((char *)v7 + 23);
      if (v8 < 0)
      {
        uint64_t v7 = (uint64_t **)*v7;
        BOOL v9 = *(void *)(a1[5] + 8) == 0;
      }
      else
      {
        BOOL v9 = v8 == 0;
      }
      if (v9) {
        uint64_t v7 = 0;
      }
      uint64_t v11 = *a1;
      unint64_t v10 = a1[1];
      uint64_t v14 = (void (**)(void **, void, uint64_t))&unk_26E248458;
      uint64_t v15 = (uint64_t)v7 + v10 * v6;
      unint64_t v16 = v10;
      uint64_t v17 = 0;
      long long v12 = (void *)(v11 + v5);
      rabit::utils::Assert((rabit::utils *)(v10 > 7), "write position exceed fixed buffer size", a3);
      *(void *)(v15 + v17) = v12[1];
      v17 += 8;
      uint64_t v13 = v12[1];
      if (v13) {
        v14[1]((void **)&v14, *v12, 16 * v13);
      }
      ++v6;
      v5 += 40;
    }
    while (v6 < a1[2]);
  }
}

void std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_26E24B288;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E24B288;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)(a1 + 8);
  long long v3 = (void *)v2[77];
  int v4 = (void *)v2[76];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v3 - v4);
  if (v3 == v4)
  {
    uint64_t v10 = v2[78];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v3) >> 3) >= 1 - v5)
    {
      void *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      v2[77] = v3 + 3;
    }
    else
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v4) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= 1) {
        uint64_t v12 = 1;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 3 * v13;
      uint64_t v15 = (char *)operator new(24 * v13);
      unint64_t v16 = &v15[24 * v5];
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)unint64_t v16 = 0;
      v2[76] = v16;
      v2[77] = v16 + 24;
      v2[78] = &v15[8 * v14];
      if (v3) {
        operator delete(v3);
      }
    }
  }
  else if (v5 >= 2)
  {
    unint64_t v6 = v4 + 3;
    if (v3 != v4 + 3)
    {
      uint64_t v7 = (void *)v2[77];
      do
      {
        BOOL v9 = (void *)*(v7 - 3);
        v7 -= 3;
        int v8 = v9;
        if (v9)
        {
          *(v3 - 2) = v8;
          operator delete(v8);
        }
        long long v3 = v7;
      }
      while (v7 != v6);
    }
    v2[77] = v6;
  }
  (*(void (**)(std::exception_ptr *__return_ptr))(***(void ***)(a1 + 16) + 88))(&v18);
  v17[2] = v18;
  v17[3].__ptr_ = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v17, 0);
}

void sub_22E97C9DC()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E97CA7CLL);
}

void sub_22E97C9E8()
{
  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E97CA7CLL);
}

void sub_22E97C9F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::exception_ptr a40)
{
  std::mutex::~mutex(v40);
  std::exception_ptr::~exception_ptr(&a40);
  std::mutex::~mutex(v41);
  std::exception_ptr::~exception_ptr(&v42);
  JUMPOUT(0x22E97CA7CLL);
}

void sub_22E97CA28()
{
}

void sub_22E97CA30()
{
}

void sub_22E97CA50()
{
}

uint64_t std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void xgboost::tree::CQHistMaker::HistEntry::Add(uint64_t a1, __n128 a2, float32x2_t a3, float32_t a4)
{
  float v4 = a2.n128_f32[0];
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  a2.n128_u32[0] = *(_DWORD *)(*(void *)a1 + 4 * v6);
  if (a2.n128_f32[0] <= v4)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (v6 < v7)
    {
      int v8 = (unsigned __int32 *)(*(void *)a1 + 4 * v6);
      while (1)
      {
        a2.n128_u32[0] = *v8;
        if (*(float *)v8 > v4) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        *(_DWORD *)(a1 + 24) = v6;
        ++v8;
        if (v7 == v6) {
          goto LABEL_9;
        }
      }
    }
    if (v6 == v7)
    {
LABEL_9:
      uint64_t v10 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a2);
      if (*(int *)(v10 + 4) >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v19, (uint64_t)__p, 300, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"fv=", 3);
        unint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", hist.size=", 12);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v19);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        unsigned int v9 = *(_DWORD *)(a1 + 16);
      }
      if (v9)
      {
        for (unint64_t i = 0; i < v9; ++i)
        {
          if (*(int *)(v10 + 4) >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
            xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v19, (uint64_t)__p, 302, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"hist[", 5);
            unint64_t v13 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]=", 2);
            std::ostream::operator<<();
            xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v19);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
            unsigned int v9 = *(_DWORD *)(a1 + 16);
          }
        }
      }
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v19);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
      uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"fv=", 3);
      unint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", hist.last=", 12);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v19);
    }
    else
    {
      a3.f32[1] = a4;
      *(float64x2_t *)(*(void *)(a1 + 8) + 16 * v6) = vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 8)+ 16 * v6), vcvtq_f64_f32(a3));
    }
  }
  else
  {
    a3.f32[1] = a4;
    *(float64x2_t *)(*(void *)(a1 + 8) + 16 * v6) = vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 8) + 16 * v6), vcvtq_f64_f32(a3));
  }
}

void sub_22E97CD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::DMatrixProxy::SetArrayData(xgboost::data::DMatrixProxy *this, const char *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_22E97D078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::DMatrixProxy::SetCSRData(xgboost::data::DMatrixProxy *this, const char *a2, const char *a3, const char *a4, unsigned int a5, char a6)
{
  v10[7] = *MEMORY[0x263EF8340];
  if ((a6 & 1) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/proxy_dmatrix.cc");
    unsigned int v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: on_host", 21);
    unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Not implemented on device.", 26);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v10);
  }
  operator new();
}

void sub_22E97D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void xgboost::data::ArrayAdapter::~ArrayAdapter(xgboost::data::ArrayAdapter *this)
{
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::ArrayAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::ArrayAdapterBatch>::Next(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    *(_DWORD *)(a1 + 8) = 1;
  }
  return v1 == 0;
}

uint64_t xgboost::data::ArrayAdapter::Value(xgboost::data::ArrayAdapter *this)
{
  return (uint64_t)this + 16;
}

void xgboost::ArrayInterface<1,true>::ArrayInterface()
{
}

void sub_22E97D5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::CSRArrayAdapter::~CSRArrayAdapter(xgboost::data::CSRArrayAdapter *this)
{
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSRArrayAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSRArrayAdapterBatch>::Next(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    *(_DWORD *)(a1 + 8) = 1;
  }
  return v1 == 0;
}

uint64_t xgboost::data::CSRArrayAdapter::Value(xgboost::data::CSRArrayAdapter *this)
{
  return (uint64_t)this + 16;
}

void std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unique_ptr<xgboost::data::ArrayAdapter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::ArrayAdapter>>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::ArrayAdapter>>::create_from_data(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  std::string *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unique_ptr<xgboost::data::CSRArrayAdapter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::CSRArrayAdapter>>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::CSRArrayAdapter>>::create_from_data(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  std::string *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t xgboost::gbm::__dmlc_registry_file_tag_gbtree__(xgboost::gbm *this)
{
  return 0;
}

void xgboost::gbm::GBTree::Configure(uint64_t a1, std::string **a2)
{
  float v4 = (void *)(a1 + 336);
  if ((std::string **)(a1 + 336) == a2) {
    goto LABEL_16;
  }
  uint64_t v6 = *a2;
  unint64_t v5 = (long long *)a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a2) >> 4);
  int v8 = *(std::string **)(a1 + 336);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - (void)v8) >> 4) < v7)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 336));
    if (v7 > 0x555555555555555) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 336)) >> 4);
    if (v9 <= v7) {
      unint64_t v9 = v7;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 336)) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](v4, v10);
    unint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1 + 352, (long long *)v6, v5, *(std::string **)(a1 + 344));
    goto LABEL_12;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 344) - (void)v8) >> 4) < v7)
  {
    uint64_t v12 = (std::string *)((char *)v6 + 16 * ((uint64_t)(*(void *)(a1 + 344) - (void)v8) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(*a2, v12, v8);
    unint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1 + 352, (long long *)v12, v5, *(std::string **)(a1 + 344));
LABEL_12:
    *(void *)(a1 + 344) = v11;
    goto LABEL_16;
  }
  unint64_t v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(*a2, a2[1], v8);
  for (uint64_t i = *(void *)(a1 + 344);
        (std::string *)i != v13;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 352, i))
  {
    i -= 48;
  }
  *(void *)(a1 + 344) = v13;
LABEL_16:
  uint64_t v15 = (unsigned __int8 *)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 288), *(void *)(a1 + 296));
  }
  else
  {
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    v58.__r_.__value_.__r.__words[2] = *(void *)(a1 + 304);
  }
  xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v57, (unsigned char *)(a1 + 280), (uint64_t *)a2);
  std::vector<unsigned int> __p = v57;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(void *)(a1 + 208) == *(void *)(a1 + 200))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    xgboost::gbm::GBTreeModelParam::__MANAGER__(v16);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD71E40, a1 + 40, (uint64_t)*a2, (uint64_t)a2[1], 0, (uint64_t *)&__p, 0);
    v49[0] = &__p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  }
  if (*(_DWORD *)(a1 + 312) == 1)
  {
    char v18 = *(void **)(a1 + 232);
    uint64_t v17 = (void *)(a1 + 224);
    if (v18 == *(void **)(a1 + 224))
    {
      uint64_t v19 = *(uint64_t **)(a1 + 200);
      uint64_t v20 = *(uint64_t **)(a1 + 208);
      if (v19 != v20)
      {
        int v21 = (void *)(a1 + 240);
        do
        {
          if ((unint64_t)v18 >= *v21)
          {
            uint64_t v23 = ((uint64_t)v18 - *v17) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = *v21 - *v17;
            uint64_t v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
              uint64_t v25 = v23 + 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            uint64_t v55 = a1 + 240;
            if (v26) {
              std::vector<unsigned int>::pointer v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 240, v26);
            }
            else {
              std::vector<unsigned int>::pointer v27 = 0;
            }
            unsigned int v28 = &v27[8 * v23];
            std::vector<unsigned int> __p = v27;
            uint64_t v52 = v28;
            uint64_t v54 = &v27[8 * v26];
            uint64_t v29 = *v19;
            *uint64_t v19 = 0;
            *(void *)unsigned int v28 = v29;
            unint64_t v53 = v28 + 8;
            std::vector<std::unique_ptr<xgboost::RegTree>>::__swap_out_circular_buffer((uint64_t *)(a1 + 224), &__p);
            char v18 = *(void **)(a1 + 232);
            std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(&__p);
          }
          else
          {
            uint64_t v22 = *v19;
            *uint64_t v19 = 0;
            *v18++ = v22;
            *(void *)(a1 + 232) = v18;
          }
          *(void *)(a1 + 232) = v18;
          ++v19;
        }
        while (v19 != v20);
      }
      std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100]((void *)(a1 + 200));
      *(_DWORD *)(a1 + 40) = 0;
      *(void *)(a1 + 256) = *(void *)(a1 + 248);
      uint64_t v15 = (unsigned __int8 *)(a1 + 288);
    }
  }
  uint64_t v30 = *(void *)(a1 + 384);
  if (!v30)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "cpu_predictor");
    uint64_t v31 = xgboost::Predictor::Create((uint64_t)&__p, *(void *)(a1 + 16));
    uint64_t v32 = *(void *)(a1 + 384);
    *(void *)(a1 + 384) = v31;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(__p);
    }
    uint64_t v30 = *(void *)(a1 + 384);
  }
  (*(void (**)(uint64_t, std::string **))(*(void *)v30 + 16))(v30, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "GBTree");
  std::string::operator=((std::string *)(a1 + 392), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = *a2;
  long long v35 = a2[1];
  if (*a2 == v35)
  {
LABEL_58:
    *(unsigned char *)(a1 + 329) = 0;
    goto LABEL_59;
  }
  while (1)
  {
    int v36 = SHIBYTE(v34->__r_.__value_.__r.__words[2]);
    if (v36 < 0) {
      break;
    }
    std::string::size_type v37 = v34;
    if (v36 == 7) {
      goto LABEL_53;
    }
LABEL_57:
    v34 += 2;
    if (v34 == v35) {
      goto LABEL_58;
    }
  }
  if (v34->__r_.__value_.__l.__size_ != 7) {
    goto LABEL_57;
  }
  std::string::size_type v37 = (std::string *)v34->__r_.__value_.__r.__words[0];
LABEL_53:
  int data = (int)v37->__r_.__value_.__l.__data_;
  int v39 = *(_DWORD *)((char *)v37->__r_.__value_.__r.__words + 3);
  if (data != 1633972341 || v39 != 1919251553) {
    goto LABEL_57;
  }
  *(unsigned char *)(a1 + 329) = 1;
  if (!*(unsigned char *)(a1 + 328))
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v33) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)v49, 82, 1);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
      if (v50 < 0) {
        operator delete(v49[0]);
      }
    }
    *(unsigned char *)(a1 + 328) = 1;
  }
LABEL_59:
  xgboost::gbm::GBTree::ConfigureUpdaters((xgboost::gbm::GBTree *)a1, v33);
  uint64_t v41 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  uint64_t v43 = *(unsigned __int8 *)(a1 + 311);
  int v44 = (char)v43;
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(a1 + 296);
  }
  if (size == v43)
  {
    if (v44 >= 0) {
      std::string v45 = v15;
    }
    else {
      std::string v45 = *(unsigned __int8 **)v15;
    }
    if ((*((unsigned char *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v58.__r_.__value_.__l.__data_, v45, v58.__r_.__value_.__l.__size_)) {
        goto LABEL_80;
      }
    }
    else if (*((unsigned char *)&v58.__r_.__value_.__s + 23))
    {
      uint64_t v46 = &v58;
      while (v46->__r_.__value_.__s.__data_[0] == *v45)
      {
        uint64_t v46 = (std::string *)((char *)v46 + 1);
        ++v45;
        if (!--v41) {
          goto LABEL_84;
        }
      }
      goto LABEL_80;
    }
LABEL_84:
    uint64_t v47 = *(void **)(a1 + 360);
    uint64_t v48 = *(void **)(a1 + 368);
    while (v47 != v48)
    {
      (*(void (**)(void, std::string **))(*(void *)*v47 + 32))(*v47, a2);
      ++v47;
    }
  }
  else
  {
LABEL_80:
    std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__clear[abi:ne180100]((void *)(a1 + 360));
    xgboost::gbm::GBTree::InitUpdater(a1, (uint64_t)a2);
  }
  *(unsigned char *)(a1 + 330) = 1;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_22E97DEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 89) < 0) {
    operator delete(*(void **)(v21 - 112));
  }
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::gbm::GBTreeTrainParam *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71E88, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71E88, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E97E00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::ConfigureUpdaters(xgboost::gbm::GBTree *this, __n128 a2)
{
  if (!*((unsigned char *)this + 329))
  {
    switch(*((_DWORD *)this + 80))
    {
      case 0:
        return;
      case 1:
      case 2:
        JUMPOUT(0x230FA7B10);
      case 3:
        if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a2) + 4) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v12, (uint64_t)__p, 177, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Tree method is selected to be 'hist', which uses a single updater grow_quantile_histmaker.", 90);
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v12);
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
        long long v3 = (char *)this + 288;
        float v4 = "grow_quantile_histmaker";
        goto LABEL_13;
      case 5:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
        unint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
        long long v3 = (char *)this + 288;
        float v4 = "grow_gpu_hist";
LABEL_13:
        MEMORY[0x230FA7B10](v3, v4);
        break;
      default:
        unint64_t v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown tree_method (", 21);
        unint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") detected", 10);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
        break;
    }
  }
}

void sub_22E97E1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::InitUpdater(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 311) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a1 + 288), *(void *)(a1 + 296));
  }
  else {
    std::string v64 = *(std::string *)(a1 + 288);
  }
  xgboost::common::Split(&v64, 0x2Cu, &v62);
  uint64_t v5 = *(void *)(a1 + 368) - *(void *)(a1 + 360);
  if (!v5)
  {
    uint64_t v31 = v62;
    uint64_t v32 = v63;
    if (v62 != v63)
    {
      __n128 v33 = (uint64_t **)(a1 + 360);
      do
      {
        uint64_t v34 = (char *)v31;
        if (*(char *)(v31 + 23) < 0) {
          uint64_t v34 = *(char **)v31;
        }
        std::string::basic_string[abi:ne180100]<0>(&v54, v34);
        unint64_t v2 = v2 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(*(void *)(a1 + 32) + 12);
        uint64_t v35 = xgboost::TreeUpdater::Create((uint64_t)&v54, *(void *)(a1 + 16), v2);
        if (SHIBYTE(v55) < 0) {
          operator delete(v54);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, a2);
        std::string::size_type v37 = *(uint64_t **)(a1 + 368);
        unint64_t v36 = *(void *)(a1 + 376);
        if ((unint64_t)v37 >= v36)
        {
          int v39 = *v33;
          uint64_t v40 = v37 - *v33;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v36 - (void)v39;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          uint64_t v57 = a1 + 376;
          if (v43)
          {
            unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
            int v39 = *(uint64_t **)(a1 + 360);
            std::string::size_type v37 = *(uint64_t **)(a1 + 368);
          }
          else
          {
            uint64_t v44 = 0;
          }
          std::string v45 = (uint64_t *)(v43 + 8 * v40);
          uint64_t v54 = (void *)v43;
          *(void *)&long long v55 = v45;
          uint64_t v56 = v43 + 8 * v44;
          *std::string v45 = v35;
          *((void *)&v55 + 1) = v45 + 1;
          if (v37 == v39)
          {
            uint64_t v38 = v45 + 1;
          }
          else
          {
            do
            {
              uint64_t v46 = *--v37;
              *std::string::size_type v37 = 0;
              *--std::string v45 = v46;
            }
            while (v37 != v39);
            uint64_t v38 = (void *)*((void *)&v55 + 1);
          }
          long long v47 = *(_OWORD *)v33;
          *(void *)(a1 + 360) = v45;
          *(void *)(a1 + 368) = v38;
          long long v55 = v47;
          uint64_t v48 = *(void *)(a1 + 376);
          *(void *)(a1 + 376) = v56;
          uint64_t v56 = v48;
          uint64_t v54 = (void *)v47;
          std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer((uint64_t)&v54);
        }
        else
        {
          *std::string::size_type v37 = v35;
          uint64_t v38 = v37 + 1;
          *(void *)(a1 + 368) = v38;
        }
        *(void *)(a1 + 368) = v38;
        v31 += 24;
      }
      while (v31 != v32);
    }
    goto LABEL_67;
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 3));
  uint64_t v61 = v5 >> 3;
  if (__p[0] != (void *)(v5 >> 3)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v6 = *(void *)(a1 + 360);
  uint64_t v7 = *(void *)(a1 + 368);
  if (v6 == v7) {
    goto LABEL_67;
  }
  char v50 = *(void **)(MEMORY[0x263F8C2B8] + 64);
  unint64_t v51 = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v49 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  do
  {
    uint64_t v8 = v62;
    uint64_t v9 = v63;
    while (v8 != v9)
    {
      unint64_t v10 = (const char *)(*(uint64_t (**)(void))(**(void **)v6 + 64))();
      size_t v11 = strlen(v10);
      size_t v12 = v11;
      if (*(char *)(v8 + 23) < 0)
      {
        if (v11 != *(void *)(v8 + 8)) {
          goto LABEL_18;
        }
        if (v11 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v13 = *(const void **)v8;
      }
      else
      {
        unint64_t v13 = (const void *)v8;
        if (v12 != *(unsigned __int8 *)(v8 + 23)) {
          goto LABEL_18;
        }
      }
      if (!memcmp(v13, v10, v12)) {
        goto LABEL_42;
      }
LABEL_18:
      v8 += 24;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v55 + 1, (uint64_t)"Internal Error: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" mismatched updater sequence.\n", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v55 + 1, (uint64_t)"Specified updaters: ", 20);
    uint64_t v15 = v62;
    uint64_t v16 = v63;
    while (v15 != v16)
    {
      int v17 = *(char *)(v15 + 23);
      if (v17 >= 0) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = *(void *)v15;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v15 + 8);
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v55 + 1, v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
      v15 += 24;
    }
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v55 + 1, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Actual updaters: ", 17);
    uint64_t v22 = *(void *)(a1 + 360);
    uint64_t v23 = *(void *)(a1 + 368);
    while (v22 != v23)
    {
      uint64_t v24 = (const char *)(*(uint64_t (**)(void))(**(void **)v22 + 64))();
      size_t v25 = strlen(v24);
      unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v55 + 1, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
      v22 += 8;
    }
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    unsigned int v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
    std::stringbuf::str();
    if ((v53 & 0x80u) == 0) {
      uint64_t v29 = __p;
    }
    else {
      uint64_t v29 = (void **)__p[0];
    }
    if ((v53 & 0x80u) == 0) {
      uint64_t v30 = v53;
    }
    else {
      uint64_t v30 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    if ((char)v53 < 0) {
      operator delete(__p[0]);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v61);
    uint64_t v54 = v51;
    *(void **)((char *)&v54 + *((void *)v51 - (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3)) = v50;
    *((void *)&v55 + 1) = v49;
    uint64_t v56 = MEMORY[0x263F8C318] + 16;
    if (v59 < 0) {
      operator delete(v58);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x230FA8020](&v60);
LABEL_42:
    v6 += 8;
  }
  while (v6 != v7);
LABEL_67:
  uint64_t v54 = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_22E97E8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  a13 = (void *)(v24 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v24 - 89) < 0) {
    operator delete(*(void **)(v24 - 112));
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::ConfigureWithKnownData(uint64_t a1, uint64_t *a2, xgboost::DMatrix *a3)
{
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: this->configured_", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v28);
  }
  uint64_t v6 = (_OWORD *)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(a1 + 288), *(void *)(a1 + 296));
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v6;
    v30.__r_.__value_.__r.__words[2] = *(void *)(a1 + 304);
  }
  if (!*(unsigned char *)(a1 + 280))
  {
    uint64_t v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v24 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
    size_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: tparam_.GetInitialised()", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v28);
  }
  xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v29, (unsigned char *)(a1 + 280), a2);
  v28[0] = (void **)v29;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v28);
  xgboost::gbm::GBTree::PerformTreeMethodHeuristic((xgboost::gbm::GBTree *)a1, a3);
  xgboost::gbm::GBTree::ConfigureUpdaters((xgboost::gbm::GBTree *)a1, v7);
  uint64_t v9 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 311);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a1 + 296);
  }
  if (size == v11)
  {
    if (v12 >= 0) {
      unint64_t v13 = (unsigned __int8 *)(a1 + 288);
    }
    else {
      unint64_t v13 = *(unsigned __int8 **)v6;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v15 = (void *)v30.__r_.__value_.__r.__words[0];
      if (!memcmp(v30.__r_.__value_.__l.__data_, v13, v30.__r_.__value_.__l.__size_))
      {
LABEL_36:
        operator delete(v15);
        return;
      }
    }
    else
    {
      if (!*((unsigned char *)&v30.__r_.__value_.__s + 23)) {
        return;
      }
      uint64_t v14 = &v30;
      while (v14->__r_.__value_.__s.__data_[0] == *v13)
      {
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        ++v13;
        if (!--v9)
        {
          if ((*((unsigned char *)&v30.__r_.__value_.__s + 23) & 0x80) == 0) {
            return;
          }
          goto LABEL_35;
        }
      }
    }
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v8) + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v28, (uint64_t)__p, 120, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Using updaters: ", 16);
    int v17 = *(char *)(a1 + 311);
    if (v17 >= 0) {
      uint64_t v18 = a1 + 288;
    }
    else {
      uint64_t v18 = *(void *)(a1 + 288);
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 311);
    }
    else {
      uint64_t v19 = *(void *)(a1 + 296);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v28);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__clear[abi:ne180100]((void *)(a1 + 360));
  xgboost::gbm::GBTree::InitUpdater(a1, (uint64_t)a2);
  if ((*((unsigned char *)&v30.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_35:
    uint64_t v15 = (void *)v30.__r_.__value_.__r.__words[0];
    goto LABEL_36;
  }
}

void sub_22E97EC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a15);
  if (*(char *)(v15 - 73) < 0) {
    operator delete(*(void **)(v15 - 96));
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::PerformTreeMethodHeuristic(xgboost::gbm::GBTree *this, xgboost::DMatrix *a2)
{
  if (*((unsigned char *)this + 329) || *((_DWORD *)this + 80)) {
    return;
  }
  Engine = rabit::engine::GetEngine(this);
  if ((*(unsigned int (**)(void *))(*(void *)Engine + 80))(Engine))
  {
    uint64_t v6 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v5);
    if (*(int *)(v6 + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 138, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically selected to be 'approx' for distributed training.", 78);
      goto LABEL_12;
    }
LABEL_14:
    int v11 = 1;
    goto LABEL_15;
  }
  if (((*(uint64_t (**)(xgboost::DMatrix *))(*(void *)a2 + 40))(a2) & 1) == 0)
  {
    uint64_t v6 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7);
    if (*(int *)(v6 + 4) < 2) {
      goto LABEL_14;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 142, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically set to 'approx' since external-memory data matrix is used.", 87);
    goto LABEL_12;
  }
  v8.n128_f64[0] = (**(double (***)(xgboost::DMatrix *))a2)(a2);
  uint64_t v9 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v8);
  uint64_t v6 = v9;
  if (v10 >= 0x400000)
  {
    if (*(int *)(v9 + 4) < 2) {
      goto LABEL_14;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 147, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically selected to be 'approx' for faster speed. To use old behavior (exact greedy algorithm on single machine), set tree_method to 'exact'.", 162);
LABEL_12:
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_14;
  }
  int v11 = 2;
LABEL_15:
  *((_DWORD *)this + 80) = v11;
  if (*(int *)(v6 + 4) > 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 155, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Using tree method: ", 19);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22E97EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GPUCopyGradient()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  int v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E97EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::gbm::CopyGradient(void **a1, int a2, int a3, unsigned int a4, uint64_t **a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a5;
  uint64_t v8 = **a5;
  uint64_t v7 = (*a5)[1];
  uint64_t v9 = *a1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v11.__ptr_ = 0;
  v12.__m_.__uint64_t sig = 850045863;
  memset(v12.__m_.__opaque, 0, sizeof(v12.__m_.__opaque));
  if (((unint64_t)(v7 - v8) >> 3))
  {
    uint64_t v10 = 0;
    do
    {
      *(void *)(*v6 + v10) = *(void *)(*v9 + 8 * a4);
      v10 += 8;
      a4 += a3;
    }
    while (8 * ((unint64_t)(v7 - v8) >> 3) != v10);
  }
  dmlc::OMPException::Rethrow(&v11);
  std::mutex::~mutex(&v12);
  std::exception_ptr::~exception_ptr(&v11);
}

void sub_22E97F15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
}

void xgboost::gbm::GBTree::DoBoost(uint64_t a1, xgboost::DMatrix *a2, uint64_t a3, _DWORD *a4)
{
  memset(v33, 0, sizeof(v33));
  int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
  xgboost::gbm::GBTree::ConfigureWithKnownData(a1, (uint64_t *)(a1 + 336), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "BoostNewTrees");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (*(_DWORD *)(a1 + 320) != 5 || (int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 24), v6 == -1))
  {
    uint64_t v8 = **(void **)a4;
    uint64_t v7 = (*(void *)(*(void *)a4 + 8) - v8) >> 2;
    int v6 = -1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  int v32 = v6;
  uint64_t v26 = v9;
  uint64_t v27 = v5;
  __p[0] = (void *)v5;
  __p[1] = (void *)1;
  uint64_t v10 = v9 * v5;
  if (!v7) {
    uint64_t v10 = 0;
  }
  uint64_t v30 = v8;
  uint64_t v31 = v10;
  LODWORD(v34) = v5;
  int v35 = 0;
  if (!v5) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (v5 != 1)
  {
    unint64_t v34 = ((uint64_t)(*(void *)(*(void *)a3 + 8) - **(void **)a3) >> 3) % (unint64_t)v5;
    int v35 = 0;
    if (v34) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector();
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  xgboost::gbm::GBTree::BoostNewTrees(a1, a3, (uint64_t (***)(void))a2, 0, (uint64_t *)&v22);
  std::mutex v12 = v22;
  uint64_t v11 = v23;
  std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::push_back[abi:ne180100](v33, (uint64_t)&v22);
  if (v28 && !v29) {
    std::terminate();
  }
  if (v28) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 368);
  if (v14 != *(void *)(a1 + 360) && v11 - (void)v12 == 8 && *(void *)(*(void *)a4 + 8) != **(void **)a4)
  {
    uint64_t v15 = *(void *)(v14 - 8);
    v20[0] = __p[0];
    v20[1] = v26;
    void v20[2] = v28;
    v20[3] = v29;
    v20[4] = v29;
    v20[5] = v13;
    int v21 = v32;
    if ((*(unsigned int (**)(uint64_t, xgboost::DMatrix *, void *))(*(void *)v15 + 56))(v15, a2, v20)) {
      ++a4[2];
    }
  }
  unint64_t v34 = (unint64_t)&v22;
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  std::string::basic_string[abi:ne180100]<0>(&v22, "BoostNewTrees");
  int64x2_t v16 = xgboost::common::Monitor::Stop();
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  (*(void (**)(uint64_t, void *, xgboost::DMatrix *, _DWORD *, int64x2_t))(*(void *)a1 + 176))(a1, v33, a2, a4, v16);
  __p[0] = v33;
  std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22E97F74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v39 - 112) = &__p;
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  a34 = v39 - 136;
  std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::BoostNewTrees(uint64_t a1, uint64_t a2, uint64_t (***a3)(void), int a4, uint64_t *a5)
{
  std::vector<unsigned int> __p = 0;
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100](a5);
  int v9 = *(_DWORD *)(a1 + 44);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    for (uint64_t i = 0; i < v9; ++i)
    {
      int v12 = *(_DWORD *)(a1 + 312);
      if (v12 == 1)
      {
        uint64_t v14 = *(void *)(a1 + 360);
        uint64_t v13 = *(void *)(a1 + 368);
        while (v14 != v13)
        {
          if (((*(uint64_t (**)(void))(**(void **)v14 + 40))() & 1) == 0)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
            int64x2_t v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
            int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: up->CanModifyTree()", 33);
            uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
            uint64_t v19 = (const char *)(*(uint64_t (**)(void))(**(void **)v14 + 64))();
            size_t v20 = strlen(v19);
            int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v19, v20);
            uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"can not be used to modify existing trees. ", 42);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v63);
          }
          v14 += 8;
        }
        if ((uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 3)) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        uint64_t v24 = i + *(int *)(a1 + 44) * (uint64_t)a4 + ((*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3);
        uint64_t v25 = *(void *)(a1 + 224);
        uint64_t v26 = *(void *)(v25 + 8 * v24);
        *(void *)(v25 + 8 * v24) = 0;
        if ((unint64_t)v10 >= v62)
        {
          uint64_t v28 = (char *)__p;
          uint64_t v29 = (v10 - (unsigned char *)__p) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v62 - (void)__p;
          if ((uint64_t)(v62 - (void)__p) >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32) {
            unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          unint64_t v34 = (void *)(v32 + 8 * v29);
          *unint64_t v34 = v26;
          uint64_t v27 = v34 + 1;
          if (v10 != v28)
          {
            do
            {
              uint64_t v35 = *((void *)v10 - 1);
              v10 -= 8;
              *--unint64_t v34 = v35;
            }
            while (v10 != v28);
            uint64_t v10 = (char *)__p;
          }
          std::vector<unsigned int> __p = v34;
          uint64_t v61 = v27;
          unint64_t v62 = v32 + 8 * v33;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v10 = v26;
          uint64_t v27 = v10 + 8;
        }
        uint64_t v61 = v27;
        std::string::size_type v37 = (void *)a5[1];
        unint64_t v36 = a5[2];
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = ((uint64_t)v37 - *a5) >> 3;
          if ((unint64_t)(v39 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v36 - *a5;
          uint64_t v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          v63[4] = a5 + 2;
          if (v42) {
            unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a5 + 2), v42);
          }
          else {
            unint64_t v43 = 0;
          }
          uint64_t v44 = &v43[8 * v39];
          v63[0] = v43;
          v63[1] = v44;
          v63[3] = &v43[8 * v42];
          *(void *)uint64_t v44 = v26;
          v63[2] = v44 + 8;
          std::vector<std::unique_ptr<xgboost::RegTree>>::__swap_out_circular_buffer(a5, v63);
          uint64_t v38 = (void *)a5[1];
          std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(v63);
        }
        else
        {
          *std::string::size_type v37 = v26;
          uint64_t v38 = v37 + 1;
          a5[1] = (uint64_t)v38;
        }
        a5[1] = (uint64_t)v38;
        int v9 = *(_DWORD *)(a1 + 44);
        uint64_t v10 = (char *)v27;
      }
      else if (!v12)
      {
        if ((*(unsigned int (**)(void))(***(void ***)(a1 + 360) + 40))(**(void **)(a1 + 360)))
        {
          std::string v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
          dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          uint64_t v46 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v63);
          long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: !updaters_.front()->CanModifyTree()", 49);
          uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
          char v50 = (const char *)(*(uint64_t (**)(void))(***(void ***)(a1 + 360) + 64))(**(void **)(a1 + 360));
          size_t v51 = strlen(v50);
          uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"can not be used to create new trees. ", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v63);
        }
        operator new();
      }
    }
  }
  uint64_t v59 = (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 3;
  if (v59 != *(void *)(**a3)(a3)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  uint64_t v56 = *(void **)(a1 + 360);
  long long v55 = *(void **)(a1 + 368);
  while (v56 != v55)
  {
    (*(void (**)(void, uint64_t, uint64_t (***)(void), void **))(*(void *)*v56 + 48))(*v56, a2, a3, &__p);
    ++v56;
  }
  if (__p)
  {
    uint64_t v61 = __p;
    operator delete(__p);
  }
}

void sub_22E98004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::push_back[abi:ne180100](void *result, uint64_t a2)
{
  long long v3 = (char **)result;
  unint64_t v4 = result[2];
  int v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    int v21 = result + 2;
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = 3 * v8;
    uint64_t v11 = (char *)operator new(24 * v8);
    int v12 = &v11[24 * v7];
    *(_OWORD *)int v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v6 = v12 + 24;
    uint64_t v14 = *v3;
    uint64_t v13 = v3[1];
    if (v13 == *v3)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v15 = *(_OWORD *)(v13 - 24);
        v13 -= 24;
        *(_OWORD *)int v12 = v15;
        *((void *)v12 + 2) = *((void *)v13 + 2);
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
      }
      while (v13 != v14);
      int64x2_t v16 = *(int64x2_t *)v3;
    }
    char *v3 = v12;
    v3[1] = v6;
    int64x2_t v19 = v16;
    int v17 = v3[2];
    v3[2] = &v11[8 * v10];
    size_t v20 = v17;
    uint64_t v18 = v16.i64[0];
    uint64_t result = (void *)std::__split_buffer<std::vector<std::unique_ptr<xgboost::RegTree>>>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    *int v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_OWORD *)int v5 = *(_OWORD *)a2;
    v5[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v6 = (char *)(v5 + 3);
  }
  v3[1] = v6;
  return result;
}

void xgboost::gbm::GBTree::CommitModel(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "CommitModel");
  xgboost::common::Monitor::Start();
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      xgboost::gbm::GBTreeModel::CommitModel(a1 + 24, (char **)(*a2 + v4), v5++);
      v4 += 24;
    }
    while (v5 < *(unsigned int *)(*(void *)(a1 + 32) + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CommitModel");
  xgboost::common::Monitor::Stop();
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9803D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTreeModel::CommitModel(uint64_t a1, char **a2, int a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v31 = *a2;
  }
  else
  {
    char v7 = (void *)(a1 + 176);
    unint64_t v8 = (void **)(a1 + 224);
    do
    {
      uint64_t v10 = *(void **)(a1 + 184);
      unint64_t v9 = *(void *)(a1 + 192);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v13 = ((uint64_t)v10 - *v7) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - *v7;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        v33[4] = (void *)(a1 + 192);
        if (v16) {
          int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 192, v16);
        }
        else {
          int v17 = 0;
        }
        uint64_t v18 = &v17[8 * v13];
        v33[0] = v17;
        v33[1] = v18;
        void v33[3] = &v17[8 * v16];
        uint64_t v19 = *(void *)v4;
        *(void *)uint64_t v4 = 0;
        *(void *)uint64_t v18 = v19;
        v33[2] = v18 + 8;
        std::vector<std::unique_ptr<xgboost::RegTree>>::__swap_out_circular_buffer((uint64_t *)(a1 + 176), v33);
        int v12 = *(void **)(a1 + 184);
        std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(v33);
      }
      else
      {
        uint64_t v11 = *(void *)v4;
        *(void *)uint64_t v4 = 0;
        *uint64_t v10 = v11;
        int v12 = v10 + 1;
        *(void *)(a1 + 184) = v12;
      }
      *(void *)(a1 + 184) = v12;
      int v21 = *(char **)(a1 + 232);
      unint64_t v20 = *(void *)(a1 + 240);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = (char *)*v8;
        uint64_t v24 = (v21 - (unsigned char *)*v8) >> 2;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62) {
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v20 - (void)v23;
        if (v26 >> 1 > v25) {
          unint64_t v25 = v26 >> 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 240, v27);
          uint64_t v23 = *(char **)(a1 + 224);
          int v21 = *(char **)(a1 + 232);
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[4 * v24];
        *(_DWORD *)uint64_t v29 = a3;
        uint64_t v22 = v29 + 4;
        while (v21 != v23)
        {
          int v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(void *)(a1 + 224) = v29;
        *(void *)(a1 + 232) = v22;
        *(void *)(a1 + 240) = &v28[4 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)int v21 = a3;
        uint64_t v22 = v21 + 4;
      }
      *(void *)(a1 + 232) = v22;
      v4 += 8;
    }
    while (v4 != v5);
    uint64_t v4 = *a2;
    uint64_t v31 = a2[1];
  }
  *(_DWORD *)(a1 + 16) += (unint64_t)(v31 - v4) >> 3;
}

void sub_22E9805F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::LoadConfig(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  long long v3 = (xgboost::Value **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v4 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v3);
  unint64_t v5 = (char **)(v4 + 2);
  int v6 = *((char *)v4 + 39);
  if (v6 < 0)
  {
    if (v4[3] != 6) {
      goto LABEL_10;
    }
    char v7 = *v5;
  }
  else
  {
    char v7 = (char *)(v4 + 2);
    if (v6 != 6) {
      goto LABEL_10;
    }
  }
  int v8 = *(_DWORD *)v7;
  int v9 = *((unsigned __int16 *)v7 + 2);
  BOOL v10 = v8 == 1920229991 && v9 == 25957;
  if (!v10) {
LABEL_10:
  }
    dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v5, "gbtree");
  v68.__r_.__value_.__r.__words[0] = 0;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v68, "gbtree_train_param");
  uint64_t v11 = (_DWORD **)(*(uint64_t (**)(void, std::string *))(**(void **)a2 + 24))(*(void *)a2, &v68);
  int v12 = (xgboost::gbm::GBTreeTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v11);
  *(void *)&__p[8] = 0;
  *(void *)&__p[16] = 0;
  *(void *)std::vector<unsigned int> __p = &__p[8];
  uint64_t v13 = (const void **)*((void *)v12 + 2);
  uint64_t v14 = (const void ***)((char *)v12 + 24);
  if (v13 != (const void **)((char *)v12 + 24))
  {
    do
    {
      uint64_t v15 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v13[7]);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)(v13 + 4);
      unint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, v13 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v67);
      int v12 = (xgboost::gbm::GBTreeTrainParam *)std::string::operator=((std::string *)(v16 + 7), (const std::string *)(v15 + 16));
      int v17 = (const void **)v13[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = (const void ***)v17;
          int v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (const void ***)v13[2];
          BOOL v10 = *v18 == v13;
          uint64_t v13 = (const void **)v18;
        }
        while (!v10);
      }
      uint64_t v13 = (const void **)v18;
    }
    while (v18 != v14);
  }
  if (*((unsigned char *)this + 280))
  {
    memset(&v61, 0, sizeof(v61));
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(v12);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71E88, (uint64_t)this + 280, *(void **)__p, &__p[8], 0, &v61, 0);
  }
  else
  {
    memset(&v61, 0, sizeof(v61));
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(v12);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71E88, (uint64_t)this + 280, *(void **)__p, &__p[8], &v61, 0);
    *((unsigned char *)this + 280) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__p, *(void **)&__p[8]);
  *(void *)std::vector<unsigned int> __p = &v61;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 78) = 0;
  if (*((_DWORD *)this + 79) == 2)
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v19) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v68, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)&v68, 383, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading from a raw memory buffer on CPU only machine.  Changing predictor to auto.", 82);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "predictor");
    std::string::basic_string[abi:ne180100]<0>(v71, "auto");
    memset(&v68, 0, sizeof(v68));
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    v67.__r_.__value_.__s.__data_[8] = 0;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__r.__words[0] + 48;
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v68.__r_.__value_.__r.__words[2], (long long *)__p, v73, (std::string *)v68.__r_.__value_.__l.__data_);
    xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v60, (unsigned char *)this + 280, (uint64_t *)&v68);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*((_DWORD *)this + 80) == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tree_method");
    std::string::basic_string[abi:ne180100]<0>(v71, "hist");
    memset(&v68, 0, sizeof(v68));
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    v67.__r_.__value_.__s.__data_[8] = 0;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__r.__words[0] + 48;
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v68.__r_.__value_.__r.__words[2], (long long *)__p, v73, (std::string *)v68.__r_.__value_.__l.__data_);
    xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v59, (unsigned char *)this + 280, (uint64_t *)&v68);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v20) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v68, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)&v68, 390, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading from a raw memory buffer on CPU only machine.  Changing tree_method to hist.", 84);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "updater");
  int v21 = (_DWORD **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
  unint64_t v22 = (unint64_t)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v21);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v23 = (uint64_t **)((char *)this + 360);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__clear[abi:ne180100]((void *)this + 45);
  uint64_t v24 = *(void **)(v22 + 16);
  unint64_t v25 = (void *)(v22 + 24);
  if (v24 != (void *)(v22 + 24))
  {
    do
    {
      unint64_t v22 = v22 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(*((void *)this + 4) + 12);
      uint64_t v26 = xgboost::TreeUpdater::Create((uint64_t)(v24 + 4), *((void *)this + 2), v22);
      (*(void (**)(uint64_t, void *))(*(void *)v26 + 16))(v26, v24 + 7);
      uint64_t v28 = (uint64_t *)*((void *)this + 46);
      unint64_t v27 = *((void *)this + 47);
      if ((unint64_t)v28 >= v27)
      {
        int v30 = *v23;
        uint64_t v31 = v28 - *v23;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v27 - (void)v30;
        if (v33 >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        v71[1] = (char *)this + 376;
        if (v34)
        {
          unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v34);
          int v30 = (uint64_t *)*((void *)this + 45);
          uint64_t v28 = (uint64_t *)*((void *)this + 46);
        }
        else
        {
          uint64_t v35 = 0;
        }
        unint64_t v36 = (uint64_t *)(v34 + 8 * v31);
        *(void *)std::vector<unsigned int> __p = v34;
        *(void *)&__p[8] = v36;
        v71[0] = (void *)(v34 + 8 * v35);
        *unint64_t v36 = v26;
        *(void *)&__p[16] = v36 + 1;
        if (v28 == v30)
        {
          uint64_t v29 = v36 + 1;
        }
        else
        {
          do
          {
            uint64_t v37 = *--v28;
            *uint64_t v28 = 0;
            *--unint64_t v36 = v37;
          }
          while (v28 != v30);
          uint64_t v29 = *(void **)&__p[16];
        }
        long long v38 = *(_OWORD *)v23;
        *((void *)this + 45) = v36;
        *((void *)this + 46) = v29;
        *(_OWORD *)&__p[8] = v38;
        uint64_t v39 = (void *)*((void *)this + 47);
        *((void **)this + 47) = v71[0];
        v71[0] = v39;
        *(void *)std::vector<unsigned int> __p = v38;
        std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *uint64_t v28 = v26;
        uint64_t v29 = v28 + 1;
        *((void *)this + 46) = v29;
      }
      *((void *)this + 46) = v29;
      uint64_t v40 = (void *)v24[1];
      if (v40)
      {
        do
        {
          uint64_t v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          uint64_t v41 = (void *)v24[2];
          BOOL v10 = *v41 == (void)v24;
          uint64_t v24 = v41;
        }
        while (!v10);
      }
      uint64_t v24 = v41;
    }
    while (v41 != v25);
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "specified_updater");
  uint64_t v42 = (*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, v57);
  unint64_t v43 = *(xgboost::Value **)v42;
  if (*(_DWORD *)(*(void *)v42 + 12) != 5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    std::string v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
    xgboost::Value::TypeStr(v43, &v66);
    uint64_t v46 = std::string::insert(&v66, 0, "Invalid cast, from ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    uint64_t v48 = std::string::append(&v67, " to ");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v62[1] = 0x500000000;
    v62[0] = &unk_26E24E3C0;
    char v63 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v62, v64);
    if ((v65 & 0x80u) == 0) {
      char v50 = v64;
    }
    else {
      char v50 = (void **)v64[0];
    }
    if ((v65 & 0x80u) == 0) {
      std::string::size_type v51 = v65;
    }
    else {
      std::string::size_type v51 = (std::string::size_type)v64[1];
    }
    uint64_t v52 = std::string::append(&v68, (const std::string::value_type *)v50, v51);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v52->__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<unsigned int> __p = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0) {
      uint64_t v54 = __p;
    }
    else {
      uint64_t v54 = *(unsigned char **)__p;
    }
    if (__p[23] >= 0) {
      uint64_t v55 = __p[23];
    }
    else {
      uint64_t v55 = *(void *)&__p[8];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v54, v55);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((char)v65 < 0) {
      operator delete(v64[0]);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
}

void sub_22E980FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'xgboost::gbm::GBTree::LoadConfig(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
}

void xgboost::gbm::GBTree::SaveConfig(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "gbtree");
  unint64_t v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)char v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E9818EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
}

void xgboost::ToJson<xgboost::gbm::GBTreeModelParam>(xgboost::gbm::GBTreeModelParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  xgboost::gbm::GBTreeModelParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xmmword_26AD71E40, &v4);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v5, (const void **)&v4.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v4.__end_->first.__r_.__value_.__l.__data_);
  char v7 = &v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = v5;
  if ((void **)v5 != &v6)
  {
    xgboost::JsonString::JsonString(&v4, (long long *)(v5 + 56));
    char v7 = (std::vector<std::pair<std::string, std::string>> *)(v3 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v3 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v7);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v5, v6);
}

void sub_22E981C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'xgboost::gbm::GBTree::SaveConfig(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
}

void xgboost::gbm::GBTree::LoadModel(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  std::vector<std::pair<std::string, std::string>> v4 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  uint64_t v6 = (char **)(v5 + 2);
  int v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 6) {
      goto LABEL_10;
    }
    uint64_t v8 = *v6;
  }
  else
  {
    uint64_t v8 = (char *)(v5 + 2);
    if (v7 != 6) {
      goto LABEL_10;
    }
  }
  int v9 = *(_DWORD *)v8;
  int v10 = *((unsigned __int16 *)v8 + 2);
  if (v9 != 1920229991 || v10 != 25957) {
LABEL_10:
  }
    dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v6, "gbtree");
  uint64_t v24 = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v24)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"get<String>(in[\"name\"]) == \"gbtree\"", 35);
    int v16 = *(char *)(v24 + 23);
    uint64_t v17 = v16 >= 0 ? v24 : *(void *)v24;
    uint64_t v18 = v16 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(void *)(v24 + 8);
    __n128 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    uint64_t v20 = v24;
    uint64_t v24 = 0;
    if (v20) {
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v24, v20);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  uint64_t v21 = (const xgboost::Json *)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::gbm::GBTreeModel::LoadModel((xgboost::gbm::GBTree *)((char *)this + 24), v21);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E981E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v16 = a15;
  a15 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTree::SaveModel(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "gbtree");
  uint64_t v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E9820AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::gbm::GBTree::Slice(xgboost::gbm::GBTree *this, int a2, int a3, int a4, xgboost::GradientBooster *lpsrc, BOOL *a6)
{
  if (*((unsigned char *)this + 330))
  {
    if (lpsrc) {
      goto LABEL_3;
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
    if (lpsrc)
    {
LABEL_3:
      if (v11) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  uint64_t v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
  dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
  char v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
  uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: out", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
LABEL_29:
  unint64_t v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
  dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
  uint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
  unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: p_gbtree", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
  uint64_t v11 = 0;
LABEL_4:
  uint64_t v12 = *((void *)this + 4);
  unsigned int v30 = *((_DWORD *)this + 11) * *(_DWORD *)(v12 + 8);
  if (!*(_DWORD *)(v12 + 4)) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  if (!v30) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  if (a3) {
    LODWORD(v13) = a3;
  }
  else {
    unint64_t v13 = ((uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3) / (unint64_t)v30;
  }
  if ((int)v13 <= a2) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (a4 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  int v14 = ((int)v13 - a2) / a4;
  std::vector<std::unique_ptr<xgboost::RegTree>>::resize((uint64_t *)v11 + 25, v30 * v14);
  int v29 = v14;
  std::vector<int>::resize((std::vector<int> *)(v11 + 248), v30 * v14);
  *((_DWORD *)v11 + 10) = (*((void *)v11 + 26) - *((void *)v11 + 25)) >> 3;
  *((_DWORD *)v11 + 11) = *((_DWORD *)this + 11);
  uint64_t v15 = *((void *)this + 28);
  uint64_t v16 = *((void *)this + 29);
  if (v15 != v16 && (v16 - v15) >> 3 != (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t result = xgboost::gbm::detail::LayerToTree((xgboost::gbm::GBTree *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)a2, v13);
  unint64_t v18 = (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3;
  if (v18 >= HIDWORD(result))
  {
    if (!v13) {
      int v29 = (int)(v18 / v30 - a2) / a4;
    }
    if (v29)
    {
      if (result >= HIDWORD(result)) {
        dmlc::LogCheckFormat<int,unsigned int>();
      }
      if ((int)result < (unint64_t)((uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3)) {
        operator new();
      }
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    }
  }
  *a6 = v18 < HIDWORD(result);
  return result;
}

void sub_22E982B6C(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_22E982CD4()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 97));
  JUMPOUT(0x22E982CE0);
}

void std::vector<std::unique_ptr<xgboost::RegTree>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<xgboost::RegTree>>::__append(a1, v5);
  }
}

unint64_t xgboost::gbm::GBTree::PredictBatch(xgboost::gbm::GBTree *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, BOOL a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6 = a6;
  if (!*((unsigned char *)this + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!a6) {
LABEL_3:
  }
    unsigned int v6 = (*(uint64_t (**)(xgboost::gbm::GBTree *))(*(void *)this + 72))(this);
LABEL_4:
  uint64_t v11 = (unsigned int *)((char *)a3 + 8);
  if (a5 || (unsigned int v12 = *v11, v6 < *v11))
  {
    *uint64_t v11 = 0;
    unsigned int v12 = a5;
  }
  if (*(void *)(*(void *)a3 + 8) == **(void **)a3
    && *(void *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2)
    && *v11)
  {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  Predictor = (uint64_t *)xgboost::gbm::GBTree::GetPredictor((uint64_t)this, (uint64_t)a3, (uint64_t)a2);
  int v14 = Predictor;
  if (!*((_DWORD *)a3 + 2))
  {
    uint64_t v15 = *Predictor;
    uint64_t v16 = (unint64_t *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
    xgboost::Predictor::InitOutPredictions(v15, v16, (uint64_t *)a3, (uint64_t)this + 24);
  }
  unint64_t result = xgboost::gbm::detail::LayerToTree((xgboost::gbm::GBTree *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)v12, v6);
  if ((unint64_t)((uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3) < HIDWORD(result)) {
    dmlc::LogCheckFormat<unsigned int,unsigned long>();
  }
  if (HIDWORD(result) > result) {
    unint64_t result = (*(uint64_t (**)(uint64_t, xgboost::DMatrix *, xgboost::PredictionCacheEntry *, char *, unint64_t))(*(void *)*v14 + 24))(*v14, a2, a3, (char *)this + 24, result);
  }
  if (a5) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = v6;
  }
  *uint64_t v11 = v18;
  return result;
}

void sub_22E983134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTree::GetPredictor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    uint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
  }
  int v6 = *(_DWORD *)(a1 + 316);
  if (!v6)
  {
    if (!a3) {
      goto LABEL_23;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 112))(a3)) {
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3) ^ 1;
    }
    else {
      int v15 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 120))(a3))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 72))(&v28, a3);
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v30);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if ((v15 & 1) == 0)
      {
LABEL_23:
        char v16 = 0;
        if (a2)
        {
LABEL_24:
          if (*(void *)(*(void *)a2 + 8) == **(void **)a2)
          {
            if (!*(_DWORD *)(a1 + 40)) {
              char v16 = 1;
            }
            if ((v16 & 1) == 0)
            {
              uint64_t v11 = a1 + 384;
              if (*(void *)(a1 + 384)) {
                return v11;
              }
              goto LABEL_29;
            }
          }
        }
LABEL_34:
        if (*(_DWORD *)(a1 + 320) != 5)
        {
          uint64_t v11 = a1 + 384;
          if (*(void *)(a1 + 384)) {
            return v11;
          }
LABEL_29:
          uint64_t v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
          dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          unsigned int v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
          __n128 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: cpu_predictor_", 28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
          goto LABEL_10;
        }
        uint64_t v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
        dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
        char v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
LABEL_36:
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
        return a1 + 384;
      }
    }
    else if (!v15)
    {
      goto LABEL_23;
    }
    if ((*(_DWORD *)(*(void *)(a1 + 16) + 24) & 0x80000000) == 0)
    {
      uint64_t v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
      dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      uint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Data is on CUDA device, but XGBoost is not compiled with CUDA support.", 70);
      goto LABEL_36;
    }
    char v16 = 1;
    if (a2) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
  if (v6 == 2)
  {
    uint64_t v7 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(v7, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    int v6 = *(_DWORD *)(a1 + 316);
  }
  if (v6 == 3)
  {
    uint64_t v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    int v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"XGBoost version not compiled with OneAPI support.", 49);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
  }
  uint64_t v11 = a1 + 384;
  if (!*(void *)(a1 + 384))
  {
    unsigned int v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    unint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: cpu_predictor_", 28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
LABEL_10:
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
  }
  return v11;
}

void sub_22E983558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

unint64_t xgboost::gbm::detail::LayerToTree(xgboost::gbm::detail *this, const xgboost::gbm::GBTreeModel *a2, int a3)
{
  int v3 = *((_DWORD *)this + 5) * *(_DWORD *)(*((void *)this + 1) + 8);
  unsigned int v4 = v3 * a2;
  int v10 = v3 * a2;
  unint64_t v5 = (v3 * a3);
  unsigned int v9 = v5;
  uint64_t v7 = *((void *)this + 22);
  uint64_t v6 = *((void *)this + 23);
  if (!v5)
  {
    unint64_t v5 = (unint64_t)(v6 - v7) >> 3;
    unsigned int v9 = v5;
  }
  if (v6 != v7)
  {
    if (v4 > v5) {
      dmlc::LogCheckFormat<unsigned int,unsigned int>();
    }
    unsigned int v4 = v10;
    unint64_t v5 = v9;
  }
  return v4 | (v5 << 32);
}

void sub_22E983730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GPUDartPredictInc()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E9837C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::gbm::GPUDartInplacePredictInc()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E983834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::gbm::GBTree::~GBTree(xgboost::gbm::GBTree *this)
{
  xgboost::gbm::GBTree::~GBTree(this);

  JUMPOUT(0x230FA80D0);
}

{
  uint64_t v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26E24B530;
  *((void *)this + 1) = &unk_26E24B5F8;
  xgboost::common::Monitor::~Monitor((char **)this + 49);
  char v2 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v4 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unsigned int v4 = (void **)((char *)this + 336);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  *((void *)this + 3) = &unk_26E24E678;
  int v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unsigned int v4 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void xgboost::gbm::GBTree::Load(xgboost::gbm::GBTree *this, dmlc::Stream *a2)
{
  xgboost::gbm::GBTreeModel::Load((uint64_t)this + 24, (uint64_t (***)(void, uint64_t, uint64_t))a2);
  uint64_t v4 = *((void *)this + 42);
  for (uint64_t i = *((void *)this + 43);
        i != v4;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)this + 352, i))
  {
    i -= 48;
  }
  *((void *)this + 43) = v4;
}

uint64_t xgboost::gbm::GBTree::Save(xgboost::gbm::GBTree *this, dmlc::Stream *a2)
{
  return xgboost::gbm::GBTreeModel::Save((uint64_t)this + 24, (uint64_t)a2);
}

BOOL xgboost::gbm::GBTree::AllowLazyCheckPoint(xgboost::gbm::GBTree *this)
{
  return *(_DWORD *)(*((void *)this + 4) + 8) == 1;
}

unint64_t xgboost::gbm::GBTree::BoostedRounds(xgboost::gbm::GBTree *this)
{
  if (!*((_DWORD *)this + 11)) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (!*(_DWORD *)(*((void *)this + 4) + 8)) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  return ((uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3)
       / (unint64_t)(*((_DWORD *)this + 11) * *(_DWORD *)(*((void *)this + 4) + 8));
}

void sub_22E983ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTree::InplacePredict(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, xgboost::gbm::GBTreeModel *a5, int a6, float a7)
{
  unsigned int v8 = a5;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    uint64_t v31 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
  }
  unsigned int v39 = 0;
  unint64_t v14 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a6);
  unsigned int v39 = HIDWORD(v14);
  unint64_t v37 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3;
  if (v37 < HIDWORD(v14)) {
    dmlc::LogCheckFormat<unsigned int,unsigned long>();
  }
  if (*(_DWORD *)(a1 + 316))
  {
    uint64_t v15 = *(void *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
    char v16 = (std::__shared_weak_count *)a3[1];
    uint64_t v33 = *a3;
    unint64_t v34 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, unint64_t, void, float))(*(void *)v15 + 32))(v15, a2, &v33, a1 + 24, a4, v14, v39, a7);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if ((v17 & 1) == 0)
    {
      unsigned int v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      __n128 v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: success", 21);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      for (uint64_t i = 0; i != 42; ++i)
        std::ostream::put();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v21);
      char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Current Predictor: ", 19);
      if (*(_DWORD *)(a1 + 316) == 1) {
        uint64_t v24 = "cpu_predictor";
      }
      else {
        uint64_t v24 = "gpu_predictor";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, 13);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 384);
    if (!v25) {
      goto LABEL_23;
    }
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    uint64_t v35 = *a3;
    unint64_t v36 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, unint64_t, void, float))(*(void *)v25 + 32))(v25, a2, &v35, a1 + 24, a4, v14, v39, a7);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if ((v27 & 1) == 0)
    {
LABEL_23:
      uint64_t v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      for (uint64_t j = 0; j != 42; ++j)
        std::ostream::put();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
    }
  }
}

void sub_22E983EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
}

uint64_t xgboost::gbm::GBTree::PredictInstance(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5)
{
  unsigned int v6 = a4;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    unint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
  }
  unint64_t v10 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v6, a5);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 384) + 40))(*(void *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v10));
}

void sub_22E984030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::gbm::GBTree::PredictLeaf(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5)
{
  uint64_t v8 = a1 + 24;
  unint64_t v9 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)a4, a5);
  int v13 = v9;
  int v12 = 0;
  if (v9) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  Predictor = (void *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)*Predictor + 48))(*Predictor, a2, a3, v8, HIDWORD(v9));
}

void sub_22E9841AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::GBTree::PredictContribution(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8 = a4;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    char v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
  }
  unint64_t v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  int v20 = v12;
  int v18 = 0;
  if (v12) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  Predictor = (void *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, void, uint64_t, void, _DWORD))(*(void *)*Predictor + 56))(*Predictor, a2, a3, a1 + 24, HIDWORD(v12), 0, a6, 0, 0);
}

void sub_22E9843BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTree::PredictInteractionContributions(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8 = a4;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    char v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
  }
  unint64_t v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  int v20 = v12;
  int v18 = 0;
  if (v12) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  Predictor = (void *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, void, uint64_t))(*(void *)*Predictor + 64))(*Predictor, a2, a3, a1 + 24, HIDWORD(v12), 0, a6);
}

void sub_22E9845D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::DumpModel(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::value_type a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v9 = *(void *)(a1 + 208);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v26.__ptr_ = a5;
  LOBYTE(v27.__m_.__sig) = 0;
  uint64_t v11 = v9 - v10;
  if (v11)
  {
    uint64_t v12 = v11 >> 3;
    std::vector<std::string>::__vallocate[abi:ne180100](a5, v11 >> 3);
    uint64_t v13 = (char *)a5[1];
    size_t v14 = 24 * ((24 * v12 - 24) / 0x18uLL) + 24;
    bzero(v13, v14);
    a5[1] = &v13[v14];
    uint64_t v9 = *(void *)(a1 + 200);
    uint64_t v15 = *(void *)(a1 + 208);
  }
  else
  {
    uint64_t v15 = v9;
  }
  v26.__ptr_ = 0;
  v27.__m_.__uint64_t sig = 850045863;
  memset(v27.__m_.__opaque, 0, sizeof(v27.__m_.__opaque));
  if (v15 != v9)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = (v15 - v9) >> 3;
    do
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 200) + 8 * v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v23 = __p;
      }
      xgboost::RegTree::DumpModel(v19, a2, a3, (uint64_t)&v23);
      uint64_t v20 = *a5 + v16;
      if (*(char *)(v20 + 23) < 0) {
        operator delete(*(void **)v20);
      }
      long long v21 = v24;
      *(void *)(v20 + 16) = v25;
      *(_OWORD *)uint64_t v20 = v21;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      ++v17;
      v16 += 24;
    }
    while (v18 != v17);
  }
  dmlc::OMPException::Rethrow(&v26);
  std::mutex::~mutex(&v27);
  std::exception_ptr::~exception_ptr(&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22E9848C4(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  if (v4 < 0) {
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::FeatureScore(void *a1, int **a2, uint64_t *a3, char **a4, char **a5)
{
  unint64_t v10 = *(unsigned int *)(a1[4] + 4);
  *(void *)&long long v120 = 0;
  std::vector<unsigned long>::vector(&v115, v10, &v120);
  unint64_t v11 = *(unsigned int *)(a1[4] + 4);
  LODWORD(v120) = 0;
  std::vector<float>::vector(&__p, v11, &v120);
  memset(&v112, 0, sizeof(v112));
  uint64_t v110 = *a3;
  if (!*a3)
  {
    std::vector<int>::resize(&v112, (uint64_t)(a1[26] - a1[25]) >> 3);
    std::vector<int>::pointer begin = v112.__begin_;
    std::vector<int>::pointer end = v112.__end_;
    if (v112.__begin_ != v112.__end_)
    {
      int v14 = 0;
      std::vector<int>::pointer v15 = v112.__begin_;
      do
        *v15++ = v14++;
      while (v15 != end);
    }
    uint64_t v110 = end - begin;
    *a3 = v110;
    a3[1] = (uint64_t)begin;
  }
  unint64_t v111 = (uint64_t)(a1[26] - a1[25]) >> 3;
  int v16 = *((unsigned __int8 *)a2 + 23);
  double v109 = a2;
  if ((v16 & 0x80) == 0)
  {
    int v17 = v16 - 4;
    uint64_t v18 = (uint64_t *)a2;
    switch(v17)
    {
      case 0:
        int v19 = *(_DWORD *)a2;
        goto LABEL_11;
      case 1:
        if (*(_DWORD *)a2 != 1702260579 || *((unsigned char *)a2 + 4) != 114) {
          goto LABEL_84;
        }
        goto LABEL_105;
      case 2:
        if (*(_DWORD *)a2 != 1734960503 || *((_WORD *)a2 + 2) != 29800) {
          goto LABEL_84;
        }
        goto LABEL_36;
      case 6:
        if (*a2 != (int *)0x61675F6C61746F74 || *((_WORD *)a2 + 4) != 28265) {
          goto LABEL_84;
        }
        goto LABEL_63;
      case 7:
        goto LABEL_80;
      default:
        goto LABEL_84;
    }
  }
  switch((unint64_t)a2[1])
  {
    case 4uLL:
      int v19 = **a2;
LABEL_11:
      if (v19 == 1852399975) {
        goto LABEL_63;
      }
      goto LABEL_84;
    case 5uLL:
      if (**a2 != 1702260579 || *((unsigned char *)*a2 + 4) != 114) {
        goto LABEL_84;
      }
      goto LABEL_105;
    case 6uLL:
      if (**a2 != 1734960503 || *((_WORD *)*a2 + 2) != 29800) {
        goto LABEL_84;
      }
LABEL_36:
      if (!v110) {
        goto LABEL_91;
      }
      unint64_t v24 = 0;
      unint64_t v25 = v110;
      while (1)
      {
        int v117 = 0;
        if (v24 >= v25) {
          goto LABEL_171;
        }
        int v117 = *(_DWORD *)(a3[1] + 4 * v24);
        if (v111 < v117) {
          dmlc::LogCheckFormat<int,unsigned long>();
        }
        uint64_t v26 = v117;
        uint64_t v27 = a1[25];
        uint64_t v28 = *(void *)(v27 + 8 * v117);
        long long v121 = 0u;
        long long v122 = 0u;
        long long v120 = 0u;
        std::deque<int>::push_back(&v120, &xgboost::RegTree::kRoot);
        while (*((void *)&v122 + 1))
        {
          int v29 = *(_DWORD *)(*(void *)(*((void *)&v120 + 1)
                                      + (((unint64_t)(v122 + *((void *)&v122 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v122 + *((void *)&v122 + 1) - 1) & 0x3FF));
          --*((void *)&v122 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v120, 1);
          uint64_t v30 = *(void *)(*(void *)(v27 + 8 * v26) + 160);
          if (*(_DWORD *)(v30 + 20 * v29 + 4) != -1)
          {
            uint64_t v31 = *(_DWORD *)(v30 + 20 * v29 + 12) & 0x7FFFFFFF;
            uint64_t v32 = *((void *)v115 + v31) + 1;
            *((void *)v115 + v31) = v32;
            *((float *)__p + v31) = (float)(unint64_t)v32;
          }
          int v119 = 0;
          uint64_t v33 = *(void *)(v28 + 160) + 20 * v29;
          int v34 = *(_DWORD *)(v33 + 4);
          int v118 = 0;
          int v119 = v34;
          int v35 = *(_DWORD *)(v33 + 8);
          int v118 = v35;
          if (v34 != -1)
          {
            std::deque<int>::push_back(&v120, &v119);
            int v35 = v118;
          }
          if (v35 != -1) {
            std::deque<int>::push_back(&v120, &v118);
          }
        }
        std::deque<int>::~deque[abi:ne180100](&v120);
        unint64_t v25 = *a3;
        if (v24 == *a3) {
          goto LABEL_171;
        }
        if (++v24 == v110) {
          goto LABEL_91;
        }
      }
    case 0xAuLL:
      if (*(void *)*a2 != 0x61675F6C61746F74 || *((_WORD *)*a2 + 4) != 28265) {
        goto LABEL_84;
      }
LABEL_63:
      if (!v110) {
        goto LABEL_91;
      }
      unint64_t v38 = 0;
      unint64_t v39 = v110;
      while (1)
      {
        int v117 = 0;
        if (v38 >= v39) {
          goto LABEL_171;
        }
        int v117 = *(_DWORD *)(a3[1] + 4 * v38);
        if (v111 < v117) {
          dmlc::LogCheckFormat<int,unsigned long>();
        }
        uint64_t v40 = v117;
        uint64_t v41 = a1[25];
        uint64_t v42 = *(void *)(v41 + 8 * v117);
        long long v121 = 0u;
        long long v122 = 0u;
        long long v120 = 0u;
        std::deque<int>::push_back(&v120, &xgboost::RegTree::kRoot);
        while (*((void *)&v122 + 1))
        {
          uint64_t v43 = *(int *)(*(void *)(*((void *)&v120 + 1)
                                   + (((unint64_t)(v122 + *((void *)&v122 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v122 + *((void *)&v122 + 1) - 1) & 0x3FF));
          --*((void *)&v122 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v120, 1);
          uint64_t v44 = *(void *)(v41 + 8 * v40);
          uint64_t v45 = *(void *)(v44 + 160);
          if (*(_DWORD *)(v45 + 20 * (int)v43 + 4) != -1)
          {
            uint64_t v46 = *(_DWORD *)(v45 + 20 * (int)v43 + 12) & 0x7FFFFFFF;
            ++*((void *)v115 + v46);
            *((float *)__p + v46) = *(float *)(*(void *)(v44 + 208) + 16 * v43) + *((float *)__p + v46);
          }
          int v119 = 0;
          uint64_t v47 = *(void *)(v42 + 160) + 20 * (int)v43;
          int v48 = *(_DWORD *)(v47 + 4);
          int v118 = 0;
          int v119 = v48;
          int v49 = *(_DWORD *)(v47 + 8);
          int v118 = v49;
          if (v48 != -1)
          {
            std::deque<int>::push_back(&v120, &v119);
            int v49 = v118;
          }
          if (v49 != -1) {
            std::deque<int>::push_back(&v120, &v118);
          }
        }
        std::deque<int>::~deque[abi:ne180100](&v120);
        unint64_t v39 = *a3;
        if (v38 == *a3) {
          goto LABEL_171;
        }
        if (++v38 == v110) {
          goto LABEL_91;
        }
      }
    case 0xBuLL:
      uint64_t v18 = (uint64_t *)*a2;
LABEL_80:
      uint64_t v50 = *v18;
      uint64_t v51 = *(uint64_t *)((char *)v18 + 3);
      if (v50 != 0x6F635F6C61746F74 || v51 != 0x7265766F635F6C61) {
        goto LABEL_84;
      }
LABEL_105:
      if (!v110) {
        goto LABEL_91;
      }
      unint64_t v67 = 0;
      unint64_t v68 = v110;
      do
      {
        int v117 = 0;
        if (v67 >= v68) {
          goto LABEL_171;
        }
        int v117 = *(_DWORD *)(a3[1] + 4 * v67);
        if (v111 < v117) {
          dmlc::LogCheckFormat<int,unsigned long>();
        }
        uint64_t v69 = v117;
        uint64_t v70 = a1[25];
        uint64_t v71 = *(void *)(v70 + 8 * v117);
        long long v121 = 0u;
        long long v122 = 0u;
        long long v120 = 0u;
        std::deque<int>::push_back(&v120, &xgboost::RegTree::kRoot);
        while (*((void *)&v122 + 1))
        {
          uint64_t v72 = *(int *)(*(void *)(*((void *)&v120 + 1)
                                   + (((unint64_t)(v122 + *((void *)&v122 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v122 + *((void *)&v122 + 1) - 1) & 0x3FF));
          --*((void *)&v122 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v120, 1);
          uint64_t v73 = *(void *)(v70 + 8 * v69);
          uint64_t v74 = *(void *)(v73 + 160);
          if (*(_DWORD *)(v74 + 20 * (int)v72 + 4) != -1)
          {
            uint64_t v75 = *(_DWORD *)(v74 + 20 * (int)v72 + 12) & 0x7FFFFFFF;
            ++*((void *)v115 + v75);
            *((float *)__p + v75) = *(float *)(*(void *)(v73 + 208) + 16 * v72 + 4) + *((float *)__p + v75);
          }
          int v119 = 0;
          uint64_t v76 = *(void *)(v71 + 160) + 20 * (int)v72;
          int v77 = *(_DWORD *)(v76 + 4);
          int v118 = 0;
          int v119 = v77;
          int v78 = *(_DWORD *)(v76 + 8);
          int v118 = v78;
          if (v77 != -1)
          {
            std::deque<int>::push_back(&v120, &v119);
            int v78 = v118;
          }
          if (v78 != -1) {
            std::deque<int>::push_back(&v120, &v118);
          }
        }
        std::deque<int>::~deque[abi:ne180100](&v120);
        unint64_t v68 = *a3;
        if (v67 == *a3) {
LABEL_171:
        }
          std::terminate();
        ++v67;
      }
      while (v67 != v110);
LABEL_91:
      uint64_t v60 = (int *)v109;
      if ((*((char *)v109 + 23) & 0x80000000) == 0)
      {
        int v61 = *((unsigned __int8 *)v109 + 23);
        if (v61 != 4)
        {
          if (v61 != 5) {
            goto LABEL_127;
          }
          goto LABEL_98;
        }
        int v66 = *(_DWORD *)v109;
LABEL_122:
        if (v66 != 1852399975) {
          goto LABEL_127;
        }
        goto LABEL_123;
      }
      unint64_t v62 = v109[1];
      if (v62 == (int *)4)
      {
        int v66 = **v109;
        goto LABEL_122;
      }
      if (v62 != (int *)5) {
        goto LABEL_127;
      }
      uint64_t v60 = *v109;
LABEL_98:
      int v63 = *v60;
      int v64 = *((unsigned __int8 *)v60 + 4);
      if (v63 != 1702260579 || v64 != 114) {
        goto LABEL_127;
      }
LABEL_123:
      double v79 = (float *)__p;
      if (v114 != __p)
      {
        unint64_t v80 = (v114 - (unsigned char *)__p) >> 2;
        uint64_t v81 = (unint64_t *)v115;
        if (v80 <= 1) {
          unint64_t v80 = 1;
        }
        do
        {
          unint64_t v82 = *v81++;
          *double v79 = *v79 / fmaxf((float)v82, 1.0);
          ++v79;
          --v80;
        }
        while (v80);
      }
LABEL_127:
      a4[1] = *a4;
      a5[1] = *a5;
      uint64_t v84 = v115;
      std::mutex v83 = v116;
      if (v116 != v115)
      {
        unint64_t v85 = 0;
        do
        {
          if (v84[v85])
          {
            BOOL v87 = a4[1];
            unint64_t v86 = (unint64_t)a4[2];
            if ((unint64_t)v87 >= v86)
            {
              double v89 = *a4;
              uint64_t v90 = (v87 - *a4) >> 2;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v92 = v86 - (void)v89;
              if (v92 >> 1 > v91) {
                unint64_t v91 = v92 >> 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v93);
                double v89 = *a4;
                BOOL v87 = a4[1];
              }
              else
              {
                unint64_t v94 = 0;
              }
              uint64_t v95 = &v94[4 * v90];
              *(_DWORD *)uint64_t v95 = v85;
              double v88 = v95 + 4;
              while (v87 != v89)
              {
                int v96 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *a4 = v95;
              a4[1] = v88;
              a4[2] = &v94[4 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(_DWORD *)BOOL v87 = v85;
              double v88 = v87 + 4;
            }
            a4[1] = v88;
            uint64_t v97 = __p;
            uint64_t v99 = a5[1];
            unint64_t v98 = (unint64_t)a5[2];
            if ((unint64_t)v99 >= v98)
            {
              double v101 = *a5;
              uint64_t v102 = (v99 - *a5) >> 2;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v104 = v98 - (void)v101;
              if (v104 >> 1 > v103) {
                unint64_t v103 = v104 >> 1;
              }
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v103;
              }
              if (v105)
              {
                double v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v105);
                double v101 = *a5;
                uint64_t v99 = a5[1];
              }
              else
              {
                double v106 = 0;
              }
              double v107 = &v106[4 * v102];
              *(_DWORD *)double v107 = v97[v85];
              float64x2_t v100 = v107 + 4;
              while (v99 != v101)
              {
                int v108 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v107 - 1) = v108;
                v107 -= 4;
              }
              *a5 = v107;
              a5[1] = v100;
              a5[2] = &v106[4 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v99 = *((_DWORD *)__p + v85);
              float64x2_t v100 = v99 + 4;
            }
            a5[1] = v100;
            uint64_t v84 = v115;
            std::mutex v83 = v116;
          }
          ++v85;
        }
        while (v85 < (v83 - (unsigned char *)v84) >> 3);
      }
      if (v112.__begin_)
      {
        v112.__end_ = v112.__begin_;
        operator delete(v112.__begin_);
      }
      if (__p)
      {
        float v114 = __p;
        operator delete(__p);
      }
      if (v115)
      {
        double v116 = v115;
        operator delete(v115);
      }
      return;
    default:
LABEL_84:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v120);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      uint64_t v54 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v120);
      uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Unknown feature importance type, expected one of: ", 50);
      uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"{\"weight\", \"total_gain\", \"total_cover\", \"gain\", \"cover\"}, got: ", 63);
      int v57 = *((char *)a2 + 23);
      if (v57 >= 0) {
        char v58 = a2;
      }
      else {
        char v58 = *a2;
      }
      if (v57 >= 0) {
        uint64_t v59 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v59 = (uint64_t)a2[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v58, v59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v120);
      goto LABEL_91;
  }
}

void sub_22E98550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::gbm::GBTree::UseGPU(xgboost::gbm::GBTree *this)
{
  return *((_DWORD *)this + 79) == 2 || *((_DWORD *)this + 80) == 5;
}

void non-virtual thunk to'xgboost::gbm::GBTree::~GBTree(xgboost::gbm::GBTree *this)
{
}

{
  uint64_t vars8;

  xgboost::gbm::GBTree::~GBTree((xgboost::gbm::GBTree *)((char *)this - 8));

  JUMPOUT(0x230FA80D0);
}

xgboost::RegTree *xgboost::RegTree::RegTree(xgboost::RegTree *this)
{
  *(void *)this = &unk_26E24D2B8;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(void *)((char *)this + 148) = 0;
  *((_OWORD *)this + 10) = 0u;
  char v2 = (uint64_t *)((char *)this + 160);
  *((_OWORD *)this + 13) = 0u;
  int v3 = (char *)this + 208;
  char v4 = (unint64_t *)((char *)this + 232);
  unint64_t v5 = (char *)this + 280;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 1) = 0x100000001;
  *((_DWORD *)this + 4) = 0;
  std::vector<xgboost::RegTree::Node>::resize((uint64_t)this + 160, 1uLL);
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v3, *((int *)this + 3));
  unint64_t v6 = *((int *)this + 3);
  char v16 = 0;
  uint64_t v7 = *((void *)this + 29);
  unint64_t v8 = *((void *)this + 30) - v7;
  BOOL v9 = v6 >= v8;
  unint64_t v10 = v6 - v8;
  if (v10 != 0 && v9)
  {
    std::vector<xgboost::FeatureType>::__append(v4, v10, &v16);
    unint64_t v6 = *((int *)this + 3);
  }
  else if (!v9)
  {
    *((void *)this + 30) = v7 + v6;
  }
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v5, v6);
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = *v2;
    do
    {
      uint64_t v14 = v13 + v11;
      *(_DWORD *)(v14 + 16) = 0;
      *(void *)(v14 + 4) = -1;
      uint64_t v13 = *((void *)this + 20);
      *(_DWORD *)(v13 + v11) = -1;
      ++v12;
      v11 += 20;
    }
    while (v12 < *((int *)this + 3));
  }
  return this;
}

void sub_22E985814(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[36] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)v1[32];
  if (v8)
  {
    v1[33] = v8;
    operator delete(v8);
  }
  BOOL v9 = *v4;
  if (*v4)
  {
    v1[30] = v9;
    operator delete(v9);
  }
  unint64_t v10 = *v3;
  if (*v3)
  {
    v1[27] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)v1[23];
  if (v11)
  {
    v1[24] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[21] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::RegTree::Node>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::RegTree::Node>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

void std::vector<xgboost::RTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::RTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::RegTree::Node>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (_OWORD *)((char *)v7 + 20 * a2);
      uint64_t v14 = 20 * a2;
      do
      {
        *uint64_t v7 = xmmword_22EA1DF10;
        uint64_t v7 = (_OWORD *)((char *)v7 + 20);
        v14 -= 20;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::vector<int>::pointer v15 = &v12[20 * v8];
    char v16 = &v15[20 * a2];
    uint64_t v17 = 20 * a2;
    uint64_t v18 = v15;
    do
    {
      *uint64_t v18 = xmmword_22EA1DF10;
      uint64_t v18 = (_OWORD *)((char *)v18 + 20);
      v17 -= 20;
    }
    while (v17);
    int v19 = &v12[20 * v11];
    long long v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v15 - 20) = v22;
        v15 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

void std::vector<xgboost::RTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    std::vector<int>::pointer v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    char v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<xgboost::FeatureType>::__append(unint64_t *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  unint64_t v6 = a1[2];
  if (v6 - (unint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v14 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v14;
    }
    a1[1] = (unint64_t)v7;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = &v7[-*a1];
    unint64_t v10 = (unint64_t)&v9[a2];
    if ((uint64_t)&v9[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v6 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)operator new(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    std::vector<int>::pointer v15 = &v9[(void)v13];
    char v16 = &v9[(void)v13 + v4];
    do
    {
      (v9++)[(void)v13] = *a3;
      --v4;
    }
    while (v4);
    if (v7 != (unsigned char *)v8)
    {
      uint64_t v17 = &v7[~v8];
      do
      {
        char v18 = *--v7;
        (v17--)[(void)v13] = v18;
      }
      while (v7 != (unsigned char *)v8);
      std::vector<int>::pointer v15 = v13;
    }
    *a1 = (unint64_t)v15;
    a1[1] = (unint64_t)v16;
    a1[2] = (unint64_t)&v13[v12];
    if (v8)
    {
      operator delete((void *)v8);
    }
  }
}

void xgboost::gbm::GBTreeModel::~GBTreeModel(xgboost::gbm::GBTreeModel *this)
{
  *(void *)this = &unk_26E24E678;
  unint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26E24E678;
  unint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x230FA80D0](this, 0x10F1C406709006FLL);
}

void std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__clear[abi:ne180100](v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  BOOL v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    unint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  unint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_22E986010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22E986378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<int *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1[4], v16);
      int v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<int *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<int>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    unint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t std::vector<std::unique_ptr<xgboost::RegTree>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<xgboost::RegTree>>,std::reverse_iterator<std::unique_ptr<xgboost::RegTree>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::vector<int>::pointer begin = this->__begin_;
  if (this->__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22E986E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<std::unique_ptr<xgboost::RegTree>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<std::unique_ptr<xgboost::RegTree>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<xgboost::RegTree>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<xgboost::RegTree>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(&v14);
  }
}

void sub_22E9870C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<int,unsigned int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E98726C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<xgboost::RegTree::Node>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E987354(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::FeatureType>::__init_with_size[abi:ne180100]<xgboost::FeatureType*,xgboost::FeatureType*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E9873D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::RegTree::Segment>::__init_with_size[abi:ne180100]<xgboost::RegTree::Segment*,xgboost::RegTree::Segment*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E98744C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::FieldEntry<xgboost::TreeProcessType>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<xgboost::PredictorType>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<xgboost::TreeMethod>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<BOOL>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    int v4 = *(char *)(v2 + 47);
    if (v4 >= 0) {
      uint64_t v5 = v2 + 24;
    }
    else {
      uint64_t v5 = *(void *)(v2 + 24);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v6 = *(void *)(v2 + 32);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v11 = *(void *)(v2 + 48);
    uint64_t v10 = v2 + 48;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  *(unsigned char *)(a2 + *(void *)(result + 96)) = *(unsigned char *)(result + 104);
  return result;
}

void sub_22E987878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntry<BOOL>::Set(uint64_t a1, uint64_t a2, char *a3)
{
  memset(&v40, 0, sizeof(v40));
  if (a3[23] >= 0) {
    std::string::size_type v6 = a3[23];
  }
  else {
    std::string::size_type v6 = *((void *)a3 + 1);
  }
  std::string::resize(&v40, v6, 0);
  int v7 = a3[23];
  if (v7 >= 0) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = *(char **)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = a3[23];
  }
  else {
    uint64_t v9 = *((void *)a3 + 1);
  }
  char v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if (v9)
  {
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v40;
    }
    else {
      uint64_t v11 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    do
    {
      v11->__r_.__value_.__s.__data_[0] = __tolower(*v8);
      uint64_t v11 = (std::string *)((char *)v11 + 1);
      ++v8;
      --v9;
    }
    while (v9);
    char v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  uint64_t v12 = *(void *)(a1 + 96);
  if (v10 < 0)
  {
    if (v40.__r_.__value_.__l.__size_ == 1)
    {
      long long v15 = (void *)v40.__r_.__value_.__r.__words[0];
      int v18 = *v40.__r_.__value_.__l.__data_;
      if (v18 == 48)
      {
LABEL_63:
        char v17 = 0;
        goto LABEL_64;
      }
      if (v18 != 49) {
        goto LABEL_44;
      }
    }
    else
    {
      if (v40.__r_.__value_.__l.__size_ != 4)
      {
        if (v40.__r_.__value_.__l.__size_ != 5
          || ((long long v15 = (void *)v40.__r_.__value_.__r.__words[0], *(_DWORD *)v40.__r_.__value_.__l.__data_ == 1936482662)
            ? (BOOL v16 = *(unsigned char *)(v40.__r_.__value_.__r.__words[0] + 4) == 101)
            : (BOOL v16 = 0),
              !v16))
        {
LABEL_44:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v39);
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Invalid Parameter format for ", 29);
          int v20 = *(char *)(a1 + 47);
          if (v20 >= 0) {
            uint64_t v21 = a1 + 24;
          }
          else {
            uint64_t v21 = *(void *)(a1 + 24);
          }
          if (v20 >= 0) {
            uint64_t v22 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            uint64_t v22 = *(void *)(a1 + 32);
          }
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" expect ", 8);
          uint64_t v27 = *(void *)(a1 + 48);
          uint64_t v26 = a1 + 48;
          uint64_t v25 = v27;
          int v28 = *(char *)(v26 + 23);
          if (v28 >= 0) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v25;
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v26 + 23);
          }
          else {
            uint64_t v30 = *(void *)(v26 + 8);
          }
          long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v29, v30);
          long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" but value='", 12);
          int v33 = a3[23];
          if (v33 >= 0) {
            uint64_t v34 = (uint64_t)a3;
          }
          else {
            uint64_t v34 = *(void *)a3;
          }
          if (v33 >= 0) {
            uint64_t v35 = a3[23];
          }
          else {
            uint64_t v35 = *((void *)a3 + 1);
          }
          uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
          v38.__r_.__value_.__s.__data_[0] = 39;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&v38, 1);
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(exception, &v38);
          exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
        }
        goto LABEL_63;
      }
      long long v15 = (void *)v40.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)v40.__r_.__value_.__l.__data_ != 1702195828) {
        goto LABEL_44;
      }
    }
    char v17 = 1;
LABEL_64:
    *(unsigned char *)(a2 + v12) = v17;
    operator delete(v15);
    return;
  }
  if (v10 != 1)
  {
    if (v10 != 4)
    {
      if (v10 != 5) {
        goto LABEL_44;
      }
      if (LODWORD(v40.__r_.__value_.__l.__data_) != 1936482662 || v40.__r_.__value_.__s.__data_[4] != 101) {
        goto LABEL_44;
      }
      char v14 = 0;
      goto LABEL_39;
    }
    if (LODWORD(v40.__r_.__value_.__l.__data_) != 1702195828) {
      goto LABEL_44;
    }
LABEL_38:
    char v14 = 1;
LABEL_39:
    *(unsigned char *)(a2 + v12) = v14;
    return;
  }
  if (v40.__r_.__value_.__s.__data_[0] != 48)
  {
    if (v40.__r_.__value_.__s.__data_[0] != 49) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(unsigned char *)(a2 + v12) = 0;
}

void sub_22E987BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      if (*(char *)(v18 - 65) < 0) {
        operator delete(*(void **)(v18 - 88));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, void))(*a1 + 64))(a1, v5, *(unsigned __int8 *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E987D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  size_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)size_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E987FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::PrintDefaultValueString(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, void))(*(void *)a1 + 64))(a1, a2, a1[104]);
}

uint64_t dmlc::parameter::FieldEntry<BOOL>::PrintValue()
{
  return std::ostream::operator<<();
}

void std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
}

void *std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24B7A8;
  return result;
}

void std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()()
{
}

void sub_22E9880BC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40BCD2A33ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

uint64_t xgboost::gbm::GBTree::GBTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26E24B530;
  *(void *)(a1 + 8) = &unk_26E24B5F8;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = &unk_26E24E678;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 44) = 1;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a3;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 330) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 392));
  return a1;
}

void sub_22E988240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = *(void *)(v3 + 384);
  *(void *)(v3 + 384) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 311) < 0) {
    operator delete(*v4);
  }
  xgboost::gbm::GBTreeModel::~GBTreeModel(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
}

void *std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24B828;
  return result;
}

void std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()()
{
}

void sub_22E9883AC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C401DB78BEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::gbm::Dart::~Dart(xgboost::gbm::Dart *this)
{
  *(void *)this = &unk_26E24B898;
  *((void *)this + 1) = &unk_26E24B960;
  int v4 = (void **)((char *)this + 536);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 64);
  if (v2)
  {
    *((void *)this + 65) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 61);
  if (v3)
  {
    *((void *)this + 62) = v3;
    operator delete(v3);
  }
  xgboost::gbm::GBTree::~GBTree(this);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26E24B898;
  *((void *)this + 1) = &unk_26E24B960;
  int v4 = (void **)((char *)this + 536);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 64);
  if (v2)
  {
    *((void *)this + 65) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 61);
  if (v3)
  {
    *((void *)this + 62) = v3;
    operator delete(v3);
  }
  xgboost::gbm::GBTree::~GBTree(this);
  MEMORY[0x230FA80D0]();
}

float xgboost::gbm::Dart::LoadModel(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  int v4 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  uint64_t v6 = v5 + 2;
  int v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 4) {
      goto LABEL_7;
    }
    size_t v8 = (_DWORD *)*v6;
  }
  else
  {
    size_t v8 = v5 + 2;
    if (v7 != 4) {
LABEL_7:
    }
      dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)v6, "dart");
  }
  if (*v8 != 1953653092) {
    goto LABEL_7;
  }
  uint64_t v26 = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    long long v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"dart\"", 33);
    int v13 = *(char *)(v26 + 23);
    uint64_t v14 = v13 >= 0 ? v26 : *(void *)v26;
    uint64_t v15 = v13 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(void *)(v26 + 8);
    BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    uint64_t v17 = v26;
    uint64_t v26 = 0;
    if (v17) {
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v17);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree");
  uint64_t v18 = (const xgboost::Json *)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  xgboost::gbm::GBTree::LoadModel(this, v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_drop");
  uint64_t v19 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  int v20 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v19);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  std::vector<float>::resize((uint64_t)this + 488, (uint64_t)(v20[3] - v20[2]) >> 3);
  if (*((void *)this + 62) != *((void *)this + 61))
  {
    unint64_t v22 = 0;
    do
    {
      float result = *((float *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v20[2] + 8 * v22))
               + 4);
      uint64_t v23 = *((void *)this + 61);
      *(float *)(v23 + 4 * v22++) = result;
    }
    while (v22 < (*((void *)this + 62) - v23) >> 2);
  }
  return result;
}

void sub_22E9887E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::Dart::SaveModel(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "dart");
  uint64_t v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)size_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E988C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void **a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a24 = &a18;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::Configure(uint64_t a1, uint64_t a2)
{
  xgboost::gbm::GBTree::Configure(a1, (std::string **)a2);
  if (*(unsigned char *)(a1 + 456))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    xgboost::gbm::DartTrainParam::__MANAGER__(v4);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71ED0, a1 + 456, *(void *)a2, *(void *)(a2 + 8), 0, &v5, 0);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    xgboost::gbm::DartTrainParam::__MANAGER__(v4);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71ED0, a1 + 456, *(void *)a2, *(void *)(a2 + 8), &v5, 0);
    *(unsigned char *)(a1 + 456) = 1;
  }
  size_t v8 = (void **)&v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_22E988D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::Load(xgboost::gbm::Dart *this, dmlc::Stream *a2)
{
  xgboost::gbm::GBTree::Load(this, a2);
  int v4 = (void *)((char *)this + 488);
  std::vector<float>::resize((uint64_t)this + 488, *((int *)this + 10));
  if (*((_DWORD *)this + 10))
  {
    unint64_t v6 = 0;
    if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v6, 8) == 8)
    {
      unint64_t v5 = v6;
      std::vector<float>::resize((uint64_t)v4, v6);
      if (v6) {
        (**(void (***)(dmlc::Stream *, void, uint64_t))a2)(a2, *v4, 4 * v5);
      }
    }
  }
}

uint64_t xgboost::gbm::Dart::Save(xgboost::gbm::Dart *this, dmlc::Stream *a2)
{
  uint64_t result = xgboost::gbm::GBTreeModel::Save((uint64_t)this + 24, (uint64_t)a2);
  uint64_t v5 = *((void *)this + 62) - *((void *)this + 61);
  if (v5)
  {
    uint64_t v6 = v5 >> 2;
    uint64_t result = (*(uint64_t (**)(dmlc::Stream *, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v6, 8);
    if (v6) {
      return (*(uint64_t (**)(dmlc::Stream *, void, void))(*(void *)a2 + 8))(a2, *((void *)this + 61), *((void *)this + 62) - *((void *)this + 61));
    }
  }
  return result;
}

void xgboost::gbm::Dart::Slice(xgboost::gbm::Dart *this, int a2, int a3, int a4, xgboost::GradientBooster *a5, BOOL *a6)
{
  LODWORD(v9) = a3;
  xgboost::gbm::GBTree::Slice(this, a2, a3, a4, a5, a6);
  if (!*a6)
  {
    if (a5
    {
      int v13 = v12;
      if (v12[61] != v12[62])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        unint64_t v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
        std::string v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: p_dart->weight_drop_.empty()", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
      }
      int v14 = *(_DWORD *)(*((void *)this + 4) + 8);
      int v15 = *((_DWORD *)this + 11);
      unint64_t v16 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::Dart *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)a2, v9);
      unint64_t v17 = HIDWORD(v16);
      int v46 = HIDWORD(v16);
      unint64_t v18 = (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3;
      if (v18 >= HIDWORD(v16))
      {
        unint64_t v19 = (v15 * v14);
        if (!v9) {
          unint64_t v9 = v18 / v19;
        }
        int v45 = v16;
        int v43 = ((int)v9 - a2) / a4;
        if (v43)
        {
          int v20 = 0;
          uint64_t v21 = (void **)(v13 + 61);
          int v42 = v19 * (a4 - 1);
          LODWORD(v22) = v16;
          do
          {
            if (v19)
            {
              int v23 = 0;
              unint64_t v22 = (int)v22;
              do
              {
                if (v22 >= v17) {
                  dmlc::LogCheckFormat<int,unsigned int>();
                }
                uint64_t v24 = *((void *)this + 61);
                if (v22 >= (*((void *)this + 62) - v24) >> 2) {
                  std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v26 = (char *)v13[62];
                unint64_t v25 = v13[63];
                if ((unint64_t)v26 >= v25)
                {
                  int v28 = (char *)*v21;
                  uint64_t v29 = (v26 - (unsigned char *)*v21) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v31 = v25 - (void)v28;
                  if (v31 >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v13 + 63), v32);
                    int v28 = (char *)v13[61];
                    uint64_t v26 = (char *)v13[62];
                  }
                  else
                  {
                    int v33 = 0;
                  }
                  uint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)uint64_t v34 = *(_DWORD *)(v24 + 4 * v22);
                  uint64_t v27 = v34 + 4;
                  while (v26 != v28)
                  {
                    int v35 = *((_DWORD *)v26 - 1);
                    v26 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  v13[61] = v34;
                  v13[62] = v27;
                  v13[63] = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v26 = *(_DWORD *)(v24 + 4 * v22);
                  uint64_t v27 = v26 + 4;
                }
                v13[62] = v27;
                int v45 = ++v22;
                ++v23;
              }
              while (v23 != v19);
            }
            LODWORD(v22) = v22 + v42;
            int v45 = v22;
            ++v20;
          }
          while (v20 != v43);
        }
      }
    }
    else
    {
      uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
      dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      std::string v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
      uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: p_dart", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
      __break(1u);
    }
  }
}

void sub_22E9892C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::PredictBatch(xgboost::gbm::Dart *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, int a4, unsigned int a5, int a6)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  if (!a4) {
    goto LABEL_151;
  }
  *((void *)this + 65) = *((void *)this + 64);
  uint64_t v11 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  uint64_t v12 = v11;
  if (*((float *)this + 119) > 0.0)
  {
    double v13 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v11);
    if ((v13
        + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12)
        * 4294967300.0)
       * 5.42101086e-20
       + 0.0 < *((float *)this + 119))
      goto LABEL_151;
  }
  int v14 = (void **)((char *)this + 512);
  unsigned int v122 = a5;
  if (*((_DWORD *)this + 115) == 1)
  {
    int v15 = (float *)*((void *)this + 61);
    unint64_t v16 = (float *)*((void *)this + 62);
    if (v15 == v16)
    {
      unint64_t v23 = 0;
      unint64_t v22 = (float *)*((void *)this + 61);
    }
    else
    {
      float v17 = 0.0;
      do
      {
        float v18 = *v15++;
        float v17 = v17 + v18;
      }
      while (v15 != v16);
      unint64_t v19 = 0;
      do
      {
        double v20 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
        unint64_t v22 = (float *)*((void *)this + 61);
        int v15 = (float *)*((void *)this + 62);
        unint64_t v23 = v15 - v22;
        if ((v20 + (double)v21 * 4294967300.0) * 5.42101086e-20 + 0.0 < (float)((float)(v22[v19]
                                                                                       * (float)(*((float *)this + 117)
                                                                                               * (float)v23))
                                                                               / v17))
        {
          uint64_t v24 = (char *)*((void *)this + 65);
          unint64_t v25 = *((void *)this + 66);
          if ((unint64_t)v24 >= v25)
          {
            uint64_t v27 = (char *)*v14;
            uint64_t v28 = (v24 - (unsigned char *)*v14) >> 3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              goto LABEL_154;
            }
            uint64_t v30 = v25 - (void)v27;
            if (v30 >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v31);
              uint64_t v24 = (char *)*((void *)this + 65);
              uint64_t v27 = (char *)*((void *)this + 64);
            }
            else
            {
              unint64_t v32 = 0;
            }
            int v33 = (unint64_t *)&v32[8 * v28];
            *int v33 = v19;
            uint64_t v26 = v33 + 1;
            while (v24 != v27)
            {
              unint64_t v34 = *((void *)v24 - 1);
              v24 -= 8;
              *--int v33 = v34;
            }
            *((void *)this + 64) = v33;
            *((void *)this + 65) = v26;
            *((void *)this + 66) = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)uint64_t v24 = v19;
            uint64_t v26 = v24 + 8;
          }
          *((void *)this + 65) = v26;
          unint64_t v22 = (float *)*((void *)this + 61);
          int v15 = (float *)*((void *)this + 62);
          unint64_t v23 = v15 - v22;
        }
        ++v19;
      }
      while (v19 < v23);
    }
    if (*((unsigned char *)this + 472) && v22 != v15 && *((void *)this + 64) == *((void *)this + 65))
    {
      std::string __p = 0;
      long long v124 = 0uLL;
      if (v23 < 2) {
        goto LABEL_125;
      }
      if ((v23 - 1) >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v51 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v124 + 8, v23 - 1);
      uint64_t v53 = v124;
      long long v54 = v51;
      while (v53)
      {
        uint64_t v55 = *(void *)(v53 - 8);
        v53 -= 8;
        *((void *)v54-- - 1) = v55;
      }
      std::string __p = v54;
      *(void *)&long long v124 = v51;
      *((void *)&v124 + 1) = &v51[v52];
      for (unint64_t i = 0; i != v23; ++i)
      {
        double v58 = *(float *)(*((void *)this + 61)
                       + 4
                       * (unint64_t)((double)v23 / (double)v23 * 0.5
                                          + (double)i * ((double)v23 / (double)v23)
                                          + 0.0));
        if ((unint64_t)v51 >= *((void *)&v124 + 1))
        {
          uint64_t v59 = __p;
          uint64_t v60 = v51 - __p;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = *((void *)&v124 + 1) - (void)__p;
          if ((uint64_t)(*((void *)&v124 + 1) - (void)__p) >> 2 > v61) {
            unint64_t v61 = v62 >> 2;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            int v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v124 + 8, v63);
            uint64_t v59 = __p;
            uint64_t v51 = (double *)v124;
          }
          else
          {
            int v64 = 0;
          }
          unsigned __int8 v65 = (double *)&v64[8 * v60];
          double *v65 = v58;
          int v66 = v65 + 1;
          while (v51 != v59)
          {
            uint64_t v67 = *((void *)v51-- - 1);
            *((void *)v65-- - 1) = v67;
          }
          std::string __p = v65;
          *((void *)&v124 + 1) = &v64[8 * v63];
          if (v59) {
            operator delete(v59);
          }
          uint64_t v51 = v66;
        }
        else
        {
          *v51++ = v58;
        }
        *(void *)&long long v124 = v51;
      }
      unint64_t v68 = __p;
      int v14 = (void **)((char *)this + 512);
      if (__p == v51) {
        goto LABEL_125;
      }
      if ((unint64_t)((char *)v51 - (char *)__p) < 9)
      {
        *(void *)&long long v124 = __p;
        if (*((double **)&v124 + 1) == __p) {
          goto LABEL_125;
        }
        std::string __p = 0;
        long long v124 = 0uLL;
        if (!v68) {
          goto LABEL_125;
        }
      }
      else
      {
        uint64_t v69 = v51 - __p;
        double v70 = 0.0;
        uint64_t v71 = __p;
        do
        {
          double v72 = *v71++;
          double v70 = v70 + v72;
        }
        while (v71 != v51);
        if (__p < v51)
        {
          uint64_t v73 = __p;
          do
          {
            double *v73 = *v73 / v70;
            ++v73;
          }
          while (v73 < v51);
        }
        v125.__ptr_ = 0;
        v126[0] = 0;
        v126[1] = 0;
        uint64_t v74 = v69 - 1;
        if (v69 == 1)
        {
          ptr = 0;
        }
        else
        {
          std::vector<void *>::__vallocate[abi:ne180100](&v125, v69 - 1);
          uint64_t v75 = (char *)v126[0];
          bzero(v126[0], 8 * v74);
          v126[0] = &v75[8 * v74];
          unint64_t v68 = __p;
          uint64_t v51 = (double *)v124;
          ptr = (double *)v125.__ptr_;
          int v14 = (void **)((char *)this + 512);
        }
        unint64_t v91 = v51 - 1;
        if (v68 != v51 - 1)
        {
          uint64_t v92 = v68 + 1;
          double v93 = *v68;
          double *ptr = *v68;
          if (v68 + 1 != v91)
          {
            unint64_t v94 = ptr + 1;
            do
            {
              double v95 = *v92++;
              double v93 = v93 + v95;
              *v94++ = v93;
            }
            while (v92 != v91);
          }
        }
        std::string __p = ptr;
        int v96 = (void *)*((void *)&v124 + 1);
        long long v124 = *(_OWORD *)v126;
        v125.__ptr_ = v68;
        v126[1] = v96;
        if (!v68) {
          goto LABEL_125;
        }
        v126[0] = v68;
      }
      operator delete(v68);
LABEL_125:
      int v97 = a6;
      unint64_t v98 = __p;
      uint64_t v99 = (double *)v124;
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v100 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v101 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
      if ((double *)v124 != __p)
      {
        unint64_t v102 = (uint64_t)(v124 - (void)__p) >> 3;
        do
        {
          unint64_t v103 = v102 >> 1;
          uint64_t v104 = &v98[v102 >> 1];
          double v106 = *v104;
          unint64_t v105 = v104 + 1;
          v102 += ~(v102 >> 1);
          if (((double)v100 + (double)v101 * 4294967300.0) * 5.42101086e-20 + 0.0 < v106) {
            unint64_t v102 = v103;
          }
          else {
            unint64_t v98 = v105;
          }
        }
        while (v102);
        uint64_t v99 = v98;
      }
      if (__p) {
        operator delete(__p);
      }
      uint64_t v107 = v99 - __p;
      int v108 = (uint64_t *)*((void *)this + 65);
      unint64_t v109 = *((void *)this + 66);
      a6 = v97;
      if ((unint64_t)v108 < v109)
      {
        uint64_t *v108 = v107;
        uint64_t v81 = v108 + 1;
        a5 = v122;
        goto LABEL_150;
      }
      unint64_t v82 = *v14;
      uint64_t v110 = ((char *)v108 - (unsigned char *)*v14) >> 3;
      unint64_t v111 = v110 + 1;
      a5 = v122;
      if ((unint64_t)(v110 + 1) >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v112 = v109 - (void)v82;
      if (v112 >> 2 > v111) {
        unint64_t v111 = v112 >> 2;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v113 = v111;
      }
      if (v113)
      {
        float v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v113);
        int v108 = (uint64_t *)*((void *)this + 65);
        unint64_t v82 = (void *)*((void *)this + 64);
      }
      else
      {
        float v114 = 0;
      }
      double v88 = &v114[8 * v110];
      double v89 = &v114[8 * v113];
      *(void *)double v88 = v107;
      uint64_t v81 = v88 + 8;
      while (v108 != v82)
      {
        uint64_t v115 = *--v108;
        *((void *)v88 - 1) = v115;
        v88 -= 8;
      }
      goto LABEL_148;
    }
  }
  else
  {
    uint64_t v35 = *((void *)this + 62);
    if (v35 == *((void *)this + 61))
    {
      unint64_t v50 = 0;
      uint64_t v49 = *((void *)this + 62);
    }
    else
    {
      unint64_t v36 = 0;
      do
      {
        double v37 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
        if ((v37
            + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12)
            * 4294967300.0)
           * 5.42101086e-20
           + 0.0 < *((float *)this + 117))
        {
          std::string v38 = (unint64_t *)*((void *)this + 65);
          unint64_t v39 = *((void *)this + 66);
          if ((unint64_t)v38 >= v39)
          {
            uint64_t v41 = (unint64_t *)*v14;
            uint64_t v42 = ((char *)v38 - (unsigned char *)*v14) >> 3;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61) {
LABEL_154:
            }
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            uint64_t v44 = v39 - (void)v41;
            if (v44 >> 2 > v43) {
              unint64_t v43 = v44 >> 2;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v45);
              std::string v38 = (unint64_t *)*((void *)this + 65);
              uint64_t v41 = (unint64_t *)*((void *)this + 64);
            }
            else
            {
              int v46 = 0;
            }
            uint64_t v47 = (unint64_t *)&v46[8 * v42];
            unint64_t *v47 = v36;
            std::string v40 = v47 + 1;
            while (v38 != v41)
            {
              unint64_t v48 = *--v38;
              *--uint64_t v47 = v48;
            }
            *((void *)this + 64) = v47;
            *((void *)this + 65) = v40;
            *((void *)this + 66) = &v46[8 * v45];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *std::string v38 = v36;
            std::string v40 = v38 + 1;
          }
          *((void *)this + 65) = v40;
        }
        ++v36;
        uint64_t v49 = *((void *)this + 61);
        uint64_t v35 = *((void *)this + 62);
      }
      while (v36 < (v35 - v49) >> 2);
      unint64_t v50 = (v35 - v49) >> 2;
    }
    if (*((unsigned char *)this + 472) && v49 != v35 && *((void *)this + 64) == *((void *)this + 65))
    {
      if (v50 == 1)
      {
        unint64_t v56 = 0;
      }
      else if (v50)
      {
        unint64_t v77 = __clz(v50);
        uint64_t v78 = 63;
        if (((v50 << v77) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          uint64_t v78 = 64;
        }
        std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)&v125, (uint64_t)v12, v78 - v77);
        do
          unint64_t v56 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)&v125);
        while (v56 >= v50);
      }
      else
      {
        std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)&v125, (uint64_t)v12, 0x40uLL);
        unint64_t v56 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)&v125);
      }
      double v79 = (unint64_t *)*((void *)this + 65);
      unint64_t v80 = *((void *)this + 66);
      if ((unint64_t)v79 < v80)
      {
        *double v79 = v56;
        uint64_t v81 = v79 + 1;
LABEL_150:
        *((void *)this + 65) = v81;
        goto LABEL_151;
      }
      unint64_t v82 = *v14;
      uint64_t v83 = ((char *)v79 - (unsigned char *)*v14) >> 3;
      unint64_t v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v85 = v80 - (void)v82;
      if (v85 >> 2 > v84) {
        unint64_t v84 = v85 >> 2;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v84;
      }
      if (v86)
      {
        BOOL v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v86);
        double v79 = (unint64_t *)*((void *)this + 65);
        unint64_t v82 = (void *)*((void *)this + 64);
      }
      else
      {
        BOOL v87 = 0;
      }
      double v88 = &v87[8 * v83];
      double v89 = &v87[8 * v86];
      *(void *)double v88 = v56;
      uint64_t v81 = v88 + 8;
      while (v79 != v82)
      {
        uint64_t v90 = *--v79;
        *((void *)v88 - 1) = v90;
        v88 -= 8;
      }
LABEL_148:
      *((void *)this + 64) = v88;
      *((void *)this + 65) = v81;
      *((void *)this + 66) = v89;
      if (v82) {
        operator delete(v82);
      }
      goto LABEL_150;
    }
  }
LABEL_151:
  Predictor = (uint64_t *)xgboost::gbm::GBTree::GetPredictor((uint64_t)this, (uint64_t)a3, (uint64_t)a2);
  uint64_t v116 = *Predictor;
  if (!*Predictor)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    int v119 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
    long long v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Check failed: predictor", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v125);
    uint64_t v116 = *Predictor;
  }
  int v117 = (unint64_t *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  xgboost::Predictor::InitOutPredictions(v116, v117, (uint64_t *)a3, (uint64_t)this + 24);
  *((_DWORD *)a3 + 2) = 0;
  xgboost::gbm::detail::LayerToTree((xgboost::gbm::Dart *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)a5, a6);
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E98A130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25)
{
}

void sub_22E98A218(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E98A210);
}

void xgboost::gbm::Dart::InplacePredict(uint64_t a1, int a2, int a3, int a4, xgboost::gbm::GBTreeModel *a5, int a6)
{
  v8[35] = *(std::exception_ptr *)MEMORY[0x263EF8340];
  xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)a5, a6);
  uint64_t v7 = *(void *)(a1 + 384);
  *(void *)operator new(8uLL) = v7;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)v8);
}

void sub_22E98A7A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_22E98A880(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E98A878);
}

uint64_t xgboost::gbm::Dart::PredictInstance(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t Predictor = xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)a4, a5);
  unint64_t v9 = *(uint64_t (**)(void))(**(void **)Predictor + 40);

  return v9();
}

uint64_t xgboost::gbm::Dart::PredictContribution(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8 = a4;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    int v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  unint64_t v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, _DWORD))(**(void **)(a1 + 384) + 56))(*(void *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v12), a1 + 488, a6, 0, 0);
}

void sub_22E98AA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::gbm::Dart::PredictInteractionContributions(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8 = a4;
  if (!*(unsigned char *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    int v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  unint64_t v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 384) + 64))(*(void *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v12), a1 + 488, a6);
}

void sub_22E98AB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::gbm::Dart::LoadConfig(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  int v4 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  uint64_t v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  uint64_t v6 = v5 + 2;
  int v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 4) {
      goto LABEL_7;
    }
    unsigned int v8 = (_DWORD *)*v6;
  }
  else
  {
    unsigned int v8 = v5 + 2;
    if (v7 != 4) {
LABEL_7:
    }
      dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)v6, "dart");
  }
  if (*v8 != 1953653092) {
    goto LABEL_7;
  }
  v20[0] = 0;
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "gbtree");
  unint64_t v9 = (const xgboost::Json *)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  xgboost::gbm::GBTree::LoadConfig(this, v9);
  std::string::basic_string[abi:ne180100]<0>(v20, "dart_train_param");
  long long v10 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, v20);
  uint64_t v11 = (xgboost::gbm::DartTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v10);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::string __p = &v24;
  unint64_t v12 = (void *)*((void *)v11 + 2);
  double v13 = (void *)((char *)v11 + 24);
  if (v12 != (void *)((char *)v11 + 24))
  {
    do
    {
      int v14 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v12[7]);
      uint64_t v26 = (long long *)(v12 + 4);
      int v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v12 + 4, (uint64_t)&std::piecewise_construct, &v26);
      uint64_t v11 = (xgboost::gbm::DartTrainParam *)std::string::operator=((std::string *)(v15 + 7), (const std::string *)(v14 + 16));
      unint64_t v16 = (void *)v12[1];
      if (v16)
      {
        do
        {
          char v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = (void *)v12[2];
          BOOL v18 = *v17 == (void)v12;
          unint64_t v12 = v17;
        }
        while (!v18);
      }
      unint64_t v12 = v17;
    }
    while (v17 != v13);
  }
  unint64_t v19 = (char *)this + 456;
  if (*v19)
  {
    memset(&v22, 0, sizeof(v22));
    xgboost::gbm::DartTrainParam::__MANAGER__(v11);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71ED0, (uint64_t)v19, __p, &v24, 0, &v22, 0);
  }
  else
  {
    memset(&v22, 0, sizeof(v22));
    xgboost::gbm::DartTrainParam::__MANAGER__(v11);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71ED0, (uint64_t)v19, __p, &v24, &v22, 0);
    *unint64_t v19 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v24);
  std::string __p = &v22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_22E98AEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v24 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::SaveConfig(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "dart");
  uint64_t v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)int v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E98B2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v34, a16);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::CommitModel(uint64_t a1, void *a2, __n128 a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    LODWORD(v7) = 0;
    do
    {
      uint64_t v8 = *a2 + v5;
      LODWORD(v7) = v7 + ((*(void *)(v8 + 8) - *(void *)v8) >> 3);
      xgboost::gbm::GBTreeModel::CommitModel(a1 + 24, (char **)v8, v6++);
      v5 += 24;
    }
    while (v6 < *(unsigned int *)(*(void *)(a1 + 32) + 8));
    unint64_t v7 = (int)v7;
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v9 = *(uint64_t **)(a1 + 520);
  long long v10 = *(uint64_t **)(a1 + 512);
  uint64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    if (v7)
    {
      uint64_t v28 = 0;
      unint64_t v29 = (void **)(a1 + 488);
      uint64_t v30 = (void *)(a1 + 504);
      unint64_t v31 = *(char **)(a1 + 496);
      do
      {
        if ((unint64_t)v31 >= *v30)
        {
          int v33 = (char *)*v29;
          uint64_t v34 = (v31 - (unsigned char *)*v29) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
LABEL_75:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          uint64_t v36 = *v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            std::string v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v37);
            int v33 = *(char **)(a1 + 488);
            unint64_t v31 = *(char **)(a1 + 496);
          }
          else
          {
            std::string v38 = 0;
          }
          unint64_t v39 = &v38[4 * v34];
          *(_DWORD *)unint64_t v39 = 1065353216;
          unint64_t v32 = v39 + 4;
          while (v31 != v33)
          {
            unsigned __int32 v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            a3.n128_u32[0] = v40;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a1 + 488) = v39;
          *(void *)(a1 + 496) = v32;
          *(void *)(a1 + 504) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v31 = 1065353216;
          unint64_t v32 = v31 + 4;
        }
        *(void *)(a1 + 496) = v32;
        ++v28;
        unint64_t v31 = v32;
      }
      while (v28 != v7);
    }
  }
  else
  {
    a3.n128_f64[0] = *(float *)(a1 + 480) / (double)v7;
    a3.n128_f32[0] = a3.n128_f64[0];
    if (*(_DWORD *)(a1 + 464) == 1)
    {
      a3.n128_f64[0] = 1.0 / (a3.n128_f32[0] + 1.0);
      float v12 = a3.n128_f64[0];
      double v13 = (void **)(a1 + 488);
      uint64_t v14 = *(void *)(a1 + 488);
      do
      {
        uint64_t v15 = *v10++;
        a3.n128_f32[0] = *(float *)(v14 + 4 * v15) * v12;
        *(_DWORD *)(v14 + 4 * v15) = a3.n128_u32[0];
      }
      while (v10 != v9);
      if (v7)
      {
        uint64_t v16 = 0;
        char v17 = (void *)(a1 + 504);
        BOOL v18 = *(float **)(a1 + 496);
        do
        {
          if ((unint64_t)v18 >= *v17)
          {
            double v20 = (float *)*v13;
            uint64_t v21 = ((char *)v18 - (unsigned char *)*v13) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              goto LABEL_75;
            }
            uint64_t v23 = *v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v24);
              double v20 = *(float **)(a1 + 488);
              BOOL v18 = *(float **)(a1 + 496);
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (float *)&v25[4 * v21];
            *uint64_t v26 = v12;
            unint64_t v19 = v26 + 1;
            while (v18 != v20)
            {
              unsigned __int32 v27 = *((_DWORD *)v18-- - 1);
              a3.n128_u32[0] = v27;
              *((_DWORD *)v26-- - 1) = v27;
            }
            *(void *)(a1 + 488) = v26;
            *(void *)(a1 + 496) = v19;
            *(void *)(a1 + 504) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *BOOL v18 = v12;
            unint64_t v19 = v18 + 1;
          }
          *(void *)(a1 + 496) = v19;
          ++v16;
          BOOL v18 = v19;
        }
        while (v16 != v7);
      }
    }
    else
    {
      a3.n128_f32[0] = a3.n128_f32[0] + (float)(unint64_t)v11;
      uint64_t v42 = (void **)(a1 + 488);
      uint64_t v43 = *(void *)(a1 + 488);
      do
      {
        uint64_t v44 = *v10++;
        float v41 = (double)(unint64_t)v11 / a3.n128_f32[0];
        *(float *)(v43 + 4 * v44) = *(float *)(v43 + 4 * v44) * v41;
      }
      while (v10 != v9);
      if (v7)
      {
        uint64_t v45 = 0;
        int v46 = (void *)(a1 + 504);
        uint64_t v47 = *(float **)(a1 + 496);
        float v48 = 1.0 / a3.n128_f32[0];
        do
        {
          if ((unint64_t)v47 >= *v46)
          {
            unint64_t v50 = (float *)*v42;
            uint64_t v51 = ((char *)v47 - (unsigned char *)*v42) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              goto LABEL_75;
            }
            uint64_t v53 = *v46 - (void)v50;
            if (v53 >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v54);
              unint64_t v50 = *(float **)(a1 + 488);
              uint64_t v47 = *(float **)(a1 + 496);
            }
            else
            {
              uint64_t v55 = 0;
            }
            unint64_t v56 = (float *)&v55[4 * v51];
            *unint64_t v56 = v48;
            uint64_t v49 = v56 + 1;
            while (v47 != v50)
            {
              unsigned __int32 v57 = *((_DWORD *)v47-- - 1);
              a3.n128_u32[0] = v57;
              *((_DWORD *)v56-- - 1) = v57;
            }
            *(void *)(a1 + 488) = v56;
            *(void *)(a1 + 496) = v49;
            *(void *)(a1 + 504) = &v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            float *v47 = v48;
            uint64_t v49 = v47 + 1;
          }
          *(void *)(a1 + 496) = v49;
          ++v45;
          uint64_t v47 = v49;
        }
        while (v45 != v7);
      }
    }
  }
  *(void *)(a1 + 520) = *(void *)(a1 + 512);
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a3) + 4) > 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v62, (uint64_t)__p, 909, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"drop ", 5);
    double v58 = (void *)std::ostream::operator<<();
    uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" trees, ", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"weight = ", 9);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v62);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22E98B87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'xgboost::gbm::Dart::~Dart(xgboost::gbm::Dart *this)
{
  uint64_t v2 = (xgboost::gbm::Dart *)((char *)this - 8);
  *((void *)this - 1) = &unk_26E24B898;
  *(void *)this = &unk_26E24B960;
  uint64_t v5 = (void **)((char *)this + 528);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (void *)*((void *)this + 63);
  if (v3)
  {
    *((void *)this + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 60);
  if (v4)
  {
    *((void *)this + 61) = v4;
    operator delete(v4);
  }
  xgboost::gbm::GBTree::~GBTree(v2);
}

{
  xgboost::gbm::GBTree *v2;
  void *v3;
  void *v4;
  void **v5;

  uint64_t v2 = (xgboost::gbm::Dart *)((char *)this - 8);
  *((void *)this - 1) = &unk_26E24B898;
  *(void *)this = &unk_26E24B960;
  uint64_t v5 = (void **)((char *)this + 528);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (void *)*((void *)this + 63);
  if (v3)
  {
    *((void *)this + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 60);
  if (v4)
  {
    *((void *)this + 61) = v4;
    operator delete(v4);
  }
  xgboost::gbm::GBTree::~GBTree(v2);
  MEMORY[0x230FA80D0]();
}

void non-virtual thunk to'xgboost::gbm::Dart::LoadConfig(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
}

void non-virtual thunk to'xgboost::gbm::Dart::SaveConfig(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
}

void dmlc::LogCheckFormat<std::string,char [5]>(uint64_t a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" (", 2);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  size_t v10 = strlen(a2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
  operator new();
}

void sub_22E98BBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::PredictionCacheEntry::~PredictionCacheEntry(xgboost::PredictionCacheEntry *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_approx__(xgboost::tree *this)
{
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_grow_histmaker__(xgboost::tree *this)
{
  return 0;
}

void sub_22E98BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v15 + 256);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](v18, 0);
  xgboost::common::Monitor::~Monitor(v17);
  xgboost::tree::TrainParam::~TrainParam(v16);
  MEMORY[0x230FA80D0](v15, 0x10F3C4082081CFCLL);
  _Unwind_Resume(a1);
}

void xgboost::tree::GlobalApproxUpdater::~GlobalApproxUpdater(xgboost::tree::GlobalApproxUpdater *this)
{
  *(void *)this = &unk_26E24BAB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  xgboost::common::Monitor::~Monitor((char **)this + 19);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E24BAB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  xgboost::common::Monitor::~Monitor((char **)this + 19);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::tree::GlobalApproxUpdater::LoadConfig(xgboost::tree::GlobalApproxUpdater *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  uint64_t v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::GlobalApproxUpdater *)((char *)this + 16), &v9);
  size_t v10 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hist_param");
  int v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(v5, (xgboost::tree::GlobalApproxUpdater *)((char *)this + 216), &v6);
  size_t v10 = &v6;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E98C05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::GlobalApproxUpdater::SaveConfig(xgboost::tree::GlobalApproxUpdater *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::GlobalApproxUpdater *)((char *)this + 16), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E98C1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void xgboost::tree::GlobalApproxUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v5);
  std::vector<std::pair<std::string, std::string>> v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(a1 + 216), a2, v4);
  std::vector<std::pair<std::string, std::string>> v6 = (void **)v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void xgboost::tree::GlobalApproxUpdater::Update(uint64_t a1, uint64_t a2, void (***a3)(void), void *a4)
{
  *(float *)(a1 + 20) = *(float *)(a1 + 20) / (float)(unint64_t)((uint64_t)(a4[1] - *a4) >> 3);
  int v4 = *(unsigned __int8 *)(a1 + 217);
  (**a3)(a3);
  if (v4) {
    operator new();
  }
  operator new();
}

void sub_22E98EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::GlobalApproxUpdater::UpdatePredictionCache(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 240) != a2) {
    return 0;
  }
  uint64_t v83 = *(void *)(a1 + 224);
  if (!v83 && !*(void *)(a1 + 232)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 217))
  {
    uint64_t v5 = *a3;
    unint64_t v6 = a3[2];
    uint64_t v8 = a3[4];
    uint64_t v7 = a3[5];
    int v9 = *((_DWORD *)a3 + 12);
    std::string::basic_string[abi:ne180100]<0>(&v93, "UpdatePredictionCache");
    xgboost::common::Monitor::Start();
    if (v94.__m_.__opaque[7] < 0) {
      operator delete(v93.__ptr_);
    }
    v91[0] = v7;
    if (v7 != *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
    uint64_t v85 = *(void *)(v83 + 928);
    v91[0] = v7;
    LODWORD(v87[0]) = 0;
    if (!v7) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (!v85)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      uint64_t v76 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      unint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Check failed: p_last_tree", 25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
    }
    xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v83 + 304), (uint64_t)v91);
    LODWORD(v87[0]) = v9;
    v92.i32[0] = -1;
    if (v9 != -1) {
      dmlc::LogCheckFormat<int,int>();
    }
    unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v85 + 168) - *(void *)(v85 + 160)) >> 2);
    uint64_t v10 = *(void *)(v83 + 904);
    for (uint64_t i = *(void *)(v83 + 912); v10 != i; v10 += 136)
    {
      v87[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 112) - *(void *)(v10 + 104)) >> 3));
      if (v87[0] != (void *)v90) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      uint64_t v11 = *(void *)(v10 + 104);
      uint64_t v12 = *(void *)(v10 + 112);
      *(_OWORD *)BOOL v87 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v89 = 0u;
      uint64_t v13 = v12 - v11;
      if (v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
        do
        {
          uint64_t v16 = *(void *)(*(void *)(v10 + 104) + 24 * v14 + 8)
              - *(void *)(*(void *)(v10 + 104) + 24 * v14);
          unint64_t v17 = v16 >> 3;
          if ((v16 & 0x1FF8) != 0) {
            unint64_t v18 = ((unint64_t)(v16 >> 3) >> 10) + 1;
          }
          else {
            unint64_t v18 = (unint64_t)(v16 >> 3) >> 10;
          }
          if (v18)
          {
            unint64_t v19 = 0;
            do
            {
              unint64_t v20 = v19 + 1024;
              if (v17 >= v19 + 1024) {
                unint64_t v21 = v19 + 1024;
              }
              else {
                unint64_t v21 = v17;
              }
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v87, v14, v19, v21);
              unint64_t v19 = v20;
              --v18;
            }
            while (v18);
          }
          ++v14;
        }
        while (v14 != v15);
        unint64_t v22 = v87[0];
        uint64_t v13 = (uint64_t)v87[1];
      }
      else
      {
        unint64_t v22 = 0;
      }
      v93.__ptr_ = 0;
      v94.__m_.__uint64_t sig = 850045863;
      memset(v94.__m_.__opaque, 0, sizeof(v94.__m_.__opaque));
      uint64_t v23 = v13 - (void)v22;
      if (v23)
      {
        unint64_t v24 = 0;
        uint64_t v25 = v23 >> 4;
        do
        {
          FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v87, v24);
          uint64_t Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v87, v24);
          uint64_t v30 = *(void *)(v85 + 160);
          if (*(_DWORD *)(v30 + 20 * (int)FirstDimension + 12) != -1
            && *(_DWORD *)(v30 + 20 * (int)FirstDimension + 4) == -1)
          {
            uint64_t v31 = Range;
            uint64_t v32 = v28;
            uint64_t v33 = *(void *)(v10 + 104);
            int8x16_t v92 = *(int8x16_t *)(*(void *)(v83 + 448) + 24 * FirstDimension);
            float v34 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v91, FirstDimension, (float *)v83, (double *)v92.i64, v92, v29);
            if (v31 < v32)
            {
              uint64_t v35 = *(void *)(v33 + 24 * FirstDimension);
              float v36 = v34 * *(float *)(v83 + 4);
              unint64_t v37 = v35 + 8 * v32;
              std::string v38 = (void *)(v35 + 8 * v31);
              do
              {
                unint64_t v39 = *v38 * v5;
                if (v39 >= v6) {
                  __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
                }
                *(float *)(v8 + 4 * v39) = v36 + *(float *)(v8 + 4 * v39);
                ++v38;
              }
              while ((unint64_t)v38 < v37);
            }
          }
          ++v24;
        }
        while (v24 != v25);
      }
      dmlc::OMPException::Rethrow(&v93);
      std::mutex::~mutex(&v94);
      std::exception_ptr::~exception_ptr(&v93);
      if (__p[1])
      {
        *(void **)&long long v89 = __p[1];
        operator delete(__p[1]);
      }
      if (v87[0])
      {
        v87[1] = v87[0];
        operator delete(v87[0]);
      }
    }
  }
  else
  {
    uint64_t v40 = *a3;
    unint64_t v41 = a3[2];
    uint64_t v43 = a3[4];
    uint64_t v42 = a3[5];
    int v44 = *((_DWORD *)a3 + 12);
    uint64_t v84 = *(void *)(a1 + 232);
    std::string::basic_string[abi:ne180100]<0>(&v93, "UpdatePredictionCache");
    xgboost::common::Monitor::Start();
    if (v94.__m_.__opaque[7] < 0) {
      operator delete(v93.__ptr_);
    }
    v91[0] = v42;
    if (v42 != *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
    uint64_t v86 = *(void *)(v84 + 928);
    v91[0] = v42;
    LODWORD(v87[0]) = 0;
    if (!v42) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (!v86)
    {
      uint64_t v78 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      dmlc::LogMessageFatal::Entry::Init(v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      double v79 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      unint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: p_last_tree", 25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
    }
    xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v84 + 304), (uint64_t)v91);
    LODWORD(v87[0]) = v44;
    v92.i32[0] = -1;
    if (v44 != -1) {
      dmlc::LogCheckFormat<int,int>();
    }
    unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v86 + 168) - *(void *)(v86 + 160)) >> 2);
    uint64_t v45 = *(void *)(v84 + 904);
    for (uint64_t j = *(void *)(v84 + 912); v45 != j; v45 += 136)
    {
      v87[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v45 + 112) - *(void *)(v45 + 104)) >> 3));
      if (v87[0] != (void *)v90) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      uint64_t v46 = *(void *)(v45 + 104);
      uint64_t v47 = *(void *)(v45 + 112);
      *(_OWORD *)BOOL v87 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v89 = 0u;
      uint64_t v48 = v47 - v46;
      if (v48)
      {
        uint64_t v49 = 0;
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (v48 >> 3);
        do
        {
          uint64_t v51 = *(void *)(*(void *)(v45 + 104) + 24 * v49 + 8)
              - *(void *)(*(void *)(v45 + 104) + 24 * v49);
          unint64_t v52 = v51 >> 3;
          if ((v51 & 0x1FF8) != 0) {
            unint64_t v53 = ((unint64_t)(v51 >> 3) >> 10) + 1;
          }
          else {
            unint64_t v53 = (unint64_t)(v51 >> 3) >> 10;
          }
          if (v53)
          {
            unint64_t v54 = 0;
            do
            {
              unint64_t v55 = v54 + 1024;
              if (v52 >= v54 + 1024) {
                unint64_t v56 = v54 + 1024;
              }
              else {
                unint64_t v56 = v52;
              }
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v87, v49, v54, v56);
              unint64_t v54 = v55;
              --v53;
            }
            while (v53);
          }
          ++v49;
        }
        while (v49 != v50);
        unsigned __int32 v57 = v87[0];
        uint64_t v48 = (uint64_t)v87[1];
      }
      else
      {
        unsigned __int32 v57 = 0;
      }
      v93.__ptr_ = 0;
      v94.__m_.__uint64_t sig = 850045863;
      memset(v94.__m_.__opaque, 0, sizeof(v94.__m_.__opaque));
      uint64_t v58 = v48 - (void)v57;
      if (v58)
      {
        unint64_t v59 = 0;
        uint64_t v60 = v58 >> 4;
        do
        {
          uint64_t v61 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v87, v59);
          uint64_t v62 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v87, v59);
          uint64_t v65 = *(void *)(v86 + 160);
          if (*(_DWORD *)(v65 + 20 * (int)v61 + 12) != -1 && *(_DWORD *)(v65 + 20 * (int)v61 + 4) == -1)
          {
            uint64_t v66 = v62;
            uint64_t v67 = v63;
            uint64_t v68 = *(void *)(v45 + 104);
            int8x16_t v92 = *(int8x16_t *)(*(void *)(v84 + 448) + 24 * v61);
            float v69 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v91, v61, (float *)v84, (double *)v92.i64, v92, v64);
            if (v66 < v67)
            {
              uint64_t v70 = *(void *)(v68 + 24 * v61);
              float v71 = v69 * *(float *)(v84 + 4);
              unint64_t v72 = v70 + 8 * v67;
              uint64_t v73 = (void *)(v70 + 8 * v66);
              do
              {
                unint64_t v74 = *v73 * v40;
                if (v74 >= v41) {
                  __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
                }
                *(float *)(v43 + 4 * v74) = v71 + *(float *)(v43 + 4 * v74);
                ++v73;
              }
              while ((unint64_t)v73 < v72);
            }
          }
          ++v59;
        }
        while (v59 != v60);
      }
      dmlc::OMPException::Rethrow(&v93);
      std::mutex::~mutex(&v94);
      std::exception_ptr::~exception_ptr(&v93);
      if (__p[1])
      {
        *(void **)&long long v89 = __p[1];
        operator delete(__p[1]);
      }
      if (v87[0])
      {
        v87[1] = v87[0];
        operator delete(v87[0]);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v94.__m_.__opaque[7] < 0) {
    operator delete(v93.__ptr_);
  }
  return 1;
}

void sub_22E9900CC(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E9900DC(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E9900EC()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E99027CLL);
}

void sub_22E9900F8()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E99027CLL);
}

void sub_22E990108()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E99027CLL);
}

void sub_22E990114()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E99027CLL);
}

void sub_22E990124(_Unwind_Exception *a1)
{
}

void sub_22E9901E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  uint64_t v7 = *(void *)(v6 - 168);
  *(void *)(v6 - 168) = 0;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6 - 168);
  }
  JUMPOUT(0x22E99027CLL);
}

void sub_22E9901F8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 168);
  *(void *)(v1 - 168) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  }
  _Unwind_Resume(a1);
}

void sub_22E990220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E99022CLL);
}

void sub_22E990244(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E990254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    JUMPOUT(0x22E990278);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::tree::GlobalApproxUpdater::Name(xgboost::tree::GlobalApproxUpdater *this)
{
  return "grow_histmaker";
}

void *_ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA30uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22E9902C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E24BB20;
  xgboost::common::ColumnSampler::ColumnSampler((xgboost::common::ColumnSampler *)(a1 + 3));
  return a1;
}

void sub_22E990324(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24BB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24BB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::__on_zero_shared(uint64_t a1)
{
  std::allocator<xgboost::common::ColumnSampler>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<xgboost::common::ColumnSampler>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(a2 + 48) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a2 + 16, *(void **)(a2 + 24));
  int v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    xgboost::tree::GloablApproxBuilder<double>::~GloablApproxBuilder();
  }
  return result;
}

void xgboost::tree::GloablApproxBuilder<double>::~GloablApproxBuilder()
{
}

void std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v6 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::~HistogramBuilder(uint64_t a1)
{
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 296, *(void **)(a1 + 304));
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 248);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5)
  {
    *(void *)(a1 + 208) = v5;
    operator delete(v5);
  }
  int v9 = (void **)(a1 + 176);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(void *)(a1 + 112) = v6;
    operator delete(v6);
  }
  int v9 = (void **)(a1 + 80);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(void *)(a1 + 48) = v7;
    operator delete(v7);
  }
  int v9 = (void **)(a1 + 16);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  return a1;
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::~HistEvaluator(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  uint64_t v3 = (void **)(a1 + 240);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 216);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 192);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

void xgboost::tree::TreeEvaluator::~TreeEvaluator(xgboost::tree::TreeEvaluator *this)
{
}

void xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(_DWORD **a1@<X0>, xgboost::tree::CPUHistMakerTrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  uint64_t v6 = (void *)v5[2];
  uint64_t v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      uint64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      unint64_t v15 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E990930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::CPUHistMakerTrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    uint64_t v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(void **)a2, (void *)(a2 + 8), a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E9909E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  uint64_t v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(void **)a2, (void *)(a2 + 8), 0, a3, 0);
}

void sub_22E990A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::tree::CPUHistMakerTrainParam>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  uint64_t v3 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)v3, &v5);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v6, (const void **)&v5.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v5.__end_->first.__r_.__value_.__l.__data_);
  uint64_t v8 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v4 = v6;
  if ((void **)v6 != &v7)
  {
    xgboost::JsonString::JsonString(&v5, (long long *)(v6 + 56));
    uint64_t v8 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v8);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7);
}

void sub_22E990BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::tree::CPUHistMakerTrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E990D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E990D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::HistogramBuilder(uint64_t a1, uint64_t a2, const char *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 296) = a1 + 304;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  rabit::utils::Assert((rabit::utils *)1, "cannot initialize reduce handle twice", a3);
  *(void *)(a1 + 328) = rabit::ReducerAlignImpl<xgboost::detail::GradientPairInternal<float>,&xgboost::detail::GradientPairInternal<float>::Reduce>;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 364) = 0;
  *(void *)(a1 + 356) = 0;
  *(void *)(a1 + 369) = 0;
  *(void *)(a1 + 384) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  return a1;
}

void sub_22E990E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(v4, *(void **)(v2 + 304));
  uint64_t v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(void *)(v2 + 280) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v2 + 248);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(v2 + 224);
  if (v8)
  {
    *(void *)(v2 + 232) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(v2 + 200);
  if (v9)
  {
    *(void *)(v2 + 208) = v9;
    operator delete(v9);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v10 = *(void **)(v2 + 104);
  if (v10)
  {
    *(void *)(v2 + 112) = v10;
    operator delete(v10);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v11 = *(void **)(v2 + 40);
  if (v11)
  {
    *(void *)(v2 + 48) = v11;
    operator delete(v11);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::HistEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v8 = *(_OWORD *)(a2 + 20);
  long long v9 = *(_OWORD *)(a2 + 36);
  long long v10 = *(_OWORD *)(a2 + 52);
  long long v11 = *(_OWORD *)(a2 + 62);
  long long v12 = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 80) = 0;
  uint64_t v13 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 4) = v12;
  *(_OWORD *)(a1 + 62) = v11;
  *(_OWORD *)(a1 + 52) = v10;
  *(_OWORD *)(a1 + 36) = v9;
  *(_OWORD *)(a1 + 20) = v8;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  uint64_t v14 = v13 + 1;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 104);
    v13[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 120);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  xgboost::tree::TreeEvaluator::TreeEvaluator((xgboost::tree::TreeEvaluator *)(a1 + 152), (const xgboost::tree::TrainParam *)a2);
}

void sub_22E9910A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t rabit::ReducerAlignImpl<xgboost::detail::GradientPairInternal<float>,&xgboost::detail::GradientPairInternal<float>::Reduce>(float32x2_t *a1, float32x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float32x2_t v4 = *a1++;
      float32x2_t result = vadd_f32(v4, *a2);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::HistogramBuilder(uint64_t a1, uint64_t a2, const char *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 296) = a1 + 304;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  rabit::utils::Assert((rabit::utils *)1, "cannot initialize reduce handle twice", a3);
  *(void *)(a1 + 328) = rabit::ReducerSafeImpl<xgboost::detail::GradientPairInternal<double>,&xgboost::detail::GradientPairInternal<double>::Reduce>;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 364) = 0;
  *(void *)(a1 + 356) = 0;
  *(void *)(a1 + 369) = 0;
  *(void *)(a1 + 384) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  return a1;
}

void sub_22E991238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(v4, *(void **)(v2 + 304));
  uint64_t v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(void *)(v2 + 280) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v2 + 248);
  if (v7) {
    operator delete(v7);
  }
  long long v8 = *(void **)(v2 + 224);
  if (v8)
  {
    *(void *)(v2 + 232) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(v2 + 200);
  if (v9)
  {
    *(void *)(v2 + 208) = v9;
    operator delete(v9);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v10 = *(void **)(v2 + 104);
  if (v10)
  {
    *(void *)(v2 + 112) = v10;
    operator delete(v10);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v11 = *(void **)(v2 + 40);
  if (v11)
  {
    *(void *)(v2 + 48) = v11;
    operator delete(v11);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::HistEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v8 = *(_OWORD *)(a2 + 20);
  long long v9 = *(_OWORD *)(a2 + 36);
  long long v10 = *(_OWORD *)(a2 + 52);
  long long v11 = *(_OWORD *)(a2 + 62);
  long long v12 = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 80) = 0;
  uint64_t v13 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 4) = v12;
  *(_OWORD *)(a1 + 62) = v11;
  *(_OWORD *)(a1 + 52) = v10;
  *(_OWORD *)(a1 + 36) = v9;
  *(_OWORD *)(a1 + 20) = v8;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  uint64_t v14 = v13 + 1;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 104);
    v13[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 120);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  xgboost::tree::TreeEvaluator::TreeEvaluator((xgboost::tree::TreeEvaluator *)(a1 + 152), (const xgboost::tree::TrainParam *)a2);
}

void sub_22E991460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t rabit::ReducerSafeImpl<xgboost::detail::GradientPairInternal<double>,&xgboost::detail::GradientPairInternal<double>::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float64x2_t v4 = *a1++;
      float64x2_t result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::vector<std::pair<std::string, std::string>> v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    long long v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      long long v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    unint64_t v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      long long v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]()
{
}

void *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 1;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t v5 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v3, a2);
  }
  else
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)v3, a2);
    uint64_t v5 = v4 + 88;
  }
  a1[2] = v5;
  uint64_t v6 = a1[1];
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 4));
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v6, v5, (uint64_t)v8, 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3));
  return std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](v8);
}

void sub_22E991734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (v3 == *(uint64_t **)(a1 + 16))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    if (*(_DWORD *)a1 == 1)
    {
      int v5 = *((_DWORD *)v3 + 4);
      uint64_t v6 = v3[1];
      uint64_t v30 = *v3;
      uint64_t v31 = v6;
      int v32 = v5;
      float v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, (const void *)v3[3], v3[4], (v3[4] - v3[3]) >> 2);
      long long v7 = *((_OWORD *)v3 + 3);
      long long v8 = *((_OWORD *)v3 + 4);
      uint64_t v38 = v3[10];
      long long v36 = v7;
      long long v37 = v8;
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100]((uint64_t)v41, a1 + 32);
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v9, v10, (uint64_t)v41, 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 3));
      std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](v41);
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void **)(v11 - 64);
      if (v12)
      {
        *(void *)(v11 - 56) = v12;
        operator delete(v12);
      }
      *(void *)(a1 + 16) = v11 - 88;
      v41[0] = v30;
      v41[1] = v31;
      int v42 = v32;
      int v44 = 0;
      uint64_t v45 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
      long long v46 = v36;
      long long v47 = v37;
      uint64_t v48 = v38;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      unint64_t v39 = a2;
      char v40 = 0;
      unint64_t v13 = operator new(0x58uLL);
      *a2 = (uint64_t)v13;
      a2[1] = (uint64_t)v13;
      a2[2] = (uint64_t)v13 + 88;
      a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)(a2 + 2), (uint64_t)v41, (uint64_t)&v49, (uint64_t)v13);
      if (__p)
      {
        int v44 = __p;
        operator delete(__p);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      int v14 = *((_DWORD *)v3 + 4);
      uint64_t v15 = v3[1];
      uint64_t v30 = *v3;
      uint64_t v31 = v15;
      int v32 = v14;
      float v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, (const void *)v3[3], v3[4], (v3[4] - v3[3]) >> 2);
      long long v16 = *((_OWORD *)v3 + 3);
      long long v17 = *((_OWORD *)v3 + 4);
      uint64_t v38 = v3[10];
      long long v36 = v16;
      long long v37 = v17;
      int v18 = HIDWORD(v30);
      do
      {
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
        if (v19 == v20) {
          break;
        }
        std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100]((uint64_t)v41, a1 + 32);
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v19, v20, (uint64_t)v41, 0x2E8BA2E8BA2E8BA3 * ((v20 - v19) >> 3));
        std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](v41);
        uint64_t v21 = *(void *)(a1 + 16);
        uint64_t v22 = *(void **)(v21 - 64);
        if (v22)
        {
          *(void *)(v21 - 56) = v22;
          operator delete(v22);
        }
        *(void *)(a1 + 16) = v21 - 88;
        unint64_t v23 = a2[1];
        if (v23 >= a2[2])
        {
          uint64_t v24 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry&>(a2, (uint64_t)&v30);
        }
        else
        {
          std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry&>((uint64_t)a2, (uint64_t)&v30);
          uint64_t v24 = v23 + 88;
        }
        a2[1] = v24;
        uint64_t v25 = *(uint64_t **)(a1 + 8);
        if (v25 != *(uint64_t **)(a1 + 16))
        {
          uint64_t v26 = v25[1];
          uint64_t v30 = *v25;
          int v27 = *((_DWORD *)v25 + 4);
          uint64_t v31 = v26;
          int v32 = v27;
          if (&v30 != v25) {
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v33, (char *)v25[3], v25[4], (v25[4] - v25[3]) >> 2);
          }
          long long v28 = *((_OWORD *)v25 + 3);
          long long v29 = *((_OWORD *)v25 + 4);
          uint64_t v38 = v25[10];
          long long v36 = v28;
          long long v37 = v29;
        }
      }
      while (HIDWORD(v30) == v18);
    }
    if (v33)
    {
      float v34 = v33;
      operator delete(v33);
    }
  }
}

void sub_22E991A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
}

BOOL xgboost::tree::CPUExpandEntry::IsValid(xgboost::tree::CPUExpandEntry *this, const xgboost::tree::TrainParam *a2, int a3)
{
  float v3 = *((float *)this + 2);
  if (v3 <= 0.000001 || *((double *)this + 8) == 0.0) {
    return 0;
  }
  if (*((double *)this + 10) == 0.0 || v3 < *((float *)a2 + 2)) {
    return 0;
  }
  int v5 = *((_DWORD *)a2 + 3);
  if (v5 >= 1 && *((_DWORD *)this + 1) == v5) {
    return 0;
  }
  int v7 = *((_DWORD *)a2 + 4);
  return v7 < 1 || v7 != a3;
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(uint64_t a1, int *a2, xgboost::RegTree *a3)
{
  uint64_t v6 = a1 + 152;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v53);
  int v7 = a2 + 14;
  int v8 = *a2;
  uint64_t v9 = a2 + 18;
  float64x2_t v10 = *(float64x2_t *)(a2 + 18);
  int8x16_t v49 = (int8x16_t)vaddq_f64(*(float64x2_t *)(a2 + 14), v10);
  *(int8x16_t *)&v52.__begin_ = v49;
  float v11 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v8, (float *)a1, (double *)&v52, v49, (int8x16_t)v10);
  int v12 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 14);
  float v14 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v12, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v13);
  int v15 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 18);
  float v18 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v15, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v16);
  if (*((unsigned char *)a2 + 48))
  {
    memset(&v52, 0, sizeof(v52));
    uint64_t v19 = (char *)*((void *)a2 + 3);
    uint64_t v20 = *((void *)a2 + 4);
    if (v19 == (char *)v20)
    {
      float v26 = *((float *)a2 + 4);
      if (v26 < 0.0 || v26 >= 16777000.0)
      {
        xgboost::common::InvalidCategory(v17);
        float v26 = *((float *)a2 + 4);
      }
      int v27 = (int)v26;
      std::vector<unsigned int>::value_type __x = 0;
      std::vector<unsigned int>::resize(&v52, vcvtpd_u64_f64((double)((v27 & ~(v27 >> 31)) + 1) * 0.03125), &__x);
      std::vector<unsigned int>::pointer begin = v52.__begin_;
      std::vector<unsigned int>::pointer end = v52.__end_;
      unint64_t v28 = (unint64_t)v27 >> 5;
      if (v28 >= v52.__end_ - v52.__begin_) {
        std::terminate();
      }
      v52.__begin_[v28] |= 1 << ~(_BYTE)v27;
    }
    else if (&v52 == (std::vector<unsigned int> *)(a2 + 6))
    {
      std::vector<unsigned int>::pointer begin = 0;
      std::vector<unsigned int>::pointer end = 0;
    }
    else
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v52, v19, v20, (v20 - (uint64_t)v19) >> 2);
      std::vector<unsigned int>::pointer begin = v52.__begin_;
      std::vector<unsigned int>::pointer end = v52.__end_;
    }
    int v29 = *a2;
    unsigned int v30 = a2[3];
    v50[0] = end - begin;
    v50[1] = begin;
    float v31 = *(double *)&v49.i64[1];
    float v32 = *((double *)a2 + 8);
    float v33 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandCategorical((uint64_t)a3, v29, v30 & 0x7FFFFFFF, (uint64_t)v50, v30 >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v31, v32, v33);
    if (v52.__begin_)
    {
      v52.__end_ = v52.__begin_;
      operator delete(v52.__begin_);
    }
  }
  else
  {
    float v23 = *(double *)&v49.i64[1];
    float v24 = *((double *)a2 + 8);
    float v25 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandNode(a3, *a2, a2[3] & 0x7FFFFFFF, *((float *)a2 + 4), a2[3] >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v23, v24, v25, -1);
  }
  float v34 = (_DWORD *)(*((void *)a3 + 20) + 20 * *a2);
  signed int v35 = v34[1];
  signed int v36 = v34[2];
  xgboost::tree::TreeEvaluator::AddSplit<false>(v6, *a2, v35, v36, v34[3] & 0x7FFFFFFF, v14, v18);
  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a3 + 21) - *((void *)a3 + 20)) >> 2));
  uint64_t v38 = *(void *)(a1 + 296);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v38) >> 3) <= v35) {
    goto LABEL_22;
  }
  *(_OWORD *)(v38 + 24 * v35) = *v7;
  int v39 = *a2;
  *(_OWORD *)&v52.__begin_ = *v7;
  float v40 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v39, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v37);
  float v41 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v40);
  uint64_t v43 = *(void *)(a1 + 296);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v43) >> 3);
  if (v44 <= v35
    || (*(float *)(v43 + 24 * v35 + 16) = v41, v44 <= v36)
    || (*(_OWORD *)(v43 + 24 * v36) = *v9,
        int v45 = *a2,
        *(_OWORD *)&v52.__begin_ = *v9,
        float v46 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v45, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v42), v47 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v46), v48 = *(void *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v48) >> 3) <= v36))
  {
LABEL_22:
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
  }
  *(float *)(v48 + 24 * v36 + 16) = v47;
  if (*(unsigned char *)(a1 + 292)) {
    xgboost::FeatureInteractionConstraintHost::SplitImpl((xgboost::FeatureInteractionConstraintHost *)(a1 + 192), *a2, *(_DWORD *)(*((void *)a3 + 20) + 20 * *a2 + 12) & 0x7FFFFFFF, v35, v36);
  }
}

void sub_22E991F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2) ^ 1;
}

void sub_22E992068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
}

void sub_22E992124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::tree::ApproxRowPartitioner::UpdatePosition(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v107 = *(void **)(a2 + 120);
  unint64_t v102 = *(void **)(a2 + 128);
  *(_OWORD *)unint64_t v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)uint64_t v112 = 0u;
  uint64_t v7 = v5 - v6;
  unint64_t v8 = v7 / 88;
  if (v7)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *a3;
      uint64_t v11 = *a3 + 88 * v9;
      v128.__ptr_ = *(void **)v11;
      uint64_t v12 = *(void *)(v11 + 8);
      LODWORD(v130) = *(_DWORD *)(v11 + 16);
      uint64_t v129 = v12;
      long long v131 = 0uLL;
      *((void *)&v130 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)&v130 + 1, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
      uint64_t v13 = v10 + 88 * v9;
      long long v14 = *(_OWORD *)(v13 + 48);
      long long v15 = *(_OWORD *)(v13 + 64);
      uint64_t v134 = *(void *)(v13 + 80);
      long long v132 = v14;
      long long v133 = v15;
      int8x16_t v16 = (uint64_t *)(a1[13] + 24 * LODWORD(v128.__ptr_));
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      if (*((void *)&v130 + 1))
      {
        *(void *)&long long v131 = *((void *)&v130 + 1);
        operator delete(*((void **)&v130 + 1));
      }
      __int16 v19 = v17 - v18;
      unint64_t v20 = (v17 - v18) >> 3;
      if ((v19 & 0x3FF8) != 0) {
        uint64_t v21 = (v20 >> 11) + 1;
      }
      else {
        uint64_t v21 = v20 >> 11;
      }
      if (v21)
      {
        unint64_t v22 = 0;
        do
        {
          unint64_t v23 = v22 + 2048;
          if (v20 >= v22 + 2048) {
            unint64_t v24 = v22 + 2048;
          }
          else {
            unint64_t v24 = v20;
          }
          xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v112, v9, v22, v24);
          unint64_t v22 = v23;
          --v21;
        }
        while (v21);
      }
      ++v9;
    }
    while (v9 != v8);
    int v108 = v112[1];
    unint64_t v105 = v112[0];
    uint64_t v25 = (uint64_t)a1;
  }
  else
  {
    uint64_t v25 = (uint64_t)a1;
    unint64_t v105 = 0;
    int v108 = 0;
  }
  std::vector<std::pair<double,double>>::resize(v25, v8);
  std::vector<unsigned long>::resize(v25 + 24, v8 + 1);
  **(void **)(v25 + 24) = 0;
  if (v8 + 1 >= 2)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      unint64_t v29 = v8;
      uint64_t v30 = *a3 + v26;
      v128.__ptr_ = *(void **)v30;
      uint64_t v31 = *(void *)(v30 + 8);
      LODWORD(v130) = *(_DWORD *)(v30 + 16);
      uint64_t v129 = v31;
      long long v131 = 0uLL;
      *((void *)&v130 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)&v130 + 1, *(const void **)(v30 + 24), *(void *)(v30 + 32), (uint64_t)(*(void *)(v30 + 32) - *(void *)(v30 + 24)) >> 2);
      long long v32 = *(_OWORD *)(v30 + 48);
      long long v33 = *(_OWORD *)(v30 + 64);
      uint64_t v134 = *(void *)(v30 + 80);
      long long v132 = v32;
      long long v133 = v33;
      float v34 = (uint64_t *)(a1[13] + 24 * LODWORD(v128.__ptr_));
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      if (*((void *)&v130 + 1))
      {
        *(void *)&long long v131 = *((void *)&v130 + 1);
        operator delete(*((void **)&v130 + 1));
      }
      unint64_t v37 = (v35 - v36) >> 3;
      if (((v35 - v36) & 0x3FF8) != 0) {
        v28 += (v37 >> 11) + 1;
      }
      else {
        v28 += v37 >> 11;
      }
      *(void *)(*(void *)(v25 + 24) + 8 * v27++ + 8) = v28;
      v26 += 88;
      unint64_t v8 = v29;
    }
    while (v29 != v27);
  }
  unint64_t v38 = (v108 - v105) >> 4;
  if (a1[9] < v38)
  {
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(a1 + 6, (v108 - v105) >> 4);
    a1[9] = v38;
  }
  uint64_t v39 = a4[32];
  uint64_t v40 = a4[36];
  uint64_t v109 = a4[35];
  v111[0] = (a4[33] - v39) >> 2;
  v111[1] = v39;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  v128.__ptr_ = 0;
  uint64_t v129 = 850045863;
  *(void *)&long long v133 = 0;
  if (v112[1] != v112[0])
  {
    unint64_t v41 = 0;
    unint64_t v106 = (v40 - v109) >> 4;
    int64_t v98 = ((char *)v112[1] - (char *)v112[0]) >> 4;
    uint64_t v110 = (std::mutex *)(a2 + 24);
    while (1)
    {
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v112, v41);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v112, v41);
      uint64_t v45 = v44;
      uint64_t v46 = *a3;
      uint64_t v47 = *a3 + 88 * FirstDimension;
      uint64_t v115 = *(void *)v47;
      uint64_t v48 = *(void *)(v47 + 8);
      float v117 = *(float *)(v47 + 16);
      uint64_t v116 = v48;
      int v119 = 0;
      uint64_t v120 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v47 + 24), *(void *)(v47 + 32), (uint64_t)(*(void *)(v47 + 32) - *(void *)(v47 + 24)) >> 2);
      uint64_t v49 = v46 + 88 * FirstDimension;
      long long v50 = *(_OWORD *)(v49 + 48);
      long long v51 = *(_OWORD *)(v49 + 64);
      uint64_t v123 = *(void *)(v49 + 80);
      long long v121 = v50;
      long long v122 = v51;
      int v52 = v50;
      unsigned int v53 = v115;
      int v54 = HIDWORD(v116);
      xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)a1, *(void *)(a1[3] + 8 * (int)FirstDimension) + (Range >> 11));
      uint64_t v55 = a1[3];
      unint64_t v100 = Range >> 11;
      uint64_t v101 = (int)FirstDimension;
      unint64_t v56 = *(void *)(v55 + 8 * (int)FirstDimension) + (Range >> 11);
      uint64_t v57 = a1[6];
      unint64_t v58 = (a1[7] - v57) >> 4;
      if (v58 <= v56) {
LABEL_79:
      }
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      if (v45 != Range) {
        break;
      }
      uint64_t v59 = 0;
      uint64_t v60 = 0;
LABEL_58:
      if (v58 <= v56) {
        goto LABEL_79;
      }
      **(void **)(v57 + 16 * v56) = v60;
      unint64_t v77 = *(void *)(v55 + 8 * v101) + v100;
      if (v58 <= v77) {
        goto LABEL_79;
      }
      *(void *)(*(void *)(v57 + 16 * v77) + 8) = v59;
      if (__p)
      {
        int v119 = __p;
        operator delete(__p);
      }
      if (++v41 == v98) {
        goto LABEL_63;
      }
    }
    unint64_t v97 = v41;
    uint64_t v60 = 0;
    uint64_t v59 = 0;
    uint64_t v61 = *(void *)(a1[13] + 24 * v53);
    uint64_t v62 = v54 & 0x7FFFFFFF;
    uint64_t v63 = (uint64_t *)(v61 + 8 * Range);
    uint64_t v64 = (v61 + 8 * v45 - (uint64_t)v63) >> 3;
    uint64_t v65 = *(void *)(v57 + 16 * v56);
    uint64_t v66 = v65 + 32;
    uint64_t v67 = v65 + 16416;
    while (1)
    {
      if (!v64) {
LABEL_78:
      }
        std::terminate();
      uint64_t v68 = *v63;
      if (*(unsigned char *)(a2 + 192))
      {
        int v69 = xgboost::common::Index::operator[](&v110->__m_.__sig, *(void *)(*(void *)a2 + 8 * (v68 - *(void *)(a2 + 152))) + v62);
      }
      else
      {
        uint64_t v70 = (uint64_t *)(*(void *)a2 + 8 * (v68 - *(void *)(a2 + 152)));
        int v69 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v70, v70[1], &v110->__m_.__sig, *(_DWORD *)(*v102 + 4 * v62), *(_DWORD *)(*v102 + 4 * (v62 + 1)));
      }
      if (v69 != -1)
      {
        float v71 = *(float *)(*v107 + 4 * v69);
        if (v106 <= (int)v115) {
          goto LABEL_78;
        }
        xgboost::common::Span<float,18446744073709551615ul>::subspan(v111, *(void *)(v109 + 16 * (int)v115), *(void *)(v109 + 16 * (int)v115 + 8), v124);
        if (!v52)
        {
          unsigned int v75 = v71 <= v117;
          goto LABEL_54;
        }
        if (v71 >= 0.0 && v71 < 16777000.0 && v71 < (float)(32 * v124[0]))
        {
          if (v124[0] <= (unint64_t)v71 >> 5)
          {
            unsigned int v75 = 1;
          }
          else
          {
            unint64_t v74 = (unint64_t)(int)v71 >> 5;
            if (v74 >= v124[0]) {
              goto LABEL_78;
            }
            unsigned int v75 = ((*(_DWORD *)(v124[1] + 4 * v74) >> ~(int)v71) & 1) == 0;
          }
          goto LABEL_54;
        }
      }
      unsigned int v75 = HIDWORD(v116) >> 31;
LABEL_54:
      uint64_t v76 = (void *)(v67 + 8 * v59);
      if (v75) {
        uint64_t v76 = (void *)(v66 + 8 * v60);
      }
      *uint64_t v76 = v68;
      v60 += v75;
      v59 += v75 ^ 1;
      ++v63;
      if (!--v64)
      {
        uint64_t v55 = a1[3];
        uint64_t v57 = a1[6];
        unint64_t v56 = *(void *)(v55 + 8 * v101) + v100;
        unint64_t v58 = (a1[7] - v57) >> 4;
        unint64_t v41 = v97;
        goto LABEL_58;
      }
    }
  }
LABEL_63:
  dmlc::OMPException::Rethrow(&v128);
  std::mutex::~mutex((std::mutex *)&v129);
  std::exception_ptr::~exception_ptr(&v128);
  xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
  v126.__ptr_ = 0;
  v127.__m_.__uint64_t sig = 850045863;
  memset(v127.__m_.__opaque, 0, sizeof(v127.__m_.__opaque));
  if (v112[1] != v112[0])
  {
    unint64_t v78 = 0;
    int64_t v79 = ((char *)v112[1] - (char *)v112[0]) >> 4;
    do
    {
      uint64_t v80 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v112, v78);
      unint64_t v81 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v112, v78);
      uint64_t v82 = *a3;
      uint64_t v83 = *a3 + 88 * v80;
      v128.__ptr_ = *(void **)v83;
      uint64_t v84 = *(void *)(v83 + 8);
      LODWORD(v130) = *(_DWORD *)(v83 + 16);
      uint64_t v129 = v84;
      long long v131 = 0uLL;
      *((void *)&v130 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)&v130 + 1, *(const void **)(v83 + 24), *(void *)(v83 + 32), (uint64_t)(*(void *)(v83 + 32) - *(void *)(v83 + 24)) >> 2);
      uint64_t v85 = v82 + 88 * v80;
      long long v86 = *(_OWORD *)(v85 + 48);
      long long v87 = *(_OWORD *)(v85 + 64);
      uint64_t v134 = *(void *)(v85 + 80);
      long long v132 = v86;
      long long v133 = v87;
      xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v80, v81, *(void *)(a1[13] + 24 * LODWORD(v128.__ptr_)));
      if (*((void *)&v130 + 1))
      {
        *(void *)&long long v131 = *((void *)&v130 + 1);
        operator delete(*((void **)&v130 + 1));
      }
      ++v78;
    }
    while (v79 != v78);
  }
  dmlc::OMPException::Rethrow(&v126);
  std::mutex::~mutex(&v127);
  std::exception_ptr::~exception_ptr(&v126);
  uint64_t v88 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    do
    {
      unsigned int v92 = *(_DWORD *)(v88 + v89);
      std::exception_ptr v93 = (uint64_t *)(*a1 + (v90 >> 28));
      uint64_t v94 = *v93;
      uint64_t v95 = v93[1];
      uint64_t v125 = v95 + *v93;
      if (v125 != (uint64_t)(*(void *)(a1[13] + 24 * v92 + 8) - *(void *)(a1[13] + 24 * v92)) >> 3) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      uint64_t v96 = a4[20] + 20 * (int)v92;
      xgboost::common::RowSetCollection::AddSplit((xgboost::common::RowSetCollection *)(a1 + 10), v92, *(_DWORD *)(v96 + 4), *(_DWORD *)(v96 + 8), v94, v95);
      ++v91;
      uint64_t v88 = *a3;
      v90 += 0x100000000;
      v89 += 88;
    }
    while (v91 < 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  }
  if (v113[1])
  {
    *(void **)&long long v114 = v113[1];
    operator delete(v113[1]);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
}

void sub_22E992AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::mutex *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::exception_ptr a51,std::exception_ptr a52)
{
}

uint64_t *xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return a1;
}

void sub_22E992D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(v76, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3));
  uint64_t v11 = a6[1];
  if (v11 == *a6)
  {
    uint64_t v20 = a6[1];
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v11 = *a6;
    do
    {
      int v13 = *(_DWORD *)(v11 + 88 * v12);
      uint64_t v14 = *(void *)(a5 + 160);
      int v15 = *(_DWORD *)(v14 + 20 * v13);
      if (v15 == -1)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        do
        {
          ++v16;
          int v15 = *(_DWORD *)(v14 + 20 * (v15 & 0x7FFFFFFF));
        }
        while (v15 != -1);
      }
      xgboost::common::ColumnSampler::GetFeatureSet(*(xgboost::common::ColumnSampler **)(a1 + 136), v16, v71);
      uint64_t v17 = v76[0] + 16 * v12;
      long long v18 = v71[0];
      v71[0] = 0uLL;
      __int16 v19 = *(std::__shared_weak_count **)(v17 + 8);
      *(_OWORD *)uint64_t v17 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (*((void *)&v71[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71[0] + 1));
      }
      ++v12;
      uint64_t v11 = *a6;
      uint64_t v20 = a6[1];
    }
    while (v12 < 0x2E8BA2E8BA2E8BA3 * ((v20 - *a6) >> 3));
  }
  uint64_t v21 = v76[0];
  if (v76[0] == v76[1])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
    uint64_t v66 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: !features.empty()", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
    uint64_t v21 = v76[0];
    uint64_t v11 = *a6;
    uint64_t v20 = a6[1];
  }
  uint64_t v68 = a4;
  unint64_t v22 = ((uint64_t)(*(void *)(**(void **)v21 + 8) - ***(void ***)v21) >> 2)
      / (unint64_t)*(int *)(a1 + 184);
  if (v22 <= 1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22;
  }
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v73, 0x2E8BA2E8BA2E8BA3 * ((v20 - v11) >> 3), v76, v23);
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v72, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3) * *(int *)(a1 + 184));
  uint64_t v25 = *a6;
  uint64_t v24 = a6[1];
  if (v24 != *a6)
  {
    unint64_t v26 = 0;
    LODWORD(v27) = *(_DWORD *)(a1 + 184);
    do
    {
      if ((int)v27 >= 1)
      {
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = *a6;
          uint64_t v30 = *a6 + 88 * v26;
          uint64_t v31 = v28 + v26 * (int)v27;
          uint64_t v32 = v72[0];
          uint64_t v33 = v72[0] + 88 * v31;
          *(void *)uint64_t v33 = *(void *)v30;
          uint64_t v34 = *(void *)(v30 + 8);
          *(_DWORD *)(v33 + 16) = *(_DWORD *)(v30 + 16);
          *(void *)(v33 + 8) = v34;
          if (v33 != v30) {
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v32 + 88 * v31 + 24), *(char **)(v29 + 88 * v26 + 24), *(void *)(v29 + 88 * v26 + 32), (uint64_t)(*(void *)(v29 + 88 * v26 + 32) - *(void *)(v29 + 88 * v26 + 24)) >> 2);
          }
          uint64_t v35 = v32 + 88 * v31;
          uint64_t v36 = v29 + 88 * v26;
          long long v37 = *(_OWORD *)(v36 + 48);
          long long v38 = *(_OWORD *)(v36 + 64);
          *(void *)(v35 + 80) = *(void *)(v36 + 80);
          *(_OWORD *)(v35 + 48) = v37;
          *(_OWORD *)(v35 + 64) = v38;
          ++v28;
          uint64_t v27 = *(int *)(a1 + 184);
        }
        while (v28 < v27);
        uint64_t v25 = *a6;
        uint64_t v24 = a6[1];
      }
      ++v26;
    }
    while (v26 < 0x2E8BA2E8BA2E8BA3 * ((v24 - v25) >> 3));
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v71);
  uint64_t v39 = *(void *)(a3 + 16);
  int v40 = *(_DWORD *)(a1 + 184);
  v70[0] = v72;
  v70[1] = a1;
  v70[2] = a2;
  v70[3] = v76;
  v70[4] = v68;
  v70[5] = v39;
  v70[6] = a3;
  v70[7] = v71;
  xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v73, v40, (uint64_t)v70);
  uint64_t v42 = *a6;
  uint64_t v41 = a6[1];
  if (v41 == *a6) {
    goto LABEL_44;
  }
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  int v45 = *(_DWORD *)(a1 + 184);
  do
  {
    if (v45 < 1) {
      goto LABEL_43;
    }
    for (int i = 0; i < v45; ++i)
    {
      unsigned int v47 = i + v44 * v45;
      uint64_t v48 = v72[0];
      uint64_t v49 = v72[0] + 88 * v47;
      float v51 = *(float *)(v49 + 8);
      uint64_t v50 = v49 + 8;
      float v52 = v51;
      if (fabsf(v51) == INFINITY) {
        continue;
      }
      uint64_t v53 = *a6;
      uint64_t v54 = *a6 + 88 * v43;
      int v55 = *(_DWORD *)(v50 + 4);
      unint64_t v56 = (_DWORD *)(v54 + 12);
      unsigned int v57 = *(_DWORD *)(v54 + 12) & 0x7FFFFFFF;
      float v59 = *(float *)(v54 + 8);
      unint64_t v58 = (float *)(v54 + 8);
      float v60 = v59;
      if (v57 <= (v55 & 0x7FFFFFFFu))
      {
        if (v60 >= v52) {
          continue;
        }
      }
      else if (v60 > v52)
      {
        continue;
      }
      *unint64_t v58 = v52;
      *unint64_t v56 = v55;
      uint64_t v61 = v48 + 88 * v47;
      uint64_t v62 = v53 + 88 * v43;
      *(_DWORD *)(v62 + 16) = *(_DWORD *)(v61 + 16);
      *(unsigned char *)(v62 + 48) = *(unsigned char *)(v61 + 48);
      if (v58 != (float *)v50) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v53 + 88 * v43 + 24), *(char **)(v48 + 88 * v47 + 24), *(void *)(v48 + 88 * v47 + 32), (uint64_t)(*(void *)(v48 + 88 * v47 + 32) - *(void *)(v48 + 88 * v47 + 24)) >> 2);
      }
      uint64_t v63 = v48 + 88 * v47;
      uint64_t v64 = v53 + 88 * v43;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v63 + 56);
      *(_OWORD *)(v64 + 72) = *(_OWORD *)(v63 + 72);
      int v45 = *(_DWORD *)(a1 + 184);
    }
    uint64_t v42 = *a6;
    uint64_t v41 = a6[1];
LABEL_43:
    uint64_t v43 = ++v44;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((v41 - v42) >> 3) > (unint64_t)v44);
LABEL_44:
  *(void *)&v71[0] = v72;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  if (__p)
  {
    unsigned int v75 = __p;
    operator delete(__p);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  *(void *)&v71[0] = v76;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
}

void sub_22E993210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)(v19 - 112);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(void *result, uint64_t a2, uint64_t a3)
{
  v11[4] = *MEMORY[0x263EF8340];
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 1;
    uint64_t v7 = (uint64_t)(result + 4);
    do
    {
      if (*(float *)(v4 + 8) > 0.000001)
      {
        unint64_t v8 = v5[2];
        if (v8 >= v5[3])
        {
          uint64_t v9 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v6, v4);
        }
        else
        {
          std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)v6, v4);
          uint64_t v9 = v8 + 88;
        }
        v5[2] = v9;
        uint64_t v10 = v5[1];
        std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100]((uint64_t)v11, v7);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v10, v9, (uint64_t)v11, 0x2E8BA2E8BA2E8BA3 * ((v9 - v10) >> 3));
        float64x2_t result = std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](v11);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22E9933A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  uint64_t v4 = v2;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::Reset(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  if (a4 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  *(_DWORD *)(a1 + 392) = a4;
  *(void *)(a1 + 400) = a5;
  *(void *)(a1 + 352) = *(void *)a3;
  *(void *)(a1 + 360) = *(void *)(a3 + 8);
  *(void *)(a1 + 368) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a3 + 24);
  if (*(_DWORD *)a1 != a2)
  {
    *(_DWORD *)a1 = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 16));
  }
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_DWORD *)(a1 + 64) != a2)
  {
    *(_DWORD *)(a1 + 64) = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  }
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 68) = 0;
  xgboost::common::ParallelGHistBuilder<float>::Init(a1 + 136, a2);
  *(_DWORD *)(a1 + 128) = a2;
  *(unsigned char *)(a1 + 408) = a6;
}

void sub_22E99358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<xgboost::tree::ApproxRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&>(int64x2_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v8 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v24 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(136 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v21 = v9;
  v22.i64[0] = (uint64_t)&v9[136 * v3];
  unint64_t v23 = &v9[136 * v8];
  xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner((xgboost::tree::ApproxRowPartitioner *)v22.i64[0], a2, a3);
  uint64_t v10 = v22.i64[0];
  uint64_t v11 = v22.i64[0] + 136;
  v22.i64[1] = v22.i64[0] + 136;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v10 + v14;
      uint64_t v16 = v12 + v14;
      *(void *)(v15 - 136) = 0;
      *(void *)(v15 - 128) = 0;
      *(void *)(v15 - 120) = 0;
      *(_OWORD *)(v15 - 136) = *(_OWORD *)(v12 + v14 - 136);
      *(void *)(v15 - 120) = *(void *)(v12 + v14 - 120);
      *(void *)(v16 - 136) = 0;
      *(void *)(v16 - 128) = 0;
      *(void *)(v16 - 120) = 0;
      *(void *)(v15 - 112) = 0;
      *(void *)(v15 - 104) = 0;
      *(void *)(v15 - 96) = 0;
      *(_OWORD *)(v15 - 112) = *(_OWORD *)(v12 + v14 - 112);
      *(void *)(v15 - 96) = *(void *)(v12 + v14 - 96);
      *(void *)(v16 - 112) = 0;
      *(void *)(v16 - 104) = 0;
      *(void *)(v16 - 96) = 0;
      *(void *)(v15 - 88) = 0;
      *(void *)(v15 - 80) = 0;
      *(void *)(v15 - 72) = 0;
      *(_OWORD *)(v15 - 88) = *(_OWORD *)(v12 + v14 - 88);
      *(void *)(v15 - 72) = *(void *)(v12 + v14 - 72);
      *(void *)(v16 - 80) = 0;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 88) = 0;
      uint64_t v17 = *(void *)(v12 + v14 - 64);
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 40) = 0;
      *(void *)(v15 - 64) = v17;
      *(void *)(v15 - 56) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *(void *)(v15 - 40) = *(void *)(v12 + v14 - 40);
      *(void *)(v16 - 56) = 0;
      *(void *)(v16 - 48) = 0;
      *(void *)(v16 - 40) = 0;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      *(_OWORD *)(v15 - 32) = *(_OWORD *)(v12 + v14 - 32);
      *(void *)(v15 - 16) = *(void *)(v12 + v14 - 16);
      *(void *)(v16 - 32) = 0;
      *(void *)(v16 - 24) = 0;
      *(void *)(v16 - 16) = 0;
      *(void *)(v15 - 8) = *(void *)(v12 + v14 - 8);
      v14 -= 136;
    }
    while (v12 + v14 != v13);
    int64x2_t v18 = *a1;
    uint64_t v11 = v22.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v22 = v18;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  unint64_t v23 = v19;
  uint64_t v21 = (char *)v18.i64[0];
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)&v21);
  return v11;
}

void sub_22E9937C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

xgboost::tree::ApproxRowPartitioner *xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner(xgboost::tree::ApproxRowPartitioner *this, unint64_t a2, uint64_t a3)
{
  *((_OWORD *)this + 5) = 0u;
  unint64_t v4 = (xgboost::tree::ApproxRowPartitioner *)((char *)this + 80);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 16) = a3;
  std::vector<unsigned long>::resize((uint64_t)this + 80, a2);
  uint64_t v5 = (void *)*((void *)this + 10);
  uint64_t v6 = (void *)*((void *)this + 11);
  if (v5 != v6)
  {
    uint64_t v7 = *((void *)this + 16);
    do
      *v5++ = v7++;
    while (v5 != v6);
  }
  xgboost::common::RowSetCollection::Init(v4);
  return this;
}

void sub_22E993858(_Unwind_Exception *a1)
{
  xgboost::common::Index::~Index(v2);
  xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(v1);
  _Unwind_Resume(a1);
}

void xgboost::common::RowSetCollection::Init(xgboost::common::RowSetCollection *this)
{
  uint64_t v2 = (char **)((char *)this + 24);
  if (*((void *)this + 4) != *((void *)this + 3)) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this == v3)
  {
    uint64_t v9 = (char *)this + 40;
    unint64_t v10 = *((void *)this + 5);
    unint64_t v7 = *((void *)this + 4);
    if (v7 < v10)
    {
      unint64_t v8 = (char *)(v7 + 24);
      *(void *)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      goto LABEL_8;
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v2) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*v2) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)v9, v19);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[24 * v16];
      int64x2_t v22 = &v20[24 * v19];
      unint64_t v8 = v21 + 24;
      *(void *)uint64_t v21 = 0;
      *((void *)v21 + 1) = 0;
      *((_DWORD *)v21 + 4) = 0;
      unint64_t v26 = (char *)*((void *)this + 3);
      unint64_t v23 = (char *)*((void *)this + 4);
      if (v23 == v26) {
        goto LABEL_33;
      }
      do
      {
        long long v27 = *(_OWORD *)(v23 - 24);
        *((_DWORD *)v21 - 2) = *((_DWORD *)v23 - 2);
        *(_OWORD *)(v21 - 24) = v27;
        v21 -= 24;
        v23 -= 24;
      }
      while (v23 != v26);
      goto LABEL_32;
    }
LABEL_36:
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (char *)this + 40;
  unint64_t v6 = *((void *)this + 5);
  unint64_t v7 = *((void *)this + 4);
  if (v7 < v6)
  {
    *(void *)unint64_t v7 = v4;
    *(void *)(v7 + 8) = v3;
    unint64_t v8 = (char *)(v7 + 24);
LABEL_8:
    *(_DWORD *)(v7 + 16) = 0;
    goto LABEL_35;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v2) >> 3);
  unint64_t v12 = v11 + 1;
  if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_36;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*v2) >> 3);
  if (2 * v13 > v12) {
    unint64_t v12 = 2 * v13;
  }
  if (v13 >= 0x555555555555555) {
    unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14) {
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)v5, v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v21 = &v15[24 * v11];
  int64x2_t v22 = &v15[24 * v14];
  *(void *)uint64_t v21 = v4;
  *((void *)v21 + 1) = v3;
  *((_DWORD *)v21 + 4) = 0;
  unint64_t v8 = v21 + 24;
  uint64_t v24 = (char *)*((void *)this + 3);
  unint64_t v23 = (char *)*((void *)this + 4);
  if (v23 == v24) {
    goto LABEL_33;
  }
  do
  {
    long long v25 = *(_OWORD *)(v23 - 24);
    *((_DWORD *)v21 - 2) = *((_DWORD *)v23 - 2);
    *(_OWORD *)(v21 - 24) = v25;
    v21 -= 24;
    v23 -= 24;
  }
  while (v23 != v24);
LABEL_32:
  unint64_t v23 = *v2;
LABEL_33:
  *((void *)this + 3) = v21;
  *((void *)this + 4) = v8;
  *((void *)this + 5) = v22;
  if (v23) {
    operator delete(v23);
  }
LABEL_35:
  *((void *)this + 4) = v8;
}

void sub_22E993B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void xgboost::common::ParallelGHistBuilder<float>::Init(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != a2)
  {
    if (*(_DWORD *)(a1 + 24) != a2)
    {
      *(_DWORD *)(a1 + 24) = a2;
      std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
    }
    *(void *)(a1 + 72) = *(void *)(a1 + 64);
    *(_DWORD *)(a1 + 28) = 0;
    *(void *)a1 = a2;
  }
}

_DWORD *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(_DWORD *a1, int a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  *a1 = a2;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = xgboost::tree::LossGuide<xgboost::tree::CPUExpandEntry>;
  if (!a2) {
    uint64_t v4 = xgboost::tree::DepthWise<xgboost::tree::CPUExpandEntry>;
  }
  v6[0] = &unk_26E24BB70;
  v6[1] = v4;
  v6[3] = v6;
  std::priority_queue<xgboost::tree::CPUExpandEntry,std::vector<xgboost::tree::CPUExpandEntry>,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>>::priority_queue[abi:ne180100](v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_22E993CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::tree::DepthWise<xgboost::tree::CPUExpandEntry>(_DWORD *a1, _DWORD *a2)
{
  return *a1 > *a2;
}

BOOL xgboost::tree::LossGuide<xgboost::tree::CPUExpandEntry>(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  float v3 = *(float *)(a2 + 8);
  if (v2 == v3) {
    return *(_DWORD *)a1 > *(_DWORD *)a2;
  }
  else {
    return v2 < v3;
  }
}

void std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__clone(uint64_t a1)
{
  float64x2_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E24BB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24BB70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::target_type()
{
}

void *std::priority_queue<xgboost::tree::CPUExpandEntry,std::vector<xgboost::tree::CPUExpandEntry>,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>>::priority_queue[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100]((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22E993E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 88 * (v4 >> 1);
    v71[0] = *(void *)v8;
    uint64_t v9 = *(void *)(v8 + 8);
    int v72 = *(_DWORD *)(v8 + 16);
    v71[1] = v9;
    unint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 2);
    uint64_t v10 = a1 + 88 * v7;
    long long v11 = *(_OWORD *)(v10 + 48);
    long long v12 = *(_OWORD *)(v10 + 64);
    uint64_t v78 = *(void *)(v10 + 80);
    long long v76 = v11;
    long long v77 = v12;
    uint64_t v13 = (void *)(a2 - 88);
    v63[0] = *(void *)(a2 - 88);
    uint64_t v14 = *(void *)(a2 - 80);
    int v64 = *(_DWORD *)(a2 - 72);
    v63[1] = v14;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    std::string __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a2 - 64), *(void *)(a2 - 56), (uint64_t)(*(void *)(a2 - 56) - *(void *)(a2 - 64)) >> 2);
    long long v15 = *(_OWORD *)(a2 - 40);
    long long v16 = *(_OWORD *)(a2 - 24);
    uint64_t v70 = *(void *)(a2 - 8);
    long long v68 = v15;
    long long v69 = v16;
    uint64_t v17 = *(void *)(a3 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v18 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v17 + 48))(v17, v71, v63);
    if (__p)
    {
      uint64_t v66 = __p;
      operator delete(__p);
    }
    if (v73)
    {
      unint64_t v74 = v73;
      operator delete(v73);
    }
    if (v18)
    {
      uint64_t v40 = a1;
      uint64_t v41 = *(void *)(a2 - 88);
      uint64_t v79 = *(void *)(a2 - 80);
      int v80 = *(_DWORD *)(a2 - 72);
      uint64_t v20 = *(const void **)(a2 - 64);
      long long v21 = *(_OWORD *)(a2 - 56);
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      long long v22 = *(_OWORD *)(a2 - 40);
      long long v23 = *(_OWORD *)(a2 - 24);
      uint64_t v62 = *(void *)(a2 - 8);
      long long v37 = v21;
      uint64_t v42 = v20;
      uint64_t v39 = v21;
      unint64_t v38 = (uint64_t)(v21 - (void)v20) >> 2;
      long long v60 = v22;
      long long v61 = v23;
      do
      {
        uint64_t v24 = v13;
        uint64_t v13 = (void *)v8;
        *uint64_t v24 = *(void *)v8;
        uint64_t v26 = v8 + 8;
        uint64_t v25 = *(void *)(v8 + 8);
        *((_DWORD *)v24 + 4) = *(_DWORD *)(v8 + 16);
        v24[1] = v25;
        long long v27 = (void *)(v8 + 24);
        std::vector<float>::__move_assign((uint64_t)(v24 + 3), (__n128 *)(v8 + 24));
        long long v28 = *(_OWORD *)(v8 + 48);
        long long v29 = *(_OWORD *)(v8 + 64);
        v24[10] = *(void *)(v8 + 80);
        *((_OWORD *)v24 + 3) = v28;
        *((_OWORD *)v24 + 4) = v29;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v40 + 88 * v7;
        v52[0] = *(void *)v8;
        uint64_t v30 = *(void *)(v8 + 8);
        int v53 = *(_DWORD *)(v8 + 16);
        v52[1] = v30;
        int v55 = 0;
        uint64_t v56 = 0;
        uint64_t v54 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v54, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 2);
        long long v31 = *(_OWORD *)(v8 + 48);
        long long v32 = *(_OWORD *)(v8 + 64);
        uint64_t v59 = *(void *)(v8 + 80);
        long long v57 = v31;
        long long v58 = v32;
        v44[0] = v41;
        v44[1] = v79;
        int v45 = v80;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        uint64_t v46 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v42, v39, v38);
        long long v49 = v60;
        long long v50 = v61;
        uint64_t v51 = v62;
        uint64_t v33 = *(void *)(a3 + 24);
        if (!v33) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        char v34 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v33 + 48))(v33, v52, v44);
        if (v46)
        {
          unsigned int v47 = v46;
          operator delete(v46);
        }
        if (v54)
        {
          int v55 = v54;
          operator delete(v54);
        }
      }
      while ((v34 & 1) != 0);
      *uint64_t v13 = v41;
      *(void *)uint64_t v26 = v79;
      *(_DWORD *)(v26 + 8) = v80;
      uint64_t v35 = (void *)v13[3];
      if (v35)
      {
        v13[4] = v35;
        operator delete(v35);
        *long long v27 = 0;
        v27[1] = 0;
        unint64_t v27[2] = 0;
      }
      void v13[3] = v42;
      *((_OWORD *)v13 + 2) = v37;
      double result = *(double *)&v60;
      long long v36 = v61;
      *(_OWORD *)(v26 + 40) = v60;
      *(_OWORD *)(v26 + 56) = v36;
      *(void *)(v26 + 72) = v62;
    }
  }
  return result;
}

void sub_22E994340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  uint64_t v54 = *(void **)(v52 - 184);
  if (v54)
  {
    *(void *)(v52 - 176) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>(xgboost::common::BlockedSpace2d *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  v27[0] = 0;
  std::vector<unsigned long>::vector(v35, v6, v27);
  uint64_t v7 = *a2;
  uint64_t v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      uint64_t v9 = *a3;
      uint64_t v8 = a3[1];
      if (*a3 != v8)
      {
        uint64_t v10 = 0;
        do
        {
          v27[0] = *(void *)v9;
          uint64_t v11 = *(void *)(v9 + 8);
          int v28 = *(_DWORD *)(v9 + 16);
          v27[1] = v11;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          std::string __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
          long long v12 = *(_OWORD *)(v9 + 48);
          long long v13 = *(_OWORD *)(v9 + 64);
          uint64_t v34 = *(void *)(v9 + 80);
          long long v32 = v12;
          long long v33 = v13;
          uint64_t v14 = *(void *)(*(void *)(v7 + 104) + 24 * LODWORD(v27[0]) + 8)
              - *(void *)(*(void *)(v7 + 104) + 24 * LODWORD(v27[0]));
          if (*(void *)((char *)v35[0] + v10) <= (unint64_t)(v14 >> 3)) {
            uint64_t v15 = v14 >> 3;
          }
          else {
            uint64_t v15 = *(void *)((char *)v35[0] + v10);
          }
          *(void *)((char *)v35[0] + v10) = v15;
          if (__p)
          {
            uint64_t v30 = __p;
            operator delete(__p);
          }
          v10 += 8;
          v9 += 88;
        }
        while (v9 != v8);
      }
      v7 += 136;
    }
    while (v7 != v26);
  }
  uint64_t v17 = *a3;
  uint64_t v16 = a3[1];
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  uint64_t v18 = v16 - v17;
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 3);
    do
    {
      unint64_t v21 = *((void *)v35[0] + v19);
      if ((_BYTE)v21) {
        uint64_t v22 = (v21 >> 8) + 1;
      }
      else {
        uint64_t v22 = v21 >> 8;
      }
      if (v22)
      {
        unint64_t v23 = 0;
        do
        {
          unint64_t v24 = v23 + 256;
          if (v21 >= v23 + 256) {
            unint64_t v25 = v23 + 256;
          }
          else {
            unint64_t v25 = v21;
          }
          xgboost::common::BlockedSpace2d::AddBlock(a1, v19, v23, v25);
          unint64_t v23 = v24;
          --v22;
        }
        while (v22);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_22E9945A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  unint64_t v25 = *(void **)(v23 + 24);
  if (v25)
  {
    *(void *)(v23 + 32) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v26;
    operator delete(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7, int **a8, uint64_t a9)
{
  int v27 = 0;
  unsigned int v28 = 0x7FFFFFFF;
  if (!a2) {
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRows((unsigned int *)a1, &v28, &v27, a7, a8, a5);
  }
  if (*(unsigned char *)(a4 + 192))
  {
    memset(v23, 0, sizeof(v23));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v23, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    std::string __p = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(a1, a2, (xgboost::common::BlockedSpace2d *)v23, a4, (uint64_t *)a7, a6, a9);
    if (__p)
    {
      unint64_t v25 = __p;
      operator delete(__p);
    }
    uint64_t v17 = (void *)v23[0];
    if (v23[0])
    {
      uint64_t v18 = (void **)v23;
LABEL_12:
      v18[1] = v17;
      operator delete(v17);
    }
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v19, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(a1, a2, (xgboost::common::BlockedSpace2d *)v19, a4, (uint64_t *)a7, a6, a9);
    if (v20)
    {
      unint64_t v21 = v20;
      operator delete(v20);
    }
    uint64_t v17 = v19[0];
    if (v19[0])
    {
      uint64_t v18 = v19;
      goto LABEL_12;
    }
  }
  if (!*(void *)(a1 + 400)) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  if (*(void *)(a1 + 400) - 1 == a2)
  {
    if (*(unsigned char *)(a1 + 408)) {
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed((unsigned int *)a1, a5, a7, a8, v28, v27);
    }
    else {
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(a1, a5, a7, (uint64_t)a8);
    }
  }
}

void sub_22E994874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

float xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(uint64_t a1, int8x16_t *a2)
{
  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 1uLL);
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v12);
  unint64_t v4 = *(int8x16_t **)(a1 + 296);
  *unint64_t v4 = *a2;
  int8x16_t v11 = *v4;
  float v6 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v12, 0, (float *)a1, (double *)v11.i64, v11, v5);
  float v7 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v12, (float *)a1, (double *)v11.i64, v6);
  uint64_t v8 = *(void *)(a1 + 296);
  *(float *)(v8 + 16) = v7;
  return xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v12, 0, (float *)a1, (double *)v11.i64, *(int8x16_t *)v8, v9);
}

char *std::vector<xgboost::tree::CPUExpandEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  unint64_t v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      int v8 = *(_DWORD *)(v6 + 16);
      *(void *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 16) = v8;
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 24), *(const void **)(v6 + 24), *(void *)(v6 + 32), (uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2);
      long long v9 = *(_OWORD *)(v6 + 48);
      long long v10 = *(_OWORD *)(v6 + 64);
      *(void *)(v4 + 80) = *(void *)(v6 + 80);
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 64) = v10;
      uint64_t v4 = v15 + 88;
      v15 += 88;
      v6 += 88;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_22E994AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 64);
    if (v3)
    {
      *(void *)(v1 - 56) = v3;
      operator delete(v3);
    }
    v1 -= 88;
  }
}

void std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    uint64_t v4 = *(void **)(i - 64);
    if (v4)
    {
      *(void *)(i - 56) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

unint64_t *xgboost::common::BlockedSpace2d::AddBlock(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v20 = a4;
  unint64_t v21 = a3;
  uint64_t v6 = (char *)this + 40;
  unint64_t v7 = *((void *)this + 5);
  int v8 = (char *)*((void *)this + 4);
  if ((unint64_t)v8 >= v7)
  {
    long long v10 = (char *)*((void *)this + 3);
    uint64_t v11 = (v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 2;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v6, v14);
      long long v10 = (char *)*((void *)this + 3);
      int v8 = (char *)*((void *)this + 4);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    long long v9 = v16 + 8;
    while (v8 != v10)
    {
      uint64_t v18 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v16 - 1) = v18;
      v16 -= 8;
    }
    *((void *)this + 3) = v16;
    *((void *)this + 4) = v9;
    *((void *)this + 5) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)int v8 = a2;
    long long v9 = v8 + 8;
  }
  *((void *)this + 4) = v9;
  return std::vector<xgboost::common::Range1d>::emplace_back<unsigned long &,unsigned long &>((unint64_t **)this, &v21, &v20);
}

unint64_t *std::vector<xgboost::common::Range1d>::emplace_back<unsigned long &,unsigned long &>(unint64_t **a1, unint64_t *a2, unint64_t *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= (unint64_t)v8)
  {
    uint64_t v11 = (uint64_t)(v9 - (void)*a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)v7 - (char *)*a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v18 = xgboost::common::Range1d::Range1d(&v15[2 * v11], *a2, *a3);
    long long v10 = v18 + 2;
    unint64_t v20 = *a1;
    uint64_t v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v19 - 1);
        v18 -= 2;
        v19 -= 2;
      }
      while (v19 != v20);
      uint64_t v19 = *a1;
    }
    *a1 = v18;
    a1[1] = v10;
    a1[2] = &v15[2 * v17];
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    xgboost::common::Range1d::Range1d(*(unint64_t **)(v6 - 8), *a2, *a3);
    long long v10 = (unint64_t *)(v9 + 16);
    a1[1] = (unint64_t *)(v9 + 16);
  }
  a1[1] = v10;
  return v10 - 2;
}

void sub_22E994E08(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *xgboost::common::Range1d::Range1d(unint64_t *this, unint64_t a2, unint64_t a3)
{
  *this = a2;
  this[1] = a3;
  if (a2 >= a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return this;
}

void sub_22E994F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRows(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  if (*((unsigned char *)a1 + 408)) {
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(a1, a2, a3, a4, a5, a6);
  }
  else {
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(a1, (signed int *)a2, a3, a4, (unsigned int **)a5);
  }
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  LODWORD(v24[0]) = 0;
  uint64_t v16 = v14 - v15;
  unint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(__p, v26);
  if (v26)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      xgboost::common::HistCollection<float>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v24);
      unint64_t v20 = (char *)__p[0] + v18;
      void *v20 = v24[0];
      v20[1] = v24[1];
      ++v19;
      uint64_t v21 = v26;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v26);
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  xgboost::common::ParallelGHistBuilder<float>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_10:
  int v22 = *(_DWORD *)(a1 + 392);
  v23[0] = a5;
  v23[1] = a6;
  unint64_t v23[2] = a1;
  void v23[3] = a7;
  v23[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v22, (uint64_t)v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E995138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19 = (uint64_t)__p;
  std::string __p = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  LODWORD(v24[0]) = 0;
  uint64_t v16 = v14 - v15;
  unint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(__p, v26);
  if (v26)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      xgboost::common::HistCollection<float>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v24);
      unint64_t v20 = (char *)__p[0] + v18;
      void *v20 = v24[0];
      v20[1] = v24[1];
      ++v19;
      uint64_t v21 = v26;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v26);
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  xgboost::common::ParallelGHistBuilder<float>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_10:
  int v22 = *(_DWORD *)(a1 + 392);
  v23[0] = a5;
  v23[1] = a6;
  unint64_t v23[2] = a1;
  void v23[3] = a7;
  v23[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v22, (uint64_t)v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E995370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19 = (uint64_t)__p;
  std::string __p = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(unsigned int *a1, uint64_t a2, void *a3, void *a4, unsigned int a5, int a6)
{
  unint64_t v23 = a1[32];
  uint64_t v24 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v20, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v23, 0x400uLL);
  int v11 = a1[98];
  v19[0] = a3;
  v19[1] = a1;
  unint64_t v19[2] = &v24;
  uint64_t v19[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v11, (uint64_t)v19);
  xgboost::common::HistCollection<float>::operator[](a1, a5, &v14);
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 80), v15, (const char *)8, a1[32] * a6, 0, 0);
  v25[0] = v24;
  int v12 = a1[98];
  uint64_t v14 = a3;
  uint64_t v15 = v25;
  uint64_t v16 = a1;
  std::string __p = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v12, (uint64_t)&v14);
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>((xgboost::common::BlockedSpace2d *)&v14, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3), &v23, 0x400uLL);
  v25[3] = a3;
  uint64_t v26 = v24;
  int v13 = a1[98];
  v25[0] = a4;
  v25[1] = &v26;
  v25[2] = a1;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(&v14, v13, (uint64_t)v25);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_22E995544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  xgboost::common::Index::~Index((xgboost::common::Index *)va1);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v12 = *(unsigned int *)(a1 + 128);
  uint64_t v13 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v9, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v12, 0x400uLL);
  int v7 = *(_DWORD *)(a1 + 392);
  v8[0] = a3;
  v8[1] = a1;
  v8[2] = &v13;
  void v8[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v9, v7, (uint64_t)v8);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_22E995620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  unint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)*a4) >> 3);
  uint64_t v14 = *a5;
  long long v33 = a5[1];
  unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (((char *)v33 - (char *)*a5) >> 3);
  std::vector<int>::vector(&v34, v15 + v13);
  std::vector<int>::pointer begin = v34.__begin_;
  if (v11 != v12)
  {
    uint64_t v17 = *a4;
    if (v13 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v13;
    }
    std::vector<int>::pointer v19 = v34.__begin_;
    do
    {
      int v20 = *v17;
      v17 += 22;
      *v19++ = v20;
      --v18;
    }
    while (v18);
  }
  if (v33 != v14)
  {
    uint64_t v21 = *a5;
    if (v15 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v15;
    }
    unint64_t v23 = &begin[v13];
    do
    {
      int v24 = *v21;
      v21 += 22;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v25 = (unsigned int *)v34.__begin_;
  std::vector<int>::pointer end = v34.__end_;
  if (v34.__begin_ == v34.__end_)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = 0;
    do
    {
      if ((*(_DWORD *)(*(void *)(a6 + 160) + 20 * (int)*v25) & 0x80000000) != 0)
      {
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, *v25);
        unsigned int v28 = *a2;
        if ((int)*a2 >= (int)*v25) {
          unsigned int v28 = *v25;
        }
        *a2 = v28;
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)(a1 + 16), *v25);
        ++v27;
      }
      ++v25;
    }
    while (v25 != (unsigned int *)end);
    long long v29 = (unsigned int *)v34.__begin_;
    for (std::vector<int>::pointer i = v34.__end_; v29 != (unsigned int *)i; ++v29)
    {
      if ((*(_DWORD *)(*(void *)(a6 + 160) + 20 * (int)*v29) & 0x80000000) == 0)
      {
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, *v29);
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)(a1 + 16), *v29);
      }
    }
  }
  xgboost::common::HistCollection<float>::AllocateAllData(a1);
  xgboost::common::HistCollection<float>::AllocateAllData(a1 + 16);
  if (v27 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v27;
  }
  *a3 = v31;
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_22E995810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(unsigned int *a1, signed int *a2, _DWORD *a3, signed int **a4, unsigned int **a5)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 == v9)
  {
    unint64_t v15 = *a4;
  }
  else
  {
    do
    {
      signed int v13 = *v8;
      v8 += 22;
      signed int v12 = v13;
      xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, v13);
      signed int v14 = *a2;
      if (*a2 >= v13) {
        signed int v14 = v12;
      }
      *a2 = v14;
    }
    while (v8 != v9);
    uint64_t v8 = *a4;
    unint64_t v15 = a4[1];
  }
  *a3 = -1171354717 * ((unint64_t)((char *)v15 - (char *)v8) >> 3);
  uint64_t v17 = *a5;
  uint64_t v16 = a5[1];
  while (v17 != v16)
  {
    unsigned int v18 = *v17;
    v17 += 22;
    xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, v18);
  }

  xgboost::common::HistCollection<float>::AllocateAllData(a1);
}

void xgboost::common::HistCollection<float>::AddHistRow(uint64_t a1, unsigned int a2)
{
  int v10 = -1;
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v5) >> 3))
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    std::vector<unsigned long>::resize(a1 + 40, a2 + 1, &v9);
    uint64_t v5 = *v6;
  }
  if (*(void *)(v5 + 8 * v4) != 0xFFFFFFFFLL) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  unint64_t v7 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) < v7) {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::resize((uint64_t *)(a1 + 16), v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  *(void *)(*(void *)(a1 + 40) + 8 * v4) = v8;
  *(_DWORD *)(a1 + 4) = v8 + 1;
}

void sub_22E995A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<float>::AllocateAllData(unsigned int *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = a1 + 4;
  uint64_t v3 = (void *)*((void *)a1 + 2);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v4 + 1) - (void)v3) >> 3) * v2;
  *((unsigned char *)a1 + 8) = 1;
  if (v5 != (uint64_t)(v3[1] - *v3) >> 3) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v3, v5);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_22E995B40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      signed int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    }
    else {
      signed int v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unsigned int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22E995D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unsigned int *xgboost::common::HistCollection<float>::operator[]@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  int v11 = -1;
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t result = a1 + 10;
  if (a2 >= (unint64_t)((v7 - v6) >> 3)) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(v6 + 8 * a2);
  if (v10 == 0xFFFFFFFFLL) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v8 = *a1;
    uint64_t v9 = **((void **)a1 + 2) + 8 * v10 * v8;
  }
  else
  {
    uint64_t v9 = *(void *)(*((void *)a1 + 2) + 24 * v10);
    uint64_t v8 = *a1;
  }
  *a3 = v8;
  a3[1] = v9;
  if (v8)
  {
    if (!v9) {
      std::terminate();
    }
  }
  return result;
}

void sub_22E996010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<float>::Reset(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::common::BlockedSpace2d *a4, uint64_t **a5)
{
  uint64_t v15 = a3;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)a1)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)a1;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  }
  uint64_t v10 = *(void **)(a1 + 168);
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 28) = 0;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 160, v10);
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 120) = 0;
  if ((uint64_t **)(a1 + 136) != a5) {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>((void *)(a1 + 136), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  }
  uint64_t v14 = ((char *)a5[1] - (char *)*a5) >> 4;
  if (v14 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v11 = v15;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v11;
  xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes((void *)a1, a4);
  xgboost::common::ParallelGHistBuilder<float>::AllocateAdditionalHistograms((void *)a1);
  xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist((_OWORD *)a1);
  std::vector<int>::resize((std::vector<int> *)(a1 + 88), *(void *)(a1 + 16) * a2);
  char v12 = *(void **)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96) - (void)v12;
  if (v13 >= 1) {
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
}

void sub_22E99620C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9963C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

void *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E996480(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes(void *a1, xgboost::common::BlockedSpace2d *a2)
{
  unint64_t v4 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4;
  unint64_t v5 = a1[1];
  if (v4 % v5) {
    uint64_t v6 = v4 / v5 + 1;
  }
  else {
    uint64_t v6 = v4 / v5;
  }
  std::mutex v7 = a1 + 14;
  std::vector<BOOL>::resize((uint64_t)(a1 + 14), a1[2] * v5, 0);
  if (a1[1])
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = v8 * v6;
      if (v8 * v6 < v4)
      {
        if (v4 >= v9 + v6) {
          unint64_t v10 = v9 + v6;
        }
        else {
          unint64_t v10 = v4;
        }
        FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(a2, v9);
        unint64_t v12 = xgboost::common::BlockedSpace2d::GetFirstDimension(a2, v10 - 1);
        if (FirstDimension <= v12)
        {
          uint64_t v13 = *v7;
          do
          {
            *(void *)(v13 + (((FirstDimension + v8 * a1[2]) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (FirstDimension + v8 * *((unsigned char *)a1 + 16));
            ++FirstDimension;
          }
          while (FirstDimension <= v12);
        }
      }
      ++v8;
    }
    while (v8 < a1[1]);
  }
}

void xgboost::common::ParallelGHistBuilder<float>::AllocateAdditionalHistograms(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v3;
      int v5 = 0;
      if (a1[1])
      {
        unint64_t v6 = v2;
        uint64_t v7 = a1[1];
        do
        {
          v5 += (*(void *)(a1[14] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
          v6 += v1;
          --v7;
        }
        while (v7);
      }
      if (v5 <= 1) {
        int v8 = 1;
      }
      else {
        int v8 = v5;
      }
      uint64_t v3 = v4 + (v8 - 1);
      ++v2;
    }
    while (v2 != v1);
    if (v3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (uint64_t)(a1 + 3);
      if (v5 <= 1) {
        int v11 = 1;
      }
      else {
        int v11 = v5;
      }
      uint64_t v12 = v4 + (v11 - 1);
      do
        xgboost::common::HistCollection<float>::AddHistRow(v10, v9++);
      while (v12 != v9);
    }
  }
}

_OWORD *xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist(_OWORD *result)
{
  unint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    unint64_t v2 = result;
    int v3 = 0;
    unint64_t v4 = 0;
    int v5 = (uint64_t **)(result + 10);
    unint64_t v6 = *((void *)result + 1);
    do
    {
      if (v6)
      {
        unint64_t v7 = 0;
        char v8 = 1;
        do
        {
          if (((*(void *)(v2[14] + (((v4 + v2[2] * v7) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4
                                                                                           + *((unsigned char *)v2 + 16)
                                                                                           * v7)) & 1) != 0)
          {
            v9[0] = v7;
            v9[1] = v4;
            uint64_t v10 = v9;
            if (v8)
            {
              uint64_t result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v5, v9, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
              char v8 = 0;
              *((_DWORD *)result + 12) = -1;
            }
            else
            {
              uint64_t result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v5, v9, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
              char v8 = 0;
              *((_DWORD *)result + 12) = v3++;
            }
          }
          ++v7;
          unint64_t v6 = v2[1];
        }
        while (v7 < v6);
        unint64_t v1 = v2[2];
      }
      ++v4;
    }
    while (v4 < v1);
  }
  return result;
}

char *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v19;
    unint64_t v20 = (v19 - result) >> 4;
    if (v20 >= a4)
    {
      unsigned int v28 = result;
      if (a2 != a3)
      {
        long long v29 = result;
        do
        {
          uint64_t v30 = *v6;
          uint64_t v31 = v6[1];
          v6 += 2;
          *(void *)long long v29 = v30;
          *((void *)v29 + 1) = v31;
          v29 += 16;
          v28 += 16;
        }
        while (v6 != a3);
      }
      unsigned int v18 = (char *)(v28 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v21 = &a2[2 * v20];
      if (v12 != result)
      {
        do
        {
          uint64_t v22 = *v6;
          uint64_t v23 = v6[1];
          v6 += 2;
          *(void *)uint64_t result = v22;
          *((void *)result + 1) = v23;
          result += 16;
        }
        while (v6 != v21);
      }
      int v24 = v12;
      if (v21 != a3)
      {
        unint64_t v25 = v12;
        do
        {
          uint64_t v26 = *v21;
          uint64_t v27 = v21[1];
          v21 += 2;
          *(void *)unint64_t v25 = v26;
          *((void *)v25 + 1) = v27;
          v25 += 16;
          v24 += 16;
        }
        while (v21 != a3);
      }
      unsigned int v18 = (char *)(v24 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6;
        uint64_t v17 = v6[1];
        v6 += 2;
        *(void *)uint64_t v15 = v16;
        *((void *)v15 + 1) = v17;
        v15 += 16;
      }
      while (v6 != a3);
    }
    unsigned int v18 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v18[(void)v12];
  return result;
}

uint64_t xgboost::common::BlockedSpace2d::GetFirstDimension(xgboost::common::BlockedSpace2d *this, unint64_t a2)
{
  if ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3 <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return *(void *)(*((void *)this + 3) + 8 * a2);
}

void sub_22E996A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>(uint64_t a1, void *a2, unint64_t *a3)
{
  int v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = v4[4];
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        unint64_t v4 = (void *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      unint64_t v4 = (void *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1 = **(void **)a1;
  unint64_t v2 = **(int **)(a1 + 8);
  if (v1 % v2) {
    unint64_t v3 = v1 / v2 + 1;
  }
  else {
    unint64_t v3 = v1 / v2;
  }
  if (v1 >= v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = **(void **)a1;
  }
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t v11 = (void *)(*(void *)(*(void *)(v7 + 8) + 24)
                     + 24 * *(unsigned int *)(**(void **)v7 + 88 * FirstDimension));
      unint64_t v12 = (uint64_t)(v11[1] - *v11) >> 3;
      if (v12 >= Range) {
        unint64_t v13 = Range;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v12 >= v10) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v12;
      }
      xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(*(void *)(v7 + 16) + 136, 0, FirstDimension, (uint64_t)&v15);
      if (v14 != v13) {
        xgboost::common::GHistBuilder<float>::BuildHist<false>();
      }
    }
  }
}

uint64_t xgboost::common::BlockedSpace2d::GetRange(xgboost::common::BlockedSpace2d *this, unint64_t a2)
{
  if ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4 <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return *(void *)(*(void *)this + 16 * a2);
}

void sub_22E996E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v10 = a3;
  unint64_t v11 = a2;
  if (*(void *)(a1 + 16) <= a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a1 + 8) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  v9[0] = v11;
  v9[1] = v10;
  unsigned int v6 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, v9);
  if ((v6 & 0x80000000) == 0)
  {
    xgboost::common::HistCollection<float>::AllocateData((unsigned int *)(a1 + 24), v6);
LABEL_8:
    xgboost::common::HistCollection<float>::operator[]((unsigned int *)(a1 + 24), v6, (void *)a4);
    unint64_t v7 = v10;
    goto LABEL_9;
  }
  if (v6 != -1) {
    goto LABEL_8;
  }
  unint64_t v7 = v10;
  uint64_t v8 = (void *)(*(void *)(a1 + 136) + 16 * v10);
  *(void *)a4 = *v8;
  *(void *)(a4 + 8) = v8[1];
LABEL_9:
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 4 * (v7 + *(void *)(a1 + 16) * v11)))
  {
    bzero(*(void **)(a4 + 8), 8 * *(void *)a4);
    *(_DWORD *)(*(void *)(a1 + 88) + 4 * (v10 + *(void *)(a1 + 16) * v11)) = 1;
  }
}

void sub_22E997080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16 = a10;
  a10 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::pair<unsigned long,unsigned long>,int>::at(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 48;
}

void xgboost::common::HistCollection<float>::AllocateData(unsigned int *a1, unsigned int a2)
{
  unint64_t v3 = (void *)(*((void *)a1 + 2) + 24 * *(void *)(*((void *)a1 + 5) + 8 * a2));
  if (v3[1] == *v3)
  {
    unint64_t v4 = *a1;
    uint64_t v5 = 0;
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v3, v4, &v5);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    int v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E997438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1 = **(void **)a1;
  unint64_t v2 = **(int **)(a1 + 8);
  if (v1 % v2) {
    unint64_t v3 = v1 / v2 + 1;
  }
  else {
    unint64_t v3 = v1 / v2;
  }
  if (v1 >= v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = **(void **)a1;
  }
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t v11 = (void *)(*(void *)(*(void *)(v7 + 8) + 24)
                     + 24 * *(unsigned int *)(**(void **)v7 + 88 * FirstDimension));
      unint64_t v12 = (uint64_t)(v11[1] - *v11) >> 3;
      if (v12 >= Range) {
        unint64_t v13 = Range;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v12 >= v10) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v12;
      }
      xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(*(void *)(v7 + 16) + 136, 0, FirstDimension, (uint64_t)&v15);
      if (v14 != v13) {
        xgboost::common::GHistBuilder<float>::BuildHist<true>();
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E997808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E997914(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

unsigned int *xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(unsigned int **)(a1 + 8);
  unint64_t v9 = (unsigned int *)(**(void **)a1 + 88 * a2);
  xgboost::common::HistCollection<float>::operator[](v8, *v9, &v36);
  xgboost::common::ParallelGHistBuilder<float>::ReduceHist((uint64_t)(v8 + 34), a2, a3, a4);
  uint64_t v10 = v8 + 16;
  uint64_t result = xgboost::common::HistCollection<float>::operator[](v8 + 16, *v9, v35);
  unint64_t v12 = 2 * a3;
  unint64_t v13 = 2 * a4;
  if (v13 > 2 * a3)
  {
    unint64_t v14 = v13 - v12;
    uint64_t v15 = (_DWORD *)(v35[1] + 8 * a3);
    uint64_t v16 = (int *)(v37 + 8 * a3);
    do
    {
      int v17 = *v16++;
      *v15++ = v17;
      --v14;
    }
    while (v14);
  }
  int v18 = *(_DWORD *)(*(void *)(**(void **)(a1 + 16) + 160) + 20 * (int)*v9);
  if (v18 != -1)
  {
    unsigned int v19 = *(_DWORD *)(**(void **)(a1 + 24) + 88 * a2);
    xgboost::common::HistCollection<float>::operator[](v8 + 16, v18 & 0x7FFFFFFF, v34);
    xgboost::common::HistCollection<float>::operator[](v8, v19, &v32);
    unint64_t v20 = v13 - v12;
    if (v13 <= v12)
    {
      return xgboost::common::HistCollection<float>::operator[](v10, v19, v31);
    }
    else
    {
      uint64_t v21 = (float *)(v33 + 8 * a3);
      uint64_t v22 = (float *)(v37 + 8 * a3);
      uint64_t v23 = (float *)(v34[1] + 8 * a3);
      unint64_t v24 = v13 - v12;
      do
      {
        float v25 = *v23++;
        float v26 = v25;
        float v27 = *v22++;
        *v21++ = v26 - v27;
        --v24;
      }
      while (v24);
      uint64_t result = xgboost::common::HistCollection<float>::operator[](v10, v19, v31);
      unsigned int v28 = (_DWORD *)(v31[1] + 8 * a3);
      long long v29 = (int *)(v33 + 8 * a3);
      do
      {
        int v30 = *v29++;
        *v28++ = v30;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

void xgboost::common::ParallelGHistBuilder<float>::ReduceHist(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v22 = a3;
  unint64_t v23 = a2;
  unint64_t v21 = a4;
  if (a4 <= a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (v23 >= *(void *)(a1 + 16)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 136) + 16 * v23 + 8);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    unint64_t v8 = 0;
    while (2)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = (_DWORD *)(*(void *)(a1 + 88) + 4 * (v23 + v8 * v9));
      uint64_t v11 = 4 * v9;
      while (!*v10)
      {
        uint64_t v10 = (_DWORD *)((char *)v10 + v11);
        if (++v8 >= v6)
        {
          if (v7) {
            return;
          }
          goto LABEL_21;
        }
      }
      unint64_t v19 = v8;
      unint64_t v20 = v23;
      unsigned int v12 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, &v19);
      if (v12 == -1)
      {
        unint64_t v13 = (uint64_t *)(*(void *)(a1 + 136) + 16 * v23 + 8);
      }
      else
      {
        xgboost::common::HistCollection<float>::operator[]((unsigned int *)(a1 + 24), v12, &v19);
        unint64_t v13 = (uint64_t *)&v20;
      }
      uint64_t v14 = *v13;
      if (v5 != *v13 && 2 * v21 > 2 * v22)
      {
        uint64_t v15 = 2 * v21 - 2 * v22;
        uint64_t v16 = (float *)(v5 + 8 * v22);
        int v17 = (float *)(v14 + 8 * v22);
        do
        {
          float v18 = *v17++;
          *uint64_t v16 = v18 + *v16;
          ++v16;
          --v15;
        }
        while (v15);
      }
      unint64_t v6 = *(void *)(a1 + 8);
      ++v8;
      char v7 = 1;
      if (v8 < v6) {
        continue;
      }
      break;
    }
  }
  else
  {
LABEL_21:
    bzero((void *)(v5 + 8 * v22), 8 * (v21 - v22));
  }
}

void sub_22E997ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v15 = a9;
  a9 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((unsigned int *)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9980A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

unsigned int *dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      uint64_t result = (unsigned int *)xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      uint64_t v11 = v10;
      unsigned int v12 = (unsigned int *)(**(void **)v8 + 88 * FirstDimension);
      if ((*(_DWORD *)(*(void *)(**(void **)(v8 + 8) + 160) + 20 * (int)*v12) & 0x80000000) == 0)
      {
        unint64_t v13 = result;
        uint64_t v14 = *(unsigned int **)(v8 + 16);
        uint64_t result = xgboost::common::HistCollection<float>::operator[](v14, *v12, v26);
        int v15 = *(_DWORD *)(*(void *)(**(void **)(v8 + 8) + 160) + 20 * (int)*v12);
        if (v15 != -1)
        {
          unsigned int v16 = *(_DWORD *)(**(void **)(v8 + 24) + 88 * FirstDimension);
          xgboost::common::HistCollection<float>::operator[](v14, v15 & 0x7FFFFFFF, v25);
          uint64_t result = xgboost::common::HistCollection<float>::operator[](v14, v16, v24);
          if (2 * v11 > (unint64_t)(2 * (void)v13))
          {
            uint64_t v17 = 2 * v11 - 2 * (void)v13;
            float v18 = (float *)(v26[1] + 8 * (void)v13);
            unint64_t v19 = (float *)(v24[1] + 8 * (void)v13);
            unint64_t v20 = (float *)(v25[1] + 8 * (void)v13);
            do
            {
              float v21 = *v20++;
              float v22 = v21;
              float v23 = *v19++;
              *v18++ = v22 - v23;
              --v17;
            }
            while (v17);
          }
        }
      }
    }
  }
  return result;
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E9983CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E99857C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E998688(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t v12 = v11;
      unint64_t v13 = *(unsigned int **)(v8 + 8);
      uint64_t v14 = (unsigned int *)(**(void **)v8 + 88 * FirstDimension);
      xgboost::common::HistCollection<float>::operator[](v13, *v14, v26);
      xgboost::common::ParallelGHistBuilder<float>::ReduceHist((uint64_t)(v13 + 34), FirstDimension, Range, v12);
      int v15 = *(_DWORD *)(*(void *)(**(void **)(v8 + 16) + 160) + 20 * (int)*v14);
      if (v15 != -1)
      {
        unsigned int v16 = *(_DWORD *)(**(void **)(v8 + 24) + 88 * FirstDimension);
        xgboost::common::HistCollection<float>::operator[](v13, v15 & 0x7FFFFFFF, v25);
        xgboost::common::HistCollection<float>::operator[](v13, v16, v24);
        if (2 * v12 > 2 * Range)
        {
          uint64_t v17 = 2 * v12 - 2 * Range;
          float v18 = (float *)(v24[1] + 8 * Range);
          unint64_t v19 = (float *)(v26[1] + 8 * Range);
          unint64_t v20 = (float *)(v25[1] + 8 * Range);
          do
          {
            float v21 = *v20++;
            float v22 = v21;
            float v23 = *v19++;
            *v18++ = v22 - v23;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
}

void *std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::exception_ptr v6 = result;
    uint64_t result = std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E99892C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__append(void **a1, unint64_t a2)
{
  std::exception_ptr v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    int v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    unint64_t v19 = (char *)*a1;
    float v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      float v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    int v25 = *(_DWORD *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    long long v21 = *(_OWORD *)(a1 + 48);
    long long v22 = *(_OWORD *)(a1 + 64);
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v24 = v7;
    uint64_t v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(a1, a3, a4);
    uint64_t v13 = v12;
    if (a2 - 88 == v12)
    {
      *(void *)uint64_t v12 = v8;
      *(void *)(v12 + 8) = v24;
      *(_DWORD *)(v12 + 16) = v25;
      long long v20 = (void *)(v12 + 24);
      unint64_t v19 = *(void **)(v12 + 24);
      if (v19)
      {
        *(void *)(v13 + 32) = v19;
        operator delete(v19);
        void *v20 = 0;
        *(void *)(v13 + 32) = 0;
        *(void *)(v13 + 40) = 0;
      }
      *(void *)(v13 + 24) = v9;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v11;
      *(_OWORD *)(v13 + 48) = v21;
      *(_OWORD *)(v13 + 64) = v22;
      *(void *)(v13 + 80) = v23;
    }
    else
    {
      *(void *)uint64_t v12 = *(void *)(a2 - 88);
      uint64_t v14 = *(void *)(a2 - 80);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 72);
      *(void *)(v12 + 8) = v14;
      std::vector<float>::__move_assign(v12 + 24, (__n128 *)(a2 - 64));
      long long v15 = *(_OWORD *)(a2 - 40);
      long long v16 = *(_OWORD *)(a2 - 24);
      *(void *)(v13 + 80) = *(void *)(a2 - 8);
      *(_OWORD *)(v13 + 48) = v15;
      *(_OWORD *)(v13 + 64) = v16;
      uint64_t v17 = v13 + 88;
      *(void *)(a2 - 88) = v8;
      *(void *)(a2 - 80) = v24;
      *(_DWORD *)(a2 - 72) = v25;
      float v18 = *(void **)(a2 - 64);
      if (v18)
      {
        *(void *)(a2 - 56) = v18;
        operator delete(v18);
        *(void *)(a2 - 64) = 0;
        *(void *)(a2 - 56) = 0;
        *(void *)(a2 - 48) = 0;
      }
      *(void *)(a2 - 64) = v9;
      *(void *)(a2 - 56) = v10;
      *(void *)(a2 - 48) = v11;
      *(_OWORD *)(a2 - 40) = v21;
      *(_OWORD *)(a2 - 24) = v22;
      *(void *)(a2 - 8) = v23;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(a1, v17, a3, 0x2E8BA2E8BA2E8BA3 * ((v17 - a1) >> 3));
    }
  }
}

void sub_22E998CDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v24 = v5 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v4 + 1;
    a1 += 88 * (v4 + 1);
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v8 + 2 >= a3) {
      goto LABEL_11;
    }
    v34[0] = *(void *)a1;
    uint64_t v10 = v6 + 88 * v7;
    uint64_t v11 = *(void *)(v10 + 8);
    int v35 = *(_DWORD *)(v10 + 16);
    v34[1] = v11;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *(const void **)(v10 + 24), *(void *)(v10 + 32), (uint64_t)(*(void *)(v10 + 32) - *(void *)(v10 + 24)) >> 2);
    long long v12 = *(_OWORD *)(v10 + 48);
    long long v13 = *(_OWORD *)(v10 + 64);
    uint64_t v41 = *(void *)(v10 + 80);
    long long v39 = v12;
    long long v40 = v13;
    v26[0] = *(void *)(a1 + 88);
    uint64_t v14 = *(void *)(a1 + 96);
    int v27 = *(_DWORD *)(a1 + 104);
    v26[1] = v14;
    long long v29 = 0;
    uint64_t v30 = 0;
    std::string __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a1 + 112), *(void *)(a1 + 120), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2);
    long long v15 = *(_OWORD *)(a1 + 136);
    long long v16 = *(_OWORD *)(a1 + 152);
    uint64_t v33 = *(void *)(a1 + 168);
    long long v31 = v15;
    long long v32 = v16;
    uint64_t v17 = *(void *)(a2 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v18 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v17 + 48))(v17, v34, v26);
    if (__p)
    {
      long long v29 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
      if ((v18 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_10:
      a1 += 88;
      uint64_t v4 = v9;
      goto LABEL_11;
    }
    if (v18) {
      goto LABEL_10;
    }
LABEL_11:
    *(void *)uint64_t v6 = *(void *)a1;
    uint64_t v19 = *(void *)(a1 + 8);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 16);
    *(void *)(v6 + 8) = v19;
    std::vector<float>::__move_assign(v6 + 24, (__n128 *)(a1 + 24));
    long long v20 = *(_OWORD *)(a1 + 48);
    long long v21 = *(_OWORD *)(a1 + 64);
    *(void *)(v6 + 80) = *(void *)(a1 + 80);
    *(_OWORD *)(v6 + 48) = v20;
    *(_OWORD *)(v6 + 64) = v21;
  }
  while (v4 <= v24);
  return a1;
}

void sub_22E998F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  __n128 result = *(__n128 *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(v4 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 64) = v7;
  *(void *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_22E998FC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v22 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  long long v20 = v11;
  long long v21 = &v10[88 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int v13 = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((void *)v11 - 2) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  uint64_t v14 = &v10[88 * v4];
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 64);
  *((void *)v14 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_22E999118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 88);
      a3 -= 88;
      *(void *)(v7 - 88) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(_DWORD *)(v7 - 72) = *(_DWORD *)(a3 + 16);
      *(void *)(v7 - 80) = v9;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 48) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v10 = *(void *)(a3 + 80);
      long long v11 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 48);
      *(void *)(v7 - 8) = v10;
      *(_OWORD *)(v7 - 24) = v11;
      uint64_t v7 = *((void *)&v17 + 1) - 88;
      *((void *)&v17 + 1) -= 88;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<xgboost::tree::CPUExpandEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 88;
    uint64_t v5 = *(void **)(v2 - 64);
    if (v5)
    {
      *(void *)(v2 - 56) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]()
{
}

__n128 std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  __n128 result = *(__n128 *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(v4 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 64) = v7;
  *(void *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_22E999420(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v22 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  long long v20 = v11;
  long long v21 = &v10[88 * v9];
  *(void *)long long v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int v13 = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((void *)v11 - 2) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  uint64_t v14 = &v10[88 * v4];
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 64);
  *((void *)v14 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_22E999574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v22 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  long long v20 = v11;
  long long v21 = &v10[88 * v9];
  *(void *)long long v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int v13 = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((void *)v11 - 2) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  uint64_t v14 = &v10[88 * v4];
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 64);
  *((void *)v14 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_22E9996D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(uint64_t *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = ((result[4] - v1) >> 3) - 1;
  if ((result[4] - v1) >> 3 != 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *result;
    do
    {
      unint64_t v5 = *(void *)(v1 + 8 * v3);
      uint64_t v6 = v3 + 1;
      unint64_t v7 = *(void *)(v1 + 8 * (v3 + 1));
      if (v5 >= v7)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v9 = (void **)(result[6] + 16 * v5);
        do
        {
          uint64_t v10 = *v9;
          v9 += 2;
          void v10[2] = v8;
          v8 += *v10;
          ++v5;
          unint64_t v7 = *(void *)(v1 + 8 * v6);
        }
        while (v5 < v7);
        unint64_t v5 = *(void *)(v1 + 8 * v3);
      }
      if (v5 >= v7)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = (uint64_t *)(result[6] + 16 * v5);
        do
        {
          uint64_t v13 = *v12;
          v12 += 2;
          *(void *)(v13 + 24) = v11 + v8;
          v11 += *(void *)(v13 + 8);
          ++v5;
        }
        while (v5 < *(void *)(v1 + 8 * v6));
      }
      uint64_t v14 = (void *)(v4 + 16 * v3);
      *uint64_t v14 = v8;
      v14[1] = v11;
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

void xgboost::common::RowSetCollection::AddSplit(xgboost::common::RowSetCollection *this, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v28 = a6;
  uint64_t v10 = (uint64_t *)((char *)this + 24);
  uint64_t v11 = *((void *)this + 3) + 24 * a2;
  uint64_t v12 = *(void *)(v11 + 16);
  long long v26 = *(_OWORD *)v11;
  uint64_t v27 = v12;
  uint64_t v13 = v26;
  if ((void)v26)
  {
    uint64_t v14 = v26;
  }
  else
  {
    LODWORD(v25) = 0;
    if (a5) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    LODWORD(v25) = 0;
    if (v28) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    uint64_t v14 = 0;
    a5 = v29;
    a6 = 0;
    uint64_t v13 = v26;
  }
  uint64_t v24 = (*((void *)&v26 + 1) - v13) >> 3;
  uint64_t v25 = a5 + a6;
  if (a5 + a6 != v24) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if ((unint64_t)(v14 + 8 * v29) > *((void *)&v26 + 1)) {
    dmlc::LogCheckFormat<unsigned long *,unsigned long const*>();
  }
  uint64_t v25 = v14 + 8 * v29 + 8 * v28;
  if (v25 != *((void *)&v26 + 1)) {
    dmlc::LogCheckFormat<unsigned long *,unsigned long const*>();
  }
  uint64_t v15 = *((void *)this + 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v15) >> 3);
  if (v16 <= a3)
  {
    long long v22 = 0uLL;
    int v23 = -1;
    std::vector<xgboost::common::RowSetCollection::Elem>::resize((uint64_t)v10, a3 + 1, &v22);
    uint64_t v15 = *((void *)this + 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v15) >> 3);
  }
  if (v16 <= a4)
  {
    long long v22 = 0uLL;
    int v23 = -1;
    std::vector<xgboost::common::RowSetCollection::Elem>::resize((uint64_t)v10, a4 + 1, &v22);
    uint64_t v15 = *v10;
  }
  uint64_t v17 = v14 + 8 * v29;
  uint64_t v18 = v15 + 24 * a3;
  *(void *)uint64_t v18 = v14;
  *(void *)(v18 + 8) = v17;
  *(_DWORD *)(v18 + 16) = a3;
  uint64_t v19 = *((void *)&v26 + 1);
  uint64_t v20 = *v10 + 24 * a4;
  *(void *)uint64_t v20 = v17;
  *(void *)(v20 + 8) = v19;
  *(_DWORD *)(v20 + 16) = a4;
  uint64_t v21 = *v10 + 24 * a2;
  *(void *)uint64_t v21 = 0;
  *(void *)(v21 + 8) = 0;
  *(_DWORD *)(v21 + 16) = -1;
}

void sub_22E999CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v15 = a10;
  a10 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E999CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E999CD4);
}

void sub_22E999D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E999CD4);
}

void sub_22E999D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E999CD4);
}

void std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__append(a1, v5);
  }
}

void std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    unint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__split_buffer(&v14);
  }
}

void sub_22E999EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  unint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>,std::reverse_iterator<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t xgboost::common::PartitionBuilder<2048ul>::AllocateForTask(uint64_t result, uint64_t a2)
{
  if (!*(void *)(*(void *)(result + 48) + 16 * a2)) {
    operator new();
  }
  return result;
}

void std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::reset[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::shared_ptr[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(&v2, a2);
}

void std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::shared_ptr[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E99A1EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x230FA80D0](v1, 0x1000C402BCDB82FLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::common::Index::operator[](uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v2 != v3) {
    return *(_DWORD *)(a1[3] + 4 * (a2 % ((v3 - v2) >> 2))) + ((unsigned int (*)(void))a1[7])(*a1);
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))a1[7];
  uint64_t v6 = *a1;

  return v5(v6);
}

uint64_t xgboost::common::BinarySearchBin<xgboost::common::Index>(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (a2 == a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = -1;
  do
  {
    uint64_t v12 = v11;
    uint64_t v11 = v10 + ((unint64_t)(v9 - v10) >> 1);
    if (v11 == v12) {
      break;
    }
    uint64_t result = xgboost::common::Index::operator[](a3, v10 + ((unint64_t)(v9 - v10) >> 1));
    if (result >= a4 && result < a5) {
      return result;
    }
    if (result < a4) {
      v10 += (unint64_t)(v9 - v10) >> 1;
    }
    else {
      uint64_t v9 = v10 + ((unint64_t)(v9 - v10) >> 1);
    }
  }
  while (v9 != v10);
  return 0xFFFFFFFFLL;
}

void *xgboost::common::PartitionBuilder<2048ul>::MergeToArray(void *result, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = 16 * (*(void *)(result[3] + 8 * a2) + (a3 >> 11));
  uint64_t v6 = *(void **)(result[6] + v5);
  uint64_t v7 = v6[3];
  if (*v6)
  {
    uint64_t v8 = result;
    uint64_t result = memmove((void *)(a4 + 8 * v6[2]), v6 + 4, 8 * *v6);
    uint64_t v9 = *(void *)(v8[6] + v5);
  }
  else
  {
    uint64_t v9 = *(void *)(result[6] + v5);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (v10)
  {
    return memmove((void *)(a4 + 8 * v7), v6 + 2052, 8 * v10);
  }
  return result;
}

void std::vector<xgboost::common::RowSetCollection::Elem>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost::common::RowSetCollection::Elem>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void dmlc::LogCheckFormat<unsigned long *,unsigned long const*>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E99A654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::RowSetCollection::Elem>::__append(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      long long v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        unint64_t v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    uint64_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    uint64_t v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    int v23 = &v14[24 * v13];
    uint64_t v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v24 - 2);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::exception_ptr v17[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[88 * v9];
  *(void *)unint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 1) = v12;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = v14;
  v17[2] = v11 + 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_22E99A954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E99AAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

void *std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E99ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, void *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = (uint64_t)(*(void *)(**(void **)(*a3 + 16 * i) + 8) - ***(void ***)(*a3 + 16 * i)) >> 2;
      if (v9 % a4) {
        uint64_t v10 = v9 / a4 + 1;
      }
      else {
        uint64_t v10 = v9 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E99AC90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::tree::CPUExpandEntry>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22E99AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = (unsigned int *)(**(void **)a1 + 88 * *(int *)(v8 + 184) * a2);
  unsigned int v10 = *v9;
  uint64_t v37 = (uint64_t)(v9 + 2);
  xgboost::common::HistCollection<float>::operator[](*(unsigned int **)(a1 + 16), *v9, v50);
  if (a3 < a4)
  {
    int v11 = v10;
    unint64_t v12 = **(uint64_t ***)(**(void **)(a1 + 24) + 16 * a2);
    uint64_t v13 = *v12;
    if (a3 <= (v12[1] - *v12) >> 2) {
      uint64_t v14 = (v12[1] - *v12) >> 2;
    }
    else {
      uint64_t v14 = a3;
    }
    uint64_t v38 = (xgboost::FeatureInteractionConstraintHost *)(v8 + 192);
    uint64_t v39 = v14;
    unint64_t v36 = a4;
    do
    {
      if (a3 == v39) {
LABEL_32:
      }
        std::terminate();
      unint64_t v15 = *(unsigned int *)(v13 + 4 * a3);
      uint64_t v16 = *(unint64_t **)(a1 + 32);
      if (*v16)
      {
        if (*v16 <= v15) {
          goto LABEL_32;
        }
        int v17 = *(unsigned __int8 *)(v16[1] + v15);
        if (!xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3))) {
          goto LABEL_30;
        }
        if (v17 != 1)
        {
LABEL_15:
          v41[0] = 0;
          v41[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(v8, *(void *)(a1 + 48), (uint64_t)v41, v50, v15, v11, *(void **)(a1 + 56), v37);
          long long v22 = (double *)(*(void *)(v8 + 296) + 24 * v11);
          if (v23 != *v22 || v21 != v22[1])
          {
            v40[0] = 0;
            v40[1] = 0;
            xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(v8, *(void *)(a1 + 48), (uint64_t)v40, v50, v15, v11, *(void **)(a1 + 56), v37);
          }
          goto LABEL_30;
        }
        uint64_t v18 = *(void **)(a1 + 40);
        unint64_t v19 = (v15 + 1);
        if (v19 >= (uint64_t)(v18[1] - *v18) >> 2) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v20 = (*(_DWORD *)(*v18 + 4 * v19) - *(_DWORD *)(*v18 + 4 * v15));
        if (v20 >= *(_DWORD *)(v8 + 28))
        {
          std::vector<unsigned long>::vector(&__p, v20);
          uint64_t v25 = (uint64_t *)__p;
          long long v26 = v47;
          if (__p != v47)
          {
            uint64_t v27 = 0;
            do
              *v25++ = v27++;
            while (v25 != v26);
          }
          xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(v50, *(unsigned int *)(**(void **)(a1 + 40) + 4 * v15), v20, v45);
          long long v31 = (unint64_t *)__p;
          uint64_t v30 = v47;
          v44[0] = *(void *)(a1 + 56);
          v44[1] = v8;
          void v44[2] = (uint64_t)v45;
          unint64_t v32 = ((char *)v47 - (unsigned char *)__p) >> 3;
          if ((char *)v47 - (unsigned char *)__p < 1025)
          {
            uint64_t v33 = 0;
            uint64_t v35 = 0;
          }
          else
          {
            uint64_t v33 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v47 - (unsigned char *)__p) >> 3);
            uint64_t v35 = v34;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v31, v30, v44, v32, v33, v35, v28, v29);
          if (v33) {
            operator delete(v33);
          }
          v43[0] = ((char *)v47 - (unsigned char *)__p) >> 3;
          v43[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(v8, *(void *)(a1 + 48), v43, v50, v15, v11, *(void **)(a1 + 56), v37);
          v42[0] = ((char *)v47 - (unsigned char *)__p) >> 3;
          v42[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(v8, *(void *)(a1 + 48), v42, v50, v15, v11, *(void **)(a1 + 56), v37);
          a4 = v36;
          if (__p)
          {
            unsigned int v47 = (uint64_t *)__p;
            operator delete(__p);
          }
        }
        else
        {
          v49[0] = 0;
          v49[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(v8, *(void *)(a1 + 48), (uint64_t)v49, v50, v15, v11, *(void **)(a1 + 56), v37);
          v48[0] = 0;
          v48[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(v8, *(void *)(a1 + 48), (uint64_t)v48, v50, v15, v11, *(void **)(a1 + 56), v37);
          a4 = v36;
        }
      }
      else if (xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
      {
        goto LABEL_15;
      }
LABEL_30:
      ++a3;
    }
    while (a3 != a4);
  }
}

void sub_22E99B1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    goto LABEL_30;
  }
  unsigned int v44 = *(void **)(a2 + 8);
  uint64_t v14 = *(void *)(a1 + 296);
  unint64_t v15 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v15, *(_DWORD *)(v10 + 4 * v9) - (int)v15, v49);
  uint64_t v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v47[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  unint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v47[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
LABEL_30:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  unint64_t v21 = *(int *)(v20 + 4 * a5);
  int v22 = *(_DWORD *)(v20 + 4 * v9);
  if (v22 != v21)
  {
    char v43 = 0;
    unsigned int v23 = 0;
    uint64_t v28 = v14 + 24 * a6;
    uint64_t v29 = 8 * v21;
    int v30 = v22 - v21;
    float v27 = 0.0;
    double v41 = 0.0;
    double v42 = 0.0;
    double v25 = 0.0;
    int v24 = 0;
    double v26 = 0.0;
    while (1)
    {
      if (*a4 <= v21) {
        std::terminate();
      }
      long long v31 = (float *)(a4[1] + v29);
      float v32 = v31[1];
      double v33 = v32;
      v17.i64[0] = *(void *)(v28 + 8);
      double v34 = *(double *)v17.i64 - v32;
      v17.i32[0] = *(_DWORD *)(a1 + 32);
      if (v32 < *(float *)v17.i32 || v34 < *(float *)v17.i32) {
        goto LABEL_19;
      }
      double v36 = *v31;
      v16.i64[0] = *(void *)v28;
      double v37 = *(double *)v28 - v36;
      v48[0] = v37;
      v48[1] = v34;
      v47[0] = v36;
      v47[1] = v33;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, v48, v47, v16, v17);
      *(float *)v16.i32 = *(double *)v16.i64 - *(float *)(v28 + 16);
      if (fabsf(*(float *)v16.i32) == INFINITY) {
        goto LABEL_19;
      }
      if ((v23 & 0x7FFFFFFF) > a5) {
        break;
      }
      if (v27 < *(float *)v16.i32) {
        goto LABEL_18;
      }
LABEL_19:
      ++v21;
      v29 += 8;
      if (!--v30) {
        goto LABEL_20;
      }
    }
    if (v27 > *(float *)v16.i32) {
      goto LABEL_19;
    }
LABEL_18:
    char v43 = 1;
    double v41 = v36;
    double v42 = v33;
    double v25 = v34;
    double v26 = v37;
    int v24 = *(_DWORD *)(*v44 + 4 * v21);
    float v27 = *(float *)v16.i32;
    unsigned int v23 = a5;
    goto LABEL_19;
  }
  char v43 = 0;
  unsigned int v23 = 0;
  int v24 = 0;
  double v25 = 0.0;
  double v41 = 0.0;
  double v42 = 0.0;
  double v26 = 0.0;
  float v27 = 0.0;
LABEL_20:
  if (fabsf(v27) != INFINITY)
  {
    float v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v23 & 0x7FFFFFFF))
    {
      if (v38 > v27) {
        return 0.0;
      }
      goto LABEL_27;
    }
    if (v38 < v27)
    {
LABEL_27:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v23;
      *(_DWORD *)(a8 + 8) = v24;
      *(unsigned char *)(a8 + 40) = v43;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v26;
      *(double *)(a8 + 56) = v25;
      *(double *)(a8 + 64) = v41;
      *(double *)(a8 + 72) = v42;
    }
  }
  return 0.0;
}

void sub_22E99B654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
}

double xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v45 = *(void **)(a2 + 8);
  uint64_t v14 = *(void *)(a1 + 296);
  unint64_t v15 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v15, *(_DWORD *)(v10 + 4 * v9) - (int)v15, v50);
  uint64_t v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v48[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  unint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v48[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = *(int *)(*v8 + 4 * v9);
  int v21 = *(_DWORD *)(*v8 + 4 * a5);
  if (v21 != v20)
  {
    char v44 = 0;
    unsigned int v22 = 0;
    uint64_t v27 = v14 + 24 * a6;
    uint64_t v28 = 8 * v20;
    int v29 = v21 - v20;
    unint64_t v30 = v20 - 1;
    float v26 = 0.0;
    double v42 = 0.0;
    double v43 = 0.0;
    double v24 = 0.0;
    int v23 = 0;
    double v25 = 0.0;
    while (1)
    {
      if (*a4 <= v30) {
        std::terminate();
      }
      uint64_t v31 = a4[1] + v28;
      float v32 = *(float *)(v31 - 4);
      double v33 = v32;
      v17.i64[0] = *(void *)(v27 + 8);
      double v34 = *(double *)v17.i64 - v32;
      v17.i32[0] = *(_DWORD *)(a1 + 32);
      if (v32 < *(float *)v17.i32 || v34 < *(float *)v17.i32) {
        goto LABEL_18;
      }
      double v36 = *(float *)(v31 - 8);
      v16.i64[0] = *(void *)v27;
      double v37 = *(double *)v27 - v36;
      v49[0] = v36;
      v49[1] = v33;
      v48[0] = v37;
      v48[1] = v34;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, v49, v48, v16, v17);
      *(float *)v16.i32 = *(double *)v16.i64 - *(float *)(v27 + 16);
      if (fabsf(*(float *)v16.i32) == INFINITY) {
        goto LABEL_18;
      }
      if ((v22 & 0x7FFFFFFF) > a5) {
        break;
      }
      if (v26 < *(float *)v16.i32) {
        goto LABEL_17;
      }
LABEL_18:
      v28 -= 8;
      --v30;
      if (__CFADD__(v29++, 1)) {
        goto LABEL_20;
      }
    }
    if (v26 > *(float *)v16.i32) {
      goto LABEL_18;
    }
LABEL_17:
    char v44 = 1;
    double v42 = v37;
    double v43 = v34;
    double v24 = v33;
    double v25 = v36;
    int v23 = *(_DWORD *)(*v45 + 4 * v30);
    float v26 = *(float *)v16.i32;
    unsigned int v22 = a5 | 0x80000000;
    goto LABEL_18;
  }
  char v44 = 0;
  unsigned int v22 = 0;
  int v23 = 0;
  double v24 = 0.0;
  double v42 = 0.0;
  double v43 = 0.0;
  double v25 = 0.0;
  float v26 = 0.0;
LABEL_20:
  if (fabsf(v26) != INFINITY)
  {
    float v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v22 & 0x7FFFFFFF))
    {
      if (v39 > v26) {
        return 0.0;
      }
      goto LABEL_27;
    }
    if (v39 < v26)
    {
LABEL_27:
      *(float *)a8 = v26;
      *(_DWORD *)(a8 + 4) = v22;
      *(_DWORD *)(a8 + 8) = v23;
      *(unsigned char *)(a8 + 40) = v44;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v25;
      *(double *)(a8 + 56) = v24;
      *(double *)(a8 + 64) = v42;
      *(double *)(a8 + 72) = v43;
    }
  }
  return 0.0;
}

void sub_22E99BADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
}

void *xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan@<X0>(void *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2) {
      goto LABEL_8;
    }
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  uint64_t v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 8 * a2;
  if (a3 && !v4) {
LABEL_8:
  }
    std::terminate();
  return result;
}

__n128 xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v48 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  unint64_t v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, v17, v64);
  unint64_t v58 = 0;
  int v59 = 0;
  memset(&__p, 0, sizeof(__p));
  char v61 = 0;
  v18.f64[1] = 0.0;
  int64x2_t v62 = 0u;
  float64x2_t v63 = 0u;
  unint64_t v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v56.f64[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v56.f64[0]) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v21 = *v8;
  uint64_t v22 = v8[1];
  uint64_t v23 = *(int *)(*v8 + 4 * a5);
  int v57 = *(_DWORD *)(*v8 + 4 * a5);
  if (v9 >= (v22 - v21) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v24 = *(_DWORD *)(v21 + 4 * v9);
  if (v24 == v23)
  {
    unsigned int v25 = 0;
    float v26 = 0.0;
    v18.f64[0] = 0.0;
    float64x2_t v52 = v18;
    goto LABEL_24;
  }
  uint64_t v45 = a8;
  unint64_t v27 = 0;
  unsigned int v25 = 0;
  uint64_t v28 = v15 + 24 * a6;
  int v44 = v23;
  int v29 = v24 - v23;
  int v46 = v23;
  uint64_t v30 = 4 * v23;
  float64x2_t v31 = 0uLL;
  int v47 = -1;
  float v26 = 0.0;
  do
  {
    if (*a3 <= v27) {
      goto LABEL_35;
    }
    unint64_t v32 = *(void *)(a3[1] + 8 * v27);
    if (v64[0] <= v32) {
      goto LABEL_35;
    }
    float64x2_t v31 = vaddq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)(v64[1] + 8 * v32)));
    int64x2_t v33 = (int64x2_t)vsubq_f64(*(float64x2_t *)v28, v31);
    float64x2_t v34 = (float64x2_t)vzip2q_s64(v33, (int64x2_t)v31);
    int64x2_t v35 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v35.i8 = vmovn_s64(v35);
    *(int32x2_t *)&v34.f64[0] = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)&v34.f64[0]);
    if ((v35.i8[0] & 1) == 0)
    {
      int64x2_t v51 = v33;
      float64x2_t v53 = v31;
      *(int64x2_t *)std::vector<unsigned int>::value_type __x = v33;
      float64x2_t v56 = v31;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, v56.f64, (int8x16_t)v35, (int8x16_t)v34);
      float v37 = v36 - *(float *)(v28 + 16);
      if (fabsf(v37) == INFINITY)
      {
        float64x2_t v31 = v53;
        goto LABEL_18;
      }
      int v38 = *(_DWORD *)(*v48 + v30 + 4 * v27);
      float64x2_t v31 = v53;
      if ((v25 & 0x7FFFFFFF) <= a5)
      {
        int64x2_t v39 = v51;
        if (v26 >= v37) {
          goto LABEL_18;
        }
LABEL_17:
        unint64_t v58 = __PAIR64__(a5, LODWORD(v37));
        int v59 = v38;
        char v61 = 1;
        int v47 = v46 + v27;
        float v26 = v37;
        unsigned int v25 = a5;
        int64x2_t v62 = v39;
        float64x2_t v63 = v53;
        goto LABEL_18;
      }
      int64x2_t v39 = v51;
      if (v26 <= v37) {
        goto LABEL_17;
      }
    }
LABEL_18:
    ++v27;
  }
  while (v29 != v27);
  float64x2_t v52 = v31;
  a8 = v45;
  if (v47 != -1)
  {
    __x[0] = 0;
    std::vector<unsigned int>::resize(&__p, vcvtpd_u64_f64((double)v17 * 0.03125), __x);
    *(void *)&v56.f64[0] = __p.__end_ - __p.__begin_;
    *(void *)&v56.f64[1] = __p.__begin_;
    int v40 = v47 - v44 + 1;
    if (*a3 < v40) {
LABEL_35:
    }
      std::terminate();
    v55[0] = &v56;
    v55[1] = v48;
    void v55[2] = &v57;
    std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>(a3, 0, a3, v40, (uint64_t)v55, (uint64_t)__x);
    float v26 = *(float *)&v58;
    unsigned int v25 = HIDWORD(v58);
  }
LABEL_24:
  if (fabsf(v26) != INFINITY)
  {
    float v41 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFF))
    {
      if (v41 >= v26) {
        goto LABEL_32;
      }
    }
    else if (v41 > v26)
    {
      goto LABEL_32;
    }
    *(float *)a8 = v26;
    *(_DWORD *)(a8 + 4) = v25;
    *(_DWORD *)(a8 + 8) = v59;
    *(unsigned char *)(a8 + 40) = v61;
    if (&v58 != (unint64_t *)a8) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    }
    float64x2_t v42 = v63;
    *(int64x2_t *)(a8 + 48) = v62;
    *(float64x2_t *)(a8 + 64) = v42;
  }
LABEL_32:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return (__n128)v52;
}

void sub_22E99C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float64_t xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  unsigned int v70 = a5;
  uint64_t v8 = *(void **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (uint64_t)(v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v47 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  unint64_t v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, v17, v69);
  uint64_t v63 = 0;
  __int32 v64 = 0;
  memset(&v65, 0, sizeof(v65));
  char v66 = 0;
  float64x2_t v67 = 0u;
  long long v68 = 0u;
  unint64_t v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v61) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v61) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int v21 = *(_DWORD *)(*v8 + 4 * v9);
  uint64_t v22 = *(int *)(*v8 + 4 * a5);
  if (v21 == v22)
  {
    unsigned int v23 = 0;
    float v24 = 0.0;
    v25.f64[0] = 0.0;
    goto LABEL_24;
  }
  unint64_t v44 = v17;
  uint64_t v45 = a8;
  unint64_t v26 = 0;
  unsigned int v23 = 0;
  uint64_t v27 = v15 + 24 * a6;
  double v43 = v8;
  uint64_t v28 = v21 - 1 - v22 + 1;
  uint64_t v29 = 4 * (v21 - 1);
  float64x2_t v25 = 0uLL;
  int v46 = -1;
  float v24 = 0.0;
  int v42 = v21 - 1;
  int v30 = v21 - 1;
  do
  {
    if (*a3 <= v26) {
      goto LABEL_37;
    }
    unint64_t v31 = *(void *)(a3[1] + 8 * v26);
    if (v69[0] <= v31) {
      goto LABEL_37;
    }
    int8x16_t v33 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v69[1] + 8 * v31));
    float64x2_t v25 = vaddq_f64(v25, (float64x2_t)v33);
    double v32 = *(double *)(v27 + 8) - v25.f64[1];
    *(double *)v33.i64 = *(float *)(a1 + 32);
    if (v32 >= *(double *)v33.i64 && v25.f64[1] >= *(double *)v33.i64)
    {
      v33.i64[0] = *(void *)v27;
      double v35 = *(double *)v27 - v25.f64[0];
      float64x2_t v50 = v25;
      *(float64x2_t *)std::vector<unsigned int>::value_type __x = v25;
      int64_t v61 = *(void *)&v35;
      std::vector<unsigned int>::pointer begin = *(std::vector<unsigned int>::pointer *)&v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, (double *)&v61, v33, v18);
      *(double *)v18.i64 = *(float *)(v27 + 16);
      float v37 = v36 - *(double *)v18.i64;
      *(float *)v18.i32 = fabsf(v37);
      if (*(float *)v18.i32 == INFINITY)
      {
        float64x2_t v25 = v50;
        goto LABEL_20;
      }
      v18.i32[0] = *(_DWORD *)(*v47 + v29);
      float64x2_t v25 = v50;
      if ((v23 & 0x7FFFFFFF) <= a5)
      {
        if (v24 >= v37) {
          goto LABEL_20;
        }
LABEL_19:
        *(float *)&uint64_t v63 = v37;
        unsigned int v23 = a5 | 0x80000000;
        HIDWORD(v63) = a5 | 0x80000000;
        __int32 v64 = v18.i32[0];
        char v66 = 1;
        float64x2_t v67 = v50;
        float v24 = v37;
        int v46 = v30;
        *(double *)&long long v68 = v35;
        *((double *)&v68 + 1) = v32;
        goto LABEL_20;
      }
      if (v24 <= v37) {
        goto LABEL_19;
      }
    }
LABEL_20:
    ++v26;
    --v30;
    v29 -= 4;
  }
  while (v28 != v26);
  a8 = v45;
  if (v46 != -1)
  {
    float64_t v51 = v25.f64[0];
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v65, vcvtpd_u64_f64((double)v44 * 0.03125), __x);
    int64_t v61 = v65.__end_ - v65.__begin_;
    std::vector<unsigned int>::pointer begin = v65.__begin_;
    unint64_t v38 = *a3;
    v60[0] = a3;
    v60[1] = v38;
    _OWORD v60[2] = a3;
    v60[3] = v38;
    if (v38 < v42 - v46) {
LABEL_37:
    }
      std::terminate();
    float64x2_t v56 = a3;
    unint64_t v57 = v38 - (v42 - v46);
    unint64_t v58 = a3;
    unint64_t v59 = v57;
    v55[0] = &v61;
    v55[1] = v47;
    void v55[2] = v43;
    void v55[3] = &v70;
    std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>((uint64_t)v60, (uint64_t)&v56, (uint64_t)v55, __x);
    float v24 = *(float *)&v63;
    unsigned int v23 = HIDWORD(v63);
    v25.f64[0] = v51;
  }
LABEL_24:
  if (fabsf(v24) != INFINITY)
  {
    float v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v23 & 0x7FFFFFFF))
    {
      if (v39 >= v24) {
        goto LABEL_34;
      }
    }
    else if (v39 > v24)
    {
      goto LABEL_34;
    }
    *(float *)a8 = v24;
    *(_DWORD *)(a8 + 4) = v23;
    *(_DWORD *)(a8 + 8) = v64;
    *(unsigned char *)(a8 + 40) = v66;
    if (&v63 != (uint64_t *)a8)
    {
      float64_t v52 = v25.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)v65.__begin_, (uint64_t)v65.__end_, v65.__end_ - v65.__begin_);
      v25.f64[0] = v52;
    }
    long long v40 = v68;
    *(float64x2_t *)(a8 + 48) = v67;
    *(_OWORD *)(a8 + 64) = v40;
  }
LABEL_34:
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    float64_t v53 = v25.f64[0];
    operator delete(v65.__begin_);
    v25.f64[0] = v53;
  }
  return v25.f64[0];
}

void sub_22E99C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  long long v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(void *)(v38 - 208) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    goto LABEL_31;
  }
  float v41 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v46);
  unint64_t v17 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v44[0]) = 0x7FFFFFFF;
  if ((*v17 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int8x16_t v18 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v44[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v19 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
LABEL_31:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  unint64_t v20 = *(int *)(v19 + 4 * a5);
  int v21 = *(_DWORD *)(v19 + 4 * v9);
  if (v21 != v20)
  {
    unsigned int v22 = 0;
    int8x16_t v28 = 0uLL;
    uint64_t v29 = v15 + 24 * a6;
    int v30 = v21 - v20;
    float v27 = 0.0;
    double v40 = 0.0;
    double v25 = 0.0;
    uint64_t v24 = 0;
    int v23 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      if (*a4 <= v20) {
        std::terminate();
      }
      int8x16_t v33 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a4[1] + 8 * v20));
      int8x16_t v28 = (int8x16_t)vaddq_f64((float64x2_t)v28, (float64x2_t)v33);
      uint64_t v31 = v28.i64[1];
      double v32 = *(double *)(v29 + 8) - *(double *)&v28.i64[1];
      *(double *)v33.i64 = *(float *)(a1 + 32);
      if (*(double *)&v28.i64[1] < *(double *)v33.i64 || v32 < *(double *)v33.i64) {
        goto LABEL_20;
      }
      v33.i64[0] = *(void *)v29;
      double v35 = *(double *)v29 - *(double *)v28.i64;
      int8x16_t v43 = v28;
      int8x16_t v45 = v28;
      v44[0] = v35;
      v44[1] = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v45.i64, v44, v28, v33);
      float v37 = v36 - *(float *)(v29 + 16);
      if (fabsf(v37) == INFINITY)
      {
        int8x16_t v28 = v43;
      }
      else
      {
        if ((v22 & 0x7FFFFFFF) > a5)
        {
          int8x16_t v28 = v43;
          if (v27 > v37) {
            goto LABEL_20;
          }
LABEL_19:
          double v40 = v32;
          double v25 = v35;
          uint64_t v24 = v31;
          uint64_t v26 = v28.i64[0];
          int v23 = *(_DWORD *)(*v41 + 4 * v20);
          float v27 = v37;
          unsigned int v22 = a5;
          goto LABEL_20;
        }
        int8x16_t v28 = v43;
        if (v27 < v37) {
          goto LABEL_19;
        }
      }
LABEL_20:
      ++v20;
      if (!--v30) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  double v25 = 0.0;
  double v40 = 0.0;
  uint64_t v26 = 0;
  float v27 = 0.0;
LABEL_21:
  if (fabsf(v27) != INFINITY)
  {
    float v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v22 & 0x7FFFFFFF))
    {
      if (v38 >= v27) {
        return;
      }
    }
    else if (v38 > v27)
    {
      return;
    }
    *(float *)a8 = v27;
    *(_DWORD *)(a8 + 4) = v22;
    *(_DWORD *)(a8 + 8) = v23;
    *(unsigned char *)(a8 + 40) = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
    *(void *)(a8 + 48) = v26;
    *(void *)(a8 + 56) = v24;
    *(double *)(a8 + 64) = v25;
    *(double *)(a8 + 72) = v40;
  }
}

void sub_22E99CB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
}

float64_t xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v48 = *(void **)(a2 + 8);
  uint64_t v16 = *(void *)(a1 + 296);
  unint64_t v17 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v17, *(_DWORD *)(v10 + 4 * v9) - (int)v17, v56);
  int8x16_t v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v54.f64[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v54.f64[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int v20 = *(_DWORD *)(*v8 + 4 * a5);
  uint64_t v21 = *(int *)(*v8 + 4 * v9);
  if (v21 == v20)
  {
    unsigned int v47 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    float64_t v24 = 0.0;
    float64_t v25 = 0.0;
    uint64_t v26 = 0;
    float v27 = 0.0;
    v28.f64[0] = 0.0;
    goto LABEL_22;
  }
  uint64_t v29 = a2;
  uint64_t v46 = a8;
  uint64_t v30 = v16;
  uint64_t v31 = (float64x2_t *)(v16 + 24 * a6);
  float64x2_t v28 = 0uLL;
  double v32 = (float *)(v30 + 24 * a6 + 16);
  unsigned int v47 = 0;
  unint64_t v33 = v21 - 1;
  float v27 = 0.0;
  float64_t v25 = 0.0;
  float64_t v24 = 0.0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v26 = 0;
  do
  {
    if (*a4 <= v33) {
      std::terminate();
    }
    LODWORD(v21) = v21 - 1;
    float64x2_t v28 = vaddq_f64(v28, vcvtq_f64_f32(*(float32x2_t *)(a4[1] + 8 * v33)));
    int64x2_t v34 = (int64x2_t)vsubq_f64(*v31, v28);
    int8x16_t v35 = (int8x16_t)vzip2q_s64(v34, (int64x2_t)v28);
    int64x2_t v36 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v36.i8 = vmovn_s64(v36);
    if ((v36.i32[1] | v36.i32[0]))
    {
      int v37 = v33;
      goto LABEL_20;
    }
    int64x2_t v51 = v34;
    float64x2_t v52 = v28;
    float64x2_t v54 = v28;
    int64x2_t v55 = v34;
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v55.i64, v54.f64, (int8x16_t)v36, v35);
    float v39 = v38 - *v32;
    unint64_t v40 = v33 - 1;
    float v41 = *(void **)(v29 + 24);
    if (v20 == v33) {
      unint64_t v40 = a5;
    }
    else {
      float v41 = v48;
    }
    if (fabsf(v39) == INFINITY)
    {
      int v37 = v21;
      float64x2_t v28 = v52;
      goto LABEL_20;
    }
    int v42 = *(_DWORD *)(*v41 + 4 * v40);
    if ((v47 & 0x7FFFFFFF) <= a5)
    {
      int64x2_t v43 = v51;
      float64x2_t v28 = v52;
      if (v27 >= v39)
      {
LABEL_17:
        int v37 = v21;
        goto LABEL_20;
      }
    }
    else
    {
      int64x2_t v43 = v51;
      float64x2_t v28 = v52;
      if (v27 > v39) {
        goto LABEL_17;
      }
    }
    uint64_t v23 = v43.i64[1];
    int v37 = v21;
    float64_t v25 = v28.f64[1];
    float64_t v24 = v28.f64[0];
    uint64_t v26 = v43.i64[0];
    int v22 = v42;
    float v27 = v39;
    unsigned int v47 = a5 | 0x80000000;
LABEL_20:
    --v33;
  }
  while (v37 != v20);
  a8 = v46;
LABEL_22:
  if (fabsf(v27) != INFINITY)
  {
    float v44 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v47 & 0x7FFFFFFF))
    {
      if (v44 < v27) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v44 > v27) {
        return v28.f64[0];
      }
LABEL_29:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v47;
      *(_DWORD *)(a8 + 8) = v22;
      *(unsigned char *)(a8 + 40) = 0;
      float64_t v53 = v28.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      v28.f64[0] = v53;
      *(void *)(a8 + 48) = v26;
      *(void *)(a8 + 56) = v23;
      *(float64_t *)(a8 + 64) = v24;
      *(float64_t *)(a8 + 72) = v25;
    }
  }
  return v28.f64[0];
}

void sub_22E99D04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, int8x16_t a7, int8x16_t a8)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v11 = *(a2 - 1);
      unint64_t v12 = (unint64_t *)a3[2];
      if (*v12 <= v11
        || (unint64_t v13 = *a1,
            uint64_t v14 = a3[1],
            *(double *)v15.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a3, v14, (float *)(v12[1] + 8 * v11)), unint64_t v17 = (unint64_t *)a3[2], *v17 <= v13))
      {
        std::terminate();
      }
      if (*(double *)v15.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v15, v16, *a3, v14, (float *)(v17[1] + 8 * v13)))
      {
        unint64_t v18 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v18;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = (uint64_t *)&a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a7, a8);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v22], v27, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>((unint64_t *)a5, (unint64_t *)&a5[v22], &a5[v22], &a5[a4], a1, a3, v29, v30);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v25, v26);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, (unint64_t *)a2, a3, a7, a8);
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, int8x16_t a4, int8x16_t a5)
{
  if (a1 != a2)
  {
    std::mutex v7 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a1;
      do
      {
        unint64_t v11 = v7;
        unint64_t v12 = *v7;
        unint64_t v13 = (unint64_t *)a3[2];
        if (*v13 <= v12
          || (unint64_t v14 = *v10,
              uint64_t v15 = a3[1],
              *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *a3, v15, (float *)(v13[1] + 8 * v12)), unint64_t v18 = (unint64_t *)a3[2], *v18 <= v14))
        {
LABEL_17:
          std::terminate();
        }
        double v19 = *(double *)v16.i64;
        *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v16, v17, *a3, v15, (float *)(v18[1] + 8 * v14));
        if (v19 < *(double *)a4.i64)
        {
          unint64_t v20 = *v11;
          uint64_t v21 = v9;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v21 + 8) = *(unint64_t *)((char *)a1 + v21);
            if (!v21) {
              break;
            }
            unint64_t v22 = (unint64_t *)a3[2];
            if (*v22 <= v20) {
              goto LABEL_17;
            }
            unint64_t v23 = *(unint64_t *)((char *)a1 + v21 - 8);
            uint64_t v24 = a3[1];
            *(double *)v25.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *a3, v24, (float *)(v22[1] + 8 * v20));
            int8x16_t v27 = (unint64_t *)a3[2];
            if (*v27 <= v23) {
              goto LABEL_17;
            }
            double v28 = *(double *)v25.i64;
            *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v25, v26, *a3, v24, (float *)(v27[1] + 8 * v23));
            v21 -= 8;
            if (v28 >= *(double *)a4.i64)
            {
              int8x16_t v29 = (unint64_t *)((char *)a1 + v21 + 8);
              goto LABEL_14;
            }
          }
          int8x16_t v29 = a1;
LABEL_14:
          *int8x16_t v29 = v20;
        }
        std::mutex v7 = v11 + 1;
        v9 += 8;
        uint64_t v10 = v11;
      }
      while (v11 + 1 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, int8x16_t a6, int8x16_t a7)
{
  if (a4)
  {
    if (a4 == 2)
    {
      unint64_t v12 = *(a2 - 1);
      unint64_t v13 = (unint64_t *)a3[2];
      if (*v13 <= v12
        || (unint64_t v14 = *a1,
            uint64_t v15 = a3[1],
            *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a6, a7, *a3, v15, (float *)(v13[1] + 8 * v12)), unint64_t v18 = (unint64_t *)a3[2], *v18 <= v14))
      {
        std::terminate();
      }
      if (*(double *)v16.i64 >= xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v16, v17, *a3, v15, (float *)(v18[1] + 8 * v14)))
      {
        *a5 = *a1;
        unint64_t v19 = *(a2 - 1);
      }
      else
      {
        *a5 = *(a2 - 1);
        unint64_t v19 = *a1;
      }
      a5[1] = v19;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], (uint64_t *)&a1[a4 >> 1], a2, a5, a3, v20, v21);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((uint64_t *)a1, a2, a5, a3, a6, a7);
    }
  }
}

void std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      uint64_t v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    unint64_t v13 = a1;
    while (a3 != a4)
    {
      unint64_t v14 = (void *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (unint64_t v15 = *v13,
            uint64_t v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 < *(double *)a7.i64) {
        int8x16_t v21 = a3;
      }
      else {
        int8x16_t v21 = v13;
      }
      v13 += v20 >= *(double *)a7.i64;
      a3 += v20 < *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2) {
        goto LABEL_12;
      }
    }
    if (v13 != a2)
    {
      uint64_t v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if (a6)
  {
    uint64_t v11 = a6;
    do
    {
      if (a5 <= a8 || v11 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v11, a7, a9, a10);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        int8x16_t v18 = (void *)a4[2];
        if (*v18 <= *(void *)a2
          || (unint64_t v19 = *(void *)&a1[8 * v17],
              uint64_t v20 = a4[1],
              *(double *)v21.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a9, a10, *a4, v20, (float *)(v18[1] + 8 * *(void *)a2)), uint64_t v23 = (unint64_t *)a4[2], *v23 <= v19))
        {
          std::terminate();
        }
        double v24 = *(double *)v21.i64;
        *(double *)a9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v21, v22, *a4, v20, (float *)(v23[1] + 8 * v19));
        if (v24 < *(double *)a9.i64) {
          break;
        }
        ++v17;
        v16 -= 8;
        if (a5 == v17) {
          return;
        }
      }
      float v39 = &a1[-v16];
      uint64_t v40 = a8;
      if (a5 - v17 >= v11)
      {
        if (a5 - 1 == v17)
        {
          uint64_t v36 = *(void *)&a1[8 * v17];
          *(void *)&a1[8 * v17] = *(void *)a2;
          *(void *)a2 = v36;
          return;
        }
        uint64_t v30 = (a5 - v17) / 2;
        int8x16_t v43 = *(int8x16_t *)a4;
        int8x16_t v29 = (unint64_t *)&a1[8 * v30 - v16];
        uint64_t v44 = a4[2];
        char v45 = 0;
        double v38 = (char *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(a2, a3, v29, v43.i64, v43, a10);
        uint64_t v26 = (v38 - a2) >> 3;
      }
      else
      {
        if (v11 >= 0) {
          uint64_t v25 = v11;
        }
        else {
          uint64_t v25 = v11 + 1;
        }
        uint64_t v26 = v25 >> 1;
        double v38 = &a2[8 * (v25 >> 1)];
        int8x16_t v27 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(&a1[-v16], a2, v38, a4, a9, a10);
        uint64_t v28 = v27 - a1 + v16;
        int8x16_t v29 = (unint64_t *)v27;
        uint64_t v30 = v28 >> 3;
      }
      uint64_t v37 = a5 - v30 - v17;
      uint64_t v31 = v11 - v26;
      double v32 = a2;
      a2 = v38;
      unint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)v29, v32, v38);
      a1 = v33;
      if (v30 + v26 >= v11 + a5 - (v30 + v26) - v17)
      {
        int8x16_t v35 = v33;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v33, v38, a3, a4, v37, v11 - v26, a7, v40);
        a1 = v39;
        a2 = (char *)v29;
        uint64_t v31 = v26;
        a5 = v30;
        a8 = v40;
        a3 = v35;
      }
      else
      {
        uint64_t v34 = v30;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v29, v33, a4, v34, v26, a7, v40);
        a5 = v37;
      }
      uint64_t v11 = v31;
    }
    while (v31);
  }
}

double xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  float v5 = a5[1];
  a1.i64[0] = 0;
  if (v5 > 0.0 && *(float *)(a4 + 32) <= v5)
  {
    float v7 = *a5;
    float v8 = *(float *)(a4 + 40);
    if (v8 >= *a5)
    {
      float v9 = 0.0;
      if (v7 < (float)-v8) {
        float v9 = v7 + v8;
      }
    }
    else
    {
      float v9 = v7 - v8;
    }
    *(float *)a1.i32 = (float)-v9 / (float)(v5 + *(float *)(a4 + 36));
    a2.i32[0] = *(_DWORD *)(a4 + 44);
    BOOL v10 = fabsf(*(float *)a1.i32) <= *(float *)a2.i32 || *(float *)a2.i32 == 0.0;
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    LODWORD(v12) = vbslq_s8(v11, a2, a1).u32[0];
    if (!v10) {
      *(float *)a1.i32 = v12;
    }
    *(double *)a1.i64 = *(float *)a1.i32;
  }
  return *(double *)a1.i64;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a1 != a2)
  {
    float v8 = a1 + 1;
    *a3 = *a1;
    if (a1 + 1 != a2)
    {
      uint64_t v10 = 0;
      int8x16_t v11 = a3;
      do
      {
        float v12 = (void *)a4[2];
        if (*v12 <= (unint64_t)*v8
          || (unint64_t v13 = v11,
              unint64_t v15 = *v11,
              ++v11,
              unint64_t v14 = v15,
              uint64_t v16 = a4[1],
              *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v16, (float *)(v12[1] + 8 * *v8)), unint64_t v19 = (unint64_t *)a4[2], *v19 <= v15))
        {
LABEL_17:
          std::terminate();
        }
        double v20 = *(double *)v17.i64;
        *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a4, v16, (float *)(v19[1] + 8 * v14));
        int8x16_t v21 = v11;
        if (v20 < *(double *)a5.i64)
        {
          v13[1] = *v13;
          int8x16_t v21 = a3;
          if (v13 != a3)
          {
            uint64_t v22 = v10;
            while (1)
            {
              uint64_t v23 = (void *)a4[2];
              if (*v23 <= (unint64_t)*v8) {
                goto LABEL_17;
              }
              unint64_t v24 = *(uint64_t *)((char *)a3 + v22 - 8);
              uint64_t v25 = a4[1];
              *(double *)v26.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v25, (float *)(v23[1] + 8 * *v8));
              uint64_t v28 = (unint64_t *)a4[2];
              if (*v28 <= v24) {
                goto LABEL_17;
              }
              double v29 = *(double *)v26.i64;
              *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v26, v27, *a4, v25, (float *)(v28[1] + 8 * v24));
              if (v29 >= *(double *)a5.i64) {
                break;
              }
              *(uint64_t *)((char *)a3 + v22) = *(uint64_t *)((char *)a3 + v22 - 8);
              v22 -= 8;
              if (!v22)
              {
                int8x16_t v21 = a3;
                goto LABEL_15;
              }
            }
            int8x16_t v21 = (uint64_t *)((char *)a3 + v22);
          }
        }
LABEL_15:
        uint64_t v30 = *v8++;
        uint64_t *v21 = v30;
        v10 += 8;
      }
      while (v8 != a2);
    }
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      uint64_t v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    unint64_t v13 = a1;
    while (a3 != a4)
    {
      unint64_t v14 = (void *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (unint64_t v15 = *v13,
            uint64_t v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 >= *(double *)a7.i64) {
        int8x16_t v21 = v13;
      }
      else {
        int8x16_t v21 = a3;
      }
      a3 += v20 < *(double *)a7.i64;
      v13 += v20 >= *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2) {
        goto LABEL_12;
      }
    }
    if (v13 != a2)
    {
      uint64_t v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src, int8x16_t a8, int8x16_t a9)
{
  if (a5 <= a6)
  {
    unint64_t v14 = __src;
    if (__dst != a2)
    {
      unint64_t v14 = __src;
      unint64_t v15 = __dst;
      do
      {
        uint64_t v16 = *(void *)v15;
        v15 += 8;
        *(void *)unint64_t v14 = v16;
        v14 += 8;
      }
      while (v15 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(__src, v14, a2, a3, __dst, a4, a8, a9);
  }
  else
  {
    int8x16_t v11 = __src;
    if (a2 != a3)
    {
      int8x16_t v11 = __src;
      float v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        *(void *)int8x16_t v11 = v13;
        v11 += 8;
      }
      while (v12 != a3);
    }
    int8x16_t v17 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a8, a9, (uint64_t)v11, (uint64_t)v11, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)__dst, (uint64_t)__dst, (uint64_t)a3, (uint64_t)a3, &v17);
  }
}

void *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(void *a1, void *a2, void *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a2 != a1)
  {
    float v8 = a1;
    unint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = (void *)a4[2];
      if (*v10 <= *a3
        || (int8x16_t v11 = &v8[v9 >> 1],
            unint64_t v12 = *v11,
            uint64_t v13 = a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v13, (float *)(v10[1] + 8 * *a3)), uint64_t v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      double v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v14, v15, *a4, v13, (float *)(v16[1] + 8 * v12));
      if (v17 < *(double *)a5.i64)
      {
        v9 >>= 1;
      }
      else
      {
        float v8 = v11 + 1;
        v9 += ~(v9 >> 1);
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3, char *a4, void *__dst, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (__src != a2)
  {
    uint64_t v13 = __src;
    while (a3 != a4)
    {
      int8x16_t v14 = (void *)a6[2];
      if (*v14 <= *(void *)a3
        || (unint64_t v15 = *(void *)v13,
            uint64_t v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *(void *)a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 >= *(double *)a7.i64) {
        int8x16_t v21 = v13;
      }
      else {
        int8x16_t v21 = a3;
      }
      a3 += 8 * (v20 < *(double *)a7.i64);
      v13 += 8 * (v20 >= *(double *)a7.i64);
      *__dst++ = *(void *)v21;
      if (v13 == a2) {
        return;
      }
    }
    memmove(__dst, v13, a2 - v13);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13)
{
  if (a4 != a6)
  {
    uint64_t v16 = a4;
    int8x16_t v17 = (void *)(a12 - 8);
    while (a8 != a10)
    {
      BOOL v18 = std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(a13, (unint64_t *)(a8 - 8), (void *)(v16 - 8), a1, a2);
      if (v18) {
        uint64_t v19 = a8;
      }
      else {
        uint64_t v19 = v16;
      }
      if (v18) {
        a8 -= 8;
      }
      else {
        v16 -= 8;
      }
      *v17-- = *(void *)(v19 - 8);
      if (v16 == a6) {
        return;
      }
    }
    uint64_t v20 = 0;
    do
    {
      v17[v20] = *(void *)(v16 + v20 * 8 - 8);
      --v20;
    }
    while (v16 + v20 * 8 != a6);
  }
}

BOOL std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(uint64_t **a1, unint64_t *a2, void *a3, int8x16_t a4, int8x16_t a5)
{
  float v5 = *a1;
  std::exception_ptr v6 = (void *)(*a1)[2];
  if (*v6 <= *a3
    || (unint64_t v7 = *a2,
        uint64_t v8 = v5[1],
        *(double *)v9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *v5, v8, (float *)(v6[1] + 8 * *a3)), int8x16_t v11 = (unint64_t *)v5[2], *v11 <= v7))
  {
    std::terminate();
  }
  return *(double *)v9.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v9, v10, *v5, v8, (float *)(v11[1] + 8 * v7));
}

void *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(void *a1, void *a2, unint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a2 != a1)
  {
    uint64_t v8 = a1;
    unint64_t v9 = a2 - a1;
    do
    {
      int8x16_t v10 = &v8[v9 >> 1];
      int8x16_t v11 = (void *)a4[2];
      if (*v11 <= *v10
        || (unint64_t v12 = *a3,
            uint64_t v13 = a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v13, (float *)(v11[1] + 8 * *v10)), uint64_t v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      double v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v14, v15, *a4, v13, (float *)(v16[1] + 8 * v12));
      if (v17 >= *(double *)a5.i64) {
        v9 >>= 1;
      }
      else {
        v9 += ~(v9 >> 1);
      }
      if (v17 < *(double *)a5.i64) {
        uint64_t v8 = v10 + 1;
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

__n128 std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>@<Q0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a1 != a3 || a2 != a4)
  {
    unint64_t v6 = *a1;
    if (a2 > *a1) {
      unint64_t v6 = a2;
    }
    do
    {
      if (v6 == a2
        || (unint64_t v7 = a2,
            float v8 = *(float *)(**(void **)(a5 + 8) + 4 * (*(void *)(a1[1] + 8 * a2) + **(int **)(a5 + 16))),
            **(void **)a5 <= (unint64_t)v8 >> 5))
      {
        std::terminate();
      }
      *(_DWORD *)(*(void *)(*(void *)a5 + 8) + 4 * ((unint64_t)v8 >> 5)) |= 1 << ~(unint64_t)v8;
      ++a2;
    }
    while (a1 != a3 || a4 - 1 != v7);
  }
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(void *)(a6 + 16) = *(void *)(a5 + 16);
  return result;
}

__n128 std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4 = *(unint64_t **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(unint64_t **)(a2 + 16);
  if (v4 != v6 || v5 != *(void *)(a2 + 24))
  {
    uint64_t v8 = v5 - 1;
    do
    {
      uint64_t v9 = v8;
      BOOL v10 = __CFADD__(v8, 1);
      unint64_t v11 = v8 + 1;
      if (v10
        || v11 > *v4
        || (float v12 = *(float *)(**(void **)(a3 + 8)
                           + 4
                           * (*(void *)(v4[1] + 8 * v9)
                            + *(unsigned int *)(**(void **)(a3 + 16) + 4 * **(unsigned int **)(a3 + 24)))),
            **(void **)a3 <= (unint64_t)v12 >> 5))
      {
        std::terminate();
      }
      *(_DWORD *)(*(void *)(*(void *)a3 + 8) + 4 * ((unint64_t)v12 >> 5)) |= 1 << ~(unint64_t)v12;
      *(void *)(a1 + 24) = v9;
      uint64_t v8 = v9 - 1;
    }
    while (v4 != v6 || v9 != *(void *)(a2 + 24));
  }
  __n128 result = *(__n128 *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  *a4 = *(_OWORD *)a3;
  a4[1] = v14;
  return result;
}

void std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(uint64_t a1, int *a2, xgboost::RegTree *a3)
{
  uint64_t v6 = a1 + 152;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v53);
  unint64_t v7 = a2 + 14;
  int v8 = *a2;
  uint64_t v9 = a2 + 18;
  int8x16_t v10 = *(int8x16_t *)(a2 + 18);
  int8x16_t v49 = (int8x16_t)vaddq_f64(*(float64x2_t *)(a2 + 14), (float64x2_t)v10);
  *(int8x16_t *)&v52.__begin_ = v49;
  float v11 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v8, (float *)a1, (double *)&v52, v49, v10);
  int v12 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 14);
  float v14 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v12, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v13);
  int v15 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 18);
  float v18 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v15, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v16);
  if (*((unsigned char *)a2 + 48))
  {
    memset(&v52, 0, sizeof(v52));
    uint64_t v19 = (char *)*((void *)a2 + 3);
    uint64_t v20 = *((void *)a2 + 4);
    if (v19 == (char *)v20)
    {
      float v26 = *((float *)a2 + 4);
      if (v26 < 0.0 || v26 >= 16777000.0)
      {
        xgboost::common::InvalidCategory(v17);
        float v26 = *((float *)a2 + 4);
      }
      int v27 = (int)v26;
      std::vector<unsigned int>::value_type __x = 0;
      std::vector<unsigned int>::resize(&v52, vcvtpd_u64_f64((double)((v27 & ~(v27 >> 31)) + 1) * 0.03125), &__x);
      std::vector<unsigned int>::pointer begin = v52.__begin_;
      std::vector<unsigned int>::pointer end = v52.__end_;
      unint64_t v28 = (unint64_t)v27 >> 5;
      if (v28 >= v52.__end_ - v52.__begin_) {
        std::terminate();
      }
      v52.__begin_[v28] |= 1 << ~(_BYTE)v27;
    }
    else if (&v52 == (std::vector<unsigned int> *)(a2 + 6))
    {
      std::vector<unsigned int>::pointer begin = 0;
      std::vector<unsigned int>::pointer end = 0;
    }
    else
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v52, v19, v20, (v20 - (uint64_t)v19) >> 2);
      std::vector<unsigned int>::pointer begin = v52.__begin_;
      std::vector<unsigned int>::pointer end = v52.__end_;
    }
    int v29 = *a2;
    unsigned int v30 = a2[3];
    v50[0] = end - begin;
    v50[1] = begin;
    float v31 = *(double *)&v49.i64[1];
    float v32 = *((double *)a2 + 8);
    float v33 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandCategorical((uint64_t)a3, v29, v30 & 0x7FFFFFFF, (uint64_t)v50, v30 >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v31, v32, v33);
    if (v52.__begin_)
    {
      v52.__end_ = v52.__begin_;
      operator delete(v52.__begin_);
    }
  }
  else
  {
    float v23 = *(double *)&v49.i64[1];
    float v24 = *((double *)a2 + 8);
    float v25 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandNode(a3, *a2, a2[3] & 0x7FFFFFFF, *((float *)a2 + 4), a2[3] >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v23, v24, v25, -1);
  }
  uint64_t v34 = (_DWORD *)(*((void *)a3 + 20) + 20 * *a2);
  signed int v35 = v34[1];
  signed int v36 = v34[2];
  xgboost::tree::TreeEvaluator::AddSplit<false>(v6, *a2, v35, v36, v34[3] & 0x7FFFFFFF, v14, v18);
  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a3 + 21) - *((void *)a3 + 20)) >> 2));
  uint64_t v38 = *(void *)(a1 + 296);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v38) >> 3) <= v35) {
    goto LABEL_22;
  }
  *(_OWORD *)(v38 + 24 * v35) = *v7;
  int v39 = *a2;
  *(_OWORD *)&v52.__begin_ = *v7;
  float v40 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v39, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v37);
  float v41 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v40);
  uint64_t v43 = *(void *)(a1 + 296);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v43) >> 3);
  if (v44 <= v35
    || (*(float *)(v43 + 24 * v35 + 16) = v41, v44 <= v36)
    || (*(_OWORD *)(v43 + 24 * v36) = *v9,
        int v45 = *a2,
        *(_OWORD *)&v52.__begin_ = *v9,
        float v46 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v45, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v42), v47 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v46), v48 = *(void *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v48) >> 3) <= v36))
  {
LABEL_22:
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
  }
  *(float *)(v48 + 24 * v36 + 16) = v47;
  if (*(unsigned char *)(a1 + 292)) {
    xgboost::FeatureInteractionConstraintHost::SplitImpl((xgboost::FeatureInteractionConstraintHost *)(a1 + 192), *a2, *(_DWORD *)(*((void *)a3 + 20) + 20 * *a2 + 12) & 0x7FFFFFFF, v35, v36);
  }
}

void sub_22E99E750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(v76, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3));
  uint64_t v11 = a6[1];
  if (v11 == *a6)
  {
    uint64_t v20 = a6[1];
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v11 = *a6;
    do
    {
      int v13 = *(_DWORD *)(v11 + 88 * v12);
      uint64_t v14 = *(void *)(a5 + 160);
      int v15 = *(_DWORD *)(v14 + 20 * v13);
      if (v15 == -1)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        do
        {
          ++v16;
          int v15 = *(_DWORD *)(v14 + 20 * (v15 & 0x7FFFFFFF));
        }
        while (v15 != -1);
      }
      xgboost::common::ColumnSampler::GetFeatureSet(*(xgboost::common::ColumnSampler **)(a1 + 136), v16, v71);
      uint64_t v17 = v76[0] + 16 * v12;
      long long v18 = v71[0];
      v71[0] = 0uLL;
      uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
      *(_OWORD *)uint64_t v17 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (*((void *)&v71[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71[0] + 1));
      }
      ++v12;
      uint64_t v11 = *a6;
      uint64_t v20 = a6[1];
    }
    while (v12 < 0x2E8BA2E8BA2E8BA3 * ((v20 - *a6) >> 3));
  }
  uint64_t v21 = v76[0];
  if (v76[0] == v76[1])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
    char v66 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
    float64x2_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: !features.empty()", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
    uint64_t v21 = v76[0];
    uint64_t v11 = *a6;
    uint64_t v20 = a6[1];
  }
  uint64_t v68 = a4;
  unint64_t v22 = ((uint64_t)(*(void *)(**(void **)v21 + 8) - ***(void ***)v21) >> 2)
      / (unint64_t)*(int *)(a1 + 184);
  if (v22 <= 1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22;
  }
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v73, 0x2E8BA2E8BA2E8BA3 * ((v20 - v11) >> 3), v76, v23);
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v72, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3) * *(int *)(a1 + 184));
  uint64_t v25 = *a6;
  uint64_t v24 = a6[1];
  if (v24 != *a6)
  {
    unint64_t v26 = 0;
    LODWORD(v27) = *(_DWORD *)(a1 + 184);
    do
    {
      if ((int)v27 >= 1)
      {
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = *a6;
          uint64_t v30 = *a6 + 88 * v26;
          uint64_t v31 = v28 + v26 * (int)v27;
          uint64_t v32 = v72[0];
          uint64_t v33 = v72[0] + 88 * v31;
          *(void *)uint64_t v33 = *(void *)v30;
          uint64_t v34 = *(void *)(v30 + 8);
          *(_DWORD *)(v33 + 16) = *(_DWORD *)(v30 + 16);
          *(void *)(v33 + 8) = v34;
          if (v33 != v30) {
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v32 + 88 * v31 + 24), *(char **)(v29 + 88 * v26 + 24), *(void *)(v29 + 88 * v26 + 32), (uint64_t)(*(void *)(v29 + 88 * v26 + 32) - *(void *)(v29 + 88 * v26 + 24)) >> 2);
          }
          uint64_t v35 = v32 + 88 * v31;
          uint64_t v36 = v29 + 88 * v26;
          long long v37 = *(_OWORD *)(v36 + 48);
          long long v38 = *(_OWORD *)(v36 + 64);
          *(void *)(v35 + 80) = *(void *)(v36 + 80);
          *(_OWORD *)(v35 + 48) = v37;
          *(_OWORD *)(v35 + 64) = v38;
          ++v28;
          uint64_t v27 = *(int *)(a1 + 184);
        }
        while (v28 < v27);
        uint64_t v25 = *a6;
        uint64_t v24 = a6[1];
      }
      ++v26;
    }
    while (v26 < 0x2E8BA2E8BA2E8BA3 * ((v24 - v25) >> 3));
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v71);
  uint64_t v39 = *(void *)(a3 + 16);
  int v40 = *(_DWORD *)(a1 + 184);
  v70[0] = v72;
  v70[1] = a1;
  v70[2] = a2;
  v70[3] = v76;
  v70[4] = v68;
  v70[5] = v39;
  v70[6] = a3;
  v70[7] = v71;
  xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v73, v40, (uint64_t)v70);
  uint64_t v42 = *a6;
  uint64_t v41 = a6[1];
  if (v41 == *a6) {
    goto LABEL_44;
  }
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  int v45 = *(_DWORD *)(a1 + 184);
  do
  {
    if (v45 < 1) {
      goto LABEL_43;
    }
    for (int i = 0; i < v45; ++i)
    {
      unsigned int v47 = i + v44 * v45;
      uint64_t v48 = v72[0];
      uint64_t v49 = v72[0] + 88 * v47;
      float v51 = *(float *)(v49 + 8);
      uint64_t v50 = v49 + 8;
      float v52 = v51;
      if (fabsf(v51) == INFINITY) {
        continue;
      }
      uint64_t v53 = *a6;
      uint64_t v54 = *a6 + 88 * v43;
      int v55 = *(_DWORD *)(v50 + 4);
      float64x2_t v56 = (_DWORD *)(v54 + 12);
      unsigned int v57 = *(_DWORD *)(v54 + 12) & 0x7FFFFFFF;
      float v59 = *(float *)(v54 + 8);
      unint64_t v58 = (float *)(v54 + 8);
      float v60 = v59;
      if (v57 <= (v55 & 0x7FFFFFFFu))
      {
        if (v60 >= v52) {
          continue;
        }
      }
      else if (v60 > v52)
      {
        continue;
      }
      *unint64_t v58 = v52;
      *float64x2_t v56 = v55;
      uint64_t v61 = v48 + 88 * v47;
      uint64_t v62 = v53 + 88 * v43;
      *(_DWORD *)(v62 + 16) = *(_DWORD *)(v61 + 16);
      *(unsigned char *)(v62 + 48) = *(unsigned char *)(v61 + 48);
      if (v58 != (float *)v50) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v53 + 88 * v43 + 24), *(char **)(v48 + 88 * v47 + 24), *(void *)(v48 + 88 * v47 + 32), (uint64_t)(*(void *)(v48 + 88 * v47 + 32) - *(void *)(v48 + 88 * v47 + 24)) >> 2);
      }
      uint64_t v63 = v48 + 88 * v47;
      uint64_t v64 = v53 + 88 * v43;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v63 + 56);
      *(_OWORD *)(v64 + 72) = *(_OWORD *)(v63 + 72);
      int v45 = *(_DWORD *)(a1 + 184);
    }
    uint64_t v42 = *a6;
    uint64_t v41 = a6[1];
LABEL_43:
    uint64_t v43 = ++v44;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((v41 - v42) >> 3) > (unint64_t)v44);
LABEL_44:
  *(void *)&v71[0] = v72;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  *(void *)&v71[0] = v76;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
}

void sub_22E99EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)(v19 - 112);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::Reset(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  if (a4 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  *(_DWORD *)(a1 + 392) = a4;
  *(void *)(a1 + 400) = a5;
  *(void *)(a1 + 352) = *(void *)a3;
  *(void *)(a1 + 360) = *(void *)(a3 + 8);
  *(void *)(a1 + 368) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a3 + 24);
  if (*(_DWORD *)a1 != a2)
  {
    *(_DWORD *)a1 = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 16));
  }
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_DWORD *)(a1 + 64) != a2)
  {
    *(_DWORD *)(a1 + 64) = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  }
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 68) = 0;
  xgboost::common::ParallelGHistBuilder<float>::Init(a1 + 136, a2);
  *(_DWORD *)(a1 + 128) = a2;
  *(unsigned char *)(a1 + 408) = a6;
}

void sub_22E99EDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7, int **a8, uint64_t a9)
{
  int v27 = 0;
  unsigned int v28 = 0x7FFFFFFF;
  if (!a2) {
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRows((unsigned int *)a1, &v28, &v27, a7, a8, a5);
  }
  if (*(unsigned char *)(a4 + 192))
  {
    memset(v23, 0, sizeof(v23));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v23, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    std::vector<unsigned int> __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(a1, a2, (xgboost::common::BlockedSpace2d *)v23, a4, (uint64_t *)a7, a6, a9);
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
    uint64_t v17 = (void *)v23[0];
    if (v23[0])
    {
      long long v18 = (void **)v23;
LABEL_12:
      v18[1] = v17;
      operator delete(v17);
    }
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v19, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(a1, a2, (xgboost::common::BlockedSpace2d *)v19, a4, (uint64_t *)a7, a6, a9);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    uint64_t v17 = v19[0];
    if (v19[0])
    {
      long long v18 = v19;
      goto LABEL_12;
    }
  }
  if (!*(void *)(a1 + 400)) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  if (*(void *)(a1 + 400) - 1 == a2)
  {
    if (*(unsigned char *)(a1 + 408)) {
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed((unsigned int *)a1, a5, a7, a8, v28, v27);
    }
    else {
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(a1, a5, a7, (uint64_t)a8);
    }
  }
}

void sub_22E99F0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRows(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  if (*((unsigned char *)a1 + 408)) {
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(a1, a2, a3, a4, a5, a6);
  }
  else {
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(a1, (signed int *)a2, a3, a4, (unsigned int **)a5);
  }
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  LODWORD(v24[0]) = 0;
  uint64_t v16 = v14 - v15;
  unint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(__p, v26);
  if (v26)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      xgboost::common::HistCollection<double>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v24);
      uint64_t v20 = (char *)__p[0] + v18;
      void *v20 = v24[0];
      v20[1] = v24[1];
      ++v19;
      uint64_t v21 = v26;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v26);
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  xgboost::common::ParallelGHistBuilder<double>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_10:
  int v22 = *(_DWORD *)(a1 + 392);
  v23[0] = a5;
  v23[1] = a6;
  unint64_t v23[2] = a1;
  void v23[3] = a7;
  v23[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v22, (uint64_t)v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E99F320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19 = (uint64_t)__p;
  std::vector<unsigned int> __p = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  LODWORD(v24[0]) = 0;
  uint64_t v16 = v14 - v15;
  unint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(__p, v26);
  if (v26)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      xgboost::common::HistCollection<double>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v24);
      uint64_t v20 = (char *)__p[0] + v18;
      void *v20 = v24[0];
      v20[1] = v24[1];
      ++v19;
      uint64_t v21 = v26;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v26);
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  xgboost::common::ParallelGHistBuilder<double>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_10:
  int v22 = *(_DWORD *)(a1 + 392);
  v23[0] = a5;
  v23[1] = a6;
  unint64_t v23[2] = a1;
  void v23[3] = a7;
  v23[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v22, (uint64_t)v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E99F558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19 = (uint64_t)__p;
  std::vector<unsigned int> __p = 0;
  if (v19) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(unsigned int *a1, uint64_t a2, void *a3, void *a4, unsigned int a5, int a6)
{
  unint64_t v23 = a1[32];
  uint64_t v24 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v20, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v23, 0x400uLL);
  int v11 = a1[98];
  v19[0] = a3;
  v19[1] = a1;
  void v19[2] = &v24;
  uint64_t v19[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v11, (uint64_t)v19);
  xgboost::common::HistCollection<double>::operator[](a1, a5, &v14);
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 80), v15, (const char *)0x10, a1[32] * a6, 0, 0);
  v25[0] = v24;
  int v12 = a1[98];
  uint64_t v14 = a3;
  uint64_t v15 = v25;
  uint64_t v16 = a1;
  std::vector<unsigned int> __p = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v12, (uint64_t)&v14);
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>((xgboost::common::BlockedSpace2d *)&v14, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3), &v23, 0x400uLL);
  v25[3] = a3;
  uint64_t v26 = v24;
  int v13 = a1[98];
  v25[0] = a4;
  v25[1] = &v26;
  void v25[2] = a1;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(&v14, v13, (uint64_t)v25);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_22E99F72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  xgboost::common::Index::~Index((xgboost::common::Index *)va1);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v12 = *(unsigned int *)(a1 + 128);
  uint64_t v13 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v9, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v12, 0x400uLL);
  int v7 = *(_DWORD *)(a1 + 392);
  v8[0] = a3;
  v8[1] = a1;
  v8[2] = &v13;
  void v8[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v9, v7, (uint64_t)v8);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_22E99F808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  unint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)*a4) >> 3);
  uint64_t v14 = *a5;
  uint64_t v33 = a5[1];
  unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (((char *)v33 - (char *)*a5) >> 3);
  std::vector<int>::vector(&v34, v15 + v13);
  std::vector<int>::pointer begin = v34.__begin_;
  if (v11 != v12)
  {
    uint64_t v17 = *a4;
    if (v13 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v13;
    }
    std::vector<int>::pointer v19 = v34.__begin_;
    do
    {
      int v20 = *v17;
      v17 += 22;
      *v19++ = v20;
      --v18;
    }
    while (v18);
  }
  if (v33 != v14)
  {
    uint64_t v21 = *a5;
    if (v15 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v15;
    }
    unint64_t v23 = &begin[v13];
    do
    {
      int v24 = *v21;
      v21 += 22;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v25 = (unsigned int *)v34.__begin_;
  std::vector<int>::pointer end = v34.__end_;
  if (v34.__begin_ == v34.__end_)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = 0;
    do
    {
      if ((*(_DWORD *)(*(void *)(a6 + 160) + 20 * (int)*v25) & 0x80000000) != 0)
      {
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, *v25);
        unsigned int v28 = *a2;
        if ((int)*a2 >= (int)*v25) {
          unsigned int v28 = *v25;
        }
        *a2 = v28;
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)(a1 + 16), *v25);
        ++v27;
      }
      ++v25;
    }
    while (v25 != (unsigned int *)end);
    uint64_t v29 = (unsigned int *)v34.__begin_;
    for (std::vector<int>::pointer i = v34.__end_; v29 != (unsigned int *)i; ++v29)
    {
      if ((*(_DWORD *)(*(void *)(a6 + 160) + 20 * (int)*v29) & 0x80000000) == 0)
      {
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, *v29);
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)(a1 + 16), *v29);
      }
    }
  }
  xgboost::common::HistCollection<double>::AllocateAllData(a1);
  xgboost::common::HistCollection<double>::AllocateAllData(a1 + 16);
  if (v27 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v27;
  }
  *a3 = v31;
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_22E99F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(unsigned int *a1, signed int *a2, _DWORD *a3, signed int **a4, unsigned int **a5)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 == v9)
  {
    unint64_t v15 = *a4;
  }
  else
  {
    do
    {
      signed int v13 = *v8;
      v8 += 22;
      signed int v12 = v13;
      xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, v13);
      signed int v14 = *a2;
      if (*a2 >= v13) {
        signed int v14 = v12;
      }
      *a2 = v14;
    }
    while (v8 != v9);
    uint64_t v8 = *a4;
    unint64_t v15 = a4[1];
  }
  *a3 = -1171354717 * ((unint64_t)((char *)v15 - (char *)v8) >> 3);
  uint64_t v17 = *a5;
  uint64_t v16 = a5[1];
  while (v17 != v16)
  {
    unsigned int v18 = *v17;
    v17 += 22;
    xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, v18);
  }

  xgboost::common::HistCollection<double>::AllocateAllData(a1);
}

void xgboost::common::HistCollection<double>::AddHistRow(uint64_t a1, unsigned int a2)
{
  int v10 = -1;
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v5) >> 3))
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    std::vector<unsigned long>::resize(a1 + 40, a2 + 1, &v9);
    uint64_t v5 = *v6;
  }
  if (*(void *)(v5 + 8 * v4) != 0xFFFFFFFFLL) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  unint64_t v7 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) < v7) {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::resize((uint64_t *)(a1 + 16), v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  *(void *)(*(void *)(a1 + 40) + 8 * v4) = v8;
  *(_DWORD *)(a1 + 4) = v8 + 1;
}

void sub_22E99FC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<double>::AllocateAllData(unsigned int *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = a1 + 4;
  uint64_t v3 = (void *)*((void *)a1 + 2);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v4 + 1) - (void)v3) >> 3) * v2;
  *((unsigned char *)a1 + 8) = 1;
  if (v5 != (uint64_t)(v3[1] - *v3) >> 4) {
    std::vector<xgboost::detail::GradientPairInternal<double>>::resize((uint64_t)v3, v5);
  }
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      signed int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    }
    else {
      signed int v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unsigned int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22E99FEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<double>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    unsigned int v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

unsigned int *xgboost::common::HistCollection<double>::operator[]@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  int v11 = -1;
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t result = a1 + 10;
  if (a2 >= (unint64_t)((v7 - v6) >> 3)) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(v6 + 8 * a2);
  if (v10 == 0xFFFFFFFFLL) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v8 = *a1;
    uint64_t v9 = **((void **)a1 + 2) + 16 * v10 * v8;
  }
  else
  {
    uint64_t v9 = *(void *)(*((void *)a1 + 2) + 24 * v10);
    uint64_t v8 = *a1;
  }
  *a3 = v8;
  a3[1] = v9;
  if (v8)
  {
    if (!v9) {
      std::terminate();
    }
  }
  return result;
}

void sub_22E9A02D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<double>::Reset(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::common::BlockedSpace2d *a4, uint64_t **a5)
{
  uint64_t v15 = a3;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)a1)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)a1;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  }
  uint64_t v10 = *(void **)(a1 + 168);
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 28) = 0;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 160, v10);
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 120) = 0;
  if ((uint64_t **)(a1 + 136) != a5) {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>((void *)(a1 + 136), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  }
  uint64_t v14 = ((char *)a5[1] - (char *)*a5) >> 4;
  if (v14 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v11 = v15;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v11;
  xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes((void *)a1, a4);
  xgboost::common::ParallelGHistBuilder<double>::AllocateAdditionalHistograms((void *)a1);
  xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist((_OWORD *)a1);
  std::vector<int>::resize((std::vector<int> *)(a1 + 88), *(void *)(a1 + 16) * a2);
  unint64_t v12 = *(void **)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96) - (void)v12;
  if (v13 >= 1) {
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
}

void sub_22E9A04CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A0684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

void *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E9A0740(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<double>::AllocateAdditionalHistograms(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v3;
      int v5 = 0;
      if (a1[1])
      {
        unint64_t v6 = v2;
        uint64_t v7 = a1[1];
        do
        {
          v5 += (*(void *)(a1[14] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
          v6 += v1;
          --v7;
        }
        while (v7);
      }
      if (v5 <= 1) {
        int v8 = 1;
      }
      else {
        int v8 = v5;
      }
      uint64_t v3 = v4 + (v8 - 1);
      ++v2;
    }
    while (v2 != v1);
    if (v3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (uint64_t)(a1 + 3);
      if (v5 <= 1) {
        int v11 = 1;
      }
      else {
        int v11 = v5;
      }
      uint64_t v12 = v4 + (v11 - 1);
      do
        xgboost::common::HistCollection<double>::AddHistRow(v10, v9++);
      while (v12 != v9);
    }
  }
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1 = **(void **)a1;
  unint64_t v2 = **(int **)(a1 + 8);
  if (v1 % v2) {
    unint64_t v3 = v1 / v2 + 1;
  }
  else {
    unint64_t v3 = v1 / v2;
  }
  if (v1 >= v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = **(void **)a1;
  }
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      int v11 = (void *)(*(void *)(*(void *)(v7 + 8) + 24)
                     + 24 * *(unsigned int *)(**(void **)v7 + 88 * FirstDimension));
      unint64_t v12 = (uint64_t)(v11[1] - *v11) >> 3;
      if (v12 >= Range) {
        unint64_t v13 = Range;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v12 >= v10) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v12;
      }
      xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(*(void *)(v7 + 16) + 136, 0, FirstDimension, (uint64_t)&v15);
      if (v14 != v13) {
        xgboost::common::GHistBuilder<double>::BuildHist<false>();
      }
    }
  }
}

void xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v10 = a3;
  unint64_t v11 = a2;
  if (*(void *)(a1 + 16) <= a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a1 + 8) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  v9[0] = v11;
  v9[1] = v10;
  unsigned int v6 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, v9);
  if ((v6 & 0x80000000) == 0)
  {
    xgboost::common::HistCollection<double>::AllocateData((unsigned int *)(a1 + 24), v6);
LABEL_8:
    xgboost::common::HistCollection<double>::operator[]((unsigned int *)(a1 + 24), v6, (void *)a4);
    unint64_t v7 = v10;
    goto LABEL_9;
  }
  if (v6 != -1) {
    goto LABEL_8;
  }
  unint64_t v7 = v10;
  int v8 = (void *)(*(void *)(a1 + 136) + 16 * v10);
  *(void *)a4 = *v8;
  *(void *)(a4 + 8) = v8[1];
LABEL_9:
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 4 * (v7 + *(void *)(a1 + 16) * v11)))
  {
    bzero(*(void **)(a4 + 8), 16 * *(void *)a4);
    *(_DWORD *)(*(void *)(a1 + 88) + 4 * (v10 + *(void *)(a1 + 16) * v11)) = 1;
  }
}

void sub_22E9A0C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16 = a10;
  a10 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v16);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<double>::AllocateData(unsigned int *a1, unsigned int a2)
{
  unint64_t v3 = (void *)(*((void *)a1 + 2) + 24 * *(void *)(*((void *)a1 + 5) + 8 * a2));
  if (v3[1] == *v3)
  {
    unint64_t v4 = *a1;
    long long v5 = 0uLL;
    std::vector<xgboost::detail::GradientPairInternal<double>>::resize((uint64_t)v3, v4, &v5);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<double>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v18 = &v15[16 * v12];
    uint64_t v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_OWORD *)uint64_t v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    uint64_t v22 = &v15[16 * v14];
    int v24 = (char *)*a1;
    unint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A0FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1 = **(void **)a1;
  unint64_t v2 = **(int **)(a1 + 8);
  if (v1 % v2) {
    unint64_t v3 = v1 / v2 + 1;
  }
  else {
    unint64_t v3 = v1 / v2;
  }
  if (v1 >= v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = **(void **)a1;
  }
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      unint64_t v11 = (void *)(*(void *)(*(void *)(v7 + 8) + 24)
                     + 24 * *(unsigned int *)(**(void **)v7 + 88 * FirstDimension));
      unint64_t v12 = (uint64_t)(v11[1] - *v11) >> 3;
      if (v12 >= Range) {
        unint64_t v13 = Range;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v12 >= v10) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v12;
      }
      xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(*(void *)(v7 + 16) + 136, 0, FirstDimension, (uint64_t)&v15);
      if (v14 != v13) {
        xgboost::common::GHistBuilder<double>::BuildHist<true>();
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A13A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E9A14AC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

unsigned int *xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(unsigned int **)(a1 + 8);
  unint64_t v9 = (unsigned int *)(**(void **)a1 + 88 * a2);
  xgboost::common::HistCollection<double>::operator[](v8, *v9, &v36);
  xgboost::common::ParallelGHistBuilder<double>::ReduceHist((uint64_t)(v8 + 34), a2, a3, a4);
  uint64_t v10 = v8 + 16;
  uint64_t result = xgboost::common::HistCollection<double>::operator[](v8 + 16, *v9, v35);
  unint64_t v12 = 2 * a3;
  unint64_t v13 = 2 * a4;
  if (v13 > 2 * a3)
  {
    unint64_t v14 = v13 - v12;
    uint64_t v15 = (void *)(v35[1] + 16 * a3);
    uint64_t v16 = (uint64_t *)(v37 + 16 * a3);
    do
    {
      uint64_t v17 = *v16++;
      *v15++ = v17;
      --v14;
    }
    while (v14);
  }
  int v18 = *(_DWORD *)(*(void *)(**(void **)(a1 + 16) + 160) + 20 * (int)*v9);
  if (v18 != -1)
  {
    unsigned int v19 = *(_DWORD *)(**(void **)(a1 + 24) + 88 * a2);
    xgboost::common::HistCollection<double>::operator[](v8 + 16, v18 & 0x7FFFFFFF, v34);
    xgboost::common::HistCollection<double>::operator[](v8, v19, &v32);
    unint64_t v20 = v13 - v12;
    if (v13 <= v12)
    {
      return xgboost::common::HistCollection<double>::operator[](v10, v19, v31);
    }
    else
    {
      uint64_t v21 = (double *)(v33 + 16 * a3);
      uint64_t v22 = (double *)(v37 + 16 * a3);
      unint64_t v23 = (double *)(v34[1] + 16 * a3);
      unint64_t v24 = v13 - v12;
      do
      {
        double v25 = *v23++;
        double v26 = v25;
        double v27 = *v22++;
        *v21++ = v26 - v27;
        --v24;
      }
      while (v24);
      uint64_t result = xgboost::common::HistCollection<double>::operator[](v10, v19, v31);
      unsigned int v28 = (void *)(v31[1] + 16 * a3);
      uint64_t v29 = (uint64_t *)(v33 + 16 * a3);
      do
      {
        uint64_t v30 = *v29++;
        *v28++ = v30;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

void xgboost::common::ParallelGHistBuilder<double>::ReduceHist(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v22 = a3;
  unint64_t v23 = a2;
  unint64_t v21 = a4;
  if (a4 <= a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (v23 >= *(void *)(a1 + 16)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 136) + 16 * v23 + 8);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    unint64_t v8 = 0;
    while (2)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = (_DWORD *)(*(void *)(a1 + 88) + 4 * (v23 + v8 * v9));
      uint64_t v11 = 4 * v9;
      while (!*v10)
      {
        uint64_t v10 = (_DWORD *)((char *)v10 + v11);
        if (++v8 >= v6)
        {
          if (v7) {
            return;
          }
          goto LABEL_21;
        }
      }
      unint64_t v19 = v8;
      unint64_t v20 = v23;
      unsigned int v12 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, &v19);
      if (v12 == -1)
      {
        unint64_t v13 = (uint64_t *)(*(void *)(a1 + 136) + 16 * v23 + 8);
      }
      else
      {
        xgboost::common::HistCollection<double>::operator[]((unsigned int *)(a1 + 24), v12, &v19);
        unint64_t v13 = (uint64_t *)&v20;
      }
      uint64_t v14 = *v13;
      if (v5 != *v13 && 2 * v21 > 2 * v22)
      {
        uint64_t v15 = 2 * v21 - 2 * v22;
        uint64_t v16 = (double *)(v5 + 16 * v22);
        uint64_t v17 = (double *)(v14 + 16 * v22);
        do
        {
          double v18 = *v17++;
          *uint64_t v16 = v18 + *v16;
          ++v16;
          --v15;
        }
        while (v15);
      }
      unint64_t v6 = *(void *)(a1 + 8);
      ++v8;
      char v7 = 1;
      if (v8 < v6) {
        continue;
      }
      break;
    }
  }
  else
  {
LABEL_21:
    bzero((void *)(v5 + 16 * v22), 16 * (v21 - v22));
  }
}

void sub_22E9A1A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v15 = a9;
  a9 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((unsigned int *)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A1C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

unsigned int *dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      uint64_t result = (unsigned int *)xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      uint64_t v11 = v10;
      unsigned int v12 = (unsigned int *)(**(void **)v8 + 88 * FirstDimension);
      if ((*(_DWORD *)(*(void *)(**(void **)(v8 + 8) + 160) + 20 * (int)*v12) & 0x80000000) == 0)
      {
        unint64_t v13 = result;
        uint64_t v14 = *(unsigned int **)(v8 + 16);
        uint64_t result = xgboost::common::HistCollection<double>::operator[](v14, *v12, v26);
        int v15 = *(_DWORD *)(*(void *)(**(void **)(v8 + 8) + 160) + 20 * (int)*v12);
        if (v15 != -1)
        {
          unsigned int v16 = *(_DWORD *)(**(void **)(v8 + 24) + 88 * FirstDimension);
          xgboost::common::HistCollection<double>::operator[](v14, v15 & 0x7FFFFFFF, v25);
          uint64_t result = xgboost::common::HistCollection<double>::operator[](v14, v16, v24);
          if (2 * v11 > (unint64_t)(2 * (void)v13))
          {
            uint64_t v17 = 2 * v11 - 2 * (void)v13;
            double v18 = (double *)(v26[1] + 16 * (void)v13);
            unint64_t v19 = (double *)(v24[1] + 16 * (void)v13);
            unint64_t v20 = (double *)(v25[1] + 16 * (void)v13);
            do
            {
              double v21 = *v20++;
              double v22 = v21;
              double v23 = *v19++;
              *v18++ = v22 - v23;
              --v17;
            }
            while (v17);
          }
        }
      }
    }
  }
  return result;
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E9A1F64(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A2114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = *a3;
      if (*a3 % a4) {
        uint64_t v10 = *a3 / a4 + 1;
      }
      else {
        uint64_t v10 = *a3 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E9A2220(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t v12 = v11;
      unint64_t v13 = *(unsigned int **)(v8 + 8);
      uint64_t v14 = (unsigned int *)(**(void **)v8 + 88 * FirstDimension);
      xgboost::common::HistCollection<double>::operator[](v13, *v14, v26);
      xgboost::common::ParallelGHistBuilder<double>::ReduceHist((uint64_t)(v13 + 34), FirstDimension, Range, v12);
      int v15 = *(_DWORD *)(*(void *)(**(void **)(v8 + 16) + 160) + 20 * (int)*v14);
      if (v15 != -1)
      {
        unsigned int v16 = *(_DWORD *)(**(void **)(v8 + 24) + 88 * FirstDimension);
        xgboost::common::HistCollection<double>::operator[](v13, v15 & 0x7FFFFFFF, v25);
        xgboost::common::HistCollection<double>::operator[](v13, v16, v24);
        if (2 * v12 > 2 * Range)
        {
          uint64_t v17 = 2 * v12 - 2 * Range;
          double v18 = (double *)(v24[1] + 16 * Range);
          unint64_t v19 = (double *)(v26[1] + 16 * Range);
          unint64_t v20 = (double *)(v25[1] + 16 * Range);
          do
          {
            double v21 = *v20++;
            double v22 = v21;
            double v23 = *v19++;
            *v18++ = v22 - v23;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(void *a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(a1[1] - *a1) >> 4;
  v5[2] = a2;
  v5[0] = a2;
  v5[1] = 1;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v6.__ptr_ = 0;
  v7.__m_.__uint64_t sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  v3[0] = &v4;
  v3[1] = v5;
  v3[2] = a3;
  uint64_t v3[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v6, (uint64_t)v3);
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E9A25E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, void *a3, unint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      unint64_t v9 = (uint64_t)(*(void *)(**(void **)(*a3 + 16 * i) + 8) - ***(void ***)(*a3 + 16 * i)) >> 2;
      if (v9 % a4) {
        uint64_t v10 = v9 / a4 + 1;
      }
      else {
        uint64_t v10 = v9 / a4;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          if (v9 >= a4 + v11) {
            unint64_t v12 = a4 + v11;
          }
          else {
            unint64_t v12 = v9;
          }
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_22E9A270C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  unint64_t v3 = **(int **)(a2 + 8);
  if (v2 % v3) {
    unint64_t v4 = v2 / v3 + 1;
  }
  else {
    unint64_t v4 = v2 / v3;
  }
  if (v2 >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = **(void **)a2;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      unint64_t Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = (unsigned int *)(**(void **)a1 + 88 * *(int *)(v8 + 184) * a2);
  unsigned int v10 = *v9;
  uint64_t v37 = (uint64_t)(v9 + 2);
  xgboost::common::HistCollection<double>::operator[](*(unsigned int **)(a1 + 16), *v9, v50);
  if (a3 < a4)
  {
    int v11 = v10;
    unint64_t v12 = **(uint64_t ***)(**(void **)(a1 + 24) + 16 * a2);
    uint64_t v13 = *v12;
    if (a3 <= (v12[1] - *v12) >> 2) {
      uint64_t v14 = (v12[1] - *v12) >> 2;
    }
    else {
      uint64_t v14 = a3;
    }
    long long v38 = (xgboost::FeatureInteractionConstraintHost *)(v8 + 192);
    uint64_t v39 = v14;
    unint64_t v36 = a4;
    do
    {
      if (a3 == v39) {
LABEL_32:
      }
        std::terminate();
      unint64_t v15 = *(unsigned int *)(v13 + 4 * a3);
      unsigned int v16 = *(unint64_t **)(a1 + 32);
      if (*v16)
      {
        if (*v16 <= v15) {
          goto LABEL_32;
        }
        int v17 = *(unsigned __int8 *)(v16[1] + v15);
        if (!xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3))) {
          goto LABEL_30;
        }
        if (v17 != 1)
        {
LABEL_15:
          v41[0] = 0;
          v41[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(v8, *(void *)(a1 + 48), (uint64_t)v41, v50, v15, v11, *(void **)(a1 + 56), v37);
          double v22 = (double *)(*(void *)(v8 + 296) + 24 * v11);
          if (v23 != *v22 || v21 != v22[1])
          {
            v40[0] = 0;
            v40[1] = 0;
            xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(v8, *(void *)(a1 + 48), (uint64_t)v40, v50, v15, v11, *(void **)(a1 + 56), v37);
          }
          goto LABEL_30;
        }
        double v18 = *(void **)(a1 + 40);
        unint64_t v19 = (v15 + 1);
        if (v19 >= (uint64_t)(v18[1] - *v18) >> 2) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v20 = (*(_DWORD *)(*v18 + 4 * v19) - *(_DWORD *)(*v18 + 4 * v15));
        if (v20 >= *(_DWORD *)(v8 + 28))
        {
          std::vector<unsigned long>::vector(&__p, v20);
          double v25 = (uint64_t *)__p;
          double v26 = v47;
          if (__p != v47)
          {
            uint64_t v27 = 0;
            do
              *v25++ = v27++;
            while (v25 != v26);
          }
          xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(v50, *(unsigned int *)(**(void **)(a1 + 40) + 4 * v15), v20, v45);
          int v31 = (unint64_t *)__p;
          uint64_t v30 = v47;
          v44[0] = *(void *)(a1 + 56);
          v44[1] = v8;
          double v44[2] = (uint64_t)v45;
          unint64_t v32 = ((char *)v47 - (unsigned char *)__p) >> 3;
          if ((char *)v47 - (unsigned char *)__p < 1025)
          {
            uint64_t v33 = 0;
            uint64_t v35 = 0;
          }
          else
          {
            uint64_t v33 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v47 - (unsigned char *)__p) >> 3);
            uint64_t v35 = v34;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v31, v30, v44, v32, v33, v35, v28, v29);
          if (v33) {
            operator delete(v33);
          }
          v43[0] = ((char *)v47 - (unsigned char *)__p) >> 3;
          v43[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(v8, *(void *)(a1 + 48), v43, v50, v15, v11, *(void **)(a1 + 56), v37);
          v42[0] = ((char *)v47 - (unsigned char *)__p) >> 3;
          v42[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(v8, *(void *)(a1 + 48), v42, v50, v15, v11, *(void **)(a1 + 56), v37);
          a4 = v36;
          if (__p)
          {
            unsigned int v47 = (uint64_t *)__p;
            operator delete(__p);
          }
        }
        else
        {
          v49[0] = 0;
          v49[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(v8, *(void *)(a1 + 48), (uint64_t)v49, v50, v15, v11, *(void **)(a1 + 56), v37);
          v48[0] = 0;
          v48[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(v8, *(void *)(a1 + 48), (uint64_t)v48, v50, v15, v11, *(void **)(a1 + 56), v37);
          a4 = v36;
        }
      }
      else if (xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
      {
        goto LABEL_15;
      }
LABEL_30:
      ++a3;
    }
    while (a3 != a4);
  }
}

void sub_22E9A2BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    goto LABEL_30;
  }
  uint64_t v43 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v48);
  double v18 = (_DWORD *)(*v8 + 4 * a5);
  v46.i32[0] = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  unint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  v46.i32[0] = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
LABEL_30:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  unint64_t v21 = *(int *)(v20 + 4 * a5);
  int v22 = *(_DWORD *)(v20 + 4 * v9);
  if (v22 != v21)
  {
    char v42 = 0;
    unsigned int v23 = 0;
    uint64_t v29 = v15 + 24 * a6;
    int v30 = v22 - v21;
    float v28 = 0.0;
    double v41 = 0.0;
    uint64_t v26 = 0;
    double v25 = 0.0;
    int v24 = 0;
    double v27 = 0.0;
    while (1)
    {
      if (*a4 <= v21) {
        std::terminate();
      }
      unint64_t v31 = a4[1];
      int8x16_t v32 = *(int8x16_t *)(v31 + 16 * v21);
      double v33 = *(double *)(v31 + 16 * v21 + 8);
      double v34 = *(double *)(v29 + 8) - v33;
      double v35 = *(float *)(a1 + 32);
      if (v34 < v35 || v33 < v35) {
        goto LABEL_19;
      }
      v17.i64[0] = *(void *)v29;
      double v37 = *(double *)v29 - *(double *)v32.i64;
      v47[0] = v37;
      v47[1] = v34;
      uint64_t v45 = v32.i64[0];
      int8x16_t v46 = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, v47, (double *)v46.i64, v17, v32);
      *(float *)v17.i32 = *(double *)v17.i64 - *(float *)(v29 + 16);
      if (fabsf(*(float *)v17.i32) == INFINITY) {
        goto LABEL_19;
      }
      if ((v23 & 0x7FFFFFFF) > a5) {
        break;
      }
      if (v28 < *(float *)v17.i32) {
        goto LABEL_18;
      }
LABEL_19:
      ++v21;
      if (!--v30) {
        goto LABEL_20;
      }
    }
    if (v28 > *(float *)v17.i32) {
      goto LABEL_19;
    }
LABEL_18:
    char v42 = 1;
    double v41 = v33;
    uint64_t v26 = v45;
    double v25 = v34;
    double v27 = v37;
    int v24 = *(_DWORD *)(*v43 + 4 * v21);
    float v28 = *(float *)v17.i32;
    unsigned int v23 = a5;
    goto LABEL_19;
  }
  char v42 = 0;
  unsigned int v23 = 0;
  int v24 = 0;
  double v25 = 0.0;
  uint64_t v26 = 0;
  double v41 = 0.0;
  double v27 = 0.0;
  float v28 = 0.0;
LABEL_20:
  if (fabsf(v28) != INFINITY)
  {
    float v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v23 & 0x7FFFFFFF))
    {
      if (v38 > v28) {
        return 0.0;
      }
      goto LABEL_27;
    }
    if (v38 < v28)
    {
LABEL_27:
      *(float *)a8 = v28;
      *(_DWORD *)(a8 + 4) = v23;
      *(_DWORD *)(a8 + 8) = v24;
      *(unsigned char *)(a8 + 40) = v42;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v27;
      *(double *)(a8 + 56) = v25;
      *(void *)(a8 + 64) = v26;
      *(double *)(a8 + 72) = v41;
    }
  }
  return 0.0;
}

void sub_22E9A3024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

double xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v44 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v49);
  double v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v47[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  unint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v47[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = *(int *)(*v8 + 4 * v9);
  int v21 = *(_DWORD *)(*v8 + 4 * a5);
  if (v21 != v20)
  {
    char v43 = 0;
    unsigned int v22 = 0;
    uint64_t v28 = v15 + 24 * a6;
    unint64_t v29 = v20 - 1;
    int v30 = v21 - v20;
    float v27 = 0.0;
    double v42 = 0.0;
    double v25 = 0.0;
    double v24 = 0.0;
    int v23 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      if (*a4 <= v29) {
        std::terminate();
      }
      unint64_t v31 = a4[1];
      int8x16_t v32 = *(int8x16_t *)(v31 + 16 * v29);
      double v33 = *(double *)(v31 + 16 * v29 + 8);
      double v34 = *(double *)(v28 + 8) - v33;
      double v35 = *(float *)(a1 + 32);
      if (v34 < v35 || v33 < v35) {
        goto LABEL_18;
      }
      v17.i64[0] = *(void *)v28;
      double v37 = *(double *)v28 - *(double *)v32.i64;
      long long v46 = *(_OWORD *)(v31 + 16 * v29);
      *(_OWORD *)uint64_t v48 = v46;
      v47[0] = v37;
      v47[1] = v34;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, v48, v47, v17, v32);
      *(float *)v17.i32 = *(double *)v17.i64 - *(float *)(v28 + 16);
      if (fabsf(*(float *)v17.i32) == INFINITY) {
        goto LABEL_18;
      }
      if ((v22 & 0x7FFFFFFF) > a5) {
        break;
      }
      if (v27 < *(float *)v17.i32) {
        goto LABEL_17;
      }
LABEL_18:
      --v29;
      if (__CFADD__(v30++, 1)) {
        goto LABEL_20;
      }
    }
    if (v27 > *(float *)v17.i32) {
      goto LABEL_18;
    }
LABEL_17:
    char v43 = 1;
    double v42 = v34;
    double v25 = v37;
    double v24 = v33;
    uint64_t v26 = v46;
    int v23 = *(_DWORD *)(*v44 + 4 * v29);
    float v27 = *(float *)v17.i32;
    unsigned int v22 = a5 | 0x80000000;
    goto LABEL_18;
  }
  char v43 = 0;
  unsigned int v22 = 0;
  int v23 = 0;
  double v24 = 0.0;
  double v25 = 0.0;
  double v42 = 0.0;
  uint64_t v26 = 0;
  float v27 = 0.0;
LABEL_20:
  if (fabsf(v27) != INFINITY)
  {
    float v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v22 & 0x7FFFFFFF))
    {
      if (v39 > v27) {
        return 0.0;
      }
      goto LABEL_27;
    }
    if (v39 < v27)
    {
LABEL_27:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v22;
      *(_DWORD *)(a8 + 8) = v23;
      *(unsigned char *)(a8 + 40) = v43;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(void *)(a8 + 48) = v26;
      *(double *)(a8 + 56) = v24;
      *(double *)(a8 + 64) = v25;
      *(double *)(a8 + 72) = v42;
    }
  }
  return 0.0;
}

void sub_22E9A34B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
}

void *xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan@<X0>(void *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2) {
      goto LABEL_8;
    }
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  uint64_t v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 16 * a2;
  if (a3 && !v4) {
LABEL_8:
  }
    std::terminate();
  return result;
}

__n128 xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v48 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  unint64_t v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, v17, v64);
  unint64_t v58 = 0;
  int v59 = 0;
  memset(&__p, 0, sizeof(__p));
  char v61 = 0;
  v18.f64[1] = 0.0;
  int64x2_t v62 = 0u;
  float64x2_t v63 = 0u;
  unint64_t v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v56.f64[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v56.f64[0]) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v21 = *v8;
  uint64_t v22 = v8[1];
  uint64_t v23 = *(int *)(*v8 + 4 * a5);
  int v57 = *(_DWORD *)(*v8 + 4 * a5);
  if (v9 >= (v22 - v21) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v24 = *(_DWORD *)(v21 + 4 * v9);
  if (v24 == v23)
  {
    unsigned int v25 = 0;
    float v26 = 0.0;
    v18.f64[0] = 0.0;
    float64x2_t v52 = v18;
    goto LABEL_24;
  }
  uint64_t v45 = a8;
  unint64_t v27 = 0;
  unsigned int v25 = 0;
  uint64_t v28 = v15 + 24 * a6;
  int v44 = v23;
  int v29 = v24 - v23;
  int v46 = v23;
  uint64_t v30 = 4 * v23;
  float64x2_t v31 = 0uLL;
  int v47 = -1;
  float v26 = 0.0;
  do
  {
    if (*a3 <= v27) {
      goto LABEL_35;
    }
    unint64_t v32 = *(void *)(a3[1] + 8 * v27);
    if (v64[0] <= v32) {
      goto LABEL_35;
    }
    float64x2_t v31 = vaddq_f64(v31, *(float64x2_t *)(v64[1] + 16 * v32));
    int64x2_t v33 = (int64x2_t)vsubq_f64(*(float64x2_t *)v28, v31);
    int8x16_t v34 = (int8x16_t)vzip2q_s64(v33, (int64x2_t)v31);
    int8x16_t v35 = vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v35.i8 = vmovn_s64((int64x2_t)v35);
    *(int32x2_t *)v34.i8 = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v34.i8);
    if ((v35.i8[0] & 1) == 0)
    {
      int64x2_t v51 = v33;
      float64x2_t v53 = v31;
      *(int64x2_t *)std::vector<unsigned int>::value_type __x = v33;
      float64x2_t v56 = v31;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, v56.f64, v35, v34);
      float v37 = v36 - *(float *)(v28 + 16);
      if (fabsf(v37) == INFINITY)
      {
        float64x2_t v31 = v53;
        goto LABEL_18;
      }
      int v38 = *(_DWORD *)(*v48 + v30 + 4 * v27);
      float64x2_t v31 = v53;
      if ((v25 & 0x7FFFFFFF) <= a5)
      {
        int64x2_t v39 = v51;
        if (v26 >= v37) {
          goto LABEL_18;
        }
LABEL_17:
        unint64_t v58 = __PAIR64__(a5, LODWORD(v37));
        int v59 = v38;
        char v61 = 1;
        int v47 = v46 + v27;
        float v26 = v37;
        unsigned int v25 = a5;
        int64x2_t v62 = v39;
        float64x2_t v63 = v53;
        goto LABEL_18;
      }
      int64x2_t v39 = v51;
      if (v26 <= v37) {
        goto LABEL_17;
      }
    }
LABEL_18:
    ++v27;
  }
  while (v29 != v27);
  float64x2_t v52 = v31;
  a8 = v45;
  if (v47 != -1)
  {
    __x[0] = 0;
    std::vector<unsigned int>::resize(&__p, vcvtpd_u64_f64((double)v17 * 0.03125), __x);
    *(void *)&v56.f64[0] = __p.__end_ - __p.__begin_;
    *(void *)&v56.f64[1] = __p.__begin_;
    int v40 = v47 - v44 + 1;
    if (*a3 < v40) {
LABEL_35:
    }
      std::terminate();
    v55[0] = &v56;
    v55[1] = v48;
    void v55[2] = &v57;
    std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>(a3, 0, a3, v40, (uint64_t)v55, (uint64_t)__x);
    float v26 = *(float *)&v58;
    unsigned int v25 = HIDWORD(v58);
  }
LABEL_24:
  if (fabsf(v26) != INFINITY)
  {
    float v41 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFF))
    {
      if (v41 >= v26) {
        goto LABEL_32;
      }
    }
    else if (v41 > v26)
    {
      goto LABEL_32;
    }
    *(float *)a8 = v26;
    *(_DWORD *)(a8 + 4) = v25;
    *(_DWORD *)(a8 + 8) = v59;
    *(unsigned char *)(a8 + 40) = v61;
    if (&v58 != (unint64_t *)a8) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    }
    float64x2_t v42 = v63;
    *(int64x2_t *)(a8 + 48) = v62;
    *(float64x2_t *)(a8 + 64) = v42;
  }
LABEL_32:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return (__n128)v52;
}

void sub_22E9A3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float64_t xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  unsigned int v70 = a5;
  uint64_t v8 = *(void **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (uint64_t)(v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v47 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  unint64_t v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, v17, v69);
  uint64_t v63 = 0;
  __int32 v64 = 0;
  memset(&v65, 0, sizeof(v65));
  char v66 = 0;
  float64x2_t v67 = 0u;
  long long v68 = 0u;
  unint64_t v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v61) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v61) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int v21 = *(_DWORD *)(*v8 + 4 * v9);
  uint64_t v22 = *(int *)(*v8 + 4 * a5);
  if (v21 == v22)
  {
    unsigned int v23 = 0;
    float v24 = 0.0;
    v25.f64[0] = 0.0;
    goto LABEL_24;
  }
  unint64_t v44 = v17;
  uint64_t v45 = a8;
  unint64_t v26 = 0;
  unsigned int v23 = 0;
  uint64_t v27 = v15 + 24 * a6;
  char v43 = v8;
  uint64_t v28 = v21 - 1 - v22 + 1;
  uint64_t v29 = 4 * (v21 - 1);
  float64x2_t v25 = 0uLL;
  int v46 = -1;
  float v24 = 0.0;
  int v42 = v21 - 1;
  int v30 = v21 - 1;
  do
  {
    if (*a3 <= v26) {
      goto LABEL_37;
    }
    unint64_t v31 = *(void *)(a3[1] + 8 * v26);
    if (v69[0] <= v31) {
      goto LABEL_37;
    }
    int8x16_t v33 = *(int8x16_t *)(v69[1] + 16 * v31);
    float64x2_t v25 = vaddq_f64(v25, (float64x2_t)v33);
    double v32 = *(double *)(v27 + 8) - v25.f64[1];
    *(double *)v33.i64 = *(float *)(a1 + 32);
    if (v32 >= *(double *)v33.i64 && v25.f64[1] >= *(double *)v33.i64)
    {
      v33.i64[0] = *(void *)v27;
      double v35 = *(double *)v27 - v25.f64[0];
      float64x2_t v50 = v25;
      *(float64x2_t *)std::vector<unsigned int>::value_type __x = v25;
      int64_t v61 = *(void *)&v35;
      std::vector<unsigned int>::pointer begin = *(std::vector<unsigned int>::pointer *)&v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, (double *)&v61, v33, v18);
      *(double *)v18.i64 = *(float *)(v27 + 16);
      float v37 = v36 - *(double *)v18.i64;
      *(float *)v18.i32 = fabsf(v37);
      if (*(float *)v18.i32 == INFINITY)
      {
        float64x2_t v25 = v50;
        goto LABEL_20;
      }
      v18.i32[0] = *(_DWORD *)(*v47 + v29);
      float64x2_t v25 = v50;
      if ((v23 & 0x7FFFFFFF) <= a5)
      {
        if (v24 >= v37) {
          goto LABEL_20;
        }
LABEL_19:
        *(float *)&uint64_t v63 = v37;
        unsigned int v23 = a5 | 0x80000000;
        HIDWORD(v63) = a5 | 0x80000000;
        __int32 v64 = v18.i32[0];
        char v66 = 1;
        float64x2_t v67 = v50;
        float v24 = v37;
        int v46 = v30;
        *(double *)&long long v68 = v35;
        *((double *)&v68 + 1) = v32;
        goto LABEL_20;
      }
      if (v24 <= v37) {
        goto LABEL_19;
      }
    }
LABEL_20:
    ++v26;
    --v30;
    v29 -= 4;
  }
  while (v28 != v26);
  a8 = v45;
  if (v46 != -1)
  {
    float64_t v51 = v25.f64[0];
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v65, vcvtpd_u64_f64((double)v44 * 0.03125), __x);
    int64_t v61 = v65.__end_ - v65.__begin_;
    std::vector<unsigned int>::pointer begin = v65.__begin_;
    unint64_t v38 = *a3;
    v60[0] = a3;
    v60[1] = v38;
    _OWORD v60[2] = a3;
    v60[3] = v38;
    if (v38 < v42 - v46) {
LABEL_37:
    }
      std::terminate();
    float64x2_t v56 = a3;
    unint64_t v57 = v38 - (v42 - v46);
    unint64_t v58 = a3;
    unint64_t v59 = v57;
    v55[0] = &v61;
    v55[1] = v47;
    void v55[2] = v43;
    void v55[3] = &v70;
    std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>((uint64_t)v60, (uint64_t)&v56, (uint64_t)v55, __x);
    float v24 = *(float *)&v63;
    unsigned int v23 = HIDWORD(v63);
    v25.f64[0] = v51;
  }
LABEL_24:
  if (fabsf(v24) != INFINITY)
  {
    float v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v23 & 0x7FFFFFFF))
    {
      if (v39 >= v24) {
        goto LABEL_34;
      }
    }
    else if (v39 > v24)
    {
      goto LABEL_34;
    }
    *(float *)a8 = v24;
    *(_DWORD *)(a8 + 4) = v23;
    *(_DWORD *)(a8 + 8) = v64;
    *(unsigned char *)(a8 + 40) = v66;
    if (&v63 != (uint64_t *)a8)
    {
      float64_t v52 = v25.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)v65.__begin_, (uint64_t)v65.__end_, v65.__end_ - v65.__begin_);
      v25.f64[0] = v52;
    }
    long long v40 = v68;
    *(float64x2_t *)(a8 + 48) = v67;
    *(_OWORD *)(a8 + 64) = v40;
  }
LABEL_34:
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    float64_t v53 = v25.f64[0];
    operator delete(v65.__begin_);
    v25.f64[0] = v53;
  }
  return v25.f64[0];
}

void sub_22E9A4080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  long long v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(void *)(v38 - 208) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    goto LABEL_31;
  }
  float v41 = *(void **)(a2 + 8);
  uint64_t v15 = *(void *)(a1 + 296);
  unint64_t v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v46);
  unint64_t v17 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v44[0]) = 0x7FFFFFFF;
  if ((*v17 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int8x16_t v18 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v44[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v19 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
LABEL_31:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  unint64_t v20 = *(int *)(v19 + 4 * a5);
  int v21 = *(_DWORD *)(v19 + 4 * v9);
  if (v21 != v20)
  {
    unsigned int v22 = 0;
    int8x16_t v28 = 0uLL;
    uint64_t v29 = v15 + 24 * a6;
    int v30 = v21 - v20;
    float v27 = 0.0;
    double v40 = 0.0;
    double v25 = 0.0;
    uint64_t v24 = 0;
    int v23 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      if (*a4 <= v20) {
        std::terminate();
      }
      int8x16_t v33 = *(int8x16_t *)(a4[1] + 16 * v20);
      int8x16_t v28 = (int8x16_t)vaddq_f64((float64x2_t)v28, (float64x2_t)v33);
      uint64_t v31 = v28.i64[1];
      double v32 = *(double *)(v29 + 8) - *(double *)&v28.i64[1];
      *(double *)v33.i64 = *(float *)(a1 + 32);
      if (*(double *)&v28.i64[1] < *(double *)v33.i64 || v32 < *(double *)v33.i64) {
        goto LABEL_20;
      }
      v33.i64[0] = *(void *)v29;
      double v35 = *(double *)v29 - *(double *)v28.i64;
      int8x16_t v43 = v28;
      int8x16_t v45 = v28;
      v44[0] = v35;
      v44[1] = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v45.i64, v44, v28, v33);
      float v37 = v36 - *(float *)(v29 + 16);
      if (fabsf(v37) == INFINITY)
      {
        int8x16_t v28 = v43;
      }
      else
      {
        if ((v22 & 0x7FFFFFFF) > a5)
        {
          int8x16_t v28 = v43;
          if (v27 > v37) {
            goto LABEL_20;
          }
LABEL_19:
          double v40 = v32;
          double v25 = v35;
          uint64_t v24 = v31;
          uint64_t v26 = v28.i64[0];
          int v23 = *(_DWORD *)(*v41 + 4 * v20);
          float v27 = v37;
          unsigned int v22 = a5;
          goto LABEL_20;
        }
        int8x16_t v28 = v43;
        if (v27 < v37) {
          goto LABEL_19;
        }
      }
LABEL_20:
      ++v20;
      if (!--v30) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  double v25 = 0.0;
  double v40 = 0.0;
  uint64_t v26 = 0;
  float v27 = 0.0;
LABEL_21:
  if (fabsf(v27) != INFINITY)
  {
    float v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v22 & 0x7FFFFFFF))
    {
      if (v38 >= v27) {
        return;
      }
    }
    else if (v38 > v27)
    {
      return;
    }
    *(float *)a8 = v27;
    *(_DWORD *)(a8 + 4) = v22;
    *(_DWORD *)(a8 + 8) = v23;
    *(unsigned char *)(a8 + 40) = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
    *(void *)(a8 + 48) = v26;
    *(void *)(a8 + 56) = v24;
    *(double *)(a8 + 64) = v25;
    *(double *)(a8 + 72) = v40;
  }
}

void sub_22E9A4538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
}

float64_t xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  unint64_t v9 = a5 + 1;
  uint64_t v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v48 = *(void **)(a2 + 8);
  uint64_t v16 = *(void *)(a1 + 296);
  unint64_t v17 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v17, *(_DWORD *)(v10 + 4 * v9) - (int)v17, v56);
  int8x16_t v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v54.f64[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  uint64_t v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v54.f64[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0) {
    dmlc::LogCheckFormat<unsigned int,unsigned int>();
  }
  int v20 = *(_DWORD *)(*v8 + 4 * a5);
  uint64_t v21 = *(int *)(*v8 + 4 * v9);
  if (v21 == v20)
  {
    unsigned int v47 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    float64_t v24 = 0.0;
    float64_t v25 = 0.0;
    uint64_t v26 = 0;
    float v27 = 0.0;
    v28.f64[0] = 0.0;
    goto LABEL_22;
  }
  uint64_t v29 = a2;
  uint64_t v46 = a8;
  uint64_t v30 = v16;
  uint64_t v31 = (float64x2_t *)(v16 + 24 * a6);
  float64x2_t v28 = 0uLL;
  double v32 = (float *)(v30 + 24 * a6 + 16);
  unsigned int v47 = 0;
  unint64_t v33 = v21 - 1;
  float v27 = 0.0;
  float64_t v25 = 0.0;
  float64_t v24 = 0.0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v26 = 0;
  do
  {
    if (*a4 <= v33) {
      std::terminate();
    }
    LODWORD(v21) = v21 - 1;
    float64x2_t v28 = vaddq_f64(v28, *(float64x2_t *)(a4[1] + 16 * v33));
    int64x2_t v34 = (int64x2_t)vsubq_f64(*v31, v28);
    int8x16_t v35 = (int8x16_t)vzip2q_s64(v34, (int64x2_t)v28);
    int8x16_t v36 = vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v36.i8 = vmovn_s64((int64x2_t)v36);
    if ((v36.i32[1] | v36.i32[0]))
    {
      int v37 = v33;
      goto LABEL_20;
    }
    int64x2_t v51 = v34;
    float64x2_t v52 = v28;
    float64x2_t v54 = v28;
    int64x2_t v55 = v34;
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v55.i64, v54.f64, v36, v35);
    float v39 = v38 - *v32;
    unint64_t v40 = v33 - 1;
    float v41 = *(void **)(v29 + 24);
    if (v20 == v33) {
      unint64_t v40 = a5;
    }
    else {
      float v41 = v48;
    }
    if (fabsf(v39) == INFINITY)
    {
      int v37 = v21;
      float64x2_t v28 = v52;
      goto LABEL_20;
    }
    int v42 = *(_DWORD *)(*v41 + 4 * v40);
    if ((v47 & 0x7FFFFFFF) <= a5)
    {
      int64x2_t v43 = v51;
      float64x2_t v28 = v52;
      if (v27 >= v39)
      {
LABEL_17:
        int v37 = v21;
        goto LABEL_20;
      }
    }
    else
    {
      int64x2_t v43 = v51;
      float64x2_t v28 = v52;
      if (v27 > v39) {
        goto LABEL_17;
      }
    }
    uint64_t v23 = v43.i64[1];
    int v37 = v21;
    float64_t v25 = v28.f64[1];
    float64_t v24 = v28.f64[0];
    uint64_t v26 = v43.i64[0];
    int v22 = v42;
    float v27 = v39;
    unsigned int v47 = a5 | 0x80000000;
LABEL_20:
    --v33;
  }
  while (v37 != v20);
  a8 = v46;
LABEL_22:
  if (fabsf(v27) != INFINITY)
  {
    float v44 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v47 & 0x7FFFFFFF))
    {
      if (v44 < v27) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v44 > v27) {
        return v28.f64[0];
      }
LABEL_29:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v47;
      *(_DWORD *)(a8 + 8) = v22;
      *(unsigned char *)(a8 + 40) = 0;
      float64_t v53 = v28.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      v28.f64[0] = v53;
      *(void *)(a8 + 48) = v26;
      *(void *)(a8 + 56) = v23;
      *(float64_t *)(a8 + 64) = v24;
      *(float64_t *)(a8 + 72) = v25;
    }
  }
  return v28.f64[0];
}

void sub_22E9A4A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, int8x16_t a7, int8x16_t a8)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v11 = *(a2 - 1);
      unint64_t v12 = (unint64_t *)a3[2];
      if (*v12 <= v11
        || (unint64_t v13 = *a1,
            uint64_t v14 = (float *)a3[1],
            *(double *)v15.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a3, v14, (double *)(v12[1] + 16 * v11)), unint64_t v17 = (unint64_t *)a3[2], *v17 <= v13))
      {
        std::terminate();
      }
      if (*(double *)v15.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v15, v16, *a3, v14, (double *)(v17[1] + 16 * v13)))
      {
        unint64_t v18 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v18;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = (uint64_t *)&a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a7, a8);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v22], v27, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>((unint64_t *)a5, (unint64_t *)&a5[v22], &a5[v22], &a5[a4], a1, a3, v29, v30);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v25, v26);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, (unint64_t *)a2, a3, a7, a8);
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, int8x16_t a4, int8x16_t a5)
{
  if (a1 != a2)
  {
    std::mutex v7 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a1;
      do
      {
        unint64_t v11 = v7;
        unint64_t v12 = *v7;
        unint64_t v13 = (unint64_t *)a3[2];
        if (*v13 <= v12
          || (unint64_t v14 = *v10,
              int8x16_t v15 = (float *)a3[1],
              *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *a3, v15, (double *)(v13[1] + 16 * v12)), unint64_t v18 = (unint64_t *)a3[2], *v18 <= v14))
        {
LABEL_17:
          std::terminate();
        }
        double v19 = *(double *)v16.i64;
        *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v16, v17, *a3, v15, (double *)(v18[1] + 16 * v14));
        if (v19 < *(double *)a4.i64)
        {
          unint64_t v20 = *v11;
          uint64_t v21 = v9;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v21 + 8) = *(unint64_t *)((char *)a1 + v21);
            if (!v21) {
              break;
            }
            unint64_t v22 = (unint64_t *)a3[2];
            if (*v22 <= v20) {
              goto LABEL_17;
            }
            unint64_t v23 = *(unint64_t *)((char *)a1 + v21 - 8);
            unint64_t v24 = (float *)a3[1];
            *(double *)v25.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *a3, v24, (double *)(v22[1] + 16 * v20));
            int8x16_t v27 = (unint64_t *)a3[2];
            if (*v27 <= v23) {
              goto LABEL_17;
            }
            double v28 = *(double *)v25.i64;
            *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v25, v26, *a3, v24, (double *)(v27[1] + 16 * v23));
            v21 -= 8;
            if (v28 >= *(double *)a4.i64)
            {
              int8x16_t v29 = (unint64_t *)((char *)a1 + v21 + 8);
              goto LABEL_14;
            }
          }
          int8x16_t v29 = a1;
LABEL_14:
          *int8x16_t v29 = v20;
        }
        std::mutex v7 = v11 + 1;
        v9 += 8;
        uint64_t v10 = v11;
      }
      while (v11 + 1 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, int8x16_t a6, int8x16_t a7)
{
  if (a4)
  {
    if (a4 == 2)
    {
      unint64_t v12 = *(a2 - 1);
      unint64_t v13 = (unint64_t *)a3[2];
      if (*v13 <= v12
        || (unint64_t v14 = *a1,
            int8x16_t v15 = (float *)a3[1],
            *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a6, a7, *a3, v15, (double *)(v13[1] + 16 * v12)), unint64_t v18 = (unint64_t *)a3[2], *v18 <= v14))
      {
        std::terminate();
      }
      if (*(double *)v16.i64 >= xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v16, v17, *a3, v15, (double *)(v18[1] + 16 * v14)))
      {
        *a5 = *a1;
        unint64_t v19 = *(a2 - 1);
      }
      else
      {
        *a5 = *(a2 - 1);
        unint64_t v19 = *a1;
      }
      a5[1] = v19;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], (uint64_t *)&a1[a4 >> 1], a2, a5, a3, v20, v21);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((uint64_t *)a1, a2, a5, a3, a6, a7);
    }
  }
}

void std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      uint64_t v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    unint64_t v13 = a1;
    while (a3 != a4)
    {
      unint64_t v14 = (void *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (unint64_t v15 = *v13,
            int8x16_t v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 < *(double *)a7.i64) {
        int8x16_t v21 = a3;
      }
      else {
        int8x16_t v21 = v13;
      }
      v13 += v20 >= *(double *)a7.i64;
      a3 += v20 < *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2) {
        goto LABEL_12;
      }
    }
    if (v13 != a2)
    {
      uint64_t v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if (a6)
  {
    uint64_t v11 = a6;
    do
    {
      if (a5 <= a8 || v11 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v11, a7, a9, a10);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        int8x16_t v18 = (void *)a4[2];
        if (*v18 <= *(void *)a2
          || (unint64_t v19 = *(void *)&a1[8 * v17],
              double v20 = (float *)a4[1],
              *(double *)v21.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a9, a10, *a4, v20, (double *)(v18[1] + 16 * *(void *)a2)), uint64_t v23 = (unint64_t *)a4[2], *v23 <= v19))
        {
          std::terminate();
        }
        double v24 = *(double *)v21.i64;
        *(double *)a9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v21, v22, *a4, v20, (double *)(v23[1] + 16 * v19));
        if (v24 < *(double *)a9.i64) {
          break;
        }
        ++v17;
        v16 -= 8;
        if (a5 == v17) {
          return;
        }
      }
      float v39 = &a1[-v16];
      uint64_t v40 = a8;
      if (a5 - v17 >= v11)
      {
        if (a5 - 1 == v17)
        {
          uint64_t v36 = *(void *)&a1[8 * v17];
          *(void *)&a1[8 * v17] = *(void *)a2;
          *(void *)a2 = v36;
          return;
        }
        uint64_t v30 = (a5 - v17) / 2;
        int8x16_t v43 = *(int8x16_t *)a4;
        int8x16_t v29 = (unint64_t *)&a1[8 * v30 - v16];
        uint64_t v44 = a4[2];
        char v45 = 0;
        double v38 = (char *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(a2, a3, v29, v43.i64, v43, a10);
        uint64_t v26 = (v38 - a2) >> 3;
      }
      else
      {
        if (v11 >= 0) {
          uint64_t v25 = v11;
        }
        else {
          uint64_t v25 = v11 + 1;
        }
        uint64_t v26 = v25 >> 1;
        double v38 = &a2[8 * (v25 >> 1)];
        int8x16_t v27 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(&a1[-v16], a2, v38, a4, a9, a10);
        uint64_t v28 = v27 - a1 + v16;
        int8x16_t v29 = (unint64_t *)v27;
        uint64_t v30 = v28 >> 3;
      }
      uint64_t v37 = a5 - v30 - v17;
      uint64_t v31 = v11 - v26;
      double v32 = a2;
      a2 = v38;
      unint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)v29, v32, v38);
      a1 = v33;
      if (v30 + v26 >= v11 + a5 - (v30 + v26) - v17)
      {
        int8x16_t v35 = v33;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v33, v38, a3, a4, v37, v11 - v26, a7, v40);
        a1 = v39;
        a2 = (char *)v29;
        uint64_t v31 = v26;
        a5 = v30;
        a8 = v40;
        a3 = v35;
      }
      else
      {
        uint64_t v34 = v30;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v29, v33, a4, v34, v26, a7, v40);
        a5 = v37;
      }
      uint64_t v11 = v31;
    }
    while (v31);
  }
}

double xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(int8x16_t a1, int8x16_t a2, uint64_t a3, float *a4, double *a5)
{
  double v5 = a5[1];
  a2.i64[0] = 0;
  BOOL v6 = v5 <= 0.0 || v5 < a4[8];
  if (!v6)
  {
    double v7 = *a5;
    float v8 = a4[10];
    double v9 = v8;
    BOOL v6 = *a5 < (float)-v8;
    double v10 = *a5 + v8;
    if (!v6) {
      double v10 = 0.0;
    }
    BOOL v11 = v7 <= v9;
    double v12 = v7 - v9;
    if (v11) {
      double v12 = v10;
    }
    *(double *)a2.i64 = -v12 / (v5 + a4[9]);
    float v13 = a4[11];
    if (v13 != 0.0)
    {
      *(double *)a1.i64 = v13;
      if (fabs(*(double *)a2.i64) > *(double *)a1.i64)
      {
        v14.f64[0] = NAN;
        v14.f64[1] = NAN;
        a2.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v14), a1, a2).u64[0];
      }
    }
  }
  return (float)*(double *)a2.i64;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a1 != a2)
  {
    float v8 = a1 + 1;
    *a3 = *a1;
    if (a1 + 1 != a2)
    {
      uint64_t v10 = 0;
      BOOL v11 = a3;
      do
      {
        double v12 = (void *)a4[2];
        if (*v12 <= (unint64_t)*v8
          || (float v13 = v11,
              unint64_t v15 = *v11,
              ++v11,
              unint64_t v14 = v15,
              uint64_t v16 = (float *)a4[1],
              *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v16, (double *)(v12[1] + 16 * *v8)), unint64_t v19 = (unint64_t *)a4[2], *v19 <= v15))
        {
LABEL_17:
          std::terminate();
        }
        double v20 = *(double *)v17.i64;
        *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a4, v16, (double *)(v19[1] + 16 * v14));
        int8x16_t v21 = v11;
        if (v20 < *(double *)a5.i64)
        {
          v13[1] = *v13;
          int8x16_t v21 = a3;
          if (v13 != a3)
          {
            uint64_t v22 = v10;
            while (1)
            {
              uint64_t v23 = (void *)a4[2];
              if (*v23 <= (unint64_t)*v8) {
                goto LABEL_17;
              }
              unint64_t v24 = *(uint64_t *)((char *)a3 + v22 - 8);
              uint64_t v25 = (float *)a4[1];
              *(double *)v26.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v25, (double *)(v23[1] + 16 * *v8));
              uint64_t v28 = (unint64_t *)a4[2];
              if (*v28 <= v24) {
                goto LABEL_17;
              }
              double v29 = *(double *)v26.i64;
              *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v26, v27, *a4, v25, (double *)(v28[1] + 16 * v24));
              if (v29 >= *(double *)a5.i64) {
                break;
              }
              *(uint64_t *)((char *)a3 + v22) = *(uint64_t *)((char *)a3 + v22 - 8);
              v22 -= 8;
              if (!v22)
              {
                int8x16_t v21 = a3;
                goto LABEL_15;
              }
            }
            int8x16_t v21 = (uint64_t *)((char *)a3 + v22);
          }
        }
LABEL_15:
        uint64_t v30 = *v8++;
        uint64_t *v21 = v30;
        v10 += 8;
      }
      while (v8 != a2);
    }
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      uint64_t v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    float v13 = a1;
    while (a3 != a4)
    {
      unint64_t v14 = (void *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (unint64_t v15 = *v13,
            uint64_t v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 >= *(double *)a7.i64) {
        int8x16_t v21 = v13;
      }
      else {
        int8x16_t v21 = a3;
      }
      a3 += v20 < *(double *)a7.i64;
      v13 += v20 >= *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2) {
        goto LABEL_12;
      }
    }
    if (v13 != a2)
    {
      uint64_t v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src, int8x16_t a8, int8x16_t a9)
{
  if (a5 <= a6)
  {
    unint64_t v14 = __src;
    if (__dst != a2)
    {
      unint64_t v14 = __src;
      unint64_t v15 = __dst;
      do
      {
        uint64_t v16 = *(void *)v15;
        v15 += 8;
        *(void *)unint64_t v14 = v16;
        v14 += 8;
      }
      while (v15 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(__src, v14, a2, a3, __dst, a4, a8, a9);
  }
  else
  {
    BOOL v11 = __src;
    if (a2 != a3)
    {
      BOOL v11 = __src;
      double v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        *(void *)BOOL v11 = v13;
        v11 += 8;
      }
      while (v12 != a3);
    }
    int8x16_t v17 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a8, a9, (uint64_t)v11, (uint64_t)v11, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)__dst, (uint64_t)__dst, (uint64_t)a3, (uint64_t)a3, &v17);
  }
}

void *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(void *a1, void *a2, void *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a2 != a1)
  {
    float v8 = a1;
    unint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = (void *)a4[2];
      if (*v10 <= *a3
        || (BOOL v11 = &v8[v9 >> 1],
            unint64_t v12 = *v11,
            uint64_t v13 = (float *)a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v13, (double *)(v10[1] + 16 * *a3)), uint64_t v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      double v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v14, v15, *a4, v13, (double *)(v16[1] + 16 * v12));
      if (v17 < *(double *)a5.i64)
      {
        v9 >>= 1;
      }
      else
      {
        float v8 = v11 + 1;
        v9 += ~(v9 >> 1);
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3, char *a4, void *__dst, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  if (__src != a2)
  {
    uint64_t v13 = __src;
    while (a3 != a4)
    {
      int8x16_t v14 = (void *)a6[2];
      if (*v14 <= *(void *)a3
        || (unint64_t v15 = *(void *)v13,
            uint64_t v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *(void *)a3)), unint64_t v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      double v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 >= *(double *)a7.i64) {
        int8x16_t v21 = v13;
      }
      else {
        int8x16_t v21 = a3;
      }
      a3 += 8 * (v20 < *(double *)a7.i64);
      v13 += 8 * (v20 >= *(double *)a7.i64);
      *__dst++ = *(void *)v21;
      if (v13 == a2) {
        return;
      }
    }
    memmove(__dst, v13, a2 - v13);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13)
{
  if (a4 != a6)
  {
    uint64_t v16 = a4;
    int8x16_t v17 = (void *)(a12 - 8);
    while (a8 != a10)
    {
      BOOL v18 = std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(a13, (unint64_t *)(a8 - 8), (void *)(v16 - 8), a1, a2);
      if (v18) {
        uint64_t v19 = a8;
      }
      else {
        uint64_t v19 = v16;
      }
      if (v18) {
        a8 -= 8;
      }
      else {
        v16 -= 8;
      }
      *v17-- = *(void *)(v19 - 8);
      if (v16 == a6) {
        return;
      }
    }
    uint64_t v20 = 0;
    do
    {
      v17[v20] = *(void *)(v16 + v20 * 8 - 8);
      --v20;
    }
    while (v16 + v20 * 8 != a6);
  }
}

BOOL std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(uint64_t **a1, unint64_t *a2, void *a3, int8x16_t a4, int8x16_t a5)
{
  double v5 = *a1;
  BOOL v6 = (void *)(*a1)[2];
  if (*v6 <= *a3
    || (unint64_t v7 = *a2,
        float v8 = (float *)v5[1],
        *(double *)v9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *v5, v8, (double *)(v6[1] + 16 * *a3)), BOOL v11 = (unint64_t *)v5[2], *v11 <= v7))
  {
    std::terminate();
  }
  return *(double *)v9.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v9, v10, *v5, v8, (double *)(v11[1] + 16 * v7));
}

void *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(void *a1, void *a2, unint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  if (a2 != a1)
  {
    float v8 = a1;
    unint64_t v9 = a2 - a1;
    do
    {
      int8x16_t v10 = &v8[v9 >> 1];
      BOOL v11 = (void *)a4[2];
      if (*v11 <= *v10
        || (unint64_t v12 = *a3,
            uint64_t v13 = (float *)a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v13, (double *)(v11[1] + 16 * *v10)), uint64_t v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      double v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v14, v15, *a4, v13, (double *)(v16[1] + 16 * v12));
      if (v17 >= *(double *)a5.i64) {
        v9 >>= 1;
      }
      else {
        v9 += ~(v9 >> 1);
      }
      if (v17 < *(double *)a5.i64) {
        float v8 = v10 + 1;
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

uint64_t xgboost::data::__dmlc_registry_file_tag_gradient_index_format__(xgboost::data *this)
{
  return 0;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24BCA8;
  return result;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24BCA8;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::target_type()
{
}

void xgboost::data::GHistIndexRawFormat::~GHistIndexRawFormat(xgboost::data::GHistIndexRawFormat *this)
{
}

BOOL xgboost::data::GHistIndexRawFormat::Read(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, unint64_t *, uint64_t))
{
  double v5 = *(unint64_t ***)(a2 + 120);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8) {
    return 0;
  }
  std::vector<char>::pointer begin = __sz.__begin_;
  std::vector<float>::resize((uint64_t)v5, (unint64_t)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, *v5, 4 * (void)begin) != 4 * (void)begin) {
      return 0;
    }
  }
  unint64_t v7 = *(std::vector<unsigned int> **)(a2 + 128);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8) {
    return 0;
  }
  std::vector<char>::pointer v8 = __sz.__begin_;
  std::vector<unsigned int>::resize(v7, (std::vector<unsigned int>::size_type)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, (unint64_t *)v7->__begin_, 4 * (void)v8) != 4 * (void)v8) {
      return 0;
    }
  }
  unint64_t v9 = *(unint64_t ***)(a2 + 136);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8) {
    return 0;
  }
  std::vector<char>::pointer v10 = __sz.__begin_;
  std::vector<float>::resize((uint64_t)v9, (unint64_t)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, *v9, 4 * (void)v10) != 4 * (void)v10) {
      return 0;
    }
  }
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) == 8)
  {
    std::vector<char>::pointer v11 = __sz.__begin_;
    std::vector<unsigned long>::resize(a2, (unint64_t)__sz.__begin_);
    if (__sz.__begin_) {
      (**a3)(a3, *(unint64_t **)a2, 8 * (void)v11);
    }
  }
  memset(&__sz, 0, sizeof(__sz));
  unint64_t v32 = 0;
  if ((**a3)(a3, &v32, 8) != 8) {
    goto LABEL_47;
  }
  unint64_t v12 = v32;
  if (v32 <= __sz.__end_ - __sz.__begin_)
  {
    unint64_t v13 = v32;
    if (v32 < __sz.__end_ - __sz.__begin_)
    {
      __sz.__end_ = &__sz.__begin_[v32];
      unint64_t v13 = v32;
    }
  }
  else
  {
    std::vector<char>::__append(&__sz, v32 - (__sz.__end_ - __sz.__begin_));
    unint64_t v13 = v32;
  }
  if (v13 && (**a3)(a3, (unint64_t *)__sz.__begin_, v12) != v12) {
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)(a2 + 24);
  std::vector<char>::pointer v17 = __sz.__begin_;
  std::vector<char>::pointer end = __sz.__end_;
  unint64_t v19 = *(void *)(a2 + 32) - v16;
  BOOL v20 = __sz.__end_ - __sz.__begin_ >= v19;
  std::vector<char>::size_type v21 = __sz.__end_ - __sz.__begin_ - v19;
  if (v21 != 0 && v20)
  {
    std::vector<char>::__append((std::vector<char> *)(a2 + 24), v21);
    std::vector<char>::pointer v17 = __sz.__begin_;
    std::vector<char>::pointer end = __sz.__end_;
  }
  else if (!v20)
  {
    *(void *)(a2 + 32) = v16 + __sz.__end_ - __sz.__begin_;
  }
  if (end != v17) {
    memmove(*(void **)(a2 + 24), v17, end - v17);
  }
  int v30 = 0;
  if ((**a3)(a3, (unint64_t *)&v30, 4) != 4) {
    goto LABEL_47;
  }
  int v22 = v30;
  *(_DWORD *)(a2 + 72) = v30;
  switch(v22)
  {
    case 4:
      uint64_t v23 = xgboost::common::Index::GetValueFromUint32;
      goto LABEL_36;
    case 2:
      uint64_t v23 = xgboost::common::Index::GetValueFromUint16;
      goto LABEL_36;
    case 1:
      uint64_t v23 = xgboost::common::Index::GetValueFromUint8;
LABEL_36:
      *(void *)(a2 + 80) = v23;
      goto LABEL_38;
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/hist_util.h");
  uint64_t v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
  int8x16_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: binTypeSize == kUint8BinsTypeSize || binTypeSize == kUint16BinsTypeSize || binTypeSize == kUint32BinsTypeSize", 123);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
LABEL_38:
  unint64_t v32 = 0;
  if ((**a3)(a3, &v32, 8) == 8)
  {
    unint64_t v27 = v32;
    std::vector<unsigned long>::resize(a2 + 88, v32);
    if ((!v32 || (**a3)(a3, *(unint64_t **)(a2 + 88), 8 * v27) == 8 * v27)
      && (**a3)(a3, (unint64_t *)(a2 + 144), 8) == 8
      && (**a3)(a3, (unint64_t *)(a2 + 152), 8) == 8)
    {
      LOBYTE(v32) = 0;
      uint64_t v28 = (**a3)(a3, &v32, 1);
      BOOL v14 = v28 == 1;
      if (v28 == 1)
      {
        int v29 = v32;
        *(unsigned char *)(a2 + 192) = v32;
        if (v29) {
          xgboost::common::Index::SetBinOffset((std::vector<unsigned int> *)(a2 + 24), *(const void ***)(a2 + 128));
        }
        xgboost::common::ColumnMatrix::Read(*(std::vector<char> **)(a2 + 160), a3, **(char ***)(a2 + 128));
      }
      goto LABEL_48;
    }
  }
LABEL_47:
  BOOL v14 = 0;
LABEL_48:
  if (__sz.__begin_)
  {
    __sz.__end_ = __sz.__begin_;
    operator delete(__sz.__begin_);
  }
  return v14;
}

void sub_22E9A6274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::data::GHistIndexRawFormat::Write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(void **)(a2 + 120);
  __dst[0] = (void *)((uint64_t)(v5[1] - *v5) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a3 + 8))(a3, __dst, 8);
  if (__dst[0]) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 8))(a3, *v5, v5[1] - *v5);
  }
  BOOL v6 = *(uint64_t **)(a2 + 120);
  unint64_t v7 = *(void **)(a2 + 128);
  uint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  __dst[0] = (void *)((uint64_t)(v7[1] - *v7) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a3 + 8))(a3, __dst, 8);
  if (__dst[0]) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 8))(a3, *v7, v7[1] - *v7);
  }
  std::vector<char>::pointer v10 = *(void **)(a2 + 136);
  int64x2_t v24 = *(int64x2_t *)*(void *)(a2 + 128);
  __dst[0] = (void *)((uint64_t)(v10[1] - *v10) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a3 + 8))(a3, __dst, 8);
  if (__dst[0]) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 8))(a3, *v10, v10[1] - *v10);
  }
  int64x2_t v23 = *(int64x2_t *)*(void *)(a2 + 136);
  __dst[0] = (void *)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a3 + 8))(a3, __dst, 8);
  if (__dst[0]) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 8))(a3, *(void *)a2, *(void *)(a2 + 8) - *(void *)a2);
  }
  int64x2_t v22 = *(int64x2_t *)a2;
  unint64_t v12 = *(unsigned char **)(a2 + 24);
  std::vector<char>::pointer v11 = *(unsigned char **)(a2 + 32);
  __dst[1] = 0;
  uint64_t v27 = 0;
  __dst[0] = 0;
  size_t v13 = v11 - v12;
  if (v11 == v12)
  {
    unint64_t v15 = 0;
  }
  else
  {
    std::vector<char>::__vallocate[abi:ne180100](__dst, v11 - v12);
    BOOL v14 = __dst[1];
    memmove(__dst[1], v12, v13);
    __dst[1] = &v14[v13];
    unint64_t v15 = &v14[v13] - (char *)__dst[0];
  }
  uint64_t v28 = v15;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v28, 8);
  if (v28) {
    (*(void (**)(uint64_t, void *, int64_t))(*(void *)a3 + 8))(a3, __dst[0], (char *)__dst[1] - (char *)__dst[0]);
  }
  int64x2_t v21 = *(int64x2_t *)__dst;
  int v25 = *(_DWORD *)(a2 + 72);
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 8))(a3, &v25, 4);
  uint64_t v28 = (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v28, 8);
  if (v28) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 8))(a3, *(void *)(a2 + 88), *(void *)(a2 + 96) - *(void *)(a2 + 88));
  }
  int64x2_t v20 = *(int64x2_t *)(a2 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, a2 + 144, 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, a2 + 152, 8);
  LOBYTE(v28) = *(unsigned char *)(a2 + 192);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v28, 1);
  uint64_t v16 = xgboost::common::ColumnMatrix::Write(*(void **)(a2 + 160), a3);
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  v17.i64[0] = v8;
  v17.i64[1] = v9 + 69;
  int64x2_t v18 = vaddq_s64(v17, vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v24, v23), v22), v21), v20));
  return vsubq_s64(vdupq_laneq_s64(v18, 1), v18).u64[0] + v16;
}

void sub_22E9A6770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<float>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A6810(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A68CC(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A698C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<float>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<float>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<float>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<float>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<float>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<float>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<float>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<float>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<float>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<float>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

float ***xgboost::HostDeviceVector<float>::Fill(float ***result, float a2)
{
  uint64_t v2 = **result;
  uint64_t v3 = (char *)(*result)[1] - (char *)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<float>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9A6DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<float>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9A6EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<float>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 4 * a3);
  }
  return result;
}

void sub_22E9A702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<float>::Extend(void **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<float>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) + (v5 >> 2));
  BOOL v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    uint64_t v8 = (void *)(**a1 + 4 * (v5 >> 2));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<float>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<float>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<float>::Resize(uint64_t *a1, unint64_t a2, float a3)
{
  float v3 = a3;
  std::vector<float>::resize(*a1, a2, &v3);
}

void xgboost::HostDeviceVector<double>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A71C0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A727C(_Unwind_Exception *a1)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A7374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x230FA80D0](v11, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<double>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    float v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<double>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<double>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<double>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<double>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<double>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<double>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<double>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<double>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<double>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

double ***xgboost::HostDeviceVector<double>::Fill(double ***result, double a2)
{
  uint64_t v2 = **result;
  uint64_t v3 = (char *)(*result)[1] - (char *)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<double>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9A779C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<double>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9A78E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<double>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 8 * a3);
  }
  return result;
}

void sub_22E9A7A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<double>::Extend(void ***a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = **a1;
  BOOL v6 = (char *)(*a1)[1];
  unint64_t v7 = (v6 - v5) >> 3;
  int64_t v8 = (unsigned char *)(*a2)[1] - (unsigned char *)**a2;
  unint64_t v9 = (v8 >> 3) + v7;
  if (v7 >= v9)
  {
    if (v7 <= v9) {
      goto LABEL_18;
    }
    int64x2_t v21 = &v5[8 * v9];
    goto LABEL_15;
  }
  std::vector<char>::pointer v10 = v4[2];
  if (v8 >> 3 <= (unint64_t)((v10 - v6) >> 3))
  {
    bzero(v6, (unsigned char *)(*a2)[1] - (unsigned char *)**a2);
    int64x2_t v21 = &v6[v8];
LABEL_15:
    v4[1] = v21;
    goto LABEL_18;
  }
  if (v9 >> 61) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v10 - v5;
  if (v11 >> 2 > v9) {
    unint64_t v9 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v9;
  }
  uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
  BOOL v14 = (char *)*v4;
  unint64_t v15 = (char *)v4[1];
  uint64_t v16 = &v13[8 * v7];
  int64x2_t v18 = &v13[8 * v17];
  bzero(v16, v8);
  unint64_t v19 = &v16[v8];
  while (v15 != v14)
  {
    uint64_t v20 = *((void *)v15 - 1);
    v15 -= 8;
    *((void *)v16 - 1) = v20;
    v16 -= 8;
  }
  *unint64_t v4 = v16;
  v4[1] = v19;
  void v4[2] = v18;
  if (v14) {
    operator delete(v14);
  }
LABEL_18:
  int64x2_t v22 = **a2;
  int64x2_t v23 = (*a2)[1];
  if (v23 != v22)
  {
    int64x2_t v24 = (char *)**a1 + 8 * v7;
    memmove(v24, v22, v23 - v22);
  }
}

uint64_t xgboost::HostDeviceVector<double>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<double>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<double>::Resize(void ***a1, unint64_t a2, double a3)
{
  unint64_t v4 = *a1;
  BOOL v6 = **a1;
  uint64_t v5 = (double *)(*a1)[1];
  unint64_t v7 = ((char *)v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      v4[1] = &v6[8 * a2];
    }
  }
  else
  {
    unint64_t v9 = v4[2];
    if (a2 - v7 <= (v9 - (unsigned char *)v5) >> 3)
    {
      int64x2_t v23 = &v5[a2 - v7];
      uint64_t v24 = 8 * a2 - 8 * v7;
      do
      {
        *v5++ = a3;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 2;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      unint64_t v15 = (double *)&v13[8 * v7];
      uint64_t v16 = &v13[8 * a2];
      uint64_t v17 = 8 * a2 - 8 * v7;
      int64x2_t v18 = v15;
      do
      {
        *v18++ = a3;
        v17 -= 8;
      }
      while (v17);
      unint64_t v19 = &v13[8 * v14];
      uint64_t v20 = (char *)*v4;
      for (unint64_t i = (char *)v4[1]; i != v20; i -= 8)
      {
        uint64_t v22 = *((void *)i - 1);
        *((void *)v15-- - 1) = v22;
      }
      *unint64_t v4 = v15;
      v4[1] = v16;
      void v4[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A7DA0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9A7E5C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9A7F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x230FA80D0](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

float ***xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Fill(float ***result, float a2, float a3)
{
  uint64_t v3 = **result;
  uint64_t v4 = (char *)(*result)[1] - (char *)v3;
  if (v4 >= 1)
  {
    unint64_t v5 = ((unint64_t)v4 >> 3) + 1;
    do
    {
      float *v3 = a2;
      v3[1] = a3;
      v3 += 2;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  uint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9A837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9A84C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 8 * a3);
  }
  return result;
}

void sub_22E9A8604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Extend(void **a1, const void ***a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) + (v5 >> 3));
  BOOL v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = (void *)(**a1 + 8 * (v5 >> 3));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Resize(uint64_t *a1, unint64_t a2, float a3, float a4)
{
  unint64_t v4 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a1, a2, &v4);
}

void xgboost::HostDeviceVector<int>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A8790(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9A884C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9A890C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<int>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<int>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<int>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<int>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<int>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<int>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<int>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<int>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<int>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<int>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<int>::Fill(void **result, int a2)
{
  uint64_t v2 = (_DWORD *)**result;
  uint64_t v3 = (*result)[1] - (void)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<int>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9A8D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<int>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9A8E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<int>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 4 * a3);
  }
  return result;
}

void sub_22E9A8FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<int>::Extend(std::vector<int> **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (char *)v4->__end_ - (char *)v4->__begin_;
  std::vector<int>::resize(v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) + (v5 >> 2));
  BOOL v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = &(*a1)->__begin_[v5 >> 2];
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<int>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<int>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<int>::Resize(std::vector<int> **a1, std::vector<int>::size_type a2, std::vector<int>::value_type a3)
{
  std::vector<int>::value_type __x = a3;
  std::vector<int>::resize(*a1, a2, &__x);
}

void xgboost::HostDeviceVector<unsigned char>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A915C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9A9228(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9A931C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x230FA80D0](v11, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned char>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<unsigned char>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<unsigned char>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::Size(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) - **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned char>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned char>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned char>::HostSpan@<X0>(uint64_t **result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned char>::ConstHostSpan@<X0>(uint64_t **result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

unsigned char *xgboost::HostDeviceVector<unsigned char>::Fill(void ***a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t result = **a1;
  int64_t v4 = (unsigned char *)v2[1] - result;
  if (v4 >= 1) {
    return memset(result, a2, v4);
  }
  return result;
}

void ***xgboost::HostDeviceVector<unsigned char>::Copy(void ***result, const void ***a2)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != (unsigned char *)(*a2)[1] - (unsigned char *)**a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  int64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9A9718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned char>::Copy(void ***result, uint64_t a2)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != *(void *)(a2 + 8) - *(void *)a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9A9854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned char>::Copy(void ***result, void *__src, size_t __len)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != __len) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (__len) {
    return (void ***)memmove(**result, __src, __len);
  }
  return result;
}

void sub_22E9A9994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned char>::Extend(std::vector<char> **a1, const void ***a2)
{
  int64_t v4 = *a1;
  unint64_t v5 = v4->__end_ - v4->__begin_;
  BOOL v6 = *a2;
  unint64_t v7 = **a2;
  int64_t v8 = (unsigned char *)v6[1] - v7;
  if (v5 >= v8 + v5)
  {
    if (v5 > v8 + v5) {
      v4->__end_ = &v4->__begin_[v8 + v5];
    }
  }
  else
  {
    std::vector<char>::__append(v4, (unsigned char *)v6[1] - v7);
    BOOL v6 = *a2;
    unint64_t v7 = **a2;
  }
  unint64_t v9 = v6[1];
  if (v9 != v7)
  {
    unint64_t v10 = &(*a1)->__begin_[v5];
    memmove(v10, v7, v9 - v7);
  }
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned char>::Resize(void **a1, unint64_t a2, char a3)
{
  char v7 = a3;
  uint64_t v3 = *a1;
  unint64_t v4 = v3[1] - *v3;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<unsigned char>::__append(v3, v6, &v7);
  }
  else if (!v5)
  {
    v3[1] = *v3 + a2;
  }
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9A9B5C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A9C18(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

void sub_22E9A9CD4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::FeatureType>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<xgboost::FeatureType>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::Size(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) - **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::FeatureType>::HostSpan@<X0>(uint64_t **result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostSpan@<X0>(uint64_t **result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

unsigned char *xgboost::HostDeviceVector<xgboost::FeatureType>::Fill(void ***a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t result = **a1;
  int64_t v4 = (unsigned char *)v2[1] - result;
  if (v4 >= 1) {
    return memset(result, a2, v4);
  }
  return result;
}

void ***xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***result, const void ***a2)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != (unsigned char *)(*a2)[1] - (unsigned char *)**a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  int64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9AA0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***result, uint64_t a2)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != *(void *)(a2 + 8) - *(void *)a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9AA1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***result, void *__src, size_t __len)
{
  if ((unsigned char *)(*result)[1] - (unsigned char *)**result != __len) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (__len) {
    return (void ***)memmove(**result, __src, __len);
  }
  return result;
}

void sub_22E9AA33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Extend(void ***a1, const void ***a2)
{
  int64_t v4 = *a1;
  unint64_t v5 = (unint64_t)**a1;
  unint64_t v6 = (char *)(*a1)[1];
  char v7 = &v6[-v5];
  int64_t v8 = *a2;
  unint64_t v9 = **a2;
  unint64_t v10 = v8[1];
  size_t v11 = v10 - v9;
  unint64_t v12 = (unint64_t)&v6[v10 - v9 - v5];
  if ((unint64_t)&v6[-v5] >= v12)
  {
    if ((unint64_t)&v6[-v5] > v12) {
      v4[1] = &v6[v10 - v9];
    }
  }
  else
  {
    uint64_t v13 = v4[2];
    if (v13 - v6 >= v11)
    {
      if (v10 != v9)
      {
        bzero((*a1)[1], v10 - v9);
        v6 += v11;
      }
      v4[1] = v6;
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = (unint64_t)&v13[-v5];
      if (2 * v14 > v12) {
        unint64_t v12 = 2 * v14;
      }
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v15 = v12;
      }
      uint64_t v16 = (char *)operator new(v15);
      uint64_t v17 = &v16[v15];
      uint64_t v22 = &v7[(void)v16 + v11];
      bzero(&v7[(void)v16], v11);
      if (v6 == (char *)v5)
      {
        uint64_t v16 = &v7[(void)v16];
      }
      else
      {
        int64x2_t v18 = &v6[~v5];
        do
        {
          char v19 = *--v6;
          (v18--)[(void)v16] = v19;
        }
        while (v6 != (char *)v5);
      }
      *int64_t v4 = v16;
      v4[1] = v22;
      void v4[2] = v17;
      if (v5) {
        operator delete((void *)v5);
      }
    }
    int64_t v8 = *a2;
    unint64_t v9 = **a2;
  }
  uint64_t v20 = v8[1];
  if (v20 != v9)
  {
    int64x2_t v21 = &v7[(void)**a1];
    memmove(v21, v9, v20 - v9);
  }
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Resize(unint64_t **a1, unint64_t a2, char a3)
{
  char v7 = a3;
  uint64_t v3 = *a1;
  unint64_t v4 = v3[1] - *v3;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::FeatureType>::__append(v3, v6, &v7);
  }
  else if (!v5)
  {
    v3[1] = *v3 + a2;
  }
}

void xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9AA5F8(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9AA6B4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9AA7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x230FA80D0](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<xgboost::Entry>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::Entry>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::Entry>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::Entry>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::Entry>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<xgboost::Entry>::Fill(void **result, uint64_t a2)
{
  uint64_t v2 = (void *)**result;
  uint64_t v3 = (*result)[1] - (void)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9AABD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9AAD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 8 * a3);
  }
  return result;
}

void sub_22E9AAE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::Entry>::Extend(void **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<xgboost::Entry>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) + (v5 >> 3));
  unint64_t v6 = **a2;
  char v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = (void *)(**a1 + 8 * (v5 >> 3));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::Entry>::Resize(void ***a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  unint64_t v6 = **a1;
  uint64_t v5 = (char *)(*a1)[1];
  unint64_t v7 = (v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      v4[1] = &v6[8 * a2];
    }
  }
  else
  {
    unint64_t v9 = v4[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      int64x2_t v23 = &v5[8 * (a2 - v7)];
      uint64_t v24 = 8 * a2 - 8 * v7;
      do
      {
        *(void *)uint64_t v5 = a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 2;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      size_t v15 = &v13[8 * v7];
      uint64_t v16 = &v13[8 * a2];
      uint64_t v17 = 8 * a2 - 8 * v7;
      int64x2_t v18 = v15;
      do
      {
        *(void *)int64x2_t v18 = a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      char v19 = &v13[8 * v14];
      int64x2_t v21 = (char *)*v4;
      uint64_t v20 = (char *)v4[1];
      if (v20 != *v4)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v15 - 1) = v22;
          v15 -= 8;
        }
        while (v20 != v21);
        uint64_t v20 = (char *)*v4;
      }
      *unint64_t v4 = v15;
      v4[1] = v16;
      void v4[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9AB108(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9AB1D4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9AB294(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long long>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<unsigned long long>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned long long>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned long long>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned long long>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned long long>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<unsigned long long>::Fill(void **result, uint64_t a2)
{
  uint64_t v2 = (void *)**result;
  uint64_t v3 = (*result)[1] - (void)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<unsigned long long>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9AB6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned long long>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9AB7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned long long>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 8 * a3);
  }
  return result;
}

void sub_22E9AB934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long long>::Extend(void **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<unsigned long>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) + (v5 >> 3));
  unint64_t v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = (void *)(**a1 + 8 * (v5 >> 3));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned long long>::Resize(void ***a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  unint64_t v6 = **a1;
  uint64_t v5 = (char *)(*a1)[1];
  unint64_t v7 = (v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      v4[1] = &v6[8 * a2];
    }
  }
  else
  {
    unint64_t v9 = v4[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      int64x2_t v23 = &v5[8 * (a2 - v7)];
      uint64_t v24 = 8 * a2 - 8 * v7;
      do
      {
        *(void *)uint64_t v5 = a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 2;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      size_t v15 = &v13[8 * v7];
      uint64_t v16 = &v13[8 * a2];
      uint64_t v17 = 8 * a2 - 8 * v7;
      int64x2_t v18 = v15;
      do
      {
        *(void *)int64x2_t v18 = a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      char v19 = &v13[8 * v14];
      uint64_t v20 = (char *)*v4;
      for (unint64_t i = (char *)v4[1]; i != v20; i -= 8)
      {
        uint64_t v22 = *((void *)i - 1);
        *((void *)v15 - 1) = v22;
        v15 -= 8;
      }
      *unint64_t v4 = v15;
      v4[1] = v16;
      void v4[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void xgboost::HostDeviceVector<unsigned int>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9ABBC0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9ABC7C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9ABD3C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<unsigned int>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<unsigned int>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned int>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned int>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned int>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned int>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<unsigned int>::Fill(void **result, int a2)
{
  uint64_t v2 = (_DWORD *)**result;
  uint64_t v3 = (*result)[1] - (void)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<unsigned int>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9AC154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned int>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9AC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned int>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 2 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 4 * a3);
  }
  return result;
}

void sub_22E9AC3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned int>::Extend(std::vector<unsigned int> **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (char *)v4->__end_ - (char *)v4->__begin_;
  std::vector<unsigned int>::resize(v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) + (v5 >> 2));
  unint64_t v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = &(*a1)->__begin_[v5 >> 2];
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned int>::Resize(std::vector<unsigned int> **a1, std::vector<unsigned int>::size_type a2, std::vector<unsigned int>::value_type a3)
{
  std::vector<unsigned int>::value_type __x = a3;
  std::vector<unsigned int>::resize(*a1, a2, &__x);
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9AC58C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9AC658(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_22E9AC718(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 4;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Fill(void **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)**result;
  uint64_t v4 = (*result)[1] - (void)v3;
  if (v4 >= 1)
  {
    unint64_t v5 = ((unint64_t)v4 >> 4) + 1;
    do
    {
      void *v3 = a2;
      v3[1] = a3;
      v3 += 2;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 4 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 4) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  uint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9ACB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 4 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9ACC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 4 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 16 * a3);
  }
  return result;
}

void sub_22E9ACDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Extend(void **a1, const void ***a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 4) + (v5 >> 4));
  unint64_t v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    int64_t v8 = (void *)(**a1 + 16 * (v5 >> 4));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Resize(void ***a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  unint64_t v7 = **a1;
  unint64_t v6 = (char *)(*a1)[1];
  unint64_t v8 = (v6 - v7) >> 4;
  if (a2 <= v8)
  {
    if (a2 < v8) {
      v5[1] = &v7[16 * a2];
    }
  }
  else
  {
    unint64_t v11 = v5[2];
    if (a2 - v8 <= (v11 - v6) >> 4)
    {
      int64x2_t v23 = &v6[16 * (a2 - v8)];
      do
      {
        *(void *)unint64_t v6 = a3;
        *((void *)v6 + 1) = a4;
        v6 += 16;
      }
      while (v6 != v23);
      v5[1] = v23;
    }
    else
    {
      if (a2 >> 60) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v11 - v7;
      unint64_t v13 = (v11 - v7) >> 3;
      if (v13 <= a2) {
        unint64_t v13 = a2;
      }
      if (v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      size_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(v5 + 2), v14);
      uint64_t v17 = &v15[16 * v8];
      int64x2_t v18 = &v15[16 * a2];
      char v19 = v17;
      do
      {
        *(void *)char v19 = a3;
        *((void *)v19 + 1) = a4;
        v19 += 16;
      }
      while (v19 != v18);
      uint64_t v20 = &v15[16 * v16];
      uint64_t v22 = (char *)*v5;
      int64x2_t v21 = (char *)v5[1];
      if (v21 != *v5)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v21 - 1);
          v17 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        int64x2_t v21 = (char *)*v5;
      }
      *uint64_t v5 = v17;
      v5[1] = v18;
      v5[2] = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

void xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_22E9AD054(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9AD110(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_22E9AD1D0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x230FA80D0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

void xgboost::HostDeviceVector<unsigned long>::HostDeviceVector()
{
}

{
  operator new();
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

BOOL xgboost::HostDeviceVector<unsigned long>::Empty(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) == **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned long>::DeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned long>::ConstDeviceSpan(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostPointer(uint64_t a1)
{
  return **(void **)a1;
}

{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostVector(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned long>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned long>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstHostPointer(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstHostVector(uint64_t a1)
{
  return *(void *)a1;
}

void **xgboost::HostDeviceVector<unsigned long>::Fill(void **result, uint64_t a2)
{
  uint64_t v2 = (void *)**result;
  uint64_t v3 = (*result)[1] - (void)v2;
  if (v3 >= 1)
  {
    unint64_t v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void ***xgboost::HostDeviceVector<unsigned long>::Copy(void ***result, const void ***a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != ((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v3 = **a2;
  unint64_t v4 = (*a2)[1];
  if (v4 != v3) {
    return (void ***)memmove(**result, v3, v4 - v3);
  }
  return result;
}

void sub_22E9AD5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned long>::Copy(void ***result, uint64_t a2)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != *(void *)a2) {
    return (void ***)memmove(**result, *(const void **)a2, v2 - *(void *)a2);
  }
  return result;
}

void sub_22E9AD72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void ***xgboost::HostDeviceVector<unsigned long>::Copy(void ***result, void *__src, uint64_t a3)
{
  if (((unsigned char *)(*result)[1] - (unsigned char *)**result) >> 3 != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (a3) {
    return (void ***)memmove(**result, __src, 8 * a3);
  }
  return result;
}

void sub_22E9AD870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long>::Extend(void **a1, const void ***a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = v4[1] - *v4;
  std::vector<unsigned long>::resize((uint64_t)v4, (((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 3) + (v5 >> 3));
  unint64_t v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v7 != v6)
  {
    unint64_t v8 = (void *)(**a1 + 8 * (v5 >> 3));
    memmove(v8, v6, v7 - v6);
  }
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned long>::Resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  std::vector<unsigned long>::resize(*a1, a2, &v3);
}

void *std::vector<xgboost::detail::GradientPairInternal<float>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E9AD9F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::vector<xgboost::FeatureType>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E9ADAB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::Entry>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E9ADB3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 16));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = a4;
  operator new();
}

void sub_22E9ADC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](v16);
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v17 + 72));
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v17 + 24), 0);
  char v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v15 + 40) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::Builder()
{
}

{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::UpdateTree(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "UpdateTree");
  xgboost::common::Monitor::Start();
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = *a2;
  if (*(void *)a1 != 1)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(a1 + 32, (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    if (a1 + 32 != v4) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>((char *)(a1 + 32), *(char **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    }
  }
  xgboost::tree::QuantileHistMaker::Builder<float>::InitData();
}

void sub_22E9ADE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<float>::GetNumberOfTrees(uint64_t a1)
{
  return *(void *)a1;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitData(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  (**(void (***)(uint64_t))a2)(a2);
  int v17 = 0;
  uint64_t v5 = a1[8];
  for (uint64_t i = a1[9]; i != v5; std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i))
    i -= 136;
  a1[9] = v5;
  uint64_t v6 = a1[1];
  int v7 = *(_DWORD *)(v6 + 20);
  uint64_t v8 = *(void *)(v6 + 128);
  LODWORD(__p) = -1;
  HIDWORD(__p) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = v8;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)a2 + 104))(&v15, a2, &__p);
  std::vector<unsigned int> __p = v15;
  uint64_t v11 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v9, 0);
}

void sub_22E9AE328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v30 = (uint64_t)__p;
  std::vector<unsigned int> __p = 0;
  if (v30) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v30);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::ExpandTree(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(v4, *(_DWORD *)(*(void *)(a1 + 8) + 24));
  xgboost::tree::QuantileHistMaker::Builder<float>::InitRoot();
}

void sub_22E9AEAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  std::vector<unsigned int> __p = &a37;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(v48 - 160);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<float>::UpdatePredictionCache(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[12];
  if (!v3) {
    return 0;
  }
  if (v3 != a2 || a1[11] == 0) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "UpdatePredictionCache");
  xgboost::common::Monitor::Start();
  if (v57.__m_.__opaque[7] < 0) {
    operator delete(v56.__ptr_);
  }
  v54[0] = a3[5];
  if (v54[0] != *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  uint64_t v47 = a1[7];
  uint64_t v48 = (float *)a1[1];
  uint64_t v49 = a1[11];
  uint64_t v9 = *a3;
  unint64_t v10 = a3[2];
  uint64_t v11 = a3[4];
  int v12 = *((_DWORD *)a3 + 12);
  v54[0] = a3[5];
  LODWORD(v50[0]) = 0;
  if (!v54[0]) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (!v49)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
    uint64_t v44 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    char v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: p_last_tree", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v56);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v47 + 152), (uint64_t)v54);
  LODWORD(v50[0]) = v12;
  v55.i32[0] = -1;
  if (v12 != -1) {
    dmlc::LogCheckFormat<int,int>();
  }
  unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v49 + 168) - *(void *)(v49 + 160)) >> 2);
  uint64_t v13 = a1[8];
  for (uint64_t i = a1[9]; v13 != i; v13 += 136)
  {
    v50[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 112) - *(void *)(v13 + 104)) >> 3));
    if (v50[0] != (void *)v53) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    uint64_t v14 = *(void *)(v13 + 104);
    uint64_t v15 = *(void *)(v13 + 112);
    *(_OWORD *)float64x2_t v50 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    long long v52 = 0u;
    uint64_t v16 = v15 - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
      do
      {
        uint64_t v19 = *(void *)(*(void *)(v13 + 104) + 24 * v17 + 8)
            - *(void *)(*(void *)(v13 + 104) + 24 * v17);
        unint64_t v20 = v19 >> 3;
        if ((v19 & 0x1FF8) != 0) {
          unint64_t v21 = ((unint64_t)(v19 >> 3) >> 10) + 1;
        }
        else {
          unint64_t v21 = (unint64_t)(v19 >> 3) >> 10;
        }
        if (v21)
        {
          unint64_t v22 = 0;
          do
          {
            unint64_t v23 = v22 + 1024;
            if (v20 >= v22 + 1024) {
              unint64_t v24 = v22 + 1024;
            }
            else {
              unint64_t v24 = v20;
            }
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v50, v17, v22, v24);
            unint64_t v22 = v23;
            --v21;
          }
          while (v21);
        }
        ++v17;
      }
      while (v17 != v18);
      int v25 = v50[0];
      uint64_t v16 = (uint64_t)v50[1];
    }
    else
    {
      int v25 = 0;
    }
    v56.__ptr_ = 0;
    v57.__m_.__uint64_t sig = 850045863;
    memset(v57.__m_.__opaque, 0, sizeof(v57.__m_.__opaque));
    uint64_t v26 = v16 - (void)v25;
    if (v26)
    {
      unint64_t v27 = 0;
      uint64_t v28 = v26 >> 4;
      do
      {
        FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v50, v27);
        uint64_t Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v50, v27);
        uint64_t v33 = *(void *)(v49 + 160);
        if (*(_DWORD *)(v33 + 20 * (int)FirstDimension + 12) != -1
          && *(_DWORD *)(v33 + 20 * (int)FirstDimension + 4) == -1)
        {
          uint64_t v34 = Range;
          uint64_t v35 = v31;
          uint64_t v36 = *(void *)(v13 + 104);
          int8x16_t v55 = *(int8x16_t *)(*(void *)(v47 + 296) + 24 * FirstDimension);
          float v37 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v54, FirstDimension, v48, (double *)v55.i64, v55, v32);
          if (v34 < v35)
          {
            uint64_t v38 = *(void *)(v36 + 24 * FirstDimension);
            float v39 = v37 * v48[1];
            unint64_t v40 = v38 + 8 * v35;
            float v41 = (void *)(v38 + 8 * v34);
            do
            {
              unint64_t v42 = *v41 * v9;
              if (v42 >= v10) {
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              }
              *(float *)(v11 + 4 * v42) = v39 + *(float *)(v11 + 4 * v42);
              ++v41;
            }
            while ((unint64_t)v41 < v40);
          }
        }
        ++v27;
      }
      while (v27 != v28);
    }
    dmlc::OMPException::Rethrow(&v56);
    std::mutex::~mutex(&v57);
    std::exception_ptr::~exception_ptr(&v56);
    if (__p[1])
    {
      *(void **)&long long v52 = __p[1];
      operator delete(__p[1]);
    }
    if (v50[0])
    {
      v50[1] = v50[0];
      operator delete(v50[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v57.__m_.__opaque[7] < 0) {
    operator delete(v56.__ptr_);
  }
  return 1;
}

void sub_22E9AF3D4(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E9AF3E4()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E9AF4E8);
}

void sub_22E9AF3F0()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E9AF4E8);
}

void sub_22E9AF400(_Unwind_Exception *a1)
{
}

void sub_22E9AF490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9AF49CLL);
}

void sub_22E9AF4B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E9AF4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    JUMPOUT(0x22E9AF4E4);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitSampling(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitSampling");
  xgboost::common::Monitor::Start();
  if (v17.__m_.__opaque[7] < 0) {
    operator delete(__p);
  }
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  int v7 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v7);
  uint64_t v9 = *v6;
  float v10 = *(float *)(*(void *)(a1 + 8) + 48);
  std::vector<unsigned int> __p = 0;
  v17.__m_.__uint64_t sig = 850045863;
  memset(v17.__m_.__opaque, 0, sizeof(v17.__m_.__opaque));
  if (v9)
  {
    double v11 = v10;
    if (v8 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v8;
    }
    uint64_t v13 = (float *)(*a3 + 4);
    do
    {
      if (*v13 < 0.0
        || (uint64_t v12 = (16807 * v12) & 0x7FFFFFFFFFFFFFFFLL, (double)(unint64_t)(v12 - 1) * 1.08420217e-19 + 0.0 >= v11))
      {
        *(v13 - 1) = 0.0;
        *uint64_t v13 = 0.0;
      }
      v13 += 2;
      --v9;
    }
    while (v9);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v14, "InitSampling");
  xgboost::common::Monitor::Stop();
  if (v15 < 0) {
    operator delete(v14);
  }
  std::mutex::~mutex(&v17);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
}

void sub_22E9AF694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception_ptr a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::~mutex(v21);
  std::exception_ptr::~exception_ptr(&a16);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::~HistEvaluator(result);
  }
  return result;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitRoot(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v33[0] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(int **)(a3 + 160);
  int v5 = *v4;
  if (*v4 == -1)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      ++v6;
      int v5 = v4[5 * (v5 & 0x7FFFFFFF)];
    }
    while (v5 != -1);
  }
  *(_DWORD *)a4 = 0;
  *((_DWORD *)a4 + 1) = v6;
  a4[1] = 0;
  a4[3] = 0;
  *((_DWORD *)a4 + 4) = 0;
  a4[4] = 0;
  a4[5] = 0;
  *((unsigned char *)a4 + 48) = 0;
  *(_OWORD *)(a4 + 7) = 0u;
  *(_OWORD *)(a4 + 9) = 0u;
  uint64_t v7 = a4[1];
  uint64_t v24 = *a4;
  uint64_t v25 = v7;
  LODWORD(v26) = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v8 = *((_OWORD *)a4 + 4);
  long long v30 = *((_OWORD *)a4 + 3);
  long long v31 = v8;
  uint64_t v9 = a4[10];
  uint64_t v29 = 0;
  uint64_t v32 = v9;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v18 = 0;
  unint64_t v22 = &v18;
  LOBYTE(v23) = 0;
  uint64_t v18 = (char *)operator new(0x58uLL);
  uint64_t v19 = (uint64_t)v18;
  unint64_t v20 = v18 + 88;
  uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v20, (uint64_t)&v24, (uint64_t)v33, (uint64_t)v18);
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)&v21, (uint64_t *)(a1 + 64), (uint64_t *)&v18);
  unint64_t v22 = &v18;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  uint64_t v12 = *(void **)(v10 + 128);
  LODWORD(v24) = -1;
  HIDWORD(v24) = v11;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  LOBYTE(v27) = 0;
  uint64_t v28 = v12;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a2 + 104))(&v16);
  unint64_t v15[2] = v16;
  void v15[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(v15, 0);
}

void sub_22E9B0034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&a37);
  uint64_t v38 = *a11;
  if (*a11)
  {
    *(void *)(a12 + 32) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>(xgboost::common::BlockedSpace2d *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  v27[0] = 0;
  std::vector<unsigned long>::vector(v35, v6, v27);
  uint64_t v7 = *a2;
  uint64_t v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      uint64_t v9 = *a3;
      uint64_t v8 = a3[1];
      if (*a3 != v8)
      {
        uint64_t v10 = 0;
        do
        {
          v27[0] = *(void *)v9;
          uint64_t v11 = *(void *)(v9 + 8);
          int v28 = *(_DWORD *)(v9 + 16);
          v27[1] = v11;
          long long v30 = 0;
          uint64_t v31 = 0;
          std::vector<unsigned int> __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
          long long v12 = *(_OWORD *)(v9 + 48);
          long long v13 = *(_OWORD *)(v9 + 64);
          uint64_t v34 = *(void *)(v9 + 80);
          long long v32 = v12;
          long long v33 = v13;
          uint64_t v14 = *(void *)(*(void *)(v7 + 104) + 24 * LODWORD(v27[0]) + 8)
              - *(void *)(*(void *)(v7 + 104) + 24 * LODWORD(v27[0]));
          if (*(void *)((char *)v35[0] + v10) <= (unint64_t)(v14 >> 3)) {
            uint64_t v15 = v14 >> 3;
          }
          else {
            uint64_t v15 = *(void *)((char *)v35[0] + v10);
          }
          *(void *)((char *)v35[0] + v10) = v15;
          if (__p)
          {
            long long v30 = __p;
            operator delete(__p);
          }
          v10 += 8;
          v9 += 88;
        }
        while (v9 != v8);
      }
      v7 += 136;
    }
    while (v7 != v26);
  }
  uint64_t v17 = *a3;
  uint64_t v16 = a3[1];
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  uint64_t v18 = v16 - v17;
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 3);
    do
    {
      unint64_t v21 = *((void *)v35[0] + v19);
      if ((_BYTE)v21) {
        uint64_t v22 = (v21 >> 8) + 1;
      }
      else {
        uint64_t v22 = v21 >> 8;
      }
      if (v22)
      {
        unint64_t v23 = 0;
        do
        {
          unint64_t v24 = v23 + 256;
          if (v21 >= v23 + 256) {
            unint64_t v25 = v23 + 256;
          }
          else {
            unint64_t v25 = v21;
          }
          xgboost::common::BlockedSpace2d::AddBlock(a1, v19, v23, v25);
          unint64_t v23 = v24;
          --v22;
        }
        while (v22);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_22E9B0454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  unint64_t v25 = *(void **)(v23 + 24);
  if (v25)
  {
    *(void *)(v23 + 32) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v26;
    operator delete(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::BuildHistogram(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 1;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v50, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3));
  uint64_t v38 = a2;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v49, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v7 - *a4) >> 3));
  uint64_t v8 = (double *)*a4;
  float v39 = (int *)a4[1];
  uint64_t v9 = a3;
  if ((int *)*a4 != v39)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v9 + 160);
      uint64_t v12 = v11 + 20 * *(int *)v8;
      unsigned int v13 = *(_DWORD *)(v12 + 4);
      LODWORD(v12) = *(_DWORD *)(v12 + 8);
      double v14 = v8[10];
      double v15 = v8[8];
      if (v14 >= v15) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v14 >= v15) {
        uint64_t v12 = v13;
      }
      else {
        uint64_t v12 = v12;
      }
      int v17 = *(_DWORD *)(v11 + 20 * (int)v12);
      if (v17 == -1)
      {
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          ++v18;
          int v17 = *(_DWORD *)(v11 + 20 * (v17 & 0x7FFFFFFF));
        }
        while (v17 != -1);
      }
      memset((char *)v51 + 7, 0, 32);
      uint64_t v19 = v50[0];
      uint64_t v20 = v50[0] + 88 * v10;
      *(void *)uint64_t v20 = v12 | (v18 << 32);
      *(void *)(v20 + 8) = 0;
      *(_DWORD *)(v20 + 16) = 0;
      uint64_t v23 = *(void **)(v20 + 24);
      uint64_t v22 = v20 + 24;
      unint64_t v21 = v23;
      if (v23)
      {
        *(void *)(v19 + 88 * v10 + 32) = v21;
        operator delete(v21);
        *(void *)uint64_t v22 = 0;
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
      }
      uint64_t v24 = v19 + 88 * v10;
      *(void *)uint64_t v22 = 0;
      *(void *)(v22 + 8) = 0;
      *(unsigned char *)(v22 + 24) = 0;
      *(void *)(v22 + 16) = 0;
      *(_OWORD *)(v24 + 49) = v51[0];
      *(_OWORD *)(v24 + 65) = v51[1];
      *(void *)(v24 + 80) = *(void *)((char *)&v51[1] + 15);
      uint64_t v9 = a3;
      uint64_t v25 = *(void *)(a3 + 160);
      int v26 = *(_DWORD *)(v25 + 20 * (int)v16);
      if (v26 == -1)
      {
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = 0;
        do
        {
          ++v27;
          int v26 = *(_DWORD *)(v25 + 20 * (v26 & 0x7FFFFFFF));
        }
        while (v26 != -1);
      }
      uint64_t v28 = v16 | (v27 << 32);
      memset((char *)v51 + 7, 0, 32);
      uint64_t v29 = v49[0];
      uint64_t v30 = v49[0] + 88 * v10;
      *(void *)uint64_t v30 = v28;
      *(void *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 16) = 0;
      long long v33 = *(void **)(v30 + 24);
      uint64_t v32 = v30 + 24;
      uint64_t v31 = v33;
      if (v33)
      {
        *(void *)(v29 + 88 * v10 + 32) = v31;
        operator delete(v31);
        *(void *)uint64_t v32 = 0;
        *(void *)(v32 + 8) = 0;
        *(void *)(v32 + 16) = 0;
      }
      uint64_t v34 = v29 + 88 * v10;
      *(void *)uint64_t v32 = 0;
      *(void *)(v32 + 8) = 0;
      *(unsigned char *)(v32 + 24) = 0;
      *(void *)(v32 + 16) = 0;
      *(_OWORD *)(v34 + 49) = v51[0];
      *(_OWORD *)(v34 + 65) = v51[1];
      *(void *)(v34 + 80) = *(void *)((char *)&v51[1] + 15);
      ++v10;
      v8 += 11;
    }
    while (v8 != (double *)v39);
  }
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)v51, (uint64_t *)(a1 + 64), v50);
  uint64_t v35 = *(void *)(a1 + 8);
  int v36 = *(_DWORD *)(v35 + 20);
  uint64_t v37 = *(void *)(v35 + 128);
  LODWORD(v42) = -1;
  HIDWORD(v42) = v36;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v45 = 0;
  uint64_t v46 = v37;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v38 + 104))(&v47);
  uint64_t v42 = v47;
  uint64_t v43 = v48;
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v41, 0);
}

void sub_22E9B08D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  xgboost::common::Index::~Index((xgboost::common::Index *)(v29 - 144));
  *(void *)(v29 - 144) = &a29;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  *(void *)(v29 - 144) = v29 - 168;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

void xgboost::tree::HistRowPartitioner::UpdatePosition(uint64_t *a1, xgboost::GHistIndexMatrix *this, uint64_t *a3, uint64_t a4)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  uint64_t v7 = xgboost::GHistIndexMatrix::Transpose(this);
  float v140 = this;
  int v8 = *((unsigned __int8 *)this + 112);
  uint64_t v138 = v7;
  float v139 = a1;
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  unint64_t v11 = (v9 - *a3) / 88;
  double v136 = a3;
  if (!v8)
  {
    if (*(unsigned char *)(v7 + 156))
    {
      memset(&v144, 0, sizeof(v144));
      xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, a4, (uint64_t)v140, &v144);
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      long long v143 = 0u;
      *(_OWORD *)float v141 = 0u;
      if (v9 == v10)
      {
        uint64_t v29 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v21) + 8)
              - *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v21));
          unint64_t v23 = v22 >> 3;
          if ((v22 & 0x3FF8) != 0) {
            unint64_t v24 = ((unint64_t)(v22 >> 3) >> 11) + 1;
          }
          else {
            unint64_t v24 = (unint64_t)(v22 >> 3) >> 11;
          }
          if (v24)
          {
            unint64_t v25 = 0;
            do
            {
              unint64_t v26 = v25 + 2048;
              if (v23 >= v25 + 2048) {
                unint64_t v27 = v25 + 2048;
              }
              else {
                unint64_t v27 = v23;
              }
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v141, v21, v25, v27);
              unint64_t v25 = v26;
              --v24;
            }
            while (v24);
          }
          ++v21;
        }
        while (v21 != v11);
        uint64_t v29 = v141[0];
        uint64_t v28 = v141[1];
      }
      std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
      std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
      unint64_t v69 = (v28 - v29) >> 4;
      unsigned int v70 = (void *)a1[3];
      *unsigned int v70 = 0;
      if (v11 + 1 >= 2)
      {
        uint64_t v71 = 0;
        int v72 = (unsigned int *)*a3;
        uint64_t v73 = a1[13];
        unint64_t v74 = v70 + 1;
        do
        {
          unsigned int v75 = *v72;
          v72 += 22;
          uint64_t v76 = *(void *)(v73 + 24 * v75 + 8) - *(void *)(v73 + 24 * v75);
          v71 += (unint64_t)(v76 >> 3) >> 11;
          if ((v76 & 0x3FF8) != 0) {
            ++v71;
          }
          *v74++ = v71;
          --v11;
        }
        while (v11);
      }
      if (a1[9] < v69)
      {
        std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(a1 + 6, v69);
        a1[9] = v69;
      }
      if (a1[16] != *((void *)v140 + 19)) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      v147.__ptr_ = 0;
      v148.__m_.__uint64_t sig = 850045863;
      memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
      if (v141[1] != v141[0])
      {
        unint64_t v77 = 0;
        int64_t v134 = ((char *)v141[1] - (char *)v141[0]) >> 4;
        while (1)
        {
          FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v77);
          unint64_t Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v77);
          int v80 = *(_DWORD *)(*v136 + 88 * FirstDimension);
          xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v139, *(void *)(v139[3] + 8 * (int)FirstDimension) + (Range >> 11));
          unint64_t v81 = Range >> 11;
          int v82 = *(_DWORD *)(v138 + 152);
          if (v82 == 4) {
            break;
          }
          if (v82 == 2)
          {
            if (*(void *)(v139[3] + 8 * (int)FirstDimension) + v81 < (v139[7] - v139[6]) >> 4) {
              xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v80 + 12) & 0x7FFFFFFF);
            }
            goto LABEL_168;
          }
          if (v82 == 1)
          {
            if (*(void *)(v139[3] + 8 * (int)FirstDimension) + v81 < (v139[7] - v139[6]) >> 4) {
              xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v80 + 12) & 0x7FFFFFFF);
            }
            goto LABEL_168;
          }
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
          uint64_t v84 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
          uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Check failed: false", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": ", 2);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v146);
          a3 = v136;
          a1 = v139;
          if (++v77 == v134) {
            goto LABEL_104;
          }
        }
        if (*(void *)(v139[3] + 8 * (int)FirstDimension) + v81 < (v139[7] - v139[6]) >> 4) {
          xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v80 + 12) & 0x7FFFFFFF);
        }
LABEL_168:
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_104:
      dmlc::OMPException::Rethrow(&v147);
      std::mutex::~mutex(&v148);
      std::exception_ptr::~exception_ptr(&v147);
      xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
      v147.__ptr_ = 0;
      v148.__m_.__uint64_t sig = 850045863;
      memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
      if (v141[1] != v141[0])
      {
        unint64_t v86 = 0;
        int64_t v87 = ((char *)v141[1] - (char *)v141[0]) >> 4;
        do
        {
          uint64_t v88 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v86);
          unint64_t v89 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v86);
          xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v88, v89, *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v88)));
          ++v86;
        }
        while (v87 != v86);
      }
    }
    else
    {
      memset(&v144, 0, sizeof(v144));
      xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, a4, (uint64_t)v140, &v144);
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      long long v143 = 0u;
      *(_OWORD *)float v141 = 0u;
      if (v9 == v10)
      {
        long long v68 = 0;
        float64x2_t v67 = 0;
      }
      else
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v60) + 8)
              - *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v60));
          unint64_t v62 = v61 >> 3;
          if ((v61 & 0x3FF8) != 0) {
            unint64_t v63 = ((unint64_t)(v61 >> 3) >> 11) + 1;
          }
          else {
            unint64_t v63 = (unint64_t)(v61 >> 3) >> 11;
          }
          if (v63)
          {
            unint64_t v64 = 0;
            do
            {
              unint64_t v65 = v64 + 2048;
              if (v62 >= v64 + 2048) {
                unint64_t v66 = v64 + 2048;
              }
              else {
                unint64_t v66 = v62;
              }
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v141, v60, v64, v66);
              unint64_t v64 = v65;
              --v63;
            }
            while (v63);
          }
          ++v60;
        }
        while (v60 != v11);
        long long v68 = v141[0];
        float64x2_t v67 = v141[1];
      }
      std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
      std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
      unint64_t v111 = (v67 - v68) >> 4;
      uint64_t v112 = (void *)a1[3];
      *uint64_t v112 = 0;
      if (v11 + 1 >= 2)
      {
        uint64_t v113 = 0;
        long long v114 = (unsigned int *)*a3;
        uint64_t v115 = a1[13];
        uint64_t v116 = v112 + 1;
        do
        {
          unsigned int v117 = *v114;
          v114 += 22;
          uint64_t v118 = *(void *)(v115 + 24 * v117 + 8) - *(void *)(v115 + 24 * v117);
          v113 += (unint64_t)(v118 >> 3) >> 11;
          if ((v118 & 0x3FF8) != 0) {
            ++v113;
          }
          *v116++ = v113;
          --v11;
        }
        while (v11);
      }
      if (a1[9] < v111)
      {
        std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(a1 + 6, v111);
        a1[9] = v111;
      }
      if (a1[16] != *((void *)v140 + 19)) {
        dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      v147.__ptr_ = 0;
      v148.__m_.__uint64_t sig = 850045863;
      memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
      if (v141[1] != v141[0])
      {
        unint64_t v119 = 0;
        int64_t v135 = ((char *)v141[1] - (char *)v141[0]) >> 4;
        while (1)
        {
          uint64_t v120 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v119);
          unint64_t v121 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v119);
          int v122 = *(_DWORD *)(*v136 + 88 * v120);
          xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v139, *(void *)(v139[3] + 8 * (int)v120) + (v121 >> 11));
          unint64_t v123 = v121 >> 11;
          int v124 = *(_DWORD *)(v138 + 152);
          if (v124 == 4) {
            break;
          }
          if (v124 == 2)
          {
            if (*(void *)(v139[3] + 8 * (int)v120) + v123 < (v139[7] - v139[6]) >> 4) {
              xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v122 + 12) & 0x7FFFFFFF);
            }
            goto LABEL_170;
          }
          if (v124 == 1)
          {
            if (*(void *)(v139[3] + 8 * (int)v120) + v123 < (v139[7] - v139[6]) >> 4) {
              xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v122 + 12) & 0x7FFFFFFF);
            }
            goto LABEL_170;
          }
          uint64_t v125 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
          dmlc::LogMessageFatal::Entry::Init(v125, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
          std::exception_ptr v126 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
          std::mutex v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Check failed: false", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)": ", 2);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v146);
          a3 = v136;
          a1 = v139;
          if (++v119 == v135) {
            goto LABEL_156;
          }
        }
        if (*(void *)(v139[3] + 8 * (int)v120) + v123 < (v139[7] - v139[6]) >> 4) {
          xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v122 + 12) & 0x7FFFFFFF);
        }
LABEL_170:
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_156:
      dmlc::OMPException::Rethrow(&v147);
      std::mutex::~mutex(&v148);
      std::exception_ptr::~exception_ptr(&v147);
      xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
      v147.__ptr_ = 0;
      v148.__m_.__uint64_t sig = 850045863;
      memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
      if (v141[1] != v141[0])
      {
        unint64_t v128 = 0;
        int64_t v129 = ((char *)v141[1] - (char *)v141[0]) >> 4;
        do
        {
          uint64_t v130 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v128);
          unint64_t v131 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v128);
          xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v130, v131, *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v130)));
          ++v128;
        }
        while (v129 != v128);
      }
    }
    goto LABEL_159;
  }
  if (*(unsigned char *)(v7 + 156))
  {
    memset(&v144, 0, sizeof(v144));
    xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, a4, (uint64_t)v140, &v144);
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    long long v143 = 0u;
    *(_OWORD *)float v141 = 0u;
    if (v9 == v10)
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v12) + 8)
            - *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v12));
        unint64_t v14 = v13 >> 3;
        if ((v13 & 0x3FF8) != 0) {
          unint64_t v15 = ((unint64_t)(v13 >> 3) >> 11) + 1;
        }
        else {
          unint64_t v15 = (unint64_t)(v13 >> 3) >> 11;
        }
        if (v15)
        {
          unint64_t v16 = 0;
          do
          {
            unint64_t v17 = v16 + 2048;
            if (v14 >= v16 + 2048) {
              unint64_t v18 = v16 + 2048;
            }
            else {
              unint64_t v18 = v14;
            }
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v141, v12, v16, v18);
            unint64_t v16 = v17;
            --v15;
          }
          while (v15);
        }
        ++v12;
      }
      while (v12 != v11);
      uint64_t v20 = v141[0];
      uint64_t v19 = v141[1];
    }
    std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
    std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
    unint64_t v39 = (v19 - v20) >> 4;
    unint64_t v40 = (void *)a1[3];
    *unint64_t v40 = 0;
    if (v11 + 1 >= 2)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (unsigned int *)*a3;
      uint64_t v43 = a1[13];
      uint64_t v44 = v40 + 1;
      do
      {
        unsigned int v45 = *v42;
        v42 += 22;
        uint64_t v46 = *(void *)(v43 + 24 * v45 + 8) - *(void *)(v43 + 24 * v45);
        v41 += (unint64_t)(v46 >> 3) >> 11;
        if ((v46 & 0x3FF8) != 0) {
          ++v41;
        }
        *v44++ = v41;
        --v11;
      }
      while (v11);
    }
    if (a1[9] < v39)
    {
      std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(a1 + 6, v39);
      a1[9] = v39;
    }
    if (a1[16] != *((void *)v140 + 19)) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    v147.__ptr_ = 0;
    v148.__m_.__uint64_t sig = 850045863;
    memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
    if (v141[1] != v141[0])
    {
      unint64_t v47 = 0;
      int64_t v132 = ((char *)v141[1] - (char *)v141[0]) >> 4;
      while (1)
      {
        uint64_t v48 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v47);
        unint64_t v49 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v47);
        int v50 = *(_DWORD *)(*a3 + 88 * v48);
        xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)a1, *(void *)(a1[3] + 8 * (int)v48) + (v49 >> 11));
        unint64_t v51 = v49 >> 11;
        int v52 = *(_DWORD *)(v138 + 152);
        if (v52 == 4) {
          break;
        }
        if (v52 == 2)
        {
          if (*(void *)(a1[3] + 8 * (int)v48) + v51 < (a1[7] - a1[6]) >> 4) {
            xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v50 + 12) & 0x7FFFFFFF);
          }
          goto LABEL_167;
        }
        if (v52 == 1)
        {
          if (*(void *)(a1[3] + 8 * (int)v48) + v51 < (a1[7] - a1[6]) >> 4) {
            xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v50 + 12) & 0x7FFFFFFF);
          }
          goto LABEL_167;
        }
        unint64_t v53 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
        dmlc::LogMessageFatal::Entry::Init(v53, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
        float64x2_t v54 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
        int8x16_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v146);
        if (++v47 == v132) {
          goto LABEL_65;
        }
      }
      if (*(void *)(a1[3] + 8 * (int)v48) + v51 < (a1[7] - a1[6]) >> 4) {
        xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v50 + 12) & 0x7FFFFFFF);
      }
LABEL_167:
      std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_65:
    dmlc::OMPException::Rethrow(&v147);
    std::mutex::~mutex(&v148);
    std::exception_ptr::~exception_ptr(&v147);
    xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
    v147.__ptr_ = 0;
    v148.__m_.__uint64_t sig = 850045863;
    memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
    if (v141[1] != v141[0])
    {
      unint64_t v56 = 0;
      int64_t v57 = ((char *)v141[1] - (char *)v141[0]) >> 4;
      do
      {
        uint64_t v58 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v56);
        unint64_t v59 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v56);
        xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v58, v59, *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v58)));
        ++v56;
      }
      while (v57 != v56);
    }
LABEL_159:
    dmlc::OMPException::Rethrow(&v147);
    std::mutex::~mutex(&v148);
    std::exception_ptr::~exception_ptr(&v147);
    xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(a1, a3, a4);
    goto LABEL_160;
  }
  memset(&v144, 0, sizeof(v144));
  xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, a4, (uint64_t)v140, &v144);
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  long long v143 = 0u;
  *(_OWORD *)float v141 = 0u;
  if (v9 == v10)
  {
    uint64_t v38 = 0;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v30) + 8)
          - *(void *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v30));
      unint64_t v32 = v31 >> 3;
      if ((v31 & 0x3FF8) != 0) {
        unint64_t v33 = ((unint64_t)(v31 >> 3) >> 11) + 1;
      }
      else {
        unint64_t v33 = (unint64_t)(v31 >> 3) >> 11;
      }
      if (v33)
      {
        unint64_t v34 = 0;
        do
        {
          unint64_t v35 = v34 + 2048;
          if (v32 >= v34 + 2048) {
            unint64_t v36 = v34 + 2048;
          }
          else {
            unint64_t v36 = v32;
          }
          xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v141, v30, v34, v36);
          unint64_t v34 = v35;
          --v33;
        }
        while (v33);
      }
      ++v30;
    }
    while (v30 != v11);
    uint64_t v38 = v141[0];
    uint64_t v37 = v141[1];
  }
  std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
  std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
  unint64_t v90 = (v37 - v38) >> 4;
  unint64_t v91 = (void *)a1[3];
  *unint64_t v91 = 0;
  if (v11 + 1 >= 2)
  {
    uint64_t v92 = 0;
    std::exception_ptr v93 = (unsigned int *)*a3;
    uint64_t v94 = a1[13];
    uint64_t v95 = v91 + 1;
    do
    {
      unsigned int v96 = *v93;
      v93 += 22;
      uint64_t v97 = *(void *)(v94 + 24 * v96 + 8) - *(void *)(v94 + 24 * v96);
      v92 += (unint64_t)(v97 >> 3) >> 11;
      if ((v97 & 0x3FF8) != 0) {
        ++v92;
      }
      *v95++ = v92;
      --v11;
    }
    while (v11);
  }
  if (a1[9] < v90)
  {
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(a1 + 6, v90);
    a1[9] = v90;
  }
  if (a1[16] != *((void *)v140 + 19)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  v147.__ptr_ = 0;
  v148.__m_.__uint64_t sig = 850045863;
  memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
  if (v141[1] != v141[0])
  {
    unint64_t v98 = 0;
    int64_t v133 = ((char *)v141[1] - (char *)v141[0]) >> 4;
    while (1)
    {
      uint64_t v99 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v98);
      unint64_t v100 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v98);
      int v101 = *(_DWORD *)(*a3 + 88 * v99);
      xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v139, *(void *)(v139[3] + 8 * (int)v99) + (v100 >> 11));
      unint64_t v102 = v100 >> 11;
      int v103 = *(_DWORD *)(v138 + 152);
      if (v103 == 4) {
        break;
      }
      if (v103 == 2)
      {
        if (*(void *)(v139[3] + 8 * (int)v99) + v102 < (v139[7] - v139[6]) >> 4) {
          xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v101 + 12) & 0x7FFFFFFF);
        }
        goto LABEL_169;
      }
      if (v103 == 1)
      {
        if (*(void *)(v139[3] + 8 * (int)v99) + v102 < (v139[7] - v139[6]) >> 4) {
          xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v101 + 12) & 0x7FFFFFFF);
        }
        goto LABEL_169;
      }
      uint64_t v104 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
      dmlc::LogMessageFatal::Entry::Init(v104, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
      unint64_t v105 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v146);
      unint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"Check failed: false", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)": ", 2);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v146);
      if (++v98 == v133) {
        goto LABEL_130;
      }
    }
    if (*(void *)(v139[3] + 8 * (int)v99) + v102 < (v139[7] - v139[6]) >> 4) {
      xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(&v145, v138, *(_DWORD *)(*(void *)(a4 + 160) + 20 * v101 + 12) & 0x7FFFFFFF);
    }
LABEL_169:
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_130:
  dmlc::OMPException::Rethrow(&v147);
  std::mutex::~mutex(&v148);
  std::exception_ptr::~exception_ptr(&v147);
  xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(v139);
  v147.__ptr_ = 0;
  v148.__m_.__uint64_t sig = 850045863;
  memset(v148.__m_.__opaque, 0, sizeof(v148.__m_.__opaque));
  if (v141[1] != v141[0])
  {
    unint64_t v107 = 0;
    int64_t v108 = ((char *)v141[1] - (char *)v141[0]) >> 4;
    do
    {
      uint64_t v109 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v141, v107);
      unint64_t v110 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v141, v107);
      xgboost::common::PartitionBuilder<2048ul>::MergeToArray(v139, v109, v110, *(void *)(v139[13] + 24 * *(unsigned int *)(*a3 + 88 * v109)));
      ++v107;
    }
    while (v108 != v107);
  }
  dmlc::OMPException::Rethrow(&v147);
  std::mutex::~mutex(&v148);
  std::exception_ptr::~exception_ptr(&v147);
  xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(v139, a3, a4);
LABEL_160:
  if (__p[1])
  {
    *(void **)&long long v143 = __p[1];
    operator delete(__p[1]);
  }
  if (v141[0])
  {
    v141[1] = v141[0];
    operator delete(v141[0]);
  }
  if (v144.__begin_)
  {
    v144.__end_ = v144.__begin_;
    operator delete(v144.__begin_);
  }
}

void sub_22E9B5988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 16));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = a4;
  operator new();
}

void sub_22E9B6650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](v16);
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v17 + 72));
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v17 + 24), 0);
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v15 + 40) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::Builder()
{
}

{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::UpdateTree(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "UpdateTree");
  xgboost::common::Monitor::Start();
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = *a2;
  if (*(void *)a1 != 1)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(a1 + 32, (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    if (a1 + 32 != v4) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>((char *)(a1 + 32), *(char **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    }
  }
  xgboost::tree::QuantileHistMaker::Builder<double>::InitData();
}

void sub_22E9B682C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<double>::GetNumberOfTrees(uint64_t a1)
{
  return *(void *)a1;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitData(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  (**(void (***)(uint64_t))a2)(a2);
  int v17 = 0;
  uint64_t v5 = a1[8];
  for (uint64_t i = a1[9]; i != v5; std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i))
    i -= 136;
  a1[9] = v5;
  uint64_t v6 = a1[1];
  int v7 = *(_DWORD *)(v6 + 20);
  uint64_t v8 = *(void *)(v6 + 128);
  LODWORD(__p) = -1;
  HIDWORD(__p) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = v8;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)a2 + 104))(&v15, a2, &__p);
  std::vector<unsigned int> __p = v15;
  uint64_t v11 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v9, 0);
}

void sub_22E9B6D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v30 = (uint64_t)__p;
  std::vector<unsigned int> __p = 0;
  if (v30) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v30);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::ExpandTree(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(v4, *(_DWORD *)(*(void *)(a1 + 8) + 24));
  xgboost::tree::QuantileHistMaker::Builder<double>::InitRoot();
}

void sub_22E9B74C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  std::vector<unsigned int> __p = &a37;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(v48 - 160);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<double>::UpdatePredictionCache(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[12];
  if (!v3) {
    return 0;
  }
  if (v3 != a2 || a1[11] == 0) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "UpdatePredictionCache");
  xgboost::common::Monitor::Start();
  if (v57.__m_.__opaque[7] < 0) {
    operator delete(v56.__ptr_);
  }
  v54[0] = a3[5];
  if (v54[0] != *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  uint64_t v47 = a1[7];
  uint64_t v48 = (float *)a1[1];
  uint64_t v49 = a1[11];
  uint64_t v9 = *a3;
  unint64_t v10 = a3[2];
  uint64_t v11 = a3[4];
  int v12 = *((_DWORD *)a3 + 12);
  v54[0] = a3[5];
  LODWORD(v50[0]) = 0;
  if (!v54[0]) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (!v49)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
    uint64_t v44 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    unsigned int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: p_last_tree", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v56);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v47 + 152), (uint64_t)v54);
  LODWORD(v50[0]) = v12;
  v55.i32[0] = -1;
  if (v12 != -1) {
    dmlc::LogCheckFormat<int,int>();
  }
  unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v49 + 168) - *(void *)(v49 + 160)) >> 2);
  uint64_t v13 = a1[8];
  for (uint64_t i = a1[9]; v13 != i; v13 += 136)
  {
    v50[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 112) - *(void *)(v13 + 104)) >> 3));
    if (v50[0] != (void *)v53) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    uint64_t v14 = *(void *)(v13 + 104);
    uint64_t v15 = *(void *)(v13 + 112);
    *(_OWORD *)int v50 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    long long v52 = 0u;
    uint64_t v16 = v15 - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
      do
      {
        uint64_t v19 = *(void *)(*(void *)(v13 + 104) + 24 * v17 + 8)
            - *(void *)(*(void *)(v13 + 104) + 24 * v17);
        unint64_t v20 = v19 >> 3;
        if ((v19 & 0x1FF8) != 0) {
          unint64_t v21 = ((unint64_t)(v19 >> 3) >> 10) + 1;
        }
        else {
          unint64_t v21 = (unint64_t)(v19 >> 3) >> 10;
        }
        if (v21)
        {
          unint64_t v22 = 0;
          do
          {
            unint64_t v23 = v22 + 1024;
            if (v20 >= v22 + 1024) {
              unint64_t v24 = v22 + 1024;
            }
            else {
              unint64_t v24 = v20;
            }
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v50, v17, v22, v24);
            unint64_t v22 = v23;
            --v21;
          }
          while (v21);
        }
        ++v17;
      }
      while (v17 != v18);
      unint64_t v25 = v50[0];
      uint64_t v16 = (uint64_t)v50[1];
    }
    else
    {
      unint64_t v25 = 0;
    }
    v56.__ptr_ = 0;
    v57.__m_.__uint64_t sig = 850045863;
    memset(v57.__m_.__opaque, 0, sizeof(v57.__m_.__opaque));
    uint64_t v26 = v16 - (void)v25;
    if (v26)
    {
      unint64_t v27 = 0;
      uint64_t v28 = v26 >> 4;
      do
      {
        FirstDimensiouint64_t n = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v50, v27);
        uint64_t Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v50, v27);
        uint64_t v33 = *(void *)(v49 + 160);
        if (*(_DWORD *)(v33 + 20 * (int)FirstDimension + 12) != -1
          && *(_DWORD *)(v33 + 20 * (int)FirstDimension + 4) == -1)
        {
          uint64_t v34 = Range;
          uint64_t v35 = v31;
          uint64_t v36 = *(void *)(v13 + 104);
          int8x16_t v55 = *(int8x16_t *)(*(void *)(v47 + 296) + 24 * FirstDimension);
          float v37 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v54, FirstDimension, v48, (double *)v55.i64, v55, v32);
          if (v34 < v35)
          {
            uint64_t v38 = *(void *)(v36 + 24 * FirstDimension);
            float v39 = v37 * v48[1];
            unint64_t v40 = v38 + 8 * v35;
            uint64_t v41 = (void *)(v38 + 8 * v34);
            do
            {
              unint64_t v42 = *v41 * v9;
              if (v42 >= v10) {
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              }
              *(float *)(v11 + 4 * v42) = v39 + *(float *)(v11 + 4 * v42);
              ++v41;
            }
            while ((unint64_t)v41 < v40);
          }
        }
        ++v27;
      }
      while (v27 != v28);
    }
    dmlc::OMPException::Rethrow(&v56);
    std::mutex::~mutex(&v57);
    std::exception_ptr::~exception_ptr(&v56);
    if (__p[1])
    {
      *(void **)&long long v52 = __p[1];
      operator delete(__p[1]);
    }
    if (v50[0])
    {
      v50[1] = v50[0];
      operator delete(v50[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v57.__m_.__opaque[7] < 0) {
    operator delete(v56.__ptr_);
  }
  return 1;
}

void sub_22E9B7DD4(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_22E9B7DE4()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E9B7EE8);
}

void sub_22E9B7DF0()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x22E9B7EE8);
}

void sub_22E9B7E00(_Unwind_Exception *a1)
{
}

void sub_22E9B7E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9B7E9CLL);
}

void sub_22E9B7EB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E9B7EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    JUMPOUT(0x22E9B7EE4);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitSampling(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitSampling");
  xgboost::common::Monitor::Start();
  if (v17.__m_.__opaque[7] < 0) {
    operator delete(__p);
  }
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  int v7 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v7);
  uint64_t v9 = *v6;
  float v10 = *(float *)(*(void *)(a1 + 8) + 48);
  std::vector<unsigned int> __p = 0;
  v17.__m_.__uint64_t sig = 850045863;
  memset(v17.__m_.__opaque, 0, sizeof(v17.__m_.__opaque));
  if (v9)
  {
    double v11 = v10;
    if (v8 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v8;
    }
    uint64_t v13 = (float *)(*a3 + 4);
    do
    {
      if (*v13 < 0.0
        || (uint64_t v12 = (16807 * v12) & 0x7FFFFFFFFFFFFFFFLL, (double)(unint64_t)(v12 - 1) * 1.08420217e-19 + 0.0 >= v11))
      {
        *(v13 - 1) = 0.0;
        *uint64_t v13 = 0.0;
      }
      v13 += 2;
      --v9;
    }
    while (v9);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v14, "InitSampling");
  xgboost::common::Monitor::Stop();
  if (v15 < 0) {
    operator delete(v14);
  }
  std::mutex::~mutex(&v17);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
}

void sub_22E9B8094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception_ptr a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::~mutex(v21);
  std::exception_ptr::~exception_ptr(&a16);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitRoot(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v31[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(int **)(a3 + 160);
  int v5 = *v4;
  if (*v4 == -1)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      ++v6;
      int v5 = v4[5 * (v5 & 0x7FFFFFFF)];
    }
    while (v5 != -1);
  }
  *(_DWORD *)a4 = 0;
  *((_DWORD *)a4 + 1) = v6;
  a4[1] = 0;
  a4[3] = 0;
  *((_DWORD *)a4 + 4) = 0;
  a4[4] = 0;
  a4[5] = 0;
  *((unsigned char *)a4 + 48) = 0;
  *(_OWORD *)(a4 + 7) = 0u;
  *(_OWORD *)(a4 + 9) = 0u;
  uint64_t v7 = a4[1];
  uint64_t v22 = *a4;
  uint64_t v23 = v7;
  LODWORD(v24) = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v25 = 0;
  long long v8 = *((_OWORD *)a4 + 4);
  long long v28 = *((_OWORD *)a4 + 3);
  long long v29 = v8;
  uint64_t v30 = a4[10];
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  unint64_t v20 = (void **)&v17;
  char v21 = 0;
  *(void *)&long long v17 = operator new(0x58uLL);
  *((void *)&v17 + 1) = v17;
  uint64_t v18 = v17 + 88;
  *((void *)&v17 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v18, (uint64_t)&v22, (uint64_t)v31, v17);
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)&v19, (uint64_t *)(a1 + 64), (uint64_t *)&v17);
  unint64_t v20 = (void **)&v17;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(v9 + 20);
  double v11 = *(void **)(v9 + 128);
  LODWORD(v22) = -1;
  HIDWORD(v22) = v10;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  LOBYTE(v25) = 0;
  uint64_t v26 = v11;
  (*(void (**)(long long *__return_ptr))(*(void *)a2 + 104))(&v16);
  long long v15 = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v14, 0);
}

void sub_22E9B89E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&a37);
  uint64_t v38 = *a10;
  if (*a10)
  {
    *(void *)(a11 + 32) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::BuildHistogram(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 1;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v50, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3));
  uint64_t v38 = a2;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v49, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v7 - *a4) >> 3));
  long long v8 = (double *)*a4;
  float v39 = (int *)a4[1];
  uint64_t v9 = a3;
  if ((int *)*a4 != v39)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v9 + 160);
      uint64_t v12 = v11 + 20 * *(int *)v8;
      unsigned int v13 = *(_DWORD *)(v12 + 4);
      LODWORD(v12) = *(_DWORD *)(v12 + 8);
      double v14 = v8[10];
      double v15 = v8[8];
      if (v14 >= v15) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v14 >= v15) {
        uint64_t v12 = v13;
      }
      else {
        uint64_t v12 = v12;
      }
      int v17 = *(_DWORD *)(v11 + 20 * (int)v12);
      if (v17 == -1)
      {
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          ++v18;
          int v17 = *(_DWORD *)(v11 + 20 * (v17 & 0x7FFFFFFF));
        }
        while (v17 != -1);
      }
      memset((char *)v51 + 7, 0, 32);
      uint64_t v19 = v50[0];
      uint64_t v20 = v50[0] + 88 * v10;
      *(void *)uint64_t v20 = v12 | (v18 << 32);
      *(void *)(v20 + 8) = 0;
      *(_DWORD *)(v20 + 16) = 0;
      uint64_t v23 = *(void **)(v20 + 24);
      uint64_t v22 = v20 + 24;
      char v21 = v23;
      if (v23)
      {
        *(void *)(v19 + 88 * v10 + 32) = v21;
        operator delete(v21);
        *(void *)uint64_t v22 = 0;
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
      }
      uint64_t v24 = v19 + 88 * v10;
      *(void *)uint64_t v22 = 0;
      *(void *)(v22 + 8) = 0;
      *(unsigned char *)(v22 + 24) = 0;
      *(void *)(v22 + 16) = 0;
      *(_OWORD *)(v24 + 49) = v51[0];
      *(_OWORD *)(v24 + 65) = v51[1];
      *(void *)(v24 + 80) = *(void *)((char *)&v51[1] + 15);
      uint64_t v9 = a3;
      uint64_t v25 = *(void *)(a3 + 160);
      int v26 = *(_DWORD *)(v25 + 20 * (int)v16);
      if (v26 == -1)
      {
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = 0;
        do
        {
          ++v27;
          int v26 = *(_DWORD *)(v25 + 20 * (v26 & 0x7FFFFFFF));
        }
        while (v26 != -1);
      }
      uint64_t v28 = v16 | (v27 << 32);
      memset((char *)v51 + 7, 0, 32);
      uint64_t v29 = v49[0];
      uint64_t v30 = v49[0] + 88 * v10;
      *(void *)uint64_t v30 = v28;
      *(void *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 16) = 0;
      uint64_t v33 = *(void **)(v30 + 24);
      uint64_t v32 = v30 + 24;
      uint64_t v31 = v33;
      if (v33)
      {
        *(void *)(v29 + 88 * v10 + 32) = v31;
        operator delete(v31);
        *(void *)uint64_t v32 = 0;
        *(void *)(v32 + 8) = 0;
        *(void *)(v32 + 16) = 0;
      }
      uint64_t v34 = v29 + 88 * v10;
      *(void *)uint64_t v32 = 0;
      *(void *)(v32 + 8) = 0;
      *(unsigned char *)(v32 + 24) = 0;
      *(void *)(v32 + 16) = 0;
      *(_OWORD *)(v34 + 49) = v51[0];
      *(_OWORD *)(v34 + 65) = v51[1];
      *(void *)(v34 + 80) = *(void *)((char *)&v51[1] + 15);
      ++v10;
      v8 += 11;
    }
    while (v8 != (double *)v39);
  }
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)v51, (uint64_t *)(a1 + 64), v50);
  uint64_t v35 = *(void *)(a1 + 8);
  int v36 = *(_DWORD *)(v35 + 20);
  uint64_t v37 = *(void *)(v35 + 128);
  LODWORD(v42) = -1;
  HIDWORD(v42) = v36;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v45 = 0;
  uint64_t v46 = v37;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v38 + 104))(&v47);
  uint64_t v42 = v47;
  uint64_t v43 = v48;
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v41, 0);
}

void sub_22E9B905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  xgboost::common::Index::~Index((xgboost::common::Index *)(v29 - 144));
  *(void *)(v29 - 144) = &a29;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  *(void *)(v29 - 144) = v29 - 168;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_quantile_hist__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::QuantileHistMaker::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 24), a2, v5);
  int v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(a1 + 16), a2, v4);
  int v6 = (void **)v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

uint64_t xgboost::tree::QuantileHistMaker::Update(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  float v4 = *(float *)(result + 28);
  *(float *)(result + 28) = v4 / (float)(unint64_t)((uint64_t)(a4[1] - *a4) >> 3);
  if (*(unsigned char *)(result + 17))
  {
    if (!*(void *)(result + 160)) {
      operator new();
    }
  }
  else if (!*(void *)(result + 168))
  {
    operator new();
  }
  if (*a4 != a4[1])
  {
    if (*(unsigned char *)(result + 17)) {
      xgboost::tree::QuantileHistMaker::Builder<float>::UpdateTree();
    }
    xgboost::tree::QuantileHistMaker::Builder<double>::UpdateTree();
  }
  *(float *)(result + 28) = v4;
  return result;
}

void sub_22E9B92DC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1060C4027D9941CLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::UpdatePredictionCache(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17) && *(void *)(a1 + 160)) {
    xgboost::tree::QuantileHistMaker::Builder<float>::UpdatePredictionCache();
  }
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    xgboost::tree::QuantileHistMaker::Builder<double>::UpdatePredictionCache();
  }
  return result;
}

void xgboost::tree::HistRowPartitioner::FindSplitConditions(uint64_t *a1, uint64_t a2, uint64_t a3, std::vector<int> *this)
{
  std::vector<int>::resize(this, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  uint64_t v8 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a2 + 160) + 20 * *(int *)(v8 + 88 * v9);
      uint64_t v11 = *(_DWORD *)(v10 + 12) & 0x7FFFFFFF;
      float v12 = *(float *)(v10 + 16);
      uint64_t v13 = **(void **)(a3 + 128);
      uint64_t v14 = *(unsigned int *)(v13 + 4 * v11);
      unsigned int v16 = *(_DWORD *)(v13 + 4 * (v11 + 1));
      if (v16 > 0x7FFFFFFE) {
        dmlc::LogCheckFormat<unsigned int,unsigned int>();
      }
      if (v14 >= v16)
      {
        int v15 = -1;
      }
      else
      {
        int v15 = -1;
        do
        {
          if (v12 == *(float *)(**(void **)(a3 + 120) + 4 * v14)) {
            int v15 = v14;
          }
          ++v14;
        }
        while (v16 != v14);
      }
      this->__begin_[v9++] = v15;
      uint64_t v8 = *a1;
    }
    while (v9 < 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  }
}

void sub_22E9B9578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if (v3 != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * (v4 >> 3);
    uint64_t v10 = (xgboost::common::RowSetCollection *)(a1 + 10);
    unsigned int v11 = 1;
    do
    {
      signed int v12 = *(_DWORD *)(*a2 + 88 * v8);
      uint64_t v13 = (uint64_t *)(*a1 + 16 * (int)(v11 - 1));
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      uint64_t v16 = *(void *)(a3 + 160) + 20 * v12;
      int v17 = *(_DWORD *)(v16 + 4);
      int v20 = *(_DWORD *)(v16 + 8);
      int v21 = v17 + 1;
      if (v17 + 1 != v20) {
        dmlc::LogCheckFormat<int,int>();
      }
      uint64_t v18 = *(void *)(a3 + 160) + 20 * v12;
      xgboost::common::RowSetCollection::AddSplit(v10, v12, *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), v15, v14);
      uint64_t v8 = v11;
    }
    while (v9 > v11++);
  }
}

void sub_22E9B9740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::~QuantileHistMaker(xgboost::tree::QuantileHistMaker *this)
{
  *(void *)this = &unk_26E24BD90;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v3);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26E24BD90;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v3);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::tree::QuantileHistMaker::LoadConfig(xgboost::tree::QuantileHistMaker *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  uint64_t v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::QuantileHistMaker *)((char *)this + 24), &v10);
  v6[0] = (void **)&v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cpu_hist_train_param");
  int v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(v5, (xgboost::tree::QuantileHistMaker *)((char *)this + 16), &v9);
  v6[0] = (void **)&v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9B9960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v21) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&a18, (uint64_t)&__p, 248, 1);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Attempted to load internal configuration for a model file that was generated ", 77);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"by a previous version of XGBoost. A likely cause for this warning is that the model ", 84);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"was saved with saveRDS() in R or pickle.dump() in Python. We strongly ADVISE AGAINST ", 85);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"using saveRDS() or pickle.dump() so that the model remains accessible in current and ", 85);
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"upcoming XGBoost releases. Please use xgb.save() instead to preserve models for the ", 84);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"long term. For more details and explanation, see ", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html", 68);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a18);
      if (a17 < 0) {
        operator delete(__p);
      }
    }
    a18 = 0;
    a19 = 0;
    a20 = 0;
    xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(v20 + 16), (uint64_t *)&a18, &a9);
    std::vector<unsigned int> __p = &a9;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::vector<unsigned int> __p = (uint64_t *)&a18;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __cxa_end_catch();
    JUMPOUT(0x22E9B994CLL);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::SaveConfig(xgboost::tree::QuantileHistMaker *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::QuantileHistMaker *)((char *)this + 24), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E9B9C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

const char *xgboost::tree::QuantileHistMaker::Name(xgboost::tree::QuantileHistMaker *this)
{
  return "grow_quantile_histmaker";
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 1) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      operator new();
    }
    dmlc::LogCheckFormat<BOOL,BOOL>();
  }
  std::terminate();
}

void sub_22E9B9F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void *xgboost::RegTree::NodeCats(xgboost::RegTree *this, void *a2, int a3)
{
  uint64_t v3 = a2[32];
  uint64_t v4 = a2[35];
  uint64_t v5 = a2[36] - v4;
  v7[0] = (a2[33] - v3) >> 2;
  v7[1] = v3;
  if (a3 >= (unint64_t)(v5 >> 4)) {
    std::terminate();
  }
  return xgboost::common::Span<float,18446744073709551615ul>::subspan(v7, *(void *)(v4 + 16 * a3), *(void *)(v4 + 16 * a3 + 8), (unint64_t *)this);
}

void dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E9BA1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::common::DenseColumn<unsigned char,true>::~DenseColumn()
{
}

void xgboost::common::SparseColumn<unsigned char>::~SparseColumn()
{
}

uint64_t xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if ((*(void *)(**(void **)(a1 + 40) + (((*(void *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(unsigned char *)(a1 + 48) + a2))) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= a2) {
    std::terminate();
  }
  return *(_DWORD *)(a1 + 32) + *(unsigned __int8 *)(*(void *)(a1 + 24) + a2);
}

uint64_t xgboost::common::SparseColumn<unsigned char>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *a3;
  if (*a3 >= v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  while (1)
  {
    unint64_t v6 = *(void *)(v5 + 8 * v4);
    if (v6 >= a2) {
      break;
    }
    *a3 = ++v4;
    if (v3 == v4) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v6 != a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= v4) {
    std::terminate();
  }
  return *(_DWORD *)(a1 + 32) + *(unsigned __int8 *)(*(void *)(a1 + 24) + v4);
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 2) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      operator new();
    }
    dmlc::LogCheckFormat<BOOL,BOOL>();
  }
  std::terminate();
}

void sub_22E9BA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned short,true>::~DenseColumn()
{
}

void xgboost::common::SparseColumn<unsigned short>::~SparseColumn()
{
}

uint64_t xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if ((*(void *)(**(void **)(a1 + 40) + (((*(void *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(unsigned char *)(a1 + 48) + a2))) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= a2) {
    std::terminate();
  }
  return *(_DWORD *)(a1 + 32) + *(unsigned __int16 *)(*(void *)(a1 + 24) + 2 * a2);
}

uint64_t xgboost::common::SparseColumn<unsigned short>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *a3;
  if (*a3 >= v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  while (1)
  {
    unint64_t v6 = *(void *)(v5 + 8 * v4);
    if (v6 >= a2) {
      break;
    }
    *a3 = ++v4;
    if (v3 == v4) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v6 != a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= v4) {
    std::terminate();
  }
  return *(_DWORD *)(a1 + 32) + *(unsigned __int16 *)(*(void *)(a1 + 24) + 2 * v4);
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 4) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      operator new();
    }
    dmlc::LogCheckFormat<BOOL,BOOL>();
  }
  std::terminate();
}

void sub_22E9BA9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned int,true>::~DenseColumn()
{
}

void xgboost::common::SparseColumn<unsigned int>::~SparseColumn()
{
}

uint64_t xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if ((*(void *)(**(void **)(a1 + 40) + (((*(void *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(unsigned char *)(a1 + 48) + a2))) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= a2) {
    std::terminate();
  }
  return (*(_DWORD *)(*(void *)(a1 + 24) + 4 * a2) + *(_DWORD *)(a1 + 32));
}

uint64_t xgboost::common::SparseColumn<unsigned int>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *a3;
  if (*a3 >= v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  while (1)
  {
    unint64_t v6 = *(void *)(v5 + 8 * v4);
    if (v6 >= a2) {
      break;
    }
    *a3 = ++v4;
    if (v3 == v4) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v6 != a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a1 + 16) <= v4) {
    std::terminate();
  }
  return (*(_DWORD *)(*(void *)(a1 + 24) + 4 * v4) + *(_DWORD *)(a1 + 32));
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 1) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      dmlc::LogCheckFormat<BOOL,BOOL>();
    }
    operator new();
  }
  std::terminate();
}

void sub_22E9BAE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned char,false>::~DenseColumn()
{
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 2) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      dmlc::LogCheckFormat<BOOL,BOOL>();
    }
    operator new();
  }
  std::terminate();
}

void sub_22E9BB15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned short,false>::~DenseColumn()
{
}

void xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(void *a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 152) != 4) {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>();
  }
  if (*(void *)(*(void *)(a2 + 96) + 8 * (a3 + 1)) == *(void *)(*(void *)(a2 + 96) + 8 * a3)
    || *(void *)a2 != 0)
  {
    *a1 = 0;
    if (*(unsigned char *)(*(void *)(a2 + 48) + a3)) {
      operator new();
    }
    if (*(unsigned char *)(a2 + 156)) {
      dmlc::LogCheckFormat<BOOL,BOOL>();
    }
    operator new();
  }
  std::terminate();
}

void sub_22E9BB49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *std::vector<std::pair<std::string, std::string>> v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned int,false>::~DenseColumn()
{
}

void std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](uint64_t a1)
{
  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100]((char ***)(a1 + 128));
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 104));
  unint64_t v4 = (void **)(a1 + 64);
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 56), 0);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x230FA80D0);
}

char **std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](char ***a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    xgboost::common::Monitor::~Monitor(result);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

uint64_t std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::~HistogramBuilder(result);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

char *std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  std::vector<std::pair<std::string, std::string>> v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    std::vector<std::pair<std::string, std::string>> v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    std::vector<std::pair<std::string, std::string>> v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t std::vector<xgboost::tree::HistRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&,int>(int64x2_t *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v5) {
    unint64_t v5 = 0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v10 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v10 = v5;
  }
  int v26 = a1 + 1;
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v11 = (char *)operator new(136 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v23 = v11;
  v24.i64[0] = (uint64_t)&v11[136 * v4];
  uint64_t v25 = &v11[136 * v10];
  xgboost::tree::HistRowPartitioner::HistRowPartitioner((xgboost::tree::HistRowPartitioner *)v24.i64[0], a2, a3, a4);
  uint64_t v12 = v24.i64[0];
  uint64_t v13 = v24.i64[0] + 136;
  v24.i64[1] = v24.i64[0] + 136;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v12 + v16;
      uint64_t v18 = v14 + v16;
      *(void *)(v17 - 136) = 0;
      *(void *)(v17 - 128) = 0;
      *(void *)(v17 - 120) = 0;
      *(_OWORD *)(v17 - 136) = *(_OWORD *)(v14 + v16 - 136);
      *(void *)(v17 - 120) = *(void *)(v14 + v16 - 120);
      *(void *)(v18 - 136) = 0;
      *(void *)(v18 - 128) = 0;
      *(void *)(v18 - 120) = 0;
      *(void *)(v17 - 112) = 0;
      *(void *)(v17 - 104) = 0;
      *(void *)(v17 - 96) = 0;
      *(_OWORD *)(v17 - 112) = *(_OWORD *)(v14 + v16 - 112);
      *(void *)(v17 - 96) = *(void *)(v14 + v16 - 96);
      *(void *)(v18 - 112) = 0;
      *(void *)(v18 - 104) = 0;
      *(void *)(v18 - 96) = 0;
      *(void *)(v17 - 88) = 0;
      *(void *)(v17 - 80) = 0;
      *(void *)(v17 - 72) = 0;
      *(_OWORD *)(v17 - 88) = *(_OWORD *)(v14 + v16 - 88);
      *(void *)(v17 - 72) = *(void *)(v14 + v16 - 72);
      *(void *)(v18 - 80) = 0;
      *(void *)(v18 - 72) = 0;
      *(void *)(v18 - 88) = 0;
      uint64_t v19 = *(void *)(v14 + v16 - 64);
      *(void *)(v17 - 48) = 0;
      *(void *)(v17 - 40) = 0;
      *(void *)(v17 - 64) = v19;
      *(void *)(v17 - 56) = 0;
      *(_OWORD *)(v17 - 56) = *(_OWORD *)(v14 + v16 - 56);
      *(void *)(v17 - 40) = *(void *)(v14 + v16 - 40);
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *(void *)(v18 - 40) = 0;
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 32) = 0;
      *(_OWORD *)(v17 - 32) = *(_OWORD *)(v14 + v16 - 32);
      *(void *)(v17 - 16) = *(void *)(v14 + v16 - 16);
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      *(void *)(v18 - 16) = 0;
      *(void *)(v17 - 8) = *(void *)(v14 + v16 - 8);
      v16 -= 136;
    }
    while (v14 + v16 != v15);
    int64x2_t v20 = *a1;
    uint64_t v13 = v24.i64[1];
    v12 += v16;
  }
  a1->i64[0] = v12;
  a1->i64[1] = v13;
  int64x2_t v24 = v20;
  __n128 v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  uint64_t v25 = v21;
  uint64_t v23 = (char *)v20.i64[0];
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)&v23);
  return v13;
}

void sub_22E9BB974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

xgboost::tree::HistRowPartitioner *xgboost::tree::HistRowPartitioner::HistRowPartitioner(xgboost::tree::HistRowPartitioner *this, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 5) = 0u;
  uint64_t v8 = (xgboost::tree::HistRowPartitioner *)((char *)this + 80);
  *((void *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v13.__ptr_ = 0;
  v14.__m_.__uint64_t sig = 850045863;
  memset(v14.__m_.__opaque, 0, sizeof(v14.__m_.__opaque));
  std::vector<unsigned long>::resize((uint64_t)this + 80, a2);
  if (a2 % a4) {
    unint64_t v9 = a2 / a4 + 1;
  }
  else {
    unint64_t v9 = a2 / a4;
  }
  if (a2 < v9) {
    unint64_t v9 = a2;
  }
  if (v9)
  {
    unint64_t v10 = *(void **)v8;
    uint64_t v11 = a3;
    do
    {
      *v10++ = v11++;
      --v9;
    }
    while (v9);
  }
  xgboost::common::RowSetCollection::Init(v8);
  *((void *)this + 16) = a3;
  std::mutex::~mutex(&v14);
  std::exception_ptr::~exception_ptr(&v13);
  return this;
}

void sub_22E9BBA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v11);
  std::exception_ptr::~exception_ptr(&a9);
  xgboost::common::Index::~Index(v10);
  xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(v9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::Learner::AllowLazyCheckPoint(xgboost::Learner *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 64))();
}

void xgboost::Learner::~Learner(xgboost::Learner *this)
{
  *(void *)this = &unk_26E24C0A8;
  *((void *)this + 1) = &unk_26E24C1B0;
  *((void *)this + 2) = &unk_26E24C1E0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

uint64_t xgboost::LearnerModelParam::LearnerModelParam(uint64_t a1, _DWORD *a2, __int16 a3, float a4)
{
  *(float *)a1 = a4;
  int v5 = a2[1];
  *(_WORD *)(a1 + 12) = a3;
  unsigned int v6 = a2[2];
  if (v6 <= 1) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = a2[2];
  }
  unsigned int v8 = a2[7];
  if (v7 <= v8) {
    unsigned int v9 = a2[7];
  }
  else {
    unsigned int v9 = v7;
  }
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v9;
  if (v6 >= 2 && v8 >= 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    std::exception_ptr v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    std::mutex v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: n_classes <= 1 || n_targets <= 1", 46);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Multi-class multi-output is not yet supported. n_classes:", 57);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", n_targets:", 12);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  return a1;
}

{
  return xgboost::LearnerModelParam::LearnerModelParam(a1, a2, a3, a4);
}

void sub_22E9BBE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::GenericParameter::GenericParameter(xgboost::GenericParameter *this)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 1) = -1;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  double result = NAN;
  *(void *)((char *)this + 20) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  *((_DWORD *)this + 1) = -1;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  double result = NAN;
  *(void *)((char *)this + 20) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 14) = 0;
  return result;
}

void xgboost::GenericParameter::ConfigureGpuId(xgboost::GenericParameter *this)
{
  *(void *)&long long v12 = *MEMORY[0x263EF8340];
  std::to_string(&v2, -1);
  std::string::basic_string[abi:ne180100]<0>(v9, "gpu_id");
  std::string __p = v2;
  memset(&v2, 0, sizeof(v2));
  unint64_t v4 = 0;
  int v5 = 0;
  unint64_t v3 = 0;
  unsigned int v7 = &v3;
  char v8 = 0;
  unint64_t v3 = (std::string *)operator new(0x30uLL);
  unint64_t v4 = v3;
  int v5 = v3 + 2;
  unint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v5, (long long *)v9, &v12, v3);
  xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v6, this, (uint64_t *)&v3);
  unsigned int v7 = (std::string **)v6;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  unsigned int v7 = &v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__r_.__value_.__l.__data_);
  }
}

void sub_22E9BBFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::GenericParameter *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::GenericParameter::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD71FC0, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::GenericParameter::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD71FC0, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E9BC0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::GenericParameter::Threads(xgboost::GenericParameter *this)
{
  return 1;
}

void xgboost::Learner::Create()
{
}

void sub_22E9BC190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x230FA80D0](v12, 0x10B3C4034DAC208);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::LearnerImpl(void *a1, void **a2)
{
  memset(v3, 0, sizeof(v3));
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  xgboost::LearnerIO::LearnerIO((unint64_t)a1, v3);
  unint64_t v4 = (void **)v3;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *a1 = &unk_26E24C258;
  a1[1] = &unk_26E24C388;
  a1[2] = &unk_26E24C3B8;
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector();
}

void sub_22E9BC2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  xgboost::LearnerIO::~LearnerIO(v12);
  _Unwind_Resume(a1);
}

unint64_t xgboost::LearnerIO::LearnerIO(unint64_t a1, void **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>(&v16, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 68) = -1;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 84) = 0xFFFFFFFF00000000;
  *(_WORD *)(a1 + 92) = 0;
  *(void *)a1 = &unk_26E24C5C0;
  *(void *)(a1 + 8) = &unk_26E24C6E0;
  *(void *)(a1 + 16) = &unk_26E24C710;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 264));
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(void *)(a1 + 460) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 328) = 1056964608;
  *(_DWORD *)(a1 + 348) = 1;
  *(void *)(a1 + 352) = 0x100000006;
  *(_WORD *)(a1 + 476) = 0;
  *(void *)(a1 + 468) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Learner");
  std::string::operator=((std::string *)(a1 + 264), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  unint64_t v3 = (uint64_t **)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  v19[0] = a1;
  unint64_t v4 = std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(v3, a1, v19);
  int v5 = v16;
  unsigned int v6 = v17;
  if (v16 != v17)
  {
    unsigned int v7 = (int8x8_t *)(v4 + 40);
    do
    {
      char v8 = (std::__shared_weak_count *)v5[1];
      v19[0] = *v5;
      v19[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xgboost::PredictionContainer::Cache(v7, v19, -1);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  *(void *)a1 = &unk_26E24C430;
  *(void *)(a1 + 8) = &unk_26E24C560;
  *(void *)(a1 + 16) = &unk_26E24C590;
  std::string::basic_string[abi:ne180100]<0>(&__str, "num_round");
  unsigned int v9 = (void **)(a1 + 568);
  *(void *)(a1 + 584) = 0;
  char v10 = (uint64_t **)(a1 + 576);
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = a1 + 576;
  uint64_t v11 = (uint64_t *)operator new(0x38uLL);
  uint64_t v12 = (std::string *)(v11 + 4);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    std::exception_ptr v13 = *v9;
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v11[6] = __str.__r_.__value_.__r.__words[2];
    std::exception_ptr v13 = (void *)(a1 + 576);
  }
  *uint64_t v11 = 0;
  v11[1] = 0;
  v11[2] = (uint64_t)v10;
  *char v10 = v11;
  std::mutex v14 = (void *)*v13;
  if (v14) {
    *unsigned int v9 = v14;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v11);
  ++*(void *)(a1 + 584);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 592), "CONFIG-offset:");
  return a1;
}

void sub_22E9BC684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  operator delete(v26);
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(v25, *v27);
  if (a24 < 0) {
    operator delete(__p);
  }
  xgboost::LearnerConfiguration::~LearnerConfiguration(v24);
  _Unwind_Resume(a1);
}

void xgboost::LearnerIO::~LearnerIO(xgboost::LearnerIO *this)
{
  *(void *)this = &unk_26E24C430;
  *((void *)this + 1) = &unk_26E24C560;
  *((void *)this + 2) = &unk_26E24C590;
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)this + 568, *((char **)this + 72));

  xgboost::LearnerConfiguration::~LearnerConfiguration(this);
}

void xgboost::LearnerImpl::~LearnerImpl(xgboost::LearnerImpl *this)
{
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  unint64_t v7;
  BOOL v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;

  *(void *)this = &unk_26E24C258;
  *((void *)this + 1) = &unk_26E24C388;
  *((void *)this + 2) = &unk_26E24C3B8;
  std::string v2 = (void *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  unint64_t v4 = v2 + 1;
  unint64_t v3 = (uint64_t *)v2[1];
  if (v3)
  {
    int v5 = v2 + 1;
    unsigned int v6 = (void *)v2[1];
    do
    {
      unsigned int v7 = v6[4];
      char v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this) {
        unsigned int v9 = v6;
      }
      else {
        unsigned int v9 = v6 + 1;
      }
      if (v8) {
        int v5 = v6;
      }
      unsigned int v6 = (void *)*v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= (unint64_t)this)
    {
      char v10 = v2 + 1;
      uint64_t v11 = (void *)v2[1];
      do
      {
        uint64_t v12 = v11[4];
        std::exception_ptr v13 = v12 >= (unint64_t)this;
        if (v12 >= (unint64_t)this) {
          std::mutex v14 = v11;
        }
        else {
          std::mutex v14 = v11 + 1;
        }
        if (v13) {
          char v10 = v11;
        }
        uint64_t v11 = (void *)*v14;
      }
      while (*v14);
      if (v10 != v4 && v10[4] <= (unint64_t)this)
      {
        uint64_t v15 = (uint64_t *)v10[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          char v17 = v10;
          do
          {
            uint64_t v16 = (uint64_t *)v17[2];
            uint64_t v18 = *v16 == (void)v17;
            char v17 = v16;
          }
          while (!v18);
        }
        if ((uint64_t *)*v2 == v10) {
          *std::string v2 = v16;
        }
        --v2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v10);
        xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v10 + 5));
      }
    }
  }
  std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)this + 624);
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector();
}

void xgboost::LearnerIO::LoadModel(xgboost::LearnerIO *this, const xgboost::Json *a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)a2 + 12) != 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    uint64_t v61 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    unint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: IsA<Object>(in)", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
  }
  unint64_t v4 = xgboost::Version::Load(a2, a2);
  if (v4 == 1
    && SHIDWORD(v4) <= 5
    && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v5) + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v73, (uint64_t)&__p, 749, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"Found JSON model saved before XGBoost 1.6, please save the model using current version again. The support for old JSON model will be discontinued in XGBoost 2.3.", 161);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v73);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "learner");
  unsigned int v6 = (_DWORD **)(*(uint64_t (**)(void, std::string *))(**(void **)a2 + 24))(*(void *)a2, &v73);
  unsigned int v7 = (char *)xgboost::Cast<xgboost::JsonObject,xgboost::Value>(*v6);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p_p, "learner_model_param");
  uint64_t v8 = (uint64_t)(v7 + 16);
  unsigned int v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&p_p_p);
  char v10 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v9);
  *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_feature");
  uint64_t v11 = (uint64_t)(v10 + 16);
  uint64_t v12 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  std::exception_ptr v13 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v12);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "num_feature");
  int v72 = &p_p;
  std::mutex v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&p_p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v72);
  std::string::operator=((std::string *)((char *)v14 + 56), (const std::string *)(v13 + 16));
  if (SHIBYTE(v70) < 0) {
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  uint64_t v15 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v16 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v15);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "num_class");
  int v72 = &p_p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&p_p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v72);
  std::string::operator=((std::string *)((char *)v17 + 56), (const std::string *)(v16 + 16));
  if (SHIBYTE(v70) < 0) {
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_target");
  uint64_t v18 = (xgboost::LearnerModelParamLegacy *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v19 = (xgboost::Value **)v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 + 24 != (char *)v19)
  {
    int64x2_t v20 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(v19[7]);
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_target");
    p_p = &__p;
    uint64_t v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    uint64_t v18 = (xgboost::LearnerModelParamLegacy *)std::string::operator=((std::string *)((char *)v21 + 56), (const std::string *)(v20 + 16));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  xgboost::LearnerModelParamLegacy::__MANAGER__(v18);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71F30, (uint64_t)this + 328, v73.__r_.__value_.__l.__data_, &v73.__r_.__value_.__l.__size_, 0, 2);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "base_score");
  uint64_t v22 = (xgboost::Value **)std::map<std::string,xgboost::Json>::at(v11, (const void **)&p_p);
  uint64_t v23 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v22);
  if (v23[39] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v23 + 2), *((void *)v23 + 3));
  }
  else {
    std::string __p = *(std::string *)(v23 + 16);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(p_p);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &__p;
  }
  else {
    uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = (const char *)HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    int v26 = (const char *)LODWORD(__p.__r_.__value_.__r.__words[1]);
  }
  xgboost::detail::FromCharFloatImpl(v25, v26, (float *)this + 82, v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, (void *)v73.__r_.__value_.__l.__size_);
  if (v67 < 0) {
    operator delete(p_p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "objective");
  uint64_t v27 = (void *)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "name");
  uint64_t v28 = (xgboost::Value **)(*(uint64_t (**)(void, std::string *))(*(void *)*v27 + 24))(*v27, &v73);
  uint64_t v29 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v28);
  if (v29[39] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v29 + 2), *((void *)v29 + 3));
  }
  else {
    std::string __p = *(std::string *)(v29 + 16);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(&v73, (long long *)&__p);
  p_p = 0;
  unint64_t v69 = 0;
  unsigned int v70 = 0;
  p_p_p = &p_p;
  char v66 = 0;
  p_p = operator new(0x30uLL);
  unint64_t v69 = p_p;
  unsigned int v70 = (char *)p_p + 48;
  unint64_t v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v70, (long long *)&v73, v75, (std::string *)p_p);
  xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v64, (unsigned char *)this + 480, (uint64_t *)&p_p);
  p_p_p = v64;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  p_p_p = &p_p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = xgboost::ObjFunction::Create((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 64);
  uint64_t v31 = *((void *)this + 3);
  *((void *)this + 3) = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    uint64_t v30 = *((void *)this + 3);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v30 + 16))(v30, v27);
  std::string::basic_string[abi:ne180100]<0>(&v73, "gradient_booster");
  uint64_t v32 = (void *)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "name");
  uint64_t v33 = (xgboost::Value **)(*(uint64_t (**)(void, std::string *))(*(void *)*v32 + 24))(*v32, &v73);
  uint64_t v34 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v33);
  std::string::operator=(&__p, (const std::string *)(v34 + 16));
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "booster");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = __p;
  }
  p_p = 0;
  unint64_t v69 = 0;
  unsigned int v70 = 0;
  p_p_p = &p_p;
  char v66 = 0;
  p_p = operator new(0x30uLL);
  unint64_t v69 = p_p;
  unsigned int v70 = (char *)p_p + 48;
  unint64_t v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v70, (long long *)&v73, v75, (std::string *)p_p);
  xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v63, (unsigned char *)this + 480, (uint64_t *)&p_p);
  p_p_p = v63;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  p_p_p = &p_p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  uint64_t v35 = xgboost::GradientBooster::Create((uint64_t)this + 496, (uint64_t)this + 64, (uint64_t)this + 464);
  uint64_t v36 = *((void *)this + 4);
  *((void *)this + 4) = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    uint64_t v35 = *((void *)this + 4);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v35 + 16))(v35, v32);
  std::string::basic_string[abi:ne180100]<0>(&v73, "attributes");
  uint64_t v37 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  uint64_t v38 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v37);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  *((void *)this + 24) = (char *)this + 200;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  float v39 = (const void **)v38[2];
  if (v39 != v38 + 3)
  {
    do
    {
      unint64_t v40 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v39[7]);
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)(v39 + 4);
      uint64_t v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 24, v39 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v73);
      std::string::operator=((std::string *)(v41 + 7), (const std::string *)(v40 + 16));
      uint64_t v42 = (const void **)v39[1];
      if (v42)
      {
        do
        {
          uint64_t v43 = (const void ***)v42;
          uint64_t v42 = (const void **)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (const void ***)v39[2];
          BOOL v44 = *v43 == v39;
          float v39 = (const void **)v43;
        }
        while (!v44);
      }
      float v39 = (const void **)v43;
    }
    while (v43 != v38 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "feature_names");
  uint64_t v45 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  uint64_t v46 = v7 + 24;
  if (v7 + 24 != (char *)v45)
  {
    uint64_t v47 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v45 + 56));
    std::vector<std::string>::resize((std::vector<std::string> *)this + 9, (uint64_t)(*((void *)v47 + 3) - *((void *)v47 + 2)) >> 3);
    uint64_t v49 = (xgboost::Value **)*((void *)v47 + 2);
    uint64_t v48 = (xgboost::Value **)*((void *)v47 + 3);
    if (v49 != v48)
    {
      uint64_t v50 = *((void *)this + 27);
      do
      {
        unint64_t v51 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v49);
        if (v51[39] < 0) {
          std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v51 + 2), *((void *)v51 + 3));
        }
        else {
          std::string v73 = *(std::string *)(v51 + 16);
        }
        if (*(char *)(v50 + 23) < 0) {
          operator delete(*(void **)v50);
        }
        long long v52 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        *(void *)(v50 + 16) = *((void *)&v73.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v50 = v52;
        v50 += 24;
        ++v49;
      }
      while (v49 != v48);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "feature_types");
  uint64_t v53 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v8, (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v46 != (char *)v53)
  {
    float64x2_t v54 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v53 + 56));
    std::vector<std::string>::resize((std::vector<std::string> *)this + 10, (uint64_t)(*((void *)v54 + 3) - *((void *)v54 + 2)) >> 3);
    std::exception_ptr v56 = (xgboost::Value **)*((void *)v54 + 2);
    int8x16_t v55 = (xgboost::Value **)*((void *)v54 + 3);
    if (v56 != v55)
    {
      uint64_t v57 = *((void *)this + 30);
      do
      {
        uint64_t v58 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v56);
        if (v58[39] < 0) {
          std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v58 + 2), *((void *)v58 + 3));
        }
        else {
          std::string v73 = *(std::string *)(v58 + 16);
        }
        if (*(char *)(v57 + 23) < 0) {
          operator delete(*(void **)v57);
        }
        long long v59 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        *(void *)(v57 + 16) = *((void *)&v73.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v57 = v59;
        v57 += 24;
        ++v56;
      }
      while (v56 != v55);
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 160);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22E9BD334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

void xgboost::LearnerIO::SaveModel(xgboost::LearnerIO *this, xgboost::Json *a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 160);
  if (v3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    __n128 v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Call Configure before saving model.", 35);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  xgboost::Version::Save(a2, a2);
}

void sub_22E9BDD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void xgboost::LearnerConfiguration::Configure(xgboost::LearnerConfiguration *this)
{
  uint64_t v1 = (unsigned __int8 *)this + 160;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 160);
  if ((v2 & 1) == 0) {
    return;
  }
  unint64_t v4 = (std::mutex *)((char *)this + 96);
  std::mutex::lock((std::mutex *)((char *)this + 96));
  unsigned __int8 v5 = atomic_load(v1);
  if ((v5 & 1) == 0) {
    goto LABEL_212;
  }
  int v122 = v4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Configure");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  char v130 = *((unsigned char *)this + 480);
  int v131 = *((_DWORD *)this + 121);
  char v132 = *((unsigned char *)this + 488);
  p_s1 = &__s1;
  unsigned int v7 = (unsigned __int8 *)this + 496;
  if (*((char *)this + 519) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)this + 62), *((void *)this + 63));
  }
  else
  {
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    __s1.__r_.__value_.__r.__words[2] = *((void *)this + 64);
  }
  uint64_t v8 = (const void **)((char *)this + 520);
  if (*((char *)this + 543) < 0)
  {
    std::string::__init_copy_ctor_external(&v134, *((const std::string::value_type **)this + 65), *((void *)this + 66));
  }
  else
  {
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    v134.__r_.__value_.__r.__words[2] = *((void *)this + 67);
  }
  unsigned int v9 = (void **)((char *)this + 168);
  int v124 = (void *)((char *)this + 176);
  std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(&v129, *((void **)this + 21), (void *)this + 22);
  xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v128, (unsigned char *)this + 480, (uint64_t *)&v129);
  __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v128;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  float v10 = *((float *)this + 82);
  memset(v127, 0, sizeof(v127));
  xgboost::LearnerModelParamLegacy::__MANAGER__(v11);
  uint64_t v12 = (_DWORD *)((char *)this + 328);
  dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71F30, (uint64_t)this + 328, (uint64_t)v129.__begin_, (uint64_t)v129.__end_, 0, v127, 0);
  __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v127;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int v13 = *((unsigned __int8 *)this + 64);
  uint64_t v14 = *((void *)this + 9);
  uint64_t v125 = (xgboost::LearnerConfiguration *)((char *)this + 64);
  xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v126, (unsigned char *)this + 64, (uint64_t *)&v129);
  __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v126;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v123 = (xgboost::GlobalConfiguration *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v15);
  xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(v123, (uint64_t *)&v129, (uint64_t *)&__p);
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  if (!*((_DWORD *)this + 121))
  {
    Engine = rabit::engine::GetEngine(v16);
    if ((*(unsigned int (**)(void *))(*(void *)Engine + 80))(Engine)) {
      *((_DWORD *)this + 121) = 2;
    }
  }
  if (!v13 || *((void *)this + 9) != v14)
  {
    uint64_t v18 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    unsigned int v19 = *((_DWORD *)this + 18);
    *(_DWORD *)uint64_t v18 = v19;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v19 = i + 1812433253 * (v19 ^ (v19 >> 30));
      *(_DWORD *)(v18 + 4 * i) = v19;
    }
    *(void *)(v18 + 2496) = 0;
  }
  uint64_t v21 = (int *)((char *)this + 332);
  if (!*((_DWORD *)this + 83))
  {
    LODWORD(v140) = 0;
    uint64_t v22 = (int8x8_t *)(*(uint64_t (**)(xgboost::LearnerConfiguration *))(*(void *)this + 248))(this);
    xgboost::PredictionContainer::ClearExpiredEntries(v22);
    for (uint64_t j = (void *)v22[2]; j; uint64_t j = (void *)*j)
    {
      if (!j[2])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        uint64_t v31 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: matrix.first", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      }
      uint64_t v25 = j[6];
      if (!v25 || *(void *)(v25 + 8) == -1)
      {
        uint64_t v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        uint64_t v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: !matrix.second.ref.expired()", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      }
      __p.__begin_ = 0;
      uint64_t v23 = (std::vector<std::pair<std::string, std::string>>::pointer *)(**(uint64_t (***)(void))j[2])(j[2]);
      __p.__begin_ = v23[1];
      uint64_t v139 = 0xFFFFFFFFLL;
      if ((unint64_t)__p.__begin_ >> 32) {
        dmlc::LogCheckFormat<unsigned long long,unsigned long long>();
      }
      int begin = (int)__p.__begin_;
      if (v140 > LODWORD(__p.__begin_)) {
        int begin = v140;
      }
      LODWORD(v140) = begin;
    }
    uint64_t v33 = rabit::engine::GetEngine((rabit::engine *)v23);
    uint64_t v12 = (_DWORD *)((char *)this + 328);
    unsigned int v7 = (unsigned __int8 *)this + 496;
    uint64_t v8 = (const void **)((char *)this + 520);
    (*(void (**)(void *, uint64_t *, uint64_t, uint64_t, unsigned int *(*)(unsigned int *, unsigned int *, int), void, void))(*(void *)v33 + 8))(v33, &v140, 4, 1, rabit::op::Reducer<rabit::op::Max,unsigned int>, 0, 0);
    int v34 = *v21;
    if (v140 <= *v21)
    {
      LODWORD(v135.__r_.__value_.__l.__data_) = 0;
      if (!v34) {
        dmlc::LogCheckFormat<unsigned int,int>();
      }
    }
    else
    {
      int *v21 = v140;
    }
  }
  xgboost::common::ToString<unsigned int>();
  std::string::basic_string[abi:ne180100]<0>(&v135, "num_feature");
  uint64_t v139 = (uint64_t)&v135;
  uint64_t v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v135.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v139);
  uint64_t v36 = (void **)v35 + 7;
  if (*((char *)v35 + 79) < 0) {
    operator delete(*v36);
  }
  *(std::vector<std::pair<std::string, std::string>> *)uint64_t v36 = __p;
  HIBYTE(__p.__end_cap_.__value_) = 0;
  LOBYTE(__p.__begin_) = 0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
  }
  xgboost::common::ToString<int>();
  std::string::basic_string[abi:ne180100]<0>(&v135, "num_class");
  uint64_t v139 = (uint64_t)&v135;
  uint64_t v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v135.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v139);
  uint64_t v38 = (void **)v37 + 7;
  if (*((char *)v37 + 79) < 0) {
    operator delete(*v38);
  }
  *(std::vector<std::pair<std::string, std::string>> *)uint64_t v38 = __p;
  HIBYTE(__p.__end_cap_.__value_) = 0;
  LOBYTE(__p.__begin_) = 0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
  }
  std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(&__p, *v9, v124);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate(&v129);
  std::vector<std::pair<std::string, std::string>> v129 = __p;
  memset(&__p, 0, sizeof(__p));
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  if (v124 == (void *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p.__begin_))
  {
    BOOL v41 = 0;
    goto LABEL_68;
  }
  std::string::basic_string[abi:ne180100]<0>(&v135, "num_class");
  uint64_t v39 = std::map<std::string,xgboost::Json>::at((uint64_t)this + 168, (const void **)&v135.__r_.__value_.__l.__data_);
  int v40 = *(char *)(v39 + 23);
  if (v40 < 0)
  {
    if (*(void *)(v39 + 8) != 1) {
      goto LABEL_54;
    }
    uint64_t v39 = *(void *)v39;
  }
  else if (v40 != 1)
  {
    goto LABEL_54;
  }
  if (*(unsigned char *)v39 == 48)
  {
    BOOL v41 = 0;
    goto LABEL_66;
  }
LABEL_54:
  int v42 = *((char *)this + 543);
  if (v42 < 0)
  {
    if (*((void *)this + 66) != 14)
    {
LABEL_65:
      BOOL v41 = 1;
      goto LABEL_66;
    }
    uint64_t v43 = (uint64_t *)*v8;
  }
  else
  {
    uint64_t v43 = (uint64_t *)v8;
    if (v42 != 14) {
      goto LABEL_65;
    }
  }
  uint64_t v44 = *v43;
  uint64_t v45 = *(uint64_t *)((char *)v43 + 6);
  BOOL v41 = v44 != 0x6F733A69746C756DLL || v45 != 0x626F727074666F73;
LABEL_66:
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
LABEL_68:
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v41) {
      goto LABEL_87;
    }
  }
  else if (!v41)
  {
    goto LABEL_87;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p.__begin_, (uint64_t)&std::piecewise_construct, &v135);
  std::string::basic_string[abi:ne180100]<0>(&v135, "num_output_group");
  uint64_t v139 = (uint64_t)&v135;
  uint64_t v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v135.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v139);
  std::string::operator=((std::string *)((char *)v48 + 56), (const std::string *)((char *)v47 + 56));
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p.__begin_, (uint64_t)&std::piecewise_construct, &v135);
  uint64_t v50 = (char *)v49 + 56;
  if (*((char *)v49 + 79) < 0) {
    uint64_t v50 = *(const char **)v50;
  }
  if (atoi(v50) < 2)
  {
    BOOL v51 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v135, "objective");
    BOOL v51 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)this + 168, (const void **)&v135.__r_.__value_.__l.__data_) == 0;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v51) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  if (v51) {
LABEL_86:
  }
    MEMORY[0x230FA7B10](v8, "multi:softmax");
LABEL_87:
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_delta_step");
  if (v124 != (void *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p.__begin_))
  {
    BOOL v52 = 0;
    goto LABEL_104;
  }
  std::string::basic_string[abi:ne180100]<0>(&v135, "objective");
  if (v124 == (void *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&v135.__r_.__value_.__l.__data_))goto LABEL_101; {
  int v53 = *((char *)this + 543);
  }
  if (v53 < 0)
  {
    if (*((void *)this + 66) != 13)
    {
LABEL_101:
      BOOL v52 = 0;
      goto LABEL_102;
    }
    float64x2_t v54 = (uint64_t *)*v8;
  }
  else
  {
    float64x2_t v54 = (uint64_t *)v8;
    if (v53 != 13) {
      goto LABEL_101;
    }
  }
  uint64_t v55 = *v54;
  uint64_t v56 = *(uint64_t *)((char *)v54 + 5);
  BOOL v52 = v55 == 0x6F703A746E756F63 && v56 == 0x6E6F7373696F703ALL;
LABEL_102:
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
LABEL_104:
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v52) {
      goto LABEL_110;
    }
  }
  else if (!v52)
  {
    goto LABEL_110;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_delta_step");
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p.__begin_, (uint64_t)&std::piecewise_construct, &v135);
  MEMORY[0x230FA7B10]((char *)v58 + 56, "0.7");
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
LABEL_110:
  if (*((void *)this + 3))
  {
    uint64_t v59 = *((unsigned __int8 *)this + 543);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = *((unsigned __int8 *)this + 543);
    }
    else {
      uint64_t v60 = *((void *)this + 66);
    }
    std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v134.__r_.__value_.__l.__size_;
    }
    if (v60 == size)
    {
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v62 = &v134;
      }
      else {
        unint64_t v62 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v59 & 0x80) != 0)
      {
        if (!memcmp(*v8, v62, *((void *)this + 66))) {
          goto LABEL_129;
        }
      }
      else
      {
        if (!*((unsigned char *)this + 543)) {
          goto LABEL_129;
        }
        unint64_t v63 = v8;
        while (*(unsigned __int8 *)v63 == v62->__r_.__value_.__s.__data_[0])
        {
          unint64_t v63 = (const void **)((char *)v63 + 1);
          unint64_t v62 = (std::string *)((char *)v62 + 1);
          if (!--v59) {
            goto LABEL_129;
          }
        }
      }
    }
  }
  uint64_t v64 = xgboost::ObjFunction::Create(v8, (uint64_t)v125);
  uint64_t v65 = *((void *)this + 3);
  *((void *)this + 3) = v64;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
LABEL_129:
  std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(&__p, *v9, v124);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate(&v129);
  std::vector<std::pair<std::string, std::string>> v129 = __p;
  memset(&__p, 0, sizeof(__p));
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  (*(void (**)(void, std::vector<std::pair<std::string, std::string>> *))(**((void **)this + 3) + 32))(*((void *)this + 3), &v129);
  if (!*((void *)this + 3))
  {
    long long v114 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v114, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    uint64_t v115 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Check failed: this->obj_", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  char v66 = (int8x8_t *)(*(uint64_t (**)(xgboost::LearnerConfiguration *))(*(void *)this + 248))(this);
  xgboost::PredictionContainer::ClearExpiredEntries(v66);
  int8x8_t v67 = v66[2];
  if (v67)
  {
    uint64_t v68 = 1;
    do
    {
      uint64_t v69 = *((void *)this + 3);
      uint64_t v70 = (***(uint64_t (****)(void))(*(void *)&v67 + 16))(*(void *)(*(void *)&v67 + 16));
      unsigned int v71 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v69 + 88))(v69, v70);
      if (v68 == 1)
      {
        uint64_t v68 = v71;
      }
      else if (v71 != 1 && v68 != v71)
      {
        std::string v73 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v73, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        std::string v74 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        unsigned int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: n_targets == t || 1 == t", 38);
        uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Inconsistent labels.", 20);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      }
      int8x8_t v67 = **(int8x8_t **)&v67;
    }
    while (v67);
  }
  else
  {
    uint64_t v68 = 1;
  }
  uint64_t v77 = *((unsigned int *)this + 89);
  if (v77 == 1)
  {
    *((_DWORD *)this + 89) = v68;
  }
  else if (v68 != 1 && v68 != v77)
  {
    unsigned int v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    uint64_t v118 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: n_targets == 1 || n_targets == mparam_.num_target", 63);
    uint64_t v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"Inconsistent configuration of num_target.  Configuration result from input data:", 80);
    unint64_t v121 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)", configuration from parameter:", 31);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  __int16 v79 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  v80.n128_u32[0] = *((_DWORD *)this + 82);
  if (!*((_DWORD *)this + 117) || v80.n128_f32[0] != v10)
  {
    float v81 = (*(float (**)(void, __n128))(**((void **)this + 3) + 72))(*((void *)this + 3), v80);
    xgboost::LearnerModelParam::LearnerModelParam((uint64_t)&__p, v12, v79, v81);
    *((void *)this + 58) = __p.__begin_;
    *(void *)((char *)this + 470) = *(std::vector<std::pair<std::string, std::string>>::pointer *)((char *)&__p.__begin_ + 6);
  }
  uint64_t v82 = *((void *)this + 4);
  if (v82)
  {
    uint64_t v83 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v84 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v84 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v85 = *((unsigned __int8 *)this + 519);
    int v86 = (char)v85;
    if ((v85 & 0x80u) != 0) {
      uint64_t v85 = *((void *)this + 63);
    }
    if (v84 == v85)
    {
      if (v86 >= 0) {
        int64_t v87 = v7;
      }
      else {
        int64_t v87 = *(unsigned __int8 **)v7;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v87, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_171;
        }
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
          goto LABEL_171;
        }
        while (p_s1->__r_.__value_.__s.__data_[0] == *v87)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v87;
          if (!--v83) {
            goto LABEL_171;
          }
        }
      }
    }
  }
  uint64_t v82 = xgboost::GradientBooster::Create((uint64_t)v7, (uint64_t)v125, (uint64_t)this + 464);
  uint64_t v88 = *((void *)this + 4);
  *((void *)this + 4) = v82;
  if (v88)
  {
    (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
    uint64_t v82 = *((void *)this + 4);
  }
LABEL_171:
  (*(void (**)(uint64_t, std::vector<std::pair<std::string, std::string>> *))(*(void *)v82 + 32))(v82, &v129);
  (*(void (**)(void))(**((void **)this + 4) + 152))(*((void *)this + 4));
  xgboost::GenericParameter::ConfigureGpuId(v125);
  uint64_t v89 = *((void *)this + 68);
  uint64_t v90 = *((void *)this + 69);
  if (v89 == v90) {
    goto LABEL_200;
  }
  do
  {
    uint64_t v91 = *((void *)this + 5);
    uint64_t v92 = *((void *)this + 6);
    while (v91 != v92)
    {
      std::exception_ptr v93 = (const char *)(*(uint64_t (**)(void))(**(void **)v91 + 48))();
      size_t v94 = strlen(v93);
      size_t v95 = v94;
      if (*(char *)(v89 + 23) < 0)
      {
        if (v94 != *(void *)(v89 + 8)) {
          goto LABEL_181;
        }
        if (v94 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v96 = *(const void **)v89;
      }
      else
      {
        unsigned int v96 = (const void *)v89;
        if (v95 != *(unsigned __int8 *)(v89 + 23)) {
          goto LABEL_181;
        }
      }
      if (!memcmp(v96, v93, v95)) {
        goto LABEL_199;
      }
LABEL_181:
      v91 += 8;
    }
    uint64_t v97 = xgboost::Metric::Create(v89, (uint64_t)v125);
    uint64_t v98 = v97;
    unint64_t v100 = (uint64_t *)*((void *)this + 6);
    unint64_t v99 = *((void *)this + 7);
    if ((unint64_t)v100 >= v99)
    {
      unint64_t v102 = (void *)*((void *)this + 5);
      uint64_t v103 = v100 - v102;
      unint64_t v104 = v103 + 1;
      if ((unint64_t)(v103 + 1) >> 61) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v105 = v99 - (void)v102;
      if (v105 >> 2 > v104) {
        unint64_t v104 = v105 >> 2;
      }
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v106 = v104;
      }
      uint64_t v138 = (char *)this + 56;
      if (v106)
      {
        unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v106);
        unint64_t v102 = (void *)*((void *)this + 5);
        unint64_t v100 = (uint64_t *)*((void *)this + 6);
      }
      else
      {
        uint64_t v107 = 0;
      }
      unint64_t v108 = v106 + 8 * v103;
      __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v106;
      __p.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)v108;
      unint64_t v137 = v106 + 8 * v107;
      *(void *)unint64_t v108 = v98;
      __p.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(v108 + 8);
      if (v100 == v102)
      {
        value = (std::pair<std::string, std::string> *)(v108 + 8);
      }
      else
      {
        do
        {
          uint64_t v109 = *--v100;
          *unint64_t v100 = 0;
          *(void *)(v108 - 8) = v109;
          v108 -= 8;
        }
        while (v100 != v102);
        value = __p.__end_cap_.__value_;
      }
      long long v110 = *(_OWORD *)((char *)this + 40);
      *((void *)this + 5) = v108;
      *((void *)this + 6) = value;
      *(_OWORD *)&__p.__end_ = v110;
      unint64_t v111 = *((void *)this + 7);
      *((void *)this + 7) = v137;
      unint64_t v137 = v111;
      __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v110;
      std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer((uint64_t)&__p);
    }
    else
    {
      *unint64_t v100 = v97;
      value = (std::pair<std::string, std::string> *)(v100 + 1);
      *((void *)this + 6) = value;
    }
    *((void *)this + 6) = value;
    *((_DWORD *)this + 86) = 1;
LABEL_199:
    v89 += 24;
  }
  while (v89 != v90);
LABEL_200:
  uint64_t v112 = (void *)*((void *)this + 5);
  uint64_t v113 = (void *)*((void *)this + 6);
  while (v112 != v113)
  {
    (*(void (**)(void, std::vector<std::pair<std::string, std::string>> *))(*(void *)*v112 + 32))(*v112, &v129);
    ++v112;
  }
  atomic_store(0, (unsigned __int8 *)this + 160);
  if (*((unsigned char *)this + 93))
  {
    __p.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)0x300000000;
    uint64_t v138 = 0;
    unint64_t v137 = 0;
    __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&unk_26E24E128;
    __p.__end_cap_.__value_ = (std::pair<std::string, std::string> *)&v137;
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Configure");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&v129;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  unint64_t v4 = v122;
LABEL_212:
  std::mutex::unlock(v4);
}

void sub_22E9C0104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&STACK[0x230]);
  *(void *)(v31 - 232) = &a27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 232));
  xgboost::LearnerTrainParam::~LearnerTrainParam(&a31);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::UpdateOneIter(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateOneIter");
  xgboost::common::Monitor::Start();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    unsigned int v7 = a2 - *(_DWORD *)(a1 + 72) + (*(_DWORD *)(a1 + 72) << 7);
    *(_DWORD *)uint64_t v6 = v7;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
      *(_DWORD *)(v6 + 4 * i) = v7;
    }
    *(void *)(v6 + 2496) = 0;
  }
  xgboost::LearnerImpl::CheckDataSplitMode((xgboost::LearnerImpl *)a1);
  xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)*a3, 1);
  unsigned int v9 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  float v10 = (std::__shared_weak_count *)a3[1];
  v18[0] = *a3;
  v18[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v9, v18, *(_DWORD *)(a1 + 88));
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PredictRaw");
  xgboost::common::Monitor::Start();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)*a3, v11, 1, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(&v16, "Predictions");
  if (v17 < 0) {
    operator delete(v16);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PredictRaw");
  xgboost::common::Monitor::Stop();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GetGradient");
  xgboost::common::Monitor::Start();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = (**(uint64_t (***)(void))*a3)();
  (*(void (**)(uint64_t, xgboost::PredictionCacheEntry *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v11, v13, a2, a1 + 616);
  std::string::basic_string[abi:ne180100]<0>(__p, "GetGradient");
  xgboost::common::Monitor::Stop();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "Gradients");
  if (v15 < 0) {
    operator delete(v14);
  }
  (*(void (**)(void, void, uint64_t, xgboost::PredictionCacheEntry *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), *a3, a1 + 616, v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateOneIter");
  xgboost::common::Monitor::Stop();
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9C091C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerImpl::BoostOneIter(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "BoostOneIter");
  xgboost::common::Monitor::Start();
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v8 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    unsigned int v9 = a2 - *(_DWORD *)(a1 + 72) + (*(_DWORD *)(a1 + 72) << 7);
    *(_DWORD *)uint64_t v8 = v9;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
      *(_DWORD *)(v8 + 4 * i) = v9;
    }
    *(void *)(v8 + 2496) = 0;
  }
  xgboost::LearnerImpl::CheckDataSplitMode((xgboost::LearnerImpl *)a1);
  xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, *(xgboost::DMatrix **)a3, 1);
  uint64_t v11 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  uint64_t v12 = (xgboost::PredictionContainer *)v11;
  uint64_t v13 = *(std::__shared_weak_count **)(a3 + 8);
  v17[0] = *(void *)a3;
  v17[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xgboost::PredictionContainer::Cache(v11, v17, *(_DWORD *)(a1 + 88));
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(xgboost::DMatrix **)a3;
  uint64_t v16 = xgboost::PredictionContainer::Entry(v12, v15);
  (*(void (**)(uint64_t, xgboost::DMatrix *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, a4, v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "BoostOneIter");
  xgboost::common::Monitor::Stop();
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9C0B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::LearnerImpl::EvalOneIter(int8x8_t *a1, uint64_t a2, long long **a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "EvalOneIter");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v74) < 0) {
    operator delete(__p);
  }
  (*(void (**)(int8x8_t *))(*(void *)a1 + 32))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
  *(void *)((char *)&v68[2] + *(void *)(v68[0] - 24)) = 17;
  LOBYTE(__p) = 91;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&__p, 1);
  unsigned __int8 v3 = (void *)std::ostream::operator<<();
  LOBYTE(__p) = 93;
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&__p, 1);
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) |= 4u;
  unsigned __int8 v5 = a1;
  if (*(void *)&a1[6] == *(void *)&a1[5] && !a1[61].i8[0])
  {
    int v6 = a1[67].i8[7];
    if (v6 < 0)
    {
      if (*(void *)&a1[66] != 15)
      {
LABEL_48:
        uint64_t v31 = (char *)(*(uint64_t (**)(void))(**(void **)&a1[3] + 48))(*(void *)&a1[3]);
        std::string::basic_string[abi:ne180100]<0>(v71, v31);
        uint64_t v32 = a1;
        uint64_t v33 = xgboost::Metric::Create((uint64_t)v71, (uint64_t)&a1[8]);
        uint64_t v34 = v33;
        unint64_t v35 = (unint64_t)a1[7];
        uint64_t v36 = (uint64_t *)a1[6];
        if ((unint64_t)v36 >= v35)
        {
          uint64_t v38 = (void *)a1[5];
          uint64_t v39 = v36 - v38;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = v35 - (void)v38;
          if (v41 >> 2 > v40) {
            unint64_t v40 = v41 >> 2;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          uint64_t v76 = a1 + 7;
          if (v42)
          {
            unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v42);
            uint64_t v38 = (void *)a1[5];
            uint64_t v36 = (uint64_t *)a1[6];
          }
          else
          {
            uint64_t v43 = 0;
          }
          uint64_t v44 = (uint64_t *)(v42 + 8 * v39);
          std::vector<std::pair<std::string, std::string>> __p = (void *)v42;
          *(void *)&long long v74 = v44;
          unint64_t v75 = v42 + 8 * v43;
          *uint64_t v44 = v34;
          *((void *)&v74 + 1) = v44 + 1;
          if (v36 == v38)
          {
            uint64_t v37 = v44 + 1;
          }
          else
          {
            do
            {
              uint64_t v45 = *--v36;
              *uint64_t v36 = 0;
              *--uint64_t v44 = v45;
            }
            while (v36 != v38);
            uint64_t v37 = (void *)*((void *)&v74 + 1);
          }
          uint64_t v32 = a1;
          long long v46 = *(_OWORD *)a1[5].i8;
          a1[5] = (int8x8_t)v44;
          a1[6] = (int8x8_t)v37;
          long long v74 = v46;
          int8x8_t v47 = a1[7];
          a1[7] = (int8x8_t)v75;
          unint64_t v75 = (unint64_t)v47;
          std::vector<std::pair<std::string, std::string>> __p = (void *)v46;
          std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *uint64_t v36 = v33;
          uint64_t v37 = v36 + 1;
          a1[6] = (int8x8_t)v37;
        }
        v32[6] = (int8x8_t)v37;
        if (v72 < 0)
        {
          operator delete(v71[0]);
          uint64_t v37 = (void *)v32[6];
        }
        uint64_t v48 = *(v37 - 1);
        std::vector<std::pair<std::string,std::string>>::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(&__p, *(void **)&v32[21], &v32[22]);
        (*(void (**)(uint64_t, void **))(*(void *)v48 + 32))(v48, &__p);
        v71[0] = &__p;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        unsigned __int8 v5 = a1;
        goto LABEL_67;
      }
      unsigned int v7 = (int8x8_t *)a1[65];
    }
    else
    {
      unsigned int v7 = a1 + 65;
      if (v6 != 15) {
        goto LABEL_48;
      }
    }
    int8x8_t v8 = *v7;
    uint64_t v9 = *(uint64_t *)((char *)v7 + 7);
    if (*(void *)&v8 == 0x6C3A7972616E6962 && v9 == 0x7761727469676F6CLL)
    {
      std::string::basic_string[abi:ne180100]<0>(v66, "auc");
      std::string::basic_string[abi:ne180100]<0>(v64, "logloss");
      std::string::basic_string[abi:ne180100]<0>(v62, "1.4.0");
      if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v11) + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v71, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)v71, 1205, 1);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Starting in XGBoost ", 20);
        uint64_t v13 = (v63 & 0x80u) == 0 ? v62 : (void **)v62[0];
        uint64_t v14 = (v63 & 0x80u) == 0 ? (void *)v63 : v62[1];
        char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, (uint64_t)v14);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", the default evaluation metric ", 32);
        char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"used with the objective '", 25);
        int v18 = a1[67].i8[7];
        uint64_t v19 = v18 >= 0 ? (uint64_t)&a1[65] : *(void *)&a1[65];
        uint64_t v20 = v18 >= 0 ? a1[67].u8[7] : *(void *)&a1[66];
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' was changed from '", 20);
        uint64_t v23 = (v67 & 0x80u) == 0 ? v66 : (void **)v66[0];
        int64x2_t v24 = (v67 & 0x80u) == 0 ? (void *)v67 : v66[1];
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, (uint64_t)v24);
        int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' to '", 6);
        uint64_t v27 = (v65 & 0x80u) == 0 ? v64 : (void **)v64[0];
        uint64_t v28 = (v65 & 0x80u) == 0 ? (void *)v65 : v64[1];
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, (uint64_t)v28);
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"'. Explicitly set eval_metric if you'd ", 39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"like to restore the old behavior.", 33);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
    }
    goto LABEL_48;
  }
LABEL_67:
  uint64_t v56 = (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(void *)v5 + 248))(v5);
  uint64_t v49 = *a3;
  if (a3[1] != *a3)
  {
    long long v50 = *v49;
    BOOL v51 = (std::__shared_weak_count *)*((void *)v49 + 1);
    if (v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v58 = v50;
    long long v61 = v50;
    BOOL v52 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v56, (uint64_t *)&v61, a1[11].i32[0]);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)v58, 0);
    xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)v58, v52, 0, 0, 0);
    long long v60 = v58;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v53 = xgboost::PredictionContainer::Cache(a1 + 78, (uint64_t *)&v60, a1[11].i32[0]);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    unint64_t v54 = (uint64_t)(*(void *)(*(void *)v52 + 8) - **(void **)v52) >> 2;
    LODWORD(__p) = 0;
    std::vector<float>::resize(*v53, v54, &__p);
    xgboost::HostDeviceVector<float>::Copy();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "EvalOneIter");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v74) < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v68[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v68 + *(void *)(v68[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v68[1] = MEMORY[0x263F8C318] + 16;
  if (v69 < 0) {
    operator delete((void *)v68[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v70);
}

void sub_22E9C144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LearnerImpl::Predict(void **a1, xgboost::DMatrix **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned int v18 = a9 + a8 + a11;
  ((void (*)(void **))(*a1)[4])(a1);
  int v26 = 1;
  unsigned int v27 = v18;
  if (v18 > 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (a9) {
    return (*(uint64_t (**)(void *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, void, void, void))(*a1[4] + 120))(a1[4], *a2, a4, a5, a6, a10, 0, 0);
  }
  if (a11) {
    return (*(uint64_t (**)(void *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, void))(*a1[4] + 128))(a1[4], *a2, a4, a5, a6, a10);
  }
  if (!a8)
  {
    uint64_t v20 = (int8x8_t *)((uint64_t (*)(void **))(*a1)[31])(a1);
    uint64_t v21 = (std::__shared_weak_count *)a2[1];
    v24[0] = (uint64_t)*a2;
    v24[1] = (uint64_t)v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v20, v24, *((_DWORD *)a1 + 22));
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, *a2, v22, a7, a5, a6);
    unint64_t v23 = (uint64_t)(*(void *)(*(void *)v22 + 8) - **(void **)v22) >> 2;
    LODWORD(v25) = 0;
    std::vector<float>::resize(*a4, v23, &v25);
    xgboost::HostDeviceVector<float>::Copy();
  }
  return (*(uint64_t (**)(void *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, void))(*a1[4] + 112))(a1[4], *a2, a4, a5, a6, a10);
}

void sub_22E9C1898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerImpl::InplacePredict(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, float a8)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1) + 144;
  uint64_t v17 = *(void *)(a1 + 32);
  unsigned int v18 = (std::__shared_weak_count *)a3[1];
  uint64_t v22 = *a3;
  unint64_t v23 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, float))(*(void *)v17 + 96))(v17, a2, &v22, v16, a6, a7, a8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a4 != 1)
  {
    if (a4)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Unsupported prediction type:", 28);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    }
    else
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24), v16);
    }
  }
  *a5 = v16;
}

void sub_22E9C1A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::LearnerImpl::CalcFeatureScore(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void *))(*a1 + 32))(a1);
  uint64_t v10 = a1[4];
  uint64_t v11 = a3[1];
  v13[0] = *a3;
  v13[1] = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 144))(v10, a2, v13, a4, a5);
}

uint64_t xgboost::LearnerImpl::BoostedRounds(xgboost::LearnerImpl *this)
{
  if (!*((void *)this + 4)) {
    return 0;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 160);
  if (v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    unsigned __int8 v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4));
}

void sub_22E9C1C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::LearnerImpl::Groups(xgboost::LearnerImpl *this)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 160);
  if (v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    unsigned __int8 v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
  return *((unsigned int *)this + 118);
}

void sub_22E9C1CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::LearnerIO::LoadModel(xgboost::LearnerIO *this, void **a2)
{
  unsigned __int8 v3 = this;
  unint64_t v4 = (char *)this + 64;
  memset(__n, 0, 24);
  xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v118, (unsigned char *)this + 64, (uint64_t *)__n);
  v115[0] = (void **)v118;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v115);
  v115[0] = (void **)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v115);
  memset(__n, 0, 24);
  xgboost::LearnerTrainParam::__MANAGER__(v5);
  dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71F78, (uint64_t)v3 + 480, (uint64_t)__n[0].__first_, (uint64_t)__n[0].__begin_, 0, 2);
  v115[0] = (void **)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v115);
  v115[0] = (void **)&unk_26E248A20;
  v115[1] = a2;
  long long v116 = 0u;
  long long v117 = 0u;
  memset(&v114, 0, sizeof(v114));
  std::string::resize(&v114, 4uLL, 0);
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = &v114;
  }
  else {
    int v6 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  size_t v7 = xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v115, v6, 4uLL);
  char v8 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  if (v7 != 4)
  {
LABEL_20:
    if (v8 >= 0) {
      uint64_t v10 = &v114;
    }
    else {
      uint64_t v10 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    goto LABEL_23;
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v114.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_11;
    }
    uint64_t v9 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_11;
    }
    uint64_t v9 = &v114;
  }
  if (LODWORD(v9->__r_.__value_.__l.__data_) == 875983714) {
    dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)&v114, "bs64");
  }
LABEL_11:
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (std::string *)v114.__r_.__value_.__r.__words[0];
    if (v114.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_23;
    }
    int data = *(_DWORD *)v114.__r_.__value_.__l.__data_;
  }
  else
  {
    uint64_t v10 = &v114;
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_23;
    }
    int data = (int)v114.__r_.__value_.__l.__data_;
  }
  if (data == 1718511970)
  {
    v113.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v115, v10, 4uLL);
    LODWORD(v112.__r_.__value_.__l.__data_) = 4;
    if (v113.__begin_ != (std::vector<std::pair<std::string, std::string>>::pointer)4) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    char v8 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    goto LABEL_20;
  }
LABEL_23:
  if (v10->__r_.__value_.__s.__data_[0] == 123)
  {
    xgboost::common::ReadAll((std::string *)__n, a2, (xgboost::common::PeekableInStream *)v115);
    operator new();
  }
  uint64_t v107 = (_DWORD *)((char *)v3 + 328);
  v113.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***))v115[0])(v115);
  v112.__r_.__value_.__r.__words[0] = 136;
  if (v113.__begin_ != (std::vector<std::pair<std::string, std::string>>::pointer)136) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (!*((_DWORD *)v3 + 89)) {
    *((_DWORD *)v3 + 89) = 1;
  }
  __n[0].__first_ = 0;
  unint64_t v108 = (const void **)((char *)v3 + 520);
  if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v115[0])(v115, __n, 8) != 8)goto LABEL_200; {
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first = __n[0].__first_;
  }
  std::string::resize((std::string *)((char *)v3 + 520), (std::string::size_type)__n[0].__first_, 0);
  if (__n[0].__first_)
  {
    uint64_t v13 = (char *)v3 + 520;
    if (*((char *)v3 + 543) < 0) {
      uint64_t v13 = (char *)*v108;
    }
    if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, char *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v115[0])(v115, v13, first) != first)
    {
LABEL_200:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      uint64_t v97 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      uint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: fi->Read(&tparam_.objective)", 42);
      unint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"BoostLearner: wrong model format", 32);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
    }
  }
  __n[0].__first_ = 0;
  if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v115[0])(v115, __n, 8) != 8)
  {
    uint64_t v16 = (const void **)((char *)v3 + 520);
LABEL_202:
    unint64_t v100 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v100, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    int v101 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    unint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: fi->Read(&tparam_.booster)", 40);
    uint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"BoostLearner: wrong model format", 32);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
    goto LABEL_41;
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v14 = __n[0].__first_;
  std::string::resize((std::string *)((char *)v3 + 496), (std::string::size_type)__n[0].__first_, 0);
  if (!__n[0].__first_)
  {
    uint64_t v16 = (const void **)((char *)v3 + 520);
    goto LABEL_41;
  }
  char v15 = (char *)v3 + 496;
  if (*((char *)v3 + 519) < 0) {
    char v15 = (char *)*((void *)v3 + 62);
  }
  uint64_t v16 = (const void **)((char *)v3 + 520);
  if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, char *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v115[0])(v115, v15, v14) != v14)goto LABEL_202; {
LABEL_41:
  }
  uint64_t v17 = xgboost::ObjFunction::Create(v16, (uint64_t)v4);
  uint64_t v18 = *((void *)v3 + 3);
  *((void *)v3 + 3) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  unint64_t v106 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)v3 + 464);
  uint64_t v19 = xgboost::GradientBooster::Create((uint64_t)v3 + 496, (uint64_t)v4, (uint64_t)v3 + 464);
  uint64_t v20 = *((void *)v3 + 4);
  *((void *)v3 + 4) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    uint64_t v19 = *((void *)v3 + 4);
  }
  (*(void (**)(uint64_t, void ***))(*(void *)v19 + 40))(v19, v115);
  if (!*((_DWORD *)v3 + 85)) {
    goto LABEL_132;
  }
  memset(&v113, 0, sizeof(v113));
  v119[0] = 0;
  if ((*(uint64_t (**)(void ***, long long **, uint64_t))v115[0])(v115, v119, 8) == 8)
  {
    char v21 = v119[0];
    std::vector<std::pair<std::string, std::string>>::pointer end = v113.__end_;
    unint64_t v23 = (char *)(0xAAAAAAAAAAAAAAABLL * (((char *)v113.__end_ - (char *)v113.__begin_) >> 4));
    unint64_t v24 = (char *)v119[0] - v23;
    if (v119[0] <= (long long *)v23)
    {
      if (v119[0] >= (long long *)v23)
      {
        uint64_t v32 = v113.__end_;
      }
      else
      {
        uint64_t v32 = &v113.__begin_[(uint64_t)v119[0]];
        if (v113.__end_ != v32)
        {
          do
            std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v113.__end_cap_, (uint64_t)--end);
          while (end != v32);
        }
        v113.__end_ = v32;
      }
      if (v32 == v113.__begin_) {
        std::vector<std::pair<std::string, std::string>>::pointer begin = 0;
      }
      else {
        std::vector<std::pair<std::string, std::string>>::pointer begin = v113.__begin_;
      }
      if (!v21) {
        goto LABEL_87;
      }
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v113.__end_cap_.__value_ - (char *)v113.__end_) >> 4) >= v24)
      {
        size_t v33 = 48 * ((48 * v24 - 48) / 0x30) + 48;
        bzero(v113.__end_, v33);
        uint64_t v31 = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)end + v33);
        v113.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)end + v33);
      }
      else
      {
        if (v119[0] > (long long *)0x555555555555555) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = 0x5555555555555556 * (((char *)v113.__end_cap_.__value_ - (char *)v113.__begin_) >> 4);
        if ((long long *)v25 <= v119[0]) {
          unint64_t v25 = (unint64_t)v119[0];
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v113.__end_cap_.__value_ - (char *)v113.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v26 = 0x555555555555555;
        }
        else {
          unint64_t v26 = v25;
        }
        __n[0].__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v113.__end_cap_;
        unsigned int v27 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)&v113.__end_cap_, v26);
        uint64_t v28 = &v27[(void)v23];
        __n[0].__first_ = v27;
        __n[0].__begin_ = v28;
        __n[0].__end_cap_.__value_ = &v27[v29];
        size_t v30 = 48 * ((48 * v24 - 48) / 0x30) + 48;
        bzero(v28, v30);
        __n[0].__end_ = (std::pair<std::string, std::string> *)((char *)v28 + v30);
        std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v113, __n);
        std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(__n);
        uint64_t v31 = v113.__end_;
      }
      if (v31 == v113.__begin_) {
        std::vector<std::pair<std::string, std::string>>::pointer begin = 0;
      }
      else {
        std::vector<std::pair<std::string, std::string>>::pointer begin = v113.__begin_;
      }
    }
    unint64_t v35 = (char *)v21 - 1;
    do
    {
      __n[0].__first_ = 0;
      if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v115[0])(v115, __n, 8) != 8)break; {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v36 = __n[0].__first_;
      }
      std::string::resize(&begin->first, (std::string::size_type)__n[0].__first_, 0);
      if (__n[0].__first_)
      {
        std::vector<std::pair<std::string, std::string>>::pointer v37 = begin;
        if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v37 = (std::vector<std::pair<std::string, std::string>>::pointer)begin->first.__r_.__value_.__r.__words[0];
        }
        if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, std::vector<std::pair<std::string, std::string>>::pointer, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v115[0])(v115, v37, v36) != v36)break; {
      }
        }
      __n[0].__first_ = 0;
      if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v115[0])(v115, __n, 8) != 8)break; {
      p_second = (std::string::__raw *)&begin->second;
      }
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v39 = __n[0].__first_;
      std::string::resize(&begin->second, (std::string::size_type)__n[0].__first_, 0);
      if (__n[0].__first_)
      {
        if (SHIBYTE(begin->second.__r_.__value_.__r.__words[2]) < 0) {
          p_second = (std::string::__raw *)p_second->__words[0];
        }
        BOOL v40 = (*(uint64_t (**)(void ***, std::string::__raw *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v115[0])(v115, p_second, v39) == (void)v39;
      }
      else
      {
        BOOL v40 = 1;
      }
      BOOL v41 = v35-- != 0;
      BOOL v42 = v41;
      if (!v40) {
        break;
      }
      ++begin;
    }
    while (v42);
  }
LABEL_87:
  std::vector<std::pair<std::string, std::string>>::pointer v43 = v113.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v44 = v113.__end_;
  if (v113.__begin_ != v113.__end_)
  {
    uint64_t v45 = (const void **)((char *)v3 + 576);
    uint64_t v105 = (uint64_t **)((char *)v3 + 168);
    unint64_t v104 = v3;
    uint64_t v46 = (uint64_t)v3 + 584;
    int8x8_t v47 = "SAVED_PARAM_";
    uint64_t v109 = v45;
    std::vector<std::pair<std::string, std::string>>::pointer v110 = v113.__end_;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__n, v47);
      if (SHIBYTE(v43->first.__r_.__value_.__r.__words[2]) < 0)
      {
        std::vector<std::pair<std::string, std::string>>::pointer v49 = (std::vector<std::pair<std::string, std::string>>::pointer)v43->first.__r_.__value_.__r.__words[0];
        int64_t size = v43->first.__r_.__value_.__l.__size_;
      }
      else
      {
        int64_t size = HIBYTE(v43->first.__r_.__value_.__r.__words[2]);
        std::vector<std::pair<std::string, std::string>>::pointer v49 = v43;
      }
      char end_high = HIBYTE(__n[0].__end_);
      if (SHIBYTE(__n[0].__end_) >= 0) {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v51 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
      }
      else {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v51 = __n[0].__first_;
      }
      if (SHIBYTE(__n[0].__end_) >= 0) {
        int64_t v52 = HIBYTE(__n[0].__end_);
      }
      else {
        int64_t v52 = (int64_t)__n[0].__begin_;
      }
      if (!v52)
      {
LABEL_111:
        std::string::basic_string(&v112, &v43->first, v52, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v119);
        long long v61 = (char *)*v45;
        if (*v45)
        {
          unint64_t v62 = v45;
          do
          {
            BOOL v63 = std::less<std::string>::operator()[abi:ne180100](v46, (const void **)v61 + 4, (const void **)&v112.__r_.__value_.__l.__data_);
            uint64_t v64 = (void **)(v61 + 8);
            if (!v63)
            {
              uint64_t v64 = (void **)v61;
              unint64_t v62 = (const void **)v61;
            }
            long long v61 = (char *)*v64;
          }
          while (*v64);
          if (v62 != v45
            && !std::less<std::string>::operator()[abi:ne180100](v46, (const void **)&v112.__r_.__value_.__l.__data_, v62 + 4))
          {
            v119[0] = (long long *)&v112;
            unsigned __int8 v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v119);
            std::string::operator=((std::string *)(v65 + 7), &v43->second);
          }
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        char end_high = HIBYTE(__n[0].__end_);
        goto LABEL_122;
      }
      if (size < v52) {
        goto LABEL_122;
      }
      int v53 = v47;
      unint64_t v54 = (char *)v49 + size;
      int v55 = v51->first.__r_.__value_.__s.__data_[0];
      std::vector<std::pair<std::string, std::string>>::pointer v56 = v49;
      while (1)
      {
        int64_t v57 = size - v52;
        if (v57 == -1 || (long long v58 = (std::pair<std::string, std::string> *)memchr(v56, v55, v57 + 1)) == 0)
        {
LABEL_105:
          uint64_t v45 = v109;
          std::vector<std::pair<std::string, std::string>>::pointer v44 = v110;
          int8x8_t v47 = v53;
          goto LABEL_106;
        }
        std::vector<std::pair<std::string, std::string>>::pointer v59 = v58;
        if (!memcmp(v58, v51, v52)) {
          break;
        }
        std::vector<std::pair<std::string, std::string>>::pointer v56 = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)&v59->first.__r_.__value_.__l.__data_
                                                                        + 1);
        int64_t size = v54 - ((char *)&v59->first.__r_.__value_.__l.__data_ + 1);
        if (size < v52) {
          goto LABEL_105;
        }
      }
      int8x8_t v47 = v53;
      if (v59 == (std::vector<std::pair<std::string, std::string>>::pointer)v54)
      {
        uint64_t v45 = v109;
        std::vector<std::pair<std::string, std::string>>::pointer v44 = v110;
LABEL_106:
        if ((end_high & 0x80) == 0) {
          goto LABEL_124;
        }
        goto LABEL_123;
      }
      BOOL v60 = v59 == v49;
      uint64_t v45 = v109;
      std::vector<std::pair<std::string, std::string>>::pointer v44 = v110;
      if (v60) {
        goto LABEL_111;
      }
LABEL_122:
      if (end_high < 0) {
LABEL_123:
      }
        operator delete(__n[0].__first_);
LABEL_124:
      if (++v43 == v44)
      {
        std::vector<std::pair<std::string, std::string>>::pointer v66 = v113.__begin_;
        std::vector<std::pair<std::string, std::string>>::pointer v43 = v113.__end_;
        unsigned __int8 v3 = v104;
        goto LABEL_128;
      }
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v66 = v113.__begin_;
LABEL_128:
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)__n, (const void **)&v66->first.__r_.__value_.__l.__data_, (const void **)&v43->first.__r_.__value_.__l.__data_);
  unsigned __int8 v67 = (char *)v3 + 200;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v3 + 192, *((void **)v3 + 25));
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v68 = __n[0].__begin_;
  *((void *)v3 + 24) = __n[0].__first_;
  *((void *)v3 + 25) = v68;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v69 = __n[0].__end_;
  *((void *)v3 + 26) = __n[0].__end_;
  if (v69)
  {
    v68->first.__r_.__value_.__r.__words[2] = (std::string::size_type)v67;
    __n[0].__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__n[0].__begin_;
    __n[0].__begin_ = 0;
    __n[0].__end_ = 0;
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v68 = 0;
  }
  else
  {
    *((void *)v3 + 24) = v67;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__n, v68);
  __n[0].__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v113;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
LABEL_132:
  std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
  uint64_t v70 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  unsigned int v71 = (char *)v3 + 200;
  if (SHIBYTE(__n[0].__end_) < 0) {
    operator delete(__n[0].__first_);
  }
  if (v71 != (char *)v70)
  {
    std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
    char v72 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
    std::string::basic_string[abi:ne180100]<0>(&v113, "max_delta_step");
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    std::string v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v113.__begin_, (uint64_t)&std::piecewise_construct, &v112);
    std::string::operator=((std::string *)((char *)v73 + 56), v72);
    if (SHIBYTE(v113.__end_cap_.__value_) < 0) {
      operator delete(v113.__begin_);
    }
    if (SHIBYTE(__n[0].__end_) < 0) {
      operator delete(__n[0].__first_);
    }
    std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>((uint64_t **)v3 + 24, (const void **)&__n[0].__first_);
    if (SHIBYTE(__n[0].__end_) < 0) {
      operator delete(__n[0].__first_);
    }
  }
  if (!*((_DWORD *)v3 + 87))
  {
    std::string::basic_string[abi:ne180100]<0>(__n, "multi:");
    char v74 = HIBYTE(__n[0].__end_);
    if (SHIBYTE(__n[0].__end_) >= 0) {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v75 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
    }
    else {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v75 = __n[0].__first_;
    }
    if (SHIBYTE(__n[0].__end_) >= 0) {
      size_t v76 = HIBYTE(__n[0].__end_);
    }
    else {
      size_t v76 = (size_t)__n[0].__begin_;
    }
    if (*((char *)v3 + 543) < 0) {
      uint64_t v77 = *v108;
    }
    else {
      uint64_t v77 = v108;
    }
    if (memcmp(v75, v77, v76)) {
      xgboost::HostDeviceVector<float>::HostDeviceVector();
    }
    if (v74 < 0) {
      operator delete(__n[0].__first_);
    }
  }
  float v78 = (*(float (**)(void, float))(**((void **)v3 + 3) + 72))(*((void *)v3 + 3), *((float *)v3 + 82));
  __int16 v79 = (*(uint64_t (**)(void))(**((void **)v3 + 3) + 80))(*((void *)v3 + 3));
  xgboost::LearnerModelParam::LearnerModelParam((uint64_t)__n, v107, v79, v78);
  *unint64_t v106 = __n[0].__first_;
  *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)v106 + 6) = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)&__n[0].__first_ + 6);
  std::string::basic_string[abi:ne180100]<0>(__n, "objective");
  uint64_t v80 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  if (SHIBYTE(__n[0].__end_) < 0) {
    operator delete(__n[0].__first_);
  }
  if (v71 != (char *)v80)
  {
    std::string::basic_string[abi:ne180100]<0>(&v113, "objective");
    uint64_t v81 = std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&v113.__begin_);
    if (*(char *)(v81 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v81, *(void *)(v81 + 8));
    }
    else
    {
      long long v82 = *(_OWORD *)v81;
      __n[0].__end_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(v81 + 16);
      *(_OWORD *)&__n[0].__first_ = v82;
    }
    if (SHIBYTE(v113.__end_cap_.__value_) < 0) {
      operator delete(v113.__begin_);
    }
    xgboost::Json::Load();
  }
  std::string::basic_string[abi:ne180100]<0>(__n, "metrics");
  uint64_t v83 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  uint64_t v85 = v83;
  if (SHIBYTE(__n[0].__end_) < 0) {
    operator delete(__n[0].__first_);
  }
  if (v71 != (char *)v85)
  {
    std::string::basic_string[abi:ne180100]<0>(&v113, "metrics");
    uint64_t v86 = std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&v113.__begin_);
    if (*(char *)(v86 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v86, *(void *)(v86 + 8));
    }
    else
    {
      long long v87 = *(_OWORD *)v86;
      __n[0].__end_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(v86 + 16);
      *(_OWORD *)&__n[0].__first_ = v87;
    }
    if (SHIBYTE(v113.__end_cap_.__value_) < 0) {
      operator delete(v113.__begin_);
    }
    xgboost::common::Split((const std::string *)__n, 0x3Bu, (uint64_t *)&v113);
    std::string::basic_string[abi:ne180100]<0>(&v112, "metrics");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>((uint64_t **)v3 + 24, (const void **)&v112.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    std::vector<std::pair<std::string, std::string>>::pointer v88 = v113.__begin_;
    for (std::vector<std::pair<std::string, std::string>>::pointer i = v113.__end_; v88 != i; v88 = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)v88 + 24))
      (*(void (**)(xgboost::LearnerIO *, long long *, std::vector<std::pair<std::string, std::string>>::pointer))(*(void *)v3 + 128))(v3, &xgboost::LearnerConfiguration::kEvalMetric, v88);
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    if (SHIBYTE(__n[0].__end_) < 0) {
      operator delete(__n[0].__first_);
    }
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v84) + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v113, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__n, (uint64_t)&v113, 940, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__n, (uint64_t)"Loading model from XGBoost < 1.0.0, consider saving it again for improved compatibility", 87);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__n);
    if (SHIBYTE(v113.__end_cap_.__value_) < 0) {
      operator delete(v113.__begin_);
    }
  }
  *(void *)((char *)v3 + 348) = 0x600000001;
  xgboost::common::ToString<int>();
  std::string::basic_string[abi:ne180100]<0>(&v113, "num_class");
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  uint64_t v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v113.__begin_, (uint64_t)&std::piecewise_construct, &v112);
  uint64_t v91 = (char *)v90 + 56;
  if (*((char *)v90 + 79) < 0) {
    operator delete(*(void **)v91);
  }
  *(_OWORD *)uint64_t v91 = *(_OWORD *)&__n[0].__first_;
  *((void *)v91 + 2) = __n[0].__end_;
  HIBYTE(__n[0].__end_) = 0;
  LOBYTE(__n[0].__first_) = 0;
  if (SHIBYTE(v113.__end_cap_.__value_) < 0)
  {
    operator delete(v113.__begin_);
    if (SHIBYTE(__n[0].__end_) < 0) {
      operator delete(__n[0].__first_);
    }
  }
  xgboost::common::ToString<unsigned int>();
  std::string::basic_string[abi:ne180100]<0>(&v113, "num_feature");
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  uint64_t v92 = (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v113.__begin_, (uint64_t)&std::piecewise_construct, &v112);
  std::exception_ptr v93 = v92 + 56;
  if (v92[79] < 0) {
    operator delete(*(void **)v93);
  }
  *(_OWORD *)std::exception_ptr v93 = *(_OWORD *)&__n[0].__first_;
  *((void *)v93 + 2) = __n[0].__end_;
  HIBYTE(__n[0].__end_) = 0;
  LOBYTE(__n[0].__first_) = 0;
  if (SHIBYTE(v113.__end_cap_.__value_) < 0)
  {
    operator delete(v113.__begin_);
    if (SHIBYTE(__n[0].__end_) < 0) {
      operator delete(__n[0].__first_);
    }
  }
  xgboost::LearnerTrainParam::__MANAGER__((xgboost::LearnerTrainParam *)v92);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_26AD71F78, (std::vector<std::pair<std::string, std::string>> *)__n);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v113, (const void **)&__n[0].__first_->first.__r_.__value_.__l.__data_, (const void **)&__n[0].__begin_->first.__r_.__value_.__l.__data_);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  size_t v94 = std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)v3 + 21, (const void **)&v113.__begin_->first.__r_.__value_.__l.__data_, (const void ***)&v113.__end_);
  if (!*((_DWORD *)v3 + 121))
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v94);
    if ((*(unsigned int (**)(void *))(*(void *)Engine + 80))(Engine)) {
      *((_DWORD *)v3 + 121) = 2;
    }
  }
  atomic_store(1u, (unsigned __int8 *)v3 + 160);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v113, v113.__end_->first.__r_.__value_.__r.__words);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  v115[0] = (void **)&unk_26E248A20;
  if (SHIBYTE(v117) < 0) {
    operator delete(*((void **)&v116 + 1));
  }
}

void sub_22E9C3308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::pair<std::string, std::string>> *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v55 - 201) < 0) {
    operator delete(*(void **)(v55 - 224));
  }
  *(void *)(v55 - 200) = v54;
  if (*(char *)(v55 - 153) < 0) {
    operator delete(*(void **)(v55 - 176));
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerIO::SaveModel(uint64_t a1)
{
  uint64_t v15 = *(void *)(a1 + 456);
  long long v1 = *(_OWORD *)(a1 + 440);
  long long v13 = *(_OWORD *)(a1 + 424);
  long long v14 = v1;
  long long v2 = *(_OWORD *)(a1 + 376);
  long long v9 = *(_OWORD *)(a1 + 360);
  long long v10 = v2;
  long long v3 = *(_OWORD *)(a1 + 408);
  long long v11 = *(_OWORD *)(a1 + 392);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(a1 + 344);
  long long v7 = *(_OWORD *)(a1 + 328);
  long long v8 = v4;
  memset(&v6, 0, sizeof(v6));
  HIDWORD(v7) = 1;
  memset(&__v, 0, 24);
  v16.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  __v.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)0x300000000;
  __v.__end_cap_.__value_ = 0;
  __v.__end_cap_.__value_ = 0;
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&unk_26E24E128;
  __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v.__end_cap_;
  operator new();
}

void sub_22E9C40F0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::pair<std::string, std::string>> *a7, uint64_t a8, char *__pa, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (SHIBYTE(a11) < 0) {
    operator delete(__pa);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a12);
  __pa = &a48;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t xgboost::LearnerConfiguration::SetParams(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 128))(v4, v2, v2 + 24);
      v2 += 48;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t xgboost::LearnerConfiguration::SetParam(uint64_t result, unsigned __int8 *a2, std::string *a3)
{
  uint64_t v5 = result;
  atomic_store(1u, (unsigned __int8 *)(result + 160));
  uint64_t v6 = a2[23];
  size_t v7 = *((void *)a2 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  uint64_t v9 = *((void *)&xgboost::LearnerConfiguration::kEvalMetric + 1);
  if (byte_26AD72697 >= 0) {
    uint64_t v9 = byte_26AD72697;
  }
  if (v8 != v9) {
    goto LABEL_17;
  }
  if (byte_26AD72697 >= 0) {
    long long v10 = &xgboost::LearnerConfiguration::kEvalMetric;
  }
  else {
    long long v10 = (long long *)xgboost::LearnerConfiguration::kEvalMetric;
  }
  if ((v6 & 0x80) != 0)
  {
    double result = memcmp(*(const void **)a2, v10, v7);
    if (!result) {
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v22 = (long long *)a2;
    long long v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 168), (const void **)a2, (uint64_t)&std::piecewise_construct, &v22);
    return (uint64_t)std::string::operator=((std::string *)(v12 + 7), a3);
  }
  if (v6)
  {
    long long v11 = a2;
    while (*v11 == *(unsigned __int8 *)v10)
    {
      ++v11;
      long long v10 = (long long *)((char *)v10 + 1);
      if (!--v6) {
        goto LABEL_19;
      }
    }
    goto LABEL_17;
  }
LABEL_19:
  unint64_t v13 = *(void *)(v5 + 544);
  unint64_t v14 = *(void *)(v5 + 552);
  if (v13 != v14)
  {
    unsigned __int8 v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v15 & 0x80u) == 0) {
      std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v13 + 8);
      }
      if (v19 == size)
      {
        if ((v18 & 0x80) != 0)
        {
          double result = memcmp(*(const void **)v13, v17, *(void *)(v13 + 8));
          if (!result) {
            goto LABEL_39;
          }
        }
        else
        {
          if (!*(unsigned char *)(v13 + 23)) {
            goto LABEL_39;
          }
          uint64_t v20 = 0;
          while (*(unsigned __int8 *)(v13 + v20) == v17->__r_.__value_.__s.__data_[v20])
          {
            if (v18 == ++v20) {
              goto LABEL_39;
            }
          }
        }
      }
      v13 += 24;
    }
    while (v13 != v14);
    unint64_t v13 = v14;
  }
LABEL_39:
  if (v13 == v14)
  {
    char v21 = (uint64_t *)(v5 + 544);
    if (v14 >= *(void *)(v5 + 560))
    {
      double result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v21, (long long *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v21, (long long *)a3);
      double result = v14 + 24;
    }
    *(void *)(v5 + 552) = result;
  }
  return result;
}

uint64_t xgboost::LearnerConfiguration::GetNumFeature(xgboost::LearnerConfiguration *this)
{
  return *((unsigned int *)this + 117);
}

std::string *xgboost::LearnerConfiguration::SetAttr(uint64_t a1, long long *a2, const std::string *a3)
{
  size_t v7 = a2;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 192), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
  double result = std::string::operator=((std::string *)(v5 + 7), a3);
  *(_DWORD *)(a1 + 340) = 1;
  return result;
}

uint64_t xgboost::LearnerConfiguration::GetAttr(uint64_t a1, const void **a2, std::string *a3)
{
  uint64_t v3 = a1 + 200;
  uint64_t v4 = *(void *)(a1 + 200);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = a1 + 208;
  uint64_t v8 = a1 + 200;
  do
  {
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
    long long v10 = (uint64_t *)(v4 + 8);
    if (!v9)
    {
      long long v10 = (uint64_t *)v4;
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v8 == v3 || std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32))) {
    return 0;
  }
  std::string::operator=(a3, (const std::string *)(v8 + 56));
  return 1;
}

BOOL xgboost::LearnerConfiguration::DelAttr(uint64_t a1, const void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 192);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 192, a2);
  uint64_t v5 = (uint64_t *)(a1 + 200);
  if (v5 != v4)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
  return v5 != v4;
}

void xgboost::LearnerConfiguration::GetAttrNames(xgboost::LearnerConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (char *)*((void *)this + 24);
  uint64_t v3 = (char *)this + 200;
  if (v2 != (char *)this + 200)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (long long *)(v2 + 32);
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      uint64_t v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_22E9C46E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::LearnerConfiguration::SetFeatureNames(std::vector<std::string> *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 9;
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void xgboost::LearnerConfiguration::GetFeatureNames(uint64_t a1, std::vector<std::string> *this)
{
  if ((std::vector<std::string> *)(a1 + 216) != this) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)(a1 + 216), *(long long **)(a1 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3));
  }
}

void xgboost::LearnerConfiguration::SetFeatureTypes(std::vector<std::string> *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 10;
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void xgboost::LearnerConfiguration::GetFeatureTypes(uint64_t a1, std::vector<std::string> *this)
{
  if ((std::vector<std::string> *)(a1 + 240) != this) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)(a1 + 240), *(long long **)(a1 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 3));
  }
}

void xgboost::LearnerImpl::Slice(xgboost::LearnerImpl *this, int a2, int a3, int a4, BOOL *a5)
{
  if (*((_DWORD *)this + 117))
  {
    if ((a2 & 0x80000000) == 0) {
      operator new();
    }
    dmlc::LogCheckFormat<int,int>();
  }
  dmlc::LogCheckFormat<unsigned int,int>();
}

void sub_22E9C4EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,atomic_uint *a26)
{
  if (a26)
  {
    if (atomic_fetch_add_explicit(a26 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a26 + 8))(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerImpl::DumpModel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 32))(a1);
  uint64_t v8 = a1[4];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v8 + 136))(v8, a2, a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22E9C515C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::LearnerImpl::GetThreadLocal(xgboost::LearnerImpl *this)
{
  uint64_t v3 = (void *)(dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get() + 8);
  uint64_t v2 = (void *)*v3;
  if (!*v3)
  {
LABEL_7:
    uint64_t v6 = (char *)operator new(0xF0uLL);
    uint64_t v8 = v6;
    BOOL v9 = v3;
    char v10 = 0;
    *((void *)v6 + 4) = this;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *((void *)v6 + 29) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v6 + 40));
  }
  while (1)
  {
    while (1)
    {
      uint64_t v4 = v2;
      unint64_t v5 = v2[4];
      if (v5 <= (unint64_t)this) {
        break;
      }
      uint64_t v2 = (void *)*v4;
      if (!*v4) {
        goto LABEL_7;
      }
    }
    if (v5 >= (unint64_t)this) {
      return v4 + 5;
    }
    uint64_t v2 = (void *)v4[1];
    if (!v2) {
      goto LABEL_7;
    }
  }
}

void sub_22E9C52A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LearnerConfiguration::Ctx(xgboost::LearnerConfiguration *this)
{
  return (uint64_t)this + 64;
}

uint64_t xgboost::LearnerImpl::GetConfigurationArguments(xgboost::LearnerImpl *this)
{
  return (uint64_t)this + 168;
}

char *xgboost::LearnerConfiguration::GetPredictionCache(xgboost::LearnerConfiguration *this)
{
  uint64_t v2 = (uint64_t **)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  uint64_t v4 = this;
  return std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(v2, (unint64_t)this, &v4)+ 40;
}

void xgboost::LearnerConfiguration::LoadConfig(xgboost::LearnerConfiguration *this, const xgboost::Json *a2)
{
  if (*(_DWORD *)(*(void *)a2 + 12) != 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    char v74 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: IsA<Object>(in)", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  xgboost::Version::Load(a2, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "learner");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  unint64_t v5 = (char *)xgboost::Cast<xgboost::JsonObject,xgboost::Value>(*v4) + 16;
  if (SHIBYTE(v81) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v84, "learner_train_param");
  uint64_t v6 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v5, v84);
  uint64_t v7 = (xgboost::LearnerTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v6);
  long long v81 = 0uLL;
  std::string __p = &v81;
  uint64_t v8 = (void *)*((void *)v7 + 2);
  BOOL v9 = (void *)((char *)v7 + 24);
  if (v8 != (void *)((char *)v7 + 24))
  {
    do
    {
      char v10 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v8[7]);
      v87[0] = (long long *)(v8 + 4);
      long long v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v8 + 4, (uint64_t)&std::piecewise_construct, v87);
      uint64_t v7 = (xgboost::LearnerTrainParam *)std::string::operator=((std::string *)(v11 + 7), (const std::string *)(v10 + 16));
      long long v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
      }
      uint64_t v8 = v13;
    }
    while (v13 != v9);
  }
  if (*((unsigned char *)this + 480))
  {
    memset(&v86, 0, sizeof(v86));
    xgboost::LearnerTrainParam::__MANAGER__(v7);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71F78, (uint64_t)this + 480, __p, &v81, 0, &v86, 0);
  }
  else
  {
    memset(&v86, 0, sizeof(v86));
    xgboost::LearnerTrainParam::__MANAGER__(v7);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71F78, (uint64_t)this + 480, __p, &v81, &v86, 0);
    *((unsigned char *)this + 480) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (void *)v81);
  std::string __p = &v86;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v85 < 0) {
    operator delete((void *)v84[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "gradient_booster");
  unsigned __int8 v15 = (void *)std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "objective");
  uint64_t v16 = std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *((void *)this + 3);
  if (!v17)
  {
    uint64_t v17 = xgboost::ObjFunction::Create((const void **)this + 65, (uint64_t)this + 64);
    uint64_t v18 = *((void *)this + 3);
    *((void *)this + 3) = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      uint64_t v17 = *((void *)this + 3);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v16);
  *((_WORD *)this + 238) = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v19 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(*(void *)*v15 + 24))(*v15, &__p);
  uint64_t v20 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v19);
  std::string::operator=((std::string *)((char *)this + 496), (const std::string *)(v20 + 16));
  if (SHIBYTE(v81) < 0) {
    operator delete(__p);
  }
  uint64_t v21 = *((void *)this + 4);
  if (!v21)
  {
    uint64_t v21 = xgboost::GradientBooster::Create((uint64_t)this + 496, (uint64_t)this + 64, (uint64_t)this + 464);
    uint64_t v22 = *((void *)this + 4);
    *((void *)this + 4) = v21;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      uint64_t v21 = *((void *)this + 4);
    }
  }
  (*(void (**)(void))(*(void *)(v21 + 8) + 16))();
  std::string::basic_string[abi:ne180100]<0>(&__p, "metrics");
  unint64_t v23 = (void *)std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  uint64_t v76 = (uint64_t)v5;
  if (SHIBYTE(v81) < 0) {
    operator delete(__p);
  }
  unint64_t v24 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>((_DWORD *)*v23);
  uint64_t v25 = v24[2];
  uint64_t v26 = v24[3];
  std::vector<std::string>::size_type v27 = (v26 - v25) >> 3;
  uint64_t v28 = (void *)((char *)this + 544);
  std::vector<std::string>::resize((std::vector<std::string> *)((char *)this + 544), v27);
  uint64_t v30 = *((void *)this + 5);
  uint64_t v31 = (void *)*((void *)this + 6);
  unint64_t v32 = ((uint64_t)v31 - v30) >> 3;
  if (v27 <= v32)
  {
    if (v27 < v32)
    {
      uint64_t v46 = (void *)(v30 + 8 * v27);
      while (v31 != v46)
      {
        uint64_t v48 = *--v31;
        uint64_t v47 = v48;
        *uint64_t v31 = 0;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
        }
      }
      *((void *)this + 6) = v46;
    }
  }
  else
  {
    std::vector<std::string>::size_type v33 = v27 - v32;
    uint64_t v34 = *((void *)this + 7);
    if (v27 - v32 <= (v34 - (uint64_t)v31) >> 3)
    {
      bzero(*((void **)this + 6), 8 * v33);
      *((void *)this + 6) = &v31[v33];
    }
    else
    {
      uint64_t v77 = v26;
      if (v26 - v25 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v34 - v30;
      uint64_t v36 = v35 >> 2;
      if (v35 >> 2 <= v27) {
        uint64_t v36 = (v26 - v25) >> 3;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      uint64_t v83 = (char *)this + 56;
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v37);
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v39 = (void *)*((void *)this + 5);
      BOOL v40 = (void *)*((void *)this + 6);
      BOOL v41 = &v38[8 * v32];
      std::vector<std::pair<std::string, std::string>>::pointer v43 = &v38[8 * v42];
      bzero(v41, 8 * v33);
      std::vector<std::pair<std::string, std::string>>::pointer v44 = &v41[8 * v33];
      while (v40 != v39)
      {
        uint64_t v45 = *--v40;
        *BOOL v40 = 0;
        *((void *)v41 - 1) = v45;
        v41 -= 8;
      }
      long long v49 = *(_OWORD *)((char *)this + 40);
      *((void *)this + 5) = v41;
      *((void *)this + 6) = v44;
      long long v81 = v49;
      uint64_t v50 = *((void *)this + 7);
      *((void *)this + 7) = v43;
      uint64_t v82 = v50;
      std::string __p = (void *)v49;
      std::__split_buffer<std::unique_ptr<xgboost::TreeUpdater>>::~__split_buffer((uint64_t)&__p);
      uint64_t v26 = v77;
    }
  }
  if (v26 != v25)
  {
    if (v27 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v27;
    }
    uint64_t v78 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v29);
    for (uint64_t i = 0; i != v51; ++i)
    {
      int v53 = *(_DWORD *)(*(void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v23 + 32))(*v23, i) + 12);
      if (v53)
      {
        uint64_t v54 = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v23 + 32))(*v23, i);
        std::string::basic_string[abi:ne180100]<0>(&__p, "name");
        uint64_t v55 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(*(void *)*v54 + 24))(*v54, &__p);
        std::vector<std::pair<std::string, std::string>>::pointer v56 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v55);
        std::string::operator=((std::string *)(*v28 + 24 * i), (const std::string *)(v56 + 16));
        if (SHIBYTE(v81) < 0) {
          operator delete(__p);
        }
      }
      else
      {
        if (*(int *)(v78 + 4) >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)v84, 438, 1);
          for (uint64_t j = 0; j != 381; ++j)
            std::ostream::put();
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
          if (v85 < 0) {
            operator delete((void *)v84[0]);
          }
        }
        long long v58 = (xgboost::Value **)(*(uint64_t (**)(void, uint64_t))(*(void *)*v23 + 32))(*v23, i);
        std::vector<std::pair<std::string, std::string>>::pointer v59 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v58);
        std::string::operator=((std::string *)(*v28 + 24 * i), (const std::string *)(v59 + 16));
      }
      uint64_t v60 = xgboost::Metric::Create(*((void *)this + 68) + 24 * i, (uint64_t)this + 64);
      uint64_t v61 = *((void *)this + 5);
      uint64_t v62 = *(void *)(v61 + 8 * i);
      *(void *)(v61 + 8 * i) = v60;
      if (v62) {
        (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
      }
      if (v53)
      {
        uint64_t v63 = *(void *)(*((void *)this + 5) + 8 * i);
        uint64_t v64 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v23 + 32))(*v23, i);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v64);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v84, "generic_param");
  unsigned __int8 v65 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v76, v84);
  std::vector<std::pair<std::string, std::string>>::pointer v66 = (xgboost::GenericParameter *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v65);
  long long v81 = 0uLL;
  std::string __p = &v81;
  unsigned __int8 v67 = (void *)*((void *)v66 + 2);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v68 = (void *)((char *)v66 + 24);
  if (v67 != (void *)((char *)v66 + 24))
  {
    do
    {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v69 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v67[7]);
      v87[0] = (long long *)(v67 + 4);
      uint64_t v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, v87);
      std::vector<std::pair<std::string, std::string>>::pointer v66 = (xgboost::GenericParameter *)std::string::operator=((std::string *)(v70 + 7), (const std::string *)(v69 + 16));
      unsigned int v71 = (void *)v67[1];
      if (v71)
      {
        do
        {
          char v72 = v71;
          unsigned int v71 = (void *)*v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          char v72 = (void *)v67[2];
          BOOL v14 = *v72 == (void)v67;
          unsigned __int8 v67 = v72;
        }
        while (!v14);
      }
      unsigned __int8 v67 = v72;
    }
    while (v72 != v68);
  }
  if (*((unsigned char *)this + 64))
  {
    memset(&v79, 0, sizeof(v79));
    xgboost::GenericParameter::__MANAGER__(v66);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD71FC0, (uint64_t)this + 64, __p, &v81, 0, &v79, 0);
  }
  else
  {
    memset(&v79, 0, sizeof(v79));
    xgboost::GenericParameter::__MANAGER__(v66);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD71FC0, (uint64_t)this + 64, __p, &v81, &v79, 0);
    *((unsigned char *)this + 64) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (void *)v81);
  std::string __p = &v79;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v85 < 0) {
    operator delete((void *)v84[0]);
  }
  xgboost::GenericParameter::ConfigureGpuId((xgboost::LearnerConfiguration *)((char *)this + 64));
  atomic_store(1u, (unsigned __int8 *)this + 160);
}

void sub_22E9C5CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::LearnerConfiguration::SaveConfig(xgboost::LearnerConfiguration *this, xgboost::Json *a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 160);
  if (v3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    unint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Call Configure before saving model.", 35);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  xgboost::Version::Save(a2, a2);
}

void sub_22E9C6770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
}

void xgboost::LearnerIO::Save()
{
  uint64_t v1 = 0x300000000;
  long long v3 = 0uLL;
  uint64_t v0 = &unk_26E24E128;
  uint64_t v2 = &v3;
  operator new();
}

void sub_22E9C6E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerIO::Load(xgboost::LearnerIO *this, dmlc::Stream *a2)
{
  v29[0] = &unk_26E248A20;
  v29[1] = a2;
  long long v30 = 0u;
  long long v31 = 0u;
  xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v29, &v28, 2uLL);
  if (v28 == 123)
  {
    xgboost::common::ReadAll(&v27, a2, (xgboost::common::PeekableInStream *)v29);
    operator new();
  }
  memset(&v27, 0, sizeof(v27));
  if (*((char *)this + 615) < 0) {
    std::string::size_type v4 = *((void *)this + 75);
  }
  else {
    std::string::size_type v4 = *((unsigned __int8 *)this + 615);
  }
  std::string::resize(&v27, v4, 0);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &v27;
  }
  else {
    unint64_t v5 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v27.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = (void *)xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v29, v5, size);
  __p[0] = v7;
  if (*((char *)this + 615) < 0) {
    uint64_t v8 = *((void *)this + 75);
  }
  else {
    uint64_t v8 = *((unsigned __int8 *)this + 615);
  }
  uint64_t __dst = v8;
  if (v7 != (void *)v8) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v9 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v27.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = *((unsigned __int8 *)this + 615);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)this + 75);
  }
  if (v10 == v11)
  {
    if (v12 >= 0) {
      unint64_t v13 = (unsigned __int8 *)this + 592;
    }
    else {
      unint64_t v13 = (unsigned __int8 *)*((void *)this + 74);
    }
    if ((*((unsigned char *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v27.__r_.__value_.__l.__data_, v13, v27.__r_.__value_.__l.__size_)) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!*((unsigned char *)&v27.__r_.__value_.__s + 23)) {
        goto LABEL_33;
      }
      BOOL v14 = &v27;
      while (v14->__r_.__value_.__s.__data_[0] == *v13)
      {
        BOOL v14 = (std::string *)((char *)v14 + 1);
        ++v13;
        if (!--v9) {
          goto LABEL_33;
        }
      }
    }
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
  uint64_t v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: header == serialisation_header_", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
  for (uint64_t i = 0; i != 381; ++i)
    std::ostream::put();
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
LABEL_33:
  uint64_t __dst = -1;
  if (xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v29, &__dst, 8uLL) != 8) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  LODWORD(__p[0]) = 0;
  if (__dst >= 1)
  {
    unsigned __int8 v15 = (void *)__dst;
    xgboost::common::FixedSizeStream::FixedSizeStream((xgboost::common::FixedSizeStream *)v23, (xgboost::common::PeekableInStream *)v29);
    *(_OWORD *)std::string __p = v24;
    uint64_t v22 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    xgboost::common::FixedSizeStream::~FixedSizeStream(v23);
    if (v22 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    v23[0] = &unk_26E248458;
    v23[1] = v16;
    unint64_t v23[2] = v15;
    void v23[3] = 0;
    (*(void (**)(xgboost::LearnerIO *, void **))(*(void *)this + 104))(this, v23);
    xgboost::Json::Load();
  }
  dmlc::LogCheckFormat<long long,int>();
}

void sub_22E9C78EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v23 - 105) < 0) {
    operator delete(*(void **)(v23 - 128));
  }
  *(void *)(v23 - 96) = v22;
  if (*(char *)(v23 - 49) < 0) {
    operator delete(*(void **)(v23 - 72));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'xgboost::LearnerImpl::~LearnerImpl(xgboost::LearnerImpl *this)
{
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 8));
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 16));
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 16));
}

void non-virtual thunk to'xgboost::LearnerConfiguration::LoadConfig(xgboost::LearnerConfiguration *this, const xgboost::Json *a2)
{
}

void non-virtual thunk to'xgboost::LearnerConfiguration::SaveConfig(xgboost::LearnerConfiguration *this, xgboost::Json *a2)
{
}

void non-virtual thunk to'xgboost::LearnerIO::Load(xgboost::LearnerIO *this, dmlc::Stream *a2)
{
}

void non-virtual thunk to'xgboost::LearnerIO::Save()
{
}

void xgboost::LearnerConfiguration::~LearnerConfiguration(xgboost::LearnerConfiguration *this)
{
  *(void *)this = &unk_26E24C5C0;
  *((void *)this + 1) = &unk_26E24C6E0;
  *((void *)this + 2) = &unk_26E24C710;
  uint64_t v2 = (void *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  std::string::size_type v4 = v2 + 1;
  long long v3 = (uint64_t *)v2[1];
  if (v3)
  {
    unint64_t v5 = v2 + 1;
    uint64_t v6 = (void *)v2[1];
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v6 + 1;
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      uint64_t v6 = (void *)*v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= (unint64_t)this)
    {
      std::string::size_type v10 = v2 + 1;
      uint64_t v11 = (void *)v2[1];
      do
      {
        unint64_t v12 = v11[4];
        BOOL v13 = v12 >= (unint64_t)this;
        if (v12 >= (unint64_t)this) {
          BOOL v14 = v11;
        }
        else {
          BOOL v14 = v11 + 1;
        }
        if (v13) {
          std::string::size_type v10 = v11;
        }
        uint64_t v11 = (void *)*v14;
      }
      while (*v14);
      if (v10 != v4 && v10[4] <= (unint64_t)this)
      {
        unsigned __int8 v15 = (uint64_t *)v10[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            unsigned __int8 v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          uint64_t v17 = v10;
          do
          {
            uint64_t v16 = (uint64_t *)v17[2];
            BOOL v18 = *v16 == (void)v17;
            uint64_t v17 = v16;
          }
          while (!v18);
        }
        if ((uint64_t *)*v2 == v10) {
          *uint64_t v2 = v16;
        }
        --v2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v10);
        std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)(v10 + 5));
        operator delete(v10);
      }
    }
  }
  uint64_t v19 = (void **)((char *)this + 544);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  xgboost::common::Monitor::~Monitor((char **)this + 33);
  uint64_t v19 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  xgboost::Learner::~Learner(this);
}

uint64_t xgboost::LearnerConfiguration::GetConfigurationArguments(xgboost::LearnerConfiguration *this)
{
  return (uint64_t)this + 168;
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get()
{
  {
    uint64_t v2 = (void *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *uint64_t v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::Learner const*,xgboost::PredictionContainer>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst);
}

void xgboost::LearnerTrainParam::~LearnerTrainParam(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t std::map<xgboost::Learner const*,xgboost::PredictionContainer>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(*a1);
    std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(a1[1]);
    std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>(v2 + 16);
  }
  long long v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

char *std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = v5;
        unint64_t v8 = *((void *)v5 + 4);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    unint64_t v7 = (char *)operator new(0x50uLL);
    *((void *)v7 + 4) = *a3;
    *((void *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *uint64_t v6 = (uint64_t *)v7;
    std::string::size_type v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get()
{
  {
    uint64_t v2 = (void *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *uint64_t v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
}

uint64_t std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::LearnerTrainParam *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::LearnerTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71F78, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::LearnerTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71F78, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E9C83C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonObject,xgboost::Value>(_DWORD *a1)
{
  if (a1[3] == 3)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    std::string::size_type v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v20);
    unint64_t v5 = std::string::insert(&v20, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v21, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x300000000;
    v17[0] = 0;
    v17[1] = 0;
    v15[0] = &unk_26E24E128;
    uint64_t v16 = v17;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v19 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v10 = v19;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v24 = v11->__r_.__value_.__r.__words[2];
    long long v23 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v24 >= 0) {
      BOOL v13 = &v23;
    }
    else {
      BOOL v13 = (long long *)v23;
    }
    if (v24 >= 0) {
      uint64_t v14 = HIBYTE(v24);
    }
    else {
      uint64_t v14 = *((void *)&v23 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24E128;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v16, v17[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
  }
}

void sub_22E9C8664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a13);
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v33 - 49));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    unint64_t v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(void *a1, long long *a2)
{
  std::string::size_type v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "objective") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_22E9C882C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerModelParamLegacy::ToJson(xgboost::LearnerModelParamLegacy *this, float *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0x300000000;
  v16[0] = 0;
  v16[1] = 0;
  char v13 = &unk_26E24E128;
  unsigned __int8 v15 = v16;
  int v2 = xgboost::detail::ToCharsFloatImpl((xgboost::detail *)__src, *a2, (char *)a2);
  if (v2 >= 16) {
    int v3 = 16;
  }
  else {
    int v3 = v2;
  }
  if (v2 >= 16)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ret.ec == std::errc()", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v10);
  }
  std::string::basic_string[abi:ne180100](__dst, __src, v3);
  v10[0] = &unk_26E24E210;
  v10[1] = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)__dst;
  uint64_t v12 = v9;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "base_score");
  uint64_t v17 = __p;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v15, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v17);
  xgboost::Json::operator=();
}

void sub_22E9C8E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a32);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::emplace_back<std::string const&>(void *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 < v6) {
    std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>(*(void *)(v4 - 8), a2);
  }
  uint64_t v8 = (uint64_t)(v7 - *a1) >> 3;
  if (!((unint64_t)(v8 + 1) >> 61))
  {
    uint64_t v9 = v5 - *a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v13 = v12;
    uint64_t v14 = &v12[8 * v8];
    uint64_t v15 = (uint64_t)v14;
    uint64_t v16 = &v12[8 * v11];
    std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>((uint64_t)v14, a2);
  }
  std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
}

void sub_22E9C9030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>(uint64_t a1, long long *a2)
{
  xgboost::JsonString::JsonString(&v2, a2);
  operator new();
}

void sub_22E9C90E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<xgboost::Json>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 8) = 0;
      uint64_t v8 = *--a3;
      *(void *)(v7 - 8) = v8;
      *a3 = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 8;
      *((void *)&v14 + 1) -= 8;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(uint64_t **)(*(void *)(result + 8) + 8); v1 != i; ++v1)
  {
    uint64_t result = *v1;
    if (*v1)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<xgboost::Json>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<xgboost::Json>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v4 + 16) = v2 - 8;
      if (result)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          __dmb(9u);
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = v5;
    do
    {
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          uint64_t v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      uint64_t v7 = v9;
    }
    while (v9 != a3);
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](a1, v6);
    uint64_t v17 = (std::string *)a1[1];
    BOOL v18 = v17;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    void v15[2] = &v18;
    char v16 = 0;
    uint64_t v11 = v17;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(v11, (long long *)v5 + 2);
      char v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          char v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      uint64_t v11 = v18 + 2;
      v18 += 2;
      uint64_t v5 = v13;
    }
    while (v13 != a3);
    char v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_22E9C94D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t xgboost::common::ToString<unsigned int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v3);
}

void sub_22E9C9634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::ToString<int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v3);
}

void sub_22E9C977C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<xgboost::Json>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      char v25 = (char *)a1[3];
      uint64_t v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        uint64_t v35 = operator new(0x1000uLL);
        uint64_t v36 = &v32[8 * v24];
        unint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            uint64_t v76 = v35;
            uint64_t v77 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v78 = 1;
            }
            else {
              unint64_t v78 = v77;
            }
            std::vector<std::pair<std::string, std::string>> v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v78);
            uint64_t v36 = &v79[8 * (v78 >> 2)];
            unint64_t v37 = &v79[8 * v80];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v79;
            uint64_t v35 = v76;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        long long v81 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v81 >= v37)
            {
              if (v37 == v32) {
                unint64_t v87 = 1;
              }
              else {
                unint64_t v87 = (v37 - v32) >> 2;
              }
              std::vector<std::pair<std::string, std::string>>::pointer v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v87);
              uint64_t v90 = v88;
              uint64_t v36 = &v88[(2 * v87 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v92 = v81 - v32;
              BOOL v91 = v81 == v32;
              long long v81 = v36;
              if (!v91)
              {
                long long v81 = &v36[v92 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v93 = 8 * (v92 >> 3);
                size_t v94 = v36;
                size_t v95 = (uint64_t *)v32;
                do
                {
                  uint64_t v96 = *v95++;
                  *(void *)size_t v94 = v96;
                  v94 += 8;
                  v93 -= 8;
                }
                while (v93);
              }
              unint64_t v37 = &v88[8 * v89];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v90;
            }
            else
            {
              uint64_t v83 = (v37 - v81) >> 3;
              if (v83 >= -1) {
                uint64_t v84 = v83 + 1;
              }
              else {
                uint64_t v84 = v83 + 2;
              }
              uint64_t v85 = v84 >> 1;
              uint64_t v36 = &v32[8 * (v84 >> 1)];
              std::vector<std::pair<std::string, std::string>> v86 = v32;
              if (v81 != v32)
              {
                memmove(v36, v32, v81 - v32);
                std::vector<std::pair<std::string, std::string>> v86 = v81;
              }
              long long v81 = &v86[8 * v85];
            }
          }
          uint64_t v97 = *(void *)(i - 8);
          *((void *)v36 - 1) = v97;
          v36 -= 8;
        }
        uint64_t v98 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v81;
        a1[3] = v37;
        if (v98) {
          operator delete(v98);
        }
        goto LABEL_36;
      }
      char v28 = operator new(0x1000uLL);
      __n128 v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v54 = 1;
          }
          else {
            unint64_t v54 = (v25 - v4) >> 2;
          }
          uint64_t v55 = 2 * v54;
          std::vector<std::pair<std::string, std::string>>::pointer v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v54);
          uint64_t v4 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v58 = (uint64_t *)a1[1];
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v4;
          uint64_t v60 = a1[2] - (void)v58;
          if (v60)
          {
            std::vector<std::pair<std::string, std::string>>::pointer v59 = &v4[v60 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v61 = 8 * (v60 >> 3);
            uint64_t v62 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v63 = *v58++;
              *(void *)uint64_t v62 = v63;
              v62 += 8;
              v61 -= 8;
            }
            while (v61);
          }
          uint64_t v64 = (char *)*a1;
          *a1 = v56;
          a1[1] = v4;
          a1[2] = v59;
          a1[3] = &v56[8 * v57];
          if (v64)
          {
            operator delete(v64);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unsigned __int8 v65 = (char *)a1[1];
        std::vector<std::pair<std::string, std::string>>::pointer v66 = (char *)a1[2];
        a1[1] = v65 - 8;
        uint64_t v67 = *((void *)v65 - 1);
        a1[1] = v65;
        if (v66 == (char *)a1[3])
        {
          uint64_t v68 = (uint64_t)&v65[-*a1];
          if ((unint64_t)v65 <= *a1)
          {
            if (v66 == (char *)*a1) {
              unint64_t v99 = 1;
            }
            else {
              unint64_t v99 = (uint64_t)&v66[-*a1] >> 2;
            }
            unint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v99);
            unint64_t v102 = &v100[8 * (v99 >> 2)];
            uint64_t v103 = (uint64_t *)a1[1];
            std::vector<std::pair<std::string, std::string>>::pointer v66 = v102;
            uint64_t v104 = a1[2] - (void)v103;
            if (v104)
            {
              std::vector<std::pair<std::string, std::string>>::pointer v66 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v105 = 8 * (v104 >> 3);
              unint64_t v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)unint64_t v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            unint64_t v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v66;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              std::vector<std::pair<std::string, std::string>>::pointer v66 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v69 = v68 >> 3;
            BOOL v16 = v68 >> 3 < -1;
            uint64_t v70 = (v68 >> 3) + 2;
            if (v16) {
              uint64_t v71 = v70;
            }
            else {
              uint64_t v71 = v69 + 1;
            }
            uint64_t v72 = -(v71 >> 1);
            uint64_t v73 = v71 >> 1;
            char v74 = &v65[-8 * v73];
            int64_t v75 = v66 - v65;
            if (v66 != v65)
            {
              memmove(&v65[-8 * v73], v65, v66 - v65);
              unsigned __int8 v65 = (char *)a1[1];
            }
            std::vector<std::pair<std::string, std::string>>::pointer v66 = &v74[v75];
            a1[1] = &v65[8 * v72];
            a1[2] = &v74[v75];
          }
        }
        *(void *)std::vector<std::pair<std::string, std::string>>::pointer v66 = v67;
      }
      else
      {
        *(void *)uint64_t v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      uint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          std::vector<std::pair<std::string, std::string>>::pointer v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          uint64_t v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          std::string v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            uint64_t v5 = (char *)a1[1];
          }
          long long v23 = &v5[8 * v19];
          uint64_t v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    uint64_t v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = v8 + a1[4];
  }
  uint64_t v51 = *(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8];
  uint64_t v52 = v10 & 0x1FF;
  uint64_t v53 = *a2;
  *(void *)(v51 + 8 * v52) = *a2;
  if (v53)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 + 8), 1u, memory_order_relaxed);
    uint64_t v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_22E9C9C68(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22E9C9DA4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[17]>(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_22E9C9EAC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v10 = &a2[-2].n128_u64[1];
    uint64_t v98 = a2 - 3;
    unint64_t v100 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    long long v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v10, (void *)a1))
                {
                  __n128 v43 = *(__n128 *)a1;
                  unint64_t v102 = *(void *)(a1 + 16);
                  __n128 v101 = v43;
                  long long v44 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v44;
                  __n128 v45 = v101;
                  void v10[2] = v102;
                  *(__n128 *)unint64_t v10 = v45;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            uint64_t v46 = (__n128 *)(a1 + 24);
            BOOL v48 = (__n128 *)a1 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v51 = n128_u64;
                  n128_u64 = v46->n128_u64;
                  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v46, v51))
                  {
                    __n128 v52 = *(__n128 *)n128_u64;
                    unint64_t v102 = n128_u64[2];
                    __n128 v101 = v52;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v53 = v49;
                    while (1)
                    {
                      uint64_t v54 = a1 + v53;
                      *(_OWORD *)(v54 + 24) = *(_OWORD *)(a1 + v53);
                      *(void *)(v54 + 40) = *(void *)(a1 + v53 + 16);
                      *(unsigned char *)(v54 + 23) = 0;
                      *(unsigned char *)uint64_t v54 = 0;
                      if (!v53) {
                        break;
                      }
                      v53 -= 24;
                      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v101, (void *)(v53 + a1)))
                      {
                        uint64_t v55 = a1 + v53 + 24;
                        goto LABEL_88;
                      }
                    }
                    uint64_t v55 = a1;
LABEL_88:
                    __n128 v56 = v101;
                    *(void *)(v55 + 16) = v102;
                    *(__n128 *)uint64_t v55 = v56;
                  }
                  uint64_t v46 = (__n128 *)(n128_u64 + 3);
                  v49 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v48)
            {
              unint64_t v91 = a1 - 24;
              do
              {
                uint64_t v92 = (void *)a1;
                a1 = (unint64_t)v46;
                if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v46, v92))
                {
                  __n128 v93 = *(__n128 *)a1;
                  unint64_t v102 = *(void *)(a1 + 16);
                  __n128 v101 = v93;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v94 = v91;
                  do
                  {
                    *(_OWORD *)(v94 + 48) = *(_OWORD *)(v94 + 24);
                    *(void *)(v94 + 64) = *(void *)(v94 + 40);
                    *(unsigned char *)(v94 + 47) = 0;
                    *(unsigned char *)(v94 + 24) = 0;
                    BOOL v95 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v101, (void *)v94);
                    v94 -= 24;
                  }
                  while (v95);
                  __n128 v96 = v101;
                  *(void *)(v94 + 64) = v102;
                  *(__n128 *)(v94 + 48) = v96;
                }
                uint64_t v46 = (__n128 *)(a1 + 24);
                v91 += 24;
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v57 = (unint64_t)(v14 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  unint64_t v61 = a1 + 24 * v60;
                  if (2 * v58 + 2 < v14
                    && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)(a1 + 24 * v60), (void *)(v61 + 24)))
                  {
                    v61 += 24;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  uint64_t v62 = (__n128 *)(a1 + 24 * v59);
                  if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)v61, v62))
                  {
                    __n128 v63 = *v62;
                    unint64_t v102 = v62[1].n128_u64[0];
                    __n128 v101 = v63;
                    v62->n128_u64[1] = 0;
                    v62[1].n128_u64[0] = 0;
                    v62->n128_u64[0] = 0;
                    do
                    {
                      uint64_t v64 = (__n128 *)v61;
                      __n128 v65 = *(__n128 *)v61;
                      v62[1].n128_u64[0] = *(void *)(v61 + 16);
                      *uint64_t v62 = v65;
                      *(unsigned char *)(v61 + 23) = 0;
                      *(unsigned char *)unint64_t v61 = 0;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v66 = (2 * v60) | 1;
                      unint64_t v61 = a1 + 24 * v66;
                      uint64_t v67 = 2 * v60 + 2;
                      if (v67 < v14
                        && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)(a1 + 24 * v66), (void *)(v61 + 24)))
                      {
                        v61 += 24;
                        uint64_t v66 = v67;
                      }
                      uint64_t v62 = v64;
                      uint64_t v60 = v66;
                    }
                    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)v61, &v101));
                    __n128 v68 = v101;
                    v64[1].n128_u64[0] = v102;
                    *uint64_t v64 = v68;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              int64_t v69 = v13 / 0x18uLL;
              uint64_t v70 = v100;
              do
              {
                uint64_t v71 = 0;
                uint64_t v72 = v70;
                unint64_t v97 = *(void *)a1;
                v103.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v103.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v99 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v73 = v69 - 2;
                if (v69 < 2) {
                  uint64_t v73 = v69 - 1;
                }
                uint64_t v74 = v73 >> 1;
                unint64_t v75 = a1;
                do
                {
                  uint64_t v76 = v75 + 24 * v71 + 24;
                  uint64_t v77 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v78 = v77 + 2;
                  if (v77 + 2 < v69
                    && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)v76, (void *)(v76 + 24)))
                  {
                    v76 += 24;
                    uint64_t v71 = v78;
                  }
                  if (*(char *)(v75 + 23) < 0) {
                    operator delete(*(void **)v75);
                  }
                  __n128 v79 = *(__n128 *)v76;
                  *(void *)(v75 + 16) = *(void *)(v76 + 16);
                  *(__n128 *)unint64_t v75 = v79;
                  *(unsigned char *)(v76 + 23) = 0;
                  *(unsigned char *)uint64_t v76 = 0;
                  unint64_t v75 = v76;
                }
                while (v71 <= v74);
                uint64_t v70 = (__n128 *)((char *)v72 - 24);
                if ((__int8 *)v76 == &v72[-2].n128_i8[8])
                {
                  *(void *)uint64_t v76 = v97;
                  uint64_t v89 = *(uint64_t *)((char *)v103.n128_i64 + 7);
                  *(void *)(v76 + 8) = v103.n128_u64[0];
                  *(void *)(v76 + 15) = v89;
                  *(unsigned char *)(v76 + 23) = v99;
                }
                else
                {
                  __n128 v80 = *v70;
                  *(void *)(v76 + 16) = v72[-1].n128_u64[1];
                  *(__n128 *)uint64_t v76 = v80;
                  v72[-2].n128_u64[1] = v97;
                  unint64_t v81 = v103.n128_u64[0];
                  *(unint64_t *)((char *)v72[-1].n128_u64 + 7) = *(unint64_t *)((char *)v103.n128_u64 + 7);
                  v72[-1].n128_u64[0] = v81;
                  v72[-1].n128_u8[15] = v99;
                  uint64_t v82 = v76 - a1 + 24;
                  if (v82 >= 25)
                  {
                    unint64_t v83 = (v82 / 0x18uLL - 2) >> 1;
                    unint64_t v84 = a1 + 24 * v83;
                    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)v84, (void *)v76))
                    {
                      __n128 v85 = *(__n128 *)v76;
                      unint64_t v102 = *(void *)(v76 + 16);
                      __n128 v101 = v85;
                      *(void *)(v76 + 8) = 0;
                      *(void *)(v76 + 16) = 0;
                      *(void *)uint64_t v76 = 0;
                      do
                      {
                        uint64_t v86 = v84;
                        long long v87 = *(_OWORD *)v84;
                        *(void *)(v76 + 16) = *(void *)(v84 + 16);
                        *(_OWORD *)uint64_t v76 = v87;
                        *(unsigned char *)(v84 + 23) = 0;
                        *(unsigned char *)unint64_t v84 = 0;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unint64_t v84 = a1 + 24 * v83;
                        uint64_t v76 = v86;
                      }
                      while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)v84, &v101));
                      __n128 v88 = v101;
                      *(void *)(v86 + 16) = v102;
                      *(__n128 *)uint64_t v86 = v88;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          BOOL v16 = (void *)(a1 + 24 * ((unint64_t)v14 >> 1));
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v16, (void *)a1, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, v16, v10);
            uint64_t v17 = 3 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24), (void *)(a1 + 8 * v17 - 24), v98);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 8 * v17), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 8 * v17 - 24), v16, (void *)(a1 + 24 + 8 * v17));
            __n128 v18 = *(__n128 *)a1;
            unint64_t v102 = *(void *)(a1 + 16);
            __n128 v101 = v18;
            uint64_t v19 = v16[2];
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v19;
            __n128 v20 = v101;
            void v16[2] = v102;
            *(__n128 *)BOOL v16 = v20;
          }
          --a3;
          if ((a4 & 1) != 0
            || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)(a1 - 24), (void *)a1))
          {
            break;
          }
          __n128 v33 = *(__n128 *)a1;
          unint64_t v104 = *(void *)(a1 + 16);
          __n128 v103 = v33;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v10))
          {
            long long v12 = (__n128 *)a1;
            do
              long long v12 = (__n128 *)((char *)v12 + 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v12));
          }
          else
          {
            uint64_t v34 = (__n128 *)(a1 + 24);
            do
            {
              long long v12 = v34;
              if (v34 >= a2) {
                break;
              }
              BOOL v35 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v34);
              uint64_t v34 = (__n128 *)((char *)v12 + 24);
            }
            while (!v35);
          }
          uint64_t v36 = a2;
          if (v12 < a2)
          {
            uint64_t v36 = a2;
            do
              uint64_t v36 = (__n128 *)((char *)v36 - 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v36));
          }
          while (v12 < v36)
          {
            __n128 v37 = *v12;
            unint64_t v102 = v12[1].n128_u64[0];
            __n128 v101 = v37;
            __n128 v38 = *v36;
            v12[1].n128_u64[0] = v36[1].n128_u64[0];
            *long long v12 = v38;
            __n128 v39 = v101;
            v36[1].n128_u64[0] = v102;
            *uint64_t v36 = v39;
            do
              long long v12 = (__n128 *)((char *)v12 + 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v12));
            do
              uint64_t v36 = (__n128 *)((char *)v36 - 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v103, v36));
          }
          unint64_t v40 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v41 = *(_OWORD *)v40;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v41;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v42 = v103;
          v12[-1].n128_u64[1] = v104;
          *(__n128 *)unint64_t v40 = v42;
        }
        uint64_t v21 = 0;
        __n128 v22 = *(__n128 *)a1;
        unint64_t v104 = *(void *)(a1 + 16);
        __n128 v103 = v22;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
          v21 += 24;
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)(v21 + a1), &v103));
        unint64_t v23 = a1 + v21;
        uint64_t v24 = v100;
        if (v21 == 24)
        {
          uint64_t v24 = v100;
          do
          {
            if (v23 >= (unint64_t)v24) {
              break;
            }
            uint64_t v24 = (__n128 *)((char *)v24 - 24);
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v24, &v103));
        }
        else
        {
          do
            uint64_t v24 = (__n128 *)((char *)v24 - 24);
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v24, &v103));
        }
        long long v12 = (__n128 *)(a1 + v21);
        if (v23 < (unint64_t)v24)
        {
          char v25 = v24;
          do
          {
            __n128 v26 = *v12;
            unint64_t v102 = v12[1].n128_u64[0];
            __n128 v101 = v26;
            __n128 v27 = *v25;
            v12[1].n128_u64[0] = v25[1].n128_u64[0];
            *long long v12 = v27;
            __n128 v28 = v101;
            v25[1].n128_u64[0] = v102;
            *char v25 = v28;
            do
              long long v12 = (__n128 *)((char *)v12 + 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, &v103));
            do
              char v25 = (__n128 *)((char *)v25 - 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v25, &v103));
          }
          while (v12 < v25);
        }
        __n128 v29 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v30 = *(_OWORD *)v29;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v30;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v31 = v103;
        v12[-1].n128_u64[1] = v104;
        *(__n128 *)__n128 v29 = v31;
        BOOL v4 = v23 >= (unint64_t)v24;
        a2 = v100;
        if (v4) {
          break;
        }
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v100))
      {
        break;
      }
      if (!v32) {
        goto LABEL_36;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v32) {
      continue;
    }
    break;
  }
}

BOOL std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void *a1, void *a2, void *a3)
{
  BOOL v6 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1);
  BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1[2];
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1);
    if (result)
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 24);
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a2[-2].n128_u64[1], a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *BOOL v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      uint64_t v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *uint64_t v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v17, (void *)v15 + 3))
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    uint64_t v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3))
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2))
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a4))
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3))
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2))
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  int v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  BOOL v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::deque<xgboost::Json>::~deque[abi:ne180100](uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    int v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = &v2[v5 >> 9];
    uint64_t v7 = (atomic_uint **)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (atomic_uint **)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        if (*v7 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          __dmb(9u);
          (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          long long v10 = (atomic_uint **)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (atomic_uint **)v8);
      int v2 = *(void ***)(a1 + 8);
      int v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 512;
LABEL_17:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void xgboost::LearnerImpl::CheckDataSplitMode(xgboost::LearnerImpl *this)
{
  Engine = rabit::engine::GetEngine(this);
  if ((*(unsigned int (**)(void *))(*(void *)Engine + 80))(Engine))
  {
    int v3 = *((_DWORD *)this + 121);
    if (!v3)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: tparam_.dsplit != DataSplitMode::kAuto", 52);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Precondition violated; dsplit cannot be 'auto' in distributed mode",
        66);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v11);
      int v3 = *((_DWORD *)this + 121);
    }
    if (v3 == 1)
    {
      unint64_t v4 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v4, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      unint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Column-wise data split is currently not supported.", 50);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
  }
}

void sub_22E9CB144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::LearnerImpl::ValidateDMatrix(xgboost::LearnerImpl *this, xgboost::DMatrix *a2, int a3)
{
  BOOL v6 = (xgboost::MetaInfo *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  xgboost::MetaInfo::Validate(v6);
  if ((*((_DWORD *)this + 121) & 0xFFFFFFFD) == 0)
  {
    uint64_t v8 = (_DWORD *)((char *)this + 468);
    if (a3)
    {
      if (*(void *)((**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) + 8) != *v8) {
        dmlc::LogCheckFormat<unsigned int,unsigned long long>();
      }
    }
    else if (*(void *)((**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) + 8) > (unint64_t)*v8)
    {
      dmlc::LogCheckFormat<unsigned int,unsigned long long>();
    }
  }
  if (!*(void *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2)
    && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v13, (uint64_t)__p, 1350, 1);
    uint64_t v9 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Empty dataset at worker: ", 25);
    Engine = rabit::engine::GetEngine(v9);
    (*(void (**)(void *))(*(void *)Engine + 64))(Engine);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22E9CB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v17 = a16;
  a16 = 0;
  if (v17) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a16, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::LearnerImpl::PredictRaw(xgboost::LearnerImpl *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*((void *)this + 4))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    uint64_t v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: gbm_ != nullptr", 29);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Predict must happen after Load or configuration", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  xgboost::LearnerImpl::ValidateDMatrix(this, a2, 0);
  return (*(uint64_t (**)(void, xgboost::DMatrix *, xgboost::PredictionCacheEntry *, uint64_t, uint64_t, uint64_t))(**((void **)this + 4) + 88))(*((void *)this + 4), a2, a3, a4, a5, a6);
}

void sub_22E9CB5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *std::vector<std::pair<std::string,std::string>>::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    unint64_t v6 = 0;
    __n128 v7 = v5;
    do
    {
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          __n128 v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      __n128 v7 = v9;
    }
    while (v9 != a3);
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](a1, v6);
    char v17 = (std::string *)a1[1];
    long long v18 = v17;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    void v15[2] = &v18;
    char v16 = 0;
    char v11 = v17;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(v11, (long long *)v5 + 2);
      char v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          char v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          unint64_t v5 = v13;
        }
        while (!v10);
      }
      char v11 = v18 + 2;
      v18 += 2;
      unint64_t v5 = v13;
    }
    while (v13 != a3);
    char v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_22E9CB740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void xgboost::common::ReadAll(std::string *a1, void *lpsrc, xgboost::common::PeekableInStream *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (lpsrc
  {
    unint64_t v6 = v5;
    (*(void (**)(void *, uint64_t))(*(void *)v5 + 32))(v5, -1);
    __n128 v7 = (void *)(*(uint64_t (**)(void *))(*(void *)v6 + 40))(v6);
    v9[0] = v7;
    std::string::resize(a1, (std::string::size_type)v7, 0);
    (*(void (**)(void *, void))(*(void *)v6 + 32))(v6, 0);
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = (uint64_t *)a1;
    }
    else {
      uint64_t v8 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    }
    if ((void *)(**(uint64_t (***)(void *, uint64_t *, void *))v6)(v6, v8, v7) != v7) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
  else
  {
    xgboost::common::FixedSizeStream::FixedSizeStream((xgboost::common::FixedSizeStream *)v9, a3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
    a1->__r_.__value_.__r.__words[2] = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    xgboost::common::FixedSizeStream::~FixedSizeStream(v9);
  }
}

void sub_22E9CB9A8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2 - 40, v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      __n128 v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          __n128 v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  __n128 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    __n128 v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22E9CBC2C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22E9CBCC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22E9CBD1C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    __n128 v7 = result[1];
    std::string *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    char v16 = v8;
    char v17 = (const void **)v8;
    if (v8)
    {
      char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          char v17 = (const void **)v16;
          if (v16) {
            char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_22E9CBEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    __n128 result = v5 + 1;
  }
  else
  {
    __n128 result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_22E9CC058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<unsigned int>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    int v4 = *(char *)(v2 + 47);
    if (v4 >= 0) {
      uint64_t v5 = v2 + 24;
    }
    else {
      uint64_t v5 = *(void *)(v2 + 24);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v6 = *(void *)(v2 + 32);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v11 = *(void *)(v2 + 48);
    uint64_t v10 = v2 + 48;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  *(_DWORD *)(a2 + *(void *)(result + 96)) = *(_DWORD *)(result + 104);
  return result;
}

void sub_22E9CC1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x230FA7C90](v34, a2 + *(void *)(a1 + 96));
  uint64_t v6 = v34[0];
  int v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      int v8 = std::istream::get();
      if (v8 == -1)
      {
        std::ios_base::iostate v10 = 0;
        uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      uint64_t v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    std::ios_base::iostate v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    uint64_t v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    int v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      uint64_t v15 = a1 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v16 = *(void *)(a1 + 32);
    }
    std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v20 = a1 + 48;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v20 + 8);
    }
    char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    __n128 v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a3 + 8);
    }
    long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  void v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E9CC59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::Check(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 108))
  {
    unsigned int v3 = *(_DWORD *)(result + 112);
    if (*(unsigned char *)(result + 109))
    {
      if (v2 < v3 || v2 > *(_DWORD *)(result + 116))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        uint64_t v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        std::ios_base::iostate v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        uint64_t v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        int v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      uint64_t v47 = (void *)std::ostream::operator<<();
      BOOL v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      __n128 v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      uint64_t v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      int64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      int64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      __n128 v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 109) && v2 > *(_DWORD *)(result + 116))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    int v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    std::string v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    __n128 v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    __n128 v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    __n128 v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    __n128 v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E9CCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, void))(*a1 + 64))(a1, v5, *(unsigned int *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E9CCC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E9CCE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::PrintDefaultValueString(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned int *, uint64_t, void))(*(void *)a1 + 64))(a1, a2, a1[26]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::set_range(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 112) = a2;
  *(_DWORD *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

void dmlc::parameter::FieldEntry<xgboost::DataSplitMode>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<long long>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    int v4 = *(char *)(v2 + 47);
    if (v4 >= 0) {
      uint64_t v5 = v2 + 24;
    }
    else {
      uint64_t v5 = *(void *)(v2 + 24);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v6 = *(void *)(v2 + 32);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v11 = *(void *)(v2 + 48);
    uint64_t v10 = v2 + 48;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  *(void *)(a2 + *(void *)(result + 96)) = *(void *)(result + 104);
  return result;
}

void sub_22E9CD12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}